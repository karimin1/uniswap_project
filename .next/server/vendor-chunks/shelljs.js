/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/shelljs";
exports.ids = ["vendor-chunks/shelljs"];
exports.modules = {

/***/ "(ssr)/./node_modules/shelljs/commands.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/commands.js ***!
  \******************************************/
/***/ ((module) => {

eval("module.exports = [\n  'cat',\n  'cd',\n  'chmod',\n  'cp',\n  'dirs',\n  'echo',\n  'exec',\n  'find',\n  'grep',\n  'head',\n  'ln',\n  'ls',\n  'mkdir',\n  'mv',\n  'pwd',\n  'rm',\n  'sed',\n  'set',\n  'sort',\n  'tail',\n  'tempdir',\n  'test',\n  'to',\n  'toEnd',\n  'touch',\n  'uniq',\n  'which',\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9jb21tYW5kcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL2NvbW1hbmRzLmpzPzY0YzkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjYXQnLFxuICAnY2QnLFxuICAnY2htb2QnLFxuICAnY3AnLFxuICAnZGlycycsXG4gICdlY2hvJyxcbiAgJ2V4ZWMnLFxuICAnZmluZCcsXG4gICdncmVwJyxcbiAgJ2hlYWQnLFxuICAnbG4nLFxuICAnbHMnLFxuICAnbWtkaXInLFxuICAnbXYnLFxuICAncHdkJyxcbiAgJ3JtJyxcbiAgJ3NlZCcsXG4gICdzZXQnLFxuICAnc29ydCcsXG4gICd0YWlsJyxcbiAgJ3RlbXBkaXInLFxuICAndGVzdCcsXG4gICd0bycsXG4gICd0b0VuZCcsXG4gICd0b3VjaCcsXG4gICd1bmlxJyxcbiAgJ3doaWNoJyxcbl07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/commands.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/shell.js":
/*!***************************************!*\
  !*** ./node_modules/shelljs/shell.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("//\n// ShellJS\n// Unix shell commands on top of Node's API\n//\n// Copyright (c) 2012 Artur Adib\n// http://github.com/shelljs/shelljs\n//\n\nvar common = __webpack_require__(/*! ./src/common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\n//@\n//@ All commands run synchronously, unless otherwise stated.\n//@ All commands accept standard bash globbing characters (`*`, `?`, etc.),\n//@ compatible with the [node `glob` module](https://github.com/isaacs/node-glob).\n//@\n//@ For less-commonly used commands and features, please check out our [wiki\n//@ page](https://github.com/shelljs/shelljs/wiki).\n//@\n\n// Include the docs for all the default commands\n//@commands\n\n// Load all default commands\n(__webpack_require__(/*! ./commands */ \"(ssr)/./node_modules/shelljs/commands.js\").forEach)(function (command) {\n  __webpack_require__(\"(ssr)/./node_modules/shelljs/src sync recursive ^\\\\.\\\\/.*$\")(\"./\" + command);\n});\n\n//@\n//@ ### exit(code)\n//@\n//@ Exits the current process with the given exit `code`.\nexports.exit = process.exit;\n\n//@include ./src/error\nexports.error = __webpack_require__(/*! ./src/error */ \"(ssr)/./node_modules/shelljs/src/error.js\");\n\n//@include ./src/common\nexports.ShellString = common.ShellString;\n\n//@\n//@ ### env['VAR_NAME']\n//@\n//@ Object containing environment variables (both getter and setter). Shortcut\n//@ to `process.env`.\nexports.env = process.env;\n\n//@\n//@ ### Pipes\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('foo', 'file1.txt', 'file2.txt').sed(/o/g, 'a').to('output.txt');\n//@ echo('files with o\\'s in the name:\\n' + ls().grep('o'));\n//@ cat('test.js').exec('node'); // pipe to exec() call\n//@ ```\n//@\n//@ Commands can send their output to another command in a pipe-like fashion.\n//@ `sed`, `grep`, `cat`, `exec`, `to`, and `toEnd` can appear on the right-hand\n//@ side of a pipe. Pipes can be chained.\n\n//@\n//@ ## Configuration\n//@\n\nexports.config = common.config;\n\n//@\n//@ ### config.silent\n//@\n//@ Example:\n//@\n//@ ```javascript\n//@ var sh = require('shelljs');\n//@ var silentState = sh.config.silent; // save old silent state\n//@ sh.config.silent = true;\n//@ /* ... */\n//@ sh.config.silent = silentState; // restore old silent state\n//@ ```\n//@\n//@ Suppresses all command output if `true`, except for `echo()` calls.\n//@ Default is `false`.\n\n//@\n//@ ### config.fatal\n//@\n//@ Example:\n//@\n//@ ```javascript\n//@ require('shelljs/global');\n//@ config.fatal = true; // or set('-e');\n//@ cp('this_file_does_not_exist', '/dev/null'); // throws Error here\n//@ /* more commands... */\n//@ ```\n//@\n//@ If `true`, the script will throw a Javascript error when any shell.js\n//@ command encounters an error. Default is `false`. This is analogous to\n//@ Bash's `set -e`.\n\n//@\n//@ ### config.verbose\n//@\n//@ Example:\n//@\n//@ ```javascript\n//@ config.verbose = true; // or set('-v');\n//@ cd('dir/');\n//@ rm('-rf', 'foo.txt', 'bar.txt');\n//@ exec('echo hello');\n//@ ```\n//@\n//@ Will print each command as follows:\n//@\n//@ ```\n//@ cd dir/\n//@ rm -rf foo.txt bar.txt\n//@ exec echo hello\n//@ ```\n\n//@\n//@ ### config.globOptions\n//@\n//@ Example:\n//@\n//@ ```javascript\n//@ config.globOptions = {nodir: true};\n//@ ```\n//@\n//@ Use this value for calls to `glob.sync()` instead of the default options.\n\n//@\n//@ ### config.reset()\n//@\n//@ Example:\n//@\n//@ ```javascript\n//@ var shell = require('shelljs');\n//@ // Make changes to shell.config, and do stuff...\n//@ /* ... */\n//@ shell.config.reset(); // reset to original state\n//@ // Do more stuff, but with original settings\n//@ /* ... */\n//@ ```\n//@\n//@ Reset `shell.config` to the defaults:\n//@\n//@ ```javascript\n//@ {\n//@   fatal: false,\n//@   globOptions: {},\n//@   maxdepth: 255,\n//@   noglob: false,\n//@   silent: false,\n//@   verbose: false,\n//@ }\n//@ ```\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zaGVsbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsZ0VBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJGQUE2QjtBQUM3QixFQUFFLGtGQUFRLElBQVEsVUFBVSxDQUFDO0FBQzdCLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0EsbUdBQXNDOztBQUV0QztBQUNBLG1CQUFtQjs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NoZWxsanMvc2hlbGwuanM/ZTgwYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy8gU2hlbGxKU1xuLy8gVW5peCBzaGVsbCBjb21tYW5kcyBvbiB0b3Agb2YgTm9kZSdzIEFQSVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMiBBcnR1ciBBZGliXG4vLyBodHRwOi8vZ2l0aHViLmNvbS9zaGVsbGpzL3NoZWxsanNcbi8vXG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuL3NyYy9jb21tb24nKTtcblxuLy9AXG4vL0AgQWxsIGNvbW1hbmRzIHJ1biBzeW5jaHJvbm91c2x5LCB1bmxlc3Mgb3RoZXJ3aXNlIHN0YXRlZC5cbi8vQCBBbGwgY29tbWFuZHMgYWNjZXB0IHN0YW5kYXJkIGJhc2ggZ2xvYmJpbmcgY2hhcmFjdGVycyAoYCpgLCBgP2AsIGV0Yy4pLFxuLy9AIGNvbXBhdGlibGUgd2l0aCB0aGUgW25vZGUgYGdsb2JgIG1vZHVsZV0oaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy9ub2RlLWdsb2IpLlxuLy9AXG4vL0AgRm9yIGxlc3MtY29tbW9ubHkgdXNlZCBjb21tYW5kcyBhbmQgZmVhdHVyZXMsIHBsZWFzZSBjaGVjayBvdXQgb3VyIFt3aWtpXG4vL0AgcGFnZV0oaHR0cHM6Ly9naXRodWIuY29tL3NoZWxsanMvc2hlbGxqcy93aWtpKS5cbi8vQFxuXG4vLyBJbmNsdWRlIHRoZSBkb2NzIGZvciBhbGwgdGhlIGRlZmF1bHQgY29tbWFuZHNcbi8vQGNvbW1hbmRzXG5cbi8vIExvYWQgYWxsIGRlZmF1bHQgY29tbWFuZHNcbnJlcXVpcmUoJy4vY29tbWFuZHMnKS5mb3JFYWNoKGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gIHJlcXVpcmUoJy4vc3JjLycgKyBjb21tYW5kKTtcbn0pO1xuXG4vL0Bcbi8vQCAjIyMgZXhpdChjb2RlKVxuLy9AXG4vL0AgRXhpdHMgdGhlIGN1cnJlbnQgcHJvY2VzcyB3aXRoIHRoZSBnaXZlbiBleGl0IGBjb2RlYC5cbmV4cG9ydHMuZXhpdCA9IHByb2Nlc3MuZXhpdDtcblxuLy9AaW5jbHVkZSAuL3NyYy9lcnJvclxuZXhwb3J0cy5lcnJvciA9IHJlcXVpcmUoJy4vc3JjL2Vycm9yJyk7XG5cbi8vQGluY2x1ZGUgLi9zcmMvY29tbW9uXG5leHBvcnRzLlNoZWxsU3RyaW5nID0gY29tbW9uLlNoZWxsU3RyaW5nO1xuXG4vL0Bcbi8vQCAjIyMgZW52WydWQVJfTkFNRSddXG4vL0Bcbi8vQCBPYmplY3QgY29udGFpbmluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgKGJvdGggZ2V0dGVyIGFuZCBzZXR0ZXIpLiBTaG9ydGN1dFxuLy9AIHRvIGBwcm9jZXNzLmVudmAuXG5leHBvcnRzLmVudiA9IHByb2Nlc3MuZW52O1xuXG4vL0Bcbi8vQCAjIyMgUGlwZXNcbi8vQFxuLy9AIEV4YW1wbGVzOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIGdyZXAoJ2ZvbycsICdmaWxlMS50eHQnLCAnZmlsZTIudHh0Jykuc2VkKC9vL2csICdhJykudG8oJ291dHB1dC50eHQnKTtcbi8vQCBlY2hvKCdmaWxlcyB3aXRoIG9cXCdzIGluIHRoZSBuYW1lOlxcbicgKyBscygpLmdyZXAoJ28nKSk7XG4vL0AgY2F0KCd0ZXN0LmpzJykuZXhlYygnbm9kZScpOyAvLyBwaXBlIHRvIGV4ZWMoKSBjYWxsXG4vL0AgYGBgXG4vL0Bcbi8vQCBDb21tYW5kcyBjYW4gc2VuZCB0aGVpciBvdXRwdXQgdG8gYW5vdGhlciBjb21tYW5kIGluIGEgcGlwZS1saWtlIGZhc2hpb24uXG4vL0AgYHNlZGAsIGBncmVwYCwgYGNhdGAsIGBleGVjYCwgYHRvYCwgYW5kIGB0b0VuZGAgY2FuIGFwcGVhciBvbiB0aGUgcmlnaHQtaGFuZFxuLy9AIHNpZGUgb2YgYSBwaXBlLiBQaXBlcyBjYW4gYmUgY2hhaW5lZC5cblxuLy9AXG4vL0AgIyMgQ29uZmlndXJhdGlvblxuLy9AXG5cbmV4cG9ydHMuY29uZmlnID0gY29tbW9uLmNvbmZpZztcblxuLy9AXG4vL0AgIyMjIGNvbmZpZy5zaWxlbnRcbi8vQFxuLy9AIEV4YW1wbGU6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgdmFyIHNoID0gcmVxdWlyZSgnc2hlbGxqcycpO1xuLy9AIHZhciBzaWxlbnRTdGF0ZSA9IHNoLmNvbmZpZy5zaWxlbnQ7IC8vIHNhdmUgb2xkIHNpbGVudCBzdGF0ZVxuLy9AIHNoLmNvbmZpZy5zaWxlbnQgPSB0cnVlO1xuLy9AIC8qIC4uLiAqL1xuLy9AIHNoLmNvbmZpZy5zaWxlbnQgPSBzaWxlbnRTdGF0ZTsgLy8gcmVzdG9yZSBvbGQgc2lsZW50IHN0YXRlXG4vL0AgYGBgXG4vL0Bcbi8vQCBTdXBwcmVzc2VzIGFsbCBjb21tYW5kIG91dHB1dCBpZiBgdHJ1ZWAsIGV4Y2VwdCBmb3IgYGVjaG8oKWAgY2FsbHMuXG4vL0AgRGVmYXVsdCBpcyBgZmFsc2VgLlxuXG4vL0Bcbi8vQCAjIyMgY29uZmlnLmZhdGFsXG4vL0Bcbi8vQCBFeGFtcGxlOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIHJlcXVpcmUoJ3NoZWxsanMvZ2xvYmFsJyk7XG4vL0AgY29uZmlnLmZhdGFsID0gdHJ1ZTsgLy8gb3Igc2V0KCctZScpO1xuLy9AIGNwKCd0aGlzX2ZpbGVfZG9lc19ub3RfZXhpc3QnLCAnL2Rldi9udWxsJyk7IC8vIHRocm93cyBFcnJvciBoZXJlXG4vL0AgLyogbW9yZSBjb21tYW5kcy4uLiAqL1xuLy9AIGBgYFxuLy9AXG4vL0AgSWYgYHRydWVgLCB0aGUgc2NyaXB0IHdpbGwgdGhyb3cgYSBKYXZhc2NyaXB0IGVycm9yIHdoZW4gYW55IHNoZWxsLmpzXG4vL0AgY29tbWFuZCBlbmNvdW50ZXJzIGFuIGVycm9yLiBEZWZhdWx0IGlzIGBmYWxzZWAuIFRoaXMgaXMgYW5hbG9nb3VzIHRvXG4vL0AgQmFzaCdzIGBzZXQgLWVgLlxuXG4vL0Bcbi8vQCAjIyMgY29uZmlnLnZlcmJvc2Vcbi8vQFxuLy9AIEV4YW1wbGU6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgY29uZmlnLnZlcmJvc2UgPSB0cnVlOyAvLyBvciBzZXQoJy12Jyk7XG4vL0AgY2QoJ2Rpci8nKTtcbi8vQCBybSgnLXJmJywgJ2Zvby50eHQnLCAnYmFyLnR4dCcpO1xuLy9AIGV4ZWMoJ2VjaG8gaGVsbG8nKTtcbi8vQCBgYGBcbi8vQFxuLy9AIFdpbGwgcHJpbnQgZWFjaCBjb21tYW5kIGFzIGZvbGxvd3M6XG4vL0Bcbi8vQCBgYGBcbi8vQCBjZCBkaXIvXG4vL0Agcm0gLXJmIGZvby50eHQgYmFyLnR4dFxuLy9AIGV4ZWMgZWNobyBoZWxsb1xuLy9AIGBgYFxuXG4vL0Bcbi8vQCAjIyMgY29uZmlnLmdsb2JPcHRpb25zXG4vL0Bcbi8vQCBFeGFtcGxlOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIGNvbmZpZy5nbG9iT3B0aW9ucyA9IHtub2RpcjogdHJ1ZX07XG4vL0AgYGBgXG4vL0Bcbi8vQCBVc2UgdGhpcyB2YWx1ZSBmb3IgY2FsbHMgdG8gYGdsb2Iuc3luYygpYCBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG5cbi8vQFxuLy9AICMjIyBjb25maWcucmVzZXQoKVxuLy9AXG4vL0AgRXhhbXBsZTpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCB2YXIgc2hlbGwgPSByZXF1aXJlKCdzaGVsbGpzJyk7XG4vL0AgLy8gTWFrZSBjaGFuZ2VzIHRvIHNoZWxsLmNvbmZpZywgYW5kIGRvIHN0dWZmLi4uXG4vL0AgLyogLi4uICovXG4vL0Agc2hlbGwuY29uZmlnLnJlc2V0KCk7IC8vIHJlc2V0IHRvIG9yaWdpbmFsIHN0YXRlXG4vL0AgLy8gRG8gbW9yZSBzdHVmZiwgYnV0IHdpdGggb3JpZ2luYWwgc2V0dGluZ3Ncbi8vQCAvKiAuLi4gKi9cbi8vQCBgYGBcbi8vQFxuLy9AIFJlc2V0IGBzaGVsbC5jb25maWdgIHRvIHRoZSBkZWZhdWx0czpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCB7XG4vL0AgICBmYXRhbDogZmFsc2UsXG4vL0AgICBnbG9iT3B0aW9uczoge30sXG4vL0AgICBtYXhkZXB0aDogMjU1LFxuLy9AICAgbm9nbG9iOiBmYWxzZSxcbi8vQCAgIHNpbGVudDogZmFsc2UsXG4vL0AgICB2ZXJib3NlOiBmYWxzZSxcbi8vQCB9XG4vL0AgYGBgXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/shell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/cat.js":
/*!*****************************************!*\
  !*** ./node_modules/shelljs/src/cat.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('cat', _cat, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'number',\n  },\n});\n\n//@\n//@ ### cat([options,] file [, file ...])\n//@ ### cat([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n`: number all output lines\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = cat('file*.txt');\n//@ var str = cat('file1', 'file2');\n//@ var str = cat(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Returns a string containing the given file, or a concatenated string\n//@ containing the files if more than one file is given (a new line character is\n//@ introduced between each file).\nfunction _cat(options, files) {\n  var cat = common.readFromPipe();\n\n  if (!files && !cat) common.error('no paths given');\n\n  files = [].slice.call(arguments, 1);\n\n  files.forEach(function (file) {\n    if (!fs.existsSync(file)) {\n      common.error('no such file or directory: ' + file);\n    } else if (common.statFollowLinks(file).isDirectory()) {\n      common.error(file + ': Is a directory');\n    }\n\n    cat += fs.readFileSync(file, 'utf8');\n  });\n\n  if (options.number) {\n    cat = addNumbers(cat);\n  }\n\n  return cat;\n}\nmodule.exports = _cat;\n\nfunction addNumbers(cat) {\n  var lines = cat.split('\\n');\n  var lastLine = lines.pop();\n\n  lines = lines.map(function (line, i) {\n    return numberedLine(i + 1, line);\n  });\n\n  if (lastLine.length) {\n    lastLine = numberedLine(lines.length + 1, lastLine);\n  }\n  lines.push(lastLine);\n\n  return lines.join('\\n');\n}\n\nfunction numberedLine(n, line) {\n  // GNU cat use six pad start number + tab. See http://lingrok.org/xref/coreutils/src/cat.c#57\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n  var number = ('     ' + n).slice(-6) + '\\t';\n  return number + line;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvY2F0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyw0REFBVTtBQUMvQixTQUFTLG1CQUFPLENBQUMsY0FBSTs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NoZWxsanMvc3JjL2NhdC5qcz9jN2FjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdjYXQnLCBfY2F0LCB7XG4gIGNhblJlY2VpdmVQaXBlOiB0cnVlLFxuICBjbWRPcHRpb25zOiB7XG4gICAgJ24nOiAnbnVtYmVyJyxcbiAgfSxcbn0pO1xuXG4vL0Bcbi8vQCAjIyMgY2F0KFtvcHRpb25zLF0gZmlsZSBbLCBmaWxlIC4uLl0pXG4vL0AgIyMjIGNhdChbb3B0aW9ucyxdIGZpbGVfYXJyYXkpXG4vL0Bcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC1uYDogbnVtYmVyIGFsbCBvdXRwdXQgbGluZXNcbi8vQFxuLy9AIEV4YW1wbGVzOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIHZhciBzdHIgPSBjYXQoJ2ZpbGUqLnR4dCcpO1xuLy9AIHZhciBzdHIgPSBjYXQoJ2ZpbGUxJywgJ2ZpbGUyJyk7XG4vL0AgdmFyIHN0ciA9IGNhdChbJ2ZpbGUxJywgJ2ZpbGUyJ10pOyAvLyBzYW1lIGFzIGFib3ZlXG4vL0AgYGBgXG4vL0Bcbi8vQCBSZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGdpdmVuIGZpbGUsIG9yIGEgY29uY2F0ZW5hdGVkIHN0cmluZ1xuLy9AIGNvbnRhaW5pbmcgdGhlIGZpbGVzIGlmIG1vcmUgdGhhbiBvbmUgZmlsZSBpcyBnaXZlbiAoYSBuZXcgbGluZSBjaGFyYWN0ZXIgaXNcbi8vQCBpbnRyb2R1Y2VkIGJldHdlZW4gZWFjaCBmaWxlKS5cbmZ1bmN0aW9uIF9jYXQob3B0aW9ucywgZmlsZXMpIHtcbiAgdmFyIGNhdCA9IGNvbW1vbi5yZWFkRnJvbVBpcGUoKTtcblxuICBpZiAoIWZpbGVzICYmICFjYXQpIGNvbW1vbi5lcnJvcignbm8gcGF0aHMgZ2l2ZW4nKTtcblxuICBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGZpbGUpKSB7XG4gICAgICBjb21tb24uZXJyb3IoJ25vIHN1Y2ggZmlsZSBvciBkaXJlY3Rvcnk6ICcgKyBmaWxlKTtcbiAgICB9IGVsc2UgaWYgKGNvbW1vbi5zdGF0Rm9sbG93TGlua3MoZmlsZSkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgY29tbW9uLmVycm9yKGZpbGUgKyAnOiBJcyBhIGRpcmVjdG9yeScpO1xuICAgIH1cblxuICAgIGNhdCArPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0ZjgnKTtcbiAgfSk7XG5cbiAgaWYgKG9wdGlvbnMubnVtYmVyKSB7XG4gICAgY2F0ID0gYWRkTnVtYmVycyhjYXQpO1xuICB9XG5cbiAgcmV0dXJuIGNhdDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2NhdDtcblxuZnVuY3Rpb24gYWRkTnVtYmVycyhjYXQpIHtcbiAgdmFyIGxpbmVzID0gY2F0LnNwbGl0KCdcXG4nKTtcbiAgdmFyIGxhc3RMaW5lID0gbGluZXMucG9wKCk7XG5cbiAgbGluZXMgPSBsaW5lcy5tYXAoZnVuY3Rpb24gKGxpbmUsIGkpIHtcbiAgICByZXR1cm4gbnVtYmVyZWRMaW5lKGkgKyAxLCBsaW5lKTtcbiAgfSk7XG5cbiAgaWYgKGxhc3RMaW5lLmxlbmd0aCkge1xuICAgIGxhc3RMaW5lID0gbnVtYmVyZWRMaW5lKGxpbmVzLmxlbmd0aCArIDEsIGxhc3RMaW5lKTtcbiAgfVxuICBsaW5lcy5wdXNoKGxhc3RMaW5lKTtcblxuICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcmVkTGluZShuLCBsaW5lKSB7XG4gIC8vIEdOVSBjYXQgdXNlIHNpeCBwYWQgc3RhcnQgbnVtYmVyICsgdGFiLiBTZWUgaHR0cDovL2xpbmdyb2sub3JnL3hyZWYvY29yZXV0aWxzL3NyYy9jYXQuYyM1N1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcGFkU3RhcnRcbiAgdmFyIG51bWJlciA9ICgnICAgICAnICsgbikuc2xpY2UoLTYpICsgJ1xcdCc7XG4gIHJldHVybiBudW1iZXIgKyBsaW5lO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/cat.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/cd.js":
/*!****************************************!*\
  !*** ./node_modules/shelljs/src/cd.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var os = __webpack_require__(/*! os */ \"os\");\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\ncommon.register('cd', _cd, {});\n\n//@\n//@ ### cd([dir])\n//@\n//@ Changes to directory `dir` for the duration of the script. Changes to home\n//@ directory if no argument is supplied.\nfunction _cd(options, dir) {\n  if (!dir) dir = os.homedir();\n\n  if (dir === '-') {\n    if (!process.env.OLDPWD) {\n      common.error('could not find previous directory');\n    } else {\n      dir = process.env.OLDPWD;\n    }\n  }\n\n  try {\n    var curDir = process.cwd();\n    process.chdir(dir);\n    process.env.OLDPWD = curDir;\n  } catch (e) {\n    // something went wrong, let's figure out the error\n    var err;\n    try {\n      common.statFollowLinks(dir); // if this succeeds, it must be some sort of file\n      err = 'not a directory: ' + dir;\n    } catch (e2) {\n      err = 'no such file or directory: ' + dir;\n    }\n    if (err) common.error(err);\n  }\n  return '';\n}\nmodule.exports = _cd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvY2QuanMiLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxtQkFBTyxDQUFDLGNBQUk7QUFDckIsYUFBYSxtQkFBTyxDQUFDLDREQUFVOztBQUUvQiw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy9jZC5qcz80YTk2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdjZCcsIF9jZCwge30pO1xuXG4vL0Bcbi8vQCAjIyMgY2QoW2Rpcl0pXG4vL0Bcbi8vQCBDaGFuZ2VzIHRvIGRpcmVjdG9yeSBgZGlyYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBzY3JpcHQuIENoYW5nZXMgdG8gaG9tZVxuLy9AIGRpcmVjdG9yeSBpZiBubyBhcmd1bWVudCBpcyBzdXBwbGllZC5cbmZ1bmN0aW9uIF9jZChvcHRpb25zLCBkaXIpIHtcbiAgaWYgKCFkaXIpIGRpciA9IG9zLmhvbWVkaXIoKTtcblxuICBpZiAoZGlyID09PSAnLScpIHtcbiAgICBpZiAoIXByb2Nlc3MuZW52Lk9MRFBXRCkge1xuICAgICAgY29tbW9uLmVycm9yKCdjb3VsZCBub3QgZmluZCBwcmV2aW91cyBkaXJlY3RvcnknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlyID0gcHJvY2Vzcy5lbnYuT0xEUFdEO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGN1ckRpciA9IHByb2Nlc3MuY3dkKCk7XG4gICAgcHJvY2Vzcy5jaGRpcihkaXIpO1xuICAgIHByb2Nlc3MuZW52Lk9MRFBXRCA9IGN1ckRpcjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nLCBsZXQncyBmaWd1cmUgb3V0IHRoZSBlcnJvclxuICAgIHZhciBlcnI7XG4gICAgdHJ5IHtcbiAgICAgIGNvbW1vbi5zdGF0Rm9sbG93TGlua3MoZGlyKTsgLy8gaWYgdGhpcyBzdWNjZWVkcywgaXQgbXVzdCBiZSBzb21lIHNvcnQgb2YgZmlsZVxuICAgICAgZXJyID0gJ25vdCBhIGRpcmVjdG9yeTogJyArIGRpcjtcbiAgICB9IGNhdGNoIChlMikge1xuICAgICAgZXJyID0gJ25vIHN1Y2ggZmlsZSBvciBkaXJlY3Rvcnk6ICcgKyBkaXI7XG4gICAgfVxuICAgIGlmIChlcnIpIGNvbW1vbi5lcnJvcihlcnIpO1xuICB9XG4gIHJldHVybiAnJztcbn1cbm1vZHVsZS5leHBvcnRzID0gX2NkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/cd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/chmod.js":
/*!*******************************************!*\
  !*** ./node_modules/shelljs/src/chmod.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar PERMS = (function (base) {\n  return {\n    OTHER_EXEC: base.EXEC,\n    OTHER_WRITE: base.WRITE,\n    OTHER_READ: base.READ,\n\n    GROUP_EXEC: base.EXEC << 3,\n    GROUP_WRITE: base.WRITE << 3,\n    GROUP_READ: base.READ << 3,\n\n    OWNER_EXEC: base.EXEC << 6,\n    OWNER_WRITE: base.WRITE << 6,\n    OWNER_READ: base.READ << 6,\n\n    // Literal octal numbers are apparently not allowed in \"strict\" javascript.\n    STICKY: parseInt('01000', 8),\n    SETGID: parseInt('02000', 8),\n    SETUID: parseInt('04000', 8),\n\n    TYPE_MASK: parseInt('0770000', 8),\n  };\n}({\n  EXEC: 1,\n  WRITE: 2,\n  READ: 4,\n}));\n\ncommon.register('chmod', _chmod, {\n});\n\n//@\n//@ ### chmod([options,] octal_mode || octal_string, file)\n//@ ### chmod([options,] symbolic_mode, file)\n//@\n//@ Available options:\n//@\n//@ + `-v`: output a diagnostic for every file processed//@\n//@ + `-c`: like verbose, but report only when a change is made//@\n//@ + `-R`: change files and directories recursively//@\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ chmod(755, '/Users/brandon');\n//@ chmod('755', '/Users/brandon'); // same as above\n//@ chmod('u+x', '/Users/brandon');\n//@ chmod('-R', 'a-w', '/Users/brandon');\n//@ ```\n//@\n//@ Alters the permissions of a file or directory by either specifying the\n//@ absolute permissions in octal form or expressing the changes in symbols.\n//@ This command tries to mimic the POSIX behavior as much as possible.\n//@ Notable exceptions:\n//@\n//@ + In symbolic modes, `a-r` and `-r` are identical.  No consideration is\n//@   given to the `umask`.\n//@ + There is no \"quiet\" option, since default behavior is to run silent.\nfunction _chmod(options, mode, filePattern) {\n  if (!filePattern) {\n    if (options.length > 0 && options.charAt(0) === '-') {\n      // Special case where the specified file permissions started with - to subtract perms, which\n      // get picked up by the option parser as command flags.\n      // If we are down by one argument and options starts with -, shift everything over.\n      [].unshift.call(arguments, '');\n    } else {\n      common.error('You must specify a file.');\n    }\n  }\n\n  options = common.parseOptions(options, {\n    'R': 'recursive',\n    'c': 'changes',\n    'v': 'verbose',\n  });\n\n  filePattern = [].slice.call(arguments, 2);\n\n  var files;\n\n  // TODO: replace this with a call to common.expand()\n  if (options.recursive) {\n    files = [];\n    filePattern.forEach(function addFile(expandedFile) {\n      var stat = common.statNoFollowLinks(expandedFile);\n\n      if (!stat.isSymbolicLink()) {\n        files.push(expandedFile);\n\n        if (stat.isDirectory()) {  // intentionally does not follow symlinks.\n          fs.readdirSync(expandedFile).forEach(function (child) {\n            addFile(expandedFile + '/' + child);\n          });\n        }\n      }\n    });\n  } else {\n    files = filePattern;\n  }\n\n  files.forEach(function innerChmod(file) {\n    file = path.resolve(file);\n    if (!fs.existsSync(file)) {\n      common.error('File not found: ' + file);\n    }\n\n    // When recursing, don't follow symlinks.\n    if (options.recursive && common.statNoFollowLinks(file).isSymbolicLink()) {\n      return;\n    }\n\n    var stat = common.statFollowLinks(file);\n    var isDir = stat.isDirectory();\n    var perms = stat.mode;\n    var type = perms & PERMS.TYPE_MASK;\n\n    var newPerms = perms;\n\n    if (isNaN(parseInt(mode, 8))) {\n      // parse options\n      mode.split(',').forEach(function (symbolicMode) {\n        var pattern = /([ugoa]*)([=\\+-])([rwxXst]*)/i;\n        var matches = pattern.exec(symbolicMode);\n\n        if (matches) {\n          var applyTo = matches[1];\n          var operator = matches[2];\n          var change = matches[3];\n\n          var changeOwner = applyTo.indexOf('u') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeGroup = applyTo.indexOf('g') !== -1 || applyTo === 'a' || applyTo === '';\n          var changeOther = applyTo.indexOf('o') !== -1 || applyTo === 'a' || applyTo === '';\n\n          var changeRead = change.indexOf('r') !== -1;\n          var changeWrite = change.indexOf('w') !== -1;\n          var changeExec = change.indexOf('x') !== -1;\n          var changeExecDir = change.indexOf('X') !== -1;\n          var changeSticky = change.indexOf('t') !== -1;\n          var changeSetuid = change.indexOf('s') !== -1;\n\n          if (changeExecDir && isDir) {\n            changeExec = true;\n          }\n\n          var mask = 0;\n          if (changeOwner) {\n            mask |= (changeRead ? PERMS.OWNER_READ : 0) + (changeWrite ? PERMS.OWNER_WRITE : 0) + (changeExec ? PERMS.OWNER_EXEC : 0) + (changeSetuid ? PERMS.SETUID : 0);\n          }\n          if (changeGroup) {\n            mask |= (changeRead ? PERMS.GROUP_READ : 0) + (changeWrite ? PERMS.GROUP_WRITE : 0) + (changeExec ? PERMS.GROUP_EXEC : 0) + (changeSetuid ? PERMS.SETGID : 0);\n          }\n          if (changeOther) {\n            mask |= (changeRead ? PERMS.OTHER_READ : 0) + (changeWrite ? PERMS.OTHER_WRITE : 0) + (changeExec ? PERMS.OTHER_EXEC : 0);\n          }\n\n          // Sticky bit is special - it's not tied to user, group or other.\n          if (changeSticky) {\n            mask |= PERMS.STICKY;\n          }\n\n          switch (operator) {\n            case '+':\n              newPerms |= mask;\n              break;\n\n            case '-':\n              newPerms &= ~mask;\n              break;\n\n            case '=':\n              newPerms = type + mask;\n\n              // According to POSIX, when using = to explicitly set the\n              // permissions, setuid and setgid can never be cleared.\n              if (common.statFollowLinks(file).isDirectory()) {\n                newPerms |= (PERMS.SETUID + PERMS.SETGID) & perms;\n              }\n              break;\n            default:\n              common.error('Could not recognize operator: `' + operator + '`');\n          }\n\n          if (options.verbose) {\n            console.log(file + ' -> ' + newPerms.toString(8));\n          }\n\n          if (perms !== newPerms) {\n            if (!options.verbose && options.changes) {\n              console.log(file + ' -> ' + newPerms.toString(8));\n            }\n            fs.chmodSync(file, newPerms);\n            perms = newPerms; // for the next round of changes!\n          }\n        } else {\n          common.error('Invalid symbolic mode change: ' + symbolicMode);\n        }\n      });\n    } else {\n      // they gave us a full number\n      newPerms = type + parseInt(mode, 8);\n\n      // POSIX rules are that setuid and setgid can only be added using numeric\n      // form, but not cleared.\n      if (common.statFollowLinks(file).isDirectory()) {\n        newPerms |= (PERMS.SETUID + PERMS.SETGID) & perms;\n      }\n\n      fs.chmodSync(file, newPerms);\n    }\n  });\n  return '';\n}\nmodule.exports = _chmod;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/chmod.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/common.js":
/*!********************************************!*\
  !*** ./node_modules/shelljs/src/common.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Ignore warning about 'new String()'\n/* eslint no-new-wrappers: 0 */\n\n\nvar os = __webpack_require__(/*! os */ \"os\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar glob = __webpack_require__(/*! glob */ \"(ssr)/./node_modules/glob/glob.js\");\nvar shell = __webpack_require__(/*! .. */ \"(ssr)/./node_modules/shelljs/shell.js\");\n\nvar shellMethods = Object.create(shell);\n\nexports.extend = Object.assign;\n\n// Check if we're running under electron\nvar isElectron = Boolean(process.versions.electron);\n\n// Module globals (assume no execPath by default)\nvar DEFAULT_CONFIG = {\n  fatal: false,\n  globOptions: {},\n  maxdepth: 255,\n  noglob: false,\n  silent: false,\n  verbose: false,\n  execPath: null,\n  bufLength: 64 * 1024, // 64KB\n};\n\nvar config = {\n  reset: function () {\n    Object.assign(this, DEFAULT_CONFIG);\n    if (!isElectron) {\n      this.execPath = process.execPath;\n    }\n  },\n  resetForTesting: function () {\n    this.reset();\n    this.silent = true;\n  },\n};\n\nconfig.reset();\nexports.config = config;\n\n// Note: commands should generally consider these as read-only values.\nvar state = {\n  error: null,\n  errorCode: 0,\n  currentCmd: 'shell.js',\n};\nexports.state = state;\n\ndelete process.env.OLDPWD; // initially, there's no previous directory\n\n// Reliably test if something is any sort of javascript object\nfunction isObject(a) {\n  return typeof a === 'object' && a !== null;\n}\nexports.isObject = isObject;\n\nfunction log() {\n  /* istanbul ignore next */\n  if (!config.silent) {\n    console.error.apply(console, arguments);\n  }\n}\nexports.log = log;\n\n// Converts strings to be equivalent across all platforms. Primarily responsible\n// for making sure we use '/' instead of '\\' as path separators, but this may be\n// expanded in the future if necessary\nfunction convertErrorOutput(msg) {\n  if (typeof msg !== 'string') {\n    throw new TypeError('input must be a string');\n  }\n  return msg.replace(/\\\\/g, '/');\n}\nexports.convertErrorOutput = convertErrorOutput;\n\n// Shows error message. Throws if config.fatal is true\nfunction error(msg, _code, options) {\n  // Validate input\n  if (typeof msg !== 'string') throw new Error('msg must be a string');\n\n  var DEFAULT_OPTIONS = {\n    continue: false,\n    code: 1,\n    prefix: state.currentCmd + ': ',\n    silent: false,\n  };\n\n  if (typeof _code === 'number' && isObject(options)) {\n    options.code = _code;\n  } else if (isObject(_code)) { // no 'code'\n    options = _code;\n  } else if (typeof _code === 'number') { // no 'options'\n    options = { code: _code };\n  } else if (typeof _code !== 'number') { // only 'msg'\n    options = {};\n  }\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n  if (!state.errorCode) state.errorCode = options.code;\n\n  var logEntry = convertErrorOutput(options.prefix + msg);\n  state.error = state.error ? state.error + '\\n' : '';\n  state.error += logEntry;\n\n  // Throw an error, or log the entry\n  if (config.fatal) throw new Error(logEntry);\n  if (msg.length > 0 && !options.silent) log(logEntry);\n\n  if (!options.continue) {\n    throw {\n      msg: 'earlyExit',\n      retValue: (new ShellString('', state.error, state.errorCode)),\n    };\n  }\n}\nexports.error = error;\n\n//@\n//@ ### ShellString(str)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var foo = ShellString('hello world');\n//@ ```\n//@\n//@ Turns a regular string into a string-like object similar to what each\n//@ command returns. This has special methods, like `.to()` and `.toEnd()`.\nfunction ShellString(stdout, stderr, code) {\n  var that;\n  if (stdout instanceof Array) {\n    that = stdout;\n    that.stdout = stdout.join('\\n');\n    if (stdout.length > 0) that.stdout += '\\n';\n  } else {\n    that = new String(stdout);\n    that.stdout = stdout;\n  }\n  that.stderr = stderr;\n  that.code = code;\n  // A list of all commands that can appear on the right-hand side of a pipe\n  // (populated by calls to common.wrap())\n  pipeMethods.forEach(function (cmd) {\n    that[cmd] = shellMethods[cmd].bind(that);\n  });\n  return that;\n}\n\nexports.ShellString = ShellString;\n\n// Returns {'alice': true, 'bob': false} when passed a string and dictionary as follows:\n//   parseOptions('-a', {'a':'alice', 'b':'bob'});\n// Returns {'reference': 'string-value', 'bob': false} when passed two dictionaries of the form:\n//   parseOptions({'-r': 'string-value'}, {'r':'reference', 'b':'bob'});\n// Throws an error when passed a string that does not start with '-':\n//   parseOptions('a', {'a':'alice'}); // throws\nfunction parseOptions(opt, map, errorOptions) {\n  // Validate input\n  if (typeof opt !== 'string' && !isObject(opt)) {\n    throw new Error('options must be strings or key-value pairs');\n  } else if (!isObject(map)) {\n    throw new Error('parseOptions() internal error: map must be an object');\n  } else if (errorOptions && !isObject(errorOptions)) {\n    throw new Error('parseOptions() internal error: errorOptions must be object');\n  }\n\n  if (opt === '--') {\n    // This means there are no options.\n    return {};\n  }\n\n  // All options are false by default\n  var options = {};\n  Object.keys(map).forEach(function (letter) {\n    var optName = map[letter];\n    if (optName[0] !== '!') {\n      options[optName] = false;\n    }\n  });\n\n  if (opt === '') return options; // defaults\n\n  if (typeof opt === 'string') {\n    if (opt[0] !== '-') {\n      throw new Error(\"Options string must start with a '-'\");\n    }\n\n    // e.g. chars = ['R', 'f']\n    var chars = opt.slice(1).split('');\n\n    chars.forEach(function (c) {\n      if (c in map) {\n        var optionName = map[c];\n        if (optionName[0] === '!') {\n          options[optionName.slice(1)] = false;\n        } else {\n          options[optionName] = true;\n        }\n      } else {\n        error('option not recognized: ' + c, errorOptions || {});\n      }\n    });\n  } else { // opt is an Object\n    Object.keys(opt).forEach(function (key) {\n      // key is a string of the form '-r', '-d', etc.\n      var c = key[1];\n      if (c in map) {\n        var optionName = map[c];\n        options[optionName] = opt[key]; // assign the given value\n      } else {\n        error('option not recognized: ' + c, errorOptions || {});\n      }\n    });\n  }\n  return options;\n}\nexports.parseOptions = parseOptions;\n\n// Expands wildcards with matching (ie. existing) file names.\n// For example:\n//   expand(['file*.js']) = ['file1.js', 'file2.js', ...]\n//   (if the files 'file1.js', 'file2.js', etc, exist in the current dir)\nfunction expand(list) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('must be an array');\n  }\n  var expanded = [];\n  list.forEach(function (listEl) {\n    // Don't expand non-strings\n    if (typeof listEl !== 'string') {\n      expanded.push(listEl);\n    } else {\n      var ret;\n      try {\n        ret = glob.sync(listEl, config.globOptions);\n        // if nothing matched, interpret the string literally\n        ret = ret.length > 0 ? ret : [listEl];\n      } catch (e) {\n        // if glob fails, interpret the string literally\n        ret = [listEl];\n      }\n      expanded = expanded.concat(ret);\n    }\n  });\n  return expanded;\n}\nexports.expand = expand;\n\n// Normalizes Buffer creation, using Buffer.alloc if possible.\n// Also provides a good default buffer length for most use cases.\nvar buffer = typeof Buffer.alloc === 'function' ?\n  function (len) {\n    return Buffer.alloc(len || config.bufLength);\n  } :\n  function (len) {\n    return new Buffer(len || config.bufLength);\n  };\nexports.buffer = buffer;\n\n// Normalizes _unlinkSync() across platforms to match Unix behavior, i.e.\n// file can be unlinked even if it's read-only, see https://github.com/joyent/node/issues/3006\nfunction unlinkSync(file) {\n  try {\n    fs.unlinkSync(file);\n  } catch (e) {\n    // Try to override file permission\n    /* istanbul ignore next */\n    if (e.code === 'EPERM') {\n      fs.chmodSync(file, '0666');\n      fs.unlinkSync(file);\n    } else {\n      throw e;\n    }\n  }\n}\nexports.unlinkSync = unlinkSync;\n\n// wrappers around common.statFollowLinks and common.statNoFollowLinks that clarify intent\n// and improve readability\nfunction statFollowLinks() {\n  return fs.statSync.apply(fs, arguments);\n}\nexports.statFollowLinks = statFollowLinks;\n\nfunction statNoFollowLinks() {\n  return fs.lstatSync.apply(fs, arguments);\n}\nexports.statNoFollowLinks = statNoFollowLinks;\n\n// e.g. 'shelljs_a5f185d0443ca...'\nfunction randomFileName() {\n  function randomHash(count) {\n    if (count === 1) {\n      return parseInt(16 * Math.random(), 10).toString(16);\n    }\n    var hash = '';\n    for (var i = 0; i < count; i++) {\n      hash += randomHash(1);\n    }\n    return hash;\n  }\n\n  return 'shelljs_' + randomHash(20);\n}\nexports.randomFileName = randomFileName;\n\n// Common wrapper for all Unix-like commands that performs glob expansion,\n// command-logging, and other nice things\nfunction wrap(cmd, fn, options) {\n  options = options || {};\n  return function () {\n    var retValue = null;\n\n    state.currentCmd = cmd;\n    state.error = null;\n    state.errorCode = 0;\n\n    try {\n      var args = [].slice.call(arguments, 0);\n\n      // Log the command to stderr, if appropriate\n      if (config.verbose) {\n        console.error.apply(console, [cmd].concat(args));\n      }\n\n      // If this is coming from a pipe, let's set the pipedValue (otherwise, set\n      // it to the empty string)\n      state.pipedValue = (this && typeof this.stdout === 'string') ? this.stdout : '';\n\n      if (options.unix === false) { // this branch is for exec()\n        retValue = fn.apply(this, args);\n      } else { // and this branch is for everything else\n        if (isObject(args[0]) && args[0].constructor.name === 'Object') {\n          // a no-op, allowing the syntax `touch({'-r': file}, ...)`\n        } else if (args.length === 0 || typeof args[0] !== 'string' || args[0].length <= 1 || args[0][0] !== '-') {\n          args.unshift(''); // only add dummy option if '-option' not already present\n        }\n\n        // flatten out arrays that are arguments, to make the syntax:\n        //    `cp([file1, file2, file3], dest);`\n        // equivalent to:\n        //    `cp(file1, file2, file3, dest);`\n        args = args.reduce(function (accum, cur) {\n          if (Array.isArray(cur)) {\n            return accum.concat(cur);\n          }\n          accum.push(cur);\n          return accum;\n        }, []);\n\n        // Convert ShellStrings (basically just String objects) to regular strings\n        args = args.map(function (arg) {\n          if (isObject(arg) && arg.constructor.name === 'String') {\n            return arg.toString();\n          }\n          return arg;\n        });\n\n        // Expand the '~' if appropriate\n        var homeDir = os.homedir();\n        args = args.map(function (arg) {\n          if (typeof arg === 'string' && arg.slice(0, 2) === '~/' || arg === '~') {\n            return arg.replace(/^~/, homeDir);\n          }\n          return arg;\n        });\n\n        // Perform glob-expansion on all arguments after globStart, but preserve\n        // the arguments before it (like regexes for sed and grep)\n        if (!config.noglob && options.allowGlobbing === true) {\n          args = args.slice(0, options.globStart).concat(expand(args.slice(options.globStart)));\n        }\n\n        try {\n          // parse options if options are provided\n          if (isObject(options.cmdOptions)) {\n            args[0] = parseOptions(args[0], options.cmdOptions);\n          }\n\n          retValue = fn.apply(this, args);\n        } catch (e) {\n          /* istanbul ignore else */\n          if (e.msg === 'earlyExit') {\n            retValue = e.retValue;\n          } else {\n            throw e; // this is probably a bug that should be thrown up the call stack\n          }\n        }\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      if (!state.error) {\n        // If state.error hasn't been set it's an error thrown by Node, not us - probably a bug...\n        e.name = 'ShellJSInternalError';\n        throw e;\n      }\n      if (config.fatal) throw e;\n    }\n\n    if (options.wrapOutput &&\n        (typeof retValue === 'string' || Array.isArray(retValue))) {\n      retValue = new ShellString(retValue, state.error, state.errorCode);\n    }\n\n    state.currentCmd = 'shell.js';\n    return retValue;\n  };\n} // wrap\nexports.wrap = wrap;\n\n// This returns all the input that is piped into the current command (or the\n// empty string, if this isn't on the right-hand side of a pipe\nfunction _readFromPipe() {\n  return state.pipedValue;\n}\nexports.readFromPipe = _readFromPipe;\n\nvar DEFAULT_WRAP_OPTIONS = {\n  allowGlobbing: true,\n  canReceivePipe: false,\n  cmdOptions: null,\n  globStart: 1,\n  pipeOnly: false,\n  wrapOutput: true,\n  unix: true,\n};\n\n// This is populated during plugin registration\nvar pipeMethods = [];\n\n// Register a new ShellJS command\nfunction _register(name, implementation, wrapOptions) {\n  wrapOptions = wrapOptions || {};\n\n  // Validate options\n  Object.keys(wrapOptions).forEach(function (option) {\n    if (!DEFAULT_WRAP_OPTIONS.hasOwnProperty(option)) {\n      throw new Error(\"Unknown option '\" + option + \"'\");\n    }\n    if (typeof wrapOptions[option] !== typeof DEFAULT_WRAP_OPTIONS[option]) {\n      throw new TypeError(\"Unsupported type '\" + typeof wrapOptions[option] +\n        \"' for option '\" + option + \"'\");\n    }\n  });\n\n  // If an option isn't specified, use the default\n  wrapOptions = Object.assign({}, DEFAULT_WRAP_OPTIONS, wrapOptions);\n\n  if (shell.hasOwnProperty(name)) {\n    throw new Error('Command `' + name + '` already exists');\n  }\n\n  if (wrapOptions.pipeOnly) {\n    wrapOptions.canReceivePipe = true;\n    shellMethods[name] = wrap(name, implementation, wrapOptions);\n  } else {\n    shell[name] = wrap(name, implementation, wrapOptions);\n  }\n\n  if (wrapOptions.canReceivePipe) {\n    pipeMethods.push(name);\n  }\n}\nexports.register = _register;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/cp.js":
/*!****************************************!*\
  !*** ./node_modules/shelljs/src/cp.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\ncommon.register('cp', _cp, {\n  cmdOptions: {\n    'f': '!no_force',\n    'n': 'no_force',\n    'u': 'update',\n    'R': 'recursive',\n    'r': 'recursive',\n    'L': 'followsymlink',\n    'P': 'noFollowsymlink',\n  },\n  wrapOutput: false,\n});\n\n// Buffered file copy, synchronous\n// (Using readFileSync() + writeFileSync() could easily cause a memory overflow\n//  with large files)\nfunction copyFileSync(srcFile, destFile, options) {\n  if (!fs.existsSync(srcFile)) {\n    common.error('copyFileSync: no such file or directory: ' + srcFile);\n  }\n\n  var isWindows = process.platform === 'win32';\n\n  // Check the mtimes of the files if the '-u' flag is provided\n  try {\n    if (options.update && common.statFollowLinks(srcFile).mtime < fs.statSync(destFile).mtime) {\n      return;\n    }\n  } catch (e) {\n    // If we're here, destFile probably doesn't exist, so just do a normal copy\n  }\n\n  if (common.statNoFollowLinks(srcFile).isSymbolicLink() && !options.followsymlink) {\n    try {\n      common.statNoFollowLinks(destFile);\n      common.unlinkSync(destFile); // re-link it\n    } catch (e) {\n      // it doesn't exist, so no work needs to be done\n    }\n\n    var symlinkFull = fs.readlinkSync(srcFile);\n    fs.symlinkSync(symlinkFull, destFile, isWindows ? 'junction' : null);\n  } else {\n    var buf = common.buffer();\n    var bufLength = buf.length;\n    var bytesRead = bufLength;\n    var pos = 0;\n    var fdr = null;\n    var fdw = null;\n\n    try {\n      fdr = fs.openSync(srcFile, 'r');\n    } catch (e) {\n      /* istanbul ignore next */\n      common.error('copyFileSync: could not read src file (' + srcFile + ')');\n    }\n\n    try {\n      fdw = fs.openSync(destFile, 'w');\n    } catch (e) {\n      /* istanbul ignore next */\n      common.error('copyFileSync: could not write to dest file (code=' + e.code + '):' + destFile);\n    }\n\n    while (bytesRead === bufLength) {\n      bytesRead = fs.readSync(fdr, buf, 0, bufLength, pos);\n      fs.writeSync(fdw, buf, 0, bytesRead);\n      pos += bytesRead;\n    }\n\n    fs.closeSync(fdr);\n    fs.closeSync(fdw);\n\n    fs.chmodSync(destFile, common.statFollowLinks(srcFile).mode);\n  }\n}\n\n// Recursively copies 'sourceDir' into 'destDir'\n// Adapted from https://github.com/ryanmcgrath/wrench-js\n//\n// Copyright (c) 2010 Ryan McGrath\n// Copyright (c) 2012 Artur Adib\n//\n// Licensed under the MIT License\n// http://www.opensource.org/licenses/mit-license.php\nfunction cpdirSyncRecursive(sourceDir, destDir, currentDepth, opts) {\n  if (!opts) opts = {};\n\n  // Ensure there is not a run away recursive copy\n  if (currentDepth >= common.config.maxdepth) return;\n  currentDepth++;\n\n  var isWindows = process.platform === 'win32';\n\n  // Create the directory where all our junk is moving to; read the mode of the\n  // source directory and mirror it\n  try {\n    fs.mkdirSync(destDir);\n  } catch (e) {\n    // if the directory already exists, that's okay\n    if (e.code !== 'EEXIST') throw e;\n  }\n\n  var files = fs.readdirSync(sourceDir);\n\n  for (var i = 0; i < files.length; i++) {\n    var srcFile = sourceDir + '/' + files[i];\n    var destFile = destDir + '/' + files[i];\n    var srcFileStat = common.statNoFollowLinks(srcFile);\n\n    var symlinkFull;\n    if (opts.followsymlink) {\n      if (cpcheckcycle(sourceDir, srcFile)) {\n        // Cycle link found.\n        console.error('Cycle link found.');\n        symlinkFull = fs.readlinkSync(srcFile);\n        fs.symlinkSync(symlinkFull, destFile, isWindows ? 'junction' : null);\n        continue;\n      }\n    }\n    if (srcFileStat.isDirectory()) {\n      /* recursion this thing right on back. */\n      cpdirSyncRecursive(srcFile, destFile, currentDepth, opts);\n    } else if (srcFileStat.isSymbolicLink() && !opts.followsymlink) {\n      symlinkFull = fs.readlinkSync(srcFile);\n      try {\n        common.statNoFollowLinks(destFile);\n        common.unlinkSync(destFile); // re-link it\n      } catch (e) {\n        // it doesn't exist, so no work needs to be done\n      }\n      fs.symlinkSync(symlinkFull, destFile, isWindows ? 'junction' : null);\n    } else if (srcFileStat.isSymbolicLink() && opts.followsymlink) {\n      srcFileStat = common.statFollowLinks(srcFile);\n      if (srcFileStat.isDirectory()) {\n        cpdirSyncRecursive(srcFile, destFile, currentDepth, opts);\n      } else {\n        copyFileSync(srcFile, destFile, opts);\n      }\n    } else {\n      /* At this point, we've hit a file actually worth copying... so copy it on over. */\n      if (fs.existsSync(destFile) && opts.no_force) {\n        common.log('skipping existing file: ' + files[i]);\n      } else {\n        copyFileSync(srcFile, destFile, opts);\n      }\n    }\n  } // for files\n\n  // finally change the mode for the newly created directory (otherwise, we\n  // couldn't add files to a read-only directory).\n  var checkDir = common.statFollowLinks(sourceDir);\n  fs.chmodSync(destDir, checkDir.mode);\n} // cpdirSyncRecursive\n\n// Checks if cureent file was created recently\nfunction checkRecentCreated(sources, index) {\n  var lookedSource = sources[index];\n  return sources.slice(0, index).some(function (src) {\n    return path.basename(src) === path.basename(lookedSource);\n  });\n}\n\nfunction cpcheckcycle(sourceDir, srcFile) {\n  var srcFileStat = common.statNoFollowLinks(srcFile);\n  if (srcFileStat.isSymbolicLink()) {\n    // Do cycle check. For example:\n    //   $ mkdir -p 1/2/3/4\n    //   $ cd  1/2/3/4\n    //   $ ln -s ../../3 link\n    //   $ cd ../../../..\n    //   $ cp -RL 1 copy\n    var cyclecheck = common.statFollowLinks(srcFile);\n    if (cyclecheck.isDirectory()) {\n      var sourcerealpath = fs.realpathSync(sourceDir);\n      var symlinkrealpath = fs.realpathSync(srcFile);\n      var re = new RegExp(symlinkrealpath);\n      if (re.test(sourcerealpath)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n//@\n//@ ### cp([options,] source [, source ...], dest)\n//@ ### cp([options,] source_array, dest)\n//@\n//@ Available options:\n//@\n//@ + `-f`: force (default behavior)\n//@ + `-n`: no-clobber\n//@ + `-u`: only copy if `source` is newer than `dest`\n//@ + `-r`, `-R`: recursive\n//@ + `-L`: follow symlinks\n//@ + `-P`: don't follow symlinks\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cp('file1', 'dir1');\n//@ cp('-R', 'path/to/dir/', '~/newCopy/');\n//@ cp('-Rf', '/tmp/*', '/usr/local/*', '/home/tmp');\n//@ cp('-Rf', ['/tmp/*', '/usr/local/*'], '/home/tmp'); // same as above\n//@ ```\n//@\n//@ Copies files.\nfunction _cp(options, sources, dest) {\n  // If we're missing -R, it actually implies -L (unless -P is explicit)\n  if (options.followsymlink) {\n    options.noFollowsymlink = false;\n  }\n  if (!options.recursive && !options.noFollowsymlink) {\n    options.followsymlink = true;\n  }\n\n  // Get sources, dest\n  if (arguments.length < 3) {\n    common.error('missing <source> and/or <dest>');\n  } else {\n    sources = [].slice.call(arguments, 1, arguments.length - 1);\n    dest = arguments[arguments.length - 1];\n  }\n\n  var destExists = fs.existsSync(dest);\n  var destStat = destExists && common.statFollowLinks(dest);\n\n  // Dest is not existing dir, but multiple sources given\n  if ((!destExists || !destStat.isDirectory()) && sources.length > 1) {\n    common.error('dest is not a directory (too many sources)');\n  }\n\n  // Dest is an existing file, but -n is given\n  if (destExists && destStat.isFile() && options.no_force) {\n    return new common.ShellString('', '', 0);\n  }\n\n  sources.forEach(function (src, srcIndex) {\n    if (!fs.existsSync(src)) {\n      if (src === '') src = \"''\"; // if src was empty string, display empty string\n      common.error('no such file or directory: ' + src, { continue: true });\n      return; // skip file\n    }\n    var srcStat = common.statFollowLinks(src);\n    if (!options.noFollowsymlink && srcStat.isDirectory()) {\n      if (!options.recursive) {\n        // Non-Recursive\n        common.error(\"omitting directory '\" + src + \"'\", { continue: true });\n      } else {\n        // Recursive\n        // 'cp /a/source dest' should create 'source' in 'dest'\n        var newDest = (destStat && destStat.isDirectory()) ?\n            path.join(dest, path.basename(src)) :\n            dest;\n\n        try {\n          common.statFollowLinks(path.dirname(dest));\n          cpdirSyncRecursive(src, newDest, 0, { no_force: options.no_force, followsymlink: options.followsymlink });\n        } catch (e) {\n          /* istanbul ignore next */\n          common.error(\"cannot create directory '\" + dest + \"': No such file or directory\");\n        }\n      }\n    } else {\n      // If here, src is a file\n\n      // When copying to '/path/dir':\n      //    thisDest = '/path/dir/file1'\n      var thisDest = dest;\n      if (destStat && destStat.isDirectory()) {\n        thisDest = path.normalize(dest + '/' + path.basename(src));\n      }\n\n      var thisDestExists = fs.existsSync(thisDest);\n      if (thisDestExists && checkRecentCreated(sources, srcIndex)) {\n        // cannot overwrite file created recently in current execution, but we want to continue copying other files\n        if (!options.no_force) {\n          common.error(\"will not overwrite just-created '\" + thisDest + \"' with '\" + src + \"'\", { continue: true });\n        }\n        return;\n      }\n\n      if (thisDestExists && options.no_force) {\n        return; // skip file\n      }\n\n      if (path.relative(src, thisDest) === '') {\n        // a file cannot be copied to itself, but we want to continue copying other files\n        common.error(\"'\" + thisDest + \"' and '\" + src + \"' are the same file\", { continue: true });\n        return;\n      }\n\n      copyFileSync(src, thisDest, options);\n    }\n  }); // forEach(src)\n\n  return new common.ShellString('', common.state.error, common.state.errorCode);\n}\nmodule.exports = _cp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/cp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/dirs.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/dirs.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar _cd = __webpack_require__(/*! ./cd */ \"(ssr)/./node_modules/shelljs/src/cd.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\ncommon.register('dirs', _dirs, {\n  wrapOutput: false,\n});\ncommon.register('pushd', _pushd, {\n  wrapOutput: false,\n});\ncommon.register('popd', _popd, {\n  wrapOutput: false,\n});\n\n// Pushd/popd/dirs internals\nvar _dirStack = [];\n\nfunction _isStackIndex(index) {\n  return (/^[\\-+]\\d+$/).test(index);\n}\n\nfunction _parseStackIndex(index) {\n  if (_isStackIndex(index)) {\n    if (Math.abs(index) < _dirStack.length + 1) { // +1 for pwd\n      return (/^-/).test(index) ? Number(index) - 1 : Number(index);\n    }\n    common.error(index + ': directory stack index out of range');\n  } else {\n    common.error(index + ': invalid number');\n  }\n}\n\nfunction _actualDirStack() {\n  return [process.cwd()].concat(_dirStack);\n}\n\n//@\n//@ ### pushd([options,] [dir | '-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `dir`: Sets the current working directory to the top of the stack, then executes the equivalent of `cd dir`.\n//@ + `+N`: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@ + `-N`: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ // process.cwd() === '/usr'\n//@ pushd('/etc'); // Returns /etc /usr\n//@ pushd('+1');   // Returns /usr /etc\n//@ ```\n//@\n//@ Save the current directory on the top of the directory stack and then `cd` to `dir`. With no arguments, `pushd` exchanges the top two directories. Returns an array of paths in the stack.\nfunction _pushd(options, dir) {\n  if (_isStackIndex(options)) {\n    dir = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet',\n  });\n\n  var dirs = _actualDirStack();\n\n  if (dir === '+0') {\n    return dirs; // +0 is a noop\n  } else if (!dir) {\n    if (dirs.length > 1) {\n      dirs = dirs.splice(1, 1).concat(dirs);\n    } else {\n      return common.error('no other directory');\n    }\n  } else if (_isStackIndex(dir)) {\n    var n = _parseStackIndex(dir);\n    dirs = dirs.slice(n).concat(dirs.slice(0, n));\n  } else {\n    if (options['no-cd']) {\n      dirs.splice(1, 0, dir);\n    } else {\n      dirs.unshift(dir);\n    }\n  }\n\n  if (options['no-cd']) {\n    dirs = dirs.slice(1);\n  } else {\n    dir = path.resolve(dirs.shift());\n    _cd('', dir);\n  }\n\n  _dirStack = dirs;\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.pushd = _pushd;\n\n//@\n//@\n//@ ### popd([options,] ['-N' | '+N'])\n//@\n//@ Available options:\n//@\n//@ + `-n`: Suppress the normal directory change when removing directories from the stack, so that only the stack is manipulated.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.\n//@ + `-N`: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo(process.cwd()); // '/usr'\n//@ pushd('/etc');       // '/etc /usr'\n//@ echo(process.cwd()); // '/etc'\n//@ popd();              // '/usr'\n//@ echo(process.cwd()); // '/usr'\n//@ ```\n//@\n//@ When no arguments are given, `popd` removes the top directory from the stack and performs a `cd` to the new top directory. The elements are numbered from 0, starting at the first directory listed with dirs (i.e., `popd` is equivalent to `popd +0`). Returns an array of paths in the stack.\nfunction _popd(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'n': 'no-cd',\n    'q': 'quiet',\n  });\n\n  if (!_dirStack.length) {\n    return common.error('directory stack empty');\n  }\n\n  index = _parseStackIndex(index || '+0');\n\n  if (options['no-cd'] || index > 0 || _dirStack.length + index === 0) {\n    index = index > 0 ? index - 1 : index;\n    _dirStack.splice(index, 1);\n  } else {\n    var dir = path.resolve(_dirStack.shift());\n    _cd('', dir);\n  }\n\n  return _dirs(options.quiet ? '-q' : '');\n}\nexports.popd = _popd;\n\n//@\n//@\n//@ ### dirs([options | '+N' | '-N'])\n//@\n//@ Available options:\n//@\n//@ + `-c`: Clears the directory stack by deleting all of the elements.\n//@ + `-q`: Supresses output to the console.\n//@\n//@ Arguments:\n//@\n//@ + `+N`: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.\n//@ + `-N`: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.\n//@\n//@ Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if `+N` or `-N` was specified.\n//@\n//@ See also: `pushd`, `popd`\nfunction _dirs(options, index) {\n  if (_isStackIndex(options)) {\n    index = options;\n    options = '';\n  }\n\n  options = common.parseOptions(options, {\n    'c': 'clear',\n    'q': 'quiet',\n  });\n\n  if (options.clear) {\n    _dirStack = [];\n    return _dirStack;\n  }\n\n  var stack = _actualDirStack();\n\n  if (index) {\n    index = _parseStackIndex(index);\n\n    if (index < 0) {\n      index = stack.length + index;\n    }\n\n    if (!options.quiet) {\n      common.log(stack[index]);\n    }\n    return stack[index];\n  }\n\n  if (!options.quiet) {\n    common.log(stack.join(' '));\n  }\n\n  return stack;\n}\nexports.dirs = _dirs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/dirs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/echo.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/echo.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var format = (__webpack_require__(/*! util */ \"util\").format);\n\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\ncommon.register('echo', _echo, {\n  allowGlobbing: false,\n});\n\n//@\n//@ ### echo([options,] string [, string ...])\n//@\n//@ Available options:\n//@\n//@ + `-e`: interpret backslash escapes (default)\n//@ + `-n`: remove trailing newline from output\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ echo('hello world');\n//@ var str = echo('hello world');\n//@ echo('-n', 'no newline at end');\n//@ ```\n//@\n//@ Prints `string` to stdout, and returns string with additional utility methods\n//@ like `.to()`.\nfunction _echo(opts) {\n  // allow strings starting with '-', see issue #20\n  var messages = [].slice.call(arguments, opts ? 0 : 1);\n  var options = {};\n\n  // If the first argument starts with '-', parse it as options string.\n  // If parseOptions throws, it wasn't an options string.\n  try {\n    options = common.parseOptions(messages[0], {\n      'e': 'escapes',\n      'n': 'no_newline',\n    }, {\n      silent: true,\n    });\n\n    // Allow null to be echoed\n    if (messages[0]) {\n      messages.shift();\n    }\n  } catch (_) {\n    // Clear out error if an error occurred\n    common.state.error = null;\n  }\n\n  var output = format.apply(null, messages);\n\n  // Add newline if -n is not passed.\n  if (!options.no_newline) {\n    output += '\\n';\n  }\n\n  process.stdout.write(output);\n\n  return output;\n}\n\nmodule.exports = _echo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvZWNoby5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLGdEQUFzQjs7QUFFbkMsYUFBYSxtQkFBTyxDQUFDLDREQUFVOztBQUUvQjtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy9lY2hvLmpzPzAxZDkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZvcm1hdCA9IHJlcXVpcmUoJ3V0aWwnKS5mb3JtYXQ7XG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ2VjaG8nLCBfZWNobywge1xuICBhbGxvd0dsb2JiaW5nOiBmYWxzZSxcbn0pO1xuXG4vL0Bcbi8vQCAjIyMgZWNobyhbb3B0aW9ucyxdIHN0cmluZyBbLCBzdHJpbmcgLi4uXSlcbi8vQFxuLy9AIEF2YWlsYWJsZSBvcHRpb25zOlxuLy9AXG4vL0AgKyBgLWVgOiBpbnRlcnByZXQgYmFja3NsYXNoIGVzY2FwZXMgKGRlZmF1bHQpXG4vL0AgKyBgLW5gOiByZW1vdmUgdHJhaWxpbmcgbmV3bGluZSBmcm9tIG91dHB1dFxuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgZWNobygnaGVsbG8gd29ybGQnKTtcbi8vQCB2YXIgc3RyID0gZWNobygnaGVsbG8gd29ybGQnKTtcbi8vQCBlY2hvKCctbicsICdubyBuZXdsaW5lIGF0IGVuZCcpO1xuLy9AIGBgYFxuLy9AXG4vL0AgUHJpbnRzIGBzdHJpbmdgIHRvIHN0ZG91dCwgYW5kIHJldHVybnMgc3RyaW5nIHdpdGggYWRkaXRpb25hbCB1dGlsaXR5IG1ldGhvZHNcbi8vQCBsaWtlIGAudG8oKWAuXG5mdW5jdGlvbiBfZWNobyhvcHRzKSB7XG4gIC8vIGFsbG93IHN0cmluZ3Mgc3RhcnRpbmcgd2l0aCAnLScsIHNlZSBpc3N1ZSAjMjBcbiAgdmFyIG1lc3NhZ2VzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIG9wdHMgPyAwIDogMSk7XG4gIHZhciBvcHRpb25zID0ge307XG5cbiAgLy8gSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHN0YXJ0cyB3aXRoICctJywgcGFyc2UgaXQgYXMgb3B0aW9ucyBzdHJpbmcuXG4gIC8vIElmIHBhcnNlT3B0aW9ucyB0aHJvd3MsIGl0IHdhc24ndCBhbiBvcHRpb25zIHN0cmluZy5cbiAgdHJ5IHtcbiAgICBvcHRpb25zID0gY29tbW9uLnBhcnNlT3B0aW9ucyhtZXNzYWdlc1swXSwge1xuICAgICAgJ2UnOiAnZXNjYXBlcycsXG4gICAgICAnbic6ICdub19uZXdsaW5lJyxcbiAgICB9LCB7XG4gICAgICBzaWxlbnQ6IHRydWUsXG4gICAgfSk7XG5cbiAgICAvLyBBbGxvdyBudWxsIHRvIGJlIGVjaG9lZFxuICAgIGlmIChtZXNzYWdlc1swXSkge1xuICAgICAgbWVzc2FnZXMuc2hpZnQoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICAvLyBDbGVhciBvdXQgZXJyb3IgaWYgYW4gZXJyb3Igb2NjdXJyZWRcbiAgICBjb21tb24uc3RhdGUuZXJyb3IgPSBudWxsO1xuICB9XG5cbiAgdmFyIG91dHB1dCA9IGZvcm1hdC5hcHBseShudWxsLCBtZXNzYWdlcyk7XG5cbiAgLy8gQWRkIG5ld2xpbmUgaWYgLW4gaXMgbm90IHBhc3NlZC5cbiAgaWYgKCFvcHRpb25zLm5vX25ld2xpbmUpIHtcbiAgICBvdXRwdXQgKz0gJ1xcbic7XG4gIH1cblxuICBwcm9jZXNzLnN0ZG91dC53cml0ZShvdXRwdXQpO1xuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2VjaG87XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/echo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/error.js":
/*!*******************************************!*\
  !*** ./node_modules/shelljs/src/error.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\n//@\n//@ ### error()\n//@\n//@ Tests if error occurred in the last command. Returns a truthy value if an\n//@ error returned, or a falsy value otherwise.\n//@\n//@ **Note**: do not rely on the\n//@ return value to be an error message. If you need the last error message, use\n//@ the `.stderr` attribute from the last command's return value instead.\nfunction error() {\n  return common.state.error;\n}\nmodule.exports = error;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLDREQUFVOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvZXJyb3IuanM/M2I5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxuLy9AXG4vL0AgIyMjIGVycm9yKClcbi8vQFxuLy9AIFRlc3RzIGlmIGVycm9yIG9jY3VycmVkIGluIHRoZSBsYXN0IGNvbW1hbmQuIFJldHVybnMgYSB0cnV0aHkgdmFsdWUgaWYgYW5cbi8vQCBlcnJvciByZXR1cm5lZCwgb3IgYSBmYWxzeSB2YWx1ZSBvdGhlcndpc2UuXG4vL0Bcbi8vQCAqKk5vdGUqKjogZG8gbm90IHJlbHkgb24gdGhlXG4vL0AgcmV0dXJuIHZhbHVlIHRvIGJlIGFuIGVycm9yIG1lc3NhZ2UuIElmIHlvdSBuZWVkIHRoZSBsYXN0IGVycm9yIG1lc3NhZ2UsIHVzZVxuLy9AIHRoZSBgLnN0ZGVycmAgYXR0cmlidXRlIGZyb20gdGhlIGxhc3QgY29tbWFuZCdzIHJldHVybiB2YWx1ZSBpbnN0ZWFkLlxuZnVuY3Rpb24gZXJyb3IoKSB7XG4gIHJldHVybiBjb21tb24uc3RhdGUuZXJyb3I7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/exec-child.js":
/*!************************************************!*\
  !*** ./node_modules/shelljs/src/exec-child.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nif (__webpack_require__.c[__webpack_require__.s] !== module) {\n  throw new Error('This file should not be required');\n}\n\nvar childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar paramFilePath = process.argv[2];\n\nvar serializedParams = fs.readFileSync(paramFilePath, 'utf8');\nvar params = JSON.parse(serializedParams);\n\nvar cmd = params.command;\nvar execOptions = params.execOptions;\nvar pipe = params.pipe;\nvar stdoutFile = params.stdoutFile;\nvar stderrFile = params.stderrFile;\n\nvar c = childProcess.exec(cmd, execOptions, function (err) {\n  if (!err) {\n    process.exitCode = 0;\n  } else if (err.code === undefined) {\n    process.exitCode = 1;\n  } else {\n    process.exitCode = err.code;\n  }\n});\n\nvar stdoutStream = fs.createWriteStream(stdoutFile);\nvar stderrStream = fs.createWriteStream(stderrFile);\n\nc.stdout.pipe(stdoutStream);\nc.stderr.pipe(stderrStream);\nc.stdout.pipe(process.stdout);\nc.stderr.pipe(process.stderr);\n\nif (pipe) {\n  c.stdin.end(pipe);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvZXhlYy1jaGlsZC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSSw0Q0FBWTtBQUNoQjtBQUNBOztBQUVBLG1CQUFtQixtQkFBTyxDQUFDLG9DQUFlO0FBQzFDLFNBQVMsbUJBQU8sQ0FBQyxjQUFJOztBQUVyQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy9leGVjLWNoaWxkLmpzP2E3MWUiXSwic291cmNlc0NvbnRlbnQiOlsiaWYgKHJlcXVpcmUubWFpbiAhPT0gbW9kdWxlKSB7XG4gIHRocm93IG5ldyBFcnJvcignVGhpcyBmaWxlIHNob3VsZCBub3QgYmUgcmVxdWlyZWQnKTtcbn1cblxudmFyIGNoaWxkUHJvY2VzcyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbnZhciBwYXJhbUZpbGVQYXRoID0gcHJvY2Vzcy5hcmd2WzJdO1xuXG52YXIgc2VyaWFsaXplZFBhcmFtcyA9IGZzLnJlYWRGaWxlU3luYyhwYXJhbUZpbGVQYXRoLCAndXRmOCcpO1xudmFyIHBhcmFtcyA9IEpTT04ucGFyc2Uoc2VyaWFsaXplZFBhcmFtcyk7XG5cbnZhciBjbWQgPSBwYXJhbXMuY29tbWFuZDtcbnZhciBleGVjT3B0aW9ucyA9IHBhcmFtcy5leGVjT3B0aW9ucztcbnZhciBwaXBlID0gcGFyYW1zLnBpcGU7XG52YXIgc3Rkb3V0RmlsZSA9IHBhcmFtcy5zdGRvdXRGaWxlO1xudmFyIHN0ZGVyckZpbGUgPSBwYXJhbXMuc3RkZXJyRmlsZTtcblxudmFyIGMgPSBjaGlsZFByb2Nlc3MuZXhlYyhjbWQsIGV4ZWNPcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7XG4gIGlmICghZXJyKSB7XG4gICAgcHJvY2Vzcy5leGl0Q29kZSA9IDA7XG4gIH0gZWxzZSBpZiAoZXJyLmNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHByb2Nlc3MuZXhpdENvZGUgPSAxO1xuICB9IGVsc2Uge1xuICAgIHByb2Nlc3MuZXhpdENvZGUgPSBlcnIuY29kZTtcbiAgfVxufSk7XG5cbnZhciBzdGRvdXRTdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShzdGRvdXRGaWxlKTtcbnZhciBzdGRlcnJTdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShzdGRlcnJGaWxlKTtcblxuYy5zdGRvdXQucGlwZShzdGRvdXRTdHJlYW0pO1xuYy5zdGRlcnIucGlwZShzdGRlcnJTdHJlYW0pO1xuYy5zdGRvdXQucGlwZShwcm9jZXNzLnN0ZG91dCk7XG5jLnN0ZGVyci5waXBlKHByb2Nlc3Muc3RkZXJyKTtcblxuaWYgKHBpcGUpIHtcbiAgYy5zdGRpbi5lbmQocGlwZSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/exec-child.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/exec.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/exec.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar _tempDir = (__webpack_require__(/*! ./tempdir */ \"(ssr)/./node_modules/shelljs/src/tempdir.js\").tempDir);\nvar _pwd = __webpack_require__(/*! ./pwd */ \"(ssr)/./node_modules/shelljs/src/pwd.js\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar child = __webpack_require__(/*! child_process */ \"child_process\");\n\nvar DEFAULT_MAXBUFFER_SIZE = 20 * 1024 * 1024;\nvar DEFAULT_ERROR_CODE = 1;\n\ncommon.register('exec', _exec, {\n  unix: false,\n  canReceivePipe: true,\n  wrapOutput: false,\n});\n\n// We use this function to run `exec` synchronously while also providing realtime\n// output.\nfunction execSync(cmd, opts, pipe) {\n  if (!common.config.execPath) {\n    common.error('Unable to find a path to the node binary. Please manually set config.execPath');\n  }\n\n  var tempDir = _tempDir();\n  var paramsFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stderrFile = path.resolve(tempDir + '/' + common.randomFileName());\n  var stdoutFile = path.resolve(tempDir + '/' + common.randomFileName());\n\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  if (fs.existsSync(paramsFile)) common.unlinkSync(paramsFile);\n  if (fs.existsSync(stderrFile)) common.unlinkSync(stderrFile);\n  if (fs.existsSync(stdoutFile)) common.unlinkSync(stdoutFile);\n\n  opts.cwd = path.resolve(opts.cwd);\n\n  var paramsToSerialize = {\n    command: cmd,\n    execOptions: opts,\n    pipe: pipe,\n    stdoutFile: stdoutFile,\n    stderrFile: stderrFile,\n  };\n\n  // Create the files and ensure these are locked down (for read and write) to\n  // the current user. The main concerns here are:\n  //\n  // * If we execute a command which prints sensitive output, then\n  //   stdoutFile/stderrFile must not be readable by other users.\n  // * paramsFile must not be readable by other users, or else they can read it\n  //   to figure out the path for stdoutFile/stderrFile and create these first\n  //   (locked down to their own access), which will crash exec() when it tries\n  //   to write to the files.\n  function writeFileLockedDown(filePath, data) {\n    fs.writeFileSync(filePath, data, {\n      encoding: 'utf8',\n      mode: parseInt('600', 8),\n    });\n  }\n  writeFileLockedDown(stdoutFile, '');\n  writeFileLockedDown(stderrFile, '');\n  writeFileLockedDown(paramsFile, JSON.stringify(paramsToSerialize));\n\n  var execArgs = [\n    path.join(__dirname, 'exec-child.js'),\n    paramsFile,\n  ];\n\n  /* istanbul ignore else */\n  if (opts.silent) {\n    opts.stdio = 'ignore';\n  } else {\n    opts.stdio = [0, 1, 2];\n  }\n\n  var code = 0;\n\n  // Welcome to the future\n  try {\n    // Bad things if we pass in a `shell` option to child_process.execFileSync,\n    // so we need to explicitly remove it here.\n    delete opts.shell;\n\n    child.execFileSync(common.config.execPath, execArgs, opts);\n  } catch (e) {\n    // Commands with non-zero exit code raise an exception.\n    code = e.status || DEFAULT_ERROR_CODE;\n  }\n\n  // fs.readFileSync uses buffer encoding by default, so call\n  // it without the encoding option if the encoding is 'buffer'.\n  // Also, if the exec timeout is too short for node to start up,\n  // the files will not be created, so these calls will throw.\n  var stdout = '';\n  var stderr = '';\n  if (opts.encoding === 'buffer') {\n    stdout = fs.readFileSync(stdoutFile);\n    stderr = fs.readFileSync(stderrFile);\n  } else {\n    stdout = fs.readFileSync(stdoutFile, opts.encoding);\n    stderr = fs.readFileSync(stderrFile, opts.encoding);\n  }\n\n  // No biggie if we can't erase the files now -- they're in a temp dir anyway\n  // and we locked down permissions (see the note above).\n  try { common.unlinkSync(paramsFile); } catch (e) {}\n  try { common.unlinkSync(stderrFile); } catch (e) {}\n  try { common.unlinkSync(stdoutFile); } catch (e) {}\n\n  if (code !== 0) {\n    // Note: `silent` should be unconditionally true to avoid double-printing\n    // the command's stderr, and to avoid printing any stderr when the user has\n    // set `shell.config.silent`.\n    common.error(stderr, code, { continue: true, silent: true });\n  }\n  var obj = common.ShellString(stdout, stderr, code);\n  return obj;\n} // execSync()\n\n// Wrapper around exec() to enable echoing output to console in real time\nfunction execAsync(cmd, opts, pipe, callback) {\n  opts = common.extend({\n    silent: common.config.silent,\n    cwd: _pwd().toString(),\n    env: process.env,\n    maxBuffer: DEFAULT_MAXBUFFER_SIZE,\n    encoding: 'utf8',\n  }, opts);\n\n  var c = child.exec(cmd, opts, function (err, stdout, stderr) {\n    if (callback) {\n      if (!err) {\n        callback(0, stdout, stderr);\n      } else if (err.code === undefined) {\n        // See issue #536\n        /* istanbul ignore next */\n        callback(1, stdout, stderr);\n      } else {\n        callback(err.code, stdout, stderr);\n      }\n    }\n  });\n\n  if (pipe) c.stdin.end(pipe);\n\n  if (!opts.silent) {\n    c.stdout.pipe(process.stdout);\n    c.stderr.pipe(process.stderr);\n  }\n\n  return c;\n}\n\n//@\n//@ ### exec(command [, options] [, callback])\n//@\n//@ Available options:\n//@\n//@ + `async`: Asynchronous execution. If a callback is provided, it will be set to\n//@   `true`, regardless of the passed value (default: `false`).\n//@ + `silent`: Do not echo program output to console (default: `false`).\n//@ + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n//@   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n//@ + and any option available to Node.js's\n//@   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var version = exec('node --version', {silent:true}).stdout;\n//@\n//@ var child = exec('some_long_running_process', {async:true});\n//@ child.stdout.on('data', function(data) {\n//@   /* ... do something with data ... */\n//@ });\n//@\n//@ exec('some_long_running_process', function(code, stdout, stderr) {\n//@   console.log('Exit code:', code);\n//@   console.log('Program output:', stdout);\n//@   console.log('Program stderr:', stderr);\n//@ });\n//@ ```\n//@\n//@ Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n//@ mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n//@ of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n//@ object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n//@\n//@ Not seeing the behavior you want? `exec()` runs everything through `sh`\n//@ by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n//@ need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\nfunction _exec(command, options, callback) {\n  options = options || {};\n  if (!command) common.error('must specify command');\n\n  var pipe = common.readFromPipe();\n\n  // Callback is defined instead of options.\n  if (typeof options === 'function') {\n    callback = options;\n    options = { async: true };\n  }\n\n  // Callback is defined with options.\n  if (typeof options === 'object' && typeof callback === 'function') {\n    options.async = true;\n  }\n\n  options = common.extend({\n    silent: common.config.silent,\n    async: false,\n  }, options);\n\n  if (options.async) {\n    return execAsync(command, options, pipe, callback);\n  } else {\n    return execSync(command, options, pipe);\n  }\n}\nmodule.exports = _exec;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/exec.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/find.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/find.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var path = __webpack_require__(/*! path */ \"path\");\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar _ls = __webpack_require__(/*! ./ls */ \"(ssr)/./node_modules/shelljs/src/ls.js\");\n\ncommon.register('find', _find, {});\n\n//@\n//@ ### find(path [, path ...])\n//@ ### find(path_array)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ find('src', 'lib');\n//@ find(['src', 'lib']); // same as above\n//@ find('.').filter(function(file) { return file.match(/\\.js$/); });\n//@ ```\n//@\n//@ Returns array of all files (however deep) in the given paths.\n//@\n//@ The main difference from `ls('-R', path)` is that the resulting file names\n//@ include the base directories (e.g., `lib/resources/file1` instead of just `file1`).\nfunction _find(options, paths) {\n  if (!paths) {\n    common.error('no path specified');\n  } else if (typeof paths === 'string') {\n    paths = [].slice.call(arguments, 1);\n  }\n\n  var list = [];\n\n  function pushFile(file) {\n    if (process.platform === 'win32') {\n      file = file.replace(/\\\\/g, '/');\n    }\n    list.push(file);\n  }\n\n  // why not simply do `ls('-R', paths)`? because the output wouldn't give the base dirs\n  // to get the base dir in the output, we need instead `ls('-R', 'dir/*')` for every directory\n\n  paths.forEach(function (file) {\n    var stat;\n    try {\n      stat = common.statFollowLinks(file);\n    } catch (e) {\n      common.error('no such file or directory: ' + file);\n    }\n\n    pushFile(file);\n\n    if (stat.isDirectory()) {\n      _ls({ recursive: true, all: true }, file).forEach(function (subfile) {\n        pushFile(path.join(file, subfile));\n      });\n    }\n  });\n\n  return list;\n}\nmodule.exports = _find;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvZmluZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekIsYUFBYSxtQkFBTyxDQUFDLDREQUFVO0FBQy9CLFVBQVUsbUJBQU8sQ0FBQyxvREFBTTs7QUFFeEIsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLHNDQUFzQyw2QkFBNkI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NoZWxsanMvc3JjL2ZpbmQuanM/ZGI4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIF9scyA9IHJlcXVpcmUoJy4vbHMnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdmaW5kJywgX2ZpbmQsIHt9KTtcblxuLy9AXG4vL0AgIyMjIGZpbmQocGF0aCBbLCBwYXRoIC4uLl0pXG4vL0AgIyMjIGZpbmQocGF0aF9hcnJheSlcbi8vQFxuLy9AIEV4YW1wbGVzOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIGZpbmQoJ3NyYycsICdsaWInKTtcbi8vQCBmaW5kKFsnc3JjJywgJ2xpYiddKTsgLy8gc2FtZSBhcyBhYm92ZVxuLy9AIGZpbmQoJy4nKS5maWx0ZXIoZnVuY3Rpb24oZmlsZSkgeyByZXR1cm4gZmlsZS5tYXRjaCgvXFwuanMkLyk7IH0pO1xuLy9AIGBgYFxuLy9AXG4vL0AgUmV0dXJucyBhcnJheSBvZiBhbGwgZmlsZXMgKGhvd2V2ZXIgZGVlcCkgaW4gdGhlIGdpdmVuIHBhdGhzLlxuLy9AXG4vL0AgVGhlIG1haW4gZGlmZmVyZW5jZSBmcm9tIGBscygnLVInLCBwYXRoKWAgaXMgdGhhdCB0aGUgcmVzdWx0aW5nIGZpbGUgbmFtZXNcbi8vQCBpbmNsdWRlIHRoZSBiYXNlIGRpcmVjdG9yaWVzIChlLmcuLCBgbGliL3Jlc291cmNlcy9maWxlMWAgaW5zdGVhZCBvZiBqdXN0IGBmaWxlMWApLlxuZnVuY3Rpb24gX2ZpbmQob3B0aW9ucywgcGF0aHMpIHtcbiAgaWYgKCFwYXRocykge1xuICAgIGNvbW1vbi5lcnJvcignbm8gcGF0aCBzcGVjaWZpZWQnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcGF0aHMgPT09ICdzdHJpbmcnKSB7XG4gICAgcGF0aHMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIH1cblxuICB2YXIgbGlzdCA9IFtdO1xuXG4gIGZ1bmN0aW9uIHB1c2hGaWxlKGZpbGUpIHtcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgZmlsZSA9IGZpbGUucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuICAgIH1cbiAgICBsaXN0LnB1c2goZmlsZSk7XG4gIH1cblxuICAvLyB3aHkgbm90IHNpbXBseSBkbyBgbHMoJy1SJywgcGF0aHMpYD8gYmVjYXVzZSB0aGUgb3V0cHV0IHdvdWxkbid0IGdpdmUgdGhlIGJhc2UgZGlyc1xuICAvLyB0byBnZXQgdGhlIGJhc2UgZGlyIGluIHRoZSBvdXRwdXQsIHdlIG5lZWQgaW5zdGVhZCBgbHMoJy1SJywgJ2Rpci8qJylgIGZvciBldmVyeSBkaXJlY3RvcnlcblxuICBwYXRocy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgdmFyIHN0YXQ7XG4gICAgdHJ5IHtcbiAgICAgIHN0YXQgPSBjb21tb24uc3RhdEZvbGxvd0xpbmtzKGZpbGUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbW1vbi5lcnJvcignbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTogJyArIGZpbGUpO1xuICAgIH1cblxuICAgIHB1c2hGaWxlKGZpbGUpO1xuXG4gICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgX2xzKHsgcmVjdXJzaXZlOiB0cnVlLCBhbGw6IHRydWUgfSwgZmlsZSkuZm9yRWFjaChmdW5jdGlvbiAoc3ViZmlsZSkge1xuICAgICAgICBwdXNoRmlsZShwYXRoLmpvaW4oZmlsZSwgc3ViZmlsZSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbGlzdDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2ZpbmQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/find.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/grep.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/grep.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('grep', _grep, {\n  globStart: 2, // don't glob-expand the regex\n  canReceivePipe: true,\n  cmdOptions: {\n    'v': 'inverse',\n    'l': 'nameOnly',\n    'i': 'ignoreCase',\n  },\n});\n\n//@\n//@ ### grep([options,] regex_filter, file [, file ...])\n//@ ### grep([options,] regex_filter, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-v`: Invert `regex_filter` (only print non-matching lines).\n//@ + `-l`: Print only filenames of matching files.\n//@ + `-i`: Ignore case.\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ grep('-v', 'GLOBAL_VARIABLE', '*.js');\n//@ grep('GLOBAL_VARIABLE', '*.js');\n//@ ```\n//@\n//@ Reads input string from given files and returns a string containing all lines of the\n//@ file that match the given `regex_filter`.\nfunction _grep(options, regex, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no paths given', 2);\n\n  files = [].slice.call(arguments, 2);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var grep = [];\n  if (options.ignoreCase) {\n    regex = new RegExp(regex, 'i');\n  }\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, { continue: true });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    if (options.nameOnly) {\n      if (contents.match(regex)) {\n        grep.push(file);\n      }\n    } else {\n      var lines = contents.split('\\n');\n      lines.forEach(function (line) {\n        var matched = line.match(regex);\n        if ((options.inverse && !matched) || (!options.inverse && matched)) {\n          grep.push(line);\n        }\n      });\n    }\n  });\n\n  return grep.join('\\n') + '\\n';\n}\nmodule.exports = _grep;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvZ3JlcC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsNERBQVU7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLGNBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxnQkFBZ0I7QUFDOUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy9ncmVwLmpzPzEwOTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ2dyZXAnLCBfZ3JlcCwge1xuICBnbG9iU3RhcnQ6IDIsIC8vIGRvbid0IGdsb2ItZXhwYW5kIHRoZSByZWdleFxuICBjYW5SZWNlaXZlUGlwZTogdHJ1ZSxcbiAgY21kT3B0aW9uczoge1xuICAgICd2JzogJ2ludmVyc2UnLFxuICAgICdsJzogJ25hbWVPbmx5JyxcbiAgICAnaSc6ICdpZ25vcmVDYXNlJyxcbiAgfSxcbn0pO1xuXG4vL0Bcbi8vQCAjIyMgZ3JlcChbb3B0aW9ucyxdIHJlZ2V4X2ZpbHRlciwgZmlsZSBbLCBmaWxlIC4uLl0pXG4vL0AgIyMjIGdyZXAoW29wdGlvbnMsXSByZWdleF9maWx0ZXIsIGZpbGVfYXJyYXkpXG4vL0Bcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC12YDogSW52ZXJ0IGByZWdleF9maWx0ZXJgIChvbmx5IHByaW50IG5vbi1tYXRjaGluZyBsaW5lcykuXG4vL0AgKyBgLWxgOiBQcmludCBvbmx5IGZpbGVuYW1lcyBvZiBtYXRjaGluZyBmaWxlcy5cbi8vQCArIGAtaWA6IElnbm9yZSBjYXNlLlxuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgZ3JlcCgnLXYnLCAnR0xPQkFMX1ZBUklBQkxFJywgJyouanMnKTtcbi8vQCBncmVwKCdHTE9CQUxfVkFSSUFCTEUnLCAnKi5qcycpO1xuLy9AIGBgYFxuLy9AXG4vL0AgUmVhZHMgaW5wdXQgc3RyaW5nIGZyb20gZ2l2ZW4gZmlsZXMgYW5kIHJldHVybnMgYSBzdHJpbmcgY29udGFpbmluZyBhbGwgbGluZXMgb2YgdGhlXG4vL0AgZmlsZSB0aGF0IG1hdGNoIHRoZSBnaXZlbiBgcmVnZXhfZmlsdGVyYC5cbmZ1bmN0aW9uIF9ncmVwKG9wdGlvbnMsIHJlZ2V4LCBmaWxlcykge1xuICAvLyBDaGVjayBpZiB0aGlzIGlzIGNvbWluZyBmcm9tIGEgcGlwZVxuICB2YXIgcGlwZSA9IGNvbW1vbi5yZWFkRnJvbVBpcGUoKTtcblxuICBpZiAoIWZpbGVzICYmICFwaXBlKSBjb21tb24uZXJyb3IoJ25vIHBhdGhzIGdpdmVuJywgMik7XG5cbiAgZmlsZXMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG5cbiAgaWYgKHBpcGUpIHtcbiAgICBmaWxlcy51bnNoaWZ0KCctJyk7XG4gIH1cblxuICB2YXIgZ3JlcCA9IFtdO1xuICBpZiAob3B0aW9ucy5pZ25vcmVDYXNlKSB7XG4gICAgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4LCAnaScpO1xuICB9XG4gIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZSkgJiYgZmlsZSAhPT0gJy0nKSB7XG4gICAgICBjb21tb24uZXJyb3IoJ25vIHN1Y2ggZmlsZSBvciBkaXJlY3Rvcnk6ICcgKyBmaWxlLCAyLCB7IGNvbnRpbnVlOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb250ZW50cyA9IGZpbGUgPT09ICctJyA/IHBpcGUgOiBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0ZjgnKTtcbiAgICBpZiAob3B0aW9ucy5uYW1lT25seSkge1xuICAgICAgaWYgKGNvbnRlbnRzLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICBncmVwLnB1c2goZmlsZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsaW5lcyA9IGNvbnRlbnRzLnNwbGl0KCdcXG4nKTtcbiAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBsaW5lLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgaWYgKChvcHRpb25zLmludmVyc2UgJiYgIW1hdGNoZWQpIHx8ICghb3B0aW9ucy5pbnZlcnNlICYmIG1hdGNoZWQpKSB7XG4gICAgICAgICAgZ3JlcC5wdXNoKGxpbmUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBncmVwLmpvaW4oJ1xcbicpICsgJ1xcbic7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9ncmVwO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/grep.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/head.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/head.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('head', _head, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'numLines',\n  },\n});\n\n// Reads |numLines| lines or the entire file, whichever is less.\nfunction readSomeLines(file, numLines) {\n  var buf = common.buffer();\n  var bufLength = buf.length;\n  var bytesRead = bufLength;\n  var pos = 0;\n\n  var fdr = fs.openSync(file, 'r');\n  var numLinesRead = 0;\n  var ret = '';\n  while (bytesRead === bufLength && numLinesRead < numLines) {\n    bytesRead = fs.readSync(fdr, buf, 0, bufLength, pos);\n    var bufStr = buf.toString('utf8', 0, bytesRead);\n    numLinesRead += bufStr.split('\\n').length - 1;\n    ret += bufStr;\n    pos += bytesRead;\n  }\n\n  fs.closeSync(fdr);\n  return ret;\n}\n\n//@\n//@ ### head([{'-n': \\<num\\>},] file [, file ...])\n//@ ### head([{'-n': \\<num\\>},] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n <num>`: Show the first `<num>` lines of the files\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = head({'-n': 1}, 'file*.txt');\n//@ var str = head('file1', 'file2');\n//@ var str = head(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Read the start of a file.\nfunction _head(options, files) {\n  var head = [];\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no paths given');\n\n  var idx = 1;\n  if (options.numLines === true) {\n    idx = 2;\n    options.numLines = Number(arguments[1]);\n  } else if (options.numLines === false) {\n    options.numLines = 10;\n  }\n  files = [].slice.call(arguments, idx);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var shouldAppendNewline = false;\n  files.forEach(function (file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, { continue: true });\n        return;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error(\"error reading '\" + file + \"': Is a directory\", {\n          continue: true,\n        });\n        return;\n      }\n    }\n\n    var contents;\n    if (file === '-') {\n      contents = pipe;\n    } else if (options.numLines < 0) {\n      contents = fs.readFileSync(file, 'utf8');\n    } else {\n      contents = readSomeLines(file, options.numLines);\n    }\n\n    var lines = contents.split('\\n');\n    var hasTrailingNewline = (lines[lines.length - 1] === '');\n    if (hasTrailingNewline) {\n      lines.pop();\n    }\n    shouldAppendNewline = (hasTrailingNewline || options.numLines < lines.length);\n\n    head = head.concat(lines.slice(0, options.numLines));\n  });\n\n  if (shouldAppendNewline) {\n    head.push(''); // to add a trailing newline once we join\n  }\n  return head.join('\\n');\n}\nmodule.exports = _head;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvaGVhZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsNERBQVU7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLGNBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGdCQUFnQjtBQUM3RTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy9oZWFkLmpzP2FmNzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ2hlYWQnLCBfaGVhZCwge1xuICBjYW5SZWNlaXZlUGlwZTogdHJ1ZSxcbiAgY21kT3B0aW9uczoge1xuICAgICduJzogJ251bUxpbmVzJyxcbiAgfSxcbn0pO1xuXG4vLyBSZWFkcyB8bnVtTGluZXN8IGxpbmVzIG9yIHRoZSBlbnRpcmUgZmlsZSwgd2hpY2hldmVyIGlzIGxlc3MuXG5mdW5jdGlvbiByZWFkU29tZUxpbmVzKGZpbGUsIG51bUxpbmVzKSB7XG4gIHZhciBidWYgPSBjb21tb24uYnVmZmVyKCk7XG4gIHZhciBidWZMZW5ndGggPSBidWYubGVuZ3RoO1xuICB2YXIgYnl0ZXNSZWFkID0gYnVmTGVuZ3RoO1xuICB2YXIgcG9zID0gMDtcblxuICB2YXIgZmRyID0gZnMub3BlblN5bmMoZmlsZSwgJ3InKTtcbiAgdmFyIG51bUxpbmVzUmVhZCA9IDA7XG4gIHZhciByZXQgPSAnJztcbiAgd2hpbGUgKGJ5dGVzUmVhZCA9PT0gYnVmTGVuZ3RoICYmIG51bUxpbmVzUmVhZCA8IG51bUxpbmVzKSB7XG4gICAgYnl0ZXNSZWFkID0gZnMucmVhZFN5bmMoZmRyLCBidWYsIDAsIGJ1Zkxlbmd0aCwgcG9zKTtcbiAgICB2YXIgYnVmU3RyID0gYnVmLnRvU3RyaW5nKCd1dGY4JywgMCwgYnl0ZXNSZWFkKTtcbiAgICBudW1MaW5lc1JlYWQgKz0gYnVmU3RyLnNwbGl0KCdcXG4nKS5sZW5ndGggLSAxO1xuICAgIHJldCArPSBidWZTdHI7XG4gICAgcG9zICs9IGJ5dGVzUmVhZDtcbiAgfVxuXG4gIGZzLmNsb3NlU3luYyhmZHIpO1xuICByZXR1cm4gcmV0O1xufVxuXG4vL0Bcbi8vQCAjIyMgaGVhZChbeyctbic6IFxcPG51bVxcPn0sXSBmaWxlIFssIGZpbGUgLi4uXSlcbi8vQCAjIyMgaGVhZChbeyctbic6IFxcPG51bVxcPn0sXSBmaWxlX2FycmF5KVxuLy9AXG4vL0AgQXZhaWxhYmxlIG9wdGlvbnM6XG4vL0Bcbi8vQCArIGAtbiA8bnVtPmA6IFNob3cgdGhlIGZpcnN0IGA8bnVtPmAgbGluZXMgb2YgdGhlIGZpbGVzXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCB2YXIgc3RyID0gaGVhZCh7Jy1uJzogMX0sICdmaWxlKi50eHQnKTtcbi8vQCB2YXIgc3RyID0gaGVhZCgnZmlsZTEnLCAnZmlsZTInKTtcbi8vQCB2YXIgc3RyID0gaGVhZChbJ2ZpbGUxJywgJ2ZpbGUyJ10pOyAvLyBzYW1lIGFzIGFib3ZlXG4vL0AgYGBgXG4vL0Bcbi8vQCBSZWFkIHRoZSBzdGFydCBvZiBhIGZpbGUuXG5mdW5jdGlvbiBfaGVhZChvcHRpb25zLCBmaWxlcykge1xuICB2YXIgaGVhZCA9IFtdO1xuICB2YXIgcGlwZSA9IGNvbW1vbi5yZWFkRnJvbVBpcGUoKTtcblxuICBpZiAoIWZpbGVzICYmICFwaXBlKSBjb21tb24uZXJyb3IoJ25vIHBhdGhzIGdpdmVuJyk7XG5cbiAgdmFyIGlkeCA9IDE7XG4gIGlmIChvcHRpb25zLm51bUxpbmVzID09PSB0cnVlKSB7XG4gICAgaWR4ID0gMjtcbiAgICBvcHRpb25zLm51bUxpbmVzID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5udW1MaW5lcyA9PT0gZmFsc2UpIHtcbiAgICBvcHRpb25zLm51bUxpbmVzID0gMTA7XG4gIH1cbiAgZmlsZXMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgaWR4KTtcblxuICBpZiAocGlwZSkge1xuICAgIGZpbGVzLnVuc2hpZnQoJy0nKTtcbiAgfVxuXG4gIHZhciBzaG91bGRBcHBlbmROZXdsaW5lID0gZmFsc2U7XG4gIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICBpZiAoZmlsZSAhPT0gJy0nKSB7XG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZSkpIHtcbiAgICAgICAgY29tbW9uLmVycm9yKCdubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5OiAnICsgZmlsZSwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChjb21tb24uc3RhdEZvbGxvd0xpbmtzKGZpbGUpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgY29tbW9uLmVycm9yKFwiZXJyb3IgcmVhZGluZyAnXCIgKyBmaWxlICsgXCInOiBJcyBhIGRpcmVjdG9yeVwiLCB7XG4gICAgICAgICAgY29udGludWU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnRzO1xuICAgIGlmIChmaWxlID09PSAnLScpIHtcbiAgICAgIGNvbnRlbnRzID0gcGlwZTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMubnVtTGluZXMgPCAwKSB7XG4gICAgICBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50cyA9IHJlYWRTb21lTGluZXMoZmlsZSwgb3B0aW9ucy5udW1MaW5lcyk7XG4gICAgfVxuXG4gICAgdmFyIGxpbmVzID0gY29udGVudHMuc3BsaXQoJ1xcbicpO1xuICAgIHZhciBoYXNUcmFpbGluZ05ld2xpbmUgPSAobGluZXNbbGluZXMubGVuZ3RoIC0gMV0gPT09ICcnKTtcbiAgICBpZiAoaGFzVHJhaWxpbmdOZXdsaW5lKSB7XG4gICAgICBsaW5lcy5wb3AoKTtcbiAgICB9XG4gICAgc2hvdWxkQXBwZW5kTmV3bGluZSA9IChoYXNUcmFpbGluZ05ld2xpbmUgfHwgb3B0aW9ucy5udW1MaW5lcyA8IGxpbmVzLmxlbmd0aCk7XG5cbiAgICBoZWFkID0gaGVhZC5jb25jYXQobGluZXMuc2xpY2UoMCwgb3B0aW9ucy5udW1MaW5lcykpO1xuICB9KTtcblxuICBpZiAoc2hvdWxkQXBwZW5kTmV3bGluZSkge1xuICAgIGhlYWQucHVzaCgnJyk7IC8vIHRvIGFkZCBhIHRyYWlsaW5nIG5ld2xpbmUgb25jZSB3ZSBqb2luXG4gIH1cbiAgcmV0dXJuIGhlYWQuam9pbignXFxuJyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9oZWFkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/head.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/ln.js":
/*!****************************************!*\
  !*** ./node_modules/shelljs/src/ln.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\ncommon.register('ln', _ln, {\n  cmdOptions: {\n    's': 'symlink',\n    'f': 'force',\n  },\n});\n\n//@\n//@ ### ln([options,] source, dest)\n//@\n//@ Available options:\n//@\n//@ + `-s`: symlink\n//@ + `-f`: force\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ ln('file', 'newlink');\n//@ ln('-sf', 'file', 'existing');\n//@ ```\n//@\n//@ Links `source` to `dest`. Use `-f` to force the link, should `dest` already exist.\nfunction _ln(options, source, dest) {\n  if (!source || !dest) {\n    common.error('Missing <source> and/or <dest>');\n  }\n\n  source = String(source);\n  var sourcePath = path.normalize(source).replace(RegExp(path.sep + '$'), '');\n  var isAbsolute = (path.resolve(source) === sourcePath);\n  dest = path.resolve(process.cwd(), String(dest));\n\n  if (fs.existsSync(dest)) {\n    if (!options.force) {\n      common.error('Destination file exists', { continue: true });\n    }\n\n    fs.unlinkSync(dest);\n  }\n\n  if (options.symlink) {\n    var isWindows = process.platform === 'win32';\n    var linkType = isWindows ? 'file' : null;\n    var resolvedSourcePath = isAbsolute ? sourcePath : path.resolve(process.cwd(), path.dirname(dest), source);\n    if (!fs.existsSync(resolvedSourcePath)) {\n      common.error('Source file does not exist', { continue: true });\n    } else if (isWindows && common.statFollowLinks(resolvedSourcePath).isDirectory()) {\n      linkType = 'junction';\n    }\n\n    try {\n      fs.symlinkSync(linkType === 'junction' ? resolvedSourcePath : source, dest, linkType);\n    } catch (err) {\n      common.error(err.message);\n    }\n  } else {\n    if (!fs.existsSync(source)) {\n      common.error('Source file does not exist', { continue: true });\n    }\n    try {\n      fs.linkSync(source, dest);\n    } catch (err) {\n      common.error(err.message);\n    }\n  }\n  return '';\n}\nmodule.exports = _ln;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvbG4uanMiLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxtQkFBTyxDQUFDLGNBQUk7QUFDckIsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyw0REFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnREFBZ0QsZ0JBQWdCO0FBQ2hFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxnQkFBZ0I7QUFDbkUsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsbURBQW1ELGdCQUFnQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy9sbi5qcz8wNTJmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ2xuJywgX2xuLCB7XG4gIGNtZE9wdGlvbnM6IHtcbiAgICAncyc6ICdzeW1saW5rJyxcbiAgICAnZic6ICdmb3JjZScsXG4gIH0sXG59KTtcblxuLy9AXG4vL0AgIyMjIGxuKFtvcHRpb25zLF0gc291cmNlLCBkZXN0KVxuLy9AXG4vL0AgQXZhaWxhYmxlIG9wdGlvbnM6XG4vL0Bcbi8vQCArIGAtc2A6IHN5bWxpbmtcbi8vQCArIGAtZmA6IGZvcmNlXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCBsbignZmlsZScsICduZXdsaW5rJyk7XG4vL0AgbG4oJy1zZicsICdmaWxlJywgJ2V4aXN0aW5nJyk7XG4vL0AgYGBgXG4vL0Bcbi8vQCBMaW5rcyBgc291cmNlYCB0byBgZGVzdGAuIFVzZSBgLWZgIHRvIGZvcmNlIHRoZSBsaW5rLCBzaG91bGQgYGRlc3RgIGFscmVhZHkgZXhpc3QuXG5mdW5jdGlvbiBfbG4ob3B0aW9ucywgc291cmNlLCBkZXN0KSB7XG4gIGlmICghc291cmNlIHx8ICFkZXN0KSB7XG4gICAgY29tbW9uLmVycm9yKCdNaXNzaW5nIDxzb3VyY2U+IGFuZC9vciA8ZGVzdD4nKTtcbiAgfVxuXG4gIHNvdXJjZSA9IFN0cmluZyhzb3VyY2UpO1xuICB2YXIgc291cmNlUGF0aCA9IHBhdGgubm9ybWFsaXplKHNvdXJjZSkucmVwbGFjZShSZWdFeHAocGF0aC5zZXAgKyAnJCcpLCAnJyk7XG4gIHZhciBpc0Fic29sdXRlID0gKHBhdGgucmVzb2x2ZShzb3VyY2UpID09PSBzb3VyY2VQYXRoKTtcbiAgZGVzdCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBTdHJpbmcoZGVzdCkpO1xuXG4gIGlmIChmcy5leGlzdHNTeW5jKGRlc3QpKSB7XG4gICAgaWYgKCFvcHRpb25zLmZvcmNlKSB7XG4gICAgICBjb21tb24uZXJyb3IoJ0Rlc3RpbmF0aW9uIGZpbGUgZXhpc3RzJywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBmcy51bmxpbmtTeW5jKGRlc3QpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuc3ltbGluaykge1xuICAgIHZhciBpc1dpbmRvd3MgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInO1xuICAgIHZhciBsaW5rVHlwZSA9IGlzV2luZG93cyA/ICdmaWxlJyA6IG51bGw7XG4gICAgdmFyIHJlc29sdmVkU291cmNlUGF0aCA9IGlzQWJzb2x1dGUgPyBzb3VyY2VQYXRoIDogcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIHBhdGguZGlybmFtZShkZXN0KSwgc291cmNlKTtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMocmVzb2x2ZWRTb3VyY2VQYXRoKSkge1xuICAgICAgY29tbW9uLmVycm9yKCdTb3VyY2UgZmlsZSBkb2VzIG5vdCBleGlzdCcsIHsgY29udGludWU6IHRydWUgfSk7XG4gICAgfSBlbHNlIGlmIChpc1dpbmRvd3MgJiYgY29tbW9uLnN0YXRGb2xsb3dMaW5rcyhyZXNvbHZlZFNvdXJjZVBhdGgpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIGxpbmtUeXBlID0gJ2p1bmN0aW9uJztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZnMuc3ltbGlua1N5bmMobGlua1R5cGUgPT09ICdqdW5jdGlvbicgPyByZXNvbHZlZFNvdXJjZVBhdGggOiBzb3VyY2UsIGRlc3QsIGxpbmtUeXBlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbW1vbi5lcnJvcihlcnIubWVzc2FnZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhzb3VyY2UpKSB7XG4gICAgICBjb21tb24uZXJyb3IoJ1NvdXJjZSBmaWxlIGRvZXMgbm90IGV4aXN0JywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGZzLmxpbmtTeW5jKHNvdXJjZSwgZGVzdCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb21tb24uZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9sbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/ln.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/ls.js":
/*!****************************************!*\
  !*** ./node_modules/shelljs/src/ls.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var path = __webpack_require__(/*! path */ \"path\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar glob = __webpack_require__(/*! glob */ \"(ssr)/./node_modules/glob/glob.js\");\n\nvar globPatternRecursive = path.sep + '**';\n\ncommon.register('ls', _ls, {\n  cmdOptions: {\n    'R': 'recursive',\n    'A': 'all',\n    'L': 'link',\n    'a': 'all_deprecated',\n    'd': 'directory',\n    'l': 'long',\n  },\n});\n\n//@\n//@ ### ls([options,] [path, ...])\n//@ ### ls([options,] path_array)\n//@\n//@ Available options:\n//@\n//@ + `-R`: recursive\n//@ + `-A`: all files (include files beginning with `.`, except for `.` and `..`)\n//@ + `-L`: follow symlinks\n//@ + `-d`: list directories themselves, not their contents\n//@ + `-l`: list objects representing each file, each with fields containing `ls\n//@         -l` output fields. See\n//@         [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats)\n//@         for more info\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ ls('projs/*.js');\n//@ ls('-R', '/users/me', '/tmp');\n//@ ls('-R', ['/users/me', '/tmp']); // same as above\n//@ ls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}\n//@ ```\n//@\n//@ Returns array of files in the given `path`, or files in\n//@ the current directory if no `path` is  provided.\nfunction _ls(options, paths) {\n  if (options.all_deprecated) {\n    // We won't support the -a option as it's hard to image why it's useful\n    // (it includes '.' and '..' in addition to '.*' files)\n    // For backwards compatibility we'll dump a deprecated message and proceed as before\n    common.log('ls: Option -a is deprecated. Use -A instead');\n    options.all = true;\n  }\n\n  if (!paths) {\n    paths = ['.'];\n  } else {\n    paths = [].slice.call(arguments, 1);\n  }\n\n  var list = [];\n\n  function pushFile(abs, relName, stat) {\n    if (process.platform === 'win32') {\n      relName = relName.replace(/\\\\/g, '/');\n    }\n    if (options.long) {\n      stat = stat || (options.link ? common.statFollowLinks(abs) : common.statNoFollowLinks(abs));\n      list.push(addLsAttributes(relName, stat));\n    } else {\n      // list.push(path.relative(rel || '.', file));\n      list.push(relName);\n    }\n  }\n\n  paths.forEach(function (p) {\n    var stat;\n\n    try {\n      stat = options.link ? common.statFollowLinks(p) : common.statNoFollowLinks(p);\n      // follow links to directories by default\n      if (stat.isSymbolicLink()) {\n        /* istanbul ignore next */\n        // workaround for https://github.com/shelljs/shelljs/issues/795\n        // codecov seems to have a bug that miscalculate this block as uncovered.\n        // but according to nyc report this block does get covered.\n        try {\n          var _stat = common.statFollowLinks(p);\n          if (_stat.isDirectory()) {\n            stat = _stat;\n          }\n        } catch (_) {} // bad symlink, treat it like a file\n      }\n    } catch (e) {\n      common.error('no such file or directory: ' + p, 2, { continue: true });\n      return;\n    }\n\n    // If the stat succeeded\n    if (stat.isDirectory() && !options.directory) {\n      if (options.recursive) {\n        // use glob, because it's simple\n        glob.sync(p + globPatternRecursive, { dot: options.all, follow: options.link })\n          .forEach(function (item) {\n            // Glob pattern returns the directory itself and needs to be filtered out.\n            if (path.relative(p, item)) {\n              pushFile(item, path.relative(p, item));\n            }\n          });\n      } else if (options.all) {\n        // use fs.readdirSync, because it's fast\n        fs.readdirSync(p).forEach(function (item) {\n          pushFile(path.join(p, item), item);\n        });\n      } else {\n        // use fs.readdirSync and then filter out secret files\n        fs.readdirSync(p).forEach(function (item) {\n          if (item[0] !== '.') {\n            pushFile(path.join(p, item), item);\n          }\n        });\n      }\n    } else {\n      pushFile(p, p, stat);\n    }\n  });\n\n  // Add methods, to make this more compatible with ShellStrings\n  return list;\n}\n\nfunction addLsAttributes(pathName, stats) {\n  // Note: this object will contain more information than .toString() returns\n  stats.name = pathName;\n  stats.toString = function () {\n    // Return a string resembling unix's `ls -l` format\n    return [this.mode, this.nlink, this.uid, this.gid, this.size, this.mtime, this.name].join(' ');\n  };\n  return stats;\n}\n\nmodule.exports = _ls;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLGFBQWEsbUJBQU8sQ0FBQyw0REFBVTtBQUMvQixXQUFXLG1CQUFPLENBQUMsK0NBQU07O0FBRXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDLDBCQUEwQixLQUFLO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsYUFBYTtBQUN2QjtBQUNBLE1BQU07QUFDTiwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsd0NBQXdDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy9scy5qcz81ZDc4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGdsb2IgPSByZXF1aXJlKCdnbG9iJyk7XG5cbnZhciBnbG9iUGF0dGVyblJlY3Vyc2l2ZSA9IHBhdGguc2VwICsgJyoqJztcblxuY29tbW9uLnJlZ2lzdGVyKCdscycsIF9scywge1xuICBjbWRPcHRpb25zOiB7XG4gICAgJ1InOiAncmVjdXJzaXZlJyxcbiAgICAnQSc6ICdhbGwnLFxuICAgICdMJzogJ2xpbmsnLFxuICAgICdhJzogJ2FsbF9kZXByZWNhdGVkJyxcbiAgICAnZCc6ICdkaXJlY3RvcnknLFxuICAgICdsJzogJ2xvbmcnLFxuICB9LFxufSk7XG5cbi8vQFxuLy9AICMjIyBscyhbb3B0aW9ucyxdIFtwYXRoLCAuLi5dKVxuLy9AICMjIyBscyhbb3B0aW9ucyxdIHBhdGhfYXJyYXkpXG4vL0Bcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC1SYDogcmVjdXJzaXZlXG4vL0AgKyBgLUFgOiBhbGwgZmlsZXMgKGluY2x1ZGUgZmlsZXMgYmVnaW5uaW5nIHdpdGggYC5gLCBleGNlcHQgZm9yIGAuYCBhbmQgYC4uYClcbi8vQCArIGAtTGA6IGZvbGxvdyBzeW1saW5rc1xuLy9AICsgYC1kYDogbGlzdCBkaXJlY3RvcmllcyB0aGVtc2VsdmVzLCBub3QgdGhlaXIgY29udGVudHNcbi8vQCArIGAtbGA6IGxpc3Qgb2JqZWN0cyByZXByZXNlbnRpbmcgZWFjaCBmaWxlLCBlYWNoIHdpdGggZmllbGRzIGNvbnRhaW5pbmcgYGxzXG4vL0AgICAgICAgICAtbGAgb3V0cHV0IGZpZWxkcy4gU2VlXG4vL0AgICAgICAgICBbYGZzLlN0YXRzYF0oaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9mcy5odG1sI2ZzX2NsYXNzX2ZzX3N0YXRzKVxuLy9AICAgICAgICAgZm9yIG1vcmUgaW5mb1xuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgbHMoJ3Byb2pzLyouanMnKTtcbi8vQCBscygnLVInLCAnL3VzZXJzL21lJywgJy90bXAnKTtcbi8vQCBscygnLVInLCBbJy91c2Vycy9tZScsICcvdG1wJ10pOyAvLyBzYW1lIGFzIGFib3ZlXG4vL0AgbHMoJy1sJywgJ2ZpbGUudHh0Jyk7IC8vIHsgbmFtZTogJ2ZpbGUudHh0JywgbW9kZTogMzMxODgsIG5saW5rOiAxLCAuLi59XG4vL0AgYGBgXG4vL0Bcbi8vQCBSZXR1cm5zIGFycmF5IG9mIGZpbGVzIGluIHRoZSBnaXZlbiBgcGF0aGAsIG9yIGZpbGVzIGluXG4vL0AgdGhlIGN1cnJlbnQgZGlyZWN0b3J5IGlmIG5vIGBwYXRoYCBpcyAgcHJvdmlkZWQuXG5mdW5jdGlvbiBfbHMob3B0aW9ucywgcGF0aHMpIHtcbiAgaWYgKG9wdGlvbnMuYWxsX2RlcHJlY2F0ZWQpIHtcbiAgICAvLyBXZSB3b24ndCBzdXBwb3J0IHRoZSAtYSBvcHRpb24gYXMgaXQncyBoYXJkIHRvIGltYWdlIHdoeSBpdCdzIHVzZWZ1bFxuICAgIC8vIChpdCBpbmNsdWRlcyAnLicgYW5kICcuLicgaW4gYWRkaXRpb24gdG8gJy4qJyBmaWxlcylcbiAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2UnbGwgZHVtcCBhIGRlcHJlY2F0ZWQgbWVzc2FnZSBhbmQgcHJvY2VlZCBhcyBiZWZvcmVcbiAgICBjb21tb24ubG9nKCdsczogT3B0aW9uIC1hIGlzIGRlcHJlY2F0ZWQuIFVzZSAtQSBpbnN0ZWFkJyk7XG4gICAgb3B0aW9ucy5hbGwgPSB0cnVlO1xuICB9XG5cbiAgaWYgKCFwYXRocykge1xuICAgIHBhdGhzID0gWycuJ107XG4gIH0gZWxzZSB7XG4gICAgcGF0aHMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIH1cblxuICB2YXIgbGlzdCA9IFtdO1xuXG4gIGZ1bmN0aW9uIHB1c2hGaWxlKGFicywgcmVsTmFtZSwgc3RhdCkge1xuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgICByZWxOYW1lID0gcmVsTmFtZS5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmxvbmcpIHtcbiAgICAgIHN0YXQgPSBzdGF0IHx8IChvcHRpb25zLmxpbmsgPyBjb21tb24uc3RhdEZvbGxvd0xpbmtzKGFicykgOiBjb21tb24uc3RhdE5vRm9sbG93TGlua3MoYWJzKSk7XG4gICAgICBsaXN0LnB1c2goYWRkTHNBdHRyaWJ1dGVzKHJlbE5hbWUsIHN0YXQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbGlzdC5wdXNoKHBhdGgucmVsYXRpdmUocmVsIHx8ICcuJywgZmlsZSkpO1xuICAgICAgbGlzdC5wdXNoKHJlbE5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHBhdGhzLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICB2YXIgc3RhdDtcblxuICAgIHRyeSB7XG4gICAgICBzdGF0ID0gb3B0aW9ucy5saW5rID8gY29tbW9uLnN0YXRGb2xsb3dMaW5rcyhwKSA6IGNvbW1vbi5zdGF0Tm9Gb2xsb3dMaW5rcyhwKTtcbiAgICAgIC8vIGZvbGxvdyBsaW5rcyB0byBkaXJlY3RvcmllcyBieSBkZWZhdWx0XG4gICAgICBpZiAoc3RhdC5pc1N5bWJvbGljTGluaygpKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIC8vIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9zaGVsbGpzL3NoZWxsanMvaXNzdWVzLzc5NVxuICAgICAgICAvLyBjb2RlY292IHNlZW1zIHRvIGhhdmUgYSBidWcgdGhhdCBtaXNjYWxjdWxhdGUgdGhpcyBibG9jayBhcyB1bmNvdmVyZWQuXG4gICAgICAgIC8vIGJ1dCBhY2NvcmRpbmcgdG8gbnljIHJlcG9ydCB0aGlzIGJsb2NrIGRvZXMgZ2V0IGNvdmVyZWQuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIF9zdGF0ID0gY29tbW9uLnN0YXRGb2xsb3dMaW5rcyhwKTtcbiAgICAgICAgICBpZiAoX3N0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgc3RhdCA9IF9zdGF0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoXykge30gLy8gYmFkIHN5bWxpbmssIHRyZWF0IGl0IGxpa2UgYSBmaWxlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29tbW9uLmVycm9yKCdubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5OiAnICsgcCwgMiwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc3RhdCBzdWNjZWVkZWRcbiAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpICYmICFvcHRpb25zLmRpcmVjdG9yeSkge1xuICAgICAgaWYgKG9wdGlvbnMucmVjdXJzaXZlKSB7XG4gICAgICAgIC8vIHVzZSBnbG9iLCBiZWNhdXNlIGl0J3Mgc2ltcGxlXG4gICAgICAgIGdsb2Iuc3luYyhwICsgZ2xvYlBhdHRlcm5SZWN1cnNpdmUsIHsgZG90OiBvcHRpb25zLmFsbCwgZm9sbG93OiBvcHRpb25zLmxpbmsgfSlcbiAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgLy8gR2xvYiBwYXR0ZXJuIHJldHVybnMgdGhlIGRpcmVjdG9yeSBpdHNlbGYgYW5kIG5lZWRzIHRvIGJlIGZpbHRlcmVkIG91dC5cbiAgICAgICAgICAgIGlmIChwYXRoLnJlbGF0aXZlKHAsIGl0ZW0pKSB7XG4gICAgICAgICAgICAgIHB1c2hGaWxlKGl0ZW0sIHBhdGgucmVsYXRpdmUocCwgaXRlbSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmFsbCkge1xuICAgICAgICAvLyB1c2UgZnMucmVhZGRpclN5bmMsIGJlY2F1c2UgaXQncyBmYXN0XG4gICAgICAgIGZzLnJlYWRkaXJTeW5jKHApLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBwdXNoRmlsZShwYXRoLmpvaW4ocCwgaXRlbSksIGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVzZSBmcy5yZWFkZGlyU3luYyBhbmQgdGhlbiBmaWx0ZXIgb3V0IHNlY3JldCBmaWxlc1xuICAgICAgICBmcy5yZWFkZGlyU3luYyhwKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgaWYgKGl0ZW1bMF0gIT09ICcuJykge1xuICAgICAgICAgICAgcHVzaEZpbGUocGF0aC5qb2luKHAsIGl0ZW0pLCBpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwdXNoRmlsZShwLCBwLCBzdGF0KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEFkZCBtZXRob2RzLCB0byBtYWtlIHRoaXMgbW9yZSBjb21wYXRpYmxlIHdpdGggU2hlbGxTdHJpbmdzXG4gIHJldHVybiBsaXN0O1xufVxuXG5mdW5jdGlvbiBhZGRMc0F0dHJpYnV0ZXMocGF0aE5hbWUsIHN0YXRzKSB7XG4gIC8vIE5vdGU6IHRoaXMgb2JqZWN0IHdpbGwgY29udGFpbiBtb3JlIGluZm9ybWF0aW9uIHRoYW4gLnRvU3RyaW5nKCkgcmV0dXJuc1xuICBzdGF0cy5uYW1lID0gcGF0aE5hbWU7XG4gIHN0YXRzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFJldHVybiBhIHN0cmluZyByZXNlbWJsaW5nIHVuaXgncyBgbHMgLWxgIGZvcm1hdFxuICAgIHJldHVybiBbdGhpcy5tb2RlLCB0aGlzLm5saW5rLCB0aGlzLnVpZCwgdGhpcy5naWQsIHRoaXMuc2l6ZSwgdGhpcy5tdGltZSwgdGhpcy5uYW1lXS5qb2luKCcgJyk7XG4gIH07XG4gIHJldHVybiBzdGF0cztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/ls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/mkdir.js":
/*!*******************************************!*\
  !*** ./node_modules/shelljs/src/mkdir.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\ncommon.register('mkdir', _mkdir, {\n  cmdOptions: {\n    'p': 'fullpath',\n  },\n});\n\n// Recursively creates `dir`\nfunction mkdirSyncRecursive(dir) {\n  var baseDir = path.dirname(dir);\n\n  // Prevents some potential problems arising from malformed UNCs or\n  // insufficient permissions.\n  /* istanbul ignore next */\n  if (baseDir === dir) {\n    common.error('dirname() failed: [' + dir + ']');\n  }\n\n  // Base dir exists, no recursion necessary\n  if (fs.existsSync(baseDir)) {\n    fs.mkdirSync(dir, parseInt('0777', 8));\n    return;\n  }\n\n  // Base dir does not exist, go recursive\n  mkdirSyncRecursive(baseDir);\n\n  // Base dir created, can create dir\n  fs.mkdirSync(dir, parseInt('0777', 8));\n}\n\n//@\n//@ ### mkdir([options,] dir [, dir ...])\n//@ ### mkdir([options,] dir_array)\n//@\n//@ Available options:\n//@\n//@ + `-p`: full path (and create intermediate directories, if necessary)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\n//@ mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\n//@ ```\n//@\n//@ Creates directories.\nfunction _mkdir(options, dirs) {\n  if (!dirs) common.error('no paths given');\n\n  if (typeof dirs === 'string') {\n    dirs = [].slice.call(arguments, 1);\n  }\n  // if it's array leave it as it is\n\n  dirs.forEach(function (dir) {\n    try {\n      var stat = common.statNoFollowLinks(dir);\n      if (!options.fullpath) {\n        common.error('path already exists: ' + dir, { continue: true });\n      } else if (stat.isFile()) {\n        common.error('cannot create directory ' + dir + ': File exists', { continue: true });\n      }\n      return; // skip dir\n    } catch (e) {\n      // do nothing\n    }\n\n    // Base dir does not exist, and no -p option given\n    var baseDir = path.dirname(dir);\n    if (!fs.existsSync(baseDir) && !options.fullpath) {\n      common.error('no such file or directory: ' + baseDir, { continue: true });\n      return; // skip dir\n    }\n\n    try {\n      if (options.fullpath) {\n        mkdirSyncRecursive(path.resolve(dir));\n      } else {\n        fs.mkdirSync(dir, parseInt('0777', 8));\n      }\n    } catch (e) {\n      var reason;\n      if (e.code === 'EACCES') {\n        reason = 'Permission denied';\n      } else if (e.code === 'ENOTDIR' || e.code === 'ENOENT') {\n        reason = 'Not a directory';\n      } else {\n        /* istanbul ignore next */\n        throw e;\n      }\n      common.error('cannot create directory ' + dir + ': ' + reason, { continue: true });\n    }\n  });\n  return '';\n} // mkdir\nmodule.exports = _mkdir;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvbWtkaXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLDREQUFVO0FBQy9CLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFekI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdCQUFnQjtBQUN0RSxRQUFRO0FBQ1IsMkVBQTJFLGdCQUFnQjtBQUMzRjtBQUNBLGNBQWM7QUFDZCxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsZ0JBQWdCO0FBQzlFLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLGdCQUFnQjtBQUN2RjtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvbWtkaXIuanM/MTQ5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdta2RpcicsIF9ta2Rpciwge1xuICBjbWRPcHRpb25zOiB7XG4gICAgJ3AnOiAnZnVsbHBhdGgnLFxuICB9LFxufSk7XG5cbi8vIFJlY3Vyc2l2ZWx5IGNyZWF0ZXMgYGRpcmBcbmZ1bmN0aW9uIG1rZGlyU3luY1JlY3Vyc2l2ZShkaXIpIHtcbiAgdmFyIGJhc2VEaXIgPSBwYXRoLmRpcm5hbWUoZGlyKTtcblxuICAvLyBQcmV2ZW50cyBzb21lIHBvdGVudGlhbCBwcm9ibGVtcyBhcmlzaW5nIGZyb20gbWFsZm9ybWVkIFVOQ3Mgb3JcbiAgLy8gaW5zdWZmaWNpZW50IHBlcm1pc3Npb25zLlxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoYmFzZURpciA9PT0gZGlyKSB7XG4gICAgY29tbW9uLmVycm9yKCdkaXJuYW1lKCkgZmFpbGVkOiBbJyArIGRpciArICddJyk7XG4gIH1cblxuICAvLyBCYXNlIGRpciBleGlzdHMsIG5vIHJlY3Vyc2lvbiBuZWNlc3NhcnlcbiAgaWYgKGZzLmV4aXN0c1N5bmMoYmFzZURpcikpIHtcbiAgICBmcy5ta2RpclN5bmMoZGlyLCBwYXJzZUludCgnMDc3NycsIDgpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBCYXNlIGRpciBkb2VzIG5vdCBleGlzdCwgZ28gcmVjdXJzaXZlXG4gIG1rZGlyU3luY1JlY3Vyc2l2ZShiYXNlRGlyKTtcblxuICAvLyBCYXNlIGRpciBjcmVhdGVkLCBjYW4gY3JlYXRlIGRpclxuICBmcy5ta2RpclN5bmMoZGlyLCBwYXJzZUludCgnMDc3NycsIDgpKTtcbn1cblxuLy9AXG4vL0AgIyMjIG1rZGlyKFtvcHRpb25zLF0gZGlyIFssIGRpciAuLi5dKVxuLy9AICMjIyBta2Rpcihbb3B0aW9ucyxdIGRpcl9hcnJheSlcbi8vQFxuLy9AIEF2YWlsYWJsZSBvcHRpb25zOlxuLy9AXG4vL0AgKyBgLXBgOiBmdWxsIHBhdGggKGFuZCBjcmVhdGUgaW50ZXJtZWRpYXRlIGRpcmVjdG9yaWVzLCBpZiBuZWNlc3NhcnkpXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCBta2RpcignLXAnLCAnL3RtcC9hL2IvYy9kJywgJy90bXAvZS9mL2cnKTtcbi8vQCBta2RpcignLXAnLCBbJy90bXAvYS9iL2MvZCcsICcvdG1wL2UvZi9nJ10pOyAvLyBzYW1lIGFzIGFib3ZlXG4vL0AgYGBgXG4vL0Bcbi8vQCBDcmVhdGVzIGRpcmVjdG9yaWVzLlxuZnVuY3Rpb24gX21rZGlyKG9wdGlvbnMsIGRpcnMpIHtcbiAgaWYgKCFkaXJzKSBjb21tb24uZXJyb3IoJ25vIHBhdGhzIGdpdmVuJyk7XG5cbiAgaWYgKHR5cGVvZiBkaXJzID09PSAnc3RyaW5nJykge1xuICAgIGRpcnMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIH1cbiAgLy8gaWYgaXQncyBhcnJheSBsZWF2ZSBpdCBhcyBpdCBpc1xuXG4gIGRpcnMuZm9yRWFjaChmdW5jdGlvbiAoZGlyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdGF0ID0gY29tbW9uLnN0YXROb0ZvbGxvd0xpbmtzKGRpcik7XG4gICAgICBpZiAoIW9wdGlvbnMuZnVsbHBhdGgpIHtcbiAgICAgICAgY29tbW9uLmVycm9yKCdwYXRoIGFscmVhZHkgZXhpc3RzOiAnICsgZGlyLCB7IGNvbnRpbnVlOiB0cnVlIH0pO1xuICAgICAgfSBlbHNlIGlmIChzdGF0LmlzRmlsZSgpKSB7XG4gICAgICAgIGNvbW1vbi5lcnJvcignY2Fubm90IGNyZWF0ZSBkaXJlY3RvcnkgJyArIGRpciArICc6IEZpbGUgZXhpc3RzJywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjsgLy8gc2tpcCBkaXJcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxuXG4gICAgLy8gQmFzZSBkaXIgZG9lcyBub3QgZXhpc3QsIGFuZCBubyAtcCBvcHRpb24gZ2l2ZW5cbiAgICB2YXIgYmFzZURpciA9IHBhdGguZGlybmFtZShkaXIpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhiYXNlRGlyKSAmJiAhb3B0aW9ucy5mdWxscGF0aCkge1xuICAgICAgY29tbW9uLmVycm9yKCdubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5OiAnICsgYmFzZURpciwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybjsgLy8gc2tpcCBkaXJcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKG9wdGlvbnMuZnVsbHBhdGgpIHtcbiAgICAgICAgbWtkaXJTeW5jUmVjdXJzaXZlKHBhdGgucmVzb2x2ZShkaXIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZzLm1rZGlyU3luYyhkaXIsIHBhcnNlSW50KCcwNzc3JywgOCkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHZhciByZWFzb247XG4gICAgICBpZiAoZS5jb2RlID09PSAnRUFDQ0VTJykge1xuICAgICAgICByZWFzb24gPSAnUGVybWlzc2lvbiBkZW5pZWQnO1xuICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09ICdFTk9URElSJyB8fCBlLmNvZGUgPT09ICdFTk9FTlQnKSB7XG4gICAgICAgIHJlYXNvbiA9ICdOb3QgYSBkaXJlY3RvcnknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICAgIGNvbW1vbi5lcnJvcignY2Fubm90IGNyZWF0ZSBkaXJlY3RvcnkgJyArIGRpciArICc6ICcgKyByZWFzb24sIHsgY29udGludWU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuICcnO1xufSAvLyBta2RpclxubW9kdWxlLmV4cG9ydHMgPSBfbWtkaXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/mkdir.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/mv.js":
/*!****************************************!*\
  !*** ./node_modules/shelljs/src/mv.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar cp = __webpack_require__(/*! ./cp */ \"(ssr)/./node_modules/shelljs/src/cp.js\");\nvar rm = __webpack_require__(/*! ./rm */ \"(ssr)/./node_modules/shelljs/src/rm.js\");\n\ncommon.register('mv', _mv, {\n  cmdOptions: {\n    'f': '!no_force',\n    'n': 'no_force',\n  },\n});\n\n// Checks if cureent file was created recently\nfunction checkRecentCreated(sources, index) {\n  var lookedSource = sources[index];\n  return sources.slice(0, index).some(function (src) {\n    return path.basename(src) === path.basename(lookedSource);\n  });\n}\n\n//@\n//@ ### mv([options ,] source [, source ...], dest')\n//@ ### mv([options ,] source_array, dest')\n//@\n//@ Available options:\n//@\n//@ + `-f`: force (default behavior)\n//@ + `-n`: no-clobber\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ mv('-n', 'file', 'dir/');\n//@ mv('file1', 'file2', 'dir/');\n//@ mv(['file1', 'file2'], 'dir/'); // same as above\n//@ ```\n//@\n//@ Moves `source` file(s) to `dest`.\nfunction _mv(options, sources, dest) {\n  // Get sources, dest\n  if (arguments.length < 3) {\n    common.error('missing <source> and/or <dest>');\n  } else if (arguments.length > 3) {\n    sources = [].slice.call(arguments, 1, arguments.length - 1);\n    dest = arguments[arguments.length - 1];\n  } else if (typeof sources === 'string') {\n    sources = [sources];\n  } else {\n    // TODO(nate): figure out if we actually need this line\n    common.error('invalid arguments');\n  }\n\n  var exists = fs.existsSync(dest);\n  var stats = exists && common.statFollowLinks(dest);\n\n  // Dest is not existing dir, but multiple sources given\n  if ((!exists || !stats.isDirectory()) && sources.length > 1) {\n    common.error('dest is not a directory (too many sources)');\n  }\n\n  // Dest is an existing file, but no -f given\n  if (exists && stats.isFile() && options.no_force) {\n    common.error('dest file already exists: ' + dest);\n  }\n\n  sources.forEach(function (src, srcIndex) {\n    if (!fs.existsSync(src)) {\n      common.error('no such file or directory: ' + src, { continue: true });\n      return; // skip file\n    }\n\n    // If here, src exists\n\n    // When copying to '/path/dir':\n    //    thisDest = '/path/dir/file1'\n    var thisDest = dest;\n    if (fs.existsSync(dest) && common.statFollowLinks(dest).isDirectory()) {\n      thisDest = path.normalize(dest + '/' + path.basename(src));\n    }\n\n    var thisDestExists = fs.existsSync(thisDest);\n\n    if (thisDestExists && checkRecentCreated(sources, srcIndex)) {\n      // cannot overwrite file created recently in current execution, but we want to continue copying other files\n      if (!options.no_force) {\n        common.error(\"will not overwrite just-created '\" + thisDest + \"' with '\" + src + \"'\", { continue: true });\n      }\n      return;\n    }\n\n    if (fs.existsSync(thisDest) && options.no_force) {\n      common.error('dest file already exists: ' + thisDest, { continue: true });\n      return; // skip file\n    }\n\n    if (path.resolve(src) === path.dirname(path.resolve(thisDest))) {\n      common.error('cannot move to self: ' + src, { continue: true });\n      return; // skip file\n    }\n\n    try {\n      fs.renameSync(src, thisDest);\n    } catch (e) {\n      /* istanbul ignore next */\n      if (e.code === 'EXDEV') {\n        // If we're trying to `mv` to an external partition, we'll actually need\n        // to perform a copy and then clean up the original file. If either the\n        // copy or the rm fails with an exception, we should allow this\n        // exception to pass up to the top level.\n        cp('-r', src, thisDest);\n        rm('-rf', src);\n      }\n    }\n  }); // forEach(src)\n  return '';\n} // mv\nmodule.exports = _mv;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvbXYuanMiLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxtQkFBTyxDQUFDLGNBQUk7QUFDckIsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyw0REFBVTtBQUMvQixTQUFTLG1CQUFPLENBQUMsb0RBQU07QUFDdkIsU0FBUyxtQkFBTyxDQUFDLG9EQUFNOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwREFBMEQsZ0JBQWdCO0FBQzFFLGNBQWM7QUFDZDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLGdCQUFnQjtBQUNoSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBOEQsZ0JBQWdCO0FBQzlFLGNBQWM7QUFDZDs7QUFFQTtBQUNBLG9EQUFvRCxnQkFBZ0I7QUFDcEUsY0FBYztBQUNkOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLEdBQUc7QUFDTjtBQUNBLEVBQUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvbXYuanM/ZTFlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBjcCA9IHJlcXVpcmUoJy4vY3AnKTtcbnZhciBybSA9IHJlcXVpcmUoJy4vcm0nKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdtdicsIF9tdiwge1xuICBjbWRPcHRpb25zOiB7XG4gICAgJ2YnOiAnIW5vX2ZvcmNlJyxcbiAgICAnbic6ICdub19mb3JjZScsXG4gIH0sXG59KTtcblxuLy8gQ2hlY2tzIGlmIGN1cmVlbnQgZmlsZSB3YXMgY3JlYXRlZCByZWNlbnRseVxuZnVuY3Rpb24gY2hlY2tSZWNlbnRDcmVhdGVkKHNvdXJjZXMsIGluZGV4KSB7XG4gIHZhciBsb29rZWRTb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgcmV0dXJuIHNvdXJjZXMuc2xpY2UoMCwgaW5kZXgpLnNvbWUoZnVuY3Rpb24gKHNyYykge1xuICAgIHJldHVybiBwYXRoLmJhc2VuYW1lKHNyYykgPT09IHBhdGguYmFzZW5hbWUobG9va2VkU291cmNlKTtcbiAgfSk7XG59XG5cbi8vQFxuLy9AICMjIyBtdihbb3B0aW9ucyAsXSBzb3VyY2UgWywgc291cmNlIC4uLl0sIGRlc3QnKVxuLy9AICMjIyBtdihbb3B0aW9ucyAsXSBzb3VyY2VfYXJyYXksIGRlc3QnKVxuLy9AXG4vL0AgQXZhaWxhYmxlIG9wdGlvbnM6XG4vL0Bcbi8vQCArIGAtZmA6IGZvcmNlIChkZWZhdWx0IGJlaGF2aW9yKVxuLy9AICsgYC1uYDogbm8tY2xvYmJlclxuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgbXYoJy1uJywgJ2ZpbGUnLCAnZGlyLycpO1xuLy9AIG12KCdmaWxlMScsICdmaWxlMicsICdkaXIvJyk7XG4vL0AgbXYoWydmaWxlMScsICdmaWxlMiddLCAnZGlyLycpOyAvLyBzYW1lIGFzIGFib3ZlXG4vL0AgYGBgXG4vL0Bcbi8vQCBNb3ZlcyBgc291cmNlYCBmaWxlKHMpIHRvIGBkZXN0YC5cbmZ1bmN0aW9uIF9tdihvcHRpb25zLCBzb3VyY2VzLCBkZXN0KSB7XG4gIC8vIEdldCBzb3VyY2VzLCBkZXN0XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMykge1xuICAgIGNvbW1vbi5lcnJvcignbWlzc2luZyA8c291cmNlPiBhbmQvb3IgPGRlc3Q+Jyk7XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDMpIHtcbiAgICBzb3VyY2VzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEsIGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBkZXN0ID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc291cmNlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VzID0gW3NvdXJjZXNdO1xuICB9IGVsc2Uge1xuICAgIC8vIFRPRE8obmF0ZSk6IGZpZ3VyZSBvdXQgaWYgd2UgYWN0dWFsbHkgbmVlZCB0aGlzIGxpbmVcbiAgICBjb21tb24uZXJyb3IoJ2ludmFsaWQgYXJndW1lbnRzJyk7XG4gIH1cblxuICB2YXIgZXhpc3RzID0gZnMuZXhpc3RzU3luYyhkZXN0KTtcbiAgdmFyIHN0YXRzID0gZXhpc3RzICYmIGNvbW1vbi5zdGF0Rm9sbG93TGlua3MoZGVzdCk7XG5cbiAgLy8gRGVzdCBpcyBub3QgZXhpc3RpbmcgZGlyLCBidXQgbXVsdGlwbGUgc291cmNlcyBnaXZlblxuICBpZiAoKCFleGlzdHMgfHwgIXN0YXRzLmlzRGlyZWN0b3J5KCkpICYmIHNvdXJjZXMubGVuZ3RoID4gMSkge1xuICAgIGNvbW1vbi5lcnJvcignZGVzdCBpcyBub3QgYSBkaXJlY3RvcnkgKHRvbyBtYW55IHNvdXJjZXMpJyk7XG4gIH1cblxuICAvLyBEZXN0IGlzIGFuIGV4aXN0aW5nIGZpbGUsIGJ1dCBubyAtZiBnaXZlblxuICBpZiAoZXhpc3RzICYmIHN0YXRzLmlzRmlsZSgpICYmIG9wdGlvbnMubm9fZm9yY2UpIHtcbiAgICBjb21tb24uZXJyb3IoJ2Rlc3QgZmlsZSBhbHJlYWR5IGV4aXN0czogJyArIGRlc3QpO1xuICB9XG5cbiAgc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzcmMsIHNyY0luZGV4KSB7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHNyYykpIHtcbiAgICAgIGNvbW1vbi5lcnJvcignbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTogJyArIHNyYywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybjsgLy8gc2tpcCBmaWxlXG4gICAgfVxuXG4gICAgLy8gSWYgaGVyZSwgc3JjIGV4aXN0c1xuXG4gICAgLy8gV2hlbiBjb3B5aW5nIHRvICcvcGF0aC9kaXInOlxuICAgIC8vICAgIHRoaXNEZXN0ID0gJy9wYXRoL2Rpci9maWxlMSdcbiAgICB2YXIgdGhpc0Rlc3QgPSBkZXN0O1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGRlc3QpICYmIGNvbW1vbi5zdGF0Rm9sbG93TGlua3MoZGVzdCkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgdGhpc0Rlc3QgPSBwYXRoLm5vcm1hbGl6ZShkZXN0ICsgJy8nICsgcGF0aC5iYXNlbmFtZShzcmMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGhpc0Rlc3RFeGlzdHMgPSBmcy5leGlzdHNTeW5jKHRoaXNEZXN0KTtcblxuICAgIGlmICh0aGlzRGVzdEV4aXN0cyAmJiBjaGVja1JlY2VudENyZWF0ZWQoc291cmNlcywgc3JjSW5kZXgpKSB7XG4gICAgICAvLyBjYW5ub3Qgb3ZlcndyaXRlIGZpbGUgY3JlYXRlZCByZWNlbnRseSBpbiBjdXJyZW50IGV4ZWN1dGlvbiwgYnV0IHdlIHdhbnQgdG8gY29udGludWUgY29weWluZyBvdGhlciBmaWxlc1xuICAgICAgaWYgKCFvcHRpb25zLm5vX2ZvcmNlKSB7XG4gICAgICAgIGNvbW1vbi5lcnJvcihcIndpbGwgbm90IG92ZXJ3cml0ZSBqdXN0LWNyZWF0ZWQgJ1wiICsgdGhpc0Rlc3QgKyBcIicgd2l0aCAnXCIgKyBzcmMgKyBcIidcIiwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZnMuZXhpc3RzU3luYyh0aGlzRGVzdCkgJiYgb3B0aW9ucy5ub19mb3JjZSkge1xuICAgICAgY29tbW9uLmVycm9yKCdkZXN0IGZpbGUgYWxyZWFkeSBleGlzdHM6ICcgKyB0aGlzRGVzdCwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybjsgLy8gc2tpcCBmaWxlXG4gICAgfVxuXG4gICAgaWYgKHBhdGgucmVzb2x2ZShzcmMpID09PSBwYXRoLmRpcm5hbWUocGF0aC5yZXNvbHZlKHRoaXNEZXN0KSkpIHtcbiAgICAgIGNvbW1vbi5lcnJvcignY2Fubm90IG1vdmUgdG8gc2VsZjogJyArIHNyYywgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybjsgLy8gc2tpcCBmaWxlXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGZzLnJlbmFtZVN5bmMoc3JjLCB0aGlzRGVzdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmIChlLmNvZGUgPT09ICdFWERFVicpIHtcbiAgICAgICAgLy8gSWYgd2UncmUgdHJ5aW5nIHRvIGBtdmAgdG8gYW4gZXh0ZXJuYWwgcGFydGl0aW9uLCB3ZSdsbCBhY3R1YWxseSBuZWVkXG4gICAgICAgIC8vIHRvIHBlcmZvcm0gYSBjb3B5IGFuZCB0aGVuIGNsZWFuIHVwIHRoZSBvcmlnaW5hbCBmaWxlLiBJZiBlaXRoZXIgdGhlXG4gICAgICAgIC8vIGNvcHkgb3IgdGhlIHJtIGZhaWxzIHdpdGggYW4gZXhjZXB0aW9uLCB3ZSBzaG91bGQgYWxsb3cgdGhpc1xuICAgICAgICAvLyBleGNlcHRpb24gdG8gcGFzcyB1cCB0byB0aGUgdG9wIGxldmVsLlxuICAgICAgICBjcCgnLXInLCBzcmMsIHRoaXNEZXN0KTtcbiAgICAgICAgcm0oJy1yZicsIHNyYyk7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gZm9yRWFjaChzcmMpXG4gIHJldHVybiAnJztcbn0gLy8gbXZcbm1vZHVsZS5leHBvcnRzID0gX212O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/mv.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/popd.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/popd.js ***!
  \******************************************/
/***/ (() => {

eval("// see dirs.js\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvcG9wZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvcG9wZC5qcz83ZTVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNlZSBkaXJzLmpzXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/popd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/pushd.js":
/*!*******************************************!*\
  !*** ./node_modules/shelljs/src/pushd.js ***!
  \*******************************************/
/***/ (() => {

eval("// see dirs.js\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvcHVzaGQuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NoZWxsanMvc3JjL3B1c2hkLmpzP2VjNGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2VlIGRpcnMuanNcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/pushd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/pwd.js":
/*!*****************************************!*\
  !*** ./node_modules/shelljs/src/pwd.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var path = __webpack_require__(/*! path */ \"path\");\nvar common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\ncommon.register('pwd', _pwd, {\n  allowGlobbing: false,\n});\n\n//@\n//@ ### pwd()\n//@\n//@ Returns the current directory.\nfunction _pwd() {\n  var pwd = path.resolve(process.cwd());\n  return pwd;\n}\nmodule.exports = _pwd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvcHdkLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QixhQUFhLG1CQUFPLENBQUMsNERBQVU7O0FBRS9CO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvcHdkLmpzP2M1NWYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdwd2QnLCBfcHdkLCB7XG4gIGFsbG93R2xvYmJpbmc6IGZhbHNlLFxufSk7XG5cbi8vQFxuLy9AICMjIyBwd2QoKVxuLy9AXG4vL0AgUmV0dXJucyB0aGUgY3VycmVudCBkaXJlY3RvcnkuXG5mdW5jdGlvbiBfcHdkKCkge1xuICB2YXIgcHdkID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCkpO1xuICByZXR1cm4gcHdkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfcHdkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/pwd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/rm.js":
/*!****************************************!*\
  !*** ./node_modules/shelljs/src/rm.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('rm', _rm, {\n  cmdOptions: {\n    'f': 'force',\n    'r': 'recursive',\n    'R': 'recursive',\n  },\n});\n\n// Recursively removes 'dir'\n// Adapted from https://github.com/ryanmcgrath/wrench-js\n//\n// Copyright (c) 2010 Ryan McGrath\n// Copyright (c) 2012 Artur Adib\n//\n// Licensed under the MIT License\n// http://www.opensource.org/licenses/mit-license.php\nfunction rmdirSyncRecursive(dir, force, fromSymlink) {\n  var files;\n\n  files = fs.readdirSync(dir);\n\n  // Loop through and delete everything in the sub-tree after checking it\n  for (var i = 0; i < files.length; i++) {\n    var file = dir + '/' + files[i];\n    var currFile = common.statNoFollowLinks(file);\n\n    if (currFile.isDirectory()) { // Recursive function back to the beginning\n      rmdirSyncRecursive(file, force);\n    } else { // Assume it's a file - perhaps a try/catch belongs here?\n      if (force || isWriteable(file)) {\n        try {\n          common.unlinkSync(file);\n        } catch (e) {\n          /* istanbul ignore next */\n          common.error('could not remove file (code ' + e.code + '): ' + file, {\n            continue: true,\n          });\n        }\n      }\n    }\n  }\n\n  // if was directory was referenced through a symbolic link,\n  // the contents should be removed, but not the directory itself\n  if (fromSymlink) return;\n\n  // Now that we know everything in the sub-tree has been deleted, we can delete the main directory.\n  // Huzzah for the shopkeep.\n\n  var result;\n  try {\n    // Retry on windows, sometimes it takes a little time before all the files in the directory are gone\n    var start = Date.now();\n\n    // TODO: replace this with a finite loop\n    for (;;) {\n      try {\n        result = fs.rmdirSync(dir);\n        if (fs.existsSync(dir)) throw { code: 'EAGAIN' };\n        break;\n      } catch (er) {\n        /* istanbul ignore next */\n        // In addition to error codes, also check if the directory still exists and loop again if true\n        if (process.platform === 'win32' && (er.code === 'ENOTEMPTY' || er.code === 'EBUSY' || er.code === 'EPERM' || er.code === 'EAGAIN')) {\n          if (Date.now() - start > 1000) throw er;\n        } else if (er.code === 'ENOENT') {\n          // Directory did not exist, deletion was successful\n          break;\n        } else {\n          throw er;\n        }\n      }\n    }\n  } catch (e) {\n    common.error('could not remove directory (code ' + e.code + '): ' + dir, { continue: true });\n  }\n\n  return result;\n} // rmdirSyncRecursive\n\n// Hack to determine if file has write permissions for current user\n// Avoids having to check user, group, etc, but it's probably slow\nfunction isWriteable(file) {\n  var writePermission = true;\n  try {\n    var __fd = fs.openSync(file, 'a');\n    fs.closeSync(__fd);\n  } catch (e) {\n    writePermission = false;\n  }\n\n  return writePermission;\n}\n\nfunction handleFile(file, options) {\n  if (options.force || isWriteable(file)) {\n    // -f was passed, or file is writable, so it can be removed\n    common.unlinkSync(file);\n  } else {\n    common.error('permission denied: ' + file, { continue: true });\n  }\n}\n\nfunction handleDirectory(file, options) {\n  if (options.recursive) {\n    // -r was passed, so directory can be removed\n    rmdirSyncRecursive(file, options.force);\n  } else {\n    common.error('path is a directory', { continue: true });\n  }\n}\n\nfunction handleSymbolicLink(file, options) {\n  var stats;\n  try {\n    stats = common.statFollowLinks(file);\n  } catch (e) {\n    // symlink is broken, so remove the symlink itself\n    common.unlinkSync(file);\n    return;\n  }\n\n  if (stats.isFile()) {\n    common.unlinkSync(file);\n  } else if (stats.isDirectory()) {\n    if (file[file.length - 1] === '/') {\n      // trailing separator, so remove the contents, not the link\n      if (options.recursive) {\n        // -r was passed, so directory can be removed\n        var fromSymlink = true;\n        rmdirSyncRecursive(file, options.force, fromSymlink);\n      } else {\n        common.error('path is a directory', { continue: true });\n      }\n    } else {\n      // no trailing separator, so remove the link\n      common.unlinkSync(file);\n    }\n  }\n}\n\nfunction handleFIFO(file) {\n  common.unlinkSync(file);\n}\n\n//@\n//@ ### rm([options,] file [, file ...])\n//@ ### rm([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-f`: force\n//@ + `-r, -R`: recursive\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ rm('-rf', '/tmp/*');\n//@ rm('some_file.txt', 'another_file.txt');\n//@ rm(['some_file.txt', 'another_file.txt']); // same as above\n//@ ```\n//@\n//@ Removes files.\nfunction _rm(options, files) {\n  if (!files) common.error('no paths given');\n\n  // Convert to array\n  files = [].slice.call(arguments, 1);\n\n  files.forEach(function (file) {\n    var lstats;\n    try {\n      var filepath = (file[file.length - 1] === '/')\n        ? file.slice(0, -1) // remove the '/' so lstatSync can detect symlinks\n        : file;\n      lstats = common.statNoFollowLinks(filepath); // test for existence\n    } catch (e) {\n      // Path does not exist, no force flag given\n      if (!options.force) {\n        common.error('no such file or directory: ' + file, { continue: true });\n      }\n      return; // skip file\n    }\n\n    // If here, path exists\n    if (lstats.isFile()) {\n      handleFile(file, options);\n    } else if (lstats.isDirectory()) {\n      handleDirectory(file, options);\n    } else if (lstats.isSymbolicLink()) {\n      handleSymbolicLink(file, options);\n    } else if (lstats.isFIFO()) {\n      handleFIFO(file);\n    }\n  }); // forEach(file)\n  return '';\n} // rm\nmodule.exports = _rm;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/rm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/sed.js":
/*!*****************************************!*\
  !*** ./node_modules/shelljs/src/sed.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('sed', _sed, {\n  globStart: 3, // don't glob-expand regexes\n  canReceivePipe: true,\n  cmdOptions: {\n    'i': 'inplace',\n  },\n});\n\n//@\n//@ ### sed([options,] search_regex, replacement, file [, file ...])\n//@ ### sed([options,] search_regex, replacement, file_array)\n//@\n//@ Available options:\n//@\n//@ + `-i`: Replace contents of `file` in-place. _Note that no backups will be created!_\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\n//@ sed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n//@ ```\n//@\n//@ Reads an input string from `file`s, and performs a JavaScript `replace()` on the input\n//@ using the given `search_regex` and `replacement` string or function. Returns the new string after replacement.\n//@\n//@ Note:\n//@\n//@ Like unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified\n//@ using the `$n` syntax:\n//@\n//@ ```javascript\n//@ sed(/(\\w+)\\s(\\w+)/, '$2, $1', 'file.txt');\n//@ ```\nfunction _sed(options, regex, replacement, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (typeof replacement !== 'string' && typeof replacement !== 'function') {\n    if (typeof replacement === 'number') {\n      replacement = replacement.toString(); // fallback\n    } else {\n      common.error('invalid replacement string');\n    }\n  }\n\n  // Convert all search strings to RegExp\n  if (typeof regex === 'string') {\n    regex = RegExp(regex);\n  }\n\n  if (!files && !pipe) {\n    common.error('no files given');\n  }\n\n  files = [].slice.call(arguments, 3);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var sed = [];\n  files.forEach(function (file) {\n    if (!fs.existsSync(file) && file !== '-') {\n      common.error('no such file or directory: ' + file, 2, { continue: true });\n      return;\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    var lines = contents.split('\\n');\n    var result = lines.map(function (line) {\n      return line.replace(regex, replacement);\n    }).join('\\n');\n\n    sed.push(result);\n\n    if (options.inplace) {\n      fs.writeFileSync(file, result, 'utf8');\n    }\n  });\n\n  return sed.join('\\n');\n}\nmodule.exports = _sed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvc2VkLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyw0REFBVTtBQUMvQixTQUFTLG1CQUFPLENBQUMsY0FBSTs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QztBQUM1QyxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOERBQThELGdCQUFnQjtBQUM5RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvc2VkLmpzP2IxMDgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ3NlZCcsIF9zZWQsIHtcbiAgZ2xvYlN0YXJ0OiAzLCAvLyBkb24ndCBnbG9iLWV4cGFuZCByZWdleGVzXG4gIGNhblJlY2VpdmVQaXBlOiB0cnVlLFxuICBjbWRPcHRpb25zOiB7XG4gICAgJ2knOiAnaW5wbGFjZScsXG4gIH0sXG59KTtcblxuLy9AXG4vL0AgIyMjIHNlZChbb3B0aW9ucyxdIHNlYXJjaF9yZWdleCwgcmVwbGFjZW1lbnQsIGZpbGUgWywgZmlsZSAuLi5dKVxuLy9AICMjIyBzZWQoW29wdGlvbnMsXSBzZWFyY2hfcmVnZXgsIHJlcGxhY2VtZW50LCBmaWxlX2FycmF5KVxuLy9AXG4vL0AgQXZhaWxhYmxlIG9wdGlvbnM6XG4vL0Bcbi8vQCArIGAtaWA6IFJlcGxhY2UgY29udGVudHMgb2YgYGZpbGVgIGluLXBsYWNlLiBfTm90ZSB0aGF0IG5vIGJhY2t1cHMgd2lsbCBiZSBjcmVhdGVkIV9cbi8vQFxuLy9AIEV4YW1wbGVzOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIHNlZCgnLWknLCAnUFJPR1JBTV9WRVJTSU9OJywgJ3YwLjEuMycsICdzb3VyY2UuanMnKTtcbi8vQCBzZWQoLy4qREVMRVRFX1RISVNfTElORS4qXFxuLywgJycsICdzb3VyY2UuanMnKTtcbi8vQCBgYGBcbi8vQFxuLy9AIFJlYWRzIGFuIGlucHV0IHN0cmluZyBmcm9tIGBmaWxlYHMsIGFuZCBwZXJmb3JtcyBhIEphdmFTY3JpcHQgYHJlcGxhY2UoKWAgb24gdGhlIGlucHV0XG4vL0AgdXNpbmcgdGhlIGdpdmVuIGBzZWFyY2hfcmVnZXhgIGFuZCBgcmVwbGFjZW1lbnRgIHN0cmluZyBvciBmdW5jdGlvbi4gUmV0dXJucyB0aGUgbmV3IHN0cmluZyBhZnRlciByZXBsYWNlbWVudC5cbi8vQFxuLy9AIE5vdGU6XG4vL0Bcbi8vQCBMaWtlIHVuaXggYHNlZGAsIFNoZWxsSlMgYHNlZGAgc3VwcG9ydHMgY2FwdHVyZSBncm91cHMuIENhcHR1cmUgZ3JvdXBzIGFyZSBzcGVjaWZpZWRcbi8vQCB1c2luZyB0aGUgYCRuYCBzeW50YXg6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0Agc2VkKC8oXFx3KylcXHMoXFx3KykvLCAnJDIsICQxJywgJ2ZpbGUudHh0Jyk7XG4vL0AgYGBgXG5mdW5jdGlvbiBfc2VkKG9wdGlvbnMsIHJlZ2V4LCByZXBsYWNlbWVudCwgZmlsZXMpIHtcbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBjb21pbmcgZnJvbSBhIHBpcGVcbiAgdmFyIHBpcGUgPSBjb21tb24ucmVhZEZyb21QaXBlKCk7XG5cbiAgaWYgKHR5cGVvZiByZXBsYWNlbWVudCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHJlcGxhY2VtZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiByZXBsYWNlbWVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnQudG9TdHJpbmcoKTsgLy8gZmFsbGJhY2tcbiAgICB9IGVsc2Uge1xuICAgICAgY29tbW9uLmVycm9yKCdpbnZhbGlkIHJlcGxhY2VtZW50IHN0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbnZlcnQgYWxsIHNlYXJjaCBzdHJpbmdzIHRvIFJlZ0V4cFxuICBpZiAodHlwZW9mIHJlZ2V4ID09PSAnc3RyaW5nJykge1xuICAgIHJlZ2V4ID0gUmVnRXhwKHJlZ2V4KTtcbiAgfVxuXG4gIGlmICghZmlsZXMgJiYgIXBpcGUpIHtcbiAgICBjb21tb24uZXJyb3IoJ25vIGZpbGVzIGdpdmVuJyk7XG4gIH1cblxuICBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcblxuICBpZiAocGlwZSkge1xuICAgIGZpbGVzLnVuc2hpZnQoJy0nKTtcbiAgfVxuXG4gIHZhciBzZWQgPSBbXTtcbiAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhmaWxlKSAmJiBmaWxlICE9PSAnLScpIHtcbiAgICAgIGNvbW1vbi5lcnJvcignbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTogJyArIGZpbGUsIDIsIHsgY29udGludWU6IHRydWUgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbnRlbnRzID0gZmlsZSA9PT0gJy0nID8gcGlwZSA6IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpO1xuICAgIHZhciBsaW5lcyA9IGNvbnRlbnRzLnNwbGl0KCdcXG4nKTtcbiAgICB2YXIgcmVzdWx0ID0gbGluZXMubWFwKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICByZXR1cm4gbGluZS5yZXBsYWNlKHJlZ2V4LCByZXBsYWNlbWVudCk7XG4gICAgfSkuam9pbignXFxuJyk7XG5cbiAgICBzZWQucHVzaChyZXN1bHQpO1xuXG4gICAgaWYgKG9wdGlvbnMuaW5wbGFjZSkge1xuICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlLCByZXN1bHQsICd1dGY4Jyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc2VkLmpvaW4oJ1xcbicpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfc2VkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/sed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/set.js":
/*!*****************************************!*\
  !*** ./node_modules/shelljs/src/set.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\n\ncommon.register('set', _set, {\n  allowGlobbing: false,\n  wrapOutput: false,\n});\n\n//@\n//@ ### set(options)\n//@\n//@ Available options:\n//@\n//@ + `+/-e`: exit upon error (`config.fatal`)\n//@ + `+/-v`: verbose: show all commands (`config.verbose`)\n//@ + `+/-f`: disable filename expansion (globbing)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ set('-e'); // exit upon first error\n//@ set('+e'); // this undoes a \"set('-e')\"\n//@ ```\n//@\n//@ Sets global configuration variables.\nfunction _set(options) {\n  if (!options) {\n    var args = [].slice.call(arguments, 0);\n    if (args.length < 2) common.error('must provide an argument');\n    options = args[1];\n  }\n  var negate = (options[0] === '+');\n  if (negate) {\n    options = '-' + options.slice(1); // parseOptions needs a '-' prefix\n  }\n  options = common.parseOptions(options, {\n    'e': 'fatal',\n    'v': 'verbose',\n    'f': 'noglob',\n  });\n\n  if (negate) {\n    Object.keys(options).forEach(function (key) {\n      options[key] = !options[key];\n    });\n  }\n\n  Object.keys(options).forEach(function (key) {\n    // Only change the global config if `negate` is false and the option is true\n    // or if `negate` is true and the option is false (aka negate !== option)\n    if (negate !== options[key]) {\n      common.config[key] = options[key];\n    }\n  });\n  return;\n}\nmodule.exports = _set;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvc2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyw0REFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NoZWxsanMvc3JjL3NldC5qcz83ZTBlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ3NldCcsIF9zZXQsIHtcbiAgYWxsb3dHbG9iYmluZzogZmFsc2UsXG4gIHdyYXBPdXRwdXQ6IGZhbHNlLFxufSk7XG5cbi8vQFxuLy9AICMjIyBzZXQob3B0aW9ucylcbi8vQFxuLy9AIEF2YWlsYWJsZSBvcHRpb25zOlxuLy9AXG4vL0AgKyBgKy8tZWA6IGV4aXQgdXBvbiBlcnJvciAoYGNvbmZpZy5mYXRhbGApXG4vL0AgKyBgKy8tdmA6IHZlcmJvc2U6IHNob3cgYWxsIGNvbW1hbmRzIChgY29uZmlnLnZlcmJvc2VgKVxuLy9AICsgYCsvLWZgOiBkaXNhYmxlIGZpbGVuYW1lIGV4cGFuc2lvbiAoZ2xvYmJpbmcpXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCBzZXQoJy1lJyk7IC8vIGV4aXQgdXBvbiBmaXJzdCBlcnJvclxuLy9AIHNldCgnK2UnKTsgLy8gdGhpcyB1bmRvZXMgYSBcInNldCgnLWUnKVwiXG4vL0AgYGBgXG4vL0Bcbi8vQCBTZXRzIGdsb2JhbCBjb25maWd1cmF0aW9uIHZhcmlhYmxlcy5cbmZ1bmN0aW9uIF9zZXQob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPCAyKSBjb21tb24uZXJyb3IoJ211c3QgcHJvdmlkZSBhbiBhcmd1bWVudCcpO1xuICAgIG9wdGlvbnMgPSBhcmdzWzFdO1xuICB9XG4gIHZhciBuZWdhdGUgPSAob3B0aW9uc1swXSA9PT0gJysnKTtcbiAgaWYgKG5lZ2F0ZSkge1xuICAgIG9wdGlvbnMgPSAnLScgKyBvcHRpb25zLnNsaWNlKDEpOyAvLyBwYXJzZU9wdGlvbnMgbmVlZHMgYSAnLScgcHJlZml4XG4gIH1cbiAgb3B0aW9ucyA9IGNvbW1vbi5wYXJzZU9wdGlvbnMob3B0aW9ucywge1xuICAgICdlJzogJ2ZhdGFsJyxcbiAgICAndic6ICd2ZXJib3NlJyxcbiAgICAnZic6ICdub2dsb2InLFxuICB9KTtcblxuICBpZiAobmVnYXRlKSB7XG4gICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBvcHRpb25zW2tleV0gPSAhb3B0aW9uc1trZXldO1xuICAgIH0pO1xuICB9XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgLy8gT25seSBjaGFuZ2UgdGhlIGdsb2JhbCBjb25maWcgaWYgYG5lZ2F0ZWAgaXMgZmFsc2UgYW5kIHRoZSBvcHRpb24gaXMgdHJ1ZVxuICAgIC8vIG9yIGlmIGBuZWdhdGVgIGlzIHRydWUgYW5kIHRoZSBvcHRpb24gaXMgZmFsc2UgKGFrYSBuZWdhdGUgIT09IG9wdGlvbilcbiAgICBpZiAobmVnYXRlICE9PSBvcHRpb25zW2tleV0pIHtcbiAgICAgIGNvbW1vbi5jb25maWdba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm47XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9zZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/set.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/sort.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/sort.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('sort', _sort, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'r': 'reverse',\n    'n': 'numerical',\n  },\n});\n\n// parse out the number prefix of a line\nfunction parseNumber(str) {\n  var match = str.match(/^\\s*(\\d*)\\s*(.*)$/);\n  return { num: Number(match[1]), value: match[2] };\n}\n\n// compare two strings case-insensitively, but examine case for strings that are\n// case-insensitive equivalent\nfunction unixCmp(a, b) {\n  var aLower = a.toLowerCase();\n  var bLower = b.toLowerCase();\n  return (aLower === bLower ?\n      -1 * a.localeCompare(b) : // unix sort treats case opposite how javascript does\n      aLower.localeCompare(bLower));\n}\n\n// compare two strings in the fashion that unix sort's -n option works\nfunction numericalCmp(a, b) {\n  var objA = parseNumber(a);\n  var objB = parseNumber(b);\n  if (objA.hasOwnProperty('num') && objB.hasOwnProperty('num')) {\n    return ((objA.num !== objB.num) ?\n        (objA.num - objB.num) :\n        unixCmp(objA.value, objB.value));\n  } else {\n    return unixCmp(objA.value, objB.value);\n  }\n}\n\n//@\n//@ ### sort([options,] file [, file ...])\n//@ ### sort([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-r`: Reverse the results\n//@ + `-n`: Compare according to numerical value\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ sort('foo.txt', 'bar.txt');\n//@ sort('-r', 'foo.txt');\n//@ ```\n//@\n//@ Return the contents of the `file`s, sorted line-by-line. Sorting multiple\n//@ files mixes their content (just as unix `sort` does).\nfunction _sort(options, files) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no files given');\n\n  files = [].slice.call(arguments, 1);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var lines = files.reduce(function (accum, file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, { continue: true });\n        return accum;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error('read failed: ' + file + ': Is a directory', {\n          continue: true,\n        });\n        return accum;\n      }\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n    return accum.concat(contents.trimRight().split('\\n'));\n  }, []);\n\n  var sorted = lines.sort(options.numerical ? numericalCmp : unixCmp);\n\n  if (options.reverse) {\n    sorted = sorted.reverse();\n  }\n\n  return sorted.join('\\n') + '\\n';\n}\n\nmodule.exports = _sort;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsNERBQVU7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLGNBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGdCQUFnQjtBQUM3RTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvc29ydC5qcz8zYjI2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCdzb3J0JywgX3NvcnQsIHtcbiAgY2FuUmVjZWl2ZVBpcGU6IHRydWUsXG4gIGNtZE9wdGlvbnM6IHtcbiAgICAncic6ICdyZXZlcnNlJyxcbiAgICAnbic6ICdudW1lcmljYWwnLFxuICB9LFxufSk7XG5cbi8vIHBhcnNlIG91dCB0aGUgbnVtYmVyIHByZWZpeCBvZiBhIGxpbmVcbmZ1bmN0aW9uIHBhcnNlTnVtYmVyKHN0cikge1xuICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2goL15cXHMqKFxcZCopXFxzKiguKikkLyk7XG4gIHJldHVybiB7IG51bTogTnVtYmVyKG1hdGNoWzFdKSwgdmFsdWU6IG1hdGNoWzJdIH07XG59XG5cbi8vIGNvbXBhcmUgdHdvIHN0cmluZ3MgY2FzZS1pbnNlbnNpdGl2ZWx5LCBidXQgZXhhbWluZSBjYXNlIGZvciBzdHJpbmdzIHRoYXQgYXJlXG4vLyBjYXNlLWluc2Vuc2l0aXZlIGVxdWl2YWxlbnRcbmZ1bmN0aW9uIHVuaXhDbXAoYSwgYikge1xuICB2YXIgYUxvd2VyID0gYS50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYkxvd2VyID0gYi50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKGFMb3dlciA9PT0gYkxvd2VyID9cbiAgICAgIC0xICogYS5sb2NhbGVDb21wYXJlKGIpIDogLy8gdW5peCBzb3J0IHRyZWF0cyBjYXNlIG9wcG9zaXRlIGhvdyBqYXZhc2NyaXB0IGRvZXNcbiAgICAgIGFMb3dlci5sb2NhbGVDb21wYXJlKGJMb3dlcikpO1xufVxuXG4vLyBjb21wYXJlIHR3byBzdHJpbmdzIGluIHRoZSBmYXNoaW9uIHRoYXQgdW5peCBzb3J0J3MgLW4gb3B0aW9uIHdvcmtzXG5mdW5jdGlvbiBudW1lcmljYWxDbXAoYSwgYikge1xuICB2YXIgb2JqQSA9IHBhcnNlTnVtYmVyKGEpO1xuICB2YXIgb2JqQiA9IHBhcnNlTnVtYmVyKGIpO1xuICBpZiAob2JqQS5oYXNPd25Qcm9wZXJ0eSgnbnVtJykgJiYgb2JqQi5oYXNPd25Qcm9wZXJ0eSgnbnVtJykpIHtcbiAgICByZXR1cm4gKChvYmpBLm51bSAhPT0gb2JqQi5udW0pID9cbiAgICAgICAgKG9iakEubnVtIC0gb2JqQi5udW0pIDpcbiAgICAgICAgdW5peENtcChvYmpBLnZhbHVlLCBvYmpCLnZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuaXhDbXAob2JqQS52YWx1ZSwgb2JqQi52YWx1ZSk7XG4gIH1cbn1cblxuLy9AXG4vL0AgIyMjIHNvcnQoW29wdGlvbnMsXSBmaWxlIFssIGZpbGUgLi4uXSlcbi8vQCAjIyMgc29ydChbb3B0aW9ucyxdIGZpbGVfYXJyYXkpXG4vL0Bcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC1yYDogUmV2ZXJzZSB0aGUgcmVzdWx0c1xuLy9AICsgYC1uYDogQ29tcGFyZSBhY2NvcmRpbmcgdG8gbnVtZXJpY2FsIHZhbHVlXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCBzb3J0KCdmb28udHh0JywgJ2Jhci50eHQnKTtcbi8vQCBzb3J0KCctcicsICdmb28udHh0Jyk7XG4vL0AgYGBgXG4vL0Bcbi8vQCBSZXR1cm4gdGhlIGNvbnRlbnRzIG9mIHRoZSBgZmlsZWBzLCBzb3J0ZWQgbGluZS1ieS1saW5lLiBTb3J0aW5nIG11bHRpcGxlXG4vL0AgZmlsZXMgbWl4ZXMgdGhlaXIgY29udGVudCAoanVzdCBhcyB1bml4IGBzb3J0YCBkb2VzKS5cbmZ1bmN0aW9uIF9zb3J0KG9wdGlvbnMsIGZpbGVzKSB7XG4gIC8vIENoZWNrIGlmIHRoaXMgaXMgY29taW5nIGZyb20gYSBwaXBlXG4gIHZhciBwaXBlID0gY29tbW9uLnJlYWRGcm9tUGlwZSgpO1xuXG4gIGlmICghZmlsZXMgJiYgIXBpcGUpIGNvbW1vbi5lcnJvcignbm8gZmlsZXMgZ2l2ZW4nKTtcblxuICBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBpZiAocGlwZSkge1xuICAgIGZpbGVzLnVuc2hpZnQoJy0nKTtcbiAgfVxuXG4gIHZhciBsaW5lcyA9IGZpbGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW0sIGZpbGUpIHtcbiAgICBpZiAoZmlsZSAhPT0gJy0nKSB7XG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZSkpIHtcbiAgICAgICAgY29tbW9uLmVycm9yKCdubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5OiAnICsgZmlsZSwgeyBjb250aW51ZTogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgfSBlbHNlIGlmIChjb21tb24uc3RhdEZvbGxvd0xpbmtzKGZpbGUpLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgY29tbW9uLmVycm9yKCdyZWFkIGZhaWxlZDogJyArIGZpbGUgKyAnOiBJcyBhIGRpcmVjdG9yeScsIHtcbiAgICAgICAgICBjb250aW51ZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhY2N1bTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29udGVudHMgPSBmaWxlID09PSAnLScgPyBwaXBlIDogZnMucmVhZEZpbGVTeW5jKGZpbGUsICd1dGY4Jyk7XG4gICAgcmV0dXJuIGFjY3VtLmNvbmNhdChjb250ZW50cy50cmltUmlnaHQoKS5zcGxpdCgnXFxuJykpO1xuICB9LCBbXSk7XG5cbiAgdmFyIHNvcnRlZCA9IGxpbmVzLnNvcnQob3B0aW9ucy5udW1lcmljYWwgPyBudW1lcmljYWxDbXAgOiB1bml4Q21wKTtcblxuICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgc29ydGVkID0gc29ydGVkLnJldmVyc2UoKTtcbiAgfVxuXG4gIHJldHVybiBzb3J0ZWQuam9pbignXFxuJykgKyAnXFxuJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc29ydDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/sort.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/tail.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/tail.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('tail', _tail, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'n': 'numLines',\n  },\n});\n\n//@\n//@ ### tail([{'-n': \\<num\\>},] file [, file ...])\n//@ ### tail([{'-n': \\<num\\>},] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-n <num>`: Show the last `<num>` lines of `file`s\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var str = tail({'-n': 1}, 'file*.txt');\n//@ var str = tail('file1', 'file2');\n//@ var str = tail(['file1', 'file2']); // same as above\n//@ ```\n//@\n//@ Read the end of a `file`.\nfunction _tail(options, files) {\n  var tail = [];\n  var pipe = common.readFromPipe();\n\n  if (!files && !pipe) common.error('no paths given');\n\n  var idx = 1;\n  if (options.numLines === true) {\n    idx = 2;\n    options.numLines = Number(arguments[1]);\n  } else if (options.numLines === false) {\n    options.numLines = 10;\n  }\n  options.numLines = -1 * Math.abs(options.numLines);\n  files = [].slice.call(arguments, idx);\n\n  if (pipe) {\n    files.unshift('-');\n  }\n\n  var shouldAppendNewline = false;\n  files.forEach(function (file) {\n    if (file !== '-') {\n      if (!fs.existsSync(file)) {\n        common.error('no such file or directory: ' + file, { continue: true });\n        return;\n      } else if (common.statFollowLinks(file).isDirectory()) {\n        common.error(\"error reading '\" + file + \"': Is a directory\", {\n          continue: true,\n        });\n        return;\n      }\n    }\n\n    var contents = file === '-' ? pipe : fs.readFileSync(file, 'utf8');\n\n    var lines = contents.split('\\n');\n    if (lines[lines.length - 1] === '') {\n      lines.pop();\n      shouldAppendNewline = true;\n    } else {\n      shouldAppendNewline = false;\n    }\n\n    tail = tail.concat(lines.slice(options.numLines));\n  });\n\n  if (shouldAppendNewline) {\n    tail.push(''); // to add a trailing newline once we join\n  }\n  return tail.join('\\n');\n}\nmodule.exports = _tail;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdGFpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsNERBQVU7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLGNBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGdCQUFnQjtBQUM3RTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdGFpbC5qcz82OWZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCd0YWlsJywgX3RhaWwsIHtcbiAgY2FuUmVjZWl2ZVBpcGU6IHRydWUsXG4gIGNtZE9wdGlvbnM6IHtcbiAgICAnbic6ICdudW1MaW5lcycsXG4gIH0sXG59KTtcblxuLy9AXG4vL0AgIyMjIHRhaWwoW3snLW4nOiBcXDxudW1cXD59LF0gZmlsZSBbLCBmaWxlIC4uLl0pXG4vL0AgIyMjIHRhaWwoW3snLW4nOiBcXDxudW1cXD59LF0gZmlsZV9hcnJheSlcbi8vQFxuLy9AIEF2YWlsYWJsZSBvcHRpb25zOlxuLy9AXG4vL0AgKyBgLW4gPG51bT5gOiBTaG93IHRoZSBsYXN0IGA8bnVtPmAgbGluZXMgb2YgYGZpbGVgc1xuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgdmFyIHN0ciA9IHRhaWwoeyctbic6IDF9LCAnZmlsZSoudHh0Jyk7XG4vL0AgdmFyIHN0ciA9IHRhaWwoJ2ZpbGUxJywgJ2ZpbGUyJyk7XG4vL0AgdmFyIHN0ciA9IHRhaWwoWydmaWxlMScsICdmaWxlMiddKTsgLy8gc2FtZSBhcyBhYm92ZVxuLy9AIGBgYFxuLy9AXG4vL0AgUmVhZCB0aGUgZW5kIG9mIGEgYGZpbGVgLlxuZnVuY3Rpb24gX3RhaWwob3B0aW9ucywgZmlsZXMpIHtcbiAgdmFyIHRhaWwgPSBbXTtcbiAgdmFyIHBpcGUgPSBjb21tb24ucmVhZEZyb21QaXBlKCk7XG5cbiAgaWYgKCFmaWxlcyAmJiAhcGlwZSkgY29tbW9uLmVycm9yKCdubyBwYXRocyBnaXZlbicpO1xuXG4gIHZhciBpZHggPSAxO1xuICBpZiAob3B0aW9ucy5udW1MaW5lcyA9PT0gdHJ1ZSkge1xuICAgIGlkeCA9IDI7XG4gICAgb3B0aW9ucy5udW1MaW5lcyA9IE51bWJlcihhcmd1bWVudHNbMV0pO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMubnVtTGluZXMgPT09IGZhbHNlKSB7XG4gICAgb3B0aW9ucy5udW1MaW5lcyA9IDEwO1xuICB9XG4gIG9wdGlvbnMubnVtTGluZXMgPSAtMSAqIE1hdGguYWJzKG9wdGlvbnMubnVtTGluZXMpO1xuICBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCBpZHgpO1xuXG4gIGlmIChwaXBlKSB7XG4gICAgZmlsZXMudW5zaGlmdCgnLScpO1xuICB9XG5cbiAgdmFyIHNob3VsZEFwcGVuZE5ld2xpbmUgPSBmYWxzZTtcbiAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgIGlmIChmaWxlICE9PSAnLScpIHtcbiAgICAgIGlmICghZnMuZXhpc3RzU3luYyhmaWxlKSkge1xuICAgICAgICBjb21tb24uZXJyb3IoJ25vIHN1Y2ggZmlsZSBvciBkaXJlY3Rvcnk6ICcgKyBmaWxlLCB7IGNvbnRpbnVlOiB0cnVlIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGNvbW1vbi5zdGF0Rm9sbG93TGlua3MoZmlsZSkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICBjb21tb24uZXJyb3IoXCJlcnJvciByZWFkaW5nICdcIiArIGZpbGUgKyBcIic6IElzIGEgZGlyZWN0b3J5XCIsIHtcbiAgICAgICAgICBjb250aW51ZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29udGVudHMgPSBmaWxlID09PSAnLScgPyBwaXBlIDogZnMucmVhZEZpbGVTeW5jKGZpbGUsICd1dGY4Jyk7XG5cbiAgICB2YXIgbGluZXMgPSBjb250ZW50cy5zcGxpdCgnXFxuJyk7XG4gICAgaWYgKGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdID09PSAnJykge1xuICAgICAgbGluZXMucG9wKCk7XG4gICAgICBzaG91bGRBcHBlbmROZXdsaW5lID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkQXBwZW5kTmV3bGluZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRhaWwgPSB0YWlsLmNvbmNhdChsaW5lcy5zbGljZShvcHRpb25zLm51bUxpbmVzKSk7XG4gIH0pO1xuXG4gIGlmIChzaG91bGRBcHBlbmROZXdsaW5lKSB7XG4gICAgdGFpbC5wdXNoKCcnKTsgLy8gdG8gYWRkIGEgdHJhaWxpbmcgbmV3bGluZSBvbmNlIHdlIGpvaW5cbiAgfVxuICByZXR1cm4gdGFpbC5qb2luKCdcXG4nKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3RhaWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/tail.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/tempdir.js":
/*!*********************************************!*\
  !*** ./node_modules/shelljs/src/tempdir.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar os = __webpack_require__(/*! os */ \"os\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('tempdir', _tempDir, {\n  allowGlobbing: false,\n  wrapOutput: false,\n});\n\n// Returns false if 'dir' is not a writeable directory, 'dir' otherwise\nfunction writeableDir(dir) {\n  if (!dir || !fs.existsSync(dir)) return false;\n\n  if (!common.statFollowLinks(dir).isDirectory()) return false;\n\n  var testFile = dir + '/' + common.randomFileName();\n  try {\n    fs.writeFileSync(testFile, ' ');\n    common.unlinkSync(testFile);\n    return dir;\n  } catch (e) {\n    /* istanbul ignore next */\n    return false;\n  }\n}\n\n// Variable to cache the tempdir value for successive lookups.\nvar cachedTempDir;\n\n//@\n//@ ### tempdir()\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var tmp = tempdir(); // \"/tmp\" for most *nix platforms\n//@ ```\n//@\n//@ Searches and returns string containing a writeable, platform-dependent temporary directory.\n//@ Follows Python's [tempfile algorithm](http://docs.python.org/library/tempfile.html#tempfile.tempdir).\nfunction _tempDir() {\n  if (cachedTempDir) return cachedTempDir;\n\n  cachedTempDir = writeableDir(os.tmpdir()) ||\n                  writeableDir(process.env.TMPDIR) ||\n                  writeableDir(process.env.TEMP) ||\n                  writeableDir(process.env.TMP) ||\n                  writeableDir(process.env.Wimp$ScrapDir) || // RiscOS\n                  writeableDir('C:\\\\TEMP') || // Windows\n                  writeableDir('C:\\\\TMP') || // Windows\n                  writeableDir('\\\\TEMP') || // Windows\n                  writeableDir('\\\\TMP') || // Windows\n                  writeableDir('/tmp') ||\n                  writeableDir('/var/tmp') ||\n                  writeableDir('/usr/tmp') ||\n                  writeableDir('.'); // last resort\n\n  return cachedTempDir;\n}\n\n// Indicates if the tempdir value is currently cached. This is exposed for tests\n// only. The return value should only be tested for truthiness.\nfunction isCached() {\n  return cachedTempDir;\n}\n\n// Clears the cached tempDir value, if one is cached. This is exposed for tests\n// only.\nfunction clearCache() {\n  cachedTempDir = undefined;\n}\n\nmodule.exports.tempDir = _tempDir;\nmodule.exports.isCached = isCached;\nmodule.exports.clearCache = clearCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdGVtcGRpci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsNERBQVU7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLGNBQUk7QUFDckIsU0FBUyxtQkFBTyxDQUFDLGNBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQzs7QUFFckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCLHVCQUF1QjtBQUN2Qix5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NoZWxsanMvc3JjL3RlbXBkaXIuanM/MWY5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBvcyA9IHJlcXVpcmUoJ29zJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb21tb24ucmVnaXN0ZXIoJ3RlbXBkaXInLCBfdGVtcERpciwge1xuICBhbGxvd0dsb2JiaW5nOiBmYWxzZSxcbiAgd3JhcE91dHB1dDogZmFsc2UsXG59KTtcblxuLy8gUmV0dXJucyBmYWxzZSBpZiAnZGlyJyBpcyBub3QgYSB3cml0ZWFibGUgZGlyZWN0b3J5LCAnZGlyJyBvdGhlcndpc2VcbmZ1bmN0aW9uIHdyaXRlYWJsZURpcihkaXIpIHtcbiAgaWYgKCFkaXIgfHwgIWZzLmV4aXN0c1N5bmMoZGlyKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICghY29tbW9uLnN0YXRGb2xsb3dMaW5rcyhkaXIpLmlzRGlyZWN0b3J5KCkpIHJldHVybiBmYWxzZTtcblxuICB2YXIgdGVzdEZpbGUgPSBkaXIgKyAnLycgKyBjb21tb24ucmFuZG9tRmlsZU5hbWUoKTtcbiAgdHJ5IHtcbiAgICBmcy53cml0ZUZpbGVTeW5jKHRlc3RGaWxlLCAnICcpO1xuICAgIGNvbW1vbi51bmxpbmtTeW5jKHRlc3RGaWxlKTtcbiAgICByZXR1cm4gZGlyO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gVmFyaWFibGUgdG8gY2FjaGUgdGhlIHRlbXBkaXIgdmFsdWUgZm9yIHN1Y2Nlc3NpdmUgbG9va3Vwcy5cbnZhciBjYWNoZWRUZW1wRGlyO1xuXG4vL0Bcbi8vQCAjIyMgdGVtcGRpcigpXG4vL0Bcbi8vQCBFeGFtcGxlczpcbi8vQFxuLy9AIGBgYGphdmFzY3JpcHRcbi8vQCB2YXIgdG1wID0gdGVtcGRpcigpOyAvLyBcIi90bXBcIiBmb3IgbW9zdCAqbml4IHBsYXRmb3Jtc1xuLy9AIGBgYFxuLy9AXG4vL0AgU2VhcmNoZXMgYW5kIHJldHVybnMgc3RyaW5nIGNvbnRhaW5pbmcgYSB3cml0ZWFibGUsIHBsYXRmb3JtLWRlcGVuZGVudCB0ZW1wb3JhcnkgZGlyZWN0b3J5LlxuLy9AIEZvbGxvd3MgUHl0aG9uJ3MgW3RlbXBmaWxlIGFsZ29yaXRobV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3RlbXBmaWxlLmh0bWwjdGVtcGZpbGUudGVtcGRpcikuXG5mdW5jdGlvbiBfdGVtcERpcigpIHtcbiAgaWYgKGNhY2hlZFRlbXBEaXIpIHJldHVybiBjYWNoZWRUZW1wRGlyO1xuXG4gIGNhY2hlZFRlbXBEaXIgPSB3cml0ZWFibGVEaXIob3MudG1wZGlyKCkpIHx8XG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIocHJvY2Vzcy5lbnYuVE1QRElSKSB8fFxuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKHByb2Nlc3MuZW52LlRFTVApIHx8XG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIocHJvY2Vzcy5lbnYuVE1QKSB8fFxuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKHByb2Nlc3MuZW52LldpbXAkU2NyYXBEaXIpIHx8IC8vIFJpc2NPU1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCdDOlxcXFxURU1QJykgfHwgLy8gV2luZG93c1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCdDOlxcXFxUTVAnKSB8fCAvLyBXaW5kb3dzXG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIoJ1xcXFxURU1QJykgfHwgLy8gV2luZG93c1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCdcXFxcVE1QJykgfHwgLy8gV2luZG93c1xuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCcvdG1wJykgfHxcbiAgICAgICAgICAgICAgICAgIHdyaXRlYWJsZURpcignL3Zhci90bXAnKSB8fFxuICAgICAgICAgICAgICAgICAgd3JpdGVhYmxlRGlyKCcvdXNyL3RtcCcpIHx8XG4gICAgICAgICAgICAgICAgICB3cml0ZWFibGVEaXIoJy4nKTsgLy8gbGFzdCByZXNvcnRcblxuICByZXR1cm4gY2FjaGVkVGVtcERpcjtcbn1cblxuLy8gSW5kaWNhdGVzIGlmIHRoZSB0ZW1wZGlyIHZhbHVlIGlzIGN1cnJlbnRseSBjYWNoZWQuIFRoaXMgaXMgZXhwb3NlZCBmb3IgdGVzdHNcbi8vIG9ubHkuIFRoZSByZXR1cm4gdmFsdWUgc2hvdWxkIG9ubHkgYmUgdGVzdGVkIGZvciB0cnV0aGluZXNzLlxuZnVuY3Rpb24gaXNDYWNoZWQoKSB7XG4gIHJldHVybiBjYWNoZWRUZW1wRGlyO1xufVxuXG4vLyBDbGVhcnMgdGhlIGNhY2hlZCB0ZW1wRGlyIHZhbHVlLCBpZiBvbmUgaXMgY2FjaGVkLiBUaGlzIGlzIGV4cG9zZWQgZm9yIHRlc3RzXG4vLyBvbmx5LlxuZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHtcbiAgY2FjaGVkVGVtcERpciA9IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMudGVtcERpciA9IF90ZW1wRGlyO1xubW9kdWxlLmV4cG9ydHMuaXNDYWNoZWQgPSBpc0NhY2hlZDtcbm1vZHVsZS5leHBvcnRzLmNsZWFyQ2FjaGUgPSBjbGVhckNhY2hlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/tempdir.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/test.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/test.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('test', _test, {\n  cmdOptions: {\n    'b': 'block',\n    'c': 'character',\n    'd': 'directory',\n    'e': 'exists',\n    'f': 'file',\n    'L': 'link',\n    'p': 'pipe',\n    'S': 'socket',\n  },\n  wrapOutput: false,\n  allowGlobbing: false,\n});\n\n\n//@\n//@ ### test(expression)\n//@\n//@ Available expression primaries:\n//@\n//@ + `'-b', 'path'`: true if path is a block device\n//@ + `'-c', 'path'`: true if path is a character device\n//@ + `'-d', 'path'`: true if path is a directory\n//@ + `'-e', 'path'`: true if path exists\n//@ + `'-f', 'path'`: true if path is a regular file\n//@ + `'-L', 'path'`: true if path is a symbolic link\n//@ + `'-p', 'path'`: true if path is a pipe (FIFO)\n//@ + `'-S', 'path'`: true if path is a socket\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ if (test('-d', path)) { /* do something with dir */ };\n//@ if (!test('-f', path)) continue; // skip if it's a regular file\n//@ ```\n//@\n//@ Evaluates `expression` using the available primaries and returns corresponding value.\nfunction _test(options, path) {\n  if (!path) common.error('no path given');\n\n  var canInterpret = false;\n  Object.keys(options).forEach(function (key) {\n    if (options[key] === true) {\n      canInterpret = true;\n    }\n  });\n\n  if (!canInterpret) common.error('could not interpret expression');\n\n  if (options.link) {\n    try {\n      return common.statNoFollowLinks(path).isSymbolicLink();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  if (!fs.existsSync(path)) return false;\n\n  if (options.exists) return true;\n\n  var stats = common.statFollowLinks(path);\n\n  if (options.block) return stats.isBlockDevice();\n\n  if (options.character) return stats.isCharacterDevice();\n\n  if (options.directory) return stats.isDirectory();\n\n  if (options.file) return stats.isFile();\n\n  /* istanbul ignore next */\n  if (options.pipe) return stats.isFIFO();\n\n  /* istanbul ignore next */\n  if (options.socket) return stats.isSocket();\n\n  /* istanbul ignore next */\n  return false; // fallback\n} // test\nmodule.exports = _test;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdGVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsNERBQVU7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLGNBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCLEVBQUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdGVzdC5qcz8zNDU2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCd0ZXN0JywgX3Rlc3QsIHtcbiAgY21kT3B0aW9uczoge1xuICAgICdiJzogJ2Jsb2NrJyxcbiAgICAnYyc6ICdjaGFyYWN0ZXInLFxuICAgICdkJzogJ2RpcmVjdG9yeScsXG4gICAgJ2UnOiAnZXhpc3RzJyxcbiAgICAnZic6ICdmaWxlJyxcbiAgICAnTCc6ICdsaW5rJyxcbiAgICAncCc6ICdwaXBlJyxcbiAgICAnUyc6ICdzb2NrZXQnLFxuICB9LFxuICB3cmFwT3V0cHV0OiBmYWxzZSxcbiAgYWxsb3dHbG9iYmluZzogZmFsc2UsXG59KTtcblxuXG4vL0Bcbi8vQCAjIyMgdGVzdChleHByZXNzaW9uKVxuLy9AXG4vL0AgQXZhaWxhYmxlIGV4cHJlc3Npb24gcHJpbWFyaWVzOlxuLy9AXG4vL0AgKyBgJy1iJywgJ3BhdGgnYDogdHJ1ZSBpZiBwYXRoIGlzIGEgYmxvY2sgZGV2aWNlXG4vL0AgKyBgJy1jJywgJ3BhdGgnYDogdHJ1ZSBpZiBwYXRoIGlzIGEgY2hhcmFjdGVyIGRldmljZVxuLy9AICsgYCctZCcsICdwYXRoJ2A6IHRydWUgaWYgcGF0aCBpcyBhIGRpcmVjdG9yeVxuLy9AICsgYCctZScsICdwYXRoJ2A6IHRydWUgaWYgcGF0aCBleGlzdHNcbi8vQCArIGAnLWYnLCAncGF0aCdgOiB0cnVlIGlmIHBhdGggaXMgYSByZWd1bGFyIGZpbGVcbi8vQCArIGAnLUwnLCAncGF0aCdgOiB0cnVlIGlmIHBhdGggaXMgYSBzeW1ib2xpYyBsaW5rXG4vL0AgKyBgJy1wJywgJ3BhdGgnYDogdHJ1ZSBpZiBwYXRoIGlzIGEgcGlwZSAoRklGTylcbi8vQCArIGAnLVMnLCAncGF0aCdgOiB0cnVlIGlmIHBhdGggaXMgYSBzb2NrZXRcbi8vQFxuLy9AIEV4YW1wbGVzOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIGlmICh0ZXN0KCctZCcsIHBhdGgpKSB7IC8qIGRvIHNvbWV0aGluZyB3aXRoIGRpciAqLyB9O1xuLy9AIGlmICghdGVzdCgnLWYnLCBwYXRoKSkgY29udGludWU7IC8vIHNraXAgaWYgaXQncyBhIHJlZ3VsYXIgZmlsZVxuLy9AIGBgYFxuLy9AXG4vL0AgRXZhbHVhdGVzIGBleHByZXNzaW9uYCB1c2luZyB0aGUgYXZhaWxhYmxlIHByaW1hcmllcyBhbmQgcmV0dXJucyBjb3JyZXNwb25kaW5nIHZhbHVlLlxuZnVuY3Rpb24gX3Rlc3Qob3B0aW9ucywgcGF0aCkge1xuICBpZiAoIXBhdGgpIGNvbW1vbi5lcnJvcignbm8gcGF0aCBnaXZlbicpO1xuXG4gIHZhciBjYW5JbnRlcnByZXQgPSBmYWxzZTtcbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKG9wdGlvbnNba2V5XSA9PT0gdHJ1ZSkge1xuICAgICAgY2FuSW50ZXJwcmV0ID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghY2FuSW50ZXJwcmV0KSBjb21tb24uZXJyb3IoJ2NvdWxkIG5vdCBpbnRlcnByZXQgZXhwcmVzc2lvbicpO1xuXG4gIGlmIChvcHRpb25zLmxpbmspIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbW1vbi5zdGF0Tm9Gb2xsb3dMaW5rcyhwYXRoKS5pc1N5bWJvbGljTGluaygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWZzLmV4aXN0c1N5bmMocGF0aCkpIHJldHVybiBmYWxzZTtcblxuICBpZiAob3B0aW9ucy5leGlzdHMpIHJldHVybiB0cnVlO1xuXG4gIHZhciBzdGF0cyA9IGNvbW1vbi5zdGF0Rm9sbG93TGlua3MocGF0aCk7XG5cbiAgaWYgKG9wdGlvbnMuYmxvY2spIHJldHVybiBzdGF0cy5pc0Jsb2NrRGV2aWNlKCk7XG5cbiAgaWYgKG9wdGlvbnMuY2hhcmFjdGVyKSByZXR1cm4gc3RhdHMuaXNDaGFyYWN0ZXJEZXZpY2UoKTtcblxuICBpZiAob3B0aW9ucy5kaXJlY3RvcnkpIHJldHVybiBzdGF0cy5pc0RpcmVjdG9yeSgpO1xuXG4gIGlmIChvcHRpb25zLmZpbGUpIHJldHVybiBzdGF0cy5pc0ZpbGUoKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAob3B0aW9ucy5waXBlKSByZXR1cm4gc3RhdHMuaXNGSUZPKCk7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKG9wdGlvbnMuc29ja2V0KSByZXR1cm4gc3RhdHMuaXNTb2NrZXQoKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2U7IC8vIGZhbGxiYWNrXG59IC8vIHRlc3Rcbm1vZHVsZS5leHBvcnRzID0gX3Rlc3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/test.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/to.js":
/*!****************************************!*\
  !*** ./node_modules/shelljs/src/to.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\ncommon.register('to', _to, {\n  pipeOnly: true,\n  wrapOutput: false,\n});\n\n//@\n//@ ### ShellString.prototype.to(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').to('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirection operator `>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.). _Like Unix\n//@ redirections, `to()` will overwrite any existing file!_\nfunction _to(options, file) {\n  if (!file) common.error('wrong arguments');\n\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n\n  try {\n    fs.writeFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not write to file (code ' + e.code + '): ' + file, { continue: true });\n  }\n}\nmodule.exports = _to;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdG8uanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLDREQUFVO0FBQy9CLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFekI7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSw2RUFBNkUsZ0JBQWdCO0FBQzdGO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdG8uanM/NWY2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCd0bycsIF90bywge1xuICBwaXBlT25seTogdHJ1ZSxcbiAgd3JhcE91dHB1dDogZmFsc2UsXG59KTtcblxuLy9AXG4vL0AgIyMjIFNoZWxsU3RyaW5nLnByb3RvdHlwZS50byhmaWxlKVxuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgY2F0KCdpbnB1dC50eHQnKS50bygnb3V0cHV0LnR4dCcpO1xuLy9AIGBgYFxuLy9AXG4vL0AgQW5hbG9nb3VzIHRvIHRoZSByZWRpcmVjdGlvbiBvcGVyYXRvciBgPmAgaW4gVW5peCwgYnV0IHdvcmtzIHdpdGhcbi8vQCBgU2hlbGxTdHJpbmdzYCAoc3VjaCBhcyB0aG9zZSByZXR1cm5lZCBieSBgY2F0YCwgYGdyZXBgLCBldGMuKS4gX0xpa2UgVW5peFxuLy9AIHJlZGlyZWN0aW9ucywgYHRvKClgIHdpbGwgb3ZlcndyaXRlIGFueSBleGlzdGluZyBmaWxlIV9cbmZ1bmN0aW9uIF90byhvcHRpb25zLCBmaWxlKSB7XG4gIGlmICghZmlsZSkgY29tbW9uLmVycm9yKCd3cm9uZyBhcmd1bWVudHMnKTtcblxuICBpZiAoIWZzLmV4aXN0c1N5bmMocGF0aC5kaXJuYW1lKGZpbGUpKSkge1xuICAgIGNvbW1vbi5lcnJvcignbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTogJyArIHBhdGguZGlybmFtZShmaWxlKSk7XG4gIH1cblxuICB0cnkge1xuICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZSwgdGhpcy5zdGRvdXQgfHwgdGhpcy50b1N0cmluZygpLCAndXRmOCcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBjb21tb24uZXJyb3IoJ2NvdWxkIG5vdCB3cml0ZSB0byBmaWxlIChjb2RlICcgKyBlLmNvZGUgKyAnKTogJyArIGZpbGUsIHsgY29udGludWU6IHRydWUgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gX3RvO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/to.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/toEnd.js":
/*!*******************************************!*\
  !*** ./node_modules/shelljs/src/toEnd.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\ncommon.register('toEnd', _toEnd, {\n  pipeOnly: true,\n  wrapOutput: false,\n});\n\n//@\n//@ ### ShellString.prototype.toEnd(file)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ cat('input.txt').toEnd('output.txt');\n//@ ```\n//@\n//@ Analogous to the redirect-and-append operator `>>` in Unix, but works with\n//@ `ShellStrings` (such as those returned by `cat`, `grep`, etc.).\nfunction _toEnd(options, file) {\n  if (!file) common.error('wrong arguments');\n\n  if (!fs.existsSync(path.dirname(file))) {\n    common.error('no such file or directory: ' + path.dirname(file));\n  }\n\n  try {\n    fs.appendFileSync(file, this.stdout || this.toString(), 'utf8');\n    return this;\n  } catch (e) {\n    /* istanbul ignore next */\n    common.error('could not append to file (code ' + e.code + '): ' + file, { continue: true });\n  }\n}\nmodule.exports = _toEnd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdG9FbmQuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLDREQUFVO0FBQy9CLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFekI7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsOEVBQThFLGdCQUFnQjtBQUM5RjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NoZWxsanMvc3JjL3RvRW5kLmpzP2I5M2IiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmNvbW1vbi5yZWdpc3RlcigndG9FbmQnLCBfdG9FbmQsIHtcbiAgcGlwZU9ubHk6IHRydWUsXG4gIHdyYXBPdXRwdXQ6IGZhbHNlLFxufSk7XG5cbi8vQFxuLy9AICMjIyBTaGVsbFN0cmluZy5wcm90b3R5cGUudG9FbmQoZmlsZSlcbi8vQFxuLy9AIEV4YW1wbGVzOlxuLy9AXG4vL0AgYGBgamF2YXNjcmlwdFxuLy9AIGNhdCgnaW5wdXQudHh0JykudG9FbmQoJ291dHB1dC50eHQnKTtcbi8vQCBgYGBcbi8vQFxuLy9AIEFuYWxvZ291cyB0byB0aGUgcmVkaXJlY3QtYW5kLWFwcGVuZCBvcGVyYXRvciBgPj5gIGluIFVuaXgsIGJ1dCB3b3JrcyB3aXRoXG4vL0AgYFNoZWxsU3RyaW5nc2AgKHN1Y2ggYXMgdGhvc2UgcmV0dXJuZWQgYnkgYGNhdGAsIGBncmVwYCwgZXRjLikuXG5mdW5jdGlvbiBfdG9FbmQob3B0aW9ucywgZmlsZSkge1xuICBpZiAoIWZpbGUpIGNvbW1vbi5lcnJvcignd3JvbmcgYXJndW1lbnRzJyk7XG5cbiAgaWYgKCFmcy5leGlzdHNTeW5jKHBhdGguZGlybmFtZShmaWxlKSkpIHtcbiAgICBjb21tb24uZXJyb3IoJ25vIHN1Y2ggZmlsZSBvciBkaXJlY3Rvcnk6ICcgKyBwYXRoLmRpcm5hbWUoZmlsZSkpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBmcy5hcHBlbmRGaWxlU3luYyhmaWxlLCB0aGlzLnN0ZG91dCB8fCB0aGlzLnRvU3RyaW5nKCksICd1dGY4Jyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGNvbW1vbi5lcnJvcignY291bGQgbm90IGFwcGVuZCB0byBmaWxlIChjb2RlICcgKyBlLmNvZGUgKyAnKTogJyArIGZpbGUsIHsgY29udGludWU6IHRydWUgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gX3RvRW5kO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/toEnd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/touch.js":
/*!*******************************************!*\
  !*** ./node_modules/shelljs/src/touch.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\ncommon.register('touch', _touch, {\n  cmdOptions: {\n    'a': 'atime_only',\n    'c': 'no_create',\n    'd': 'date',\n    'm': 'mtime_only',\n    'r': 'reference',\n  },\n});\n\n//@\n//@ ### touch([options,] file [, file ...])\n//@ ### touch([options,] file_array)\n//@\n//@ Available options:\n//@\n//@ + `-a`: Change only the access time\n//@ + `-c`: Do not create any files\n//@ + `-m`: Change only the modification time\n//@ + `-d DATE`: Parse `DATE` and use it instead of current time\n//@ + `-r FILE`: Use `FILE`'s times instead of current time\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ touch('source.js');\n//@ touch('-c', '/path/to/some/dir/source.js');\n//@ touch({ '-r': FILE }, '/path/to/some/dir/source.js');\n//@ ```\n//@\n//@ Update the access and modification times of each `FILE` to the current time.\n//@ A `FILE` argument that does not exist is created empty, unless `-c` is supplied.\n//@ This is a partial implementation of [`touch(1)`](http://linux.die.net/man/1/touch).\nfunction _touch(opts, files) {\n  if (!files) {\n    common.error('no files given');\n  } else if (typeof files === 'string') {\n    files = [].slice.call(arguments, 1);\n  } else {\n    common.error('file arg should be a string file path or an Array of string file paths');\n  }\n\n  files.forEach(function (f) {\n    touchFile(opts, f);\n  });\n  return '';\n}\n\nfunction touchFile(opts, file) {\n  var stat = tryStatFile(file);\n\n  if (stat && stat.isDirectory()) {\n    // don't error just exit\n    return;\n  }\n\n  // if the file doesn't already exist and the user has specified --no-create then\n  // this script is finished\n  if (!stat && opts.no_create) {\n    return;\n  }\n\n  // open the file and then close it. this will create it if it doesn't exist but will\n  // not truncate the file\n  fs.closeSync(fs.openSync(file, 'a'));\n\n  //\n  // Set timestamps\n  //\n\n  // setup some defaults\n  var now = new Date();\n  var mtime = opts.date || now;\n  var atime = opts.date || now;\n\n  // use reference file\n  if (opts.reference) {\n    var refStat = tryStatFile(opts.reference);\n    if (!refStat) {\n      common.error('failed to get attributess of ' + opts.reference);\n    }\n    mtime = refStat.mtime;\n    atime = refStat.atime;\n  } else if (opts.date) {\n    mtime = opts.date;\n    atime = opts.date;\n  }\n\n  if (opts.atime_only && opts.mtime_only) {\n    // keep the new values of mtime and atime like GNU\n  } else if (opts.atime_only) {\n    mtime = stat.mtime;\n  } else if (opts.mtime_only) {\n    atime = stat.atime;\n  }\n\n  fs.utimesSync(file, atime, mtime);\n}\n\nmodule.exports = _touch;\n\nfunction tryStatFile(filePath) {\n  try {\n    return common.statFollowLinks(filePath);\n  } catch (e) {\n    return null;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdG91Y2guanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLDREQUFVO0FBQy9CLFNBQVMsbUJBQU8sQ0FBQyxjQUFJOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy90b3VjaC5qcz9kYmNiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCd0b3VjaCcsIF90b3VjaCwge1xuICBjbWRPcHRpb25zOiB7XG4gICAgJ2EnOiAnYXRpbWVfb25seScsXG4gICAgJ2MnOiAnbm9fY3JlYXRlJyxcbiAgICAnZCc6ICdkYXRlJyxcbiAgICAnbSc6ICdtdGltZV9vbmx5JyxcbiAgICAncic6ICdyZWZlcmVuY2UnLFxuICB9LFxufSk7XG5cbi8vQFxuLy9AICMjIyB0b3VjaChbb3B0aW9ucyxdIGZpbGUgWywgZmlsZSAuLi5dKVxuLy9AICMjIyB0b3VjaChbb3B0aW9ucyxdIGZpbGVfYXJyYXkpXG4vL0Bcbi8vQCBBdmFpbGFibGUgb3B0aW9uczpcbi8vQFxuLy9AICsgYC1hYDogQ2hhbmdlIG9ubHkgdGhlIGFjY2VzcyB0aW1lXG4vL0AgKyBgLWNgOiBEbyBub3QgY3JlYXRlIGFueSBmaWxlc1xuLy9AICsgYC1tYDogQ2hhbmdlIG9ubHkgdGhlIG1vZGlmaWNhdGlvbiB0aW1lXG4vL0AgKyBgLWQgREFURWA6IFBhcnNlIGBEQVRFYCBhbmQgdXNlIGl0IGluc3RlYWQgb2YgY3VycmVudCB0aW1lXG4vL0AgKyBgLXIgRklMRWA6IFVzZSBgRklMRWAncyB0aW1lcyBpbnN0ZWFkIG9mIGN1cnJlbnQgdGltZVxuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgdG91Y2goJ3NvdXJjZS5qcycpO1xuLy9AIHRvdWNoKCctYycsICcvcGF0aC90by9zb21lL2Rpci9zb3VyY2UuanMnKTtcbi8vQCB0b3VjaCh7ICctcic6IEZJTEUgfSwgJy9wYXRoL3RvL3NvbWUvZGlyL3NvdXJjZS5qcycpO1xuLy9AIGBgYFxuLy9AXG4vL0AgVXBkYXRlIHRoZSBhY2Nlc3MgYW5kIG1vZGlmaWNhdGlvbiB0aW1lcyBvZiBlYWNoIGBGSUxFYCB0byB0aGUgY3VycmVudCB0aW1lLlxuLy9AIEEgYEZJTEVgIGFyZ3VtZW50IHRoYXQgZG9lcyBub3QgZXhpc3QgaXMgY3JlYXRlZCBlbXB0eSwgdW5sZXNzIGAtY2AgaXMgc3VwcGxpZWQuXG4vL0AgVGhpcyBpcyBhIHBhcnRpYWwgaW1wbGVtZW50YXRpb24gb2YgW2B0b3VjaCgxKWBdKGh0dHA6Ly9saW51eC5kaWUubmV0L21hbi8xL3RvdWNoKS5cbmZ1bmN0aW9uIF90b3VjaChvcHRzLCBmaWxlcykge1xuICBpZiAoIWZpbGVzKSB7XG4gICAgY29tbW9uLmVycm9yKCdubyBmaWxlcyBnaXZlbicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBmaWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBmaWxlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgfSBlbHNlIHtcbiAgICBjb21tb24uZXJyb3IoJ2ZpbGUgYXJnIHNob3VsZCBiZSBhIHN0cmluZyBmaWxlIHBhdGggb3IgYW4gQXJyYXkgb2Ygc3RyaW5nIGZpbGUgcGF0aHMnKTtcbiAgfVxuXG4gIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICB0b3VjaEZpbGUob3B0cywgZik7XG4gIH0pO1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHRvdWNoRmlsZShvcHRzLCBmaWxlKSB7XG4gIHZhciBzdGF0ID0gdHJ5U3RhdEZpbGUoZmlsZSk7XG5cbiAgaWYgKHN0YXQgJiYgc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgLy8gZG9uJ3QgZXJyb3IganVzdCBleGl0XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWYgdGhlIGZpbGUgZG9lc24ndCBhbHJlYWR5IGV4aXN0IGFuZCB0aGUgdXNlciBoYXMgc3BlY2lmaWVkIC0tbm8tY3JlYXRlIHRoZW5cbiAgLy8gdGhpcyBzY3JpcHQgaXMgZmluaXNoZWRcbiAgaWYgKCFzdGF0ICYmIG9wdHMubm9fY3JlYXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gb3BlbiB0aGUgZmlsZSBhbmQgdGhlbiBjbG9zZSBpdC4gdGhpcyB3aWxsIGNyZWF0ZSBpdCBpZiBpdCBkb2Vzbid0IGV4aXN0IGJ1dCB3aWxsXG4gIC8vIG5vdCB0cnVuY2F0ZSB0aGUgZmlsZVxuICBmcy5jbG9zZVN5bmMoZnMub3BlblN5bmMoZmlsZSwgJ2EnKSk7XG5cbiAgLy9cbiAgLy8gU2V0IHRpbWVzdGFtcHNcbiAgLy9cblxuICAvLyBzZXR1cCBzb21lIGRlZmF1bHRzXG4gIHZhciBub3cgPSBuZXcgRGF0ZSgpO1xuICB2YXIgbXRpbWUgPSBvcHRzLmRhdGUgfHwgbm93O1xuICB2YXIgYXRpbWUgPSBvcHRzLmRhdGUgfHwgbm93O1xuXG4gIC8vIHVzZSByZWZlcmVuY2UgZmlsZVxuICBpZiAob3B0cy5yZWZlcmVuY2UpIHtcbiAgICB2YXIgcmVmU3RhdCA9IHRyeVN0YXRGaWxlKG9wdHMucmVmZXJlbmNlKTtcbiAgICBpZiAoIXJlZlN0YXQpIHtcbiAgICAgIGNvbW1vbi5lcnJvcignZmFpbGVkIHRvIGdldCBhdHRyaWJ1dGVzcyBvZiAnICsgb3B0cy5yZWZlcmVuY2UpO1xuICAgIH1cbiAgICBtdGltZSA9IHJlZlN0YXQubXRpbWU7XG4gICAgYXRpbWUgPSByZWZTdGF0LmF0aW1lO1xuICB9IGVsc2UgaWYgKG9wdHMuZGF0ZSkge1xuICAgIG10aW1lID0gb3B0cy5kYXRlO1xuICAgIGF0aW1lID0gb3B0cy5kYXRlO1xuICB9XG5cbiAgaWYgKG9wdHMuYXRpbWVfb25seSAmJiBvcHRzLm10aW1lX29ubHkpIHtcbiAgICAvLyBrZWVwIHRoZSBuZXcgdmFsdWVzIG9mIG10aW1lIGFuZCBhdGltZSBsaWtlIEdOVVxuICB9IGVsc2UgaWYgKG9wdHMuYXRpbWVfb25seSkge1xuICAgIG10aW1lID0gc3RhdC5tdGltZTtcbiAgfSBlbHNlIGlmIChvcHRzLm10aW1lX29ubHkpIHtcbiAgICBhdGltZSA9IHN0YXQuYXRpbWU7XG4gIH1cblxuICBmcy51dGltZXNTeW5jKGZpbGUsIGF0aW1lLCBtdGltZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvdWNoO1xuXG5mdW5jdGlvbiB0cnlTdGF0RmlsZShmaWxlUGF0aCkge1xuICB0cnkge1xuICAgIHJldHVybiBjb21tb24uc3RhdEZvbGxvd0xpbmtzKGZpbGVQYXRoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/touch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/uniq.js":
/*!******************************************!*\
  !*** ./node_modules/shelljs/src/uniq.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\n\n// add c spaces to the left of str\nfunction lpad(c, str) {\n  var res = '' + str;\n  if (res.length < c) {\n    res = Array((c - res.length) + 1).join(' ') + res;\n  }\n  return res;\n}\n\ncommon.register('uniq', _uniq, {\n  canReceivePipe: true,\n  cmdOptions: {\n    'i': 'ignoreCase',\n    'c': 'count',\n    'd': 'duplicates',\n  },\n});\n\n//@\n//@ ### uniq([options,] [input, [output]])\n//@\n//@ Available options:\n//@\n//@ + `-i`: Ignore case while comparing\n//@ + `-c`: Prefix lines by the number of occurrences\n//@ + `-d`: Only print duplicate lines, one for each group of identical lines\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ uniq('foo.txt');\n//@ uniq('-i', 'foo.txt');\n//@ uniq('-cd', 'foo.txt', 'bar.txt');\n//@ ```\n//@\n//@ Filter adjacent matching lines from `input`.\nfunction _uniq(options, input, output) {\n  // Check if this is coming from a pipe\n  var pipe = common.readFromPipe();\n\n  if (!pipe) {\n    if (!input) common.error('no input given');\n\n    if (!fs.existsSync(input)) {\n      common.error(input + ': No such file or directory');\n    } else if (common.statFollowLinks(input).isDirectory()) {\n      common.error(\"error reading '\" + input + \"'\");\n    }\n  }\n  if (output && fs.existsSync(output) && common.statFollowLinks(output).isDirectory()) {\n    common.error(output + ': Is a directory');\n  }\n\n  var lines = (input ? fs.readFileSync(input, 'utf8') : pipe).\n              trimRight().\n              split('\\n');\n\n  var compare = function (a, b) {\n    return options.ignoreCase ?\n           a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase()) :\n           a.localeCompare(b);\n  };\n  var uniqed = lines.reduceRight(function (res, e) {\n    // Perform uniq -c on the input\n    if (res.length === 0) {\n      return [{ count: 1, ln: e }];\n    } else if (compare(res[0].ln, e) === 0) {\n      return [{ count: res[0].count + 1, ln: e }].concat(res.slice(1));\n    } else {\n      return [{ count: 1, ln: e }].concat(res);\n    }\n  }, []).filter(function (obj) {\n                 // Do we want only duplicated objects?\n    return options.duplicates ? obj.count > 1 : true;\n  }).map(function (obj) {\n                 // Are we tracking the counts of each line?\n    return (options.count ? (lpad(7, obj.count) + ' ') : '') + obj.ln;\n  }).join('\\n') + '\\n';\n\n  if (output) {\n    (new common.ShellString(uniqed)).to(output);\n    // if uniq writes to output, nothing is passed to the next command in the pipeline (if any)\n    return '';\n  } else {\n    return uniqed;\n  }\n}\n\nmodule.exports = _uniq;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvdW5pcS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsNERBQVU7QUFDL0IsU0FBUyxtQkFBTyxDQUFDLGNBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDLE1BQU07QUFDTixnQkFBZ0IsZ0NBQWdDO0FBQ2hELE1BQU07QUFDTixnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zaGVsbGpzL3NyYy91bmlxLmpzP2QxOTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4vLyBhZGQgYyBzcGFjZXMgdG8gdGhlIGxlZnQgb2Ygc3RyXG5mdW5jdGlvbiBscGFkKGMsIHN0cikge1xuICB2YXIgcmVzID0gJycgKyBzdHI7XG4gIGlmIChyZXMubGVuZ3RoIDwgYykge1xuICAgIHJlcyA9IEFycmF5KChjIC0gcmVzLmxlbmd0aCkgKyAxKS5qb2luKCcgJykgKyByZXM7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuY29tbW9uLnJlZ2lzdGVyKCd1bmlxJywgX3VuaXEsIHtcbiAgY2FuUmVjZWl2ZVBpcGU6IHRydWUsXG4gIGNtZE9wdGlvbnM6IHtcbiAgICAnaSc6ICdpZ25vcmVDYXNlJyxcbiAgICAnYyc6ICdjb3VudCcsXG4gICAgJ2QnOiAnZHVwbGljYXRlcycsXG4gIH0sXG59KTtcblxuLy9AXG4vL0AgIyMjIHVuaXEoW29wdGlvbnMsXSBbaW5wdXQsIFtvdXRwdXRdXSlcbi8vQFxuLy9AIEF2YWlsYWJsZSBvcHRpb25zOlxuLy9AXG4vL0AgKyBgLWlgOiBJZ25vcmUgY2FzZSB3aGlsZSBjb21wYXJpbmdcbi8vQCArIGAtY2A6IFByZWZpeCBsaW5lcyBieSB0aGUgbnVtYmVyIG9mIG9jY3VycmVuY2VzXG4vL0AgKyBgLWRgOiBPbmx5IHByaW50IGR1cGxpY2F0ZSBsaW5lcywgb25lIGZvciBlYWNoIGdyb3VwIG9mIGlkZW50aWNhbCBsaW5lc1xuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgdW5pcSgnZm9vLnR4dCcpO1xuLy9AIHVuaXEoJy1pJywgJ2Zvby50eHQnKTtcbi8vQCB1bmlxKCctY2QnLCAnZm9vLnR4dCcsICdiYXIudHh0Jyk7XG4vL0AgYGBgXG4vL0Bcbi8vQCBGaWx0ZXIgYWRqYWNlbnQgbWF0Y2hpbmcgbGluZXMgZnJvbSBgaW5wdXRgLlxuZnVuY3Rpb24gX3VuaXEob3B0aW9ucywgaW5wdXQsIG91dHB1dCkge1xuICAvLyBDaGVjayBpZiB0aGlzIGlzIGNvbWluZyBmcm9tIGEgcGlwZVxuICB2YXIgcGlwZSA9IGNvbW1vbi5yZWFkRnJvbVBpcGUoKTtcblxuICBpZiAoIXBpcGUpIHtcbiAgICBpZiAoIWlucHV0KSBjb21tb24uZXJyb3IoJ25vIGlucHV0IGdpdmVuJyk7XG5cbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoaW5wdXQpKSB7XG4gICAgICBjb21tb24uZXJyb3IoaW5wdXQgKyAnOiBObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5Jyk7XG4gICAgfSBlbHNlIGlmIChjb21tb24uc3RhdEZvbGxvd0xpbmtzKGlucHV0KS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICBjb21tb24uZXJyb3IoXCJlcnJvciByZWFkaW5nICdcIiArIGlucHV0ICsgXCInXCIpO1xuICAgIH1cbiAgfVxuICBpZiAob3V0cHV0ICYmIGZzLmV4aXN0c1N5bmMob3V0cHV0KSAmJiBjb21tb24uc3RhdEZvbGxvd0xpbmtzKG91dHB1dCkuaXNEaXJlY3RvcnkoKSkge1xuICAgIGNvbW1vbi5lcnJvcihvdXRwdXQgKyAnOiBJcyBhIGRpcmVjdG9yeScpO1xuICB9XG5cbiAgdmFyIGxpbmVzID0gKGlucHV0ID8gZnMucmVhZEZpbGVTeW5jKGlucHV0LCAndXRmOCcpIDogcGlwZSkuXG4gICAgICAgICAgICAgIHRyaW1SaWdodCgpLlxuICAgICAgICAgICAgICBzcGxpdCgnXFxuJyk7XG5cbiAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvcHRpb25zLmlnbm9yZUNhc2UgP1xuICAgICAgICAgICBhLnRvTG9jYWxlTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiLnRvTG9jYWxlTG93ZXJDYXNlKCkpIDpcbiAgICAgICAgICAgYS5sb2NhbGVDb21wYXJlKGIpO1xuICB9O1xuICB2YXIgdW5pcWVkID0gbGluZXMucmVkdWNlUmlnaHQoZnVuY3Rpb24gKHJlcywgZSkge1xuICAgIC8vIFBlcmZvcm0gdW5pcSAtYyBvbiB0aGUgaW5wdXRcbiAgICBpZiAocmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFt7IGNvdW50OiAxLCBsbjogZSB9XTtcbiAgICB9IGVsc2UgaWYgKGNvbXBhcmUocmVzWzBdLmxuLCBlKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFt7IGNvdW50OiByZXNbMF0uY291bnQgKyAxLCBsbjogZSB9XS5jb25jYXQocmVzLnNsaWNlKDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFt7IGNvdW50OiAxLCBsbjogZSB9XS5jb25jYXQocmVzKTtcbiAgICB9XG4gIH0sIFtdKS5maWx0ZXIoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgICAgICAvLyBEbyB3ZSB3YW50IG9ubHkgZHVwbGljYXRlZCBvYmplY3RzP1xuICAgIHJldHVybiBvcHRpb25zLmR1cGxpY2F0ZXMgPyBvYmouY291bnQgPiAxIDogdHJ1ZTtcbiAgfSkubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgLy8gQXJlIHdlIHRyYWNraW5nIHRoZSBjb3VudHMgb2YgZWFjaCBsaW5lP1xuICAgIHJldHVybiAob3B0aW9ucy5jb3VudCA/IChscGFkKDcsIG9iai5jb3VudCkgKyAnICcpIDogJycpICsgb2JqLmxuO1xuICB9KS5qb2luKCdcXG4nKSArICdcXG4nO1xuXG4gIGlmIChvdXRwdXQpIHtcbiAgICAobmV3IGNvbW1vbi5TaGVsbFN0cmluZyh1bmlxZWQpKS50byhvdXRwdXQpO1xuICAgIC8vIGlmIHVuaXEgd3JpdGVzIHRvIG91dHB1dCwgbm90aGluZyBpcyBwYXNzZWQgdG8gdGhlIG5leHQgY29tbWFuZCBpbiB0aGUgcGlwZWxpbmUgKGlmIGFueSlcbiAgICByZXR1cm4gJyc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuaXFlZDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF91bmlxO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/uniq.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shelljs/src/which.js":
/*!*******************************************!*\
  !*** ./node_modules/shelljs/src/which.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/shelljs/src/common.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\n\ncommon.register('which', _which, {\n  allowGlobbing: false,\n  cmdOptions: {\n    'a': 'all',\n  },\n});\n\n// XP's system default value for `PATHEXT` system variable, just in case it's not\n// set on Windows.\nvar XP_DEFAULT_PATHEXT = '.com;.exe;.bat;.cmd;.vbs;.vbe;.js;.jse;.wsf;.wsh';\n\n// For earlier versions of NodeJS that doesn't have a list of constants (< v6)\nvar FILE_EXECUTABLE_MODE = 1;\n\nfunction isWindowsPlatform() {\n  return process.platform === 'win32';\n}\n\n// Cross-platform method for splitting environment `PATH` variables\nfunction splitPath(p) {\n  return p ? p.split(path.delimiter) : [];\n}\n\n// Tests are running all cases for this func but it stays uncovered by codecov due to unknown reason\n/* istanbul ignore next */\nfunction isExecutable(pathName) {\n  try {\n    // TODO(node-support): replace with fs.constants.X_OK once remove support for node < v6\n    fs.accessSync(pathName, FILE_EXECUTABLE_MODE);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\nfunction checkPath(pathName) {\n  return fs.existsSync(pathName) && !common.statFollowLinks(pathName).isDirectory()\n    && (isWindowsPlatform() || isExecutable(pathName));\n}\n\n//@\n//@ ### which(command)\n//@\n//@ Examples:\n//@\n//@ ```javascript\n//@ var nodeExec = which('node');\n//@ ```\n//@\n//@ Searches for `command` in the system's `PATH`. On Windows, this uses the\n//@ `PATHEXT` variable to append the extension if it's not already executable.\n//@ Returns string containing the absolute path to `command`.\nfunction _which(options, cmd) {\n  if (!cmd) common.error('must specify command');\n\n  var isWindows = isWindowsPlatform();\n  var pathArray = splitPath(process.env.PATH);\n\n  var queryMatches = [];\n\n  // No relative/absolute paths provided?\n  if (cmd.indexOf('/') === -1) {\n    // Assume that there are no extensions to append to queries (this is the\n    // case for unix)\n    var pathExtArray = [''];\n    if (isWindows) {\n      // In case the PATHEXT variable is somehow not set (e.g.\n      // child_process.spawn with an empty environment), use the XP default.\n      var pathExtEnv = process.env.PATHEXT || XP_DEFAULT_PATHEXT;\n      pathExtArray = splitPath(pathExtEnv.toUpperCase());\n    }\n\n    // Search for command in PATH\n    for (var k = 0; k < pathArray.length; k++) {\n      // already found it\n      if (queryMatches.length > 0 && !options.all) break;\n\n      var attempt = path.resolve(pathArray[k], cmd);\n\n      if (isWindows) {\n        attempt = attempt.toUpperCase();\n      }\n\n      var match = attempt.match(/\\.[^<>:\"/\\|?*.]+$/);\n      if (match && pathExtArray.indexOf(match[0]) >= 0) { // this is Windows-only\n        // The user typed a query with the file extension, like\n        // `which('node.exe')`\n        if (checkPath(attempt)) {\n          queryMatches.push(attempt);\n          break;\n        }\n      } else { // All-platforms\n        // Cycle through the PATHEXT array, and check each extension\n        // Note: the array is always [''] on Unix\n        for (var i = 0; i < pathExtArray.length; i++) {\n          var ext = pathExtArray[i];\n          var newAttempt = attempt + ext;\n          if (checkPath(newAttempt)) {\n            queryMatches.push(newAttempt);\n            break;\n          }\n        }\n      }\n    }\n  } else if (checkPath(cmd)) { // a valid absolute or relative path\n    queryMatches.push(path.resolve(cmd));\n  }\n\n  if (queryMatches.length > 0) {\n    return options.all ? queryMatches : queryMatches[0];\n  }\n  return options.all ? [] : null;\n}\nmodule.exports = _which;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvd2hpY2guanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLDREQUFVO0FBQy9CLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTs7QUFFekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsK0JBQStCLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssS0FBSzs7QUFFdEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLE9BQU87QUFDZjtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDJCQUEyQjtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2hlbGxqcy9zcmMvd2hpY2guanM/NWFkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29tbW9uLnJlZ2lzdGVyKCd3aGljaCcsIF93aGljaCwge1xuICBhbGxvd0dsb2JiaW5nOiBmYWxzZSxcbiAgY21kT3B0aW9uczoge1xuICAgICdhJzogJ2FsbCcsXG4gIH0sXG59KTtcblxuLy8gWFAncyBzeXN0ZW0gZGVmYXVsdCB2YWx1ZSBmb3IgYFBBVEhFWFRgIHN5c3RlbSB2YXJpYWJsZSwganVzdCBpbiBjYXNlIGl0J3Mgbm90XG4vLyBzZXQgb24gV2luZG93cy5cbnZhciBYUF9ERUZBVUxUX1BBVEhFWFQgPSAnLmNvbTsuZXhlOy5iYXQ7LmNtZDsudmJzOy52YmU7LmpzOy5qc2U7LndzZjsud3NoJztcblxuLy8gRm9yIGVhcmxpZXIgdmVyc2lvbnMgb2YgTm9kZUpTIHRoYXQgZG9lc24ndCBoYXZlIGEgbGlzdCBvZiBjb25zdGFudHMgKDwgdjYpXG52YXIgRklMRV9FWEVDVVRBQkxFX01PREUgPSAxO1xuXG5mdW5jdGlvbiBpc1dpbmRvd3NQbGF0Zm9ybSgpIHtcbiAgcmV0dXJuIHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG59XG5cbi8vIENyb3NzLXBsYXRmb3JtIG1ldGhvZCBmb3Igc3BsaXR0aW5nIGVudmlyb25tZW50IGBQQVRIYCB2YXJpYWJsZXNcbmZ1bmN0aW9uIHNwbGl0UGF0aChwKSB7XG4gIHJldHVybiBwID8gcC5zcGxpdChwYXRoLmRlbGltaXRlcikgOiBbXTtcbn1cblxuLy8gVGVzdHMgYXJlIHJ1bm5pbmcgYWxsIGNhc2VzIGZvciB0aGlzIGZ1bmMgYnV0IGl0IHN0YXlzIHVuY292ZXJlZCBieSBjb2RlY292IGR1ZSB0byB1bmtub3duIHJlYXNvblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzRXhlY3V0YWJsZShwYXRoTmFtZSkge1xuICB0cnkge1xuICAgIC8vIFRPRE8obm9kZS1zdXBwb3J0KTogcmVwbGFjZSB3aXRoIGZzLmNvbnN0YW50cy5YX09LIG9uY2UgcmVtb3ZlIHN1cHBvcnQgZm9yIG5vZGUgPCB2NlxuICAgIGZzLmFjY2Vzc1N5bmMocGF0aE5hbWUsIEZJTEVfRVhFQ1VUQUJMRV9NT0RFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjaGVja1BhdGgocGF0aE5hbWUpIHtcbiAgcmV0dXJuIGZzLmV4aXN0c1N5bmMocGF0aE5hbWUpICYmICFjb21tb24uc3RhdEZvbGxvd0xpbmtzKHBhdGhOYW1lKS5pc0RpcmVjdG9yeSgpXG4gICAgJiYgKGlzV2luZG93c1BsYXRmb3JtKCkgfHwgaXNFeGVjdXRhYmxlKHBhdGhOYW1lKSk7XG59XG5cbi8vQFxuLy9AICMjIyB3aGljaChjb21tYW5kKVxuLy9AXG4vL0AgRXhhbXBsZXM6XG4vL0Bcbi8vQCBgYGBqYXZhc2NyaXB0XG4vL0AgdmFyIG5vZGVFeGVjID0gd2hpY2goJ25vZGUnKTtcbi8vQCBgYGBcbi8vQFxuLy9AIFNlYXJjaGVzIGZvciBgY29tbWFuZGAgaW4gdGhlIHN5c3RlbSdzIGBQQVRIYC4gT24gV2luZG93cywgdGhpcyB1c2VzIHRoZVxuLy9AIGBQQVRIRVhUYCB2YXJpYWJsZSB0byBhcHBlbmQgdGhlIGV4dGVuc2lvbiBpZiBpdCdzIG5vdCBhbHJlYWR5IGV4ZWN1dGFibGUuXG4vL0AgUmV0dXJucyBzdHJpbmcgY29udGFpbmluZyB0aGUgYWJzb2x1dGUgcGF0aCB0byBgY29tbWFuZGAuXG5mdW5jdGlvbiBfd2hpY2gob3B0aW9ucywgY21kKSB7XG4gIGlmICghY21kKSBjb21tb24uZXJyb3IoJ211c3Qgc3BlY2lmeSBjb21tYW5kJyk7XG5cbiAgdmFyIGlzV2luZG93cyA9IGlzV2luZG93c1BsYXRmb3JtKCk7XG4gIHZhciBwYXRoQXJyYXkgPSBzcGxpdFBhdGgocHJvY2Vzcy5lbnYuUEFUSCk7XG5cbiAgdmFyIHF1ZXJ5TWF0Y2hlcyA9IFtdO1xuXG4gIC8vIE5vIHJlbGF0aXZlL2Fic29sdXRlIHBhdGhzIHByb3ZpZGVkP1xuICBpZiAoY21kLmluZGV4T2YoJy8nKSA9PT0gLTEpIHtcbiAgICAvLyBBc3N1bWUgdGhhdCB0aGVyZSBhcmUgbm8gZXh0ZW5zaW9ucyB0byBhcHBlbmQgdG8gcXVlcmllcyAodGhpcyBpcyB0aGVcbiAgICAvLyBjYXNlIGZvciB1bml4KVxuICAgIHZhciBwYXRoRXh0QXJyYXkgPSBbJyddO1xuICAgIGlmIChpc1dpbmRvd3MpIHtcbiAgICAgIC8vIEluIGNhc2UgdGhlIFBBVEhFWFQgdmFyaWFibGUgaXMgc29tZWhvdyBub3Qgc2V0IChlLmcuXG4gICAgICAvLyBjaGlsZF9wcm9jZXNzLnNwYXduIHdpdGggYW4gZW1wdHkgZW52aXJvbm1lbnQpLCB1c2UgdGhlIFhQIGRlZmF1bHQuXG4gICAgICB2YXIgcGF0aEV4dEVudiA9IHByb2Nlc3MuZW52LlBBVEhFWFQgfHwgWFBfREVGQVVMVF9QQVRIRVhUO1xuICAgICAgcGF0aEV4dEFycmF5ID0gc3BsaXRQYXRoKHBhdGhFeHRFbnYudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLy8gU2VhcmNoIGZvciBjb21tYW5kIGluIFBBVEhcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHBhdGhBcnJheS5sZW5ndGg7IGsrKykge1xuICAgICAgLy8gYWxyZWFkeSBmb3VuZCBpdFxuICAgICAgaWYgKHF1ZXJ5TWF0Y2hlcy5sZW5ndGggPiAwICYmICFvcHRpb25zLmFsbCkgYnJlYWs7XG5cbiAgICAgIHZhciBhdHRlbXB0ID0gcGF0aC5yZXNvbHZlKHBhdGhBcnJheVtrXSwgY21kKTtcblxuICAgICAgaWYgKGlzV2luZG93cykge1xuICAgICAgICBhdHRlbXB0ID0gYXR0ZW1wdC50b1VwcGVyQ2FzZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWF0Y2ggPSBhdHRlbXB0Lm1hdGNoKC9cXC5bXjw+OlwiL1xcfD8qLl0rJC8pO1xuICAgICAgaWYgKG1hdGNoICYmIHBhdGhFeHRBcnJheS5pbmRleE9mKG1hdGNoWzBdKSA+PSAwKSB7IC8vIHRoaXMgaXMgV2luZG93cy1vbmx5XG4gICAgICAgIC8vIFRoZSB1c2VyIHR5cGVkIGEgcXVlcnkgd2l0aCB0aGUgZmlsZSBleHRlbnNpb24sIGxpa2VcbiAgICAgICAgLy8gYHdoaWNoKCdub2RlLmV4ZScpYFxuICAgICAgICBpZiAoY2hlY2tQYXRoKGF0dGVtcHQpKSB7XG4gICAgICAgICAgcXVlcnlNYXRjaGVzLnB1c2goYXR0ZW1wdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIEFsbC1wbGF0Zm9ybXNcbiAgICAgICAgLy8gQ3ljbGUgdGhyb3VnaCB0aGUgUEFUSEVYVCBhcnJheSwgYW5kIGNoZWNrIGVhY2ggZXh0ZW5zaW9uXG4gICAgICAgIC8vIE5vdGU6IHRoZSBhcnJheSBpcyBhbHdheXMgWycnXSBvbiBVbml4XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEV4dEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGV4dCA9IHBhdGhFeHRBcnJheVtpXTtcbiAgICAgICAgICB2YXIgbmV3QXR0ZW1wdCA9IGF0dGVtcHQgKyBleHQ7XG4gICAgICAgICAgaWYgKGNoZWNrUGF0aChuZXdBdHRlbXB0KSkge1xuICAgICAgICAgICAgcXVlcnlNYXRjaGVzLnB1c2gobmV3QXR0ZW1wdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoY2hlY2tQYXRoKGNtZCkpIHsgLy8gYSB2YWxpZCBhYnNvbHV0ZSBvciByZWxhdGl2ZSBwYXRoXG4gICAgcXVlcnlNYXRjaGVzLnB1c2gocGF0aC5yZXNvbHZlKGNtZCkpO1xuICB9XG5cbiAgaWYgKHF1ZXJ5TWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYWxsID8gcXVlcnlNYXRjaGVzIDogcXVlcnlNYXRjaGVzWzBdO1xuICB9XG4gIHJldHVybiBvcHRpb25zLmFsbCA/IFtdIDogbnVsbDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX3doaWNoO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shelljs/src/which.js\n");

/***/ })

};
;