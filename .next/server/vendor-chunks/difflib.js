/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/difflib";
exports.ids = ["vendor-chunks/difflib"];
exports.modules = {

/***/ "(ssr)/./node_modules/difflib/index.js":
/*!***************************************!*\
  !*** ./node_modules/difflib/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/difflib */ \"(ssr)/./node_modules/difflib/lib/difflib.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGlmZmxpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSx3R0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2RpZmZsaWIvaW5kZXguanM/ZjZjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2RpZmZsaWInKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/difflib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/difflib/lib/difflib.js":
/*!*********************************************!*\
  !*** ./node_modules/difflib/lib/difflib.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 1.3.1\n\n/*\nModule difflib -- helpers for computing deltas between objects.\n\nFunction getCloseMatches(word, possibilities, n=3, cutoff=0.6):\n    Use SequenceMatcher to return list of the best \"good enough\" matches.\n\nFunction contextDiff(a, b):\n    For two lists of strings, return a delta in context diff format.\n\nFunction ndiff(a, b):\n    Return a delta: the difference between `a` and `b` (lists of strings).\n\nFunction restore(delta, which):\n    Return one of the two sequences that generated an ndiff delta.\n\nFunction unifiedDiff(a, b):\n    For two lists of strings, return a delta in unified diff format.\n\nClass SequenceMatcher:\n    A flexible class for comparing pairs of sequences of any type.\n\nClass Differ:\n    For producing human-readable deltas from sequences of lines of text.\n*/\n\n\n(function() {\n  var Differ, Heap, IS_CHARACTER_JUNK, IS_LINE_JUNK, SequenceMatcher, assert, contextDiff, floor, getCloseMatches, max, min, ndiff, restore, unifiedDiff, _any, _arrayCmp, _calculateRatio, _countLeading, _formatRangeContext, _formatRangeUnified, _has,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  floor = Math.floor, max = Math.max, min = Math.min;\n\n  Heap = __webpack_require__(/*! heap */ \"(ssr)/./node_modules/heap/index.js\");\n\n  assert = __webpack_require__(/*! assert */ \"assert\");\n\n  _calculateRatio = function(matches, length) {\n    if (length) {\n      return 2.0 * matches / length;\n    } else {\n      return 1.0;\n    }\n  };\n\n  _arrayCmp = function(a, b) {\n    var i, la, lb, _i, _ref, _ref1;\n    _ref = [a.length, b.length], la = _ref[0], lb = _ref[1];\n    for (i = _i = 0, _ref1 = min(la, lb); 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {\n      if (a[i] < b[i]) {\n        return -1;\n      }\n      if (a[i] > b[i]) {\n        return 1;\n      }\n    }\n    return la - lb;\n  };\n\n  _has = function(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  };\n\n  _any = function(items) {\n    var item, _i, _len;\n    for (_i = 0, _len = items.length; _i < _len; _i++) {\n      item = items[_i];\n      if (item) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  SequenceMatcher = (function() {\n\n    SequenceMatcher.name = 'SequenceMatcher';\n\n    /*\n      SequenceMatcher is a flexible class for comparing pairs of sequences of\n      any type, so long as the sequence elements are hashable.  The basic\n      algorithm predates, and is a little fancier than, an algorithm\n      published in the late 1980's by Ratcliff and Obershelp under the\n      hyperbolic name \"gestalt pattern matching\".  The basic idea is to find\n      the longest contiguous matching subsequence that contains no \"junk\"\n      elements (R-O doesn't address junk).  The same idea is then applied\n      recursively to the pieces of the sequences to the left and to the right\n      of the matching subsequence.  This does not yield minimal edit\n      sequences, but does tend to yield matches that \"look right\" to people.\n    \n      SequenceMatcher tries to compute a \"human-friendly diff\" between two\n      sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n      longest *contiguous* & junk-free matching subsequence.  That's what\n      catches peoples' eyes.  The Windows(tm) windiff has another interesting\n      notion, pairing up elements that appear uniquely in each sequence.\n      That, and the method here, appear to yield more intuitive difference\n      reports than does diff.  This method appears to be the least vulnerable\n      to synching up on blocks of \"junk lines\", though (like blank lines in\n      ordinary text files, or maybe \"<P>\" lines in HTML files).  That may be\n      because this is the only method of the 3 that has a *concept* of\n      \"junk\" <wink>.\n    \n      Example, comparing two strings, and considering blanks to be \"junk\":\n    \n      >>> isjunk = (c) -> c is ' '\n      >>> s = new SequenceMatcher(isjunk,\n                                  'private Thread currentThread;',\n                                  'private volatile Thread currentThread;')\n    \n      .ratio() returns a float in [0, 1], measuring the \"similarity\" of the\n      sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n      sequences are close matches:\n    \n      >>> s.ratio().toPrecision(3)\n      '0.866'\n    \n      If you're only interested in where the sequences match,\n      .getMatchingBlocks() is handy:\n    \n      >>> for [a, b, size] in s.getMatchingBlocks()\n      ...   console.log(\"a[#{a}] and b[#{b}] match for #{size} elements\");\n      a[0] and b[0] match for 8 elements\n      a[8] and b[17] match for 21 elements\n      a[29] and b[38] match for 0 elements\n    \n      Note that the last tuple returned by .get_matching_blocks() is always a\n      dummy, (len(a), len(b), 0), and this is the only case in which the last\n      tuple element (number of elements matched) is 0.\n    \n      If you want to know how to change the first sequence into the second,\n      use .get_opcodes():\n    \n      >>> for [op, a1, a2, b1, b2] in s.getOpcodes()\n      ...   console.log \"#{op} a[#{a1}:#{a2}] b[#{b1}:#{b2}]\"\n      equal a[0:8] b[0:8]\n      insert a[8:8] b[8:17]\n      equal a[8:29] b[17:38]\n    \n      See the Differ class for a fancy human-friendly file differencer, which\n      uses SequenceMatcher both to compare sequences of lines, and to compare\n      sequences of characters within similar (near-matching) lines.\n    \n      See also function getCloseMatches() in this module, which shows how\n      simple code building on SequenceMatcher can be used to do useful work.\n    \n      Timing:  Basic R-O is cubic time worst case and quadratic time expected\n      case.  SequenceMatcher is quadratic time for the worst case and has\n      expected-case behavior dependent in a complicated way on how many\n      elements the sequences have in common; best case time is linear.\n    \n      Methods:\n    \n      constructor(isjunk=null, a='', b='')\n          Construct a SequenceMatcher.\n    \n      setSeqs(a, b)\n          Set the two sequences to be compared.\n    \n      setSeq1(a)\n          Set the first sequence to be compared.\n    \n      setSeq2(b)\n          Set the second sequence to be compared.\n    \n      findLongestMatch(alo, ahi, blo, bhi)\n          Find longest matching block in a[alo:ahi] and b[blo:bhi].\n    \n      getMatchingBlocks()\n          Return list of triples describing matching subsequences.\n    \n      getOpcodes()\n          Return list of 5-tuples describing how to turn a into b.\n    \n      ratio()\n          Return a measure of the sequences' similarity (float in [0,1]).\n    \n      quickRatio()\n          Return an upper bound on .ratio() relatively quickly.\n    \n      realQuickRatio()\n          Return an upper bound on ratio() very quickly.\n    */\n\n\n    function SequenceMatcher(isjunk, a, b, autojunk) {\n      this.isjunk = isjunk;\n      if (a == null) {\n        a = '';\n      }\n      if (b == null) {\n        b = '';\n      }\n      this.autojunk = autojunk != null ? autojunk : true;\n      /*\n          Construct a SequenceMatcher.\n      \n          Optional arg isjunk is null (the default), or a one-argument\n          function that takes a sequence element and returns true iff the\n          element is junk.  Null is equivalent to passing \"(x) -> 0\", i.e.\n          no elements are considered to be junk.  For example, pass\n              (x) -> x in ' \\t'\n          if you're comparing lines as sequences of characters, and don't\n          want to synch up on blanks or hard tabs.\n      \n          Optional arg a is the first of two sequences to be compared.  By\n          default, an empty string.  The elements of a must be hashable.  See\n          also .setSeqs() and .setSeq1().\n      \n          Optional arg b is the second of two sequences to be compared.  By\n          default, an empty string.  The elements of b must be hashable. See\n          also .setSeqs() and .setSeq2().\n      \n          Optional arg autojunk should be set to false to disable the\n          \"automatic junk heuristic\" that treats popular elements as junk\n          (see module documentation for more information).\n      */\n\n      this.a = this.b = null;\n      this.setSeqs(a, b);\n    }\n\n    SequenceMatcher.prototype.setSeqs = function(a, b) {\n      /* \n      Set the two sequences to be compared. \n      \n      >>> s = new SequenceMatcher()\n      >>> s.setSeqs('abcd', 'bcde')\n      >>> s.ratio()\n      0.75\n      */\n      this.setSeq1(a);\n      return this.setSeq2(b);\n    };\n\n    SequenceMatcher.prototype.setSeq1 = function(a) {\n      /* \n      Set the first sequence to be compared. \n      \n      The second sequence to be compared is not changed.\n      \n      >>> s = new SequenceMatcher(null, 'abcd', 'bcde')\n      >>> s.ratio()\n      0.75\n      >>> s.setSeq1('bcde')\n      >>> s.ratio()\n      1.0\n      \n      SequenceMatcher computes and caches detailed information about the\n      second sequence, so if you want to compare one sequence S against\n      many sequences, use .setSeq2(S) once and call .setSeq1(x)\n      repeatedly for each of the other sequences.\n      \n      See also setSeqs() and setSeq2().\n      */\n      if (a === this.a) {\n        return;\n      }\n      this.a = a;\n      return this.matchingBlocks = this.opcodes = null;\n    };\n\n    SequenceMatcher.prototype.setSeq2 = function(b) {\n      /*\n          Set the second sequence to be compared. \n      \n          The first sequence to be compared is not changed.\n      \n          >>> s = new SequenceMatcher(null, 'abcd', 'bcde')\n          >>> s.ratio()\n          0.75\n          >>> s.setSeq2('abcd')\n          >>> s.ratio()\n          1.0\n      \n          SequenceMatcher computes and caches detailed information about the\n          second sequence, so if you want to compare one sequence S against\n          many sequences, use .setSeq2(S) once and call .setSeq1(x)\n          repeatedly for each of the other sequences.\n      \n          See also setSeqs() and setSeq1().\n      */\n      if (b === this.b) {\n        return;\n      }\n      this.b = b;\n      this.matchingBlocks = this.opcodes = null;\n      this.fullbcount = null;\n      return this._chainB();\n    };\n\n    SequenceMatcher.prototype._chainB = function() {\n      var b, b2j, elt, i, idxs, indices, isjunk, junk, n, ntest, popular, _i, _j, _len, _len1, _ref;\n      b = this.b;\n      this.b2j = b2j = {};\n      for (i = _i = 0, _len = b.length; _i < _len; i = ++_i) {\n        elt = b[i];\n        indices = _has(b2j, elt) ? b2j[elt] : b2j[elt] = [];\n        indices.push(i);\n      }\n      junk = {};\n      isjunk = this.isjunk;\n      if (isjunk) {\n        _ref = Object.keys(b2j);\n        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n          elt = _ref[_j];\n          if (isjunk(elt)) {\n            junk[elt] = true;\n            delete b2j[elt];\n          }\n        }\n      }\n      popular = {};\n      n = b.length;\n      if (this.autojunk && n >= 200) {\n        ntest = floor(n / 100) + 1;\n        for (elt in b2j) {\n          idxs = b2j[elt];\n          if (idxs.length > ntest) {\n            popular[elt] = true;\n            delete b2j[elt];\n          }\n        }\n      }\n      this.isbjunk = function(b) {\n        return _has(junk, b);\n      };\n      return this.isbpopular = function(b) {\n        return _has(popular, b);\n      };\n    };\n\n    SequenceMatcher.prototype.findLongestMatch = function(alo, ahi, blo, bhi) {\n      /* \n      Find longest matching block in a[alo...ahi] and b[blo...bhi].  \n      \n      If isjunk is not defined:\n      \n      Return [i,j,k] such that a[i...i+k] is equal to b[j...j+k], where\n          alo <= i <= i+k <= ahi\n          blo <= j <= j+k <= bhi\n      and for all [i',j',k'] meeting those conditions,\n          k >= k'\n          i <= i'\n          and if i == i', j <= j'\n      \n      In other words, of all maximal matching blocks, return one that\n      starts earliest in a, and of all those maximal matching blocks that\n      start earliest in a, return the one that starts earliest in b.\n      \n      >>> isjunk = (x) -> x is ' '\n      >>> s = new SequenceMatcher(isjunk, ' abcd', 'abcd abcd')\n      >>> s.findLongestMatch(0, 5, 0, 9)\n      [1, 0, 4]\n      \n      >>> s = new SequenceMatcher(null, 'ab', 'c')\n      >>> s.findLongestMatch(0, 2, 0, 1)\n      [0, 0, 0]\n      */\n\n      var a, b, b2j, besti, bestj, bestsize, i, isbjunk, j, j2len, k, newj2len, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;\n      _ref = [this.a, this.b, this.b2j, this.isbjunk], a = _ref[0], b = _ref[1], b2j = _ref[2], isbjunk = _ref[3];\n      _ref1 = [alo, blo, 0], besti = _ref1[0], bestj = _ref1[1], bestsize = _ref1[2];\n      j2len = {};\n      for (i = _i = alo; alo <= ahi ? _i < ahi : _i > ahi; i = alo <= ahi ? ++_i : --_i) {\n        newj2len = {};\n        _ref2 = (_has(b2j, a[i]) ? b2j[a[i]] : []);\n        for (_j = 0, _len = _ref2.length; _j < _len; _j++) {\n          j = _ref2[_j];\n          if (j < blo) {\n            continue;\n          }\n          if (j >= bhi) {\n            break;\n          }\n          k = newj2len[j] = (j2len[j - 1] || 0) + 1;\n          if (k > bestsize) {\n            _ref3 = [i - k + 1, j - k + 1, k], besti = _ref3[0], bestj = _ref3[1], bestsize = _ref3[2];\n          }\n        }\n        j2len = newj2len;\n      }\n      while (besti > alo && bestj > blo && !isbjunk(b[bestj - 1]) && a[besti - 1] === b[bestj - 1]) {\n        _ref4 = [besti - 1, bestj - 1, bestsize + 1], besti = _ref4[0], bestj = _ref4[1], bestsize = _ref4[2];\n      }\n      while (besti + bestsize < ahi && bestj + bestsize < bhi && !isbjunk(b[bestj + bestsize]) && a[besti + bestsize] === b[bestj + bestsize]) {\n        bestsize++;\n      }\n      while (besti > alo && bestj > blo && isbjunk(b[bestj - 1]) && a[besti - 1] === b[bestj - 1]) {\n        _ref5 = [besti - 1, bestj - 1, bestsize + 1], besti = _ref5[0], bestj = _ref5[1], bestsize = _ref5[2];\n      }\n      while (besti + bestsize < ahi && bestj + bestsize < bhi && isbjunk(b[bestj + bestsize]) && a[besti + bestsize] === b[bestj + bestsize]) {\n        bestsize++;\n      }\n      return [besti, bestj, bestsize];\n    };\n\n    SequenceMatcher.prototype.getMatchingBlocks = function() {\n      /*\n          Return list of triples describing matching subsequences.\n      \n          Each triple is of the form [i, j, n], and means that\n          a[i...i+n] == b[j...j+n].  The triples are monotonically increasing in\n          i and in j.  it's also guaranteed that if\n          [i, j, n] and [i', j', n'] are adjacent triples in the list, and\n          the second is not the last triple in the list, then i+n != i' or\n          j+n != j'.  IOW, adjacent triples never describe adjacent equal\n          blocks.\n      \n          The last triple is a dummy, [a.length, b.length, 0], and is the only\n          triple with n==0.\n      \n          >>> s = new SequenceMatcher(null, 'abxcd', 'abcd')\n          >>> s.getMatchingBlocks()\n          [[0, 0, 2], [3, 2, 2], [5, 4, 0]]\n      */\n\n      var ahi, alo, bhi, blo, i, i1, i2, j, j1, j2, k, k1, k2, la, lb, matchingBlocks, nonAdjacent, queue, x, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4;\n      if (this.matchingBlocks) {\n        return this.matchingBlocks;\n      }\n      _ref = [this.a.length, this.b.length], la = _ref[0], lb = _ref[1];\n      queue = [[0, la, 0, lb]];\n      matchingBlocks = [];\n      while (queue.length) {\n        _ref1 = queue.pop(), alo = _ref1[0], ahi = _ref1[1], blo = _ref1[2], bhi = _ref1[3];\n        _ref2 = x = this.findLongestMatch(alo, ahi, blo, bhi), i = _ref2[0], j = _ref2[1], k = _ref2[2];\n        if (k) {\n          matchingBlocks.push(x);\n          if (alo < i && blo < j) {\n            queue.push([alo, i, blo, j]);\n          }\n          if (i + k < ahi && j + k < bhi) {\n            queue.push([i + k, ahi, j + k, bhi]);\n          }\n        }\n      }\n      matchingBlocks.sort(_arrayCmp);\n      i1 = j1 = k1 = 0;\n      nonAdjacent = [];\n      for (_i = 0, _len = matchingBlocks.length; _i < _len; _i++) {\n        _ref3 = matchingBlocks[_i], i2 = _ref3[0], j2 = _ref3[1], k2 = _ref3[2];\n        if (i1 + k1 === i2 && j1 + k1 === j2) {\n          k1 += k2;\n        } else {\n          if (k1) {\n            nonAdjacent.push([i1, j1, k1]);\n          }\n          _ref4 = [i2, j2, k2], i1 = _ref4[0], j1 = _ref4[1], k1 = _ref4[2];\n        }\n      }\n      if (k1) {\n        nonAdjacent.push([i1, j1, k1]);\n      }\n      nonAdjacent.push([la, lb, 0]);\n      return this.matchingBlocks = nonAdjacent;\n    };\n\n    SequenceMatcher.prototype.getOpcodes = function() {\n      /* \n      Return list of 5-tuples describing how to turn a into b.\n      \n      Each tuple is of the form [tag, i1, i2, j1, j2].  The first tuple\n      has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n      tuple preceding it, and likewise for j1 == the previous j2.\n      \n      The tags are strings, with these meanings:\n      \n      'replace':  a[i1...i2] should be replaced by b[j1...j2]\n      'delete':   a[i1...i2] should be deleted.\n                  Note that j1==j2 in this case.\n      'insert':   b[j1...j2] should be inserted at a[i1...i1].\n                  Note that i1==i2 in this case.\n      'equal':    a[i1...i2] == b[j1...j2]\n      \n      >>> s = new SequenceMatcher(null, 'qabxcd', 'abycdf')\n      >>> s.getOpcodes()\n      [ [ 'delete'  , 0 , 1 , 0 , 0 ] ,\n        [ 'equal'   , 1 , 3 , 0 , 2 ] ,\n        [ 'replace' , 3 , 4 , 2 , 3 ] ,\n        [ 'equal'   , 4 , 6 , 3 , 5 ] ,\n        [ 'insert'  , 6 , 6 , 5 , 6 ] ]\n      */\n\n      var ai, answer, bj, i, j, size, tag, _i, _len, _ref, _ref1, _ref2;\n      if (this.opcodes) {\n        return this.opcodes;\n      }\n      i = j = 0;\n      this.opcodes = answer = [];\n      _ref = this.getMatchingBlocks();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        _ref1 = _ref[_i], ai = _ref1[0], bj = _ref1[1], size = _ref1[2];\n        tag = '';\n        if (i < ai && j < bj) {\n          tag = 'replace';\n        } else if (i < ai) {\n          tag = 'delete';\n        } else if (j < bj) {\n          tag = 'insert';\n        }\n        if (tag) {\n          answer.push([tag, i, ai, j, bj]);\n        }\n        _ref2 = [ai + size, bj + size], i = _ref2[0], j = _ref2[1];\n        if (size) {\n          answer.push(['equal', ai, i, bj, j]);\n        }\n      }\n      return answer;\n    };\n\n    SequenceMatcher.prototype.getGroupedOpcodes = function(n) {\n      var codes, group, groups, i1, i2, j1, j2, nn, tag, _i, _len, _ref, _ref1, _ref2, _ref3;\n      if (n == null) {\n        n = 3;\n      }\n      /* \n      Isolate change clusters by eliminating ranges with no changes.\n      \n      Return a list groups with upto n lines of context.\n      Each group is in the same format as returned by get_opcodes().\n      \n      >>> a = [1...40].map(String)\n      >>> b = a.slice()\n      >>> b[8...8] = 'i'\n      >>> b[20] += 'x'\n      >>> b[23...28] = []\n      >>> b[30] += 'y'\n      >>> s = new SequenceMatcher(null, a, b)\n      >>> s.getGroupedOpcodes()\n      [ [ [ 'equal'  , 5 , 8  , 5 , 8 ],\n          [ 'insert' , 8 , 8  , 8 , 9 ],\n          [ 'equal'  , 8 , 11 , 9 , 12 ] ],\n        [ [ 'equal'   , 16 , 19 , 17 , 20 ],\n          [ 'replace' , 19 , 20 , 20 , 21 ],\n          [ 'equal'   , 20 , 22 , 21 , 23 ],\n          [ 'delete'  , 22 , 27 , 23 , 23 ],\n          [ 'equal'   , 27 , 30 , 23 , 26 ] ],\n        [ [ 'equal'   , 31 , 34 , 27 , 30 ],\n          [ 'replace' , 34 , 35 , 30 , 31 ],\n          [ 'equal'   , 35 , 38 , 31 , 34 ] ] ]\n      */\n\n      codes = this.getOpcodes();\n      if (!codes.length) {\n        codes = [['equal', 0, 1, 0, 1]];\n      }\n      if (codes[0][0] === 'equal') {\n        _ref = codes[0], tag = _ref[0], i1 = _ref[1], i2 = _ref[2], j1 = _ref[3], j2 = _ref[4];\n        codes[0] = [tag, max(i1, i2 - n), i2, max(j1, j2 - n), j2];\n      }\n      if (codes[codes.length - 1][0] === 'equal') {\n        _ref1 = codes[codes.length - 1], tag = _ref1[0], i1 = _ref1[1], i2 = _ref1[2], j1 = _ref1[3], j2 = _ref1[4];\n        codes[codes.length - 1] = [tag, i1, min(i2, i1 + n), j1, min(j2, j1 + n)];\n      }\n      nn = n + n;\n      groups = [];\n      group = [];\n      for (_i = 0, _len = codes.length; _i < _len; _i++) {\n        _ref2 = codes[_i], tag = _ref2[0], i1 = _ref2[1], i2 = _ref2[2], j1 = _ref2[3], j2 = _ref2[4];\n        if (tag === 'equal' && i2 - i1 > nn) {\n          group.push([tag, i1, min(i2, i1 + n), j1, min(j2, j1 + n)]);\n          groups.push(group);\n          group = [];\n          _ref3 = [max(i1, i2 - n), max(j1, j2 - n)], i1 = _ref3[0], j1 = _ref3[1];\n        }\n        group.push([tag, i1, i2, j1, j2]);\n      }\n      if (group.length && !(group.length === 1 && group[0][0] === 'equal')) {\n        groups.push(group);\n      }\n      return groups;\n    };\n\n    SequenceMatcher.prototype.ratio = function() {\n      /*\n          Return a measure of the sequences' similarity (float in [0,1]).\n      \n          Where T is the total number of elements in both sequences, and\n          M is the number of matches, this is 2.0*M / T.\n          Note that this is 1 if the sequences are identical, and 0 if\n          they have nothing in common.\n      \n          .ratio() is expensive to compute if you haven't already computed\n          .getMatchingBlocks() or .getOpcodes(), in which case you may\n          want to try .quickRatio() or .realQuickRatio() first to get an\n          upper bound.\n          \n          >>> s = new SequenceMatcher(null, 'abcd', 'bcde')\n          >>> s.ratio()\n          0.75\n          >>> s.quickRatio()\n          0.75\n          >>> s.realQuickRatio()\n          1.0\n      */\n\n      var match, matches, _i, _len, _ref;\n      matches = 0;\n      _ref = this.getMatchingBlocks();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        match = _ref[_i];\n        matches += match[2];\n      }\n      return _calculateRatio(matches, this.a.length + this.b.length);\n    };\n\n    SequenceMatcher.prototype.quickRatio = function() {\n      /*\n          Return an upper bound on ratio() relatively quickly.\n      \n          This isn't defined beyond that it is an upper bound on .ratio(), and\n          is faster to compute.\n      */\n\n      var avail, elt, fullbcount, matches, numb, _i, _j, _len, _len1, _ref, _ref1;\n      if (!this.fullbcount) {\n        this.fullbcount = fullbcount = {};\n        _ref = this.b;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          elt = _ref[_i];\n          fullbcount[elt] = (fullbcount[elt] || 0) + 1;\n        }\n      }\n      fullbcount = this.fullbcount;\n      avail = {};\n      matches = 0;\n      _ref1 = this.a;\n      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n        elt = _ref1[_j];\n        if (_has(avail, elt)) {\n          numb = avail[elt];\n        } else {\n          numb = fullbcount[elt] || 0;\n        }\n        avail[elt] = numb - 1;\n        if (numb > 0) {\n          matches++;\n        }\n      }\n      return _calculateRatio(matches, this.a.length + this.b.length);\n    };\n\n    SequenceMatcher.prototype.realQuickRatio = function() {\n      /*\n          Return an upper bound on ratio() very quickly.\n      \n          This isn't defined beyond that it is an upper bound on .ratio(), and\n          is faster to compute than either .ratio() or .quickRatio().\n      */\n\n      var la, lb, _ref;\n      _ref = [this.a.length, this.b.length], la = _ref[0], lb = _ref[1];\n      return _calculateRatio(min(la, lb), la + lb);\n    };\n\n    return SequenceMatcher;\n\n  })();\n\n  getCloseMatches = function(word, possibilities, n, cutoff) {\n    var result, s, score, x, _i, _j, _len, _len1, _ref, _results;\n    if (n == null) {\n      n = 3;\n    }\n    if (cutoff == null) {\n      cutoff = 0.6;\n    }\n    /*\n      Use SequenceMatcher to return list of the best \"good enough\" matches.\n    \n      word is a sequence for which close matches are desired (typically a\n      string).\n    \n      possibilities is a list of sequences against which to match word\n      (typically a list of strings).\n    \n      Optional arg n (default 3) is the maximum number of close matches to\n      return.  n must be > 0.\n    \n      Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n      that don't score at least that similar to word are ignored.\n    \n      The best (no more than n) matches among the possibilities are returned\n      in a list, sorted by similarity score, most similar first.\n    \n      >>> getCloseMatches('appel', ['ape', 'apple', 'peach', 'puppy'])\n      ['apple', 'ape']\n      >>> KEYWORDS = require('coffee-script').RESERVED\n      >>> getCloseMatches('wheel', KEYWORDS)\n      ['when', 'while']\n      >>> getCloseMatches('accost', KEYWORDS)\n      ['const']\n    */\n\n    if (!(n > 0)) {\n      throw new Error(\"n must be > 0: (\" + n + \")\");\n    }\n    if (!((0.0 <= cutoff && cutoff <= 1.0))) {\n      throw new Error(\"cutoff must be in [0.0, 1.0]: (\" + cutoff + \")\");\n    }\n    result = [];\n    s = new SequenceMatcher();\n    s.setSeq2(word);\n    for (_i = 0, _len = possibilities.length; _i < _len; _i++) {\n      x = possibilities[_i];\n      s.setSeq1(x);\n      if (s.realQuickRatio() >= cutoff && s.quickRatio() >= cutoff && s.ratio() >= cutoff) {\n        result.push([s.ratio(), x]);\n      }\n    }\n    result = Heap.nlargest(result, n, _arrayCmp);\n    _results = [];\n    for (_j = 0, _len1 = result.length; _j < _len1; _j++) {\n      _ref = result[_j], score = _ref[0], x = _ref[1];\n      _results.push(x);\n    }\n    return _results;\n  };\n\n  _countLeading = function(line, ch) {\n    /*\n      Return number of `ch` characters at the start of `line`.\n    \n      >>> _countLeading('   abc', ' ')\n      3\n    */\n\n    var i, n, _ref;\n    _ref = [0, line.length], i = _ref[0], n = _ref[1];\n    while (i < n && line[i] === ch) {\n      i++;\n    }\n    return i;\n  };\n\n  Differ = (function() {\n\n    Differ.name = 'Differ';\n\n    /*\n      Differ is a class for comparing sequences of lines of text, and\n      producing human-readable differences or deltas.  Differ uses\n      SequenceMatcher both to compare sequences of lines, and to compare\n      sequences of characters within similar (near-matching) lines.\n    \n      Each line of a Differ delta begins with a two-letter code:\n    \n          '- '    line unique to sequence 1\n          '+ '    line unique to sequence 2\n          '  '    line common to both sequences\n          '? '    line not present in either input sequence\n    \n      Lines beginning with '? ' attempt to guide the eye to intraline\n      differences, and were not present in either input sequence.  These lines\n      can be confusing if the sequences contain tab characters.\n    \n      Note that Differ makes no claim to produce a *minimal* diff.  To the\n      contrary, minimal diffs are often counter-intuitive, because they synch\n      up anywhere possible, sometimes accidental matches 100 pages apart.\n      Restricting synch points to contiguous matches preserves some notion of\n      locality, at the occasional cost of producing a longer diff.\n    \n      Example: Comparing two texts.\n    \n      >>> text1 = ['1. Beautiful is better than ugly.\\n',\n      ...   '2. Explicit is better than implicit.\\n',\n      ...   '3. Simple is better than complex.\\n',\n      ...   '4. Complex is better than complicated.\\n']\n      >>> text1.length\n      4\n      >>> text2 = ['1. Beautiful is better than ugly.\\n',\n      ...   '3.   Simple is better than complex.\\n',\n      ...   '4. Complicated is better than complex.\\n',\n      ...   '5. Flat is better than nested.\\n']\n    \n      Next we instantiate a Differ object:\n    \n      >>> d = new Differ()\n    \n      Note that when instantiating a Differ object we may pass functions to\n      filter out line and character 'junk'.\n    \n      Finally, we compare the two:\n    \n      >>> result = d.compare(text1, text2)\n      [ '  1. Beautiful is better than ugly.\\n',\n        '- 2. Explicit is better than implicit.\\n',\n        '- 3. Simple is better than complex.\\n',\n        '+ 3.   Simple is better than complex.\\n',\n        '?   ++\\n',\n        '- 4. Complex is better than complicated.\\n',\n        '?          ^                     ---- ^\\n',\n        '+ 4. Complicated is better than complex.\\n',\n        '?         ++++ ^                      ^\\n',\n        '+ 5. Flat is better than nested.\\n' ]\n    \n      Methods:\n    \n      constructor(linejunk=null, charjunk=null)\n          Construct a text differencer, with optional filters.\n      compare(a, b)\n          Compare two sequences of lines; generate the resulting delta.\n    */\n\n\n    function Differ(linejunk, charjunk) {\n      this.linejunk = linejunk;\n      this.charjunk = charjunk;\n      /*\n          Construct a text differencer, with optional filters.\n      \n          The two optional keyword parameters are for filter functions:\n      \n          - `linejunk`: A function that should accept a single string argument,\n            and return true iff the string is junk. The module-level function\n            `IS_LINE_JUNK` may be used to filter out lines without visible\n            characters, except for at most one splat ('#').  It is recommended\n            to leave linejunk null. \n      \n          - `charjunk`: A function that should accept a string of length 1. The\n            module-level function `IS_CHARACTER_JUNK` may be used to filter out\n            whitespace characters (a blank or tab; **note**: bad idea to include\n            newline in this!).  Use of IS_CHARACTER_JUNK is recommended.\n      */\n\n    }\n\n    Differ.prototype.compare = function(a, b) {\n      /*\n          Compare two sequences of lines; generate the resulting delta.\n      \n          Each sequence must contain individual single-line strings ending with\n          newlines. Such sequences can be obtained from the `readlines()` method\n          of file-like objects.  The delta generated also consists of newline-\n          terminated strings, ready to be printed as-is via the writeline()\n          method of a file-like object.\n      \n          Example:\n      \n          >>> d = new Differ\n          >>> d.compare(['one\\n', 'two\\n', 'three\\n'],\n          ...           ['ore\\n', 'tree\\n', 'emu\\n'])\n          [ '- one\\n',\n            '?  ^\\n',\n            '+ ore\\n',\n            '?  ^\\n',\n            '- two\\n',\n            '- three\\n',\n            '?  -\\n',\n            '+ tree\\n',\n            '+ emu\\n' ]\n      */\n\n      var ahi, alo, bhi, blo, cruncher, g, line, lines, tag, _i, _j, _len, _len1, _ref, _ref1;\n      cruncher = new SequenceMatcher(this.linejunk, a, b);\n      lines = [];\n      _ref = cruncher.getOpcodes();\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        _ref1 = _ref[_i], tag = _ref1[0], alo = _ref1[1], ahi = _ref1[2], blo = _ref1[3], bhi = _ref1[4];\n        switch (tag) {\n          case 'replace':\n            g = this._fancyReplace(a, alo, ahi, b, blo, bhi);\n            break;\n          case 'delete':\n            g = this._dump('-', a, alo, ahi);\n            break;\n          case 'insert':\n            g = this._dump('+', b, blo, bhi);\n            break;\n          case 'equal':\n            g = this._dump(' ', a, alo, ahi);\n            break;\n          default:\n            throw new Error(\"unknow tag (\" + tag + \")\");\n        }\n        for (_j = 0, _len1 = g.length; _j < _len1; _j++) {\n          line = g[_j];\n          lines.push(line);\n        }\n      }\n      return lines;\n    };\n\n    Differ.prototype._dump = function(tag, x, lo, hi) {\n      /*\n          Generate comparison results for a same-tagged range.\n      */\n\n      var i, _i, _results;\n      _results = [];\n      for (i = _i = lo; lo <= hi ? _i < hi : _i > hi; i = lo <= hi ? ++_i : --_i) {\n        _results.push(\"\" + tag + \" \" + x[i]);\n      }\n      return _results;\n    };\n\n    Differ.prototype._plainReplace = function(a, alo, ahi, b, blo, bhi) {\n      var first, g, line, lines, second, _i, _j, _len, _len1, _ref;\n      assert(alo < ahi && blo < bhi);\n      if (bhi - blo < ahi - alo) {\n        first = this._dump('+', b, blo, bhi);\n        second = this._dump('-', a, alo, ahi);\n      } else {\n        first = this._dump('-', a, alo, ahi);\n        second = this._dump('+', b, blo, bhi);\n      }\n      lines = [];\n      _ref = [first, second];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        g = _ref[_i];\n        for (_j = 0, _len1 = g.length; _j < _len1; _j++) {\n          line = g[_j];\n          lines.push(line);\n        }\n      }\n      return lines;\n    };\n\n    Differ.prototype._fancyReplace = function(a, alo, ahi, b, blo, bhi) {\n      /*\n          When replacing one block of lines with another, search the blocks\n          for *similar* lines; the best-matching pair (if any) is used as a\n          synch point, and intraline difference marking is done on the\n          similar pair. Lots of work, but often worth it.\n      \n          Example:\n          >>> d = new Differ\n          >>> d._fancyReplace(['abcDefghiJkl\\n'], 0, 1,\n          ...                 ['abcdefGhijkl\\n'], 0, 1)\n          [ '- abcDefghiJkl\\n',\n            '?    ^  ^  ^\\n',\n            '+ abcdefGhijkl\\n',\n            '?    ^  ^  ^\\n' ]\n      */\n\n      var aelt, ai, ai1, ai2, atags, belt, bestRatio, besti, bestj, bj, bj1, bj2, btags, cruncher, cutoff, eqi, eqj, i, j, la, lb, line, lines, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _o, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;\n      _ref = [0.74, 0.75], bestRatio = _ref[0], cutoff = _ref[1];\n      cruncher = new SequenceMatcher(this.charjunk);\n      _ref1 = [null, null], eqi = _ref1[0], eqj = _ref1[1];\n      lines = [];\n      for (j = _i = blo; blo <= bhi ? _i < bhi : _i > bhi; j = blo <= bhi ? ++_i : --_i) {\n        bj = b[j];\n        cruncher.setSeq2(bj);\n        for (i = _j = alo; alo <= ahi ? _j < ahi : _j > ahi; i = alo <= ahi ? ++_j : --_j) {\n          ai = a[i];\n          if (ai === bj) {\n            if (eqi === null) {\n              _ref2 = [i, j], eqi = _ref2[0], eqj = _ref2[1];\n            }\n            continue;\n          }\n          cruncher.setSeq1(ai);\n          if (cruncher.realQuickRatio() > bestRatio && cruncher.quickRatio() > bestRatio && cruncher.ratio() > bestRatio) {\n            _ref3 = [cruncher.ratio(), i, j], bestRatio = _ref3[0], besti = _ref3[1], bestj = _ref3[2];\n          }\n        }\n      }\n      if (bestRatio < cutoff) {\n        if (eqi === null) {\n          _ref4 = this._plainReplace(a, alo, ahi, b, blo, bhi);\n          for (_k = 0, _len = _ref4.length; _k < _len; _k++) {\n            line = _ref4[_k];\n            lines.push(line);\n          }\n          return lines;\n        }\n        _ref5 = [eqi, eqj, 1.0], besti = _ref5[0], bestj = _ref5[1], bestRatio = _ref5[2];\n      } else {\n        eqi = null;\n      }\n      _ref6 = this._fancyHelper(a, alo, besti, b, blo, bestj);\n      for (_l = 0, _len1 = _ref6.length; _l < _len1; _l++) {\n        line = _ref6[_l];\n        lines.push(line);\n      }\n      _ref7 = [a[besti], b[bestj]], aelt = _ref7[0], belt = _ref7[1];\n      if (eqi === null) {\n        atags = btags = '';\n        cruncher.setSeqs(aelt, belt);\n        _ref8 = cruncher.getOpcodes();\n        for (_m = 0, _len2 = _ref8.length; _m < _len2; _m++) {\n          _ref9 = _ref8[_m], tag = _ref9[0], ai1 = _ref9[1], ai2 = _ref9[2], bj1 = _ref9[3], bj2 = _ref9[4];\n          _ref10 = [ai2 - ai1, bj2 - bj1], la = _ref10[0], lb = _ref10[1];\n          switch (tag) {\n            case 'replace':\n              atags += Array(la + 1).join('^');\n              btags += Array(lb + 1).join('^');\n              break;\n            case 'delete':\n              atags += Array(la + 1).join('-');\n              break;\n            case 'insert':\n              btags += Array(lb + 1).join('+');\n              break;\n            case 'equal':\n              atags += Array(la + 1).join(' ');\n              btags += Array(lb + 1).join(' ');\n              break;\n            default:\n              throw new Error(\"unknow tag (\" + tag + \")\");\n          }\n        }\n        _ref11 = this._qformat(aelt, belt, atags, btags);\n        for (_n = 0, _len3 = _ref11.length; _n < _len3; _n++) {\n          line = _ref11[_n];\n          lines.push(line);\n        }\n      } else {\n        lines.push('  ' + aelt);\n      }\n      _ref12 = this._fancyHelper(a, besti + 1, ahi, b, bestj + 1, bhi);\n      for (_o = 0, _len4 = _ref12.length; _o < _len4; _o++) {\n        line = _ref12[_o];\n        lines.push(line);\n      }\n      return lines;\n    };\n\n    Differ.prototype._fancyHelper = function(a, alo, ahi, b, blo, bhi) {\n      var g;\n      g = [];\n      if (alo < ahi) {\n        if (blo < bhi) {\n          g = this._fancyReplace(a, alo, ahi, b, blo, bhi);\n        } else {\n          g = this._dump('-', a, alo, ahi);\n        }\n      } else if (blo < bhi) {\n        g = this._dump('+', b, blo, bhi);\n      }\n      return g;\n    };\n\n    Differ.prototype._qformat = function(aline, bline, atags, btags) {\n      /*\n          Format \"?\" output and deal with leading tabs.\n      \n          Example:\n      \n          >>> d = new Differ\n          >>> d._qformat('\\tabcDefghiJkl\\n', '\\tabcdefGhijkl\\n',\n          [ '- \\tabcDefghiJkl\\n',\n            '? \\t ^ ^  ^\\n',\n            '+ \\tabcdefGhijkl\\n',\n            '? \\t ^ ^  ^\\n' ]\n      */\n\n      var common, lines;\n      lines = [];\n      common = min(_countLeading(aline, '\\t'), _countLeading(bline, '\\t'));\n      common = min(common, _countLeading(atags.slice(0, common), ' '));\n      common = min(common, _countLeading(btags.slice(0, common), ' '));\n      atags = atags.slice(common).replace(/\\s+$/, '');\n      btags = btags.slice(common).replace(/\\s+$/, '');\n      lines.push('- ' + aline);\n      if (atags.length) {\n        lines.push(\"? \" + (Array(common + 1).join('\\t')) + atags + \"\\n\");\n      }\n      lines.push('+ ' + bline);\n      if (btags.length) {\n        lines.push(\"? \" + (Array(common + 1).join('\\t')) + btags + \"\\n\");\n      }\n      return lines;\n    };\n\n    return Differ;\n\n  })();\n\n  IS_LINE_JUNK = function(line, pat) {\n    if (pat == null) {\n      pat = /^\\s*#?\\s*$/;\n    }\n    /*\n      Return 1 for ignorable line: iff `line` is blank or contains a single '#'.\n        \n      Examples:\n    \n      >>> IS_LINE_JUNK('\\n')\n      true\n      >>> IS_LINE_JUNK('  #   \\n')\n      true\n      >>> IS_LINE_JUNK('hello\\n')\n      false\n    */\n\n    return pat.test(line);\n  };\n\n  IS_CHARACTER_JUNK = function(ch, ws) {\n    if (ws == null) {\n      ws = ' \\t';\n    }\n    /*\n      Return 1 for ignorable character: iff `ch` is a space or tab.\n    \n      Examples:\n      >>> IS_CHARACTER_JUNK(' ').should.be.true\n      true\n      >>> IS_CHARACTER_JUNK('\\t').should.be.true\n      true\n      >>> IS_CHARACTER_JUNK('\\n').should.be.false\n      false\n      >>> IS_CHARACTER_JUNK('x').should.be.false\n      false\n    */\n\n    return __indexOf.call(ws, ch) >= 0;\n  };\n\n  _formatRangeUnified = function(start, stop) {\n    /*\n      Convert range to the \"ed\" format'\n    */\n\n    var beginning, length;\n    beginning = start + 1;\n    length = stop - start;\n    if (length === 1) {\n      return \"\" + beginning;\n    }\n    if (!length) {\n      beginning--;\n    }\n    return \"\" + beginning + \",\" + length;\n  };\n\n  unifiedDiff = function(a, b, _arg) {\n    var file1Range, file2Range, first, fromdate, fromfile, fromfiledate, group, i1, i2, j1, j2, last, line, lines, lineterm, n, started, tag, todate, tofile, tofiledate, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;\n    _ref = _arg != null ? _arg : {}, fromfile = _ref.fromfile, tofile = _ref.tofile, fromfiledate = _ref.fromfiledate, tofiledate = _ref.tofiledate, n = _ref.n, lineterm = _ref.lineterm;\n    /*\n      Compare two sequences of lines; generate the delta as a unified diff.\n    \n      Unified diffs are a compact way of showing line changes and a few\n      lines of context.  The number of context lines is set by 'n' which\n      defaults to three.\n    \n      By default, the diff control lines (those with ---, +++, or @@) are\n      created with a trailing newline.  \n    \n      For inputs that do not have trailing newlines, set the lineterm\n      argument to \"\" so that the output will be uniformly newline free.\n    \n      The unidiff format normally has a header for filenames and modification\n      times.  Any or all of these may be specified using strings for\n      'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n      The modification times are normally expressed in the ISO 8601 format.\n    \n      Example:\n    \n      >>> unifiedDiff('one two three four'.split(' '),\n      ...             'zero one tree four'.split(' '), {\n      ...               fromfile: 'Original'\n      ...               tofile: 'Current',\n      ...               fromfiledate: '2005-01-26 23:30:50',\n      ...               tofiledate: '2010-04-02 10:20:52',\n      ...               lineterm: ''\n      ...             })\n      [ '--- Original\\t2005-01-26 23:30:50',\n        '+++ Current\\t2010-04-02 10:20:52',\n        '@@ -1,4 +1,4 @@',\n        '+zero',\n        ' one',\n        '-two',\n        '-three',\n        '+tree',\n        ' four' ]\n    */\n\n    if (fromfile == null) {\n      fromfile = '';\n    }\n    if (tofile == null) {\n      tofile = '';\n    }\n    if (fromfiledate == null) {\n      fromfiledate = '';\n    }\n    if (tofiledate == null) {\n      tofiledate = '';\n    }\n    if (n == null) {\n      n = 3;\n    }\n    if (lineterm == null) {\n      lineterm = '\\n';\n    }\n    lines = [];\n    started = false;\n    _ref1 = (new SequenceMatcher(null, a, b)).getGroupedOpcodes();\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      group = _ref1[_i];\n      if (!started) {\n        started = true;\n        fromdate = fromfiledate ? \"\\t\" + fromfiledate : '';\n        todate = tofiledate ? \"\\t\" + tofiledate : '';\n        lines.push(\"--- \" + fromfile + fromdate + lineterm);\n        lines.push(\"+++ \" + tofile + todate + lineterm);\n      }\n      _ref2 = [group[0], group[group.length - 1]], first = _ref2[0], last = _ref2[1];\n      file1Range = _formatRangeUnified(first[1], last[2]);\n      file2Range = _formatRangeUnified(first[3], last[4]);\n      lines.push(\"@@ -\" + file1Range + \" +\" + file2Range + \" @@\" + lineterm);\n      for (_j = 0, _len1 = group.length; _j < _len1; _j++) {\n        _ref3 = group[_j], tag = _ref3[0], i1 = _ref3[1], i2 = _ref3[2], j1 = _ref3[3], j2 = _ref3[4];\n        if (tag === 'equal') {\n          _ref4 = a.slice(i1, i2);\n          for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {\n            line = _ref4[_k];\n            lines.push(' ' + line);\n          }\n          continue;\n        }\n        if (tag === 'replace' || tag === 'delete') {\n          _ref5 = a.slice(i1, i2);\n          for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {\n            line = _ref5[_l];\n            lines.push('-' + line);\n          }\n        }\n        if (tag === 'replace' || tag === 'insert') {\n          _ref6 = b.slice(j1, j2);\n          for (_m = 0, _len4 = _ref6.length; _m < _len4; _m++) {\n            line = _ref6[_m];\n            lines.push('+' + line);\n          }\n        }\n      }\n    }\n    return lines;\n  };\n\n  _formatRangeContext = function(start, stop) {\n    /*\n      Convert range to the \"ed\" format'\n    */\n\n    var beginning, length;\n    beginning = start + 1;\n    length = stop - start;\n    if (!length) {\n      beginning--;\n    }\n    if (length <= 1) {\n      return \"\" + beginning;\n    }\n    return \"\" + beginning + \",\" + (beginning + length - 1);\n  };\n\n  contextDiff = function(a, b, _arg) {\n    var file1Range, file2Range, first, fromdate, fromfile, fromfiledate, group, i1, i2, j1, j2, last, line, lines, lineterm, n, prefix, started, tag, todate, tofile, tofiledate, _, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;\n    _ref = _arg != null ? _arg : {}, fromfile = _ref.fromfile, tofile = _ref.tofile, fromfiledate = _ref.fromfiledate, tofiledate = _ref.tofiledate, n = _ref.n, lineterm = _ref.lineterm;\n    /*\n      Compare two sequences of lines; generate the delta as a context diff.\n    \n      Context diffs are a compact way of showing line changes and a few\n      lines of context.  The number of context lines is set by 'n' which\n      defaults to three.\n    \n      By default, the diff control lines (those with *** or ---) are\n      created with a trailing newline.  This is helpful so that inputs\n      created from file.readlines() result in diffs that are suitable for\n      file.writelines() since both the inputs and outputs have trailing\n      newlines.\n    \n      For inputs that do not have trailing newlines, set the lineterm\n      argument to \"\" so that the output will be uniformly newline free.\n    \n      The context diff format normally has a header for filenames and\n      modification times.  Any or all of these may be specified using\n      strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n      The modification times are normally expressed in the ISO 8601 format.\n      If not specified, the strings default to blanks.\n    \n      Example:\n      >>> a = ['one\\n', 'two\\n', 'three\\n', 'four\\n']\n      >>> b = ['zero\\n', 'one\\n', 'tree\\n', 'four\\n']\n      >>> contextDiff(a, b, {fromfile: 'Original', tofile: 'Current'})\n      [ '*** Original\\n',\n        '--- Current\\n',\n        '***************\\n',\n        '*** 1,4 ****\\n',\n        '  one\\n',\n        '! two\\n',\n        '! three\\n',\n        '  four\\n',\n        '--- 1,4 ----\\n',\n        '+ zero\\n',\n        '  one\\n',\n        '! tree\\n',\n        '  four\\n' ]\n    */\n\n    if (fromfile == null) {\n      fromfile = '';\n    }\n    if (tofile == null) {\n      tofile = '';\n    }\n    if (fromfiledate == null) {\n      fromfiledate = '';\n    }\n    if (tofiledate == null) {\n      tofiledate = '';\n    }\n    if (n == null) {\n      n = 3;\n    }\n    if (lineterm == null) {\n      lineterm = '\\n';\n    }\n    prefix = {\n      insert: '+ ',\n      \"delete\": '- ',\n      replace: '! ',\n      equal: '  '\n    };\n    started = false;\n    lines = [];\n    _ref1 = (new SequenceMatcher(null, a, b)).getGroupedOpcodes();\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      group = _ref1[_i];\n      if (!started) {\n        started = true;\n        fromdate = fromfiledate ? \"\\t\" + fromfiledate : '';\n        todate = tofiledate ? \"\\t\" + tofiledate : '';\n        lines.push(\"*** \" + fromfile + fromdate + lineterm);\n        lines.push(\"--- \" + tofile + todate + lineterm);\n        _ref2 = [group[0], group[group.length - 1]], first = _ref2[0], last = _ref2[1];\n        lines.push('***************' + lineterm);\n        file1Range = _formatRangeContext(first[1], last[2]);\n        lines.push(\"*** \" + file1Range + \" ****\" + lineterm);\n        if (_any((function() {\n          var _j, _len1, _ref3, _results;\n          _results = [];\n          for (_j = 0, _len1 = group.length; _j < _len1; _j++) {\n            _ref3 = group[_j], tag = _ref3[0], _ = _ref3[1], _ = _ref3[2], _ = _ref3[3], _ = _ref3[4];\n            _results.push(tag === 'replace' || tag === 'delete');\n          }\n          return _results;\n        })())) {\n          for (_j = 0, _len1 = group.length; _j < _len1; _j++) {\n            _ref3 = group[_j], tag = _ref3[0], i1 = _ref3[1], i2 = _ref3[2], _ = _ref3[3], _ = _ref3[4];\n            if (tag !== 'insert') {\n              _ref4 = a.slice(i1, i2);\n              for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {\n                line = _ref4[_k];\n                lines.push(prefix[tag] + line);\n              }\n            }\n          }\n        }\n        file2Range = _formatRangeContext(first[3], last[4]);\n        lines.push(\"--- \" + file2Range + \" ----\" + lineterm);\n        if (_any((function() {\n          var _l, _len3, _ref5, _results;\n          _results = [];\n          for (_l = 0, _len3 = group.length; _l < _len3; _l++) {\n            _ref5 = group[_l], tag = _ref5[0], _ = _ref5[1], _ = _ref5[2], _ = _ref5[3], _ = _ref5[4];\n            _results.push(tag === 'replace' || tag === 'insert');\n          }\n          return _results;\n        })())) {\n          for (_l = 0, _len3 = group.length; _l < _len3; _l++) {\n            _ref5 = group[_l], tag = _ref5[0], _ = _ref5[1], _ = _ref5[2], j1 = _ref5[3], j2 = _ref5[4];\n            if (tag !== 'delete') {\n              _ref6 = b.slice(j1, j2);\n              for (_m = 0, _len4 = _ref6.length; _m < _len4; _m++) {\n                line = _ref6[_m];\n                lines.push(prefix[tag] + line);\n              }\n            }\n          }\n        }\n      }\n    }\n    return lines;\n  };\n\n  ndiff = function(a, b, linejunk, charjunk) {\n    if (charjunk == null) {\n      charjunk = IS_CHARACTER_JUNK;\n    }\n    /*\n      Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n    \n      Optional keyword parameters `linejunk` and `charjunk` are for filter\n      functions (or None):\n    \n      - linejunk: A function that should accept a single string argument, and\n        return true iff the string is junk.  The default is null, and is\n        recommended; \n    \n      - charjunk: A function that should accept a string of length 1. The\n        default is module-level function IS_CHARACTER_JUNK, which filters out\n        whitespace characters (a blank or tab; note: bad idea to include newline\n        in this!).\n    \n      Example:\n      >>> a = ['one\\n', 'two\\n', 'three\\n']\n      >>> b = ['ore\\n', 'tree\\n', 'emu\\n']\n      >>> ndiff(a, b)\n      [ '- one\\n',\n        '?  ^\\n',\n        '+ ore\\n',\n        '?  ^\\n',\n        '- two\\n',\n        '- three\\n',\n        '?  -\\n',\n        '+ tree\\n',\n        '+ emu\\n' ]\n    */\n\n    return (new Differ(linejunk, charjunk)).compare(a, b);\n  };\n\n  restore = function(delta, which) {\n    /*\n      Generate one of the two sequences that generated a delta.\n    \n      Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n      lines originating from file 1 or 2 (parameter `which`), stripping off line\n      prefixes.\n    \n      Examples:\n      >>> a = ['one\\n', 'two\\n', 'three\\n']\n      >>> b = ['ore\\n', 'tree\\n', 'emu\\n']\n      >>> diff = ndiff(a, b)\n      >>> restore(diff, 1)\n      [ 'one\\n',\n        'two\\n',\n        'three\\n' ]\n      >>> restore(diff, 2)\n      [ 'ore\\n',\n        'tree\\n',\n        'emu\\n' ]\n    */\n\n    var line, lines, prefixes, tag, _i, _len, _ref;\n    tag = {\n      1: '- ',\n      2: '+ '\n    }[which];\n    if (!tag) {\n      throw new Error(\"unknow delta choice (must be 1 or 2): \" + which);\n    }\n    prefixes = ['  ', tag];\n    lines = [];\n    for (_i = 0, _len = delta.length; _i < _len; _i++) {\n      line = delta[_i];\n      if (_ref = line.slice(0, 2), __indexOf.call(prefixes, _ref) >= 0) {\n        lines.push(line.slice(2));\n      }\n    }\n    return lines;\n  };\n\n  exports._arrayCmp = _arrayCmp;\n\n  exports.SequenceMatcher = SequenceMatcher;\n\n  exports.getCloseMatches = getCloseMatches;\n\n  exports._countLeading = _countLeading;\n\n  exports.Differ = Differ;\n\n  exports.IS_LINE_JUNK = IS_LINE_JUNK;\n\n  exports.IS_CHARACTER_JUNK = IS_CHARACTER_JUNK;\n\n  exports._formatRangeUnified = _formatRangeUnified;\n\n  exports.unifiedDiff = unifiedDiff;\n\n  exports._formatRangeContext = _formatRangeContext;\n\n  exports.contextDiff = contextDiff;\n\n  exports.ndiff = ndiff;\n\n  exports.restore = restore;\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/difflib/lib/difflib.js\n");

/***/ })

};
;