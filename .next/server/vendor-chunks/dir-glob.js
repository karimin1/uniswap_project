"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dir-glob";
exports.ids = ["vendor-chunks/dir-glob"];
exports.modules = {

/***/ "(ssr)/./node_modules/dir-glob/index.js":
/*!****************************************!*\
  !*** ./node_modules/dir-glob/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst pathType = __webpack_require__(/*! path-type */ \"(ssr)/./node_modules/path-type/index.js\");\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = (filepath, cwd) => {\n\tconst pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n\treturn path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nconst addExtensions = (file, extensions) => {\n\tif (path.extname(file)) {\n\t\treturn `**/${file}`;\n\t}\n\n\treturn `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (directory, options) => {\n\tif (options.files && !Array.isArray(options.files)) {\n\t\tthrow new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n\t}\n\n\tif (options.extensions && !Array.isArray(options.extensions)) {\n\t\tthrow new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n\t}\n\n\tif (options.files && options.extensions) {\n\t\treturn options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n\t}\n\n\tif (options.files) {\n\t\treturn options.files.map(x => path.posix.join(directory, `**/${x}`));\n\t}\n\n\tif (options.extensions) {\n\t\treturn [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n\t}\n\n\treturn [path.posix.join(directory, '**')];\n};\n\nmodule.exports = async (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = await Promise.all([].concat(input).map(async x => {\n\t\tconst isDirectory = await pathType.isDirectory(getPath(x, options.cwd));\n\t\treturn isDirectory ? getGlob(x, options) : x;\n\t}));\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n\nmodule.exports.sync = (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGlyLWdsb2IvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsaUJBQWlCLG1CQUFPLENBQUMsMERBQVc7O0FBRXBDLDhEQUE4RCxFQUFFLHNCQUFzQjs7QUFFdEY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsS0FBSztBQUNwQjs7QUFFQSxjQUFjLEtBQUssR0FBRywwQkFBMEI7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBLHdGQUF3RixxQkFBcUI7QUFDN0c7O0FBRUE7QUFDQSw2RkFBNkYsMEJBQTBCO0FBQ3ZIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlFQUFpRSxFQUFFO0FBQ25FOztBQUVBO0FBQ0EsNkNBQTZDLGtDQUFrQztBQUMvRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1RkFBdUYsbUJBQW1CO0FBQzFHOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUYsb0NBQW9DO0FBQ3BDOztBQUVBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVGQUF1RixtQkFBbUI7QUFDMUc7O0FBRUE7O0FBRUEsb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9kaXItZ2xvYi9pbmRleC5qcz80ZjZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBwYXRoVHlwZSA9IHJlcXVpcmUoJ3BhdGgtdHlwZScpO1xuXG5jb25zdCBnZXRFeHRlbnNpb25zID0gZXh0ZW5zaW9ucyA9PiBleHRlbnNpb25zLmxlbmd0aCA+IDEgPyBgeyR7ZXh0ZW5zaW9ucy5qb2luKCcsJyl9fWAgOiBleHRlbnNpb25zWzBdO1xuXG5jb25zdCBnZXRQYXRoID0gKGZpbGVwYXRoLCBjd2QpID0+IHtcblx0Y29uc3QgcHRoID0gZmlsZXBhdGhbMF0gPT09ICchJyA/IGZpbGVwYXRoLnNsaWNlKDEpIDogZmlsZXBhdGg7XG5cdHJldHVybiBwYXRoLmlzQWJzb2x1dGUocHRoKSA/IHB0aCA6IHBhdGguam9pbihjd2QsIHB0aCk7XG59O1xuXG5jb25zdCBhZGRFeHRlbnNpb25zID0gKGZpbGUsIGV4dGVuc2lvbnMpID0+IHtcblx0aWYgKHBhdGguZXh0bmFtZShmaWxlKSkge1xuXHRcdHJldHVybiBgKiovJHtmaWxlfWA7XG5cdH1cblxuXHRyZXR1cm4gYCoqLyR7ZmlsZX0uJHtnZXRFeHRlbnNpb25zKGV4dGVuc2lvbnMpfWA7XG59O1xuXG5jb25zdCBnZXRHbG9iID0gKGRpcmVjdG9yeSwgb3B0aW9ucykgPT4ge1xuXHRpZiAob3B0aW9ucy5maWxlcyAmJiAhQXJyYXkuaXNBcnJheShvcHRpb25zLmZpbGVzKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGZpbGVzXFxgIHRvIGJlIG9mIHR5cGUgXFxgQXJyYXlcXGAgYnV0IHJlY2VpdmVkIHR5cGUgXFxgJHt0eXBlb2Ygb3B0aW9ucy5maWxlc31cXGBgKTtcblx0fVxuXG5cdGlmIChvcHRpb25zLmV4dGVuc2lvbnMgJiYgIUFycmF5LmlzQXJyYXkob3B0aW9ucy5leHRlbnNpb25zKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGV4dGVuc2lvbnNcXGAgdG8gYmUgb2YgdHlwZSBcXGBBcnJheVxcYCBidXQgcmVjZWl2ZWQgdHlwZSBcXGAke3R5cGVvZiBvcHRpb25zLmV4dGVuc2lvbnN9XFxgYCk7XG5cdH1cblxuXHRpZiAob3B0aW9ucy5maWxlcyAmJiBvcHRpb25zLmV4dGVuc2lvbnMpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5maWxlcy5tYXAoeCA9PiBwYXRoLnBvc2l4LmpvaW4oZGlyZWN0b3J5LCBhZGRFeHRlbnNpb25zKHgsIG9wdGlvbnMuZXh0ZW5zaW9ucykpKTtcblx0fVxuXG5cdGlmIChvcHRpb25zLmZpbGVzKSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuZmlsZXMubWFwKHggPT4gcGF0aC5wb3NpeC5qb2luKGRpcmVjdG9yeSwgYCoqLyR7eH1gKSk7XG5cdH1cblxuXHRpZiAob3B0aW9ucy5leHRlbnNpb25zKSB7XG5cdFx0cmV0dXJuIFtwYXRoLnBvc2l4LmpvaW4oZGlyZWN0b3J5LCBgKiovKi4ke2dldEV4dGVuc2lvbnMob3B0aW9ucy5leHRlbnNpb25zKX1gKV07XG5cdH1cblxuXHRyZXR1cm4gW3BhdGgucG9zaXguam9pbihkaXJlY3RvcnksICcqKicpXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGlucHV0LCBvcHRpb25zKSA9PiB7XG5cdG9wdGlvbnMgPSB7XG5cdFx0Y3dkOiBwcm9jZXNzLmN3ZCgpLFxuXHRcdC4uLm9wdGlvbnNcblx0fTtcblxuXHRpZiAodHlwZW9mIG9wdGlvbnMuY3dkICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIFxcYGN3ZFxcYCB0byBiZSBvZiB0eXBlIFxcYHN0cmluZ1xcYCBidXQgcmVjZWl2ZWQgdHlwZSBcXGAke3R5cGVvZiBvcHRpb25zLmN3ZH1cXGBgKTtcblx0fVxuXG5cdGNvbnN0IGdsb2JzID0gYXdhaXQgUHJvbWlzZS5hbGwoW10uY29uY2F0KGlucHV0KS5tYXAoYXN5bmMgeCA9PiB7XG5cdFx0Y29uc3QgaXNEaXJlY3RvcnkgPSBhd2FpdCBwYXRoVHlwZS5pc0RpcmVjdG9yeShnZXRQYXRoKHgsIG9wdGlvbnMuY3dkKSk7XG5cdFx0cmV0dXJuIGlzRGlyZWN0b3J5ID8gZ2V0R2xvYih4LCBvcHRpb25zKSA6IHg7XG5cdH0pKTtcblxuXHRyZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBnbG9icyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXNwcmVhZFxufTtcblxubW9kdWxlLmV4cG9ydHMuc3luYyA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRvcHRpb25zID0ge1xuXHRcdGN3ZDogcHJvY2Vzcy5jd2QoKSxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0aWYgKHR5cGVvZiBvcHRpb25zLmN3ZCAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBcXGBjd2RcXGAgdG8gYmUgb2YgdHlwZSBcXGBzdHJpbmdcXGAgYnV0IHJlY2VpdmVkIHR5cGUgXFxgJHt0eXBlb2Ygb3B0aW9ucy5jd2R9XFxgYCk7XG5cdH1cblxuXHRjb25zdCBnbG9icyA9IFtdLmNvbmNhdChpbnB1dCkubWFwKHggPT4gcGF0aFR5cGUuaXNEaXJlY3RvcnlTeW5jKGdldFBhdGgoeCwgb3B0aW9ucy5jd2QpKSA/IGdldEdsb2IoeCwgb3B0aW9ucykgOiB4KTtcblxuXHRyZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBnbG9icyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXNwcmVhZFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dir-glob/index.js\n");

/***/ })

};
;