/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hardhat";
exports.ids = ["vendor-chunks/hardhat"];
exports.modules = {

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/check.js":
/*!*****************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/check.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\n(0, config_env_1.task)(task_names_1.TASK_CHECK, \"Check whatever you need\", async () => { });\n//# sourceMappingURL=check.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL2NoZWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixtQkFBTyxDQUFDLDJHQUFvQztBQUNqRSxxQkFBcUIsbUJBQU8sQ0FBQyw4RUFBYztBQUMzQywwRkFBMEY7QUFDMUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvYnVpbHRpbi10YXNrcy9jaGVjay5qcz8xYzdhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29uZmlnX2Vudl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvcmUvY29uZmlnL2NvbmZpZy1lbnZcIik7XG5jb25zdCB0YXNrX25hbWVzXzEgPSByZXF1aXJlKFwiLi90YXNrLW5hbWVzXCIpO1xuKDAsIGNvbmZpZ19lbnZfMS50YXNrKSh0YXNrX25hbWVzXzEuVEFTS19DSEVDSywgXCJDaGVjayB3aGF0ZXZlciB5b3UgbmVlZFwiLCBhc3luYyAoKSA9PiB7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2suanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/check.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/clean.js":
/*!*****************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/clean.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst global_dir_1 = __webpack_require__(/*! ../internal/util/global-dir */ \"(ssr)/./node_modules/hardhat/internal/util/global-dir.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\n(0, config_env_1.subtask)(task_names_1.TASK_CLEAN_GLOBAL, async () => {\n    const globalCacheDir = await (0, global_dir_1.getCacheDir)();\n    await fs_extra_1.default.emptyDir(globalCacheDir);\n});\n(0, config_env_1.task)(task_names_1.TASK_CLEAN, \"Clears the cache and deletes all artifacts\")\n    .addFlag(\"global\", \"Clear the global cache\")\n    .setAction(async ({ global }, { config, run, artifacts }) => {\n    if (global) {\n        return run(task_names_1.TASK_CLEAN_GLOBAL);\n    }\n    await fs_extra_1.default.emptyDir(config.paths.cache);\n    await fs_extra_1.default.remove(config.paths.artifacts);\n    artifacts.clearCache?.();\n});\n//# sourceMappingURL=clean.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL2NsZWFuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DLG1CQUFPLENBQUMsNERBQVU7QUFDckQscUJBQXFCLG1CQUFPLENBQUMsMkdBQW9DO0FBQ2pFLHFCQUFxQixtQkFBTyxDQUFDLDZGQUE2QjtBQUMxRCxxQkFBcUIsbUJBQU8sQ0FBQyw4RUFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLHdCQUF3QixRQUFRLElBQUksd0JBQXdCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL2NsZWFuLmpzP2I3YjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmc19leHRyYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmcy1leHRyYVwiKSk7XG5jb25zdCBjb25maWdfZW52XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9jb25maWcvY29uZmlnLWVudlwiKTtcbmNvbnN0IGdsb2JhbF9kaXJfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC91dGlsL2dsb2JhbC1kaXJcIik7XG5jb25zdCB0YXNrX25hbWVzXzEgPSByZXF1aXJlKFwiLi90YXNrLW5hbWVzXCIpO1xuKDAsIGNvbmZpZ19lbnZfMS5zdWJ0YXNrKSh0YXNrX25hbWVzXzEuVEFTS19DTEVBTl9HTE9CQUwsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBnbG9iYWxDYWNoZURpciA9IGF3YWl0ICgwLCBnbG9iYWxfZGlyXzEuZ2V0Q2FjaGVEaXIpKCk7XG4gICAgYXdhaXQgZnNfZXh0cmFfMS5kZWZhdWx0LmVtcHR5RGlyKGdsb2JhbENhY2hlRGlyKTtcbn0pO1xuKDAsIGNvbmZpZ19lbnZfMS50YXNrKSh0YXNrX25hbWVzXzEuVEFTS19DTEVBTiwgXCJDbGVhcnMgdGhlIGNhY2hlIGFuZCBkZWxldGVzIGFsbCBhcnRpZmFjdHNcIilcbiAgICAuYWRkRmxhZyhcImdsb2JhbFwiLCBcIkNsZWFyIHRoZSBnbG9iYWwgY2FjaGVcIilcbiAgICAuc2V0QWN0aW9uKGFzeW5jICh7IGdsb2JhbCB9LCB7IGNvbmZpZywgcnVuLCBhcnRpZmFjdHMgfSkgPT4ge1xuICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgcmV0dXJuIHJ1bih0YXNrX25hbWVzXzEuVEFTS19DTEVBTl9HTE9CQUwpO1xuICAgIH1cbiAgICBhd2FpdCBmc19leHRyYV8xLmRlZmF1bHQuZW1wdHlEaXIoY29uZmlnLnBhdGhzLmNhY2hlKTtcbiAgICBhd2FpdCBmc19leHRyYV8xLmRlZmF1bHQucmVtb3ZlKGNvbmZpZy5wYXRocy5hcnRpZmFjdHMpO1xuICAgIGFydGlmYWN0cy5jbGVhckNhY2hlPy4oKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xlYW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/clean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/compile.js":
/*!*******************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/compile.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst semver_1 = __importDefault(__webpack_require__(/*! semver */ \"(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\"));\nconst aggregate_error_1 = __importDefault(__webpack_require__(/*! aggregate-error */ \"(ssr)/./node_modules/aggregate-error/index.js\"));\nconst artifacts_1 = __webpack_require__(/*! ../internal/artifacts */ \"(ssr)/./node_modules/hardhat/internal/artifacts.js\");\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst compilation_job_1 = __webpack_require__(/*! ../internal/solidity/compilation-job */ \"(ssr)/./node_modules/hardhat/internal/solidity/compilation-job.js\");\nconst compiler_1 = __webpack_require__(/*! ../internal/solidity/compiler */ \"(ssr)/./node_modules/hardhat/internal/solidity/compiler/index.js\");\nconst compiler_input_1 = __webpack_require__(/*! ../internal/solidity/compiler/compiler-input */ \"(ssr)/./node_modules/hardhat/internal/solidity/compiler/compiler-input.js\");\nconst downloader_1 = __webpack_require__(/*! ../internal/solidity/compiler/downloader */ \"(ssr)/./node_modules/hardhat/internal/solidity/compiler/downloader.js\");\nconst dependencyGraph_1 = __webpack_require__(/*! ../internal/solidity/dependencyGraph */ \"(ssr)/./node_modules/hardhat/internal/solidity/dependencyGraph.js\");\nconst parse_1 = __webpack_require__(/*! ../internal/solidity/parse */ \"(ssr)/./node_modules/hardhat/internal/solidity/parse.js\");\nconst resolver_1 = __webpack_require__(/*! ../internal/solidity/resolver */ \"(ssr)/./node_modules/hardhat/internal/solidity/resolver.js\");\nconst global_dir_1 = __webpack_require__(/*! ../internal/util/global-dir */ \"(ssr)/./node_modules/hardhat/internal/util/global-dir.js\");\nconst strings_1 = __webpack_require__(/*! ../internal/util/strings */ \"(ssr)/./node_modules/hardhat/internal/util/strings.js\");\nconst builtin_tasks_1 = __webpack_require__(/*! ../types/builtin-tasks */ \"(ssr)/./node_modules/hardhat/types/builtin-tasks/index.js\");\nconst contract_names_1 = __webpack_require__(/*! ../utils/contract-names */ \"(ssr)/./node_modules/hardhat/utils/contract-names.js\");\nconst source_names_1 = __webpack_require__(/*! ../utils/source-names */ \"(ssr)/./node_modules/hardhat/utils/source-names.js\");\nconst fs_utils_1 = __webpack_require__(/*! ../internal/util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\nconst solc_info_1 = __webpack_require__(/*! ../internal/solidity/compiler/solc-info */ \"(ssr)/./node_modules/hardhat/internal/solidity/compiler/solc-info.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\nconst solidity_files_cache_1 = __webpack_require__(/*! ./utils/solidity-files-cache */ \"(ssr)/./node_modules/hardhat/builtin-tasks/utils/solidity-files-cache.js\");\nfunction isConsoleLogError(error) {\n    const message = error.message;\n    return (error.type === \"TypeError\" &&\n        typeof message === \"string\" &&\n        message.includes(\"log\") &&\n        message.includes(\"type(library console)\"));\n}\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:compile\");\nconst COMPILE_TASK_FIRST_SOLC_VERSION_SUPPORTED = \"0.4.11\";\nconst DEFAULT_CONCURRENCY_LEVEL = Math.max(os_1.default.cpus().length - 1, 1);\n/**\n * Returns a list of absolute paths to all the solidity files in the project.\n * This list doesn't include dependencies, for example solidity files inside\n * node_modules.\n *\n * This is the right task to override to change how the solidity files of the\n * project are obtained.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS)\n    .addOptionalParam(\"sourcePath\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({ sourcePath }, { config }) => {\n    return (0, fs_utils_1.getAllFilesMatching)(sourcePath ?? config.paths.sources, (f) => f.endsWith(\".sol\"));\n});\n/**\n * Receives a list of absolute paths and returns a list of source names\n * corresponding to each path. For example, receives\n * [\"/home/user/project/contracts/Foo.sol\"] and returns\n * [\"contracts/Foo.sol\"]. These source names will be used when the solc input\n * is generated.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_NAMES)\n    .addOptionalParam(\"rootPath\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"sourcePaths\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ rootPath, sourcePaths, }, { config }) => {\n    return Promise.all(sourcePaths.map((p) => (0, source_names_1.localPathToSourceName)(rootPath ?? config.paths.root, p)));\n});\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_READ_FILE)\n    .addParam(\"absolutePath\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({ absolutePath }) => {\n    try {\n        return await fs_extra_1.default.readFile(absolutePath, {\n            encoding: \"utf8\",\n        });\n    }\n    catch (e) {\n        if (fs_extra_1.default.lstatSync(absolutePath).isDirectory()) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_READ_OF_DIRECTORY, {\n                absolutePath,\n            });\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw e;\n    }\n});\n/**\n * DEPRECATED: This subtask is deprecated and will be removed in the future.\n *\n * This task transform the string literal in an import directive.\n * By default it does nothing, but it can be overriden by plugins.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_TRANSFORM_IMPORT_NAME)\n    .addParam(\"importName\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({ importName }) => {\n    return importName;\n});\n/**\n * This task returns a Record<string, string> representing remappings to be used\n * by the resolver.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_GET_REMAPPINGS).setAction(async () => {\n    return {};\n});\n/**\n * Receives a list of source names and returns a dependency graph. This task\n * is responsible for both resolving dependencies (like getting files from\n * node_modules) and generating the graph.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_DEPENDENCY_GRAPH)\n    .addOptionalParam(\"rootPath\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"sourceNames\", undefined, undefined, config_env_1.types.any)\n    .addOptionalParam(\"solidityFilesCache\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ rootPath, sourceNames, solidityFilesCache, }, { config, run }) => {\n    const parser = new parse_1.Parser(solidityFilesCache);\n    const remappings = await run(task_names_1.TASK_COMPILE_GET_REMAPPINGS);\n    const resolver = new resolver_1.Resolver(rootPath ?? config.paths.root, parser, remappings, (absolutePath) => run(task_names_1.TASK_COMPILE_SOLIDITY_READ_FILE, { absolutePath }), (importName) => run(task_names_1.TASK_COMPILE_TRANSFORM_IMPORT_NAME, {\n        importName,\n        deprecationCheck: true,\n    }));\n    const resolvedFiles = await Promise.all(sourceNames.map((sn) => resolver.resolveSourceName(sn)));\n    return dependencyGraph_1.DependencyGraph.createFromResolvedFiles(resolver, resolvedFiles);\n});\n/**\n * Receives a dependency graph and a file in it, and returns the compilation\n * job for that file. The compilation job should have everything that is\n * necessary to compile that file: a compiler config to be used and a list of\n * files to use as input of the compilation.\n *\n * If the file cannot be compiled, a MatchingCompilerFailure should be\n * returned instead.\n *\n * This is the right task to override to change the compiler configuration.\n * For example, if you want to change the compiler settings when targetting\n * goerli, you could do something like this:\n *\n *   const compilationJob = await runSuper();\n *   if (config.network.name === 'goerli') {\n *     compilationJob.solidityConfig.settings = newSettings;\n *   }\n *   return compilationJob;\n *\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOB_FOR_FILE)\n    .addParam(\"dependencyGraph\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"file\", undefined, undefined, config_env_1.types.any)\n    .addOptionalParam(\"solidityFilesCache\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ dependencyGraph, file, }, { config }) => {\n    return (0, compilation_job_1.createCompilationJobFromFile)(dependencyGraph, file, config.solidity);\n});\n/**\n * Receives a dependency graph and returns a tuple with two arrays. The first\n * array is a list of CompilationJobsSuccess, where each item has a list of\n * compilation jobs. The second array is a list of CompilationJobsFailure,\n * where each item has a list of files that couldn't be compiled, grouped by\n * the reason for the failure.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS)\n    .addParam(\"dependencyGraph\", undefined, undefined, config_env_1.types.any)\n    .addOptionalParam(\"solidityFilesCache\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ dependencyGraph, solidityFilesCache, }, { run }) => {\n    const connectedComponents = dependencyGraph.getConnectedComponents();\n    log(`The dependency graph was divided in '${connectedComponents.length}' connected components`);\n    const compilationJobsCreationResults = await Promise.all(connectedComponents.map((graph) => (0, compilation_job_1.createCompilationJobsFromConnectedComponent)(graph, (file) => run(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOB_FOR_FILE, {\n        file,\n        dependencyGraph,\n        solidityFilesCache,\n    }))));\n    let jobs = [];\n    let errors = [];\n    for (const result of compilationJobsCreationResults) {\n        jobs = jobs.concat(result.jobs);\n        errors = errors.concat(result.errors);\n    }\n    return { jobs, errors };\n});\n/**\n * Receives a list of compilation jobs and returns a new list where some of\n * the compilation jobs might've been removed.\n *\n * This task can be overridden to change the way the cache is used, or to use\n * a different approach to filtering out compilation jobs.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_FILTER_COMPILATION_JOBS)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"force\", undefined, undefined, config_env_1.types.boolean)\n    .addOptionalParam(\"solidityFilesCache\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ compilationJobs, force, solidityFilesCache, }) => {\n    (0, errors_1.assertHardhatInvariant)(solidityFilesCache !== undefined, \"The implementation of this task needs a defined solidityFilesCache\");\n    if (force) {\n        log(`force flag enabled, not filtering`);\n        return compilationJobs;\n    }\n    const neededCompilationJobs = compilationJobs.filter((job) => needsCompilation(job, solidityFilesCache));\n    const jobsFilteredOutCount = compilationJobs.length - neededCompilationJobs.length;\n    log(`'${jobsFilteredOutCount}' jobs were filtered out`);\n    return neededCompilationJobs;\n});\n/**\n * Receives a list of compilation jobs and returns a new list where some of\n * the jobs might've been merged.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_MERGE_COMPILATION_JOBS)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ compilationJobs, }) => {\n    return (0, compilation_job_1.mergeCompilationJobsWithoutBug)(compilationJobs);\n});\n/**\n * Prints a message when there's nothing to compile.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_NOTHING_TO_COMPILE)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .setAction(async ({ quiet }) => {\n    if (!quiet) {\n        console.log(\"Nothing to compile\");\n    }\n});\n/**\n * Receives a list of compilation jobs and sends each one to be compiled.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE_JOBS)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"concurrency\", undefined, DEFAULT_CONCURRENCY_LEVEL, config_env_1.types.int)\n    .setAction(async ({ compilationJobs, quiet, concurrency, }, { run }) => {\n    if (compilationJobs.length === 0) {\n        log(`No compilation jobs to compile`);\n        await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_NOTHING_TO_COMPILE, { quiet });\n        return { artifactsEmittedPerJob: [] };\n    }\n    log(`Compiling ${compilationJobs.length} jobs`);\n    for (const job of compilationJobs) {\n        const solcVersion = job.getSolcConfig().version;\n        // versions older than 0.4.11 don't work with hardhat\n        // see issue https://github.com/nomiclabs/hardhat/issues/2004\n        if (semver_1.default.lt(solcVersion, COMPILE_TASK_FIRST_SOLC_VERSION_SUPPORTED)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.COMPILE_TASK_UNSUPPORTED_SOLC_VERSION, {\n                version: solcVersion,\n                firstSupportedVersion: COMPILE_TASK_FIRST_SOLC_VERSION_SUPPORTED,\n            });\n        }\n    }\n    const { default: pMap } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! p-map */ \"(ssr)/./node_modules/p-map/index.js\")));\n    const pMapOptions = { concurrency, stopOnError: false };\n    try {\n        const artifactsEmittedPerJob = await pMap(compilationJobs, async (compilationJob, compilationJobIndex) => {\n            const result = await run(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE_JOB, {\n                compilationJob,\n                compilationJobs,\n                compilationJobIndex,\n                quiet,\n            });\n            return {\n                compilationJob: result.compilationJob,\n                artifactsEmittedPerFile: result.artifactsEmittedPerFile,\n            };\n        }, pMapOptions);\n        return { artifactsEmittedPerJob };\n    }\n    catch (e) {\n        if (!(e instanceof aggregate_error_1.default)) {\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw e;\n        }\n        for (const error of e) {\n            if (!errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.BUILTIN_TASKS.COMPILE_FAILURE)) {\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw error;\n            }\n        }\n        // error is an aggregate error, and all errors are compilation failures\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.COMPILE_FAILURE);\n    }\n});\n/**\n * Receives a compilation job and returns a CompilerInput.\n *\n * It's not recommended to override this task to modify the solc\n * configuration, override\n * TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOB_FOR_FILE instead.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILER_INPUT)\n    .addParam(\"compilationJob\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ compilationJob, }) => {\n    return (0, compiler_input_1.getInputFromCompilationJob)(compilationJob);\n});\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_START)\n    .addParam(\"isCompilerDownloaded\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"solcVersion\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({ isCompilerDownloaded, solcVersion, }) => {\n    if (isCompilerDownloaded) {\n        return;\n    }\n    console.log(`Downloading compiler ${solcVersion}`);\n});\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_END)\n    .addParam(\"isCompilerDownloaded\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"solcVersion\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({}) => { });\n/**\n * Receives a solc version and returns a path to a solc binary or to a\n * downloaded solcjs module. It also returns a flag indicating if the returned\n * path corresponds to solc or solcjs.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOLC_BUILD)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"solcVersion\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({ quiet, solcVersion, }, { run }) => {\n    const compilersCache = await (0, global_dir_1.getCompilersDir)();\n    const compilerPlatform = downloader_1.CompilerDownloader.getCompilerPlatform();\n    const downloader = downloader_1.CompilerDownloader.getConcurrencySafeDownloader(compilerPlatform, compilersCache);\n    await downloader.downloadCompiler(solcVersion, \n    // callback called before compiler download\n    async (isCompilerDownloaded) => {\n        await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_START, {\n            solcVersion,\n            isCompilerDownloaded,\n            quiet,\n        });\n    }, \n    // callback called after compiler download\n    async (isCompilerDownloaded) => {\n        await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_END, {\n            solcVersion,\n            isCompilerDownloaded,\n            quiet,\n        });\n    });\n    const compiler = await downloader.getCompiler(solcVersion);\n    if (compiler !== undefined) {\n        return compiler;\n    }\n    log(\"Native solc binary doesn't work, using solcjs instead. Try running npx hardhat clean --global\");\n    const wasmDownloader = downloader_1.CompilerDownloader.getConcurrencySafeDownloader(downloader_1.CompilerPlatform.WASM, compilersCache);\n    await wasmDownloader.downloadCompiler(solcVersion, async (isCompilerDownloaded) => {\n        // callback called before compiler download\n        await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_START, {\n            solcVersion,\n            isCompilerDownloaded,\n            quiet,\n        });\n    }, \n    // callback called after compiler download\n    async (isCompilerDownloaded) => {\n        await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_END, {\n            solcVersion,\n            isCompilerDownloaded,\n            quiet,\n        });\n    });\n    const wasmCompiler = await wasmDownloader.getCompiler(solcVersion);\n    (0, errors_1.assertHardhatInvariant)(wasmCompiler !== undefined, `WASM build of solc ${solcVersion} isn't working`);\n    return wasmCompiler;\n});\n/**\n * Receives an absolute path to a solcjs module and the input to be compiled,\n * and returns the generated output\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLCJS)\n    .addParam(\"input\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"solcJsPath\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({ input, solcJsPath, }) => {\n    const compiler = new compiler_1.Compiler(solcJsPath);\n    return compiler.compile(input);\n});\n/**\n * Receives an absolute path to a solc binary and the input to be compiled,\n * and returns the generated output\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLC)\n    .addParam(\"input\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"solcPath\", undefined, undefined, config_env_1.types.string)\n    .addOptionalParam(\"solcVersion\", undefined, undefined, config_env_1.types.string)\n    .setAction(async ({ input, solcPath, solcVersion, }) => {\n    if (solcVersion !== undefined && semver_1.default.valid(solcVersion) === null) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n            value: solcVersion,\n            name: \"solcVersion\",\n            type: \"string\",\n        });\n    }\n    const compiler = new compiler_1.NativeCompiler(solcPath, solcVersion);\n    return compiler.compile(input);\n});\n/**\n * Receives a CompilerInput and a solc version, compiles the input using a native\n * solc binary or, if that's not possible, using solcjs. Returns the generated\n * output.\n *\n * This task can be overriden to change how solc is obtained or used.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE_SOLC)\n    .addParam(\"input\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"solcVersion\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"compilationJob\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobIndex\", undefined, undefined, config_env_1.types.int)\n    .setAction(async ({ input, quiet, solcVersion, compilationJob, compilationJobs, compilationJobIndex, }, { run }) => {\n    const solcBuild = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOLC_BUILD, {\n        quiet,\n        solcVersion,\n    });\n    await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_START, {\n        compilationJob,\n        compilationJobs,\n        compilationJobIndex,\n        quiet,\n    });\n    let output;\n    if (solcBuild.isSolcJs) {\n        output = await run(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLCJS, {\n            input,\n            solcJsPath: solcBuild.compilerPath,\n        });\n    }\n    else {\n        output = await run(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLC, {\n            input,\n            solcPath: solcBuild.compilerPath,\n            solcVersion,\n        });\n    }\n    await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_END, {\n        compilationJob,\n        compilationJobs,\n        compilationJobIndex,\n        output,\n        quiet,\n    });\n    return { output, solcBuild };\n});\n/**\n * This task is just a proxy to the task that compiles with solc.\n *\n * Override this to use a different task to compile a job.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE, async (taskArgs, { run }) => {\n    return run(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE_SOLC, taskArgs);\n});\n/**\n * Receives a compilation output and prints its errors and any other\n * information useful to the user.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_ERRORS)\n    .addParam(\"output\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .setAction(async ({ output }) => {\n    if (output?.errors === undefined) {\n        return;\n    }\n    for (const error of output.errors) {\n        if (error.severity === \"error\") {\n            const errorMessage = getFormattedInternalCompilerErrorMessage(error) ??\n                error.formattedMessage;\n            console.error(errorMessage.replace(/^\\w+:/, (t) => picocolors_1.default.bold(picocolors_1.default.red(t))));\n        }\n        else {\n            console.warn(error.formattedMessage.replace(/^\\w+:/, (t) => picocolors_1.default.bold(picocolors_1.default.yellow(t))));\n        }\n    }\n    const hasConsoleErrors = output.errors.some(isConsoleLogError);\n    if (hasConsoleErrors) {\n        console.error(picocolors_1.default.red(`The console.log call you made isn’t supported. See https://hardhat.org/console-log for the list of supported methods.`));\n        console.log();\n    }\n});\n/**\n * Receives a solc output and checks if there are errors. Throws if there are\n * errors.\n *\n * Override this task to avoid interrupting the compilation process if some\n * job has compilation errors.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_CHECK_ERRORS)\n    .addParam(\"output\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .setAction(async ({ output, quiet }, { run }) => {\n    await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_ERRORS, {\n        output,\n        quiet,\n    });\n    if (hasCompilationErrors(output)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.COMPILE_FAILURE);\n    }\n});\n/**\n * Saves to disk the artifacts for a compilation job. These artifacts\n * include the main artifacts, the debug files, and the build info.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_EMIT_ARTIFACTS)\n    .addParam(\"compilationJob\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"input\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"output\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"solcBuild\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ compilationJob, input, output, solcBuild, }, { artifacts, run }) => {\n    const pathToBuildInfo = await artifacts.saveBuildInfo(compilationJob.getSolcConfig().version, solcBuild.longVersion, input, output);\n    const artifactsEmittedPerFile = await Promise.all(compilationJob\n        .getResolvedFiles()\n        .filter((f) => compilationJob.emitsArtifacts(f))\n        .map(async (file) => {\n        const artifactsEmitted = await Promise.all(Object.entries(output.contracts?.[file.sourceName] ?? {}).map(async ([contractName, contractOutput]) => {\n            log(`Emitting artifact for contract '${contractName}'`);\n            const artifact = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT, {\n                sourceName: file.sourceName,\n                contractName,\n                contractOutput,\n            });\n            await artifacts.saveArtifactAndDebugFile(artifact, pathToBuildInfo);\n            return artifact.contractName;\n        }));\n        return {\n            file,\n            artifactsEmitted,\n        };\n    }));\n    return { artifactsEmittedPerFile };\n});\n/**\n * Generates the artifact for contract `contractName` given its compilation\n * output.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT)\n    .addParam(\"sourceName\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"contractName\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"contractOutput\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ sourceName, contractName, contractOutput, }) => {\n    return (0, artifacts_1.getArtifactFromContractOutput)(sourceName, contractName, contractOutput);\n});\n/**\n * Prints a message before running soljs with some input.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_START)\n    .addParam(\"compilationJob\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobIndex\", undefined, undefined, config_env_1.types.int)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .setAction(async ({}) => { });\n/**\n * Prints a message after compiling some input\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_END)\n    .addParam(\"compilationJob\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobIndex\", undefined, undefined, config_env_1.types.int)\n    .addParam(\"output\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .setAction(async ({}) => { });\n/**\n * This is an orchestrator task that uses other subtasks to compile a\n * compilation job.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE_JOB)\n    .addParam(\"compilationJob\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"compilationJobIndex\", undefined, undefined, config_env_1.types.int)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .addOptionalParam(\"emitsArtifacts\", undefined, true, config_env_1.types.boolean)\n    .setAction(async ({ compilationJob, compilationJobs, compilationJobIndex, quiet, emitsArtifacts, }, { run }) => {\n    log(`Compiling job with version '${compilationJob.getSolcConfig().version}'`);\n    const input = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILER_INPUT, {\n        compilationJob,\n    });\n    const { output, solcBuild } = await run(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE, {\n        solcVersion: compilationJob.getSolcConfig().version,\n        input,\n        quiet,\n        compilationJob,\n        compilationJobs,\n        compilationJobIndex,\n    });\n    await run(task_names_1.TASK_COMPILE_SOLIDITY_CHECK_ERRORS, { output, quiet });\n    let artifactsEmittedPerFile = [];\n    if (emitsArtifacts) {\n        artifactsEmittedPerFile = (await run(task_names_1.TASK_COMPILE_SOLIDITY_EMIT_ARTIFACTS, {\n            compilationJob,\n            input,\n            output,\n            solcBuild,\n        })).artifactsEmittedPerFile;\n    }\n    return {\n        artifactsEmittedPerFile,\n        compilationJob,\n        input,\n        output,\n        solcBuild,\n    };\n});\n/**\n * Receives a list of CompilationJobsFailure and throws an error if it's not\n * empty.\n *\n * This task could be overriden to avoid interrupting the compilation if\n * there's some part of the project that can't be compiled.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_HANDLE_COMPILATION_JOBS_FAILURES)\n    .addParam(\"compilationJobsCreationErrors\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ compilationJobsCreationErrors, }, { run }) => {\n    const hasErrors = compilationJobsCreationErrors.length > 0;\n    if (hasErrors) {\n        log(`There were errors creating the compilation jobs, throwing`);\n        const reasons = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS_FAILURE_REASONS, { compilationJobsCreationErrors });\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.COMPILATION_JOBS_CREATION_FAILURE, {\n            reasons,\n        });\n    }\n});\n/**\n * Receives a list of CompilationJobsFailure and returns an error message\n * that describes the failure.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS_FAILURE_REASONS)\n    .addParam(\"compilationJobsCreationErrors\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ compilationJobsCreationErrors: errors, }) => {\n    const noCompatibleSolc = [];\n    const incompatibleOverridenSolc = [];\n    const directlyImportsIncompatibleFile = [];\n    const indirectlyImportsIncompatibleFile = [];\n    const other = [];\n    for (const error of errors) {\n        if (error.reason ===\n            builtin_tasks_1.CompilationJobCreationErrorReason.NO_COMPATIBLE_SOLC_VERSION_FOUND) {\n            noCompatibleSolc.push(error);\n        }\n        else if (error.reason ===\n            builtin_tasks_1.CompilationJobCreationErrorReason.INCOMPATIBLE_OVERRIDEN_SOLC_VERSION) {\n            incompatibleOverridenSolc.push(error);\n        }\n        else if (error.reason ===\n            builtin_tasks_1.CompilationJobCreationErrorReason.DIRECTLY_IMPORTS_INCOMPATIBLE_FILE) {\n            directlyImportsIncompatibleFile.push(error);\n        }\n        else if (error.reason ===\n            builtin_tasks_1.CompilationJobCreationErrorReason.INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE) {\n            indirectlyImportsIncompatibleFile.push(error);\n        }\n        else if (error.reason === builtin_tasks_1.CompilationJobCreationErrorReason.OTHER_ERROR) {\n            other.push(error);\n        }\n        else {\n            // add unrecognized errors to `other`\n            other.push(error);\n        }\n    }\n    let errorMessage = \"\";\n    if (incompatibleOverridenSolc.length > 0) {\n        errorMessage += `The compiler version for the following files is fixed through an override in your config file to a version that is incompatible with their Solidity version pragmas.\n\n`;\n        for (const error of incompatibleOverridenSolc) {\n            const { sourceName } = error.file;\n            const { versionPragmas } = error.file.content;\n            const versionsRange = versionPragmas.join(\" \");\n            log(`File ${sourceName} has an incompatible overridden compiler`);\n            errorMessage += `  * ${sourceName} (${versionsRange})\\n`;\n        }\n        errorMessage += \"\\n\";\n    }\n    if (noCompatibleSolc.length > 0) {\n        errorMessage += `The Solidity version pragma statement in these files doesn't match any of the configured compilers in your config. Change the pragma or configure additional compiler versions in your hardhat config.\n\n`;\n        for (const error of noCompatibleSolc) {\n            const { sourceName } = error.file;\n            const { versionPragmas } = error.file.content;\n            const versionsRange = versionPragmas.join(\" \");\n            log(`File ${sourceName} doesn't match any of the configured compilers`);\n            errorMessage += `  * ${sourceName} (${versionsRange})\\n`;\n        }\n        errorMessage += \"\\n\";\n    }\n    if (directlyImportsIncompatibleFile.length > 0) {\n        errorMessage += `These files import other files that use a different and incompatible version of Solidity:\n\n`;\n        for (const error of directlyImportsIncompatibleFile) {\n            const { sourceName } = error.file;\n            const { versionPragmas } = error.file.content;\n            const versionsRange = versionPragmas.join(\" \");\n            const incompatibleDirectImportsFiles = error.extra?.incompatibleDirectImports ?? [];\n            const incompatibleDirectImports = incompatibleDirectImportsFiles.map((x) => `${x.sourceName} (${x.content.versionPragmas.join(\" \")})`);\n            log(`File ${sourceName} imports files ${incompatibleDirectImportsFiles\n                .map((x) => x.sourceName)\n                .join(\", \")} that use an incompatible version of Solidity`);\n            let directImportsText = \"\";\n            if (incompatibleDirectImports.length === 1) {\n                directImportsText = ` imports ${incompatibleDirectImports[0]}`;\n            }\n            else if (incompatibleDirectImports.length === 2) {\n                directImportsText = ` imports ${incompatibleDirectImports[0]} and ${incompatibleDirectImports[1]}`;\n            }\n            else if (incompatibleDirectImports.length > 2) {\n                const otherImportsCount = incompatibleDirectImports.length - 2;\n                directImportsText = ` imports ${incompatibleDirectImports[0]}, ${incompatibleDirectImports[1]} and ${otherImportsCount} other ${(0, strings_1.pluralize)(otherImportsCount, \"file\")}. Use --verbose to see the full list.`;\n            }\n            errorMessage += `  * ${sourceName} (${versionsRange})${directImportsText}\\n`;\n        }\n        errorMessage += \"\\n\";\n    }\n    if (indirectlyImportsIncompatibleFile.length > 0) {\n        errorMessage += `These files depend on other files that use a different and incompatible version of Solidity:\n\n`;\n        for (const error of indirectlyImportsIncompatibleFile) {\n            const { sourceName } = error.file;\n            const { versionPragmas } = error.file.content;\n            const versionsRange = versionPragmas.join(\" \");\n            const incompatibleIndirectImports = error.extra?.incompatibleIndirectImports ?? [];\n            const incompatibleImports = incompatibleIndirectImports.map(({ dependency }) => `${dependency.sourceName} (${dependency.content.versionPragmas.join(\" \")})`);\n            for (const { dependency, path: dependencyPath, } of incompatibleIndirectImports) {\n                const dependencyPathText = [\n                    sourceName,\n                    ...dependencyPath.map((x) => x.sourceName),\n                    dependency.sourceName,\n                ].join(\" -> \");\n                log(`File ${sourceName} depends on file ${dependency.sourceName} that uses an incompatible version of Solidity\nThe dependency path is ${dependencyPathText}\n`);\n            }\n            let indirectImportsText = \"\";\n            if (incompatibleImports.length === 1) {\n                indirectImportsText = ` depends on ${incompatibleImports[0]}`;\n            }\n            else if (incompatibleImports.length === 2) {\n                indirectImportsText = ` depends on ${incompatibleImports[0]} and ${incompatibleImports[1]}`;\n            }\n            else if (incompatibleImports.length > 2) {\n                const otherImportsCount = incompatibleImports.length - 2;\n                indirectImportsText = ` depends on ${incompatibleImports[0]}, ${incompatibleImports[1]} and ${otherImportsCount} other ${(0, strings_1.pluralize)(otherImportsCount, \"file\")}. Use --verbose to see the full list.`;\n            }\n            errorMessage += `  * ${sourceName} (${versionsRange})${indirectImportsText}\\n`;\n        }\n        errorMessage += \"\\n\";\n    }\n    if (other.length > 0) {\n        errorMessage += `These files and its dependencies cannot be compiled with your config. This can happen because they have incompatible Solidity pragmas, or don't match any of your configured Solidity compilers.\n\n${other.map((x) => `  * ${x.file.sourceName}`).join(\"\\n\")}\n\n`;\n    }\n    errorMessage += `To learn more, run the command again with --verbose\n\nRead about compiler configuration at https://hardhat.org/config\n`;\n    return errorMessage;\n});\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_RESULT)\n    .addParam(\"compilationJobs\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .setAction(async ({ compilationJobs }) => {\n    let count = 0;\n    const evmVersions = new Set();\n    const unknownEvmVersions = new Set();\n    for (const job of compilationJobs) {\n        count += job\n            .getResolvedFiles()\n            .filter((file) => job.emitsArtifacts(file)).length;\n        const solcVersion = job.getSolcConfig().version;\n        const evmTarget = job.getSolcConfig().settings?.evmVersion ??\n            (0, solc_info_1.getEvmVersionFromSolcVersion)(solcVersion);\n        if (evmTarget !== undefined) {\n            evmVersions.add(evmTarget);\n        }\n        else {\n            unknownEvmVersions.add(`unknown evm version for solc version ${solcVersion}`);\n        }\n    }\n    const targetVersionsList = Array.from(evmVersions)\n        // Alphabetically sort evm versions. The unknown ones are added at the end\n        .sort()\n        .concat(Array.from(unknownEvmVersions).sort());\n    if (count > 0) {\n        console.log(`Compiled ${count} Solidity ${(0, strings_1.pluralize)(count, \"file\")} successfully (evm ${(0, strings_1.pluralize)(targetVersionsList.length, \"target\", \"targets\")}: ${targetVersionsList.join(\", \")}).`);\n    }\n});\n/**\n * Main task for compiling the solidity files in the project.\n *\n * The main responsibility of this task is to orchestrate and connect most of\n * the subtasks related to compiling solidity.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY)\n    .addParam(\"force\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"quiet\", undefined, undefined, config_env_1.types.boolean)\n    .addParam(\"concurrency\", undefined, DEFAULT_CONCURRENCY_LEVEL, config_env_1.types.int)\n    .setAction(async ({ force, quiet, concurrency, }, { artifacts, config, run }) => {\n    const rootPath = config.paths.root;\n    const sourcePaths = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS, { sourcePath: config.paths.sources });\n    const sourceNames = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_NAMES, {\n        rootPath,\n        sourcePaths,\n    });\n    const solidityFilesCachePath = (0, solidity_files_cache_1.getSolidityFilesCachePath)(config.paths);\n    let solidityFilesCache = await solidity_files_cache_1.SolidityFilesCache.readFromFile(solidityFilesCachePath);\n    const dependencyGraph = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_DEPENDENCY_GRAPH, { rootPath, sourceNames, solidityFilesCache });\n    solidityFilesCache = await invalidateCacheMissingArtifacts(solidityFilesCache, artifacts, dependencyGraph.getResolvedFiles());\n    const compilationJobsCreationResult = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS, {\n        dependencyGraph,\n        solidityFilesCache,\n    });\n    await run(task_names_1.TASK_COMPILE_SOLIDITY_HANDLE_COMPILATION_JOBS_FAILURES, {\n        compilationJobsCreationErrors: compilationJobsCreationResult.errors,\n    });\n    const compilationJobs = compilationJobsCreationResult.jobs;\n    const filteredCompilationJobs = await run(task_names_1.TASK_COMPILE_SOLIDITY_FILTER_COMPILATION_JOBS, { compilationJobs, force, solidityFilesCache });\n    const mergedCompilationJobs = await run(task_names_1.TASK_COMPILE_SOLIDITY_MERGE_COMPILATION_JOBS, { compilationJobs: filteredCompilationJobs });\n    const { artifactsEmittedPerJob, } = await run(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE_JOBS, {\n        compilationJobs: mergedCompilationJobs,\n        quiet,\n        concurrency,\n    });\n    // update cache using the information about the emitted artifacts\n    for (const { compilationJob: compilationJob, artifactsEmittedPerFile: artifactsEmittedPerFile, } of artifactsEmittedPerJob) {\n        for (const { file, artifactsEmitted } of artifactsEmittedPerFile) {\n            solidityFilesCache.addFile(file.absolutePath, {\n                lastModificationDate: file.lastModificationDate.valueOf(),\n                contentHash: file.contentHash,\n                sourceName: file.sourceName,\n                solcConfig: compilationJob.getSolcConfig(),\n                imports: file.content.imports,\n                versionPragmas: file.content.versionPragmas,\n                artifacts: artifactsEmitted,\n            });\n        }\n    }\n    const allArtifactsEmittedPerFile = solidityFilesCache.getEntries();\n    // We know this is the actual implementation, so we use some\n    // non-public methods here.\n    const artifactsImpl = artifacts;\n    artifactsImpl.addValidArtifacts(allArtifactsEmittedPerFile);\n    await solidityFilesCache.writeToFile(solidityFilesCachePath);\n    await run(task_names_1.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_RESULT, {\n        compilationJobs: mergedCompilationJobs,\n        quiet,\n    });\n});\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_REMOVE_OBSOLETE_ARTIFACTS, async (_, { artifacts }) => {\n    // We know this is the actual implementation, so we use some\n    // non-public methods here.\n    const artifactsImpl = artifacts;\n    await artifactsImpl.removeObsoleteArtifacts();\n});\n/**\n * Returns a list of compilation tasks.\n *\n * This is the task to override to add support for other languages.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_GET_COMPILATION_TASKS, async () => {\n    return [task_names_1.TASK_COMPILE_SOLIDITY];\n});\n/**\n * Main compile task.\n *\n * This is a meta-task that just gets all the compilation tasks and runs them.\n * Right now there's only a \"compile solidity\" task.\n */\n(0, config_env_1.task)(task_names_1.TASK_COMPILE, \"Compiles the entire project, building all artifacts\")\n    .addFlag(\"force\", \"Force compilation ignoring cache\")\n    .addFlag(\"quiet\", \"Makes the compilation process less verbose\")\n    .addParam(\"concurrency\", \"Number of compilation jobs executed in parallel. Defaults to the number of CPU cores - 1\", DEFAULT_CONCURRENCY_LEVEL, config_env_1.types.int)\n    .setAction(async (compilationArgs, { run }) => {\n    const compilationTasks = await run(task_names_1.TASK_COMPILE_GET_COMPILATION_TASKS);\n    for (const compilationTask of compilationTasks) {\n        await run(compilationTask, compilationArgs);\n    }\n    await run(task_names_1.TASK_COMPILE_REMOVE_OBSOLETE_ARTIFACTS);\n});\n/**\n * If a file is present in the cache, but some of its artifacts are missing on\n * disk, we remove it from the cache to force it to be recompiled.\n */\nasync function invalidateCacheMissingArtifacts(solidityFilesCache, artifacts, resolvedFiles) {\n    const paths = new Set(await artifacts.getArtifactPaths());\n    for (const file of resolvedFiles) {\n        const cacheEntry = solidityFilesCache.getEntry(file.absolutePath);\n        if (cacheEntry === undefined) {\n            continue;\n        }\n        const { artifacts: emittedArtifacts } = cacheEntry;\n        for (const emittedArtifact of emittedArtifacts) {\n            const fqn = (0, contract_names_1.getFullyQualifiedName)(file.sourceName, emittedArtifact);\n            const path = artifacts.formArtifactPathFromFullyQualifiedName(fqn);\n            if (!paths.has(path)) {\n                log(`Invalidate cache for '${file.absolutePath}' because artifact '${fqn}' doesn't exist`);\n                solidityFilesCache.removeEntry(file.absolutePath);\n                break;\n            }\n        }\n    }\n    artifacts.clearCache?.();\n    return solidityFilesCache;\n}\n/**\n * Checks if the given compilation job needs to be done.\n */\nfunction needsCompilation(job, cache) {\n    for (const file of job.getResolvedFiles()) {\n        const hasChanged = cache.hasFileChanged(file.absolutePath, file.contentHash, \n        // we only check if the solcConfig is different for files that\n        // emit artifacts\n        job.emitsArtifacts(file) ? job.getSolcConfig() : undefined);\n        if (hasChanged) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction hasCompilationErrors(output) {\n    return output.errors?.some((x) => x.severity === \"error\");\n}\n/**\n * This function returns a properly formatted Internal Compiler Error message.\n *\n * This is present due to a bug in Solidity. See: https://github.com/ethereum/solidity/issues/9926\n *\n * If the error is not an ICE, or if it's properly formatted, this function returns undefined.\n */\nfunction getFormattedInternalCompilerErrorMessage(error) {\n    if (error.formattedMessage.trim() !== \"InternalCompilerError:\") {\n        return;\n    }\n    // We trim any final `:`, as we found some at the end of the error messages,\n    // and then trim just in case a blank space was left\n    return `${error.type}: ${error.message}`.replace(/[:\\s]*$/g, \"\").trim();\n}\n//# sourceMappingURL=compile.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/console.js":
/*!*******************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/console.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst semver = __importStar(__webpack_require__(/*! semver */ \"(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\"));\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst scripts_runner_1 = __webpack_require__(/*! ../internal/util/scripts-runner */ \"(ssr)/./node_modules/hardhat/internal/util/scripts-runner.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:console\");\n(0, config_env_1.task)(task_names_1.TASK_CONSOLE, \"Opens a hardhat console\")\n    .addFlag(\"noCompile\", \"Don't compile before running this task\")\n    .setAction(async ({ noCompile }, { config, run, hardhatArguments }) => {\n    if (!noCompile) {\n        await run(task_names_1.TASK_COMPILE, { quiet: true });\n    }\n    await fs_extra_1.default.ensureDir(config.paths.cache);\n    const historyFile = path.join(config.paths.cache, \"console-history.txt\");\n    const nodeArgs = [];\n    if (semver.gte(process.version, \"10.0.0\")) {\n        nodeArgs.push(\"--experimental-repl-await\");\n    }\n    log(`Creating a Node REPL subprocess with Hardhat's register so we can set some Node's flags`);\n    // Running the script \"\" is like running `node`, so this starts the repl\n    await (0, scripts_runner_1.runScriptWithHardhat)(hardhatArguments, \"\", [], nodeArgs, {\n        NODE_REPL_HISTORY: historyFile,\n    });\n});\n//# sourceMappingURL=console.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLG1CQUFPLENBQUMsc0RBQU87QUFDL0MsbUNBQW1DLG1CQUFPLENBQUMsNERBQVU7QUFDckQsMEJBQTBCLG1CQUFPLENBQUMsa0JBQU07QUFDeEMsNEJBQTRCLG1CQUFPLENBQUMsMEVBQVE7QUFDNUMscUJBQXFCLG1CQUFPLENBQUMsMkdBQW9DO0FBQ2pFLHlCQUF5QixtQkFBTyxDQUFDLHFHQUFpQztBQUNsRSxxQkFBcUIsbUJBQU8sQ0FBQyw4RUFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsV0FBVyxJQUFJLCtCQUErQjtBQUN0RTtBQUNBLCtDQUErQyxhQUFhO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2J1aWx0aW4tdGFza3MvY29uc29sZS5qcz9iZjAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBmc19leHRyYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmcy1leHRyYVwiKSk7XG5jb25zdCBwYXRoID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJwYXRoXCIpKTtcbmNvbnN0IHNlbXZlciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwic2VtdmVyXCIpKTtcbmNvbnN0IGNvbmZpZ19lbnZfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9jb3JlL2NvbmZpZy9jb25maWctZW52XCIpO1xuY29uc3Qgc2NyaXB0c19ydW5uZXJfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC91dGlsL3NjcmlwdHMtcnVubmVyXCIpO1xuY29uc3QgdGFza19uYW1lc18xID0gcmVxdWlyZShcIi4vdGFzay1uYW1lc1wiKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwiaGFyZGhhdDpjb3JlOnRhc2tzOmNvbnNvbGVcIik7XG4oMCwgY29uZmlnX2Vudl8xLnRhc2spKHRhc2tfbmFtZXNfMS5UQVNLX0NPTlNPTEUsIFwiT3BlbnMgYSBoYXJkaGF0IGNvbnNvbGVcIilcbiAgICAuYWRkRmxhZyhcIm5vQ29tcGlsZVwiLCBcIkRvbid0IGNvbXBpbGUgYmVmb3JlIHJ1bm5pbmcgdGhpcyB0YXNrXCIpXG4gICAgLnNldEFjdGlvbihhc3luYyAoeyBub0NvbXBpbGUgfSwgeyBjb25maWcsIHJ1biwgaGFyZGhhdEFyZ3VtZW50cyB9KSA9PiB7XG4gICAgaWYgKCFub0NvbXBpbGUpIHtcbiAgICAgICAgYXdhaXQgcnVuKHRhc2tfbmFtZXNfMS5UQVNLX0NPTVBJTEUsIHsgcXVpZXQ6IHRydWUgfSk7XG4gICAgfVxuICAgIGF3YWl0IGZzX2V4dHJhXzEuZGVmYXVsdC5lbnN1cmVEaXIoY29uZmlnLnBhdGhzLmNhY2hlKTtcbiAgICBjb25zdCBoaXN0b3J5RmlsZSA9IHBhdGguam9pbihjb25maWcucGF0aHMuY2FjaGUsIFwiY29uc29sZS1oaXN0b3J5LnR4dFwiKTtcbiAgICBjb25zdCBub2RlQXJncyA9IFtdO1xuICAgIGlmIChzZW12ZXIuZ3RlKHByb2Nlc3MudmVyc2lvbiwgXCIxMC4wLjBcIikpIHtcbiAgICAgICAgbm9kZUFyZ3MucHVzaChcIi0tZXhwZXJpbWVudGFsLXJlcGwtYXdhaXRcIik7XG4gICAgfVxuICAgIGxvZyhgQ3JlYXRpbmcgYSBOb2RlIFJFUEwgc3VicHJvY2VzcyB3aXRoIEhhcmRoYXQncyByZWdpc3RlciBzbyB3ZSBjYW4gc2V0IHNvbWUgTm9kZSdzIGZsYWdzYCk7XG4gICAgLy8gUnVubmluZyB0aGUgc2NyaXB0IFwiXCIgaXMgbGlrZSBydW5uaW5nIGBub2RlYCwgc28gdGhpcyBzdGFydHMgdGhlIHJlcGxcbiAgICBhd2FpdCAoMCwgc2NyaXB0c19ydW5uZXJfMS5ydW5TY3JpcHRXaXRoSGFyZGhhdCkoaGFyZGhhdEFyZ3VtZW50cywgXCJcIiwgW10sIG5vZGVBcmdzLCB7XG4gICAgICAgIE5PREVfUkVQTF9ISVNUT1JZOiBoaXN0b3J5RmlsZSxcbiAgICB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/console.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/flatten.js":
/*!*******************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/flatten.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst node_fs_1 = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../internal/util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst fs_utils_1 = __webpack_require__(/*! ../internal/util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\n// Match every group where a SPDX license is defined. The first captured group is the license.\nconst SPDX_LICENSES_REGEX = /^(?:\\/\\/|\\/\\*)\\s*SPDX-License-Identifier:\\s*([a-zA-Z\\d+.-]+).*/gm;\n// Match every group where a pragma directive is defined. The first captured group is the pragma directive.\nconst PRAGMA_DIRECTIVES_REGEX = /^(?: |\\t)*(pragma\\s*abicoder\\s*v(1|2)|pragma\\s*experimental\\s*ABIEncoderV2)\\s*;/gim;\nfunction getSortedFiles(dependenciesGraph) {\n    const tsort = __webpack_require__(/*! tsort */ \"(ssr)/./node_modules/tsort/index.js\");\n    const graph = tsort();\n    // sort the graph entries to make the results deterministic\n    const dependencies = dependenciesGraph\n        .entries()\n        .sort(([a], [b]) => a.sourceName.localeCompare(b.sourceName));\n    const filesMap = {};\n    const resolvedFiles = dependencies.map(([file, _deps]) => file);\n    resolvedFiles.forEach((f) => (filesMap[f.sourceName] = f));\n    for (const [from, deps] of dependencies) {\n        // sort the dependencies to make the results deterministic\n        const sortedDeps = [...deps].sort((a, b) => a.sourceName.localeCompare(b.sourceName));\n        for (const to of sortedDeps) {\n            graph.add(to.sourceName, from.sourceName);\n        }\n    }\n    try {\n        const topologicalSortedNames = graph.sort();\n        // If an entry has no dependency it won't be included in the graph, so we\n        // add them and then dedup the array\n        const withEntries = topologicalSortedNames.concat(resolvedFiles.map((f) => f.sourceName));\n        const sortedNames = [...new Set(withEntries)];\n        return sortedNames.map((n) => filesMap[n]);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            if (error.toString().includes(\"Error: There is a cycle in the graph.\")) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.FLATTEN_CYCLE, {}, error);\n            }\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n    }\n}\nfunction getFileWithoutImports(resolvedFile) {\n    const IMPORT_SOLIDITY_REGEX = /^\\s*import(\\s+)[\\s\\S]*?;\\s*$/gm;\n    return resolvedFile.content.rawContent\n        .replace(IMPORT_SOLIDITY_REGEX, \"\")\n        .trim();\n}\nfunction getLicensesInfo(sortedFiles) {\n    const licenses = new Set();\n    const filesWithoutLicenses = new Set();\n    for (const file of sortedFiles) {\n        const matches = [...file.content.rawContent.matchAll(SPDX_LICENSES_REGEX)];\n        if (matches.length === 0) {\n            filesWithoutLicenses.add(file.sourceName);\n            continue;\n        }\n        for (const groups of matches) {\n            licenses.add(groups[1]);\n        }\n    }\n    // Sort alphabetically\n    return [Array.from(licenses).sort(), Array.from(filesWithoutLicenses).sort()];\n}\nfunction getLicensesHeader(licenses) {\n    return licenses.length <= 0\n        ? \"\"\n        : `\\n\\n// SPDX-License-Identifier: ${licenses.join(\" AND \")}`;\n}\nfunction removeUnnecessarySpaces(str) {\n    return str.replace(/\\s+/g, \" \").trim();\n}\nfunction getPragmaAbicoderDirectiveInfo(sortedFiles) {\n    let directive = \"\";\n    const directivesByImportance = [\n        \"pragma abicoder v1\",\n        \"pragma experimental ABIEncoderV2\",\n        \"pragma abicoder v2\",\n    ];\n    const filesWithoutPragmaDirectives = new Set();\n    const filesWithMostImportantDirective = []; // Every array element has the structure: [ fileName, fileMostImportantDirective ]\n    for (const file of sortedFiles) {\n        const matches = [\n            ...file.content.rawContent.matchAll(PRAGMA_DIRECTIVES_REGEX),\n        ];\n        if (matches.length === 0) {\n            filesWithoutPragmaDirectives.add(file.sourceName);\n            continue;\n        }\n        let fileMostImportantDirective = \"\";\n        for (const groups of matches) {\n            const normalizedPragma = removeUnnecessarySpaces(groups[1]);\n            // Update the most important pragma directive among all the files\n            if (directivesByImportance.indexOf(normalizedPragma) >\n                directivesByImportance.indexOf(directive)) {\n                directive = normalizedPragma;\n            }\n            // Update the most important pragma directive for the current file\n            if (directivesByImportance.indexOf(normalizedPragma) >\n                directivesByImportance.indexOf(fileMostImportantDirective)) {\n                fileMostImportantDirective = normalizedPragma;\n            }\n        }\n        // Add in the array the most important directive for the current file\n        filesWithMostImportantDirective.push([\n            file.sourceName,\n            fileMostImportantDirective,\n        ]);\n    }\n    // Add to the array the files that have a pragma directive which is not the same as the main one that\n    // is going to be used in the flatten file\n    const filesWithDifferentPragmaDirectives = filesWithMostImportantDirective\n        .filter(([, fileDirective]) => fileDirective !== directive)\n        .map(([fileName]) => fileName);\n    // Sort alphabetically\n    return [\n        directive,\n        Array.from(filesWithoutPragmaDirectives).sort(),\n        filesWithDifferentPragmaDirectives.sort(),\n    ];\n}\nfunction getPragmaAbicoderDirectiveHeader(pragmaDirective) {\n    return pragmaDirective === \"\" ? \"\" : `\\n\\n${pragmaDirective};`;\n}\nfunction replaceLicenses(file) {\n    return file.replaceAll(SPDX_LICENSES_REGEX, (...groups) => `// Original license: SPDX_License_Identifier: ${groups[1]}`);\n}\nfunction replacePragmaAbicoderDirectives(file) {\n    return file.replaceAll(PRAGMA_DIRECTIVES_REGEX, (...groups) => {\n        return `// Original pragma directive: ${removeUnnecessarySpaces(groups[1])}`;\n    });\n}\n(0, config_env_1.subtask)(task_names_1.TASK_FLATTEN_GET_FLATTENED_SOURCE_AND_METADATA, \"Returns all contracts and their dependencies flattened. Also return metadata about pragma directives and SPDX licenses\")\n    .addOptionalParam(\"files\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ files }, { run }) => {\n    const dependencyGraph = await run(task_names_1.TASK_FLATTEN_GET_DEPENDENCY_GRAPH, { files });\n    let flattened = \"\";\n    if (dependencyGraph.getResolvedFiles().length === 0) {\n        return [flattened, null];\n    }\n    const packageJson = await (0, packageInfo_1.getPackageJson)();\n    flattened += `// Sources flattened with hardhat v${packageJson.version} https://hardhat.org`;\n    const sortedFiles = getSortedFiles(dependencyGraph);\n    const [licenses, filesWithoutLicenses] = getLicensesInfo(sortedFiles);\n    const [pragmaDirective, filesWithoutPragmaDirectives, filesWithDifferentPragmaDirectives,] = getPragmaAbicoderDirectiveInfo(sortedFiles);\n    flattened += getLicensesHeader(licenses);\n    flattened += getPragmaAbicoderDirectiveHeader(pragmaDirective);\n    for (const file of sortedFiles) {\n        let tmpFile = getFileWithoutImports(file);\n        tmpFile = replaceLicenses(tmpFile);\n        tmpFile = replacePragmaAbicoderDirectives(tmpFile);\n        flattened += `\\n\\n// File ${file.getVersionedName()}\\n`;\n        flattened += `\\n${tmpFile}\\n`;\n    }\n    return [\n        flattened.trim(),\n        {\n            filesWithoutLicenses,\n            pragmaDirective,\n            filesWithoutPragmaDirectives,\n            filesWithDifferentPragmaDirectives,\n        },\n    ];\n});\n// The following task is kept for backwards-compatibility reasons\n(0, config_env_1.subtask)(task_names_1.TASK_FLATTEN_GET_FLATTENED_SOURCE, \"Returns all contracts and their dependencies flattened\")\n    .addOptionalParam(\"files\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ files }, { run }) => {\n    return (await run(task_names_1.TASK_FLATTEN_GET_FLATTENED_SOURCE_AND_METADATA, { files }))[0];\n});\n(0, config_env_1.subtask)(task_names_1.TASK_FLATTEN_GET_DEPENDENCY_GRAPH)\n    .addOptionalParam(\"files\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ files }, { run }) => {\n    const sourcePaths = files === undefined\n        ? await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS)\n        : files.map((f) => (0, fs_utils_1.getRealPathSync)(f));\n    const sourceNames = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_NAMES, {\n        sourcePaths,\n    });\n    const dependencyGraph = await run(task_names_1.TASK_COMPILE_SOLIDITY_GET_DEPENDENCY_GRAPH, { sourceNames });\n    return dependencyGraph;\n});\n(0, config_env_1.task)(task_names_1.TASK_FLATTEN, \"Flattens and prints contracts and their dependencies. If no file is passed, all the contracts in the project will be flattened.\")\n    .addOptionalVariadicPositionalParam(\"files\", \"The files to flatten\", undefined, config_env_1.types.inputFile)\n    .addOptionalParam(\"output\", \"The output file containing the flattened contracts\", undefined, config_env_1.types.string)\n    .setAction(async ({ files, output, }, { run }) => {\n    const [flattenedFile, metadata] = await run(task_names_1.TASK_FLATTEN_GET_FLATTENED_SOURCE_AND_METADATA, { files });\n    if (output !== undefined) {\n        (0, node_fs_1.writeFileSync)(output, flattenedFile, { encoding: \"utf-8\" });\n    }\n    else {\n        console.log(flattenedFile);\n    }\n    if (metadata === null)\n        return;\n    if (metadata.filesWithoutLicenses.length > 0) {\n        console.warn(picocolors_1.default.yellow(`\\nThe following file(s) do NOT specify SPDX licenses: ${metadata.filesWithoutLicenses.join(\", \")}`));\n    }\n    if (metadata.pragmaDirective !== \"\" &&\n        metadata.filesWithoutPragmaDirectives.length > 0) {\n        console.warn(picocolors_1.default.yellow(`\\nPragma abicoder directives are defined in some files, but they are not defined in the following ones: ${metadata.filesWithoutPragmaDirectives.join(\", \")}`));\n    }\n    if (metadata.filesWithDifferentPragmaDirectives.length > 0) {\n        console.warn(picocolors_1.default.yellow(`\\nThe flattened file is using the pragma abicoder directive '${metadata.pragmaDirective}' but these files have a different pragma abicoder directive: ${metadata.filesWithDifferentPragmaDirectives.join(\", \")}`));\n    }\n});\n//# sourceMappingURL=flatten.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/flatten.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/help.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/help.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst HelpPrinter_1 = __webpack_require__(/*! ../internal/cli/HelpPrinter */ \"(ssr)/./node_modules/hardhat/internal/cli/HelpPrinter.js\");\nconst constants_1 = __webpack_require__(/*! ../internal/constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst hardhat_params_1 = __webpack_require__(/*! ../internal/core/params/hardhat-params */ \"(ssr)/./node_modules/hardhat/internal/core/params/hardhat-params.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\n(0, config_env_1.task)(task_names_1.TASK_HELP, \"Prints this message\")\n    .addOptionalPositionalParam(\"scopeOrTask\", \"An optional scope or task to print more info about\")\n    .addOptionalPositionalParam(\"task\", \"An optional task to print more info about\")\n    .setAction(async ({ scopeOrTask, task: taskName }, { tasks, scopes, version }) => {\n    const helpPrinter = new HelpPrinter_1.HelpPrinter(constants_1.HARDHAT_NAME, constants_1.HARDHAT_EXECUTABLE_NAME, version, hardhat_params_1.HARDHAT_PARAM_DEFINITIONS, tasks, scopes);\n    if (scopeOrTask === undefined) {\n        // no params, print global help\n        helpPrinter.printGlobalHelp();\n        return;\n    }\n    const taskDefinition = tasks[scopeOrTask];\n    if (taskDefinition !== undefined) {\n        // the first param is a valid task\n        helpPrinter.printTaskHelp(tasks[scopeOrTask]);\n        return;\n    }\n    const scopeDefinition = scopes[scopeOrTask];\n    if (scopeDefinition === undefined) {\n        // if the first parameter is neither a task nor a scope,\n        // we don't know what the user was trying to print,\n        // so we assume that it's an unrecognized task\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n            task: scopeOrTask,\n        });\n    }\n    if (taskName === undefined) {\n        // if the second parameter is not present, print scope help\n        helpPrinter.printScopeHelp(scopeDefinition);\n        return;\n    }\n    const scopedTaskDefinition = scopeDefinition.tasks[taskName];\n    if (scopedTaskDefinition === undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_SCOPED_TASK, {\n            scope: scopeOrTask,\n            task: taskName,\n        });\n    }\n    helpPrinter.printTaskHelp(scopedTaskDefinition);\n});\n//# sourceMappingURL=help.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL2hlbHAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLG1CQUFPLENBQUMsNkZBQTZCO0FBQzNELG9CQUFvQixtQkFBTyxDQUFDLGlGQUF1QjtBQUNuRCxxQkFBcUIsbUJBQU8sQ0FBQywyR0FBb0M7QUFDakUsaUJBQWlCLG1CQUFPLENBQUMscUZBQXlCO0FBQ2xELHNCQUFzQixtQkFBTyxDQUFDLCtGQUE4QjtBQUM1RCx5QkFBeUIsbUJBQU8sQ0FBQyxtSEFBd0M7QUFDekUscUJBQXFCLG1CQUFPLENBQUMsOEVBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDZCQUE2QixJQUFJLHdCQUF3QjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvYnVpbHRpbi10YXNrcy9oZWxwLmpzPzAzMGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBIZWxwUHJpbnRlcl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NsaS9IZWxwUHJpbnRlclwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvbnN0YW50c1wiKTtcbmNvbnN0IGNvbmZpZ19lbnZfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9jb3JlL2NvbmZpZy9jb25maWctZW52XCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvcmUvZXJyb3JzLWxpc3RcIik7XG5jb25zdCBoYXJkaGF0X3BhcmFtc18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvcmUvcGFyYW1zL2hhcmRoYXQtcGFyYW1zXCIpO1xuY29uc3QgdGFza19uYW1lc18xID0gcmVxdWlyZShcIi4vdGFzay1uYW1lc1wiKTtcbigwLCBjb25maWdfZW52XzEudGFzaykodGFza19uYW1lc18xLlRBU0tfSEVMUCwgXCJQcmludHMgdGhpcyBtZXNzYWdlXCIpXG4gICAgLmFkZE9wdGlvbmFsUG9zaXRpb25hbFBhcmFtKFwic2NvcGVPclRhc2tcIiwgXCJBbiBvcHRpb25hbCBzY29wZSBvciB0YXNrIHRvIHByaW50IG1vcmUgaW5mbyBhYm91dFwiKVxuICAgIC5hZGRPcHRpb25hbFBvc2l0aW9uYWxQYXJhbShcInRhc2tcIiwgXCJBbiBvcHRpb25hbCB0YXNrIHRvIHByaW50IG1vcmUgaW5mbyBhYm91dFwiKVxuICAgIC5zZXRBY3Rpb24oYXN5bmMgKHsgc2NvcGVPclRhc2ssIHRhc2s6IHRhc2tOYW1lIH0sIHsgdGFza3MsIHNjb3BlcywgdmVyc2lvbiB9KSA9PiB7XG4gICAgY29uc3QgaGVscFByaW50ZXIgPSBuZXcgSGVscFByaW50ZXJfMS5IZWxwUHJpbnRlcihjb25zdGFudHNfMS5IQVJESEFUX05BTUUsIGNvbnN0YW50c18xLkhBUkRIQVRfRVhFQ1VUQUJMRV9OQU1FLCB2ZXJzaW9uLCBoYXJkaGF0X3BhcmFtc18xLkhBUkRIQVRfUEFSQU1fREVGSU5JVElPTlMsIHRhc2tzLCBzY29wZXMpO1xuICAgIGlmIChzY29wZU9yVGFzayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIG5vIHBhcmFtcywgcHJpbnQgZ2xvYmFsIGhlbHBcbiAgICAgICAgaGVscFByaW50ZXIucHJpbnRHbG9iYWxIZWxwKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFza0RlZmluaXRpb24gPSB0YXNrc1tzY29wZU9yVGFza107XG4gICAgaWYgKHRhc2tEZWZpbml0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gdGhlIGZpcnN0IHBhcmFtIGlzIGEgdmFsaWQgdGFza1xuICAgICAgICBoZWxwUHJpbnRlci5wcmludFRhc2tIZWxwKHRhc2tzW3Njb3BlT3JUYXNrXSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2NvcGVEZWZpbml0aW9uID0gc2NvcGVzW3Njb3BlT3JUYXNrXTtcbiAgICBpZiAoc2NvcGVEZWZpbml0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gaWYgdGhlIGZpcnN0IHBhcmFtZXRlciBpcyBuZWl0aGVyIGEgdGFzayBub3IgYSBzY29wZSxcbiAgICAgICAgLy8gd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSB1c2VyIHdhcyB0cnlpbmcgdG8gcHJpbnQsXG4gICAgICAgIC8vIHNvIHdlIGFzc3VtZSB0aGF0IGl0J3MgYW4gdW5yZWNvZ25pemVkIHRhc2tcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5BUkdVTUVOVFMuVU5SRUNPR05JWkVEX1RBU0ssIHtcbiAgICAgICAgICAgIHRhc2s6IHNjb3BlT3JUYXNrLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRhc2tOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gaWYgdGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgbm90IHByZXNlbnQsIHByaW50IHNjb3BlIGhlbHBcbiAgICAgICAgaGVscFByaW50ZXIucHJpbnRTY29wZUhlbHAoc2NvcGVEZWZpbml0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzY29wZWRUYXNrRGVmaW5pdGlvbiA9IHNjb3BlRGVmaW5pdGlvbi50YXNrc1t0YXNrTmFtZV07XG4gICAgaWYgKHNjb3BlZFRhc2tEZWZpbml0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5BUkdVTUVOVFMuVU5SRUNPR05JWkVEX1NDT1BFRF9UQVNLLCB7XG4gICAgICAgICAgICBzY29wZTogc2NvcGVPclRhc2ssXG4gICAgICAgICAgICB0YXNrOiB0YXNrTmFtZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhlbHBQcmludGVyLnByaW50VGFza0hlbHAoc2NvcGVkVGFza0RlZmluaXRpb24pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/help.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/node.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/node.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst constants_1 = __webpack_require__(/*! ../internal/constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst construction_1 = __webpack_require__(/*! ../internal/core/providers/construction */ \"(ssr)/./node_modules/hardhat/internal/core/providers/construction.js\");\nconst util_1 = __webpack_require__(/*! ../internal/core/providers/util */ \"(ssr)/./node_modules/hardhat/internal/core/providers/util.js\");\nconst server_1 = __webpack_require__(/*! ../internal/hardhat-network/jsonrpc/server */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/jsonrpc/server.js\");\nconst reporter_1 = __webpack_require__(/*! ../internal/sentry/reporter */ \"(ssr)/./node_modules/hardhat/internal/sentry/reporter.js\");\nconst default_config_1 = __webpack_require__(/*! ../internal/core/config/default-config */ \"(ssr)/./node_modules/hardhat/internal/core/config/default-config.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\nconst watch_1 = __webpack_require__(/*! ./utils/watch */ \"(ssr)/./node_modules/hardhat/builtin-tasks/utils/watch.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:node\");\nfunction printDefaultConfigWarning() {\n    console.log(picocolors_1.default.bold(\"WARNING: These accounts, and their private keys, are publicly known.\"));\n    console.log(picocolors_1.default.bold(\"Any funds sent to them on Mainnet or any other live network WILL BE LOST.\"));\n}\nfunction logHardhatNetworkAccounts(networkConfig) {\n    const isDefaultConfig = !Array.isArray(networkConfig.accounts) &&\n        networkConfig.accounts.mnemonic === default_config_1.HARDHAT_NETWORK_MNEMONIC;\n    const { bytesToHex: bufferToHex, privateToAddress, toBytes, toChecksumAddress, } = __webpack_require__(/*! @nomicfoundation/ethereumjs-util */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-util/dist/esm/index.js\");\n    console.log(\"Accounts\");\n    console.log(\"========\");\n    if (isDefaultConfig) {\n        console.log();\n        printDefaultConfigWarning();\n        console.log();\n    }\n    const accounts = (0, util_1.normalizeHardhatNetworkAccountsConfig)(networkConfig.accounts);\n    for (const [index, account] of accounts.entries()) {\n        const address = toChecksumAddress(bufferToHex(privateToAddress(toBytes(account.privateKey))));\n        const balance = (BigInt(account.balance) / 10n ** 18n).toString(10);\n        let entry = `Account #${index}: ${address} (${balance} ETH)`;\n        if (isDefaultConfig) {\n            const privateKey = bufferToHex(toBytes(account.privateKey));\n            entry += `\nPrivate Key: ${privateKey}`;\n        }\n        console.log(entry);\n        console.log();\n    }\n    if (isDefaultConfig) {\n        printDefaultConfigWarning();\n        console.log();\n    }\n}\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_GET_PROVIDER)\n    .addOptionalParam(\"forkUrl\", undefined, undefined, config_env_1.types.string)\n    .addOptionalParam(\"forkBlockNumber\", undefined, undefined, config_env_1.types.int)\n    .setAction(async ({ forkBlockNumber: forkBlockNumberParam, forkUrl: forkUrlParam, }, { artifacts, config, network, userConfig }) => {\n    let provider = network.provider;\n    if (network.name !== constants_1.HARDHAT_NETWORK_NAME) {\n        log(`Creating hardhat provider for JSON-RPC server`);\n        provider = await (0, construction_1.createProvider)(config, constants_1.HARDHAT_NETWORK_NAME, artifacts);\n    }\n    const hardhatNetworkConfig = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n    const forkUrlConfig = hardhatNetworkConfig.forking?.url;\n    const forkBlockNumberConfig = hardhatNetworkConfig.forking?.blockNumber;\n    const forkUrl = forkUrlParam ?? forkUrlConfig;\n    const forkBlockNumber = forkBlockNumberParam ?? forkBlockNumberConfig;\n    // we throw an error if the user specified a forkBlockNumber but not a\n    // forkUrl\n    if (forkBlockNumber !== undefined && forkUrl === undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.NODE_FORK_BLOCK_NUMBER_WITHOUT_URL);\n    }\n    // if the url or the block is different to the one in the configuration,\n    // we use hardhat_reset to set the fork\n    if (forkUrl !== forkUrlConfig ||\n        forkBlockNumber !== forkBlockNumberConfig) {\n        await provider.request({\n            method: \"hardhat_reset\",\n            params: [\n                {\n                    forking: {\n                        jsonRpcUrl: forkUrl,\n                        blockNumber: forkBlockNumber,\n                    },\n                },\n            ],\n        });\n    }\n    const hardhatNetworkUserConfig = userConfig.networks?.[constants_1.HARDHAT_NETWORK_NAME] ?? {};\n    // enable logging\n    await provider.request({\n        method: \"hardhat_setLoggingEnabled\",\n        params: [hardhatNetworkUserConfig.loggingEnabled ?? true],\n    });\n    return provider;\n});\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_CREATE_SERVER)\n    .addParam(\"hostname\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"port\", undefined, undefined, config_env_1.types.int)\n    .addParam(\"provider\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ hostname, port, provider, }) => {\n    const serverConfig = {\n        hostname,\n        port,\n        provider,\n    };\n    const server = new server_1.JsonRpcServer(serverConfig);\n    return server;\n});\n/**\n * This task will be called when the server was successfully created, but it's\n * not ready for receiving requests yet.\n */\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_SERVER_CREATED)\n    .addParam(\"hostname\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"port\", undefined, undefined, config_env_1.types.int)\n    .addParam(\"provider\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"server\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({}) => {\n    // this task is meant to be overriden by plugin writers\n});\n/**\n * This subtask will be run when the server is ready to accept requests\n */\n(0, config_env_1.subtask)(task_names_1.TASK_NODE_SERVER_READY)\n    .addParam(\"address\", undefined, undefined, config_env_1.types.string)\n    .addParam(\"port\", undefined, undefined, config_env_1.types.int)\n    .addParam(\"provider\", undefined, undefined, config_env_1.types.any)\n    .addParam(\"server\", undefined, undefined, config_env_1.types.any)\n    .setAction(async ({ address, port, }, { config }) => {\n    console.log(picocolors_1.default.green(`Started HTTP and WebSocket JSON-RPC server at http://${address}:${port}/`));\n    console.log();\n    const networkConfig = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n    logHardhatNetworkAccounts(networkConfig);\n});\n(0, config_env_1.task)(task_names_1.TASK_NODE, \"Starts a JSON-RPC server on top of Hardhat Network\")\n    .addOptionalParam(\"hostname\", \"The host to which to bind to for new connections (Defaults to 127.0.0.1 running locally, and 0.0.0.0 in Docker)\", undefined, config_env_1.types.string)\n    .addOptionalParam(\"port\", \"The port on which to listen for new connections\", 8545, config_env_1.types.int)\n    .addOptionalParam(\"fork\", \"The URL of the JSON-RPC server to fork from\", undefined, config_env_1.types.string)\n    .addOptionalParam(\"forkBlockNumber\", \"The block number to fork from\", undefined, config_env_1.types.int)\n    .setAction(async ({ forkBlockNumber, fork: forkUrl, hostname: hostnameParam, port, }, { config, hardhatArguments, network, run }) => {\n    // we throw if the user specified a network argument and it's not hardhat\n    if (network.name !== constants_1.HARDHAT_NETWORK_NAME &&\n        hardhatArguments.network !== undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.JSONRPC_UNSUPPORTED_NETWORK);\n    }\n    try {\n        const provider = await run(task_names_1.TASK_NODE_GET_PROVIDER, {\n            forkBlockNumber,\n            forkUrl,\n        });\n        // the default hostname is \"127.0.0.1\" unless we are inside a docker\n        // container, in that case we use \"0.0.0.0\"\n        let hostname;\n        if (hostnameParam !== undefined) {\n            hostname = hostnameParam;\n        }\n        else {\n            const insideDocker = fs_extra_1.default.existsSync(\"/.dockerenv\");\n            if (insideDocker) {\n                hostname = \"0.0.0.0\";\n            }\n            else {\n                hostname = \"127.0.0.1\";\n            }\n        }\n        const server = await run(task_names_1.TASK_NODE_CREATE_SERVER, {\n            hostname,\n            port,\n            provider,\n        });\n        await run(task_names_1.TASK_NODE_SERVER_CREATED, {\n            hostname,\n            port,\n            provider,\n            server,\n        });\n        const { port: actualPort, address } = await server.listen();\n        let watcher;\n        try {\n            watcher = await (0, watch_1.watchCompilerOutput)(provider, config.paths);\n        }\n        catch (error) {\n            console.warn(picocolors_1.default.yellow(\"There was a problem watching the compiler output, changes in the contracts won't be reflected in the Hardhat Network. Run Hardhat with --verbose to learn more.\"));\n            log(\"Compilation output can't be watched. Please report this to help us improve Hardhat.\\n\", error);\n            if (error instanceof Error) {\n                reporter_1.Reporter.reportError(error);\n            }\n        }\n        await run(task_names_1.TASK_NODE_SERVER_READY, {\n            address,\n            port: actualPort,\n            provider,\n            server,\n        });\n        await server.waitUntilClosed();\n        await watcher?.close();\n    }\n    catch (error) {\n        if (errors_1.HardhatError.isHardhatError(error)) {\n            throw error;\n        }\n        if (error instanceof Error) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.JSONRPC_SERVER_ERROR, {\n                error: error.message,\n            }, error);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n    }\n});\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/run.js":
/*!***************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/run.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst scripts_runner_1 = __webpack_require__(/*! ../internal/util/scripts-runner */ \"(ssr)/./node_modules/hardhat/internal/util/scripts-runner.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:run\");\n(0, config_env_1.task)(task_names_1.TASK_RUN, \"Runs a user-defined script after compiling the project\")\n    .addPositionalParam(\"script\", \"A js file to be run within hardhat's environment\")\n    .addFlag(\"noCompile\", \"Don't compile before running this task\")\n    .setAction(async ({ script, noCompile }, { run, hardhatArguments }) => {\n    if (!(await fs_extra_1.default.pathExists(script))) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.RUN_FILE_NOT_FOUND, {\n            script,\n        });\n    }\n    if (!noCompile) {\n        await run(task_names_1.TASK_COMPILE, { quiet: true });\n    }\n    log(`Running script ${script} in a subprocess so we can wait for it to complete`);\n    try {\n        process.exitCode = await (0, scripts_runner_1.runScriptWithHardhat)(hardhatArguments, script);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.RUN_SCRIPT_ERROR, {\n                script,\n                error: error.message,\n            }, error);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n    }\n});\n//# sourceMappingURL=run.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL3J1bi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFPO0FBQy9DLG1DQUFtQyxtQkFBTyxDQUFDLDREQUFVO0FBQ3JELHFCQUFxQixtQkFBTyxDQUFDLDJHQUFvQztBQUNqRSxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBeUI7QUFDbEQsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQThCO0FBQzVELHlCQUF5QixtQkFBTyxDQUFDLHFHQUFpQztBQUNsRSxxQkFBcUIsbUJBQU8sQ0FBQyw4RUFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQkFBbUIsSUFBSSx1QkFBdUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwrQ0FBK0MsYUFBYTtBQUM1RDtBQUNBLDBCQUEwQixRQUFRO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvYnVpbHRpbi10YXNrcy9ydW4uanM/NWU4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGZzX2V4dHJhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZzLWV4dHJhXCIpKTtcbmNvbnN0IGNvbmZpZ19lbnZfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9jb3JlL2NvbmZpZy9jb25maWctZW52XCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvcmUvZXJyb3JzLWxpc3RcIik7XG5jb25zdCBzY3JpcHRzX3J1bm5lcl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL3V0aWwvc2NyaXB0cy1ydW5uZXJcIik7XG5jb25zdCB0YXNrX25hbWVzXzEgPSByZXF1aXJlKFwiLi90YXNrLW5hbWVzXCIpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJoYXJkaGF0OmNvcmU6dGFza3M6cnVuXCIpO1xuKDAsIGNvbmZpZ19lbnZfMS50YXNrKSh0YXNrX25hbWVzXzEuVEFTS19SVU4sIFwiUnVucyBhIHVzZXItZGVmaW5lZCBzY3JpcHQgYWZ0ZXIgY29tcGlsaW5nIHRoZSBwcm9qZWN0XCIpXG4gICAgLmFkZFBvc2l0aW9uYWxQYXJhbShcInNjcmlwdFwiLCBcIkEganMgZmlsZSB0byBiZSBydW4gd2l0aGluIGhhcmRoYXQncyBlbnZpcm9ubWVudFwiKVxuICAgIC5hZGRGbGFnKFwibm9Db21waWxlXCIsIFwiRG9uJ3QgY29tcGlsZSBiZWZvcmUgcnVubmluZyB0aGlzIHRhc2tcIilcbiAgICAuc2V0QWN0aW9uKGFzeW5jICh7IHNjcmlwdCwgbm9Db21waWxlIH0sIHsgcnVuLCBoYXJkaGF0QXJndW1lbnRzIH0pID0+IHtcbiAgICBpZiAoIShhd2FpdCBmc19leHRyYV8xLmRlZmF1bHQucGF0aEV4aXN0cyhzY3JpcHQpKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLkJVSUxUSU5fVEFTS1MuUlVOX0ZJTEVfTk9UX0ZPVU5ELCB7XG4gICAgICAgICAgICBzY3JpcHQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIW5vQ29tcGlsZSkge1xuICAgICAgICBhd2FpdCBydW4odGFza19uYW1lc18xLlRBU0tfQ09NUElMRSwgeyBxdWlldDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgbG9nKGBSdW5uaW5nIHNjcmlwdCAke3NjcmlwdH0gaW4gYSBzdWJwcm9jZXNzIHNvIHdlIGNhbiB3YWl0IGZvciBpdCB0byBjb21wbGV0ZWApO1xuICAgIHRyeSB7XG4gICAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSBhd2FpdCAoMCwgc2NyaXB0c19ydW5uZXJfMS5ydW5TY3JpcHRXaXRoSGFyZGhhdCkoaGFyZGhhdEFyZ3VtZW50cywgc2NyaXB0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLkJVSUxUSU5fVEFTS1MuUlVOX1NDUklQVF9FUlJPUiwge1xuICAgICAgICAgICAgICAgIHNjcmlwdCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgIH0sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQG5vbWljZm91bmRhdGlvbi9oYXJkaGF0LWludGVybmFsLXJ1bGVzL29ubHktaGFyZGhhdC1lcnJvclxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/run.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js":
/*!**********************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/task-names.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TASK_TEST = exports.TASK_NODE_SERVER_READY = exports.TASK_NODE_SERVER_CREATED = exports.TASK_NODE_CREATE_SERVER = exports.TASK_NODE_GET_PROVIDER = exports.TASK_NODE = exports.TASK_RUN = exports.TASK_HELP = exports.TASK_FLATTEN_GET_DEPENDENCY_GRAPH = exports.TASK_FLATTEN_GET_FLATTENED_SOURCE_AND_METADATA = exports.TASK_FLATTEN_GET_FLATTENED_SOURCE = exports.TASK_FLATTEN = exports.TASK_CONSOLE = exports.TASK_COMPILE_REMOVE_OBSOLETE_ARTIFACTS = exports.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_RESULT = exports.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS_FAILURE_REASONS = exports.TASK_COMPILE_SOLIDITY_HANDLE_COMPILATION_JOBS_FAILURES = exports.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT = exports.TASK_COMPILE_SOLIDITY_EMIT_ARTIFACTS = exports.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_ERRORS = exports.TASK_COMPILE_SOLIDITY_CHECK_ERRORS = exports.TASK_COMPILE_SOLIDITY_RUN_SOLC = exports.TASK_COMPILE_SOLIDITY_RUN_SOLCJS = exports.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_END = exports.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_START = exports.TASK_COMPILE_SOLIDITY_GET_SOLC_BUILD = exports.TASK_COMPILE_SOLIDITY_COMPILE_SOLC = exports.TASK_COMPILE_SOLIDITY_COMPILE = exports.TASK_COMPILE_SOLIDITY_GET_COMPILER_INPUT = exports.TASK_COMPILE_SOLIDITY_COMPILE_JOBS = exports.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_END = exports.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_START = exports.TASK_COMPILE_SOLIDITY_COMPILE_JOB = exports.TASK_COMPILE_SOLIDITY_LOG_NOTHING_TO_COMPILE = exports.TASK_COMPILE_SOLIDITY_MERGE_COMPILATION_JOBS = exports.TASK_COMPILE_SOLIDITY_FILTER_COMPILATION_JOBS = exports.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOB_FOR_FILE = exports.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS = exports.TASK_COMPILE_SOLIDITY_GET_DEPENDENCY_GRAPH = exports.TASK_COMPILE_GET_REMAPPINGS = exports.TASK_COMPILE_TRANSFORM_IMPORT_NAME = exports.TASK_COMPILE_SOLIDITY_READ_FILE = exports.TASK_COMPILE_SOLIDITY_GET_SOURCE_NAMES = exports.TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS = exports.TASK_COMPILE_SOLIDITY = exports.TASK_COMPILE_GET_COMPILATION_TASKS = exports.TASK_COMPILE = exports.TASK_CLEAN_GLOBAL = exports.TASK_CLEAN = exports.TASK_CHECK = void 0;\nexports.TASK_TEST_SETUP_TEST_ENVIRONMENT = exports.TASK_TEST_GET_TEST_FILES = exports.TASK_TEST_RUN_MOCHA_TESTS = exports.TASK_TEST_RUN_SHOW_FORK_RECOMMENDATIONS = void 0;\nexports.TASK_CHECK = \"check\";\nexports.TASK_CLEAN = \"clean\";\nexports.TASK_CLEAN_GLOBAL = \"clean:global\";\nexports.TASK_COMPILE = \"compile\";\nexports.TASK_COMPILE_GET_COMPILATION_TASKS = \"compile:get-compilation-tasks\";\nexports.TASK_COMPILE_SOLIDITY = \"compile:solidity\";\nexports.TASK_COMPILE_SOLIDITY_GET_SOURCE_PATHS = \"compile:solidity:get-source-paths\";\nexports.TASK_COMPILE_SOLIDITY_GET_SOURCE_NAMES = \"compile:solidity:get-source-names\";\nexports.TASK_COMPILE_SOLIDITY_READ_FILE = \"compile:solidity:read-file\";\nexports.TASK_COMPILE_TRANSFORM_IMPORT_NAME = \"compile:solidity:transform-import-name\";\nexports.TASK_COMPILE_GET_REMAPPINGS = \"compile:solidity:get-remappings\";\nexports.TASK_COMPILE_SOLIDITY_GET_DEPENDENCY_GRAPH = \"compile:solidity:get-dependency-graph\";\nexports.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS = \"compile:solidity:get-compilation-jobs\";\nexports.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOB_FOR_FILE = \"compile:solidity:get-compilation-job-for-file\";\nexports.TASK_COMPILE_SOLIDITY_FILTER_COMPILATION_JOBS = \"compile:solidity:filter-compilation-jobs\";\nexports.TASK_COMPILE_SOLIDITY_MERGE_COMPILATION_JOBS = \"compile:solidity:merge-compilation-jobs\";\nexports.TASK_COMPILE_SOLIDITY_LOG_NOTHING_TO_COMPILE = \"compile:solidity:log:nothing-to-compile\";\nexports.TASK_COMPILE_SOLIDITY_COMPILE_JOB = \"compile:solidity:compile-job\";\nexports.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_START = \"compile:solidity:log:run-compiler-start\";\nexports.TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_END = \"compile:solidity:log:run-compiler-end\";\nexports.TASK_COMPILE_SOLIDITY_COMPILE_JOBS = \"compile:solidity:compile-jobs\";\nexports.TASK_COMPILE_SOLIDITY_GET_COMPILER_INPUT = \"compile:solidity:get-compiler-input\";\nexports.TASK_COMPILE_SOLIDITY_COMPILE = \"compile:solidity:compile\";\nexports.TASK_COMPILE_SOLIDITY_COMPILE_SOLC = \"compile:solidity:solc:compile\";\nexports.TASK_COMPILE_SOLIDITY_GET_SOLC_BUILD = \"compile:solidity:solc:get-build\";\nexports.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_START = \"compile:solidity:log:download-compiler-start\";\nexports.TASK_COMPILE_SOLIDITY_LOG_DOWNLOAD_COMPILER_END = \"compile:solidity:log:download-compiler-end\";\nexports.TASK_COMPILE_SOLIDITY_RUN_SOLCJS = \"compile:solidity:solcjs:run\";\nexports.TASK_COMPILE_SOLIDITY_RUN_SOLC = \"compile:solidity:solc:run\";\nexports.TASK_COMPILE_SOLIDITY_CHECK_ERRORS = \"compile:solidity:check-errors\";\nexports.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_ERRORS = \"compile:solidity:log:compilation-errors\";\nexports.TASK_COMPILE_SOLIDITY_EMIT_ARTIFACTS = \"compile:solidity:emit-artifacts\";\nexports.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT = \"compile:solidity:get-artifact-from-compilation-output\";\nexports.TASK_COMPILE_SOLIDITY_HANDLE_COMPILATION_JOBS_FAILURES = \"compile:solidity:handle-compilation-jobs-failures\";\nexports.TASK_COMPILE_SOLIDITY_GET_COMPILATION_JOBS_FAILURE_REASONS = \"compile:solidity:get-compilation-jobs-failure-reasons\";\nexports.TASK_COMPILE_SOLIDITY_LOG_COMPILATION_RESULT = \"compile:solidity:log:compilation-result\";\nexports.TASK_COMPILE_REMOVE_OBSOLETE_ARTIFACTS = \"compile:remove-obsolete-artifacts\";\nexports.TASK_CONSOLE = \"console\";\nexports.TASK_FLATTEN = \"flatten\";\nexports.TASK_FLATTEN_GET_FLATTENED_SOURCE = \"flatten:get-flattened-sources\";\nexports.TASK_FLATTEN_GET_FLATTENED_SOURCE_AND_METADATA = \"flatten:get-flattened-sources-and-metadata\";\nexports.TASK_FLATTEN_GET_DEPENDENCY_GRAPH = \"flatten:get-dependency-graph\";\nexports.TASK_HELP = \"help\";\nexports.TASK_RUN = \"run\";\nexports.TASK_NODE = \"node\";\nexports.TASK_NODE_GET_PROVIDER = \"node:get-provider\";\nexports.TASK_NODE_CREATE_SERVER = \"node:create-server\";\nexports.TASK_NODE_SERVER_CREATED = \"node:server-created\";\nexports.TASK_NODE_SERVER_READY = \"node:server-ready\";\nexports.TASK_TEST = \"test\";\nexports.TASK_TEST_RUN_SHOW_FORK_RECOMMENDATIONS = \"test:show-fork-recommendations\";\nexports.TASK_TEST_RUN_MOCHA_TESTS = \"test:run-mocha-tests\";\nexports.TASK_TEST_GET_TEST_FILES = \"test:get-test-files\";\nexports.TASK_TEST_SETUP_TEST_ENVIRONMENT = \"test:setup-test-environment\";\n//# sourceMappingURL=task-names.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/test.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/test.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst constants_1 = __webpack_require__(/*! ../internal/constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst typescript_support_1 = __webpack_require__(/*! ../internal/core/typescript-support */ \"(ssr)/./node_modules/hardhat/internal/core/typescript-support.js\");\nconst disk_cache_1 = __webpack_require__(/*! ../internal/hardhat-network/provider/utils/disk-cache */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/disk-cache.js\");\nconst fork_recomendations_banner_1 = __webpack_require__(/*! ../internal/hardhat-network/provider/utils/fork-recomendations-banner */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/fork-recomendations-banner.js\");\nconst strings_1 = __webpack_require__(/*! ../internal/util/strings */ \"(ssr)/./node_modules/hardhat/internal/util/strings.js\");\nconst fs_utils_1 = __webpack_require__(/*! ../internal/util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../internal/util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst task_names_1 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_GET_TEST_FILES)\n    .addOptionalVariadicPositionalParam(\"testFiles\", \"An optional list of files to test\", [])\n    .setAction(async ({ testFiles }, { config }) => {\n    if (testFiles.length !== 0) {\n        const testFilesAbsolutePaths = testFiles.map((x) => path_1.default.resolve(process.cwd(), x));\n        return testFilesAbsolutePaths;\n    }\n    const jsFiles = await (0, fs_utils_1.getAllFilesMatching)(config.paths.tests, typescript_support_1.isJavascriptFile);\n    if (!(0, typescript_support_1.isRunningWithTypescript)(config)) {\n        return jsFiles;\n    }\n    const tsFiles = await (0, fs_utils_1.getAllFilesMatching)(config.paths.tests, typescript_support_1.isTypescriptFile);\n    return [...jsFiles, ...tsFiles];\n});\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_SETUP_TEST_ENVIRONMENT, async () => { });\nlet testsAlreadyRun = false;\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_RUN_MOCHA_TESTS)\n    .addFlag(\"parallel\", \"Run tests in parallel\")\n    .addFlag(\"bail\", \"Stop running tests after the first test failure\")\n    .addOptionalParam(\"grep\", \"Only run tests matching the given string or regexp\")\n    .addOptionalVariadicPositionalParam(\"testFiles\", \"An optional list of files to test\", [])\n    .setAction(async (taskArgs, { config }) => {\n    const { default: Mocha } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! mocha */ \"(ssr)/./node_modules/mocha/index.js\")));\n    const mochaConfig = { ...config.mocha };\n    if (taskArgs.grep !== undefined) {\n        mochaConfig.grep = taskArgs.grep;\n    }\n    if (taskArgs.bail) {\n        mochaConfig.bail = true;\n    }\n    if (taskArgs.parallel) {\n        mochaConfig.parallel = true;\n    }\n    if (mochaConfig.parallel === true) {\n        const mochaRequire = mochaConfig.require ?? [];\n        if (!mochaRequire.includes(\"hardhat/register\")) {\n            mochaRequire.push(\"hardhat/register\");\n        }\n        mochaConfig.require = mochaRequire;\n    }\n    const mocha = new Mocha(mochaConfig);\n    taskArgs.testFiles.forEach((file) => mocha.addFile(file));\n    // if the project is of type \"module\" or if there's some ESM test file,\n    // we call loadFilesAsync to enable Mocha's ESM support\n    const projectPackageJson = await (0, packageInfo_1.getProjectPackageJson)();\n    const isTypeModule = projectPackageJson.type === \"module\";\n    const hasEsmTest = taskArgs.testFiles.some((file) => file.endsWith(\".mjs\"));\n    if (isTypeModule || hasEsmTest) {\n        // Because of the way the ESM cache works, loadFilesAsync doesn't work\n        // correctly if used twice within the same process, so we throw an error\n        // in that case\n        if (testsAlreadyRun) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.BUILTIN_TASKS.TEST_TASK_ESM_TESTS_RUN_TWICE);\n        }\n        testsAlreadyRun = true;\n        // This instructs Mocha to use the more verbose file loading infrastructure\n        // which supports both ESM and CJS\n        await mocha.loadFilesAsync();\n    }\n    const testFailures = await new Promise((resolve) => {\n        mocha.run(resolve);\n    });\n    mocha.dispose();\n    return testFailures;\n});\n(0, config_env_1.subtask)(task_names_1.TASK_TEST_RUN_SHOW_FORK_RECOMMENDATIONS).setAction(async (_, { config, network }) => {\n    if (network.name !== constants_1.HARDHAT_NETWORK_NAME) {\n        return;\n    }\n    const forkCache = (0, disk_cache_1.getForkCacheDirPath)(config.paths);\n    await (0, fork_recomendations_banner_1.showForkRecommendationsBannerIfNecessary)(network.config, forkCache);\n});\n(0, config_env_1.task)(task_names_1.TASK_TEST, \"Runs mocha tests\")\n    .addOptionalVariadicPositionalParam(\"testFiles\", \"An optional list of files to test\", [])\n    .addFlag(\"noCompile\", \"Don't compile before running this task\")\n    .addFlag(\"parallel\", \"Run tests in parallel\")\n    .addFlag(\"bail\", \"Stop running tests after the first test failure\")\n    .addOptionalParam(\"grep\", \"Only run tests matching the given string or regexp\")\n    .setAction(async ({ testFiles, noCompile, parallel, bail, grep, }, { run, network }) => {\n    if (!noCompile) {\n        await run(task_names_1.TASK_COMPILE, { quiet: true });\n    }\n    const files = await run(task_names_1.TASK_TEST_GET_TEST_FILES, { testFiles });\n    await run(task_names_1.TASK_TEST_SETUP_TEST_ENVIRONMENT);\n    await run(task_names_1.TASK_TEST_RUN_SHOW_FORK_RECOMMENDATIONS);\n    const testFailures = await run(task_names_1.TASK_TEST_RUN_MOCHA_TESTS, {\n        testFiles: files,\n        parallel,\n        bail,\n        grep,\n    });\n    if (network.name === constants_1.HARDHAT_NETWORK_NAME) {\n        const stackTracesFailures = await network.provider.send(\"hardhat_getStackTraceFailuresCount\");\n        if (stackTracesFailures !== 0) {\n            console.warn(picocolors_1.default.yellow(`Failed to generate ${stackTracesFailures} ${(0, strings_1.pluralize)(stackTracesFailures, \"stack trace\")}. Run Hardhat with --verbose to learn more.`));\n        }\n    }\n    process.exitCode = testFailures;\n    return testFailures;\n});\n//# sourceMappingURL=test.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/test.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/utils/solidity-files-cache.js":
/*!**************************************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/utils/solidity-files-cache.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getSolidityFilesCachePath = exports.SolidityFilesCache = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst t = __importStar(__webpack_require__(/*! io-ts */ \"(ssr)/./node_modules/io-ts/es6/index.js\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst constants_1 = __webpack_require__(/*! ../../internal/constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:tasks:compile:cache\");\nconst FORMAT_VERSION = \"hh-sol-cache-2\";\nconst CacheEntryCodec = t.type({\n    lastModificationDate: t.number,\n    contentHash: t.string,\n    sourceName: t.string,\n    solcConfig: t.any,\n    imports: t.array(t.string),\n    versionPragmas: t.array(t.string),\n    artifacts: t.array(t.string),\n});\nconst CacheCodec = t.type({\n    _format: t.string,\n    files: t.record(t.string, CacheEntryCodec),\n});\nclass SolidityFilesCache {\n    static createEmpty() {\n        return new SolidityFilesCache({\n            _format: FORMAT_VERSION,\n            files: {},\n        });\n    }\n    static async readFromFile(solidityFilesCachePath) {\n        let cacheRaw = {\n            _format: FORMAT_VERSION,\n            files: {},\n        };\n        if (await fs_extra_1.default.pathExists(solidityFilesCachePath)) {\n            cacheRaw = await fs_extra_1.default.readJson(solidityFilesCachePath);\n        }\n        const result = CacheCodec.decode(cacheRaw);\n        if (result.isRight()) {\n            const solidityFilesCache = new SolidityFilesCache(result.value);\n            await solidityFilesCache.removeNonExistingFiles();\n            return solidityFilesCache;\n        }\n        log(\"There was a problem reading the cache\");\n        return new SolidityFilesCache({\n            _format: FORMAT_VERSION,\n            files: {},\n        });\n    }\n    constructor(_cache) {\n        this._cache = _cache;\n    }\n    async removeNonExistingFiles() {\n        await Promise.all(Object.keys(this._cache.files).map(async (absolutePath) => {\n            if (!(await fs_extra_1.default.pathExists(absolutePath))) {\n                this.removeEntry(absolutePath);\n            }\n        }));\n    }\n    async writeToFile(solidityFilesCachePath) {\n        await fs_extra_1.default.outputJson(solidityFilesCachePath, this._cache, {\n            spaces: 2,\n        });\n    }\n    addFile(absolutePath, entry) {\n        this._cache.files[absolutePath] = entry;\n    }\n    getEntries() {\n        return Object.values(this._cache.files);\n    }\n    getEntry(file) {\n        return this._cache.files[file];\n    }\n    removeEntry(file) {\n        delete this._cache.files[file];\n    }\n    hasFileChanged(absolutePath, contentHash, solcConfig) {\n        const isEqual = __webpack_require__(/*! lodash/isEqual */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n        const cacheEntry = this.getEntry(absolutePath);\n        if (cacheEntry === undefined) {\n            // new file or no cache available, assume it's new\n            return true;\n        }\n        if (cacheEntry.contentHash !== contentHash) {\n            return true;\n        }\n        if (solcConfig !== undefined &&\n            !isEqual(solcConfig, cacheEntry.solcConfig)) {\n            return true;\n        }\n        return false;\n    }\n}\nexports.SolidityFilesCache = SolidityFilesCache;\nfunction getSolidityFilesCachePath(paths) {\n    return path.join(paths.cache, constants_1.SOLIDITY_FILES_CACHE_FILENAME);\n}\nexports.getSolidityFilesCachePath = getSolidityFilesCachePath;\n//# sourceMappingURL=solidity-files-cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/utils/solidity-files-cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/utils/watch.js":
/*!***********************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/utils/watch.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.watchCompilerOutput = void 0;\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst constants_1 = __webpack_require__(/*! ../../internal/constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst reporter_1 = __webpack_require__(/*! ../../internal/sentry/reporter */ \"(ssr)/./node_modules/hardhat/internal/sentry/reporter.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:compilation-watcher\");\nasync function watchCompilerOutput(provider, paths) {\n    const chokidar = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! chokidar */ \"(ssr)/./node_modules/hardhat/node_modules/chokidar/index.js\")));\n    const buildInfoDir = path.join(paths.artifacts, constants_1.BUILD_INFO_DIR_NAME);\n    const addCompilationResult = async (buildInfo) => {\n        try {\n            log(\"Adding new compilation result to the node\");\n            const { input, output, solcVersion } = await fs_extra_1.default.readJSON(buildInfo, {\n                encoding: \"utf8\",\n            });\n            await provider.request({\n                method: \"hardhat_addCompilationResult\",\n                params: [solcVersion, input, output],\n            });\n        }\n        catch (error) {\n            console.warn(picocolors_1.default.yellow(\"There was a problem adding the new compiler result. Run Hardhat with --verbose to learn more.\"));\n            log(\"Last compilation result couldn't be added. Please report this to help us improve Hardhat.\\n\", error);\n            if (error instanceof Error) {\n                reporter_1.Reporter.reportError(error);\n            }\n        }\n    };\n    log(`Watching changes on '${buildInfoDir}'`);\n    return chokidar\n        .watch(buildInfoDir, {\n        ignoreInitial: true,\n        awaitWriteFinish: {\n            stabilityThreshold: 250,\n            pollInterval: 50,\n        },\n    })\n        .on(\"add\", addCompilationResult);\n}\nexports.watchCompilerOutput = watchCompilerOutput;\n//# sourceMappingURL=watch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL3V0aWxzL3dhdGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQixxQ0FBcUMsbUJBQU8sQ0FBQyxpRUFBWTtBQUN6RCxnQ0FBZ0MsbUJBQU8sQ0FBQyxzREFBTztBQUMvQyxtQ0FBbUMsbUJBQU8sQ0FBQyw0REFBVTtBQUNyRCwwQkFBMEIsbUJBQU8sQ0FBQyxrQkFBTTtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQyxvRkFBMEI7QUFDdEQsbUJBQW1CLG1CQUFPLENBQUMsZ0dBQWdDO0FBQzNEO0FBQ0E7QUFDQSxxRUFBcUUsbUJBQU8sQ0FBQyw2RUFBVTtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxhQUFhO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL3V0aWxzL3dhdGNoLmpzPzUwZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2F0Y2hDb21waWxlck91dHB1dCA9IHZvaWQgMDtcbmNvbnN0IHBpY29jb2xvcnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGljb2NvbG9yc1wiKSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBmc19leHRyYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmcy1leHRyYVwiKSk7XG5jb25zdCBwYXRoID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJwYXRoXCIpKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uL2ludGVybmFsL2NvbnN0YW50c1wiKTtcbmNvbnN0IHJlcG9ydGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vaW50ZXJuYWwvc2VudHJ5L3JlcG9ydGVyXCIpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJoYXJkaGF0OmNvcmU6Y29tcGlsYXRpb24td2F0Y2hlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIHdhdGNoQ29tcGlsZXJPdXRwdXQocHJvdmlkZXIsIHBhdGhzKSB7XG4gICAgY29uc3QgY2hva2lkYXIgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiY2hva2lkYXJcIikpKTtcbiAgICBjb25zdCBidWlsZEluZm9EaXIgPSBwYXRoLmpvaW4ocGF0aHMuYXJ0aWZhY3RzLCBjb25zdGFudHNfMS5CVUlMRF9JTkZPX0RJUl9OQU1FKTtcbiAgICBjb25zdCBhZGRDb21waWxhdGlvblJlc3VsdCA9IGFzeW5jIChidWlsZEluZm8pID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvZyhcIkFkZGluZyBuZXcgY29tcGlsYXRpb24gcmVzdWx0IHRvIHRoZSBub2RlXCIpO1xuICAgICAgICAgICAgY29uc3QgeyBpbnB1dCwgb3V0cHV0LCBzb2xjVmVyc2lvbiB9ID0gYXdhaXQgZnNfZXh0cmFfMS5kZWZhdWx0LnJlYWRKU09OKGJ1aWxkSW5mbywge1xuICAgICAgICAgICAgICAgIGVuY29kaW5nOiBcInV0ZjhcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgcHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcImhhcmRoYXRfYWRkQ29tcGlsYXRpb25SZXN1bHRcIixcbiAgICAgICAgICAgICAgICBwYXJhbXM6IFtzb2xjVmVyc2lvbiwgaW5wdXQsIG91dHB1dF0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihwaWNvY29sb3JzXzEuZGVmYXVsdC55ZWxsb3coXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGFkZGluZyB0aGUgbmV3IGNvbXBpbGVyIHJlc3VsdC4gUnVuIEhhcmRoYXQgd2l0aCAtLXZlcmJvc2UgdG8gbGVhcm4gbW9yZS5cIikpO1xuICAgICAgICAgICAgbG9nKFwiTGFzdCBjb21waWxhdGlvbiByZXN1bHQgY291bGRuJ3QgYmUgYWRkZWQuIFBsZWFzZSByZXBvcnQgdGhpcyB0byBoZWxwIHVzIGltcHJvdmUgSGFyZGhhdC5cXG5cIiwgZXJyb3IpO1xuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXBvcnRlcl8xLlJlcG9ydGVyLnJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgbG9nKGBXYXRjaGluZyBjaGFuZ2VzIG9uICcke2J1aWxkSW5mb0Rpcn0nYCk7XG4gICAgcmV0dXJuIGNob2tpZGFyXG4gICAgICAgIC53YXRjaChidWlsZEluZm9EaXIsIHtcbiAgICAgICAgaWdub3JlSW5pdGlhbDogdHJ1ZSxcbiAgICAgICAgYXdhaXRXcml0ZUZpbmlzaDoge1xuICAgICAgICAgICAgc3RhYmlsaXR5VGhyZXNob2xkOiAyNTAsXG4gICAgICAgICAgICBwb2xsSW50ZXJ2YWw6IDUwLFxuICAgICAgICB9LFxuICAgIH0pXG4gICAgICAgIC5vbihcImFkZFwiLCBhZGRDb21waWxhdGlvblJlc3VsdCk7XG59XG5leHBvcnRzLndhdGNoQ29tcGlsZXJPdXRwdXQgPSB3YXRjaENvbXBpbGVyT3V0cHV0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2F0Y2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/utils/watch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/builtin-tasks/vars.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/builtin-tasks/vars.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst config_env_1 = __webpack_require__(/*! ../internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst varsScope = (0, config_env_1.scope)(\"vars\", \"Manage your configuration variables\");\nvarsScope\n    .task(\"set\", \"Set the value of a configuration variable\")\n    .addPositionalParam(\"var\", \"The name of the variable\")\n    .addOptionalPositionalParam(\"value\", \"The value to store. Omit to be prompted for it.\")\n    .setAction(async () => {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope\n    .task(\"get\", \"Get the value of a configuration variable\")\n    .addPositionalParam(\"var\", \"The name of the variable\")\n    .setAction(async () => {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope\n    .task(\"list\", \"List all the configuration variables\")\n    .setAction(async () => {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope\n    .task(\"delete\", \"Delete a configuration variable\")\n    .addPositionalParam(\"var\", \"The name of the variable\")\n    .setAction(async () => {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope\n    .task(\"path\", \"Show the path of the file where all the configuration variables are stored\")\n    .setAction(async () => {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\nvarsScope\n    .task(\"setup\", \"Show how to setup the configuration variables used by this project\")\n    .setAction(async () => {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.ONLY_MANAGED_IN_CLI);\n});\n//# sourceMappingURL=vars.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9idWlsdGluLXRhc2tzL3ZhcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMscUZBQXlCO0FBQ2xELHFCQUFxQixtQkFBTyxDQUFDLDJHQUFvQztBQUNqRSxzQkFBc0IsbUJBQU8sQ0FBQywrRkFBOEI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2J1aWx0aW4tdGFza3MvdmFycy5qcz9kNTU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9lcnJvcnNcIik7XG5jb25zdCBjb25maWdfZW52XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9jb25maWcvY29uZmlnLWVudlwiKTtcbmNvbnN0IGVycm9yc19saXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9lcnJvcnMtbGlzdFwiKTtcbmNvbnN0IHZhcnNTY29wZSA9ICgwLCBjb25maWdfZW52XzEuc2NvcGUpKFwidmFyc1wiLCBcIk1hbmFnZSB5b3VyIGNvbmZpZ3VyYXRpb24gdmFyaWFibGVzXCIpO1xudmFyc1Njb3BlXG4gICAgLnRhc2soXCJzZXRcIiwgXCJTZXQgdGhlIHZhbHVlIG9mIGEgY29uZmlndXJhdGlvbiB2YXJpYWJsZVwiKVxuICAgIC5hZGRQb3NpdGlvbmFsUGFyYW0oXCJ2YXJcIiwgXCJUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGVcIilcbiAgICAuYWRkT3B0aW9uYWxQb3NpdGlvbmFsUGFyYW0oXCJ2YWx1ZVwiLCBcIlRoZSB2YWx1ZSB0byBzdG9yZS4gT21pdCB0byBiZSBwcm9tcHRlZCBmb3IgaXQuXCIpXG4gICAgLnNldEFjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5WQVJTLk9OTFlfTUFOQUdFRF9JTl9DTEkpO1xufSk7XG52YXJzU2NvcGVcbiAgICAudGFzayhcImdldFwiLCBcIkdldCB0aGUgdmFsdWUgb2YgYSBjb25maWd1cmF0aW9uIHZhcmlhYmxlXCIpXG4gICAgLmFkZFBvc2l0aW9uYWxQYXJhbShcInZhclwiLCBcIlRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZVwiKVxuICAgIC5zZXRBY3Rpb24oYXN5bmMgKCkgPT4ge1xuICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuVkFSUy5PTkxZX01BTkFHRURfSU5fQ0xJKTtcbn0pO1xudmFyc1Njb3BlXG4gICAgLnRhc2soXCJsaXN0XCIsIFwiTGlzdCBhbGwgdGhlIGNvbmZpZ3VyYXRpb24gdmFyaWFibGVzXCIpXG4gICAgLnNldEFjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5WQVJTLk9OTFlfTUFOQUdFRF9JTl9DTEkpO1xufSk7XG52YXJzU2NvcGVcbiAgICAudGFzayhcImRlbGV0ZVwiLCBcIkRlbGV0ZSBhIGNvbmZpZ3VyYXRpb24gdmFyaWFibGVcIilcbiAgICAuYWRkUG9zaXRpb25hbFBhcmFtKFwidmFyXCIsIFwiVGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlXCIpXG4gICAgLnNldEFjdGlvbihhc3luYyAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5WQVJTLk9OTFlfTUFOQUdFRF9JTl9DTEkpO1xufSk7XG52YXJzU2NvcGVcbiAgICAudGFzayhcInBhdGhcIiwgXCJTaG93IHRoZSBwYXRoIG9mIHRoZSBmaWxlIHdoZXJlIGFsbCB0aGUgY29uZmlndXJhdGlvbiB2YXJpYWJsZXMgYXJlIHN0b3JlZFwiKVxuICAgIC5zZXRBY3Rpb24oYXN5bmMgKCkgPT4ge1xuICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuVkFSUy5PTkxZX01BTkFHRURfSU5fQ0xJKTtcbn0pO1xudmFyc1Njb3BlXG4gICAgLnRhc2soXCJzZXR1cFwiLCBcIlNob3cgaG93IHRvIHNldHVwIHRoZSBjb25maWd1cmF0aW9uIHZhcmlhYmxlcyB1c2VkIGJ5IHRoaXMgcHJvamVjdFwiKVxuICAgIC5zZXRBY3Rpb24oYXN5bmMgKCkgPT4ge1xuICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuVkFSUy5PTkxZX01BTkFHRURfSU5fQ0xJKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/builtin-tasks/vars.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/common/bigInt.js":
/*!***********************************************!*\
  !*** ./node_modules/hardhat/common/bigInt.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatNumberType = exports.isBigNumber = exports.normalizeToBigInt = void 0;\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nfunction normalizeToBigInt(source) {\n    switch (typeof source) {\n        case \"object\":\n            if (isBigNumber(source)) {\n                return BigInt(source.toString());\n            }\n            else {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_BIG_NUMBER, {\n                    message: `Value ${JSON.stringify(source)} is of type \"object\" but is not an instanceof one of the known big number object types.`,\n                });\n            }\n        case \"number\":\n            if (!Number.isInteger(source)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_BIG_NUMBER, {\n                    message: `${source} is not an integer`,\n                });\n            }\n            if (!Number.isSafeInteger(source)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_BIG_NUMBER, {\n                    message: `Integer ${source} is unsafe. Consider using ${source}n instead. For more details, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger`,\n                });\n            }\n        // `break;` intentionally omitted. fallthrough desired.\n        case \"string\":\n        case \"bigint\":\n            return BigInt(source);\n        default:\n            const _exhaustiveCheck = source;\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_BIG_NUMBER, {\n                message: `Unsupported type ${typeof source}`,\n            });\n    }\n}\nexports.normalizeToBigInt = normalizeToBigInt;\nfunction isBigNumber(source) {\n    return (typeof source === \"bigint\" ||\n        isEthersBigNumber(source) ||\n        isBN(source) ||\n        isBigNumberJsBigNumber(source));\n}\nexports.isBigNumber = isBigNumber;\nfunction isBN(n) {\n    try {\n        // eslint-disable-next-line import/no-extraneous-dependencies\n        const BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n        return BN.isBN(n);\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction isEthersBigNumber(n) {\n    try {\n        const BigNumber = \n        // eslint-disable-next-line import/no-extraneous-dependencies\n        (__webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/index.js\").ethers.BigNumber);\n        return BigNumber.isBigNumber(n);\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction isBigNumberJsBigNumber(n) {\n    try {\n        // eslint-disable-next-line import/no-extraneous-dependencies\n        const BigNumber = (__webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\").BigNumber);\n        return BigNumber.isBigNumber(n);\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction formatNumberType(n) {\n    if (typeof n === \"object\") {\n        if (isBN(n)) {\n            return \"BN\";\n        }\n        else if (isEthersBigNumber(n)) {\n            return \"ethers.BigNumber\";\n        }\n        else if (isBigNumberJsBigNumber(n)) {\n            return \"bignumber.js\";\n        }\n    }\n    return typeof n;\n}\nexports.formatNumberType = formatNumberType;\n//# sourceMappingURL=bigInt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9jb21tb24vYmlnSW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QixHQUFHLG1CQUFtQixHQUFHLHlCQUF5QjtBQUMxRSxpQkFBaUIsbUJBQU8sQ0FBQyxxRkFBeUI7QUFDbEQsc0JBQXNCLG1CQUFPLENBQUMsK0ZBQThCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0Msd0JBQXdCO0FBQzlELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRO0FBQ3hDLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsUUFBUSw0QkFBNEIsT0FBTztBQUNuRixpQkFBaUI7QUFDakI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGNBQWM7QUFDM0QsYUFBYTtBQUNiO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLG1EQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvR0FBa0M7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFHQUFpQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2NvbW1vbi9iaWdJbnQuanM/ZDNhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZm9ybWF0TnVtYmVyVHlwZSA9IGV4cG9ydHMuaXNCaWdOdW1iZXIgPSBleHBvcnRzLm5vcm1hbGl6ZVRvQmlnSW50ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvcmUvZXJyb3JzLWxpc3RcIik7XG5mdW5jdGlvbiBub3JtYWxpemVUb0JpZ0ludChzb3VyY2UpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBzb3VyY2UpIHtcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKGlzQmlnTnVtYmVyKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmlnSW50KHNvdXJjZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuR0VORVJBTC5JTlZBTElEX0JJR19OVU1CRVIsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFZhbHVlICR7SlNPTi5zdHJpbmdpZnkoc291cmNlKX0gaXMgb2YgdHlwZSBcIm9iamVjdFwiIGJ1dCBpcyBub3QgYW4gaW5zdGFuY2VvZiBvbmUgb2YgdGhlIGtub3duIGJpZyBudW1iZXIgb2JqZWN0IHR5cGVzLmAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5HRU5FUkFMLklOVkFMSURfQklHX05VTUJFUiwge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgJHtzb3VyY2V9IGlzIG5vdCBhbiBpbnRlZ2VyYCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuR0VORVJBTC5JTlZBTElEX0JJR19OVU1CRVIsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEludGVnZXIgJHtzb3VyY2V9IGlzIHVuc2FmZS4gQ29uc2lkZXIgdXNpbmcgJHtzb3VyY2V9biBpbnN0ZWFkLiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVyL2lzU2FmZUludGVnZXJgLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAvLyBgYnJlYWs7YCBpbnRlbnRpb25hbGx5IG9taXR0ZWQuIGZhbGx0aHJvdWdoIGRlc2lyZWQuXG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludChzb3VyY2UpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3QgX2V4aGF1c3RpdmVDaGVjayA9IHNvdXJjZTtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuR0VORVJBTC5JTlZBTElEX0JJR19OVU1CRVIsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVW5zdXBwb3J0ZWQgdHlwZSAke3R5cGVvZiBzb3VyY2V9YCxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMubm9ybWFsaXplVG9CaWdJbnQgPSBub3JtYWxpemVUb0JpZ0ludDtcbmZ1bmN0aW9uIGlzQmlnTnVtYmVyKHNvdXJjZSkge1xuICAgIHJldHVybiAodHlwZW9mIHNvdXJjZSA9PT0gXCJiaWdpbnRcIiB8fFxuICAgICAgICBpc0V0aGVyc0JpZ051bWJlcihzb3VyY2UpIHx8XG4gICAgICAgIGlzQk4oc291cmNlKSB8fFxuICAgICAgICBpc0JpZ051bWJlckpzQmlnTnVtYmVyKHNvdXJjZSkpO1xufVxuZXhwb3J0cy5pc0JpZ051bWJlciA9IGlzQmlnTnVtYmVyO1xuZnVuY3Rpb24gaXNCTihuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuICAgICAgICBjb25zdCBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbiAgICAgICAgcmV0dXJuIEJOLmlzQk4obik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0V0aGVyc0JpZ051bWJlcihuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgQmlnTnVtYmVyID0gXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbiAgICAgICAgcmVxdWlyZShcImV0aGVyc1wiKS5ldGhlcnMuQmlnTnVtYmVyO1xuICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmlzQmlnTnVtYmVyKG4pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNCaWdOdW1iZXJKc0JpZ051bWJlcihuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuICAgICAgICBjb25zdCBCaWdOdW1iZXIgPSByZXF1aXJlKFwiYmlnbnVtYmVyLmpzXCIpLkJpZ051bWJlcjtcbiAgICAgICAgcmV0dXJuIEJpZ051bWJlci5pc0JpZ051bWJlcihuKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlclR5cGUobikge1xuICAgIGlmICh0eXBlb2YgbiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoaXNCTihuKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQk5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0V0aGVyc0JpZ051bWJlcihuKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZXRoZXJzLkJpZ051bWJlclwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQmlnTnVtYmVySnNCaWdOdW1iZXIobikpIHtcbiAgICAgICAgICAgIHJldHVybiBcImJpZ251bWJlci5qc1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2Ygbjtcbn1cbmV4cG9ydHMuZm9ybWF0TnVtYmVyVHlwZSA9IGZvcm1hdE51bWJlclR5cGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaWdJbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/common/bigInt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/common/index.js":
/*!**********************************************!*\
  !*** ./node_modules/hardhat/common/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomError = void 0;\n__exportStar(__webpack_require__(/*! ./bigInt */ \"(ssr)/./node_modules/hardhat/common/bigInt.js\"), exports);\nvar errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nObject.defineProperty(exports, \"CustomError\", ({ enumerable: true, get: function () { return errors_1.CustomError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9jb21tb24vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLGFBQWEsbUJBQU8sQ0FBQywrREFBVTtBQUMvQixlQUFlLG1CQUFPLENBQUMscUZBQXlCO0FBQ2hELCtDQUE4QyxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUN0SCIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9jb21tb24vaW5kZXguanM/YjhhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DdXN0b21FcnJvciA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iaWdJbnRcIiksIGV4cG9ydHMpO1xudmFyIGVycm9yc18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvcmUvZXJyb3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ3VzdG9tRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLkN1c3RvbUVycm9yOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/common/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/common/napi-rs.js":
/*!************************************************!*\
  !*** ./node_modules/hardhat/common/napi-rs.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.requireNapiRsModule = void 0;\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nfunction requireNapiRsModule(id) {\n    try {\n        return __webpack_require__(\"(ssr)/./node_modules/hardhat/common sync recursive\")(id);\n    }\n    catch (e) {\n        if (e.code === \"MODULE_NOT_FOUND\") {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CORRUPTED_LOCKFILE);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw e;\n    }\n}\nexports.requireNapiRsModule = requireNapiRsModule;\n//# sourceMappingURL=napi-rs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9jb21tb24vbmFwaS1ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkI7QUFDM0IsaUJBQWlCLG1CQUFPLENBQUMscUZBQXlCO0FBQ2xELHNCQUFzQixtQkFBTyxDQUFDLCtGQUE4QjtBQUM1RDtBQUNBO0FBQ0EsZUFBZSwwRUFBUSxFQUFFLENBQUM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2NvbW1vbi9uYXBpLXJzLmpzPzAwYWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlcXVpcmVOYXBpUnNNb2R1bGUgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9jb3JlL2Vycm9yc1wiKTtcbmNvbnN0IGVycm9yc19saXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9lcnJvcnMtbGlzdFwiKTtcbmZ1bmN0aW9uIHJlcXVpcmVOYXBpUnNNb2R1bGUoaWQpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShpZCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChlLmNvZGUgPT09IFwiTU9EVUxFX05PVF9GT1VORFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLkdFTkVSQUwuQ09SUlVQVEVEX0xPQ0tGSUxFKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQG5vbWljZm91bmRhdGlvbi9oYXJkaGF0LWludGVybmFsLXJ1bGVzL29ubHktaGFyZGhhdC1lcnJvclxuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbn1cbmV4cG9ydHMucmVxdWlyZU5hcGlSc01vZHVsZSA9IHJlcXVpcmVOYXBpUnNNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXBpLXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/common/napi-rs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/config.js":
/*!****************************************!*\
  !*** ./node_modules/hardhat/config.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./internal/core/config/config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\"), exports);\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDBHQUFtQztBQUN4RCIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9jb25maWcuanM/ZjFiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2ludGVybmFsL2NvcmUvY29uZmlnL2NvbmZpZy1lbnZcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/artifacts.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/internal/artifacts.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getArtifactFromContractOutput = exports.Artifacts = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst os = __importStar(__webpack_require__(/*! os */ \"os\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nconst contract_names_1 = __webpack_require__(/*! ../utils/contract-names */ \"(ssr)/./node_modules/hardhat/utils/contract-names.js\");\nconst source_names_1 = __webpack_require__(/*! ../utils/source-names */ \"(ssr)/./node_modules/hardhat/utils/source-names.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst errors_1 = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ./core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst hash_1 = __webpack_require__(/*! ./util/hash */ \"(ssr)/./node_modules/hardhat/internal/util/hash.js\");\nconst fs_utils_1 = __webpack_require__(/*! ./util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:artifacts\");\nclass Artifacts {\n    constructor(_artifactsPath) {\n        this._artifactsPath = _artifactsPath;\n        // Undefined means that the cache is disabled.\n        this._cache = {\n            artifactNameToArtifactPathCache: new Map(),\n            artifactFQNToBuildInfoPathCache: new Map(),\n        };\n        this._validArtifacts = [];\n    }\n    addValidArtifacts(validArtifacts) {\n        this._validArtifacts.push(...validArtifacts);\n    }\n    async readArtifact(name) {\n        const artifactPath = await this._getArtifactPath(name);\n        return fs_extra_1.default.readJson(artifactPath);\n    }\n    readArtifactSync(name) {\n        const artifactPath = this._getArtifactPathSync(name);\n        return fs_extra_1.default.readJsonSync(artifactPath);\n    }\n    async artifactExists(name) {\n        let artifactPath;\n        try {\n            artifactPath = await this._getArtifactPath(name);\n        }\n        catch (e) {\n            if (errors_1.HardhatError.isHardhatError(e)) {\n                return false;\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw e;\n        }\n        return fs_extra_1.default.pathExists(artifactPath);\n    }\n    async getAllFullyQualifiedNames() {\n        const paths = await this.getArtifactPaths();\n        return paths.map((p) => this._getFullyQualifiedNameFromPath(p)).sort();\n    }\n    async getBuildInfo(fullyQualifiedName) {\n        let buildInfoPath = this._cache?.artifactFQNToBuildInfoPathCache.get(fullyQualifiedName);\n        if (buildInfoPath === undefined) {\n            const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n            const debugFilePath = this._getDebugFilePath(artifactPath);\n            buildInfoPath = await this._getBuildInfoFromDebugFile(debugFilePath);\n            if (buildInfoPath === undefined) {\n                return undefined;\n            }\n            this._cache?.artifactFQNToBuildInfoPathCache.set(fullyQualifiedName, buildInfoPath);\n        }\n        return fs_extra_1.default.readJSON(buildInfoPath);\n    }\n    getBuildInfoSync(fullyQualifiedName) {\n        let buildInfoPath = this._cache?.artifactFQNToBuildInfoPathCache.get(fullyQualifiedName);\n        if (buildInfoPath === undefined) {\n            const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n            const debugFilePath = this._getDebugFilePath(artifactPath);\n            buildInfoPath = this._getBuildInfoFromDebugFileSync(debugFilePath);\n            if (buildInfoPath === undefined) {\n                return undefined;\n            }\n            this._cache?.artifactFQNToBuildInfoPathCache.set(fullyQualifiedName, buildInfoPath);\n        }\n        return fs_extra_1.default.readJSONSync(buildInfoPath);\n    }\n    async getArtifactPaths() {\n        const cached = this._cache?.artifactPaths;\n        if (cached !== undefined) {\n            return cached;\n        }\n        const paths = await (0, fs_utils_1.getAllFilesMatching)(this._artifactsPath, (f) => this._isArtifactPath(f));\n        const result = paths.sort();\n        if (this._cache !== undefined) {\n            this._cache.artifactPaths = result;\n        }\n        return result;\n    }\n    async getBuildInfoPaths() {\n        const cached = this._cache?.buildInfoPaths;\n        if (cached !== undefined) {\n            return cached;\n        }\n        const paths = await (0, fs_utils_1.getAllFilesMatching)(path.join(this._artifactsPath, constants_1.BUILD_INFO_DIR_NAME), (f) => f.endsWith(\".json\"));\n        const result = paths.sort();\n        if (this._cache !== undefined) {\n            this._cache.buildInfoPaths = result;\n        }\n        return result;\n    }\n    async getDebugFilePaths() {\n        const cached = this._cache?.debugFilePaths;\n        if (cached !== undefined) {\n            return cached;\n        }\n        const paths = await (0, fs_utils_1.getAllFilesMatching)(path.join(this._artifactsPath), (f) => f.endsWith(\".dbg.json\"));\n        const result = paths.sort();\n        if (this._cache !== undefined) {\n            this._cache.debugFilePaths = result;\n        }\n        return result;\n    }\n    async saveArtifactAndDebugFile(artifact, pathToBuildInfo) {\n        try {\n            // artifact\n            const fullyQualifiedName = (0, contract_names_1.getFullyQualifiedName)(artifact.sourceName, artifact.contractName);\n            const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n            await fs_extra_1.default.ensureDir(path.dirname(artifactPath));\n            await Promise.all([\n                fs_extra_1.default.writeJSON(artifactPath, artifact, {\n                    spaces: 2,\n                }),\n                (async () => {\n                    if (pathToBuildInfo === undefined) {\n                        return;\n                    }\n                    // save debug file\n                    const debugFilePath = this._getDebugFilePath(artifactPath);\n                    const debugFile = this._createDebugFile(artifactPath, pathToBuildInfo);\n                    await fs_extra_1.default.writeJSON(debugFilePath, debugFile, {\n                        spaces: 2,\n                    });\n                })(),\n            ]);\n        }\n        finally {\n            this.clearCache();\n        }\n    }\n    async saveBuildInfo(solcVersion, solcLongVersion, input, output) {\n        try {\n            const buildInfoDir = path.join(this._artifactsPath, constants_1.BUILD_INFO_DIR_NAME);\n            await fs_extra_1.default.ensureDir(buildInfoDir);\n            const buildInfoName = this._getBuildInfoName(solcVersion, solcLongVersion, input);\n            const buildInfo = this._createBuildInfo(buildInfoName, solcVersion, solcLongVersion, input, output);\n            const buildInfoPath = path.join(buildInfoDir, `${buildInfoName}.json`);\n            // JSON.stringify of the entire build info can be really slow\n            // in larger projects, so we stringify per part and incrementally create\n            // the JSON in the file.\n            //\n            // We split this code into different curly-brace-enclosed scopes so that\n            // partial JSON strings get out of scope sooner and hence can be reclaimed\n            // by the GC if needed.\n            const file = await promises_1.default.open(buildInfoPath, \"w\");\n            try {\n                {\n                    const withoutOutput = JSON.stringify({\n                        ...buildInfo,\n                        output: undefined,\n                    });\n                    // We write the JSON (without output) except the last }\n                    await file.write(withoutOutput.slice(0, -1));\n                }\n                {\n                    const outputWithoutSourcesAndContracts = JSON.stringify({\n                        ...buildInfo.output,\n                        sources: undefined,\n                        contracts: undefined,\n                    });\n                    // We start writing the output\n                    await file.write(',\"output\":');\n                    // Write the output object except for the last }\n                    await file.write(outputWithoutSourcesAndContracts.slice(0, -1));\n                    // If there were other field apart from sources and contracts we need\n                    // a comma\n                    if (outputWithoutSourcesAndContracts.length > 2) {\n                        await file.write(\",\");\n                    }\n                }\n                // Writing the sources\n                await file.write('\"sources\":{');\n                let isFirst = true;\n                for (const [name, value] of Object.entries(buildInfo.output.sources ?? {})) {\n                    if (isFirst) {\n                        isFirst = false;\n                    }\n                    else {\n                        await file.write(\",\");\n                    }\n                    await file.write(`${JSON.stringify(name)}:${JSON.stringify(value)}`);\n                }\n                // Close sources object\n                await file.write(\"}\");\n                // Writing the contracts\n                await file.write(',\"contracts\":{');\n                isFirst = true;\n                for (const [name, value] of Object.entries(buildInfo.output.contracts ?? {})) {\n                    if (isFirst) {\n                        isFirst = false;\n                    }\n                    else {\n                        await file.write(\",\");\n                    }\n                    await file.write(`${JSON.stringify(name)}:${JSON.stringify(value)}`);\n                }\n                // close contracts object\n                await file.write(\"}\");\n                // close output object\n                await file.write(\"}\");\n                // close build info object\n                await file.write(\"}\");\n            }\n            finally {\n                await file.close();\n            }\n            return buildInfoPath;\n        }\n        finally {\n            this.clearCache();\n        }\n    }\n    /**\n     * Remove all artifacts that don't correspond to the current solidity files\n     */\n    async removeObsoleteArtifacts() {\n        // We clear the cache here, as we want to be sure this runs correctly\n        this.clearCache();\n        try {\n            const validArtifactPaths = await Promise.all(this._validArtifacts.flatMap(({ sourceName, artifacts }) => artifacts.map((artifactName) => this._getArtifactPath((0, contract_names_1.getFullyQualifiedName)(sourceName, artifactName)))));\n            const validArtifactsPathsSet = new Set(validArtifactPaths);\n            for (const { sourceName, artifacts } of this._validArtifacts) {\n                for (const artifactName of artifacts) {\n                    validArtifactsPathsSet.add(this.formArtifactPathFromFullyQualifiedName((0, contract_names_1.getFullyQualifiedName)(sourceName, artifactName)));\n                }\n            }\n            const existingArtifactsPaths = await this.getArtifactPaths();\n            await Promise.all(existingArtifactsPaths\n                .filter((artifactPath) => !validArtifactsPathsSet.has(artifactPath))\n                .map((artifactPath) => this._removeArtifactFiles(artifactPath)));\n            await this._removeObsoleteBuildInfos();\n        }\n        finally {\n            // We clear the cache here, as this may have non-existent paths now\n            this.clearCache();\n        }\n    }\n    /**\n     * Returns the absolute path to the given artifact\n     * @throws {HardhatError} If the name is not fully qualified.\n     */\n    formArtifactPathFromFullyQualifiedName(fullyQualifiedName) {\n        const { sourceName, contractName } = (0, contract_names_1.parseFullyQualifiedName)(fullyQualifiedName);\n        return path.join(this._artifactsPath, sourceName, `${contractName}.json`);\n    }\n    clearCache() {\n        // Avoid accidentally re-enabling the cache\n        if (this._cache === undefined) {\n            return;\n        }\n        this._cache = {\n            artifactFQNToBuildInfoPathCache: new Map(),\n            artifactNameToArtifactPathCache: new Map(),\n        };\n    }\n    disableCache() {\n        this._cache = undefined;\n    }\n    /**\n     * Remove all build infos that aren't used by any debug file\n     */\n    async _removeObsoleteBuildInfos() {\n        const debugFiles = await this.getDebugFilePaths();\n        const buildInfos = await Promise.all(debugFiles.map(async (debugFile) => {\n            const buildInfoFile = await this._getBuildInfoFromDebugFile(debugFile);\n            if (buildInfoFile !== undefined) {\n                return path.resolve(path.dirname(debugFile), buildInfoFile);\n            }\n        }));\n        const filteredBuildInfos = buildInfos.filter((bf) => typeof bf === \"string\");\n        const validBuildInfos = new Set(filteredBuildInfos);\n        const buildInfoFiles = await this.getBuildInfoPaths();\n        await Promise.all(buildInfoFiles\n            .filter((buildInfoFile) => !validBuildInfos.has(buildInfoFile))\n            .map(async (buildInfoFile) => {\n            log(`Removing buildInfo '${buildInfoFile}'`);\n            await fs_extra_1.default.unlink(buildInfoFile);\n        }));\n    }\n    _getBuildInfoName(solcVersion, solcLongVersion, input) {\n        const json = JSON.stringify({\n            _format: constants_1.BUILD_INFO_FORMAT_VERSION,\n            solcVersion,\n            solcLongVersion,\n            input,\n        });\n        return (0, hash_1.createNonCryptographicHashBasedIdentifier)(Buffer.from(json)).toString(\"hex\");\n    }\n    /**\n     * Returns the absolute path to the artifact that corresponds to the given\n     * name.\n     *\n     * If the name is fully qualified, the path is computed from it.  If not, an\n     * artifact that matches the given name is searched in the existing artifacts.\n     * If there is an ambiguity, an error is thrown.\n     *\n     * @throws {HardhatError} with descriptor:\n     * - {@link ERRORS.ARTIFACTS.WRONG_CASING} if the path case doesn't match the one in the filesystem.\n     * - {@link ERRORS.ARTIFACTS.MULTIPLE_FOUND} if there are multiple artifacts matching the given contract name.\n     * - {@link ERRORS.ARTIFACTS.NOT_FOUND} if the artifact is not found.\n     */\n    async _getArtifactPath(name) {\n        const cached = this._cache?.artifactNameToArtifactPathCache.get(name);\n        if (cached !== undefined) {\n            return cached;\n        }\n        let result;\n        if ((0, contract_names_1.isFullyQualifiedName)(name)) {\n            result = await this._getValidArtifactPathFromFullyQualifiedName(name);\n        }\n        else {\n            const files = await this.getArtifactPaths();\n            result = this._getArtifactPathFromFiles(name, files);\n        }\n        this._cache?.artifactNameToArtifactPathCache.set(name, result);\n        return result;\n    }\n    _createBuildInfo(id, solcVersion, solcLongVersion, input, output) {\n        return {\n            id,\n            _format: constants_1.BUILD_INFO_FORMAT_VERSION,\n            solcVersion,\n            solcLongVersion,\n            input,\n            output,\n        };\n    }\n    _createDebugFile(artifactPath, pathToBuildInfo) {\n        const relativePathToBuildInfo = path.relative(path.dirname(artifactPath), pathToBuildInfo);\n        const debugFile = {\n            _format: constants_1.DEBUG_FILE_FORMAT_VERSION,\n            buildInfo: relativePathToBuildInfo,\n        };\n        return debugFile;\n    }\n    _getArtifactPathsSync() {\n        const cached = this._cache?.artifactPaths;\n        if (cached !== undefined) {\n            return cached;\n        }\n        const paths = (0, fs_utils_1.getAllFilesMatchingSync)(this._artifactsPath, (f) => this._isArtifactPath(f));\n        const result = paths.sort();\n        if (this._cache !== undefined) {\n            this._cache.artifactPaths = result;\n        }\n        return result;\n    }\n    /**\n     * Sync version of _getArtifactPath\n     */\n    _getArtifactPathSync(name) {\n        const cached = this._cache?.artifactNameToArtifactPathCache.get(name);\n        if (cached !== undefined) {\n            return cached;\n        }\n        let result;\n        if ((0, contract_names_1.isFullyQualifiedName)(name)) {\n            result = this._getValidArtifactPathFromFullyQualifiedNameSync(name);\n        }\n        else {\n            const files = this._getArtifactPathsSync();\n            result = this._getArtifactPathFromFiles(name, files);\n        }\n        this._cache?.artifactNameToArtifactPathCache.set(name, result);\n        return result;\n    }\n    /**\n     * DO NOT DELETE OR CHANGE\n     *\n     * use this.formArtifactPathFromFullyQualifiedName instead\n     * @deprecated until typechain migrates to public version\n     * @see https://github.com/dethcrypto/TypeChain/issues/544\n     */\n    _getArtifactPathFromFullyQualifiedName(fullyQualifiedName) {\n        const { sourceName, contractName } = (0, contract_names_1.parseFullyQualifiedName)(fullyQualifiedName);\n        return path.join(this._artifactsPath, sourceName, `${contractName}.json`);\n    }\n    /**\n     * Returns the absolute path to the artifact that corresponds to the given\n     * fully qualified name.\n     * @param fullyQualifiedName The fully qualified name of the contract.\n     * @returns The absolute path to the artifact.\n     * @throws {HardhatError} with descriptor:\n     * - {@link ERRORS.CONTRACT_NAMES.INVALID_FULLY_QUALIFIED_NAME} If the name is not fully qualified.\n     * - {@link ERRORS.ARTIFACTS.WRONG_CASING} If the path case doesn't match the one in the filesystem.\n     * - {@link ERRORS.ARTIFACTS.NOT_FOUND} If the artifact is not found.\n     */\n    async _getValidArtifactPathFromFullyQualifiedName(fullyQualifiedName) {\n        const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n        try {\n            const trueCasePath = path.join(this._artifactsPath, await (0, fs_utils_1.getFileTrueCase)(this._artifactsPath, path.relative(this._artifactsPath, artifactPath)));\n            if (artifactPath !== trueCasePath) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.WRONG_CASING, {\n                    correct: this._getFullyQualifiedNameFromPath(trueCasePath),\n                    incorrect: fullyQualifiedName,\n                });\n            }\n            return trueCasePath;\n        }\n        catch (e) {\n            if (e instanceof fs_utils_1.FileNotFoundError) {\n                return this._handleWrongArtifactForFullyQualifiedName(fullyQualifiedName);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw e;\n        }\n    }\n    _getAllContractNamesFromFiles(files) {\n        return files.map((file) => {\n            const fqn = this._getFullyQualifiedNameFromPath(file);\n            return (0, contract_names_1.parseFullyQualifiedName)(fqn).contractName;\n        });\n    }\n    _getAllFullyQualifiedNamesSync() {\n        const paths = this._getArtifactPathsSync();\n        return paths.map((p) => this._getFullyQualifiedNameFromPath(p)).sort();\n    }\n    _formatSuggestions(names, contractName) {\n        switch (names.length) {\n            case 0:\n                return \"\";\n            case 1:\n                return `Did you mean \"${names[0]}\"?`;\n            default:\n                return `We found some that were similar:\n\n${names.map((n) => `  * ${n}`).join(os.EOL)}\n\nPlease replace \"${contractName}\" for the correct contract name wherever you are trying to read its artifact.\n`;\n        }\n    }\n    /**\n     * @throws {HardhatError} with a list of similar contract names.\n     */\n    _handleWrongArtifactForFullyQualifiedName(fullyQualifiedName) {\n        const names = this._getAllFullyQualifiedNamesSync();\n        const similarNames = this._getSimilarContractNames(fullyQualifiedName, names);\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.NOT_FOUND, {\n            contractName: fullyQualifiedName,\n            suggestion: this._formatSuggestions(similarNames, fullyQualifiedName),\n        });\n    }\n    /**\n     * @throws {HardhatError} with a list of similar contract names.\n     */\n    _handleWrongArtifactForContractName(contractName, files) {\n        const names = this._getAllContractNamesFromFiles(files);\n        let similarNames = this._getSimilarContractNames(contractName, names);\n        if (similarNames.length > 1) {\n            similarNames = this._filterDuplicatesAsFullyQualifiedNames(files, similarNames);\n        }\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.NOT_FOUND, {\n            contractName,\n            suggestion: this._formatSuggestions(similarNames, contractName),\n        });\n    }\n    /**\n     * If the project has these contracts:\n     *   - 'contracts/Greeter.sol:Greeter'\n     *   - 'contracts/Meeter.sol:Greeter'\n     *   - 'contracts/Greater.sol:Greater'\n     *  And the user tries to get an artifact with the name 'Greter', then\n     *  the suggestions will be 'Greeter', 'Greeter', and 'Greater'.\n     *\n     * We don't want to show duplicates here, so we use FQNs for those. The\n     * suggestions will then be:\n     *   - 'contracts/Greeter.sol:Greeter'\n     *   - 'contracts/Meeter.sol:Greeter'\n     *   - 'Greater'\n     */\n    _filterDuplicatesAsFullyQualifiedNames(files, similarNames) {\n        const outputNames = [];\n        const groups = similarNames.reduce((obj, cur) => {\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            obj[cur] = obj[cur] ? obj[cur] + 1 : 1;\n            return obj;\n        }, {});\n        for (const [name, occurrences] of Object.entries(groups)) {\n            if (occurrences > 1) {\n                for (const file of files) {\n                    if (path.basename(file) === `${name}.json`) {\n                        outputNames.push(this._getFullyQualifiedNameFromPath(file));\n                    }\n                }\n                continue;\n            }\n            outputNames.push(name);\n        }\n        return outputNames;\n    }\n    /**\n     *\n     * @param givenName can be FQN or contract name\n     * @param names MUST match type of givenName (i.e. array of FQN's if givenName is FQN)\n     * @returns\n     */\n    _getSimilarContractNames(givenName, names) {\n        let shortestDistance = constants_1.EDIT_DISTANCE_THRESHOLD;\n        let mostSimilarNames = [];\n        for (const name of names) {\n            const distance = (0, contract_names_1.findDistance)(givenName, name);\n            if (distance < shortestDistance) {\n                shortestDistance = distance;\n                mostSimilarNames = [name];\n                continue;\n            }\n            if (distance === shortestDistance) {\n                mostSimilarNames.push(name);\n                continue;\n            }\n        }\n        return mostSimilarNames;\n    }\n    _getValidArtifactPathFromFullyQualifiedNameSync(fullyQualifiedName) {\n        const artifactPath = this.formArtifactPathFromFullyQualifiedName(fullyQualifiedName);\n        try {\n            const trueCasePath = path.join(this._artifactsPath, (0, fs_utils_1.getFileTrueCaseSync)(this._artifactsPath, path.relative(this._artifactsPath, artifactPath)));\n            if (artifactPath !== trueCasePath) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.WRONG_CASING, {\n                    correct: this._getFullyQualifiedNameFromPath(trueCasePath),\n                    incorrect: fullyQualifiedName,\n                });\n            }\n            return trueCasePath;\n        }\n        catch (e) {\n            if (e instanceof fs_utils_1.FileNotFoundError) {\n                return this._handleWrongArtifactForFullyQualifiedName(fullyQualifiedName);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw e;\n        }\n    }\n    _getDebugFilePath(artifactPath) {\n        return artifactPath.replace(/\\.json$/, \".dbg.json\");\n    }\n    /**\n     * Gets the path to the artifact file for the given contract name.\n     * @throws {HardhatError} with descriptor:\n     * - {@link ERRORS.ARTIFACTS.NOT_FOUND} if there are no artifacts matching the given contract name.\n     * - {@link ERRORS.ARTIFACTS.MULTIPLE_FOUND} if there are multiple artifacts matching the given contract name.\n     */\n    _getArtifactPathFromFiles(contractName, files) {\n        const matchingFiles = files.filter((file) => {\n            return path.basename(file) === `${contractName}.json`;\n        });\n        if (matchingFiles.length === 0) {\n            return this._handleWrongArtifactForContractName(contractName, files);\n        }\n        if (matchingFiles.length > 1) {\n            const candidates = matchingFiles.map((file) => this._getFullyQualifiedNameFromPath(file));\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARTIFACTS.MULTIPLE_FOUND, {\n                contractName,\n                candidates: candidates.join(os.EOL),\n            });\n        }\n        return matchingFiles[0];\n    }\n    /**\n     * Returns the FQN of a contract giving the absolute path to its artifact.\n     *\n     * For example, given a path like\n     * `/path/to/project/artifacts/contracts/Foo.sol/Bar.json`, it'll return the\n     * FQN `contracts/Foo.sol:Bar`\n     */\n    _getFullyQualifiedNameFromPath(absolutePath) {\n        const sourceName = (0, source_names_1.replaceBackslashes)(path.relative(this._artifactsPath, path.dirname(absolutePath)));\n        const contractName = path.basename(absolutePath).replace(\".json\", \"\");\n        return (0, contract_names_1.getFullyQualifiedName)(sourceName, contractName);\n    }\n    /**\n     * Remove the artifact file and its debug file.\n     */\n    async _removeArtifactFiles(artifactPath) {\n        await fs_extra_1.default.remove(artifactPath);\n        const debugFilePath = this._getDebugFilePath(artifactPath);\n        await fs_extra_1.default.remove(debugFilePath);\n    }\n    /**\n     * Given the path to a debug file, returns the absolute path to its\n     * corresponding build info file if it exists, or undefined otherwise.\n     */\n    async _getBuildInfoFromDebugFile(debugFilePath) {\n        if (await fs_extra_1.default.pathExists(debugFilePath)) {\n            const { buildInfo } = await fs_extra_1.default.readJson(debugFilePath);\n            return path.resolve(path.dirname(debugFilePath), buildInfo);\n        }\n        return undefined;\n    }\n    /**\n     * Sync version of _getBuildInfoFromDebugFile\n     */\n    _getBuildInfoFromDebugFileSync(debugFilePath) {\n        if (fs_extra_1.default.pathExistsSync(debugFilePath)) {\n            const { buildInfo } = fs_extra_1.default.readJsonSync(debugFilePath);\n            return path.resolve(path.dirname(debugFilePath), buildInfo);\n        }\n        return undefined;\n    }\n    _isArtifactPath(file) {\n        return (file.endsWith(\".json\") &&\n            file !== path.join(this._artifactsPath, \"package.json\") &&\n            !file.startsWith(path.join(this._artifactsPath, constants_1.BUILD_INFO_DIR_NAME)) &&\n            !file.endsWith(\".dbg.json\"));\n    }\n}\nexports.Artifacts = Artifacts;\n/**\n * Retrieves an artifact for the given `contractName` from the compilation output.\n *\n * @param sourceName The contract's source name.\n * @param contractName the contract's name.\n * @param contractOutput the contract's compilation output as emitted by `solc`.\n */\nfunction getArtifactFromContractOutput(sourceName, contractName, contractOutput) {\n    const evmBytecode = contractOutput.evm?.bytecode;\n    let bytecode = evmBytecode?.object ?? \"\";\n    if (bytecode.slice(0, 2).toLowerCase() !== \"0x\") {\n        bytecode = `0x${bytecode}`;\n    }\n    const evmDeployedBytecode = contractOutput.evm?.deployedBytecode;\n    let deployedBytecode = evmDeployedBytecode?.object ?? \"\";\n    if (deployedBytecode.slice(0, 2).toLowerCase() !== \"0x\") {\n        deployedBytecode = `0x${deployedBytecode}`;\n    }\n    const linkReferences = evmBytecode?.linkReferences ?? {};\n    const deployedLinkReferences = evmDeployedBytecode?.linkReferences ?? {};\n    return {\n        _format: constants_1.ARTIFACT_FORMAT_VERSION,\n        contractName,\n        sourceName,\n        abi: contractOutput.abi,\n        bytecode,\n        deployedBytecode,\n        linkReferences,\n        deployedLinkReferences,\n    };\n}\nexports.getArtifactFromContractOutput = getArtifactFromContractOutput;\n//# sourceMappingURL=artifacts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/artifacts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/cli/ArgumentsParser.js":
/*!**************************************************************!*\
  !*** ./node_modules/hardhat/internal/cli/ArgumentsParser.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ArgumentsParser = void 0;\nconst task_names_1 = __webpack_require__(/*! ../../builtin-tasks/task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nclass ArgumentsParser {\n    static paramNameToCLA(paramName) {\n        return (ArgumentsParser.PARAM_PREFIX +\n            paramName\n                .split(/(?=[A-Z])/g)\n                .map((s) => s.toLowerCase())\n                .join(\"-\"));\n    }\n    static cLAToParamName(cLA) {\n        if (cLA.toLowerCase() !== cLA) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.PARAM_NAME_INVALID_CASING, {\n                param: cLA,\n            });\n        }\n        const parts = cLA\n            .slice(ArgumentsParser.PARAM_PREFIX.length)\n            .split(\"-\")\n            .filter((x) => x.length > 0);\n        return (parts[0] +\n            parts\n                .slice(1)\n                .map((s) => s[0].toUpperCase() + s.slice(1))\n                .join(\"\"));\n    }\n    parseHardhatArguments(hardhatParamDefinitions, envVariableArguments, rawCLAs) {\n        const hardhatArguments = {};\n        let scopeOrTaskName;\n        const allUnparsedCLAs = [];\n        for (let i = 0; i < rawCLAs.length; i++) {\n            const arg = rawCLAs[i];\n            if (scopeOrTaskName === undefined) {\n                if (!this._hasCLAParamNameFormat(arg)) {\n                    scopeOrTaskName = arg;\n                    allUnparsedCLAs.push(arg);\n                    continue;\n                }\n                if (!this._isCLAParamName(arg, hardhatParamDefinitions)) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_COMMAND_LINE_ARG, { argument: arg });\n                }\n                i = this._parseArgumentAt(rawCLAs, i, hardhatParamDefinitions, hardhatArguments, scopeOrTaskName);\n            }\n            else {\n                if (!this._isCLAParamName(arg, hardhatParamDefinitions)) {\n                    allUnparsedCLAs.push(arg);\n                    continue;\n                }\n                i = this._parseArgumentAt(rawCLAs, i, hardhatParamDefinitions, hardhatArguments, scopeOrTaskName);\n            }\n        }\n        return {\n            hardhatArguments: this._addHardhatDefaultArguments(hardhatParamDefinitions, envVariableArguments, hardhatArguments),\n            scopeOrTaskName,\n            allUnparsedCLAs,\n        };\n    }\n    parseScopeAndTaskNames(allUnparsedCLAs, taskDefinitions, scopeDefinitions) {\n        const [firstCLA, secondCLA] = allUnparsedCLAs;\n        if (allUnparsedCLAs.length === 0) {\n            return {\n                taskName: task_names_1.TASK_HELP,\n                unparsedCLAs: [],\n            };\n        }\n        else if (allUnparsedCLAs.length === 1) {\n            if (scopeDefinitions[firstCLA] !== undefined) {\n                // this is a bit of a hack, but it's the easiest way to print\n                // the help of a scope when no task is specified\n                return {\n                    taskName: task_names_1.TASK_HELP,\n                    unparsedCLAs: [firstCLA],\n                };\n            }\n            else if (taskDefinitions[firstCLA] !== undefined) {\n                return {\n                    taskName: firstCLA,\n                    unparsedCLAs: allUnparsedCLAs.slice(1),\n                };\n            }\n            else {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n                    task: firstCLA,\n                });\n            }\n        }\n        else {\n            const scopeDefinition = scopeDefinitions[firstCLA];\n            if (scopeDefinition !== undefined) {\n                if (scopeDefinition.tasks[secondCLA] !== undefined) {\n                    return {\n                        scopeName: firstCLA,\n                        taskName: secondCLA,\n                        unparsedCLAs: allUnparsedCLAs.slice(2),\n                    };\n                }\n                else {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_SCOPED_TASK, {\n                        scope: firstCLA,\n                        task: secondCLA,\n                    });\n                }\n            }\n            else if (taskDefinitions[firstCLA] !== undefined) {\n                return {\n                    taskName: firstCLA,\n                    unparsedCLAs: allUnparsedCLAs.slice(1),\n                };\n            }\n            else {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n                    task: firstCLA,\n                });\n            }\n        }\n    }\n    parseTaskArguments(taskDefinition, rawCLAs) {\n        const { paramArguments, rawPositionalArguments } = this._parseTaskParamArguments(taskDefinition, rawCLAs);\n        const positionalArguments = this._parsePositionalParamArgs(rawPositionalArguments, taskDefinition.positionalParamDefinitions);\n        return { ...paramArguments, ...positionalArguments };\n    }\n    _parseTaskParamArguments(taskDefinition, rawCLAs) {\n        const paramArguments = {};\n        const rawPositionalArguments = [];\n        for (let i = 0; i < rawCLAs.length; i++) {\n            const arg = rawCLAs[i];\n            if (!this._hasCLAParamNameFormat(arg)) {\n                rawPositionalArguments.push(arg);\n                continue;\n            }\n            if (!this._isCLAParamName(arg, taskDefinition.paramDefinitions)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_PARAM_NAME, {\n                    param: arg,\n                });\n            }\n            i = this._parseArgumentAt(rawCLAs, i, taskDefinition.paramDefinitions, paramArguments, taskDefinition.name);\n        }\n        this._addTaskDefaultArguments(taskDefinition, paramArguments);\n        return { paramArguments, rawPositionalArguments };\n    }\n    _addHardhatDefaultArguments(hardhatParamDefinitions, envVariableArguments, hardhatArguments) {\n        return {\n            ...envVariableArguments,\n            ...hardhatArguments,\n        };\n    }\n    _addTaskDefaultArguments(taskDefinition, taskArguments) {\n        for (const paramName of Object.keys(taskDefinition.paramDefinitions)) {\n            const definition = taskDefinition.paramDefinitions[paramName];\n            if (taskArguments[paramName] !== undefined) {\n                continue;\n            }\n            if (!definition.isOptional) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.MISSING_TASK_ARGUMENT, {\n                    param: ArgumentsParser.paramNameToCLA(paramName),\n                    task: taskDefinition.name,\n                });\n            }\n            taskArguments[paramName] = definition.defaultValue;\n        }\n    }\n    _isCLAParamName(str, paramDefinitions) {\n        if (!this._hasCLAParamNameFormat(str)) {\n            return false;\n        }\n        const name = ArgumentsParser.cLAToParamName(str);\n        return paramDefinitions[name] !== undefined;\n    }\n    _hasCLAParamNameFormat(str) {\n        return str.startsWith(ArgumentsParser.PARAM_PREFIX);\n    }\n    _parseArgumentAt(rawCLAs, index, paramDefinitions, parsedArguments, scopeOrTaskName) {\n        const claArg = rawCLAs[index];\n        const paramName = ArgumentsParser.cLAToParamName(claArg);\n        const definition = paramDefinitions[paramName];\n        if (parsedArguments[paramName] !== undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.REPEATED_PARAM, {\n                param: claArg,\n            });\n        }\n        if (definition.isFlag) {\n            parsedArguments[paramName] = true;\n        }\n        else {\n            index++;\n            const value = rawCLAs[index];\n            if (value === undefined) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.MISSING_TASK_ARGUMENT, {\n                    param: ArgumentsParser.paramNameToCLA(paramName),\n                    task: scopeOrTaskName ?? \"help\",\n                });\n            }\n            // We only parse the arguments of non-subtasks, and those only\n            // accept CLIArgumentTypes.\n            const type = definition.type;\n            parsedArguments[paramName] = type.parse(paramName, value);\n        }\n        return index;\n    }\n    _parsePositionalParamArgs(rawPositionalParamArgs, positionalParamDefinitions) {\n        const args = {};\n        for (let i = 0; i < positionalParamDefinitions.length; i++) {\n            const definition = positionalParamDefinitions[i];\n            // We only parse the arguments of non-subtasks, and those only\n            // accept CLIArgumentTypes.\n            const type = definition.type;\n            const rawArg = rawPositionalParamArgs[i];\n            if (rawArg === undefined) {\n                if (!definition.isOptional) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.MISSING_POSITIONAL_ARG, {\n                        param: definition.name,\n                    });\n                }\n                args[definition.name] = definition.defaultValue;\n            }\n            else if (!definition.isVariadic) {\n                args[definition.name] = type.parse(definition.name, rawArg);\n            }\n            else {\n                args[definition.name] = rawPositionalParamArgs\n                    .slice(i)\n                    .map((raw) => type.parse(definition.name, raw));\n            }\n        }\n        const lastDefinition = positionalParamDefinitions[positionalParamDefinitions.length - 1];\n        const hasVariadicParam = lastDefinition !== undefined && lastDefinition.isVariadic;\n        if (!hasVariadicParam &&\n            rawPositionalParamArgs.length > positionalParamDefinitions.length) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_POSITIONAL_ARG, {\n                argument: rawPositionalParamArgs[positionalParamDefinitions.length],\n            });\n        }\n        return args;\n    }\n}\nArgumentsParser.PARAM_PREFIX = \"--\";\nexports.ArgumentsParser = ArgumentsParser;\n//# sourceMappingURL=ArgumentsParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/cli/ArgumentsParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/cli/HelpPrinter.js":
/*!**********************************************************!*\
  !*** ./node_modules/hardhat/internal/cli/HelpPrinter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HelpPrinter = void 0;\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst ArgumentsParser_1 = __webpack_require__(/*! ./ArgumentsParser */ \"(ssr)/./node_modules/hardhat/internal/cli/ArgumentsParser.js\");\nclass HelpPrinter {\n    constructor(_programName, _executableName, _version, _hardhatParamDefinitions, _tasks, _scopes) {\n        this._programName = _programName;\n        this._executableName = _executableName;\n        this._version = _version;\n        this._hardhatParamDefinitions = _hardhatParamDefinitions;\n        this._tasks = _tasks;\n        this._scopes = _scopes;\n    }\n    printGlobalHelp(includeSubtasks = false) {\n        console.log(`${this._programName} version ${this._version}\\n`);\n        console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] [SCOPE] <TASK> [TASK OPTIONS]\\n`);\n        console.log(\"GLOBAL OPTIONS:\\n\");\n        let length = this._printParamDetails(this._hardhatParamDefinitions);\n        console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n        length = this._printTasks(this._tasks, includeSubtasks, length);\n        if (Object.keys(this._scopes).length > 0) {\n            console.log(\"\\n\\nAVAILABLE TASK SCOPES:\\n\");\n            this._printScopes(this._scopes, length);\n        }\n        console.log(\"\");\n        console.log(`To get help for a specific task run: npx ${this._executableName} help [SCOPE] <TASK>\\n`);\n    }\n    printScopeHelp(scopeDefinition, includeSubtasks = false) {\n        const name = scopeDefinition.name;\n        const description = scopeDefinition.description ?? \"\";\n        console.log(`${this._programName} version ${this._version}`);\n        console.log(`\\nUsage: hardhat [GLOBAL OPTIONS] ${name} <TASK> [TASK OPTIONS]`);\n        console.log(`\\nAVAILABLE TASKS:\\n`);\n        if (this._scopes[name] === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_SCOPE, {\n                scope: name,\n            });\n        }\n        this._printTasks(this._scopes[name].tasks, includeSubtasks);\n        console.log(`\\n${name}: ${description}`);\n        console.log(`\\nFor global options help run: ${this._executableName} help\\n`);\n    }\n    printTaskHelp(taskDefinition) {\n        const { description = \"\", name, paramDefinitions, positionalParamDefinitions, } = taskDefinition;\n        console.log(`${this._programName} version ${this._version}\\n`);\n        const paramsList = this._getParamsList(paramDefinitions);\n        const positionalParamsList = this._getPositionalParamsList(positionalParamDefinitions);\n        const scope = taskDefinition.scope !== undefined ? `${taskDefinition.scope} ` : \"\";\n        console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] ${scope}${name}${paramsList}${positionalParamsList}\\n`);\n        if (Object.keys(paramDefinitions).length > 0) {\n            console.log(\"OPTIONS:\\n\");\n            this._printParamDetails(paramDefinitions);\n            console.log(\"\");\n        }\n        if (positionalParamDefinitions.length > 0) {\n            console.log(\"POSITIONAL ARGUMENTS:\\n\");\n            this._printPositionalParamDetails(positionalParamDefinitions);\n            console.log(\"\");\n        }\n        console.log(`${name}: ${description}\\n`);\n        console.log(`For global options help run: ${this._executableName} help\\n`);\n    }\n    _printTasks(tasksMap, includeSubtasks, length = 0) {\n        const taskNameList = Object.entries(tasksMap)\n            .filter(([, taskDefinition]) => includeSubtasks || !taskDefinition.isSubtask)\n            .map(([taskName]) => taskName)\n            .sort();\n        const nameLength = taskNameList\n            .map((n) => n.length)\n            .reduce((a, b) => Math.max(a, b), length);\n        for (const name of taskNameList) {\n            const { description = \"\" } = tasksMap[name];\n            console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n        }\n        return nameLength;\n    }\n    _printScopes(scopesMap, length) {\n        const scopeNamesList = Object.entries(scopesMap)\n            .map(([scopeName]) => scopeName)\n            .sort();\n        const nameLength = scopeNamesList\n            .map((n) => n.length)\n            .reduce((a, b) => Math.max(a, b), length);\n        for (const name of scopeNamesList) {\n            const { description = \"\" } = scopesMap[name];\n            console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n        }\n        return nameLength;\n    }\n    _getParamValueDescription(paramDefinition) {\n        return `<${paramDefinition.type.name.toUpperCase()}>`;\n    }\n    _getParamsList(paramDefinitions) {\n        let paramsList = \"\";\n        for (const name of Object.keys(paramDefinitions).sort()) {\n            const definition = paramDefinitions[name];\n            const { isFlag, isOptional } = definition;\n            paramsList += \" \";\n            if (isOptional) {\n                paramsList += \"[\";\n            }\n            paramsList += `${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name)}`;\n            if (!isFlag) {\n                paramsList += ` ${this._getParamValueDescription(definition)}`;\n            }\n            if (isOptional) {\n                paramsList += \"]\";\n            }\n        }\n        return paramsList;\n    }\n    _getPositionalParamsList(positionalParamDefinitions) {\n        let paramsList = \"\";\n        for (const definition of positionalParamDefinitions) {\n            const { isOptional, isVariadic, name } = definition;\n            paramsList += \" \";\n            if (isOptional) {\n                paramsList += \"[\";\n            }\n            if (isVariadic) {\n                paramsList += \"...\";\n            }\n            paramsList += name;\n            if (isOptional) {\n                paramsList += \"]\";\n            }\n        }\n        return paramsList;\n    }\n    _printParamDetails(paramDefinitions) {\n        const paramsNameLength = Object.keys(paramDefinitions)\n            .map((n) => ArgumentsParser_1.ArgumentsParser.paramNameToCLA(n).length)\n            .reduce((a, b) => Math.max(a, b), 0);\n        for (const name of Object.keys(paramDefinitions).sort()) {\n            const { description, defaultValue, isOptional, isFlag } = paramDefinitions[name];\n            let msg = `  ${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name).padEnd(paramsNameLength)}\\t`;\n            if (description !== undefined) {\n                msg += `${description} `;\n            }\n            if (isOptional && defaultValue !== undefined && !isFlag) {\n                msg += `(default: ${JSON.stringify(defaultValue)})`;\n            }\n            console.log(msg);\n        }\n        return paramsNameLength;\n    }\n    _printPositionalParamDetails(positionalParamDefinitions) {\n        const paramsNameLength = positionalParamDefinitions\n            .map((d) => d.name.length)\n            .reduce((a, b) => Math.max(a, b), 0);\n        for (const definition of positionalParamDefinitions) {\n            const { name, description, isOptional, defaultValue } = definition;\n            let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n            if (description !== undefined) {\n                msg += `${description} `;\n            }\n            if (isOptional && defaultValue !== undefined) {\n                msg += `(default: ${JSON.stringify(defaultValue)})`;\n            }\n            console.log(msg);\n        }\n    }\n}\nexports.HelpPrinter = HelpPrinter;\n//# sourceMappingURL=HelpPrinter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/cli/HelpPrinter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/internal/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HARDHAT_NETWORK_REVERT_SNAPSHOT_EVENT = exports.HARDHAT_NETWORK_RESET_EVENT = exports.EDIT_DISTANCE_THRESHOLD = exports.BUILD_INFO_DIR_NAME = exports.BUILD_INFO_FORMAT_VERSION = exports.DEBUG_FILE_FORMAT_VERSION = exports.ARTIFACT_FORMAT_VERSION = exports.HARDHAT_MEMPOOL_SUPPORTED_ORDERS = exports.HARDHAT_NETWORK_SUPPORTED_HARDFORKS = exports.SOLIDITY_FILES_CACHE_FILENAME = exports.HARDHAT_NETWORK_NAME = exports.HARDHAT_EXECUTABLE_NAME = exports.HARDHAT_NAME = void 0;\nexports.HARDHAT_NAME = \"Hardhat\";\nexports.HARDHAT_EXECUTABLE_NAME = \"hardhat\";\nexports.HARDHAT_NETWORK_NAME = \"hardhat\";\nexports.SOLIDITY_FILES_CACHE_FILENAME = \"solidity-files-cache.json\";\nexports.HARDHAT_NETWORK_SUPPORTED_HARDFORKS = [\n    // \"chainstart\",\n    // \"homestead\",\n    // \"dao\",\n    // \"tangerineWhistle\",\n    // \"spuriousDragon\",\n    \"byzantium\",\n    \"constantinople\",\n    \"petersburg\",\n    \"istanbul\",\n    \"muirGlacier\",\n    \"berlin\",\n    \"london\",\n    \"arrowGlacier\",\n    \"grayGlacier\",\n    \"merge\",\n    \"shanghai\",\n    \"cancun\",\n];\nexports.HARDHAT_MEMPOOL_SUPPORTED_ORDERS = [\"fifo\", \"priority\"];\nexports.ARTIFACT_FORMAT_VERSION = \"hh-sol-artifact-1\";\nexports.DEBUG_FILE_FORMAT_VERSION = \"hh-sol-dbg-1\";\nexports.BUILD_INFO_FORMAT_VERSION = \"hh-sol-build-info-1\";\nexports.BUILD_INFO_DIR_NAME = \"build-info\";\nexports.EDIT_DISTANCE_THRESHOLD = 3;\nexports.HARDHAT_NETWORK_RESET_EVENT = \"hardhatNetworkReset\";\nexports.HARDHAT_NETWORK_REVERT_SNAPSHOT_EVENT = \"hardhatNetworkRevertSnapshot\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkNBQTZDLEdBQUcsbUNBQW1DLEdBQUcsK0JBQStCLEdBQUcsMkJBQTJCLEdBQUcsaUNBQWlDLEdBQUcsaUNBQWlDLEdBQUcsK0JBQStCLEdBQUcsd0NBQXdDLEdBQUcsMkNBQTJDLEdBQUcscUNBQXFDLEdBQUcsNEJBQTRCLEdBQUcsK0JBQStCLEdBQUcsb0JBQW9CO0FBQ3RkLG9CQUFvQjtBQUNwQiwrQkFBK0I7QUFDL0IsNEJBQTRCO0FBQzVCLHFDQUFxQztBQUNyQywyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLCtCQUErQjtBQUMvQixpQ0FBaUM7QUFDakMsaUNBQWlDO0FBQ2pDLDJCQUEyQjtBQUMzQiwrQkFBK0I7QUFDL0IsbUNBQW1DO0FBQ25DLDZDQUE2QztBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb25zdGFudHMuanM/YjA2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSEFSREhBVF9ORVRXT1JLX1JFVkVSVF9TTkFQU0hPVF9FVkVOVCA9IGV4cG9ydHMuSEFSREhBVF9ORVRXT1JLX1JFU0VUX0VWRU5UID0gZXhwb3J0cy5FRElUX0RJU1RBTkNFX1RIUkVTSE9MRCA9IGV4cG9ydHMuQlVJTERfSU5GT19ESVJfTkFNRSA9IGV4cG9ydHMuQlVJTERfSU5GT19GT1JNQVRfVkVSU0lPTiA9IGV4cG9ydHMuREVCVUdfRklMRV9GT1JNQVRfVkVSU0lPTiA9IGV4cG9ydHMuQVJUSUZBQ1RfRk9STUFUX1ZFUlNJT04gPSBleHBvcnRzLkhBUkRIQVRfTUVNUE9PTF9TVVBQT1JURURfT1JERVJTID0gZXhwb3J0cy5IQVJESEFUX05FVFdPUktfU1VQUE9SVEVEX0hBUkRGT1JLUyA9IGV4cG9ydHMuU09MSURJVFlfRklMRVNfQ0FDSEVfRklMRU5BTUUgPSBleHBvcnRzLkhBUkRIQVRfTkVUV09SS19OQU1FID0gZXhwb3J0cy5IQVJESEFUX0VYRUNVVEFCTEVfTkFNRSA9IGV4cG9ydHMuSEFSREhBVF9OQU1FID0gdm9pZCAwO1xuZXhwb3J0cy5IQVJESEFUX05BTUUgPSBcIkhhcmRoYXRcIjtcbmV4cG9ydHMuSEFSREhBVF9FWEVDVVRBQkxFX05BTUUgPSBcImhhcmRoYXRcIjtcbmV4cG9ydHMuSEFSREhBVF9ORVRXT1JLX05BTUUgPSBcImhhcmRoYXRcIjtcbmV4cG9ydHMuU09MSURJVFlfRklMRVNfQ0FDSEVfRklMRU5BTUUgPSBcInNvbGlkaXR5LWZpbGVzLWNhY2hlLmpzb25cIjtcbmV4cG9ydHMuSEFSREhBVF9ORVRXT1JLX1NVUFBPUlRFRF9IQVJERk9SS1MgPSBbXG4gICAgLy8gXCJjaGFpbnN0YXJ0XCIsXG4gICAgLy8gXCJob21lc3RlYWRcIixcbiAgICAvLyBcImRhb1wiLFxuICAgIC8vIFwidGFuZ2VyaW5lV2hpc3RsZVwiLFxuICAgIC8vIFwic3B1cmlvdXNEcmFnb25cIixcbiAgICBcImJ5emFudGl1bVwiLFxuICAgIFwiY29uc3RhbnRpbm9wbGVcIixcbiAgICBcInBldGVyc2J1cmdcIixcbiAgICBcImlzdGFuYnVsXCIsXG4gICAgXCJtdWlyR2xhY2llclwiLFxuICAgIFwiYmVybGluXCIsXG4gICAgXCJsb25kb25cIixcbiAgICBcImFycm93R2xhY2llclwiLFxuICAgIFwiZ3JheUdsYWNpZXJcIixcbiAgICBcIm1lcmdlXCIsXG4gICAgXCJzaGFuZ2hhaVwiLFxuICAgIFwiY2FuY3VuXCIsXG5dO1xuZXhwb3J0cy5IQVJESEFUX01FTVBPT0xfU1VQUE9SVEVEX09SREVSUyA9IFtcImZpZm9cIiwgXCJwcmlvcml0eVwiXTtcbmV4cG9ydHMuQVJUSUZBQ1RfRk9STUFUX1ZFUlNJT04gPSBcImhoLXNvbC1hcnRpZmFjdC0xXCI7XG5leHBvcnRzLkRFQlVHX0ZJTEVfRk9STUFUX1ZFUlNJT04gPSBcImhoLXNvbC1kYmctMVwiO1xuZXhwb3J0cy5CVUlMRF9JTkZPX0ZPUk1BVF9WRVJTSU9OID0gXCJoaC1zb2wtYnVpbGQtaW5mby0xXCI7XG5leHBvcnRzLkJVSUxEX0lORk9fRElSX05BTUUgPSBcImJ1aWxkLWluZm9cIjtcbmV4cG9ydHMuRURJVF9ESVNUQU5DRV9USFJFU0hPTEQgPSAzO1xuZXhwb3J0cy5IQVJESEFUX05FVFdPUktfUkVTRVRfRVZFTlQgPSBcImhhcmRoYXROZXR3b3JrUmVzZXRcIjtcbmV4cG9ydHMuSEFSREhBVF9ORVRXT1JLX1JFVkVSVF9TTkFQU0hPVF9FVkVOVCA9IFwiaGFyZGhhdE5ldHdvcmtSZXZlcnRTbmFwc2hvdFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/context.js":
/*!**************************************************!*\
  !*** ./node_modules/hardhat/internal/context.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HardhatContext = void 0;\nconst errors_1 = __webpack_require__(/*! ./core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ./core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst vars_manager_1 = __webpack_require__(/*! ./core/vars/vars-manager */ \"(ssr)/./node_modules/hardhat/internal/core/vars/vars-manager.js\");\nconst dsl_1 = __webpack_require__(/*! ./core/tasks/dsl */ \"(ssr)/./node_modules/hardhat/internal/core/tasks/dsl.js\");\nconst global_dir_1 = __webpack_require__(/*! ./util/global-dir */ \"(ssr)/./node_modules/hardhat/internal/util/global-dir.js\");\nconst platform_1 = __webpack_require__(/*! ./util/platform */ \"(ssr)/./node_modules/hardhat/internal/util/platform.js\");\nclass HardhatContext {\n    constructor() {\n        this.tasksDSL = new dsl_1.TasksDSL();\n        this.environmentExtenders = [];\n        this.providerExtenders = [];\n        this.configExtenders = [];\n        this.varsManager = new vars_manager_1.VarsManager((0, global_dir_1.getVarsFilePath)());\n    }\n    static isCreated() {\n        const globalWithHardhatContext = global;\n        return globalWithHardhatContext.__hardhatContext !== undefined;\n    }\n    static createHardhatContext() {\n        if (this.isCreated()) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n        }\n        const globalWithHardhatContext = global;\n        const ctx = new HardhatContext();\n        globalWithHardhatContext.__hardhatContext = ctx;\n        return ctx;\n    }\n    static getHardhatContext() {\n        const globalWithHardhatContext = global;\n        const ctx = globalWithHardhatContext.__hardhatContext;\n        if (ctx === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n        }\n        return ctx;\n    }\n    static deleteHardhatContext() {\n        const globalAsAny = global;\n        globalAsAny.__hardhatContext = undefined;\n    }\n    setHardhatRuntimeEnvironment(env) {\n        if (this.environment !== undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n        }\n        this.environment = env;\n    }\n    getHardhatRuntimeEnvironment() {\n        if (this.environment === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n        }\n        return this.environment;\n    }\n    setConfigLoadingAsStarted() {\n        this._filesLoadedBeforeConfig = (0, platform_1.getRequireCachedFiles)();\n    }\n    setConfigLoadingAsFinished() {\n        this._filesLoadedAfterConfig = (0, platform_1.getRequireCachedFiles)();\n    }\n    getFilesLoadedDuringConfig() {\n        // No config was loaded\n        if (this._filesLoadedBeforeConfig === undefined) {\n            return [];\n        }\n        (0, errors_1.assertHardhatInvariant)(this._filesLoadedAfterConfig !== undefined, \"Config loading was set as started and not finished\");\n        return arraysDifference(this._filesLoadedAfterConfig, this._filesLoadedBeforeConfig);\n    }\n}\nexports.HardhatContext = HardhatContext;\nfunction arraysDifference(a, b) {\n    return a.filter((e) => !b.includes(e));\n}\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixpQkFBaUIsbUJBQU8sQ0FBQywyRUFBZTtBQUN4QyxzQkFBc0IsbUJBQU8sQ0FBQyxxRkFBb0I7QUFDbEQsdUJBQXVCLG1CQUFPLENBQUMsaUdBQTBCO0FBQ3pELGNBQWMsbUJBQU8sQ0FBQyxpRkFBa0I7QUFDeEMscUJBQXFCLG1CQUFPLENBQUMsbUZBQW1CO0FBQ2hELG1CQUFtQixtQkFBTyxDQUFDLCtFQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvY29udGV4dC5qcz9mYjI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IYXJkaGF0Q29udGV4dCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vY29yZS9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4vY29yZS9lcnJvcnMtbGlzdFwiKTtcbmNvbnN0IHZhcnNfbWFuYWdlcl8xID0gcmVxdWlyZShcIi4vY29yZS92YXJzL3ZhcnMtbWFuYWdlclwiKTtcbmNvbnN0IGRzbF8xID0gcmVxdWlyZShcIi4vY29yZS90YXNrcy9kc2xcIik7XG5jb25zdCBnbG9iYWxfZGlyXzEgPSByZXF1aXJlKFwiLi91dGlsL2dsb2JhbC1kaXJcIik7XG5jb25zdCBwbGF0Zm9ybV8xID0gcmVxdWlyZShcIi4vdXRpbC9wbGF0Zm9ybVwiKTtcbmNsYXNzIEhhcmRoYXRDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50YXNrc0RTTCA9IG5ldyBkc2xfMS5UYXNrc0RTTCgpO1xuICAgICAgICB0aGlzLmVudmlyb25tZW50RXh0ZW5kZXJzID0gW107XG4gICAgICAgIHRoaXMucHJvdmlkZXJFeHRlbmRlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5jb25maWdFeHRlbmRlcnMgPSBbXTtcbiAgICAgICAgdGhpcy52YXJzTWFuYWdlciA9IG5ldyB2YXJzX21hbmFnZXJfMS5WYXJzTWFuYWdlcigoMCwgZ2xvYmFsX2Rpcl8xLmdldFZhcnNGaWxlUGF0aCkoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBpc0NyZWF0ZWQoKSB7XG4gICAgICAgIGNvbnN0IGdsb2JhbFdpdGhIYXJkaGF0Q29udGV4dCA9IGdsb2JhbDtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFdpdGhIYXJkaGF0Q29udGV4dC5fX2hhcmRoYXRDb250ZXh0ICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGVIYXJkaGF0Q29udGV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDcmVhdGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuR0VORVJBTC5DT05URVhUX0FMUkVBRFlfQ1JFQVRFRCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ2xvYmFsV2l0aEhhcmRoYXRDb250ZXh0ID0gZ2xvYmFsO1xuICAgICAgICBjb25zdCBjdHggPSBuZXcgSGFyZGhhdENvbnRleHQoKTtcbiAgICAgICAgZ2xvYmFsV2l0aEhhcmRoYXRDb250ZXh0Ll9faGFyZGhhdENvbnRleHQgPSBjdHg7XG4gICAgICAgIHJldHVybiBjdHg7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRIYXJkaGF0Q29udGV4dCgpIHtcbiAgICAgICAgY29uc3QgZ2xvYmFsV2l0aEhhcmRoYXRDb250ZXh0ID0gZ2xvYmFsO1xuICAgICAgICBjb25zdCBjdHggPSBnbG9iYWxXaXRoSGFyZGhhdENvbnRleHQuX19oYXJkaGF0Q29udGV4dDtcbiAgICAgICAgaWYgKGN0eCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLkdFTkVSQUwuQ09OVEVYVF9OT1RfQ1JFQVRFRCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN0eDtcbiAgICB9XG4gICAgc3RhdGljIGRlbGV0ZUhhcmRoYXRDb250ZXh0KCkge1xuICAgICAgICBjb25zdCBnbG9iYWxBc0FueSA9IGdsb2JhbDtcbiAgICAgICAgZ2xvYmFsQXNBbnkuX19oYXJkaGF0Q29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc2V0SGFyZGhhdFJ1bnRpbWVFbnZpcm9ubWVudChlbnYpIHtcbiAgICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5HRU5FUkFMLkNPTlRFWFRfSFJFX0FMUkVBRFlfREVGSU5FRCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudjtcbiAgICB9XG4gICAgZ2V0SGFyZGhhdFJ1bnRpbWVFbnZpcm9ubWVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW52aXJvbm1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5HRU5FUkFMLkNPTlRFWFRfSFJFX05PVF9ERUZJTkVEKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lbnZpcm9ubWVudDtcbiAgICB9XG4gICAgc2V0Q29uZmlnTG9hZGluZ0FzU3RhcnRlZCgpIHtcbiAgICAgICAgdGhpcy5fZmlsZXNMb2FkZWRCZWZvcmVDb25maWcgPSAoMCwgcGxhdGZvcm1fMS5nZXRSZXF1aXJlQ2FjaGVkRmlsZXMpKCk7XG4gICAgfVxuICAgIHNldENvbmZpZ0xvYWRpbmdBc0ZpbmlzaGVkKCkge1xuICAgICAgICB0aGlzLl9maWxlc0xvYWRlZEFmdGVyQ29uZmlnID0gKDAsIHBsYXRmb3JtXzEuZ2V0UmVxdWlyZUNhY2hlZEZpbGVzKSgpO1xuICAgIH1cbiAgICBnZXRGaWxlc0xvYWRlZER1cmluZ0NvbmZpZygpIHtcbiAgICAgICAgLy8gTm8gY29uZmlnIHdhcyBsb2FkZWRcbiAgICAgICAgaWYgKHRoaXMuX2ZpbGVzTG9hZGVkQmVmb3JlQ29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICAoMCwgZXJyb3JzXzEuYXNzZXJ0SGFyZGhhdEludmFyaWFudCkodGhpcy5fZmlsZXNMb2FkZWRBZnRlckNvbmZpZyAhPT0gdW5kZWZpbmVkLCBcIkNvbmZpZyBsb2FkaW5nIHdhcyBzZXQgYXMgc3RhcnRlZCBhbmQgbm90IGZpbmlzaGVkXCIpO1xuICAgICAgICByZXR1cm4gYXJyYXlzRGlmZmVyZW5jZSh0aGlzLl9maWxlc0xvYWRlZEFmdGVyQ29uZmlnLCB0aGlzLl9maWxlc0xvYWRlZEJlZm9yZUNvbmZpZyk7XG4gICAgfVxufVxuZXhwb3J0cy5IYXJkaGF0Q29udGV4dCA9IEhhcmRoYXRDb250ZXh0O1xuZnVuY3Rpb24gYXJyYXlzRGlmZmVyZW5jZShhLCBiKSB7XG4gICAgcmV0dXJuIGEuZmlsdGVyKChlKSA9PiAhYi5pbmNsdWRlcyhlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/config/config-env.js":
/*!*****************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/config/config-env.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.vars = exports.extendProvider = exports.extendConfig = exports.extendEnvironment = exports.types = exports.scope = exports.internalTask = exports.subtask = exports.task = void 0;\nconst context_1 = __webpack_require__(/*! ../../context */ \"(ssr)/./node_modules/hardhat/internal/context.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst argumentTypes = __importStar(__webpack_require__(/*! ../params/argumentTypes */ \"(ssr)/./node_modules/hardhat/internal/core/params/argumentTypes.js\"));\nfunction task(name, descriptionOrAction, action) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    const dsl = ctx.tasksDSL;\n    if (descriptionOrAction === undefined) {\n        return dsl.task(name);\n    }\n    if (typeof descriptionOrAction !== \"string\") {\n        return dsl.task(name, descriptionOrAction);\n    }\n    return dsl.task(name, descriptionOrAction, action);\n}\nexports.task = task;\nfunction subtask(name, descriptionOrAction, action) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    const dsl = ctx.tasksDSL;\n    if (descriptionOrAction === undefined) {\n        return dsl.subtask(name);\n    }\n    if (typeof descriptionOrAction !== \"string\") {\n        return dsl.subtask(name, descriptionOrAction);\n    }\n    return dsl.subtask(name, descriptionOrAction, action);\n}\nexports.subtask = subtask;\n// Backwards compatibility alias\nexports.internalTask = subtask;\nfunction scope(name, description) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    const dsl = ctx.tasksDSL;\n    return dsl.scope(name, description);\n}\nexports.scope = scope;\nexports.types = argumentTypes;\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\nfunction extendEnvironment(extender) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    ctx.environmentExtenders.push(extender);\n}\nexports.extendEnvironment = extendEnvironment;\n/**\n * Register a config extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the resolved config\n * to be modified and the config provided by the user\n */\nfunction extendConfig(extender) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    ctx.configExtenders.push(extender);\n}\nexports.extendConfig = extendConfig;\n/**\n * Register a provider extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the current provider\n * and returns a new one.\n */\nfunction extendProvider(extender) {\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    ctx.providerExtenders.push(extender);\n}\nexports.extendProvider = extendProvider;\n/**\n * This object provides methods to interact with the configuration variables.\n */\nexports.vars = {\n    has: hasVar,\n    get: getVar,\n};\n/**\n * Checks if a configuration variable exists.\n *\n * @remarks\n * This method, when used during setup (via `npx hardhat vars setup`), will mark the variable as optional.\n *\n * @param varName - The name of the variable to check.\n *\n * @returns `true` if the variable exists, `false` otherwise.\n */\nfunction hasVar(varName) {\n    // varsManager will be an instance of VarsManager or VarsManagerSetup depending on the context (vars setup mode or not)\n    return context_1.HardhatContext.getHardhatContext().varsManager.has(varName, true);\n}\n/**\n * Gets the value of the given configuration variable.\n *\n * @remarks\n * This method, when used during setup (via `npx hardhat vars setup`), will mark the variable as required,\n * unless a default value is provided.\n *\n * @param varName - The name of the variable to retrieve.\n * @param [defaultValue] - An optional default value to return if the variable does not exist.\n *\n * @returns The value of the configuration variable if it exists, or the default value if provided.\n *\n * @throws HH1201 if the variable does not exist and no default value is set.\n */\nfunction getVar(varName, defaultValue) {\n    // varsManager will be an instance of VarsManager or VarsManagerSetup depending on the context (vars setup mode or not)\n    const value = context_1.HardhatContext.getHardhatContext().varsManager.get(varName, defaultValue, true);\n    if (value !== undefined)\n        return value;\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.VALUE_NOT_FOUND_FOR_VAR, {\n        value: varName,\n    });\n}\n//# sourceMappingURL=config-env.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/config/config-loading.js":
/*!*********************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/config/config-loading.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getConfiguredCompilers = exports.analyzeModuleNotFoundError = exports.loadConfigAndTasks = exports.resolveConfigPath = exports.importCsjOrEsModule = void 0;\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst semver_1 = __importDefault(__webpack_require__(/*! semver */ \"(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\"));\nconst context_1 = __webpack_require__(/*! ../../context */ \"(ssr)/./node_modules/hardhat/internal/context.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../../util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst project_structure_1 = __webpack_require__(/*! ../project-structure */ \"(ssr)/./node_modules/hardhat/internal/core/project-structure.js\");\nconst constants_1 = __webpack_require__(/*! ../../hardhat-network/stack-traces/constants */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/constants.js\");\nconst config_resolution_1 = __webpack_require__(/*! ./config-resolution */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-resolution.js\");\nconst default_config_1 = __webpack_require__(/*! ./default-config */ \"(ssr)/./node_modules/hardhat/internal/core/config/default-config.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:config\");\nfunction importCsjOrEsModule(filePath) {\n    try {\n        const imported = __webpack_require__(\"(ssr)/./node_modules/hardhat/internal/core/config sync recursive\")(filePath);\n        return imported.default !== undefined ? imported.default : imported;\n    }\n    catch (e) {\n        if (e.code === \"ERR_REQUIRE_ESM\") {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.ESM_PROJECT_WITHOUT_CJS_CONFIG, {}, e);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw e;\n    }\n}\nexports.importCsjOrEsModule = importCsjOrEsModule;\nfunction resolveConfigPath(configPath) {\n    if (configPath === undefined) {\n        configPath = (0, project_structure_1.getUserConfigPath)();\n    }\n    else {\n        if (!path_1.default.isAbsolute(configPath)) {\n            configPath = path_1.default.join(process.cwd(), configPath);\n            configPath = path_1.default.normalize(configPath);\n        }\n    }\n    return configPath;\n}\nexports.resolveConfigPath = resolveConfigPath;\nfunction loadConfigAndTasks(hardhatArguments, { showEmptyConfigWarning = false, showSolidityConfigWarnings = false, } = {\n    showEmptyConfigWarning: false,\n    showSolidityConfigWarnings: false,\n}) {\n    const { validateConfig, validateResolvedConfig } = __webpack_require__(/*! ./config-validation */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-validation.js\");\n    let configPath = hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n    configPath = resolveConfigPath(configPath);\n    log(`Loading Hardhat config from ${configPath}`);\n    // Before loading the builtin tasks, the default and user's config we expose\n    // the config env in the global object.\n    const configEnv = __webpack_require__(/*! ./config-env */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-env.js\");\n    const globalAsAny = global;\n    Object.entries(configEnv).forEach(([key, value]) => (globalAsAny[key] = value));\n    const ctx = context_1.HardhatContext.getHardhatContext();\n    ctx.setConfigLoadingAsStarted();\n    let userConfig;\n    try {\n        __webpack_require__(/*! ../tasks/builtin-tasks */ \"(ssr)/./node_modules/hardhat/internal/core/tasks/builtin-tasks.js\");\n        userConfig = importCsjOrEsModule(configPath);\n    }\n    catch (e) {\n        analyzeModuleNotFoundError(e, configPath);\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw e;\n    }\n    finally {\n        ctx.setConfigLoadingAsFinished();\n    }\n    if (showEmptyConfigWarning) {\n        checkEmptyConfig(userConfig, { showSolidityConfigWarnings });\n    }\n    validateConfig(userConfig);\n    if (showSolidityConfigWarnings) {\n        checkMissingSolidityConfig(userConfig);\n    }\n    // To avoid bad practices we remove the previously exported stuff\n    Object.keys(configEnv).forEach((key) => (globalAsAny[key] = undefined));\n    const frozenUserConfig = deepFreezeUserConfig(userConfig);\n    const resolved = (0, config_resolution_1.resolveConfig)(configPath, userConfig);\n    for (const extender of context_1.HardhatContext.getHardhatContext().configExtenders) {\n        extender(resolved, frozenUserConfig);\n    }\n    validateResolvedConfig(resolved);\n    if (showSolidityConfigWarnings) {\n        checkUnsupportedSolidityConfig(resolved);\n        checkUnsupportedRemappings(resolved);\n    }\n    return { resolvedConfig: resolved, userConfig: frozenUserConfig };\n}\nexports.loadConfigAndTasks = loadConfigAndTasks;\nfunction deepFreezeUserConfig(config, propertyPath = []) {\n    if (typeof config !== \"object\" || config === null) {\n        return config;\n    }\n    return new Proxy(config, {\n        get(target, property, receiver) {\n            return deepFreezeUserConfig(Reflect.get(target, property, receiver), [\n                ...propertyPath,\n                property,\n            ]);\n        },\n        set(target, property, _value, _receiver) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n                path: [...propertyPath, property]\n                    .map((pathPart) => pathPart.toString())\n                    .join(\".\"),\n            });\n        },\n    });\n}\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropriate error. Otherwise it does\n * nothing.\n */\nfunction analyzeModuleNotFoundError(error, configPath) {\n    const stackTraceParser = __webpack_require__(/*! stacktrace-parser */ \"(ssr)/./node_modules/stacktrace-parser/dist/stack-trace-parser.esm.js\");\n    if (error.code !== \"MODULE_NOT_FOUND\") {\n        return;\n    }\n    const stackTrace = stackTraceParser.parse(error.stack);\n    const throwingFile = stackTrace\n        .filter((x) => x.file !== null)\n        .map((x) => x.file)\n        // ignore frames related to source map support\n        .filter((x) => !x.includes(path_1.default.join(\"@cspotcode\", \"source-map-support\")))\n        .find((x) => path_1.default.isAbsolute(x));\n    if (throwingFile === null || throwingFile === undefined) {\n        return;\n    }\n    // if the error comes from the config file, we ignore it because we know it's\n    // a direct import that's missing\n    if (throwingFile === configPath) {\n        return;\n    }\n    const packageJsonPath = (0, packageInfo_1.findClosestPackageJson)(throwingFile);\n    if (packageJsonPath === undefined) {\n        return;\n    }\n    const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n    const peerDependencies = packageJson.peerDependencies ?? {};\n    if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n            plugin: packageJson.name,\n        });\n    }\n    // if the problem doesn't come from a hardhat plugin, we ignore it\n    if (peerDependencies.hardhat === undefined) {\n        return;\n    }\n    const missingPeerDependencies = {};\n    for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n        const peerDependencyPackageJson = readPackageJson(peerDependency, configPath);\n        if (peerDependencyPackageJson === undefined) {\n            missingPeerDependencies[peerDependency] = version;\n        }\n    }\n    const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n    if (missingPeerDependenciesNames.length > 0) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n            plugin: packageJson.name,\n            missingDependencies: missingPeerDependenciesNames.join(\", \"),\n            missingDependenciesVersions: Object.entries(missingPeerDependencies)\n                .map(([name, version]) => `\"${name}@${version}\"`)\n                .join(\" \"),\n        });\n    }\n}\nexports.analyzeModuleNotFoundError = analyzeModuleNotFoundError;\nfunction readPackageJson(packageName, configPath) {\n    const resolve = __webpack_require__(/*! resolve */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/index.js\");\n    try {\n        const packageJsonPath = resolve.sync(path_1.default.join(packageName, \"package.json\"), {\n            basedir: path_1.default.dirname(configPath),\n        });\n        return __webpack_require__(\"(ssr)/./node_modules/hardhat/internal/core/config sync recursive\")(packageJsonPath);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction checkEmptyConfig(userConfig, { showSolidityConfigWarnings }) {\n    if (userConfig === undefined || Object.keys(userConfig).length === 0) {\n        let warning = `Hardhat config is returning an empty config object, check the export from the config file if this is unexpected.\\n`;\n        // This 'learn more' section is also printed by the solidity config warning,\n        // so we need to check to avoid printing it twice\n        if (!showSolidityConfigWarnings) {\n            warning += `\\nLearn more about configuring Hardhat at https://hardhat.org/config\\n`;\n        }\n        console.warn(picocolors_1.default.yellow(warning));\n    }\n}\nfunction checkMissingSolidityConfig(userConfig) {\n    if (userConfig.solidity === undefined) {\n        console.warn(picocolors_1.default.yellow(`Solidity compiler is not configured. Version ${default_config_1.DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n    }\n}\nfunction checkUnsupportedSolidityConfig(resolvedConfig) {\n    const configuredCompilers = getConfiguredCompilers(resolvedConfig.solidity);\n    const solcVersions = configuredCompilers.map((x) => x.version);\n    const unsupportedVersions = [];\n    for (const solcVersion of solcVersions) {\n        if (!semver_1.default.satisfies(solcVersion, constants_1.SUPPORTED_SOLIDITY_VERSION_RANGE) &&\n            !unsupportedVersions.includes(solcVersion)) {\n            unsupportedVersions.push(solcVersion);\n        }\n    }\n    if (unsupportedVersions.length > 0) {\n        console.warn(picocolors_1.default.yellow(`Solidity ${unsupportedVersions.join(\", \")} ${unsupportedVersions.length === 1 ? \"is\" : \"are\"} not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/hardhat-runner/docs/reference/solidity-support\n`));\n    }\n}\nfunction checkUnsupportedRemappings({ solidity }) {\n    const solcConfigs = [\n        ...solidity.compilers,\n        ...Object.values(solidity.overrides),\n    ];\n    const remappings = solcConfigs.filter(({ settings }) => settings.remappings !== undefined);\n    if (remappings.length > 0) {\n        console.warn(picocolors_1.default.yellow(`Solidity remappings are not currently supported; you may experience unexpected compilation results. Remove any 'remappings' fields from your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n    }\n}\nfunction getConfiguredCompilers(solidityConfig) {\n    const compilerVersions = solidityConfig.compilers;\n    const overrideVersions = Object.values(solidityConfig.overrides);\n    return [...compilerVersions, ...overrideVersions];\n}\nexports.getConfiguredCompilers = getConfiguredCompilers;\n//# sourceMappingURL=config-loading.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/config/config-loading.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/config/config-resolution.js":
/*!************************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/config/config-resolution.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveProjectPaths = exports.resolveConfig = void 0;\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst semver_1 = __importDefault(__webpack_require__(/*! semver */ \"(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\"));\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst lang_1 = __webpack_require__(/*! ../../util/lang */ \"(ssr)/./node_modules/hardhat/internal/util/lang.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst fs_utils_1 = __webpack_require__(/*! ../../util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\nconst default_config_1 = __webpack_require__(/*! ./default-config */ \"(ssr)/./node_modules/hardhat/internal/core/config/default-config.js\");\n/**\n * This functions resolves the hardhat config, setting its defaults and\n * normalizing its types if necessary.\n *\n * @param userConfigPath the user config filepath\n * @param userConfig     the user config object\n *\n * @returns the resolved config\n */\nfunction resolveConfig(userConfigPath, userConfig) {\n    const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ \"(ssr)/./node_modules/lodash/cloneDeep.js\");\n    userConfig = cloneDeep(userConfig);\n    return {\n        ...userConfig,\n        defaultNetwork: userConfig.defaultNetwork ?? default_config_1.defaultDefaultNetwork,\n        paths: resolveProjectPaths(userConfigPath, userConfig.paths),\n        networks: resolveNetworksConfig(userConfig.networks),\n        solidity: resolveSolidityConfig(userConfig),\n        mocha: resolveMochaConfig(userConfig),\n    };\n}\nexports.resolveConfig = resolveConfig;\nfunction resolveNetworksConfig(networksConfig = {}) {\n    const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ \"(ssr)/./node_modules/lodash/cloneDeep.js\");\n    const hardhatNetworkConfig = networksConfig[constants_1.HARDHAT_NETWORK_NAME];\n    const localhostNetworkConfig = networksConfig.localhost ?? undefined;\n    const hardhat = resolveHardhatNetworkConfig(hardhatNetworkConfig);\n    const localhost = resolveHttpNetworkConfig({\n        ...cloneDeep(default_config_1.defaultLocalhostNetworkParams),\n        ...localhostNetworkConfig,\n    });\n    const otherNetworks = (0, lang_1.fromEntries)(Object.entries(networksConfig)\n        .filter(([name, config]) => name !== \"localhost\" &&\n        name !== \"hardhat\" &&\n        config !== undefined &&\n        isHttpNetworkConfig(config))\n        .map(([name, config]) => [\n        name,\n        resolveHttpNetworkConfig(config),\n    ]));\n    return {\n        hardhat,\n        localhost,\n        ...otherNetworks,\n    };\n}\nfunction isHttpNetworkConfig(config) {\n    return \"url\" in config;\n}\nfunction normalizeHexString(str) {\n    const normalized = str.trim().toLowerCase();\n    if (normalized.startsWith(\"0x\")) {\n        return normalized;\n    }\n    return `0x${normalized}`;\n}\nfunction resolveHardhatNetworkConfig(hardhatNetworkConfig = {}) {\n    const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ \"(ssr)/./node_modules/lodash/cloneDeep.js\");\n    const clonedDefaultHardhatNetworkParams = cloneDeep(default_config_1.defaultHardhatNetworkParams);\n    const accounts = hardhatNetworkConfig.accounts === undefined\n        ? default_config_1.defaultHardhatNetworkHdAccountsConfigParams\n        : Array.isArray(hardhatNetworkConfig.accounts)\n            ? hardhatNetworkConfig.accounts.map(({ privateKey, balance }) => ({\n                privateKey: normalizeHexString(privateKey),\n                balance,\n            }))\n            : {\n                ...default_config_1.defaultHardhatNetworkHdAccountsConfigParams,\n                ...hardhatNetworkConfig.accounts,\n            };\n    const forking = hardhatNetworkConfig.forking !== undefined\n        ? {\n            url: hardhatNetworkConfig.forking.url,\n            enabled: hardhatNetworkConfig.forking.enabled ?? true,\n            httpHeaders: {},\n        }\n        : undefined;\n    if (forking !== undefined) {\n        const blockNumber = hardhatNetworkConfig?.forking?.blockNumber;\n        if (blockNumber !== undefined) {\n            forking.blockNumber = hardhatNetworkConfig?.forking?.blockNumber;\n        }\n        const httpHeaders = hardhatNetworkConfig.forking?.httpHeaders;\n        if (httpHeaders !== undefined) {\n            forking.httpHeaders = httpHeaders;\n        }\n    }\n    const mining = resolveMiningConfig(hardhatNetworkConfig.mining);\n    const minGasPrice = BigInt(hardhatNetworkConfig.minGasPrice ??\n        clonedDefaultHardhatNetworkParams.minGasPrice);\n    const blockGasLimit = hardhatNetworkConfig.blockGasLimit ??\n        clonedDefaultHardhatNetworkParams.blockGasLimit;\n    const gas = hardhatNetworkConfig.gas ?? blockGasLimit;\n    const gasPrice = hardhatNetworkConfig.gasPrice ?? clonedDefaultHardhatNetworkParams.gasPrice;\n    const initialBaseFeePerGas = hardhatNetworkConfig.initialBaseFeePerGas ??\n        clonedDefaultHardhatNetworkParams.initialBaseFeePerGas;\n    const initialDate = hardhatNetworkConfig.initialDate ?? new Date().toISOString();\n    const chains = new Map(default_config_1.defaultHardhatNetworkParams.chains);\n    if (hardhatNetworkConfig.chains !== undefined) {\n        for (const [chainId, userChainConfig] of Object.entries(hardhatNetworkConfig.chains)) {\n            const chainConfig = {\n                hardforkHistory: new Map(),\n            };\n            if (userChainConfig.hardforkHistory !== undefined) {\n                for (const [name, block] of Object.entries(userChainConfig.hardforkHistory)) {\n                    chainConfig.hardforkHistory.set(name, block);\n                }\n            }\n            chains.set(parseInt(chainId, 10), chainConfig);\n        }\n    }\n    const config = {\n        ...clonedDefaultHardhatNetworkParams,\n        ...hardhatNetworkConfig,\n        accounts,\n        forking,\n        mining,\n        blockGasLimit,\n        gas,\n        gasPrice,\n        initialBaseFeePerGas,\n        initialDate,\n        minGasPrice,\n        chains,\n    };\n    // We do it this way because ts gets lost otherwise\n    if (config.forking === undefined) {\n        delete config.forking;\n    }\n    if (config.initialBaseFeePerGas === undefined) {\n        delete config.initialBaseFeePerGas;\n    }\n    if (hardhatNetworkConfig.enableTransientStorage === true &&\n        hardhatNetworkConfig.hardfork === undefined) {\n        config.hardfork = \"cancun\";\n    }\n    if (hardhatNetworkConfig.enableTransientStorage === false &&\n        hardhatNetworkConfig.hardfork === undefined) {\n        config.hardfork = \"shanghai\";\n    }\n    return config;\n}\nfunction isHdAccountsConfig(accounts) {\n    return typeof accounts === \"object\" && !Array.isArray(accounts);\n}\nfunction resolveHttpNetworkConfig(networkConfig) {\n    const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ \"(ssr)/./node_modules/lodash/cloneDeep.js\");\n    const accounts = networkConfig.accounts === undefined\n        ? default_config_1.defaultHttpNetworkParams.accounts\n        : isHdAccountsConfig(networkConfig.accounts)\n            ? {\n                ...default_config_1.defaultHdAccountsConfigParams,\n                ...networkConfig.accounts,\n            }\n            : Array.isArray(networkConfig.accounts)\n                ? networkConfig.accounts.map(normalizeHexString)\n                : \"remote\";\n    const url = networkConfig.url;\n    (0, errors_1.assertHardhatInvariant)(url !== undefined, \"Invalid http network config provided. URL missing.\");\n    return {\n        ...cloneDeep(default_config_1.defaultHttpNetworkParams),\n        ...networkConfig,\n        accounts,\n        url,\n        gas: networkConfig.gas ?? default_config_1.defaultHttpNetworkParams.gas,\n        gasPrice: networkConfig.gasPrice ?? default_config_1.defaultHttpNetworkParams.gasPrice,\n    };\n}\nfunction resolveMiningConfig(userConfig) {\n    const mempool = resolveMempoolConfig(userConfig?.mempool);\n    if (userConfig === undefined) {\n        return {\n            auto: true,\n            interval: 0,\n            mempool,\n        };\n    }\n    const { auto, interval } = userConfig;\n    if (auto === undefined && interval === undefined) {\n        return {\n            auto: true,\n            interval: 0,\n            mempool,\n        };\n    }\n    if (auto === undefined && interval !== undefined) {\n        return {\n            auto: false,\n            interval,\n            mempool,\n        };\n    }\n    if (auto !== undefined && interval === undefined) {\n        return {\n            auto,\n            interval: 0,\n            mempool,\n        };\n    }\n    // ts can't infer it, but both values are defined here\n    return {\n        auto: auto,\n        interval: interval,\n        mempool,\n    };\n}\nfunction resolveMempoolConfig(userConfig) {\n    if (userConfig === undefined) {\n        return {\n            order: \"priority\",\n        };\n    }\n    if (userConfig.order === undefined) {\n        return {\n            order: \"priority\",\n        };\n    }\n    return {\n        order: userConfig.order,\n    };\n}\nfunction resolveSolidityConfig(userConfig) {\n    const userSolidityConfig = userConfig.solidity ?? default_config_1.DEFAULT_SOLC_VERSION;\n    const multiSolcConfig = normalizeSolidityConfig(userSolidityConfig);\n    const overrides = multiSolcConfig.overrides ?? {};\n    return {\n        compilers: multiSolcConfig.compilers.map(resolveCompiler),\n        overrides: (0, lang_1.fromEntries)(Object.entries(overrides).map(([name, config]) => [\n            name,\n            resolveCompiler(config),\n        ])),\n    };\n}\nfunction normalizeSolidityConfig(solidityConfig) {\n    if (typeof solidityConfig === \"string\") {\n        return {\n            compilers: [\n                {\n                    version: solidityConfig,\n                },\n            ],\n        };\n    }\n    if (\"version\" in solidityConfig) {\n        return { compilers: [solidityConfig] };\n    }\n    return solidityConfig;\n}\nfunction resolveCompiler(compiler) {\n    const resolved = {\n        version: compiler.version,\n        settings: compiler.settings ?? {},\n    };\n    if (semver_1.default.gte(resolved.version, \"0.8.20\")) {\n        resolved.settings.evmVersion = compiler.settings?.evmVersion ?? \"paris\";\n    }\n    resolved.settings.optimizer = {\n        enabled: false,\n        runs: 200,\n        ...resolved.settings.optimizer,\n    };\n    if (resolved.settings.outputSelection === undefined) {\n        resolved.settings.outputSelection = {};\n    }\n    for (const [file, contractSelection] of Object.entries(default_config_1.defaultSolcOutputSelection)) {\n        if (resolved.settings.outputSelection[file] === undefined) {\n            resolved.settings.outputSelection[file] = {};\n        }\n        for (const [contract, outputs] of Object.entries(contractSelection)) {\n            if (resolved.settings.outputSelection[file][contract] === undefined) {\n                resolved.settings.outputSelection[file][contract] = [];\n            }\n            for (const output of outputs) {\n                const includesOutput = resolved.settings.outputSelection[file][contract].includes(output);\n                if (!includesOutput) {\n                    resolved.settings.outputSelection[file][contract].push(output);\n                }\n            }\n        }\n    }\n    return resolved;\n}\nfunction resolveMochaConfig(userConfig) {\n    const cloneDeep = __webpack_require__(/*! lodash/cloneDeep */ \"(ssr)/./node_modules/lodash/cloneDeep.js\");\n    return {\n        ...cloneDeep(default_config_1.defaultMochaOptions),\n        ...userConfig.mocha,\n    };\n}\n/**\n * This function resolves the ProjectPathsConfig object from the user-provided config\n * and its path. The logic of this is not obvious and should well be document.\n * The good thing is that most users will never use this.\n *\n * Explanation:\n *    - paths.configFile is not overridable\n *    - If a path is absolute it is used \"as is\".\n *    - If the root path is relative, it's resolved from paths.configFile's dir.\n *    - If any other path is relative, it's resolved from paths.root.\n *    - Plugin-defined paths are not resolved, but encouraged to follow the same pattern.\n */\nfunction resolveProjectPaths(userConfigPath, userPaths = {}) {\n    const configFile = (0, fs_utils_1.getRealPathSync)(userConfigPath);\n    const configDir = path_1.default.dirname(configFile);\n    const root = resolvePathFrom(configDir, \"\", userPaths.root);\n    return {\n        ...userPaths,\n        root,\n        configFile,\n        sources: resolvePathFrom(root, \"contracts\", userPaths.sources),\n        cache: resolvePathFrom(root, \"cache\", userPaths.cache),\n        artifacts: resolvePathFrom(root, \"artifacts\", userPaths.artifacts),\n        tests: resolvePathFrom(root, \"test\", userPaths.tests),\n    };\n}\nexports.resolveProjectPaths = resolveProjectPaths;\nfunction resolvePathFrom(from, defaultPath, relativeOrAbsolutePath = defaultPath) {\n    if (path_1.default.isAbsolute(relativeOrAbsolutePath)) {\n        return relativeOrAbsolutePath;\n    }\n    return path_1.default.join(from, relativeOrAbsolutePath);\n}\n//# sourceMappingURL=config-resolution.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL2NvbmZpZy9jb25maWctcmVzb2x1dGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLHFCQUFxQjtBQUNuRCwrQkFBK0IsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QyxpQ0FBaUMsbUJBQU8sQ0FBQywwRUFBUTtBQUNqRCxvQkFBb0IsbUJBQU8sQ0FBQywyRUFBaUI7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLDJFQUFpQjtBQUN4QyxpQkFBaUIsbUJBQU8sQ0FBQyx1RUFBVztBQUNwQyxtQkFBbUIsbUJBQU8sQ0FBQyxtRkFBcUI7QUFDaEQseUJBQXlCLG1CQUFPLENBQUMsNkZBQWtCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsa0VBQWtCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGtEQUFrRDtBQUNsRCxzQkFBc0IsbUJBQU8sQ0FBQyxrRUFBa0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLDhEQUE4RDtBQUM5RCxzQkFBc0IsbUJBQU8sQ0FBQyxrRUFBa0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQscUJBQXFCO0FBQ3hFO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsa0VBQWtCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLGtFQUFrQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2NvcmUvY29uZmlnL2NvbmZpZy1yZXNvbHV0aW9uLmpzP2E3MzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc29sdmVQcm9qZWN0UGF0aHMgPSBleHBvcnRzLnJlc29sdmVDb25maWcgPSB2b2lkIDA7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3Qgc2VtdmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInNlbXZlclwiKSk7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHNcIik7XG5jb25zdCBsYW5nXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9sYW5nXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuY29uc3QgZnNfdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2ZzLXV0aWxzXCIpO1xuY29uc3QgZGVmYXVsdF9jb25maWdfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHQtY29uZmlnXCIpO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9ucyByZXNvbHZlcyB0aGUgaGFyZGhhdCBjb25maWcsIHNldHRpbmcgaXRzIGRlZmF1bHRzIGFuZFxuICogbm9ybWFsaXppbmcgaXRzIHR5cGVzIGlmIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0gdXNlckNvbmZpZ1BhdGggdGhlIHVzZXIgY29uZmlnIGZpbGVwYXRoXG4gKiBAcGFyYW0gdXNlckNvbmZpZyAgICAgdGhlIHVzZXIgY29uZmlnIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXNvbHZlZCBjb25maWdcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUNvbmZpZyh1c2VyQ29uZmlnUGF0aCwgdXNlckNvbmZpZykge1xuICAgIGNvbnN0IGNsb25lRGVlcCA9IHJlcXVpcmUoXCJsb2Rhc2gvY2xvbmVEZWVwXCIpO1xuICAgIHVzZXJDb25maWcgPSBjbG9uZURlZXAodXNlckNvbmZpZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4udXNlckNvbmZpZyxcbiAgICAgICAgZGVmYXVsdE5ldHdvcms6IHVzZXJDb25maWcuZGVmYXVsdE5ldHdvcmsgPz8gZGVmYXVsdF9jb25maWdfMS5kZWZhdWx0RGVmYXVsdE5ldHdvcmssXG4gICAgICAgIHBhdGhzOiByZXNvbHZlUHJvamVjdFBhdGhzKHVzZXJDb25maWdQYXRoLCB1c2VyQ29uZmlnLnBhdGhzKSxcbiAgICAgICAgbmV0d29ya3M6IHJlc29sdmVOZXR3b3Jrc0NvbmZpZyh1c2VyQ29uZmlnLm5ldHdvcmtzKSxcbiAgICAgICAgc29saWRpdHk6IHJlc29sdmVTb2xpZGl0eUNvbmZpZyh1c2VyQ29uZmlnKSxcbiAgICAgICAgbW9jaGE6IHJlc29sdmVNb2NoYUNvbmZpZyh1c2VyQ29uZmlnKSxcbiAgICB9O1xufVxuZXhwb3J0cy5yZXNvbHZlQ29uZmlnID0gcmVzb2x2ZUNvbmZpZztcbmZ1bmN0aW9uIHJlc29sdmVOZXR3b3Jrc0NvbmZpZyhuZXR3b3Jrc0NvbmZpZyA9IHt9KSB7XG4gICAgY29uc3QgY2xvbmVEZWVwID0gcmVxdWlyZShcImxvZGFzaC9jbG9uZURlZXBcIik7XG4gICAgY29uc3QgaGFyZGhhdE5ldHdvcmtDb25maWcgPSBuZXR3b3Jrc0NvbmZpZ1tjb25zdGFudHNfMS5IQVJESEFUX05FVFdPUktfTkFNRV07XG4gICAgY29uc3QgbG9jYWxob3N0TmV0d29ya0NvbmZpZyA9IG5ldHdvcmtzQ29uZmlnLmxvY2FsaG9zdCA/PyB1bmRlZmluZWQ7XG4gICAgY29uc3QgaGFyZGhhdCA9IHJlc29sdmVIYXJkaGF0TmV0d29ya0NvbmZpZyhoYXJkaGF0TmV0d29ya0NvbmZpZyk7XG4gICAgY29uc3QgbG9jYWxob3N0ID0gcmVzb2x2ZUh0dHBOZXR3b3JrQ29uZmlnKHtcbiAgICAgICAgLi4uY2xvbmVEZWVwKGRlZmF1bHRfY29uZmlnXzEuZGVmYXVsdExvY2FsaG9zdE5ldHdvcmtQYXJhbXMpLFxuICAgICAgICAuLi5sb2NhbGhvc3ROZXR3b3JrQ29uZmlnLFxuICAgIH0pO1xuICAgIGNvbnN0IG90aGVyTmV0d29ya3MgPSAoMCwgbGFuZ18xLmZyb21FbnRyaWVzKShPYmplY3QuZW50cmllcyhuZXR3b3Jrc0NvbmZpZylcbiAgICAgICAgLmZpbHRlcigoW25hbWUsIGNvbmZpZ10pID0+IG5hbWUgIT09IFwibG9jYWxob3N0XCIgJiZcbiAgICAgICAgbmFtZSAhPT0gXCJoYXJkaGF0XCIgJiZcbiAgICAgICAgY29uZmlnICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgaXNIdHRwTmV0d29ya0NvbmZpZyhjb25maWcpKVxuICAgICAgICAubWFwKChbbmFtZSwgY29uZmlnXSkgPT4gW1xuICAgICAgICBuYW1lLFxuICAgICAgICByZXNvbHZlSHR0cE5ldHdvcmtDb25maWcoY29uZmlnKSxcbiAgICBdKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFyZGhhdCxcbiAgICAgICAgbG9jYWxob3N0LFxuICAgICAgICAuLi5vdGhlck5ldHdvcmtzLFxuICAgIH07XG59XG5mdW5jdGlvbiBpc0h0dHBOZXR3b3JrQ29uZmlnKGNvbmZpZykge1xuICAgIHJldHVybiBcInVybFwiIGluIGNvbmZpZztcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhleFN0cmluZyhzdHIpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0gc3RyLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChub3JtYWxpemVkLnN0YXJ0c1dpdGgoXCIweFwiKSkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgICB9XG4gICAgcmV0dXJuIGAweCR7bm9ybWFsaXplZH1gO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUhhcmRoYXROZXR3b3JrQ29uZmlnKGhhcmRoYXROZXR3b3JrQ29uZmlnID0ge30pIHtcbiAgICBjb25zdCBjbG9uZURlZXAgPSByZXF1aXJlKFwibG9kYXNoL2Nsb25lRGVlcFwiKTtcbiAgICBjb25zdCBjbG9uZWREZWZhdWx0SGFyZGhhdE5ldHdvcmtQYXJhbXMgPSBjbG9uZURlZXAoZGVmYXVsdF9jb25maWdfMS5kZWZhdWx0SGFyZGhhdE5ldHdvcmtQYXJhbXMpO1xuICAgIGNvbnN0IGFjY291bnRzID0gaGFyZGhhdE5ldHdvcmtDb25maWcuYWNjb3VudHMgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGRlZmF1bHRfY29uZmlnXzEuZGVmYXVsdEhhcmRoYXROZXR3b3JrSGRBY2NvdW50c0NvbmZpZ1BhcmFtc1xuICAgICAgICA6IEFycmF5LmlzQXJyYXkoaGFyZGhhdE5ldHdvcmtDb25maWcuYWNjb3VudHMpXG4gICAgICAgICAgICA/IGhhcmRoYXROZXR3b3JrQ29uZmlnLmFjY291bnRzLm1hcCgoeyBwcml2YXRlS2V5LCBiYWxhbmNlIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgcHJpdmF0ZUtleTogbm9ybWFsaXplSGV4U3RyaW5nKHByaXZhdGVLZXkpLFxuICAgICAgICAgICAgICAgIGJhbGFuY2UsXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRfY29uZmlnXzEuZGVmYXVsdEhhcmRoYXROZXR3b3JrSGRBY2NvdW50c0NvbmZpZ1BhcmFtcyxcbiAgICAgICAgICAgICAgICAuLi5oYXJkaGF0TmV0d29ya0NvbmZpZy5hY2NvdW50cyxcbiAgICAgICAgICAgIH07XG4gICAgY29uc3QgZm9ya2luZyA9IGhhcmRoYXROZXR3b3JrQ29uZmlnLmZvcmtpbmcgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIHVybDogaGFyZGhhdE5ldHdvcmtDb25maWcuZm9ya2luZy51cmwsXG4gICAgICAgICAgICBlbmFibGVkOiBoYXJkaGF0TmV0d29ya0NvbmZpZy5mb3JraW5nLmVuYWJsZWQgPz8gdHJ1ZSxcbiAgICAgICAgICAgIGh0dHBIZWFkZXJzOiB7fSxcbiAgICAgICAgfVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZm9ya2luZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyID0gaGFyZGhhdE5ldHdvcmtDb25maWc/LmZvcmtpbmc/LmJsb2NrTnVtYmVyO1xuICAgICAgICBpZiAoYmxvY2tOdW1iZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9ya2luZy5ibG9ja051bWJlciA9IGhhcmRoYXROZXR3b3JrQ29uZmlnPy5mb3JraW5nPy5ibG9ja051bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBodHRwSGVhZGVycyA9IGhhcmRoYXROZXR3b3JrQ29uZmlnLmZvcmtpbmc/Lmh0dHBIZWFkZXJzO1xuICAgICAgICBpZiAoaHR0cEhlYWRlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9ya2luZy5odHRwSGVhZGVycyA9IGh0dHBIZWFkZXJzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG1pbmluZyA9IHJlc29sdmVNaW5pbmdDb25maWcoaGFyZGhhdE5ldHdvcmtDb25maWcubWluaW5nKTtcbiAgICBjb25zdCBtaW5HYXNQcmljZSA9IEJpZ0ludChoYXJkaGF0TmV0d29ya0NvbmZpZy5taW5HYXNQcmljZSA/P1xuICAgICAgICBjbG9uZWREZWZhdWx0SGFyZGhhdE5ldHdvcmtQYXJhbXMubWluR2FzUHJpY2UpO1xuICAgIGNvbnN0IGJsb2NrR2FzTGltaXQgPSBoYXJkaGF0TmV0d29ya0NvbmZpZy5ibG9ja0dhc0xpbWl0ID8/XG4gICAgICAgIGNsb25lZERlZmF1bHRIYXJkaGF0TmV0d29ya1BhcmFtcy5ibG9ja0dhc0xpbWl0O1xuICAgIGNvbnN0IGdhcyA9IGhhcmRoYXROZXR3b3JrQ29uZmlnLmdhcyA/PyBibG9ja0dhc0xpbWl0O1xuICAgIGNvbnN0IGdhc1ByaWNlID0gaGFyZGhhdE5ldHdvcmtDb25maWcuZ2FzUHJpY2UgPz8gY2xvbmVkRGVmYXVsdEhhcmRoYXROZXR3b3JrUGFyYW1zLmdhc1ByaWNlO1xuICAgIGNvbnN0IGluaXRpYWxCYXNlRmVlUGVyR2FzID0gaGFyZGhhdE5ldHdvcmtDb25maWcuaW5pdGlhbEJhc2VGZWVQZXJHYXMgPz9cbiAgICAgICAgY2xvbmVkRGVmYXVsdEhhcmRoYXROZXR3b3JrUGFyYW1zLmluaXRpYWxCYXNlRmVlUGVyR2FzO1xuICAgIGNvbnN0IGluaXRpYWxEYXRlID0gaGFyZGhhdE5ldHdvcmtDb25maWcuaW5pdGlhbERhdGUgPz8gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IGNoYWlucyA9IG5ldyBNYXAoZGVmYXVsdF9jb25maWdfMS5kZWZhdWx0SGFyZGhhdE5ldHdvcmtQYXJhbXMuY2hhaW5zKTtcbiAgICBpZiAoaGFyZGhhdE5ldHdvcmtDb25maWcuY2hhaW5zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZm9yIChjb25zdCBbY2hhaW5JZCwgdXNlckNoYWluQ29uZmlnXSBvZiBPYmplY3QuZW50cmllcyhoYXJkaGF0TmV0d29ya0NvbmZpZy5jaGFpbnMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFpbkNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBoYXJkZm9ya0hpc3Rvcnk6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodXNlckNoYWluQ29uZmlnLmhhcmRmb3JrSGlzdG9yeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgYmxvY2tdIG9mIE9iamVjdC5lbnRyaWVzKHVzZXJDaGFpbkNvbmZpZy5oYXJkZm9ya0hpc3RvcnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYWluQ29uZmlnLmhhcmRmb3JrSGlzdG9yeS5zZXQobmFtZSwgYmxvY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYWlucy5zZXQocGFyc2VJbnQoY2hhaW5JZCwgMTApLCBjaGFpbkNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAuLi5jbG9uZWREZWZhdWx0SGFyZGhhdE5ldHdvcmtQYXJhbXMsXG4gICAgICAgIC4uLmhhcmRoYXROZXR3b3JrQ29uZmlnLFxuICAgICAgICBhY2NvdW50cyxcbiAgICAgICAgZm9ya2luZyxcbiAgICAgICAgbWluaW5nLFxuICAgICAgICBibG9ja0dhc0xpbWl0LFxuICAgICAgICBnYXMsXG4gICAgICAgIGdhc1ByaWNlLFxuICAgICAgICBpbml0aWFsQmFzZUZlZVBlckdhcyxcbiAgICAgICAgaW5pdGlhbERhdGUsXG4gICAgICAgIG1pbkdhc1ByaWNlLFxuICAgICAgICBjaGFpbnMsXG4gICAgfTtcbiAgICAvLyBXZSBkbyBpdCB0aGlzIHdheSBiZWNhdXNlIHRzIGdldHMgbG9zdCBvdGhlcndpc2VcbiAgICBpZiAoY29uZmlnLmZvcmtpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgY29uZmlnLmZvcmtpbmc7XG4gICAgfVxuICAgIGlmIChjb25maWcuaW5pdGlhbEJhc2VGZWVQZXJHYXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgY29uZmlnLmluaXRpYWxCYXNlRmVlUGVyR2FzO1xuICAgIH1cbiAgICBpZiAoaGFyZGhhdE5ldHdvcmtDb25maWcuZW5hYmxlVHJhbnNpZW50U3RvcmFnZSA9PT0gdHJ1ZSAmJlxuICAgICAgICBoYXJkaGF0TmV0d29ya0NvbmZpZy5oYXJkZm9yayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbmZpZy5oYXJkZm9yayA9IFwiY2FuY3VuXCI7XG4gICAgfVxuICAgIGlmIChoYXJkaGF0TmV0d29ya0NvbmZpZy5lbmFibGVUcmFuc2llbnRTdG9yYWdlID09PSBmYWxzZSAmJlxuICAgICAgICBoYXJkaGF0TmV0d29ya0NvbmZpZy5oYXJkZm9yayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbmZpZy5oYXJkZm9yayA9IFwic2hhbmdoYWlcIjtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmZ1bmN0aW9uIGlzSGRBY2NvdW50c0NvbmZpZyhhY2NvdW50cykge1xuICAgIHJldHVybiB0eXBlb2YgYWNjb3VudHMgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoYWNjb3VudHMpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUh0dHBOZXR3b3JrQ29uZmlnKG5ldHdvcmtDb25maWcpIHtcbiAgICBjb25zdCBjbG9uZURlZXAgPSByZXF1aXJlKFwibG9kYXNoL2Nsb25lRGVlcFwiKTtcbiAgICBjb25zdCBhY2NvdW50cyA9IG5ldHdvcmtDb25maWcuYWNjb3VudHMgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGRlZmF1bHRfY29uZmlnXzEuZGVmYXVsdEh0dHBOZXR3b3JrUGFyYW1zLmFjY291bnRzXG4gICAgICAgIDogaXNIZEFjY291bnRzQ29uZmlnKG5ldHdvcmtDb25maWcuYWNjb3VudHMpXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAuLi5kZWZhdWx0X2NvbmZpZ18xLmRlZmF1bHRIZEFjY291bnRzQ29uZmlnUGFyYW1zLFxuICAgICAgICAgICAgICAgIC4uLm5ldHdvcmtDb25maWcuYWNjb3VudHMsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IEFycmF5LmlzQXJyYXkobmV0d29ya0NvbmZpZy5hY2NvdW50cylcbiAgICAgICAgICAgICAgICA/IG5ldHdvcmtDb25maWcuYWNjb3VudHMubWFwKG5vcm1hbGl6ZUhleFN0cmluZylcbiAgICAgICAgICAgICAgICA6IFwicmVtb3RlXCI7XG4gICAgY29uc3QgdXJsID0gbmV0d29ya0NvbmZpZy51cmw7XG4gICAgKDAsIGVycm9yc18xLmFzc2VydEhhcmRoYXRJbnZhcmlhbnQpKHVybCAhPT0gdW5kZWZpbmVkLCBcIkludmFsaWQgaHR0cCBuZXR3b3JrIGNvbmZpZyBwcm92aWRlZC4gVVJMIG1pc3NpbmcuXCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNsb25lRGVlcChkZWZhdWx0X2NvbmZpZ18xLmRlZmF1bHRIdHRwTmV0d29ya1BhcmFtcyksXG4gICAgICAgIC4uLm5ldHdvcmtDb25maWcsXG4gICAgICAgIGFjY291bnRzLFxuICAgICAgICB1cmwsXG4gICAgICAgIGdhczogbmV0d29ya0NvbmZpZy5nYXMgPz8gZGVmYXVsdF9jb25maWdfMS5kZWZhdWx0SHR0cE5ldHdvcmtQYXJhbXMuZ2FzLFxuICAgICAgICBnYXNQcmljZTogbmV0d29ya0NvbmZpZy5nYXNQcmljZSA/PyBkZWZhdWx0X2NvbmZpZ18xLmRlZmF1bHRIdHRwTmV0d29ya1BhcmFtcy5nYXNQcmljZSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZU1pbmluZ0NvbmZpZyh1c2VyQ29uZmlnKSB7XG4gICAgY29uc3QgbWVtcG9vbCA9IHJlc29sdmVNZW1wb29sQ29uZmlnKHVzZXJDb25maWc/Lm1lbXBvb2wpO1xuICAgIGlmICh1c2VyQ29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF1dG86IHRydWUsXG4gICAgICAgICAgICBpbnRlcnZhbDogMCxcbiAgICAgICAgICAgIG1lbXBvb2wsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHsgYXV0bywgaW50ZXJ2YWwgfSA9IHVzZXJDb25maWc7XG4gICAgaWYgKGF1dG8gPT09IHVuZGVmaW5lZCAmJiBpbnRlcnZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdXRvOiB0cnVlLFxuICAgICAgICAgICAgaW50ZXJ2YWw6IDAsXG4gICAgICAgICAgICBtZW1wb29sLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoYXV0byA9PT0gdW5kZWZpbmVkICYmIGludGVydmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF1dG86IGZhbHNlLFxuICAgICAgICAgICAgaW50ZXJ2YWwsXG4gICAgICAgICAgICBtZW1wb29sLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoYXV0byAhPT0gdW5kZWZpbmVkICYmIGludGVydmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF1dG8sXG4gICAgICAgICAgICBpbnRlcnZhbDogMCxcbiAgICAgICAgICAgIG1lbXBvb2wsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIHRzIGNhbid0IGluZmVyIGl0LCBidXQgYm90aCB2YWx1ZXMgYXJlIGRlZmluZWQgaGVyZVxuICAgIHJldHVybiB7XG4gICAgICAgIGF1dG86IGF1dG8sXG4gICAgICAgIGludGVydmFsOiBpbnRlcnZhbCxcbiAgICAgICAgbWVtcG9vbCxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZU1lbXBvb2xDb25maWcodXNlckNvbmZpZykge1xuICAgIGlmICh1c2VyQ29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9yZGVyOiBcInByaW9yaXR5XCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh1c2VyQ29uZmlnLm9yZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9yZGVyOiBcInByaW9yaXR5XCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG9yZGVyOiB1c2VyQ29uZmlnLm9yZGVyLFxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlU29saWRpdHlDb25maWcodXNlckNvbmZpZykge1xuICAgIGNvbnN0IHVzZXJTb2xpZGl0eUNvbmZpZyA9IHVzZXJDb25maWcuc29saWRpdHkgPz8gZGVmYXVsdF9jb25maWdfMS5ERUZBVUxUX1NPTENfVkVSU0lPTjtcbiAgICBjb25zdCBtdWx0aVNvbGNDb25maWcgPSBub3JtYWxpemVTb2xpZGl0eUNvbmZpZyh1c2VyU29saWRpdHlDb25maWcpO1xuICAgIGNvbnN0IG92ZXJyaWRlcyA9IG11bHRpU29sY0NvbmZpZy5vdmVycmlkZXMgPz8ge307XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGlsZXJzOiBtdWx0aVNvbGNDb25maWcuY29tcGlsZXJzLm1hcChyZXNvbHZlQ29tcGlsZXIpLFxuICAgICAgICBvdmVycmlkZXM6ICgwLCBsYW5nXzEuZnJvbUVudHJpZXMpKE9iamVjdC5lbnRyaWVzKG92ZXJyaWRlcykubWFwKChbbmFtZSwgY29uZmlnXSkgPT4gW1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHJlc29sdmVDb21waWxlcihjb25maWcpLFxuICAgICAgICBdKSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNvbGlkaXR5Q29uZmlnKHNvbGlkaXR5Q29uZmlnKSB7XG4gICAgaWYgKHR5cGVvZiBzb2xpZGl0eUNvbmZpZyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcGlsZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiBzb2xpZGl0eUNvbmZpZyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKFwidmVyc2lvblwiIGluIHNvbGlkaXR5Q29uZmlnKSB7XG4gICAgICAgIHJldHVybiB7IGNvbXBpbGVyczogW3NvbGlkaXR5Q29uZmlnXSB9O1xuICAgIH1cbiAgICByZXR1cm4gc29saWRpdHlDb25maWc7XG59XG5mdW5jdGlvbiByZXNvbHZlQ29tcGlsZXIoY29tcGlsZXIpIHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHtcbiAgICAgICAgdmVyc2lvbjogY29tcGlsZXIudmVyc2lvbixcbiAgICAgICAgc2V0dGluZ3M6IGNvbXBpbGVyLnNldHRpbmdzID8/IHt9LFxuICAgIH07XG4gICAgaWYgKHNlbXZlcl8xLmRlZmF1bHQuZ3RlKHJlc29sdmVkLnZlcnNpb24sIFwiMC44LjIwXCIpKSB7XG4gICAgICAgIHJlc29sdmVkLnNldHRpbmdzLmV2bVZlcnNpb24gPSBjb21waWxlci5zZXR0aW5ncz8uZXZtVmVyc2lvbiA/PyBcInBhcmlzXCI7XG4gICAgfVxuICAgIHJlc29sdmVkLnNldHRpbmdzLm9wdGltaXplciA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJ1bnM6IDIwMCxcbiAgICAgICAgLi4ucmVzb2x2ZWQuc2V0dGluZ3Mub3B0aW1pemVyLFxuICAgIH07XG4gICAgaWYgKHJlc29sdmVkLnNldHRpbmdzLm91dHB1dFNlbGVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc29sdmVkLnNldHRpbmdzLm91dHB1dFNlbGVjdGlvbiA9IHt9O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IFtmaWxlLCBjb250cmFjdFNlbGVjdGlvbl0gb2YgT2JqZWN0LmVudHJpZXMoZGVmYXVsdF9jb25maWdfMS5kZWZhdWx0U29sY091dHB1dFNlbGVjdGlvbikpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkLnNldHRpbmdzLm91dHB1dFNlbGVjdGlvbltmaWxlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXNvbHZlZC5zZXR0aW5ncy5vdXRwdXRTZWxlY3Rpb25bZmlsZV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtjb250cmFjdCwgb3V0cHV0c10gb2YgT2JqZWN0LmVudHJpZXMoY29udHJhY3RTZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZWQuc2V0dGluZ3Mub3V0cHV0U2VsZWN0aW9uW2ZpbGVdW2NvbnRyYWN0XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQuc2V0dGluZ3Mub3V0cHV0U2VsZWN0aW9uW2ZpbGVdW2NvbnRyYWN0XSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBvdXRwdXQgb2Ygb3V0cHV0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVzT3V0cHV0ID0gcmVzb2x2ZWQuc2V0dGluZ3Mub3V0cHV0U2VsZWN0aW9uW2ZpbGVdW2NvbnRyYWN0XS5pbmNsdWRlcyhvdXRwdXQpO1xuICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZXNPdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQuc2V0dGluZ3Mub3V0cHV0U2VsZWN0aW9uW2ZpbGVdW2NvbnRyYWN0XS5wdXNoKG91dHB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVNb2NoYUNvbmZpZyh1c2VyQ29uZmlnKSB7XG4gICAgY29uc3QgY2xvbmVEZWVwID0gcmVxdWlyZShcImxvZGFzaC9jbG9uZURlZXBcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY2xvbmVEZWVwKGRlZmF1bHRfY29uZmlnXzEuZGVmYXVsdE1vY2hhT3B0aW9ucyksXG4gICAgICAgIC4uLnVzZXJDb25maWcubW9jaGEsXG4gICAgfTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXNvbHZlcyB0aGUgUHJvamVjdFBhdGhzQ29uZmlnIG9iamVjdCBmcm9tIHRoZSB1c2VyLXByb3ZpZGVkIGNvbmZpZ1xuICogYW5kIGl0cyBwYXRoLiBUaGUgbG9naWMgb2YgdGhpcyBpcyBub3Qgb2J2aW91cyBhbmQgc2hvdWxkIHdlbGwgYmUgZG9jdW1lbnQuXG4gKiBUaGUgZ29vZCB0aGluZyBpcyB0aGF0IG1vc3QgdXNlcnMgd2lsbCBuZXZlciB1c2UgdGhpcy5cbiAqXG4gKiBFeHBsYW5hdGlvbjpcbiAqICAgIC0gcGF0aHMuY29uZmlnRmlsZSBpcyBub3Qgb3ZlcnJpZGFibGVcbiAqICAgIC0gSWYgYSBwYXRoIGlzIGFic29sdXRlIGl0IGlzIHVzZWQgXCJhcyBpc1wiLlxuICogICAgLSBJZiB0aGUgcm9vdCBwYXRoIGlzIHJlbGF0aXZlLCBpdCdzIHJlc29sdmVkIGZyb20gcGF0aHMuY29uZmlnRmlsZSdzIGRpci5cbiAqICAgIC0gSWYgYW55IG90aGVyIHBhdGggaXMgcmVsYXRpdmUsIGl0J3MgcmVzb2x2ZWQgZnJvbSBwYXRocy5yb290LlxuICogICAgLSBQbHVnaW4tZGVmaW5lZCBwYXRocyBhcmUgbm90IHJlc29sdmVkLCBidXQgZW5jb3VyYWdlZCB0byBmb2xsb3cgdGhlIHNhbWUgcGF0dGVybi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVByb2plY3RQYXRocyh1c2VyQ29uZmlnUGF0aCwgdXNlclBhdGhzID0ge30pIHtcbiAgICBjb25zdCBjb25maWdGaWxlID0gKDAsIGZzX3V0aWxzXzEuZ2V0UmVhbFBhdGhTeW5jKSh1c2VyQ29uZmlnUGF0aCk7XG4gICAgY29uc3QgY29uZmlnRGlyID0gcGF0aF8xLmRlZmF1bHQuZGlybmFtZShjb25maWdGaWxlKTtcbiAgICBjb25zdCByb290ID0gcmVzb2x2ZVBhdGhGcm9tKGNvbmZpZ0RpciwgXCJcIiwgdXNlclBhdGhzLnJvb3QpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnVzZXJQYXRocyxcbiAgICAgICAgcm9vdCxcbiAgICAgICAgY29uZmlnRmlsZSxcbiAgICAgICAgc291cmNlczogcmVzb2x2ZVBhdGhGcm9tKHJvb3QsIFwiY29udHJhY3RzXCIsIHVzZXJQYXRocy5zb3VyY2VzKSxcbiAgICAgICAgY2FjaGU6IHJlc29sdmVQYXRoRnJvbShyb290LCBcImNhY2hlXCIsIHVzZXJQYXRocy5jYWNoZSksXG4gICAgICAgIGFydGlmYWN0czogcmVzb2x2ZVBhdGhGcm9tKHJvb3QsIFwiYXJ0aWZhY3RzXCIsIHVzZXJQYXRocy5hcnRpZmFjdHMpLFxuICAgICAgICB0ZXN0czogcmVzb2x2ZVBhdGhGcm9tKHJvb3QsIFwidGVzdFwiLCB1c2VyUGF0aHMudGVzdHMpLFxuICAgIH07XG59XG5leHBvcnRzLnJlc29sdmVQcm9qZWN0UGF0aHMgPSByZXNvbHZlUHJvamVjdFBhdGhzO1xuZnVuY3Rpb24gcmVzb2x2ZVBhdGhGcm9tKGZyb20sIGRlZmF1bHRQYXRoLCByZWxhdGl2ZU9yQWJzb2x1dGVQYXRoID0gZGVmYXVsdFBhdGgpIHtcbiAgICBpZiAocGF0aF8xLmRlZmF1bHQuaXNBYnNvbHV0ZShyZWxhdGl2ZU9yQWJzb2x1dGVQYXRoKSkge1xuICAgICAgICByZXR1cm4gcmVsYXRpdmVPckFic29sdXRlUGF0aDtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGhfMS5kZWZhdWx0LmpvaW4oZnJvbSwgcmVsYXRpdmVPckFic29sdXRlUGF0aCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWctcmVzb2x1dGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/config/config-resolution.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/config/config-validation.js":
/*!************************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/config/config-validation.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateResolvedConfig = exports.getValidationErrors = exports.validateConfig = exports.decimalString = exports.address = exports.hexString = exports.DotPathReporter = exports.success = exports.failure = void 0;\nconst t = __importStar(__webpack_require__(/*! io-ts */ \"(ssr)/./node_modules/io-ts/es6/index.js\"));\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst io_ts_1 = __webpack_require__(/*! ../../util/io-ts */ \"(ssr)/./node_modules/hardhat/internal/util/io-ts.js\");\nconst lang_1 = __webpack_require__(/*! ../../util/lang */ \"(ssr)/./node_modules/hardhat/internal/util/lang.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst hardforks_1 = __webpack_require__(/*! ../../util/hardforks */ \"(ssr)/./node_modules/hardhat/internal/util/hardforks.js\");\nconst default_config_1 = __webpack_require__(/*! ./default-config */ \"(ssr)/./node_modules/hardhat/internal/core/config/default-config.js\");\nfunction stringify(v) {\n    if (typeof v === \"function\") {\n        const { getFunctionName } = __webpack_require__(/*! io-ts/lib */ \"(ssr)/./node_modules/io-ts/lib/index.js\");\n        return getFunctionName(v);\n    }\n    if (typeof v === \"number\" && !isFinite(v)) {\n        if (isNaN(v)) {\n            return \"NaN\";\n        }\n        return v > 0 ? \"Infinity\" : \"-Infinity\";\n    }\n    return JSON.stringify(v);\n}\nfunction getContextPath(context) {\n    const keysPath = context\n        .slice(1)\n        .map((c) => c.key)\n        .join(\".\");\n    return `${context[0].type.name}.${keysPath}`;\n}\nfunction getMessage(e) {\n    const lastContext = e.context[e.context.length - 1];\n    return e.message !== undefined\n        ? e.message\n        : getErrorMessage(getContextPath(e.context), e.value, lastContext.type.name);\n}\nfunction getErrorMessage(path, value, expectedType) {\n    return `Invalid value ${stringify(value)} for ${path} - Expected a value of type ${expectedType}.`;\n}\nfunction getPrivateKeyError(index, network, message) {\n    return `Invalid account: #${index} for network: ${network} - ${message}`;\n}\nfunction validatePrivateKey(privateKey, index, network, errors) {\n    if (typeof privateKey !== \"string\") {\n        errors.push(getPrivateKeyError(index, network, `Expected string, received ${typeof privateKey}`));\n    }\n    else {\n        // private key validation\n        const pkWithPrefix = /^0x/.test(privateKey)\n            ? privateKey\n            : `0x${privateKey}`;\n        // 32 bytes = 64 characters + 2 char prefix = 66\n        if (pkWithPrefix.length < 66) {\n            errors.push(getPrivateKeyError(index, network, \"private key too short, expected 32 bytes\"));\n        }\n        else if (pkWithPrefix.length > 66) {\n            errors.push(getPrivateKeyError(index, network, \"private key too long, expected 32 bytes\"));\n        }\n        else if (exports.hexString.decode(pkWithPrefix).isLeft()) {\n            errors.push(getPrivateKeyError(index, network, \"invalid hex character(s) found in string\"));\n        }\n    }\n}\nfunction failure(es) {\n    return es.map(getMessage);\n}\nexports.failure = failure;\nfunction success() {\n    return [];\n}\nexports.success = success;\nexports.DotPathReporter = {\n    report: (validation) => validation.fold(failure, success),\n};\nconst HEX_STRING_REGEX = /^(0x)?([0-9a-f]{2})+$/gi;\nconst DEC_STRING_REGEX = /^(0|[1-9][0-9]*)$/g;\nfunction isHexString(v) {\n    if (typeof v !== \"string\") {\n        return false;\n    }\n    return v.trim().match(HEX_STRING_REGEX) !== null;\n}\nfunction isDecimalString(v) {\n    if (typeof v !== \"string\") {\n        return false;\n    }\n    return v.match(DEC_STRING_REGEX) !== null;\n}\nexports.hexString = new t.Type(\"hex string\", isHexString, (u, c) => (isHexString(u) ? t.success(u) : t.failure(u, c)), t.identity);\nfunction isAddress(v) {\n    if (typeof v !== \"string\") {\n        return false;\n    }\n    const trimmed = v.trim();\n    return (trimmed.match(HEX_STRING_REGEX) !== null &&\n        trimmed.startsWith(\"0x\") &&\n        trimmed.length === 42);\n}\nexports.address = new t.Type(\"address\", isAddress, (u, c) => (isAddress(u) ? t.success(u) : t.failure(u, c)), t.identity);\nexports.decimalString = new t.Type(\"decimal string\", isDecimalString, (u, c) => (isDecimalString(u) ? t.success(u) : t.failure(u, c)), t.identity);\n// TODO: These types have outdated name. They should match the UserConfig types.\n// IMPORTANT: This t.types MUST be kept in sync with the actual types.\nconst HardhatNetworkAccount = t.type({\n    privateKey: exports.hexString,\n    balance: exports.decimalString,\n});\nconst commonHDAccountsFields = {\n    initialIndex: (0, io_ts_1.optional)(t.number),\n    count: (0, io_ts_1.optional)(t.number),\n    path: (0, io_ts_1.optional)(t.string),\n};\nconst HardhatNetworkHDAccountsConfig = t.type({\n    mnemonic: (0, io_ts_1.optional)(t.string),\n    accountsBalance: (0, io_ts_1.optional)(exports.decimalString),\n    passphrase: (0, io_ts_1.optional)(t.string),\n    ...commonHDAccountsFields,\n});\nconst Integer = new t.Type(\"Integer\", (num) => typeof num === \"number\", (u, c) => {\n    try {\n        return typeof u === \"string\"\n            ? t.success(parseInt(u, 10))\n            : t.failure(u, c);\n    }\n    catch {\n        return t.failure(u, c);\n    }\n}, t.identity);\nconst HardhatNetworkForkingConfig = t.type({\n    enabled: (0, io_ts_1.optional)(t.boolean),\n    url: t.string,\n    blockNumber: (0, io_ts_1.optional)(t.number),\n});\nconst HardhatNetworkMempoolConfig = t.type({\n    order: (0, io_ts_1.optional)(t.keyof((0, lang_1.fromEntries)(constants_1.HARDHAT_MEMPOOL_SUPPORTED_ORDERS.map((order) => [order, null])))),\n});\nconst HardhatNetworkMiningConfig = t.type({\n    auto: (0, io_ts_1.optional)(t.boolean),\n    interval: (0, io_ts_1.optional)(t.union([t.number, t.tuple([t.number, t.number])])),\n    mempool: (0, io_ts_1.optional)(HardhatNetworkMempoolConfig),\n});\nfunction isValidHardforkName(name) {\n    return Object.values(hardforks_1.HardforkName).includes(name);\n}\nconst HardforkNameType = new t.Type(Object.values(hardforks_1.HardforkName)\n    .map((v) => `\"${v}\"`)\n    .join(\" | \"), (name) => typeof name === \"string\" && isValidHardforkName(name), (u, c) => {\n    return typeof u === \"string\" && isValidHardforkName(u)\n        ? t.success(u)\n        : t.failure(u, c);\n}, t.identity);\nconst HardhatNetworkHardforkHistory = t.record(HardforkNameType, t.number, \"HardhatNetworkHardforkHistory\");\nconst HardhatNetworkChainConfig = t.type({\n    hardforkHistory: HardhatNetworkHardforkHistory,\n});\nconst HardhatNetworkChainsConfig = t.record(Integer, HardhatNetworkChainConfig);\nconst commonNetworkConfigFields = {\n    chainId: (0, io_ts_1.optional)(t.number),\n    from: (0, io_ts_1.optional)(t.string),\n    gas: (0, io_ts_1.optional)(t.union([t.literal(\"auto\"), t.number])),\n    gasPrice: (0, io_ts_1.optional)(t.union([t.literal(\"auto\"), t.number])),\n    gasMultiplier: (0, io_ts_1.optional)(t.number),\n};\nconst HardhatNetworkConfig = t.type({\n    ...commonNetworkConfigFields,\n    hardfork: (0, io_ts_1.optional)(t.keyof((0, lang_1.fromEntries)(constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.map((hf) => [hf, null])))),\n    accounts: (0, io_ts_1.optional)(t.union([t.array(HardhatNetworkAccount), HardhatNetworkHDAccountsConfig])),\n    blockGasLimit: (0, io_ts_1.optional)(t.number),\n    minGasPrice: (0, io_ts_1.optional)(t.union([t.number, t.string])),\n    throwOnTransactionFailures: (0, io_ts_1.optional)(t.boolean),\n    throwOnCallFailures: (0, io_ts_1.optional)(t.boolean),\n    allowUnlimitedContractSize: (0, io_ts_1.optional)(t.boolean),\n    initialDate: (0, io_ts_1.optional)(t.string),\n    loggingEnabled: (0, io_ts_1.optional)(t.boolean),\n    forking: (0, io_ts_1.optional)(HardhatNetworkForkingConfig),\n    mining: (0, io_ts_1.optional)(HardhatNetworkMiningConfig),\n    coinbase: (0, io_ts_1.optional)(exports.address),\n    chains: (0, io_ts_1.optional)(HardhatNetworkChainsConfig),\n});\nconst HDAccountsConfig = t.type({\n    mnemonic: t.string,\n    passphrase: (0, io_ts_1.optional)(t.string),\n    ...commonHDAccountsFields,\n});\nconst NetworkConfigAccounts = t.union([\n    t.literal(\"remote\"),\n    t.array(exports.hexString),\n    HDAccountsConfig,\n]);\nconst HttpHeaders = t.record(t.string, t.string, \"httpHeaders\");\nconst HttpNetworkConfig = t.type({\n    ...commonNetworkConfigFields,\n    url: (0, io_ts_1.optional)(t.string),\n    accounts: (0, io_ts_1.optional)(NetworkConfigAccounts),\n    httpHeaders: (0, io_ts_1.optional)(HttpHeaders),\n    timeout: (0, io_ts_1.optional)(t.number),\n});\nconst NetworkConfig = t.union([HardhatNetworkConfig, HttpNetworkConfig]);\nconst Networks = t.record(t.string, NetworkConfig);\nconst ProjectPaths = t.type({\n    root: (0, io_ts_1.optional)(t.string),\n    cache: (0, io_ts_1.optional)(t.string),\n    artifacts: (0, io_ts_1.optional)(t.string),\n    sources: (0, io_ts_1.optional)(t.string),\n    tests: (0, io_ts_1.optional)(t.string),\n});\nconst SingleSolcConfig = t.type({\n    version: t.string,\n    settings: (0, io_ts_1.optional)(t.any),\n});\nconst MultiSolcConfig = t.type({\n    compilers: t.array(SingleSolcConfig),\n    overrides: (0, io_ts_1.optional)(t.record(t.string, SingleSolcConfig)),\n});\nconst SolidityConfig = t.union([t.string, SingleSolcConfig, MultiSolcConfig]);\nconst HardhatConfig = t.type({\n    defaultNetwork: (0, io_ts_1.optional)(t.string),\n    networks: (0, io_ts_1.optional)(Networks),\n    paths: (0, io_ts_1.optional)(ProjectPaths),\n    solidity: (0, io_ts_1.optional)(SolidityConfig),\n}, \"HardhatConfig\");\n/**\n * Validates the config, throwing a HardhatError if invalid.\n * @param config\n */\nfunction validateConfig(config) {\n    const errors = getValidationErrors(config);\n    if (errors.length === 0) {\n        return;\n    }\n    let errorList = errors.join(\"\\n  * \");\n    errorList = `  * ${errorList}`;\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_CONFIG, { errors: errorList });\n}\nexports.validateConfig = validateConfig;\nfunction getValidationErrors(config) {\n    const errors = [];\n    // These can't be validated with io-ts\n    if (config !== undefined && typeof config.networks === \"object\") {\n        const hardhatNetwork = config.networks[constants_1.HARDHAT_NETWORK_NAME];\n        if (hardhatNetwork !== undefined && typeof hardhatNetwork === \"object\") {\n            if (\"url\" in hardhatNetwork) {\n                errors.push(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME} can't have a url`);\n            }\n            // Validating the accounts with io-ts leads to very confusing errors messages\n            const { accounts, ...configExceptAccounts } = hardhatNetwork;\n            const netConfigResult = HardhatNetworkConfig.decode(configExceptAccounts);\n            if (netConfigResult.isLeft()) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}`, hardhatNetwork, \"HardhatNetworkConfig\"));\n            }\n            // manual validation of accounts\n            if (Array.isArray(accounts)) {\n                for (const [index, account] of accounts.entries()) {\n                    if (typeof account !== \"object\") {\n                        errors.push(getPrivateKeyError(index, constants_1.HARDHAT_NETWORK_NAME, `Expected object, received ${typeof account}`));\n                        continue;\n                    }\n                    const { privateKey, balance } = account;\n                    validatePrivateKey(privateKey, index, constants_1.HARDHAT_NETWORK_NAME, errors);\n                    if (typeof balance !== \"string\") {\n                        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, balance, \"string\"));\n                    }\n                    else if (exports.decimalString.decode(balance).isLeft()) {\n                        errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts[].balance`, balance, \"decimal(wei)\"));\n                    }\n                }\n            }\n            else if (typeof hardhatNetwork.accounts === \"object\") {\n                const hdConfigResult = HardhatNetworkHDAccountsConfig.decode(hardhatNetwork.accounts);\n                if (hdConfigResult.isLeft()) {\n                    errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n                }\n            }\n            else if (hardhatNetwork.accounts !== undefined) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.accounts`, hardhatNetwork.accounts, \"[{privateKey: string, balance: string}] | HardhatNetworkHDAccountsConfig | undefined\"));\n            }\n            const hardfork = hardhatNetwork.hardfork ?? default_config_1.defaultHardhatNetworkParams.hardfork;\n            if ((0, hardforks_1.hardforkGte)(hardfork, hardforks_1.HardforkName.LONDON)) {\n                if (hardhatNetwork.minGasPrice !== undefined) {\n                    errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.minGasPrice found - This field is not valid for networks with EIP-1559. Try an older hardfork or remove it.`);\n                }\n            }\n            else {\n                if (hardhatNetwork.initialBaseFeePerGas !== undefined) {\n                    errors.push(`Unexpected config HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.initialBaseFeePerGas found - This field is only valid for networks with EIP-1559. Try a newer hardfork or remove it.`);\n                }\n            }\n            if (hardhatNetwork.chains !== undefined) {\n                Object.entries(hardhatNetwork.chains).forEach((chainEntry) => {\n                    const [chainId, chainConfig] = chainEntry;\n                    const { hardforkHistory } = chainConfig;\n                    if (hardforkHistory !== undefined) {\n                        Object.keys(hardforkHistory).forEach((hardforkName) => {\n                            if (!constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.includes(hardforkName)) {\n                                errors.push(getErrorMessage(`HardhatConfig.networks.${constants_1.HARDHAT_NETWORK_NAME}.chains[${chainId}].hardforkHistory`, hardforkName, `\"${constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.join('\" | \"')}\"`));\n                            }\n                        });\n                    }\n                });\n            }\n            if (hardhatNetwork.hardfork !== undefined) {\n                if (!(0, hardforks_1.hardforkGte)(hardhatNetwork.hardfork, hardforks_1.HardforkName.CANCUN) &&\n                    hardhatNetwork.enableTransientStorage === true) {\n                    errors.push(`'enableTransientStorage' cannot be enabled if the hardfork is explicitly set to a pre-cancun value. If you want to use transient storage, use 'cancun' as the hardfork.`);\n                }\n                if ((0, hardforks_1.hardforkGte)(hardhatNetwork.hardfork, hardforks_1.HardforkName.CANCUN) &&\n                    hardhatNetwork.enableTransientStorage === false) {\n                    errors.push(`'enableTransientStorage' cannot be disabled if the hardfork is explicitly set to cancun or later. If you want to disable transient storage, use a hardfork before 'cancun'.`);\n                }\n            }\n        }\n        for (const [networkName, netConfig] of Object.entries(config.networks)) {\n            if (networkName === constants_1.HARDHAT_NETWORK_NAME) {\n                continue;\n            }\n            if (networkName !== \"localhost\" || netConfig.url !== undefined) {\n                if (typeof netConfig.url !== \"string\") {\n                    errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}.url`, netConfig.url, \"string\"));\n                }\n            }\n            const { accounts, ...configExceptAccounts } = netConfig;\n            const netConfigResult = HttpNetworkConfig.decode(configExceptAccounts);\n            if (netConfigResult.isLeft()) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}`, netConfig, \"HttpNetworkConfig\"));\n            }\n            // manual validation of accounts\n            if (Array.isArray(accounts)) {\n                accounts.forEach((privateKey, index) => validatePrivateKey(privateKey, index, networkName, errors));\n            }\n            else if (typeof accounts === \"object\") {\n                const hdConfigResult = HDAccountsConfig.decode(accounts);\n                if (hdConfigResult.isLeft()) {\n                    errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}`, accounts, \"HttpNetworkHDAccountsConfig\"));\n                }\n            }\n            else if (typeof accounts === \"string\") {\n                if (accounts !== \"remote\") {\n                    errors.push(`Invalid 'accounts' entry for network '${networkName}': expected an array of accounts or the string 'remote', but got the string '${accounts}'`);\n                }\n            }\n            else if (accounts !== undefined) {\n                errors.push(getErrorMessage(`HardhatConfig.networks.${networkName}.accounts`, accounts, '\"remote\" | string[] | HttpNetworkHDAccountsConfig | undefined'));\n            }\n        }\n    }\n    // io-ts can get confused if there are errors that it can't understand.\n    // Especially around Hardhat Network's config. It will treat it as an HTTPConfig,\n    // and may give a loot of errors.\n    if (errors.length > 0) {\n        return errors;\n    }\n    const result = HardhatConfig.decode(config);\n    if (result.isRight()) {\n        return errors;\n    }\n    const ioTsErrors = exports.DotPathReporter.report(result);\n    return [...errors, ...ioTsErrors];\n}\nexports.getValidationErrors = getValidationErrors;\nfunction validateResolvedConfig(resolvedConfig) {\n    const solcConfigs = [\n        ...resolvedConfig.solidity.compilers,\n        ...Object.values(resolvedConfig.solidity.overrides),\n    ];\n    const runs = solcConfigs\n        .filter(({ settings }) => settings?.optimizer?.runs !== undefined)\n        .map(({ settings }) => settings?.optimizer?.runs);\n    for (const run of runs) {\n        if (run >= 2 ** 32) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.INVALID_CONFIG, {\n                errors: \"The number of optimizer runs exceeds the maximum of 2**32 - 1\",\n            });\n        }\n    }\n}\nexports.validateResolvedConfig = validateResolvedConfig;\n//# sourceMappingURL=config-validation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/config/config-validation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/config/default-config.js":
/*!*********************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/config/default-config.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultSolcOutputSelection = exports.defaultMochaOptions = exports.defaultHttpNetworkParams = exports.defaultHardhatNetworkParams = exports.DEFAULT_GAS_MULTIPLIER = exports.defaultHardhatNetworkHdAccountsConfigParams = exports.defaultHdAccountsConfigParams = exports.defaultLocalhostNetworkParams = exports.defaultDefaultNetwork = exports.DEFAULT_HARDHAT_NETWORK_BALANCE = exports.HARDHAT_NETWORK_MNEMONIC = exports.HARDHAT_NETWORK_DEFAULT_INITIAL_BASE_FEE_PER_GAS = exports.HARDHAT_NETWORK_DEFAULT_MAX_PRIORITY_FEE_PER_GAS = exports.HARDHAT_NETWORK_DEFAULT_GAS_PRICE = exports.DEFAULT_SOLC_VERSION = void 0;\nconst hardforks_1 = __webpack_require__(/*! ../../util/hardforks */ \"(ssr)/./node_modules/hardhat/internal/util/hardforks.js\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nexports.DEFAULT_SOLC_VERSION = \"0.7.3\";\nexports.HARDHAT_NETWORK_DEFAULT_GAS_PRICE = \"auto\";\nexports.HARDHAT_NETWORK_DEFAULT_MAX_PRIORITY_FEE_PER_GAS = 1e9;\nexports.HARDHAT_NETWORK_DEFAULT_INITIAL_BASE_FEE_PER_GAS = 1e9;\nexports.HARDHAT_NETWORK_MNEMONIC = \"test test test test test test test test test test test junk\";\nexports.DEFAULT_HARDHAT_NETWORK_BALANCE = \"10000000000000000000000\";\nexports.defaultDefaultNetwork = constants_1.HARDHAT_NETWORK_NAME;\nexports.defaultLocalhostNetworkParams = {\n    url: \"http://127.0.0.1:8545\",\n    timeout: 40000,\n};\nexports.defaultHdAccountsConfigParams = {\n    initialIndex: 0,\n    count: 20,\n    path: \"m/44'/60'/0'/0\",\n    passphrase: \"\",\n};\nexports.defaultHardhatNetworkHdAccountsConfigParams = {\n    ...exports.defaultHdAccountsConfigParams,\n    mnemonic: exports.HARDHAT_NETWORK_MNEMONIC,\n    accountsBalance: exports.DEFAULT_HARDHAT_NETWORK_BALANCE,\n};\nexports.DEFAULT_GAS_MULTIPLIER = 1;\nexports.defaultHardhatNetworkParams = {\n    hardfork: hardforks_1.HardforkName.CANCUN,\n    blockGasLimit: 30000000,\n    gasPrice: exports.HARDHAT_NETWORK_DEFAULT_GAS_PRICE,\n    chainId: 31337,\n    throwOnTransactionFailures: true,\n    throwOnCallFailures: true,\n    allowUnlimitedContractSize: false,\n    mining: {\n        auto: true,\n        interval: 0,\n        mempool: {\n            order: \"priority\",\n        },\n    },\n    accounts: exports.defaultHardhatNetworkHdAccountsConfigParams,\n    loggingEnabled: false,\n    gasMultiplier: exports.DEFAULT_GAS_MULTIPLIER,\n    minGasPrice: 0n,\n    chains: new Map([\n        [\n            // block numbers below were taken from https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/common/src/chains\n            1,\n            {\n                hardforkHistory: new Map([\n                    [hardforks_1.HardforkName.FRONTIER, 0],\n                    [hardforks_1.HardforkName.HOMESTEAD, 1150000],\n                    [hardforks_1.HardforkName.DAO, 1920000],\n                    [hardforks_1.HardforkName.TANGERINE_WHISTLE, 2463000],\n                    [hardforks_1.HardforkName.SPURIOUS_DRAGON, 2675000],\n                    [hardforks_1.HardforkName.BYZANTIUM, 4370000],\n                    [hardforks_1.HardforkName.CONSTANTINOPLE, 7280000],\n                    [hardforks_1.HardforkName.PETERSBURG, 7280000],\n                    [hardforks_1.HardforkName.ISTANBUL, 9069000],\n                    [hardforks_1.HardforkName.MUIR_GLACIER, 9200000],\n                    [hardforks_1.HardforkName.BERLIN, 12244000],\n                    [hardforks_1.HardforkName.LONDON, 12965000],\n                    [hardforks_1.HardforkName.ARROW_GLACIER, 13773000],\n                    [hardforks_1.HardforkName.GRAY_GLACIER, 15050000],\n                    [hardforks_1.HardforkName.MERGE, 15537394],\n                    [hardforks_1.HardforkName.SHANGHAI, 17034870],\n                    [hardforks_1.HardforkName.CANCUN, 19426589],\n                ]),\n            },\n        ],\n        [\n            3,\n            {\n                hardforkHistory: new Map([\n                    [hardforks_1.HardforkName.BYZANTIUM, 1700000],\n                    [hardforks_1.HardforkName.CONSTANTINOPLE, 4230000],\n                    [hardforks_1.HardforkName.PETERSBURG, 4939394],\n                    [hardforks_1.HardforkName.ISTANBUL, 6485846],\n                    [hardforks_1.HardforkName.MUIR_GLACIER, 7117117],\n                    [hardforks_1.HardforkName.BERLIN, 9812189],\n                    [hardforks_1.HardforkName.LONDON, 10499401],\n                ]),\n            },\n        ],\n        [\n            4,\n            {\n                hardforkHistory: new Map([\n                    [hardforks_1.HardforkName.BYZANTIUM, 1035301],\n                    [hardforks_1.HardforkName.CONSTANTINOPLE, 3660663],\n                    [hardforks_1.HardforkName.PETERSBURG, 4321234],\n                    [hardforks_1.HardforkName.ISTANBUL, 5435345],\n                    [hardforks_1.HardforkName.BERLIN, 8290928],\n                    [hardforks_1.HardforkName.LONDON, 8897988],\n                ]),\n            },\n        ],\n        [\n            5,\n            {\n                hardforkHistory: new Map([\n                    [hardforks_1.HardforkName.ISTANBUL, 1561651],\n                    [hardforks_1.HardforkName.BERLIN, 4460644],\n                    [hardforks_1.HardforkName.LONDON, 5062605],\n                ]),\n            },\n        ],\n        [\n            42,\n            {\n                hardforkHistory: new Map([\n                    [hardforks_1.HardforkName.BYZANTIUM, 5067000],\n                    [hardforks_1.HardforkName.CONSTANTINOPLE, 9200000],\n                    [hardforks_1.HardforkName.PETERSBURG, 10255201],\n                    [hardforks_1.HardforkName.ISTANBUL, 14111141],\n                    [hardforks_1.HardforkName.BERLIN, 24770900],\n                    [hardforks_1.HardforkName.LONDON, 26741100],\n                ]),\n            },\n        ],\n        [\n            11155111,\n            {\n                hardforkHistory: new Map([\n                    [hardforks_1.HardforkName.GRAY_GLACIER, 0],\n                    [hardforks_1.HardforkName.MERGE, 1450409],\n                    [hardforks_1.HardforkName.SHANGHAI, 2990908],\n                    [hardforks_1.HardforkName.CANCUN, 5187023],\n                ]),\n            },\n        ],\n        // TODO: the rest of this config is a temporary workaround,\n        // see https://github.com/NomicFoundation/edr/issues/522\n        [\n            10,\n            {\n                hardforkHistory: new Map([[hardforks_1.HardforkName.SHANGHAI, 0]]),\n            },\n        ],\n        [\n            11155420,\n            {\n                hardforkHistory: new Map([[hardforks_1.HardforkName.SHANGHAI, 0]]),\n            },\n        ],\n        [\n            42161,\n            {\n                hardforkHistory: new Map([[hardforks_1.HardforkName.SHANGHAI, 0]]),\n            },\n        ],\n        [\n            421614,\n            {\n                hardforkHistory: new Map([[hardforks_1.HardforkName.SHANGHAI, 0]]),\n            },\n        ],\n    ]),\n};\nexports.defaultHttpNetworkParams = {\n    accounts: \"remote\",\n    gas: \"auto\",\n    gasPrice: \"auto\",\n    gasMultiplier: exports.DEFAULT_GAS_MULTIPLIER,\n    httpHeaders: {},\n    timeout: 20000,\n};\nexports.defaultMochaOptions = {\n    timeout: 40000,\n};\nexports.defaultSolcOutputSelection = {\n    \"*\": {\n        \"*\": [\n            \"abi\",\n            \"evm.bytecode\",\n            \"evm.deployedBytecode\",\n            \"evm.methodIdentifiers\",\n            \"metadata\",\n        ],\n        \"\": [\"ast\"],\n    },\n};\n//# sourceMappingURL=default-config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL2NvbmZpZy9kZWZhdWx0LWNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRywyQkFBMkIsR0FBRyxnQ0FBZ0MsR0FBRyxtQ0FBbUMsR0FBRyw4QkFBOEIsR0FBRyxtREFBbUQsR0FBRyxxQ0FBcUMsR0FBRyxxQ0FBcUMsR0FBRyw2QkFBNkIsR0FBRyx1Q0FBdUMsR0FBRyxnQ0FBZ0MsR0FBRyx3REFBd0QsR0FBRyx3REFBd0QsR0FBRyx5Q0FBeUMsR0FBRyw0QkFBNEI7QUFDOWxCLG9CQUFvQixtQkFBTyxDQUFDLHFGQUFzQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQywyRUFBaUI7QUFDN0MsNEJBQTRCO0FBQzVCLHlDQUF5QztBQUN6Qyx3REFBd0Q7QUFDeEQsd0RBQXdEO0FBQ3hELGdDQUFnQztBQUNoQyx1Q0FBdUM7QUFDdkMsNkJBQTZCO0FBQzdCLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2NvcmUvY29uZmlnL2RlZmF1bHQtY29uZmlnLmpzP2IzNWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRTb2xjT3V0cHV0U2VsZWN0aW9uID0gZXhwb3J0cy5kZWZhdWx0TW9jaGFPcHRpb25zID0gZXhwb3J0cy5kZWZhdWx0SHR0cE5ldHdvcmtQYXJhbXMgPSBleHBvcnRzLmRlZmF1bHRIYXJkaGF0TmV0d29ya1BhcmFtcyA9IGV4cG9ydHMuREVGQVVMVF9HQVNfTVVMVElQTElFUiA9IGV4cG9ydHMuZGVmYXVsdEhhcmRoYXROZXR3b3JrSGRBY2NvdW50c0NvbmZpZ1BhcmFtcyA9IGV4cG9ydHMuZGVmYXVsdEhkQWNjb3VudHNDb25maWdQYXJhbXMgPSBleHBvcnRzLmRlZmF1bHRMb2NhbGhvc3ROZXR3b3JrUGFyYW1zID0gZXhwb3J0cy5kZWZhdWx0RGVmYXVsdE5ldHdvcmsgPSBleHBvcnRzLkRFRkFVTFRfSEFSREhBVF9ORVRXT1JLX0JBTEFOQ0UgPSBleHBvcnRzLkhBUkRIQVRfTkVUV09SS19NTkVNT05JQyA9IGV4cG9ydHMuSEFSREhBVF9ORVRXT1JLX0RFRkFVTFRfSU5JVElBTF9CQVNFX0ZFRV9QRVJfR0FTID0gZXhwb3J0cy5IQVJESEFUX05FVFdPUktfREVGQVVMVF9NQVhfUFJJT1JJVFlfRkVFX1BFUl9HQVMgPSBleHBvcnRzLkhBUkRIQVRfTkVUV09SS19ERUZBVUxUX0dBU19QUklDRSA9IGV4cG9ydHMuREVGQVVMVF9TT0xDX1ZFUlNJT04gPSB2b2lkIDA7XG5jb25zdCBoYXJkZm9ya3NfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2hhcmRmb3Jrc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uL2NvbnN0YW50c1wiKTtcbmV4cG9ydHMuREVGQVVMVF9TT0xDX1ZFUlNJT04gPSBcIjAuNy4zXCI7XG5leHBvcnRzLkhBUkRIQVRfTkVUV09SS19ERUZBVUxUX0dBU19QUklDRSA9IFwiYXV0b1wiO1xuZXhwb3J0cy5IQVJESEFUX05FVFdPUktfREVGQVVMVF9NQVhfUFJJT1JJVFlfRkVFX1BFUl9HQVMgPSAxZTk7XG5leHBvcnRzLkhBUkRIQVRfTkVUV09SS19ERUZBVUxUX0lOSVRJQUxfQkFTRV9GRUVfUEVSX0dBUyA9IDFlOTtcbmV4cG9ydHMuSEFSREhBVF9ORVRXT1JLX01ORU1PTklDID0gXCJ0ZXN0IHRlc3QgdGVzdCB0ZXN0IHRlc3QgdGVzdCB0ZXN0IHRlc3QgdGVzdCB0ZXN0IHRlc3QganVua1wiO1xuZXhwb3J0cy5ERUZBVUxUX0hBUkRIQVRfTkVUV09SS19CQUxBTkNFID0gXCIxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiO1xuZXhwb3J0cy5kZWZhdWx0RGVmYXVsdE5ldHdvcmsgPSBjb25zdGFudHNfMS5IQVJESEFUX05FVFdPUktfTkFNRTtcbmV4cG9ydHMuZGVmYXVsdExvY2FsaG9zdE5ldHdvcmtQYXJhbXMgPSB7XG4gICAgdXJsOiBcImh0dHA6Ly8xMjcuMC4wLjE6ODU0NVwiLFxuICAgIHRpbWVvdXQ6IDQwMDAwLFxufTtcbmV4cG9ydHMuZGVmYXVsdEhkQWNjb3VudHNDb25maWdQYXJhbXMgPSB7XG4gICAgaW5pdGlhbEluZGV4OiAwLFxuICAgIGNvdW50OiAyMCxcbiAgICBwYXRoOiBcIm0vNDQnLzYwJy8wJy8wXCIsXG4gICAgcGFzc3BocmFzZTogXCJcIixcbn07XG5leHBvcnRzLmRlZmF1bHRIYXJkaGF0TmV0d29ya0hkQWNjb3VudHNDb25maWdQYXJhbXMgPSB7XG4gICAgLi4uZXhwb3J0cy5kZWZhdWx0SGRBY2NvdW50c0NvbmZpZ1BhcmFtcyxcbiAgICBtbmVtb25pYzogZXhwb3J0cy5IQVJESEFUX05FVFdPUktfTU5FTU9OSUMsXG4gICAgYWNjb3VudHNCYWxhbmNlOiBleHBvcnRzLkRFRkFVTFRfSEFSREhBVF9ORVRXT1JLX0JBTEFOQ0UsXG59O1xuZXhwb3J0cy5ERUZBVUxUX0dBU19NVUxUSVBMSUVSID0gMTtcbmV4cG9ydHMuZGVmYXVsdEhhcmRoYXROZXR3b3JrUGFyYW1zID0ge1xuICAgIGhhcmRmb3JrOiBoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQ0FOQ1VOLFxuICAgIGJsb2NrR2FzTGltaXQ6IDMwMDAwMDAwLFxuICAgIGdhc1ByaWNlOiBleHBvcnRzLkhBUkRIQVRfTkVUV09SS19ERUZBVUxUX0dBU19QUklDRSxcbiAgICBjaGFpbklkOiAzMTMzNyxcbiAgICB0aHJvd09uVHJhbnNhY3Rpb25GYWlsdXJlczogdHJ1ZSxcbiAgICB0aHJvd09uQ2FsbEZhaWx1cmVzOiB0cnVlLFxuICAgIGFsbG93VW5saW1pdGVkQ29udHJhY3RTaXplOiBmYWxzZSxcbiAgICBtaW5pbmc6IHtcbiAgICAgICAgYXV0bzogdHJ1ZSxcbiAgICAgICAgaW50ZXJ2YWw6IDAsXG4gICAgICAgIG1lbXBvb2w6IHtcbiAgICAgICAgICAgIG9yZGVyOiBcInByaW9yaXR5XCIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBhY2NvdW50czogZXhwb3J0cy5kZWZhdWx0SGFyZGhhdE5ldHdvcmtIZEFjY291bnRzQ29uZmlnUGFyYW1zLFxuICAgIGxvZ2dpbmdFbmFibGVkOiBmYWxzZSxcbiAgICBnYXNNdWx0aXBsaWVyOiBleHBvcnRzLkRFRkFVTFRfR0FTX01VTFRJUExJRVIsXG4gICAgbWluR2FzUHJpY2U6IDBuLFxuICAgIGNoYWluczogbmV3IE1hcChbXG4gICAgICAgIFtcbiAgICAgICAgICAgIC8vIGJsb2NrIG51bWJlcnMgYmVsb3cgd2VyZSB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bWpzL2V0aGVyZXVtanMtbW9ub3JlcG8vdHJlZS9tYXN0ZXIvcGFja2FnZXMvY29tbW9uL3NyYy9jaGFpbnNcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaGFyZGZvcmtIaXN0b3J5OiBuZXcgTWFwKFtcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5GUk9OVElFUiwgMF0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuSE9NRVNURUFELCAxMTUwMDAwXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5EQU8sIDE5MjAwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLlRBTkdFUklORV9XSElTVExFLCAyNDYzMDAwXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5TUFVSSU9VU19EUkFHT04sIDI2NzUwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkJZWkFOVElVTSwgNDM3MDAwMF0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQ09OU1RBTlRJTk9QTEUsIDcyODAwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLlBFVEVSU0JVUkcsIDcyODAwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLklTVEFOQlVMLCA5MDY5MDAwXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5NVUlSX0dMQUNJRVIsIDkyMDAwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkJFUkxJTiwgMTIyNDQwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkxPTkRPTiwgMTI5NjUwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkFSUk9XX0dMQUNJRVIsIDEzNzczMDAwXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5HUkFZX0dMQUNJRVIsIDE1MDUwMDAwXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5NRVJHRSwgMTU1MzczOTRdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLlNIQU5HSEFJLCAxNzAzNDg3MF0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQ0FOQ1VOLCAxOTQyNjU4OV0sXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhhcmRmb3JrSGlzdG9yeTogbmV3IE1hcChbXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQllaQU5USVVNLCAxNzAwMDAwXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5DT05TVEFOVElOT1BMRSwgNDIzMDAwMF0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuUEVURVJTQlVSRywgNDkzOTM5NF0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuSVNUQU5CVUwsIDY0ODU4NDZdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLk1VSVJfR0xBQ0lFUiwgNzExNzExN10sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQkVSTElOLCA5ODEyMTg5XSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5MT05ET04sIDEwNDk5NDAxXSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgIDQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaGFyZGZvcmtIaXN0b3J5OiBuZXcgTWFwKFtcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5CWVpBTlRJVU0sIDEwMzUzMDFdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkNPTlNUQU5USU5PUExFLCAzNjYwNjYzXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5QRVRFUlNCVVJHLCA0MzIxMjM0XSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5JU1RBTkJVTCwgNTQzNTM0NV0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQkVSTElOLCA4MjkwOTI4XSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5MT05ET04sIDg4OTc5ODhdLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBoYXJkZm9ya0hpc3Rvcnk6IG5ldyBNYXAoW1xuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLklTVEFOQlVMLCAxNTYxNjUxXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5CRVJMSU4sIDQ0NjA2NDRdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkxPTkRPTiwgNTA2MjYwNV0sXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgICA0MixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBoYXJkZm9ya0hpc3Rvcnk6IG5ldyBNYXAoW1xuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkJZWkFOVElVTSwgNTA2NzAwMF0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQ09OU1RBTlRJTk9QTEUsIDkyMDAwMDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLlBFVEVSU0JVUkcsIDEwMjU1MjAxXSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5JU1RBTkJVTCwgMTQxMTExNDFdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkJFUkxJTiwgMjQ3NzA5MDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLkxPTkRPTiwgMjY3NDExMDBdLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgW1xuICAgICAgICAgICAgMTExNTUxMTEsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaGFyZGZvcmtIaXN0b3J5OiBuZXcgTWFwKFtcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5HUkFZX0dMQUNJRVIsIDBdLFxuICAgICAgICAgICAgICAgICAgICBbaGFyZGZvcmtzXzEuSGFyZGZvcmtOYW1lLk1FUkdFLCAxNDUwNDA5XSxcbiAgICAgICAgICAgICAgICAgICAgW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5TSEFOR0hBSSwgMjk5MDkwOF0sXG4gICAgICAgICAgICAgICAgICAgIFtoYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuQ0FOQ1VOLCA1MTg3MDIzXSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIC8vIFRPRE86IHRoZSByZXN0IG9mIHRoaXMgY29uZmlnIGlzIGEgdGVtcG9yYXJ5IHdvcmthcm91bmQsXG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vTm9taWNGb3VuZGF0aW9uL2Vkci9pc3N1ZXMvNTIyXG4gICAgICAgIFtcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhhcmRmb3JrSGlzdG9yeTogbmV3IE1hcChbW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5TSEFOR0hBSSwgMF1dKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgIDExMTU1NDIwLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhhcmRmb3JrSGlzdG9yeTogbmV3IE1hcChbW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5TSEFOR0hBSSwgMF1dKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgIDQyMTYxLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhhcmRmb3JrSGlzdG9yeTogbmV3IE1hcChbW2hhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5TSEFOR0hBSSwgMF1dKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICAgIDQyMTYxNCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBoYXJkZm9ya0hpc3Rvcnk6IG5ldyBNYXAoW1toYXJkZm9ya3NfMS5IYXJkZm9ya05hbWUuU0hBTkdIQUksIDBdXSksXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIF0pLFxufTtcbmV4cG9ydHMuZGVmYXVsdEh0dHBOZXR3b3JrUGFyYW1zID0ge1xuICAgIGFjY291bnRzOiBcInJlbW90ZVwiLFxuICAgIGdhczogXCJhdXRvXCIsXG4gICAgZ2FzUHJpY2U6IFwiYXV0b1wiLFxuICAgIGdhc011bHRpcGxpZXI6IGV4cG9ydHMuREVGQVVMVF9HQVNfTVVMVElQTElFUixcbiAgICBodHRwSGVhZGVyczoge30sXG4gICAgdGltZW91dDogMjAwMDAsXG59O1xuZXhwb3J0cy5kZWZhdWx0TW9jaGFPcHRpb25zID0ge1xuICAgIHRpbWVvdXQ6IDQwMDAwLFxufTtcbmV4cG9ydHMuZGVmYXVsdFNvbGNPdXRwdXRTZWxlY3Rpb24gPSB7XG4gICAgXCIqXCI6IHtcbiAgICAgICAgXCIqXCI6IFtcbiAgICAgICAgICAgIFwiYWJpXCIsXG4gICAgICAgICAgICBcImV2bS5ieXRlY29kZVwiLFxuICAgICAgICAgICAgXCJldm0uZGVwbG95ZWRCeXRlY29kZVwiLFxuICAgICAgICAgICAgXCJldm0ubWV0aG9kSWRlbnRpZmllcnNcIixcbiAgICAgICAgICAgIFwibWV0YWRhdGFcIixcbiAgICAgICAgXSxcbiAgICAgICAgXCJcIjogW1wiYXN0XCJdLFxuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC1jb25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/config/default-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/errors-list.js":
/*!***********************************************************!*\
  !*** ./node_modules/hardhat/internal/core/errors-list.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ERRORS = exports.ERROR_RANGES = exports.getErrorCode = exports.ERROR_PREFIX = void 0;\nexports.ERROR_PREFIX = \"HH\";\nfunction getErrorCode(error) {\n    return `${exports.ERROR_PREFIX}${error.number}`;\n}\nexports.getErrorCode = getErrorCode;\nexports.ERROR_RANGES = {\n    GENERAL: { min: 1, max: 99, title: \"General errors\" },\n    NETWORK: { min: 100, max: 199, title: \"Network related errors\" },\n    TASK_DEFINITIONS: {\n        min: 200,\n        max: 299,\n        title: \"Task definition errors\",\n    },\n    ARGUMENTS: { min: 300, max: 399, title: \"Arguments related errors\" },\n    RESOLVER: {\n        min: 400,\n        max: 499,\n        title: \"Dependencies resolution errors\",\n    },\n    SOLC: { min: 500, max: 599, title: \"Solidity related errors\" },\n    BUILTIN_TASKS: { min: 600, max: 699, title: \"Built-in tasks errors\" },\n    ARTIFACTS: { min: 700, max: 799, title: \"Artifacts related errors\" },\n    PLUGINS: { min: 800, max: 899, title: \"Plugin system errors\" },\n    INTERNAL: { min: 900, max: 999, title: \"Internal Hardhat errors\" },\n    SOURCE_NAMES: { min: 1000, max: 1099, title: \"Source name errors\" },\n    CONTRACT_NAMES: { min: 1100, max: 1199, title: \"Contract name errors\" },\n    VARS: { min: 1200, max: 1299, title: \"Connfiguration variables errors\" },\n};\nexports.ERRORS = {\n    GENERAL: {\n        NOT_INSIDE_PROJECT: {\n            number: 1,\n            message: \"You are not inside a Hardhat project.\",\n            title: \"You are not inside a Hardhat project\",\n            description: `You are trying to run Hardhat outside of a Hardhat project.\n\nYou can learn how to use Hardhat by reading the [Getting Started guide](/hardhat-runner/docs/getting-started).`,\n            shouldBeReported: false,\n        },\n        INVALID_NODE_VERSION: {\n            number: 2,\n            message: \"Hardhat doesn't support your Node.js version. It should be %requirement%.\",\n            title: \"Unsupported Node.js\",\n            description: `Hardhat doesn't support your Node.js version.\n\nPlease upgrade your version of Node.js and try again.`,\n            shouldBeReported: false,\n        },\n        UNSUPPORTED_OPERATION: {\n            number: 3,\n            message: \"%operation% is not supported in Hardhat.\",\n            title: \"Unsupported operation\",\n            description: `You are trying to perform an unsupported operation.\n\nUnless you are creating a task or plugin, this is probably a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        CONTEXT_ALREADY_CREATED: {\n            number: 4,\n            message: \"HardhatContext is already created.\",\n            title: \"Hardhat was already initialized\",\n            description: `Hardhat initialization was executed twice. This is a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        CONTEXT_NOT_CREATED: {\n            number: 5,\n            message: \"HardhatContext is not created.\",\n            title: \"Hardhat wasn't initialized\",\n            description: `Hardhat initialization failed. This is a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        CONTEXT_HRE_NOT_DEFINED: {\n            number: 6,\n            message: \"Hardhat Runtime Environment is not defined in the HardhatContext.\",\n            title: \"Hardhat Runtime Environment not created\",\n            description: `Hardhat initialization failed. This is a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        CONTEXT_HRE_ALREADY_DEFINED: {\n            number: 7,\n            message: \"Hardhat Runtime Environment is already defined in the HardhatContext\",\n            title: \"Tried to create the Hardhat Runtime Environment twice\",\n            description: `The Hardhat initialization process was executed twice. This is a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        INVALID_CONFIG: {\n            number: 8,\n            message: `There's one or more errors in your config file:\n\n%errors%\n\nTo learn more about Hardhat's configuration, please go to https://hardhat.org/config/`,\n            title: \"Invalid Hardhat config\",\n            description: `You have one or more errors in your config file.\n\nCheck the error message for details, or go to the [documentation](https://hardhat.org/config/) to learn more.`,\n            shouldBeReported: false,\n        },\n        LIB_IMPORTED_FROM_THE_CONFIG: {\n            number: 9,\n            message: `Error while loading Hardhat's configuration.\n\nYou probably tried to import the \"hardhat\" module from your config or a file imported from it.\nThis is not possible, as Hardhat can't be initialized while its config is being defined.\n\nTo learn more about how to access the Hardhat Runtime Environment from different contexts go to https://hardhat.org/hre`,\n            title: \"Failed to load config file\",\n            description: `There was an error while loading your config file.\n\nThe most common source of errors is trying to import the Hardhat Runtime Environment from your config or a file imported from it.\nThis is not possible, as Hardhat can't be initialized while its config is being defined.\n\nYou may also have accidentally imported \\`hardhat\\` instead of \\`hardhat/config\\`.\n\nPlease make sure your config file is correct.\n\nTo learn more about how to access the Hardhat Runtime Environment from different contexts go to https://hardhat.org/hre`,\n            shouldBeReported: false,\n        },\n        USER_CONFIG_MODIFIED: {\n            number: 10,\n            message: `Error while loading Hardhat's configuration.\nYou or one of your plugins is trying to modify the userConfig.%path% value from a config extender`,\n            title: \"Attempted to modify the user's config\",\n            description: `An attempt to modify the user's config was made.\n\nThis is probably a bug in one of your plugins.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        ASSERTION_ERROR: {\n            number: 11,\n            message: \"An internal invariant was violated: %message%\",\n            title: \"Invariant violation\",\n            description: `An internal invariant was violated.\nThis is probably caused by a programming error in hardhat or in one of the used plugins.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        NON_LOCAL_INSTALLATION: {\n            number: 12,\n            message: \"Trying to use a non-local installation of Hardhat, which is not supported.\\nPlease install Hardhat locally using npm or Yarn, and try again.\",\n            title: \"Hardhat is not installed or installed globally\",\n            description: `You tried to run Hardhat from a global installation or not installing it at all. This is not supported.\n\nPlease install Hardhat locally using npm or Yarn, and try again.`,\n            shouldBeReported: false,\n        },\n        TS_NODE_NOT_INSTALLED: {\n            number: 13,\n            message: `Your Hardhat project uses typescript, but ts-node is not installed.\n\nPlease run: npm install --save-dev ts-node`,\n            title: \"ts-node not installed\",\n            description: `You are running a Hardhat project that uses typescript, but you haven't installed ts-node.\n\nPlease run this and try again: \\`npm install --save-dev ts-node\\``,\n            shouldBeReported: false,\n        },\n        TYPESCRIPT_NOT_INSTALLED: {\n            number: 14,\n            message: `Your Hardhat project uses typescript, but it's not installed.\n\nPlease run: npm install --save-dev typescript`,\n            title: \"typescript not installed\",\n            description: `You are running a Hardhat project that uses typescript, but it's not installed.\n\nPlease run this and try again: \\`npm install --save-dev typescript\\``,\n            shouldBeReported: false,\n        },\n        NOT_INSIDE_PROJECT_ON_WINDOWS: {\n            number: 15,\n            message: `You are not inside a project and Hardhat failed to initialize a new one.\n\nIf you were trying to create a new project, please try again using Windows Subsystem for Linux (WSL) or PowerShell.\n`,\n            title: \"You are not inside a Hardhat project and Hardhat failed to initialize a new one\",\n            description: `You are trying to run Hardhat outside of a Hardhat project, and we couldn't initialize one.\n\nIf you were trying to create a new project, please try again using Windows Subsystem for Linux (WSL) or PowerShell.\n\nYou can learn how to use Hardhat by reading the [Getting Started guide](/hardhat-runner/docs/getting-started).`,\n            shouldBeReported: false,\n        },\n        CONFLICTING_FILES: {\n            number: 16,\n            message: `The directory %dest% contains files that could conflict:\n\n%conflicts%\n\nEither try using a new directory, or remove the files listed above.`,\n            title: \"conflicting files during project creation\",\n            description: `You are trying to create a new hardhat project, but there are existing files that would be overwritten by the creation process.\n\nEither try using a new directory name, or remove the conflicting files.`,\n            shouldBeReported: false,\n        },\n        INVALID_BIG_NUMBER: {\n            number: 17,\n            message: \"The input value cannot be normalized to a BigInt: %message%\",\n            title: \"Invalid big number\",\n            description: \"Hardhat attempted to convert the input value to a BigInt, but no known conversion method was applicable to the given value.\",\n            shouldBeReported: false,\n        },\n        CORRUPTED_LOCKFILE: {\n            number: 18,\n            message: `You installed Hardhat with a corrupted lockfile due to the NPM bug #4828.\n\nPlease delete your node_modules, package-lock.json, reinstall your project, and try again.`,\n            title: \"Corrupted lockfile\",\n            description: `Some versions of NPM are affected [by a bug](https://github.com/npm/cli/issues/4828) that leads to corrupt lockfiles being generated.\n\nThis bug can only affect you if you, or someone at your team, installed the project without a lockfile, but with an existing node_modules.\n\nTo avoid it, please delete both your node_modules and package-lock.json, and reinstall your project.\n\nNote that you don't need to do this every time you install a new dependency, but please make sure to delete your node_modules every time you delete your package-lock.json.`,\n            shouldBeReported: true,\n        },\n        ESM_PROJECT_WITHOUT_CJS_CONFIG: {\n            number: 19,\n            message: `Your project is an ESM project (you have \"type\": \"module\" set in your package.json) but your Hardhat config file uses the .js extension.\n\nRename the file to use the .cjs to fix this problem.`,\n            title: \"Hardhat config with .js extension in an ESM project\",\n            description: \"Your project is an ESM project but your Hardhat config uses the .js extension. Hardhat config files cannot be an ES module. To fix this, rename your Hardhat config to use the .cjs extension.\",\n            shouldBeReported: false,\n        },\n        ESM_TYPESCRIPT_PROJECT_CREATION: {\n            number: 20,\n            message: `Your project is an ESM project (you have \"type\": \"module\" set in your package.json) and you are trying to initialize a TypeScript project. This is not supported yet.`,\n            title: \"Initializing a TypeScript sample project in an ESM project\",\n            description: `Your project is an ESM project (you have \"type\": \"module\" set in your package.json) and you are trying to initialize a TypeScript project. This is not supported yet.`,\n            shouldBeReported: false,\n        },\n        UNINITIALIZED_PROVIDER: {\n            number: 21,\n            message: \"You tried to access an uninitialized provider. To initialize the provider, make sure you first call `.init()` or any method that hits a node like request, send or sendAsync.\",\n            title: \"Uninitialized provider\",\n            description: `You tried to access an uninitialized provider. This is most likely caused by using the internal wrapped provider directly before using it to send a request or initializing it.\nTo initialize the provider, make sure you first call \\`.init()\\` or any method that hits a node like request, send or sendAsync.`,\n            shouldBeReported: true,\n        },\n        INVALID_READ_OF_DIRECTORY: {\n            number: 22,\n            message: \"Invalid file path %absolutePath%. Attempting to read a directory instead of a file.\",\n            title: \"Invalid read: a directory cannot be read\",\n            description: `An attempt was made to read a file, but a path to a directory was provided.\n\nPlease double check the file path.`,\n            shouldBeReported: false,\n        },\n        HARDHAT_PROJECT_ALREADY_CREATED: {\n            number: 23,\n            message: \"You are trying to initialize a project inside an existing Hardhat project. The path to the project's configuration file is:  %hardhatProjectRootPath%.\",\n            title: \"Hardhat project already created\",\n            description: `Cannot create a new Hardhat project, the current folder is already associated with a project.`,\n            shouldBeReported: false,\n        },\n        NOT_IN_INTERACTIVE_SHELL: {\n            number: 24,\n            message: \"You are trying to initialize a project but you are not in an interactive shell.\",\n            title: \"Not inside an interactive shell\",\n            description: `You are trying to initialize a project but you are not in an interactive shell.\n\nPlease re-run the command inside an interactive shell.`,\n            shouldBeReported: false,\n        },\n    },\n    NETWORK: {\n        CONFIG_NOT_FOUND: {\n            number: 100,\n            message: \"Network %network% doesn't exist\",\n            title: \"Selected network doesn't exist\",\n            description: `You are trying to run Hardhat with a nonexistent network.\n\nRead the [documentation](https://hardhat.org/hardhat-runner/docs/config#networks-configuration) to learn how to define custom networks.`,\n            shouldBeReported: false,\n        },\n        INVALID_GLOBAL_CHAIN_ID: {\n            number: 101,\n            message: \"Hardhat was set to use chain id %configChainId%, but connected to a chain with id %connectionChainId%.\",\n            title: \"Connected to the wrong network\",\n            description: `Your config specifies a chain id for the network you are trying to use, but Hardhat detected a different chain id.\n\nPlease make sure you are setting your config correctly.`,\n            shouldBeReported: false,\n        },\n        ETHSIGN_MISSING_DATA_PARAM: {\n            number: 102,\n            message: 'Missing \"data\" param when calling eth_sign.',\n            title: \"Missing `data` param when calling eth_sign.\",\n            description: `You called \\`eth_sign\\` with incorrect parameters.\n\nPlease check that you are sending a \\`data\\` parameter.`,\n            shouldBeReported: false,\n        },\n        NOT_LOCAL_ACCOUNT: {\n            number: 103,\n            message: \"Account %account% is not managed by the node you are connected to.\",\n            title: \"Unrecognized account\",\n            description: `You are trying to send a transaction or sign some data with an\naccount not managed by your Ethereum node nor Hardhat.\n\nPlease double check your accounts and the \\`from\\` parameter in your RPC calls.`,\n            shouldBeReported: false,\n        },\n        MISSING_TX_PARAM_TO_SIGN_LOCALLY: {\n            number: 104,\n            message: \"Missing param %param% from a tx being signed locally.\",\n            title: \"Missing transaction parameter\",\n            description: `You are trying to send a transaction with a locally managed\naccount, and some parameters are missing.\n\nPlease double check your transactions' parameters.`,\n            shouldBeReported: false,\n        },\n        NO_REMOTE_ACCOUNT_AVAILABLE: {\n            number: 105,\n            message: \"No local account was set and there are accounts in the remote node.\",\n            title: \"No remote accounts available\",\n            description: `No local account was set and there are accounts in the remote node.\n\nPlease make sure that your Ethereum node has unlocked accounts.`,\n            shouldBeReported: false,\n        },\n        INVALID_HD_PATH: {\n            number: 106,\n            message: \"HD path %path% is invalid. Read about BIP32 to know about the valid forms.\",\n            title: \"Invalid HD path\",\n            description: `An invalid HD/BIP32 derivation path was provided in your config.\n\nRead the [documentation](https://hardhat.org/hardhat-runner/docs/config#hd-wallet-config) to learn how to define HD accounts correctly.`,\n            shouldBeReported: false,\n        },\n        INVALID_RPC_QUANTITY_VALUE: {\n            number: 107,\n            message: \"Received invalid value `%value%` from/to the node's JSON-RPC, but a Quantity was expected.\",\n            title: \"Invalid JSON-RPC value\",\n            description: `One of your transactions sent or received an invalid JSON-RPC QUANTITY value.\n\nPlease double check your calls' parameters and keep your Ethereum node up to date.`,\n            shouldBeReported: false,\n        },\n        NODE_IS_NOT_RUNNING: {\n            number: 108,\n            message: `Cannot connect to the network %network%.\nPlease make sure your node is running, and check your internet connection and networks config`,\n            title: \"Cannot connect to the network\",\n            description: `Cannot connect to the network.\n\nPlease make sure your node is running, and check your internet connection and networks config.`,\n            shouldBeReported: false,\n        },\n        NETWORK_TIMEOUT: {\n            number: 109,\n            message: `Network connection timed out.\nPlease check your internet connection and networks config`,\n            title: \"Network timeout\",\n            description: `One of your JSON-RPC requests timed out.\n\nPlease make sure your node is running, and check your internet connection and networks config.`,\n            shouldBeReported: false,\n        },\n        INVALID_JSON_RESPONSE: {\n            number: 110,\n            message: \"Invalid JSON-RPC response received: %response%\",\n            title: \"Invalid JSON-RPC response\",\n            description: `One of your JSON-RPC requests received an invalid response.\n\nPlease make sure your node is running, and check your internet connection and networks config.`,\n            shouldBeReported: false,\n        },\n        CANT_DERIVE_KEY: {\n            number: 111,\n            message: \"Cannot derive key %path% from mnemonic '%mnemonic%.\\nTry using another mnemonic or deriving fewer keys.\",\n            title: \"Could not derive an HD key\",\n            description: `One of your HD keys could not be derived.\n\nTry using another mnemonic or deriving less keys.`,\n            shouldBeReported: false,\n        },\n        INVALID_RPC_DATA_VALUE: {\n            number: 112,\n            message: \"Received invalid value `%value%` from/to the node's JSON-RPC, but a Data was expected.\",\n            title: \"Invalid JSON-RPC value\",\n            description: `One of your calls sent or received an invalid JSON-RPC DATA value.\n\nPlease double check your calls' parameters and keep your Ethereum node up to date.`,\n            shouldBeReported: false,\n        },\n        ETHSIGN_TYPED_DATA_V4_INVALID_DATA_PARAM: {\n            number: 113,\n            message: 'Invalid \"data\" param when calling eth_signTypedData_v4.',\n            title: \"Invalid `data` param when calling eth_signTypedData_v4.\",\n            description: `You called \\`eth_signTypedData_v4\\` with incorrect parameters.\nPlease check that you are sending a \\`data\\` parameter with a JSON string or object conforming to EIP712 TypedData schema.`,\n            shouldBeReported: false,\n        },\n        INCOMPATIBLE_FEE_PRICE_FIELDS: {\n            number: 114,\n            message: \"An incompatible transaction with gasPrice and EIP-1559 fee price fields.\",\n            title: \"Incompatible fee price parameters\",\n            description: `You are trying to send a transaction with a locally managed\naccount, and its parameters are incompatible. You sent both gasPrice, and maxFeePerGas or maxPriorityFeePerGas.\n\nPlease double check your transactions' parameters.`,\n            shouldBeReported: false,\n        },\n        MISSING_FEE_PRICE_FIELDS: {\n            number: 115,\n            message: \"Tried to sign a transaction locally, but gasPrice, maxFeePerGas, and maxPriorityFeePerGas were missing.\",\n            title: \"Missing fee price parameters\",\n            description: `You are trying to send a transaction with a locally managed account, and no fee price parameters were provided. You need to send gasPrice, or maxFeePerGas and maxPriorityFeePerGas.\n\nPlease double check your transactions' parameters.`,\n            shouldBeReported: false,\n        },\n        PERSONALSIGN_MISSING_ADDRESS_PARAM: {\n            number: 116,\n            message: 'Missing \"address\" param when calling personal_sign.',\n            title: \"Missing `address` param when calling personal_sign.\",\n            description: `You called \\`personal_sign\\` with incorrect parameters.\n\nPlease check that you are sending an \\`address\\` parameter.`,\n            shouldBeReported: false,\n        },\n        EMPTY_URL: {\n            number: 117,\n            message: \"Empty string `%value%` for network or forking URL - Expected a non-empty string.\",\n            title: \"Empty string `%value%` for network or forking URL - Expected a non-empty string.\",\n            description: `You are trying to connect to a network with an empty network or forking URL.\n\nPlease check that you are sending a non-empty string for network or forking \\`URL\\` parameter.`,\n            shouldBeReported: false,\n        },\n    },\n    TASK_DEFINITIONS: {\n        PARAM_AFTER_VARIADIC: {\n            number: 200,\n            message: \"Could not set positional param %paramName% for task %taskName% because there is already a variadic positional param and it has to be the last positional one.\",\n            title: \"Could not add positional param\",\n            description: `Could add a positional param to your task because\nthere is already a variadic positional param and it has to be the last\npositional one.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        PARAM_ALREADY_DEFINED: {\n            number: 201,\n            message: \"Could not set param %paramName% for task %taskName% because its name is already used.\",\n            title: \"Repeated param name\",\n            description: `Could not add a param to your task because its name is already used.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        PARAM_CLASHES_WITH_HARDHAT_PARAM: {\n            number: 202,\n            message: \"Could not set param %paramName% for task %taskName% because its name is used as a param for Hardhat.\",\n            title: \"Hardhat and task param names clash\",\n            description: `Could not add a param to your task because its name is used as a param for Hardhat.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        MANDATORY_PARAM_AFTER_OPTIONAL: {\n            number: 203,\n            message: \"Could not set param %paramName% for task %taskName% because it is mandatory and it was added after an optional positional param.\",\n            title: \"Optional param followed by a required one\",\n            description: `Could not add param to your task because it is required and it was added after an optional positional param.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        ACTION_NOT_SET: {\n            number: 204,\n            message: \"No action set for task %taskName%.\",\n            title: \"Tried to run task without an action\",\n            description: `A task was run, but it has no action set.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        RUNSUPER_NOT_AVAILABLE: {\n            number: 205,\n            message: \"Tried to call runSuper from a non-overridden definition of task %taskName%\",\n            title: \"`runSuper` not available\",\n            description: `You tried to call \\`runSuper\\` from a non-overridden task.\n\nPlease use \\`runSuper.isDefined\\` to make sure that you can call it.`,\n            shouldBeReported: false,\n        },\n        DEFAULT_VALUE_WRONG_TYPE: {\n            number: 206,\n            message: \"Default value for param %paramName% of task %taskName% doesn't match its expected type.\",\n            title: \"Default value has incorrect type\",\n            description: `One of your tasks has a parameter whose default value doesn't match the expected type.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        DEFAULT_IN_MANDATORY_PARAM: {\n            number: 207,\n            message: \"Default value for param %paramName% of task %taskName% shouldn't be set.\",\n            title: \"Required parameter has a default value\",\n            description: `One of your tasks has a required parameter with a default value.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        INVALID_PARAM_NAME_CASING: {\n            number: 208,\n            message: \"Invalid param name %paramName% in task %taskName%. Param names must be camelCase.\",\n            title: \"Invalid casing in parameter name\",\n            description: `Your parameter names must use camelCase.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        OVERRIDE_NO_MANDATORY_PARAMS: {\n            number: 209,\n            message: \"Redefinition of task %taskName% failed. Unsupported operation adding mandatory (non optional) param definitions in an overridden task.\",\n            title: \"Attempted to add mandatory params to an overridden task\",\n            description: `You can't add mandatory (non optional) param definitions in an overridden task.\nThe only supported param additions for overridden tasks are flags\nand optional params.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        OVERRIDE_NO_POSITIONAL_PARAMS: {\n            number: 210,\n            message: \"Redefinition of task %taskName% failed. Unsupported operation adding positional param definitions in an overridden task.\",\n            title: \"Attempted to add positional params to an overridden task\",\n            description: `You can't add positional param definitions in an overridden task.\nThe only supported param additions for overridden tasks are flags\nand optional params.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        OVERRIDE_NO_VARIADIC_PARAMS: {\n            number: 211,\n            message: \"Redefinition of task %taskName% failed. Unsupported operation adding variadic param definitions in an overridden task.\",\n            title: \"Attempted to add variadic params to an overridden task\",\n            description: `You can't add variadic param definitions in an overridden task.\nThe only supported param additions for overridden tasks are flags\nand optional params.\n\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        CLI_ARGUMENT_TYPE_REQUIRED: {\n            number: 212,\n            title: \"Invalid argument type\",\n            message: \"Task %task% is not a subtask but one of its arguments uses the type %type%, which is not parseable.\",\n            description: `Tasks that can be invoked from the command line require CLIArgumentType types for their arguments.\n\nWhat makes these types special is that they can be represented as strings, so you can write them down in the terminal.`,\n            shouldBeReported: false,\n        },\n        TASK_SCOPE_CLASH: {\n            number: 213,\n            message: \"A clash was found while creating scope '%scopeName%', since a task with that name already exists.\",\n            title: \"Attempted to create a scope with a name already used by a task\",\n            description: `You can't create a scope if a task with that name already exists.\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        SCOPE_TASK_CLASH: {\n            number: 214,\n            message: \"A clash was found while creating task '%taskName%', since a scope with that name already exists.\",\n            title: \"Attempted to create a task with a name already used by a scope\",\n            description: `You can't create a task if a scope with that name already exists.\nPlease double check your task definitions.`,\n            shouldBeReported: false,\n        },\n        DEPRECATED_TRANSFORM_IMPORT_TASK: {\n            number: 215,\n            title: \"Use of deprecated remapping task\",\n            message: \"Task TASK_COMPILE_TRANSFORM_IMPORT_NAME is deprecated. Please update your @nomicfoundation/hardhat-foundry plugin version.\",\n            description: `This task has been deprecated in favor of a new approach.`,\n            shouldBeReported: true,\n        },\n    },\n    ARGUMENTS: {\n        INVALID_ENV_VAR_VALUE: {\n            number: 300,\n            message: \"Invalid environment variable '%varName%' with value: '%value%'\",\n            title: \"Invalid environment variable value\",\n            description: `You are setting one of Hardhat's arguments using an environment variable, but it has an incorrect value.\n\nPlease double check your environment variables.`,\n            shouldBeReported: false,\n        },\n        INVALID_VALUE_FOR_TYPE: {\n            number: 301,\n            message: \"Invalid value %value% for argument %name% of type %type%\",\n            title: \"Invalid argument type\",\n            description: `One of your Hardhat or task arguments has an invalid type.\n\nPlease double check your arguments.`,\n            shouldBeReported: false,\n        },\n        INVALID_INPUT_FILE: {\n            number: 302,\n            message: \"Invalid argument %name%: File %value% doesn't exist or is not a readable file.\",\n            title: \"Invalid file argument\",\n            description: `One of your tasks expected a file as an argument, but you provided a\nnonexistent or non-readable file.\n\nPlease double check your arguments.`,\n            shouldBeReported: false,\n        },\n        UNRECOGNIZED_TASK: {\n            number: 303,\n            message: \"Unrecognized task '%task%'\",\n            title: \"Unrecognized task\",\n            description: `Tried to run a nonexistent task.\n\nPlease double check the name of the task you are trying to run.`,\n            shouldBeReported: false,\n        },\n        UNRECOGNIZED_COMMAND_LINE_ARG: {\n            number: 304,\n            message: \"Unrecognised command line argument %argument%.\\nNote that task arguments must come after the task name.\",\n            title: \"Unrecognized command line argument\",\n            description: `Hardhat couldn't recognize one of your command line arguments.\n\nThis may be because you are writing it before the task name. It should come after it.\n\nPlease double check how you invoked Hardhat.`,\n            shouldBeReported: false,\n        },\n        UNRECOGNIZED_PARAM_NAME: {\n            number: 305,\n            message: \"Unrecognized param %param%\",\n            title: \"Unrecognized param\",\n            description: `Hardhat couldn't recognize one of your tasks' parameters.\n\nPlease double check how you invoked Hardhat or ran your task.`,\n            shouldBeReported: false,\n        },\n        MISSING_TASK_ARGUMENT: {\n            number: 306,\n            message: \"The '%param%' parameter of task '%task%' expects a value, but none was passed.\",\n            title: \"Missing task argument\",\n            description: `You tried to run a task, but one of its required arguments was missing.\n\nPlease double check how you invoked Hardhat or ran your task.`,\n            shouldBeReported: false,\n        },\n        MISSING_POSITIONAL_ARG: {\n            number: 307,\n            message: \"Missing positional argument %param%\",\n            title: \"Missing task positional argument\",\n            description: `You tried to run a task, but one of its required arguments was missing.\n\nPlease double check how you invoked Hardhat or ran your task.`,\n            shouldBeReported: false,\n        },\n        UNRECOGNIZED_POSITIONAL_ARG: {\n            number: 308,\n            message: \"Unrecognized positional argument %argument%\",\n            title: \"Unrecognized task positional argument\",\n            description: `You tried to run a task with more positional arguments than expected.\n\nPlease double check how you invoked Hardhat or ran your task.`,\n            shouldBeReported: false,\n        },\n        REPEATED_PARAM: {\n            number: 309,\n            message: \"Repeated parameter %param%\",\n            title: \"Repeated task parameter\",\n            description: `You tried to run a task with a repeated parameter.\n\nPlease double check how you invoked Hardhat or ran your task.`,\n            shouldBeReported: false,\n        },\n        PARAM_NAME_INVALID_CASING: {\n            number: 310,\n            message: \"Invalid param %param%. Command line params must be lowercase.\",\n            title: \"Invalid casing in command line parameter\",\n            description: `You tried to run hardhat with a parameter with invalid casing. They must be lowercase.\n\nPlease double check how you invoked Hardhat.`,\n            shouldBeReported: false,\n        },\n        INVALID_JSON_ARGUMENT: {\n            number: 311,\n            message: \"Error parsing JSON value for argument %param%: %error%\",\n            title: \"Invalid JSON parameter\",\n            description: `You tried to run a task with an invalid JSON parameter.\n\nPlease double check how you invoked Hardhat or ran your task.`,\n            shouldBeReported: false,\n        },\n        RUNNING_SUBTASK_FROM_CLI: {\n            number: 312,\n            title: \"Subtask run from the command line\",\n            message: \"Trying to run the %name% subtask from the CLI\",\n            description: `You tried to run a subtask from the command line.\n\nThis is not supported. Please run the help task to see the available options.`,\n            shouldBeReported: false,\n        },\n        TYPECHECK_USED_IN_JAVASCRIPT_PROJECT: {\n            number: 313,\n            title: \"The --typecheck flag was used in a javascript project\",\n            message: \"Trying to use the --typecheck flag, but the project is not in typescript\",\n            description: `You tried to run Hardhat with the \\`--typecheck\\` flag in a javascript project.\n\nThis flag can only be used in typescript projects.`,\n            shouldBeReported: false,\n        },\n        UNRECOGNIZED_SCOPE: {\n            number: 314,\n            message: \"Unrecognized scope '%scope%'\",\n            title: \"Unrecognized scope\",\n            description: `Tried to run a task from a nonexistent scope.\n\nPlease double check the scope of the task you are trying to run.`,\n            shouldBeReported: false,\n        },\n        UNRECOGNIZED_SCOPED_TASK: {\n            number: 315,\n            message: \"Unrecognized task '%task%' under scope '%scope%'\",\n            title: \"Unrecognized scoped task\",\n            description: `Tried to run a nonexistent scoped task.\n\nPlease double check the name of the task you are trying to run.`,\n            shouldBeReported: false,\n        },\n    },\n    RESOLVER: {\n        FILE_NOT_FOUND: {\n            number: 400,\n            message: \"File %file% doesn't exist.\",\n            title: \"Solidity file not found\",\n            description: `Tried to resolve a nonexistent Solidity file as an entry-point.`,\n            shouldBeReported: false,\n        },\n        LIBRARY_NOT_INSTALLED: {\n            number: 401,\n            message: \"Library %library% is not installed.\",\n            title: \"Solidity library not installed\",\n            description: `One of your Solidity sources imports a library that is not installed.\n\nPlease double check your imports or install the missing dependency.`,\n            shouldBeReported: false,\n        },\n        LIBRARY_FILE_NOT_FOUND: {\n            number: 402,\n            message: \"File %file% doesn't exist.\",\n            title: \"Missing library file\",\n            description: `One of your libraries' files was imported but doesn't exist.\n\nPlease double check your imports or update your libraries.`,\n            shouldBeReported: false,\n        },\n        ILLEGAL_IMPORT: {\n            number: 403,\n            message: \"Illegal import %imported% from %from%\",\n            title: \"Illegal Solidity import\",\n            description: `One of your libraries tried to use a relative import to import a file outside of its scope.\n\nThis is disabled for security reasons.`,\n            shouldBeReported: false,\n        },\n        IMPORTED_FILE_NOT_FOUND: {\n            number: 404,\n            message: \"File %imported%, imported from %from%, not found.\",\n            title: \"Imported file not found\",\n            description: `One of your source files imported a nonexistent file.\n\nPlease double check your imports.`,\n            shouldBeReported: false,\n        },\n        INVALID_IMPORT_BACKSLASH: {\n            number: 405,\n            message: \"Invalid import %imported% from %from%. Imports must use / instead of \\\\, even in Windows\",\n            title: \"Invalid import: use / instead of \\\\\",\n            description: `A Solidity file is trying to import another file via relative path and is using backslashes (\\\\\\\\) instead of slashes (/).\n\nYou must always use slashes (/) in Solidity imports.`,\n            shouldBeReported: false,\n        },\n        INVALID_IMPORT_PROTOCOL: {\n            number: 406,\n            message: \"Invalid import %imported% from %from%. Hardhat doesn't support imports via %protocol%.\",\n            title: \"Invalid import: trying to use an unsupported protocol\",\n            description: `A Solidity file is trying to import a file using an unsupported protocol, like http.\n\nYou can only import files that are available locally or installed through npm.`,\n            shouldBeReported: false,\n        },\n        INVALID_IMPORT_ABSOLUTE_PATH: {\n            number: 407,\n            message: \"Invalid import %imported% from %from%. Hardhat doesn't support imports with absolute paths.\",\n            title: \"Invalid import: absolute paths unsupported\",\n            description: `A Solidity file is trying to import a file using its absolute path.\n\nThis is not supported, as it would lead to hard-to-reproduce compilations.`,\n            shouldBeReported: false,\n        },\n        INVALID_IMPORT_OUTSIDE_OF_PROJECT: {\n            number: 408,\n            message: \"Invalid import %imported% from %from%. The file being imported is outside of the project\",\n            title: \"Invalid import: file outside of the project\",\n            description: `A Solidity file is trying to import a file that is outside of the project.\n\nThis is not supported by Hardhat.`,\n            shouldBeReported: false,\n        },\n        INVALID_IMPORT_WRONG_CASING: {\n            number: 409,\n            message: \"Trying to import %imported% from %from%, but it has an incorrect casing.\",\n            title: \"Invalid import: wrong file casing\",\n            description: `A Solidity file is trying to import a file but its source name casing was wrong.\n\nHardhat's compiler is case sensitive to ensure projects are portable across different operating systems.`,\n            shouldBeReported: false,\n        },\n        WRONG_SOURCE_NAME_CASING: {\n            number: 410,\n            message: \"Trying to resolve the file %incorrect% but its correct case-sensitive name is %correct%\",\n            title: \"Incorrect source name casing\",\n            description: `You tried to resolve a Solidity file with an incorrect casing.\n\nHardhat's compiler is case sensitive to ensure projects are portable across different operating systems.`,\n            shouldBeReported: false,\n        },\n        IMPORTED_LIBRARY_NOT_INSTALLED: {\n            number: 411,\n            message: \"The library %library%, imported from %from%, is not installed. Try installing it using npm.\",\n            title: \"Invalid import: library not installed\",\n            description: `A Solidity file is trying to import another which belongs to a library that is not installed.\n\nTry installing the library using npm.`,\n            shouldBeReported: false,\n        },\n        INCLUDES_OWN_PACKAGE_NAME: {\n            number: 412,\n            message: \"Invalid import %imported% from %from%. Trying to import file using the own package's name.\",\n            title: \"Invalid import: includes own package's name\",\n            description: `A Solidity file is trying to import another using its own package name. This is most likely caused by an existing symlink for the package in your node_modules.\n\nUse a relative import instead of referencing the package's name.`,\n            shouldBeReported: false,\n        },\n        IMPORTED_MAPPED_FILE_NOT_FOUND: {\n            number: 413,\n            message: \"File %importName% => %imported%, imported from %from%, not found.\",\n            title: \"Imported mapped file not found\",\n            description: `One of your source files imported a nonexistent or not installed file.\n\nPlease double check your imports and installed libraries.`,\n            shouldBeReported: false,\n        },\n        INVALID_IMPORT_OF_DIRECTORY: {\n            number: 414,\n            message: \"Invalid import %imported% from %from%. Attempting to import a directory. Directories cannot be imported.\",\n            title: \"Invalid import: a directory cannot be imported\",\n            description: `A Solidity file is attempting to import a directory, which is not possible.\n\nPlease double check your imports.`,\n            shouldBeReported: false,\n        },\n        AMBIGUOUS_SOURCE_NAMES: {\n            number: 415,\n            message: \"Two different source names (%sourcenames%) resolve to the same file (%file%).\",\n            title: \"Ambiguous source names\",\n            description: `Two different source names map to the same file.\n\nThis is probably caused by multiple remappings pointing to the same source file.`,\n            shouldBeReported: false,\n        },\n    },\n    SOLC: {\n        INVALID_VERSION: {\n            number: 500,\n            message: `Solidity version %version% is invalid or hasn't been released yet.\n\nIf you are certain it has been released, run \"npx hardhat clean --global\" and try again`,\n            title: \"Invalid or unreleased `solc` version\",\n            description: `The Solidity version in your config is invalid or hasn't been released yet.\n\nIf you are certain it has been released, run \\`npx hardhat clean --global\\` and try again.`,\n            shouldBeReported: false,\n        },\n        DOWNLOAD_FAILED: {\n            number: 501,\n            message: \"Couldn't download compiler version %remoteVersion%. Please check your internet connection and try again.\",\n            title: \"`solc` download failed\",\n            description: `Couldn't download \\`solc\\`.\n\nPlease check your internet connection and try again.`,\n            shouldBeReported: false,\n        },\n        VERSION_LIST_DOWNLOAD_FAILED: {\n            number: 502,\n            message: \"Couldn't download compiler version list. Please check your internet connection and try again.\",\n            title: \"Couldn't obtain `solc` version list\",\n            description: `Couldn't download \\`solc\\`'s version list.\n\nPlease check your internet connection and try again.`,\n            shouldBeReported: false,\n        },\n        INVALID_DOWNLOAD: {\n            number: 503,\n            message: `Couldn't download compiler version %remoteVersion%: Checksum verification failed.\n\nPlease check your internet connection and try again.\n\nIf this error persists, run \"npx hardhat clean --global\".`,\n            title: \"Downloaded `solc` checksum verification failed\",\n            description: `Hardhat downloaded a version of the Solidity compiler, and its checksum verification failed.\n\nPlease check your internet connection and try again.\n\nIf this error persists, run \\`npx hardhat clean --global\\`.`,\n            shouldBeReported: false,\n        },\n        CANT_GET_COMPILER: {\n            number: 504,\n            message: \"The solc compiler couldn't be obtained for version %version%\",\n            title: \"The solc compiler couldn't be obtained\",\n            description: `Hardhat couldn't obtain a valid solc compiler.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        CANT_RUN_NATIVE_COMPILER: {\n            number: 505,\n            message: `A native version of solc failed to run.\n\nIf you are running MacOS, try installing Apple Rosetta.\n\nIf this error persists, run \"npx hardhat clean --global\".`,\n            title: \"Failed to run native solc\",\n            description: `Hardhat successfully downloaded a native version of solc but it doesn't run.\n\nIf you are running MacOS, try installing Apple Rosetta.\n\nIf this error persists, run \"npx hardhat clean --global\".`,\n            shouldBeReported: false,\n        },\n        SOLCJS_ERROR: {\n            number: 506,\n            message: \"Error running solcjs: %error%\",\n            title: \"Error running solcjs\",\n            description: `There was an error while running the solcjs compiler.`,\n            shouldBeReported: false,\n        },\n    },\n    BUILTIN_TASKS: {\n        COMPILE_FAILURE: {\n            number: 600,\n            message: \"Compilation failed\",\n            title: \"Compilation failed\",\n            description: `Your smart contracts failed to compile.\n\nPlease check Hardhat's output for more details.`,\n            shouldBeReported: false,\n        },\n        RUN_FILE_NOT_FOUND: {\n            number: 601,\n            message: \"Script %script% doesn't exist.\",\n            title: \"Script doesn't exist\",\n            description: `Tried to use \\`hardhat run\\` to execute a nonexistent script.\n\nPlease double check your script's path.`,\n            shouldBeReported: false,\n        },\n        RUN_SCRIPT_ERROR: {\n            number: 602,\n            message: \"Error running script {%script%}: %error%\",\n            title: \"Error running script\",\n            description: `Running a script resulted in an error.\n\nPlease check Hardhat's output for more details.`,\n            shouldBeReported: false,\n        },\n        FLATTEN_CYCLE: {\n            number: 603,\n            message: \"Hardhat flatten doesn't support cyclic dependencies.\",\n            title: \"Flatten detected cyclic dependencies\",\n            description: `Hardhat flatten doesn't support cyclic dependencies.\n\nWe recommend not using this kind of dependency.`,\n            shouldBeReported: false,\n        },\n        JSONRPC_SERVER_ERROR: {\n            number: 604,\n            message: \"Error running JSON-RPC server: %error%\",\n            title: \"Error running JSON-RPC server\",\n            description: `There was an error while starting the JSON-RPC HTTP server.`,\n            shouldBeReported: false,\n        },\n        JSONRPC_UNSUPPORTED_NETWORK: {\n            number: 605,\n            message: \"Unsupported network for JSON-RPC server. Only hardhat is currently supported.\",\n            title: \"Unsupported network for JSON-RPC server.\",\n            description: `JSON-RPC server can only be started when running the Hardhat Network.\n\nTo start the JSON-RPC server, retry the command without the --network parameter.`,\n            shouldBeReported: false,\n        },\n        COMPILATION_JOBS_CREATION_FAILURE: {\n            number: 606,\n            message: `The project cannot be compiled, see reasons below.\n\n%reasons%`,\n            title: \"The project cannot be compiled\",\n            description: `The project cannot be compiled with the current settings.`,\n            shouldBeReported: false,\n        },\n        NODE_FORK_BLOCK_NUMBER_WITHOUT_URL: {\n            number: 607,\n            message: `You specified a fork block number but not an URL.`,\n            title: \"Missing fork URL\",\n            description: `You passed a block number to fork from, but not a URL. Hardhat cannot fork\nif the URL of the JSON-RPC wasn't set.`,\n            shouldBeReported: false,\n        },\n        COMPILE_TASK_UNSUPPORTED_SOLC_VERSION: {\n            number: 608,\n            message: `Version %version% is not supported by Hardhat.\n\nThe first supported version is %firstSupportedVersion%`,\n            title: \"Unsupported solc version\",\n            description: `This version of solidity is not supported by Hardhat.\nPlease use a newer, supported version.`,\n            shouldBeReported: true,\n        },\n        TEST_TASK_ESM_TESTS_RUN_TWICE: {\n            number: 609,\n            message: `Your project uses ESM and you've programmatically run your tests twice. This is not supported yet.`,\n            title: \"Running tests twice in an ESM project\",\n            description: 'You have run your tests twice programmatically and your project is an ESM project (you have `\"type\": \"module\"` in your `package.json`, or some of your files have the `.mjs` extension). This is not supported by Mocha yet.',\n            shouldBeReported: true,\n        },\n    },\n    ARTIFACTS: {\n        NOT_FOUND: {\n            number: 700,\n            message: 'Artifact for contract \"%contractName%\" not found. %suggestion%',\n            title: \"Artifact not found\",\n            description: `Tried to import a nonexistent artifact.\n\nPlease double check that your contracts have been compiled and double check your artifact's name.`,\n            shouldBeReported: false,\n        },\n        MULTIPLE_FOUND: {\n            number: 701,\n            message: `There are multiple artifacts for contract \"%contractName%\", please use a fully qualified name.\n\nPlease replace %contractName% for one of these options wherever you are trying to read its artifact:\n\n%candidates%\n`,\n            title: \"Multiple artifacts found\",\n            description: `There are multiple artifacts that match the given contract name, and Hardhat doesn't know which one to use.\n\nPlease use the fully qualified name of the contract to disambiguate it.`,\n            shouldBeReported: false,\n        },\n        WRONG_CASING: {\n            number: 702,\n            message: \"Invalid artifact path %incorrect%, its correct case-sensitive path is %correct%\",\n            title: \"Incorrect artifact path casing\",\n            description: `You tried to get an artifact file with an incorrect casing.\n\nHardhat's artifact resolution is case sensitive to ensure projects are portable across different operating systems.`,\n            shouldBeReported: true,\n        },\n    },\n    PLUGINS: {\n        BUIDLER_PLUGIN: {\n            number: 800,\n            message: `You are using %plugin%, which is a Buidler plugin. Use the equivalent\nHardhat plugin instead.`,\n            title: \"Using a buidler plugin\",\n            description: `You are trying to use a Buidler plugin in Hardhat. This is not supported.\n\nPlease use the equivalent Hardhat plugin instead.`,\n            shouldBeReported: false,\n        },\n        MISSING_DEPENDENCIES: {\n            number: 801,\n            message: `Plugin %plugin% requires the following dependencies to be installed: %missingDependencies%.\nPlease run: npm install --save-dev %missingDependenciesVersions%`,\n            title: \"Plugin dependencies not installed\",\n            description: `You are trying to use a plugin with unmet dependencies.\n\nPlease follow Hardhat's instructions to resolve this.`,\n            shouldBeReported: false,\n        },\n    },\n    INTERNAL: {\n        TEMPLATE_INVALID_VARIABLE_NAME: {\n            number: 900,\n            message: \"Variable names can only include ascii letters and numbers, and start with a letter, but got %variable%\",\n            title: \"Invalid error message template\",\n            description: `An error message template contains an invalid variable name. This is a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        TEMPLATE_VALUE_CONTAINS_VARIABLE_TAG: {\n            number: 901,\n            message: \"Template values can't include variable tags, but %variable%'s value includes one\",\n            title: \"Invalid error message replacement\",\n            description: `Tried to replace an error message variable with a value that contains another variable name. This is a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        TEMPLATE_VARIABLE_TAG_MISSING: {\n            number: 902,\n            message: \"Variable %variable%'s tag not present in the template\",\n            title: \"Missing replacement value from error message template\",\n            description: `An error message template is missing a replacement value. This is a bug.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n        WRONG_ARTIFACT_PATH: {\n            number: 903,\n            message: \"The inferred artifact path for contract %contractName% is %artifactPath%, but this file doesn't exist\",\n            title: \"Inferred artifact path doesn't exist\",\n            description: `The inferred artifact path doesn't exist.\n\nPlease [report it](https://github.com/nomiclabs/hardhat/issues/new) to help us improve Hardhat.`,\n            shouldBeReported: true,\n        },\n    },\n    SOURCE_NAMES: {\n        INVALID_SOURCE_NAME_ABSOLUTE_PATH: {\n            number: 1000,\n            message: \"Invalid source name %name%. Expected source name but found an absolute path.\",\n            title: \"Invalid source name: absolute path\",\n            description: `A Solidity source name was expected, but an absolute path was given.\n\nIf you aren't overriding compilation-related tasks, please report this as a bug.`,\n            shouldBeReported: true,\n        },\n        INVALID_SOURCE_NAME_RELATIVE_PATH: {\n            number: 1001,\n            message: \"Invalid source name %name%. Expected source name but found a relative path.\",\n            title: \"Invalid source name: relative path\",\n            description: `A Solidity source name was expected, but a relative path was given.\n\nIf you aren't overriding compilation-related tasks, please report this as a bug.`,\n            shouldBeReported: true,\n        },\n        INVALID_SOURCE_NAME_BACKSLASHES: {\n            number: 1002,\n            message: \"Invalid source %name%. The source name uses backslashes (\\\\) instead of slashes (/).\",\n            title: \"Invalid source name: backslashes\",\n            description: `A Solidity source name was invalid because it uses backslashes (\\\\\\\\) instead of slashes (/).\n\nIf you aren't overriding compilation-related tasks, please report this as a bug.`,\n            shouldBeReported: true,\n        },\n        INVALID_SOURCE_NOT_NORMALIZED: {\n            number: 1003,\n            message: \"Invalid source name %name%. Source names must be normalized\",\n            title: \"Invalid source name: not normalized\",\n            description: `A Solidity source name was invalid because it wasn't normalized. It probably contains some \".\" or \"..\".\n\nIf you aren't overriding compilation-related tasks, please report this as a bug.`,\n            shouldBeReported: true,\n        },\n        WRONG_CASING: {\n            number: 1004,\n            message: \"Invalid source map %incorrect%, its correct case-sensitive source name is %correct%\",\n            title: \"Incorrect source name casing\",\n            description: `You tried to resolve a Solidity file with an incorrect casing.\n\nHardhat's compiler is case sensitive to ensure projects are portable across different operating systems.`,\n            shouldBeReported: true,\n        },\n        FILE_NOT_FOUND: {\n            number: 1005,\n            message: \"Solidity source file %name% not found\",\n            title: \"Solidity source file not found\",\n            description: `A source name should correspond to an existing Solidity file but it doesn't.\n\nHardhat's compiler is case sensitive to ensure projects are portable across different operating systems.`,\n            shouldBeReported: true,\n        },\n        NODE_MODULES_AS_LOCAL: {\n            number: 1006,\n            message: \"The file %path% is treated as local but is inside a node_modules directory\",\n            title: \"File from node_modules treated as local\",\n            description: `A file was treated as local but is inside a node_modules directory.\n\nIf you aren't overriding compilation-related tasks, please report this as a bug.`,\n            shouldBeReported: true,\n        },\n        EXTERNAL_AS_LOCAL: {\n            number: 1007,\n            message: \"The file %path% is treated as local but is outside the project\",\n            title: \"File from outside the project treated as local\",\n            description: `A file was treated as local but is outside the project.\n\nIf you aren't overriding compilation-related tasks, please report this as a bug.`,\n            shouldBeReported: true,\n        },\n    },\n    CONTRACT_NAMES: {\n        INVALID_FULLY_QUALIFIED_NAME: {\n            number: 1100,\n            message: \"Invalid fully qualified contract name %name%.\",\n            title: \"Invalid fully qualified contract name\",\n            description: `A contract name was expected to be in fully qualified form, but it's not.\n\nA fully qualified name should look like file.sol:Contract`,\n            shouldBeReported: false,\n        },\n    },\n    VARS: {\n        ONLY_MANAGED_IN_CLI: {\n            number: 1200,\n            title: \"Configuration variables can only be managed from the CLI\",\n            message: \"Configuration variables can only be managed from the CLI. They cannot be modified programmatically.\",\n            description: `Configuration variables can only be managed from the CLI. They cannot be modified programmatically.`,\n            shouldBeReported: false,\n        },\n        VALUE_NOT_FOUND_FOR_VAR: {\n            number: 1201,\n            title: \"Configuration variable is not set\",\n            message: \"Cannot find a value for the configuration variable '%value%'. Use 'npx hardhat vars set %value%' to set it or 'npx hardhat vars setup' to list all the configuration variables used by this project.\",\n            description: `Cannot find a value for a mandatory configuration variable.\n\nUse 'npx hardhat vars set VAR' to set it or 'npx hardhat vars setup' to list all the configuration variables used by this project.`,\n            shouldBeReported: false,\n        },\n        INVALID_CONFIG_VAR_NAME: {\n            number: 1202,\n            title: \"Invalid name for a configuration variable\",\n            message: \"Invalid name for a configuration variable: '%value%'. Configuration variables can only have alphanumeric characters and underscores, and they cannot start with a number.\",\n            description: `Invalid name for a configuration variable.\n\nConfiguration variables can only have alphanumeric characters and underscores, and they cannot start with a number.`,\n            shouldBeReported: false,\n        },\n        INVALID_EMPTY_VALUE: {\n            number: 1203,\n            title: \"Invalid empty value for configuration variable\",\n            message: \"A configuration variable cannot have an empty value.\",\n            description: \"A configuration variable cannot have an empty value.\",\n            shouldBeReported: false,\n        },\n    },\n};\n/**\n * Setting the type of ERRORS to a map let us access undefined ones. Letting it\n * be a literal doesn't enforce that its values are of type ErrorDescriptor.\n *\n * We let it be a literal, and use this variable to enforce the types\n */\nconst _PHONY_VARIABLE_TO_FORCE_ERRORS_TO_BE_OF_TYPE_ERROR_DESCRIPTOR = exports.ERRORS;\n//# sourceMappingURL=errors-list.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/errors-list.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/hardhat/internal/core/errors.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertHardhatInvariant = exports.applyErrorMessageTemplate = exports.NomicLabsHardhatPluginError = exports.HardhatPluginError = exports.HardhatError = exports.CustomError = void 0;\nconst caller_package_1 = __webpack_require__(/*! ../util/caller-package */ \"(ssr)/./node_modules/hardhat/internal/util/caller-package.js\");\nconst strings_1 = __webpack_require__(/*! ../util/strings */ \"(ssr)/./node_modules/hardhat/internal/util/strings.js\");\nconst errors_list_1 = __webpack_require__(/*! ./errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\nclass CustomError extends Error {\n    constructor(message, parent) {\n        // WARNING: Using super when extending a builtin class doesn't work well\n        // with TS if you are compiling to a version of JavaScript that doesn't have\n        // native classes. We don't do that in Hardhat.\n        //\n        // For more info about this, take a look at: https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        super(message);\n        this.parent = parent;\n        this.name = this.constructor.name;\n        // We do this to avoid including the constructor in the stack trace\n        if (Error.captureStackTrace !== undefined) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this._stack = this.stack ?? \"\";\n        Object.defineProperty(this, \"stack\", {\n            get: () => this[inspect](),\n        });\n    }\n    [inspect]() {\n        let str = this._stack;\n        if (this.parent !== undefined) {\n            const parentAsAny = this.parent;\n            const causeString = parentAsAny[inspect]?.() ??\n                parentAsAny.inspect?.() ??\n                parentAsAny.stack ??\n                parentAsAny.toString();\n            const nestedCauseStr = causeString\n                .split(\"\\n\")\n                .map((line) => `    ${line}`)\n                .join(\"\\n\")\n                .trim();\n            str += `\n\n    Caused by: ${nestedCauseStr}`;\n        }\n        return str;\n    }\n}\nexports.CustomError = CustomError;\nclass HardhatError extends CustomError {\n    static isHardhatError(other) {\n        return (other !== undefined && other !== null && other._isHardhatError === true);\n    }\n    static isHardhatErrorType(other, descriptor) {\n        return (HardhatError.isHardhatError(other) &&\n            other.errorDescriptor.number === descriptor.number);\n    }\n    constructor(errorDescriptor, messageArguments = {}, parentError) {\n        const prefix = `${(0, errors_list_1.getErrorCode)(errorDescriptor)}: `;\n        const formattedMessage = applyErrorMessageTemplate(errorDescriptor.message, messageArguments);\n        super(prefix + formattedMessage, parentError);\n        this.errorDescriptor = errorDescriptor;\n        this.number = errorDescriptor.number;\n        this.messageArguments = messageArguments;\n        this._isHardhatError = true;\n        Object.setPrototypeOf(this, HardhatError.prototype);\n    }\n}\nexports.HardhatError = HardhatError;\n/**\n * This class is used to throw errors from hardhat plugins made by third parties.\n */\nclass HardhatPluginError extends CustomError {\n    static isHardhatPluginError(other) {\n        return (other !== undefined &&\n            other !== null &&\n            other._isHardhatPluginError === true);\n    }\n    constructor(pluginNameOrMessage, messageOrParent, parent) {\n        if (typeof messageOrParent === \"string\") {\n            super(messageOrParent, parent);\n            this.pluginName = pluginNameOrMessage;\n        }\n        else {\n            super(pluginNameOrMessage, messageOrParent);\n            this.pluginName = (0, caller_package_1.getClosestCallerPackage)();\n        }\n        this._isHardhatPluginError = true;\n        Object.setPrototypeOf(this, HardhatPluginError.prototype);\n    }\n}\nexports.HardhatPluginError = HardhatPluginError;\nclass NomicLabsHardhatPluginError extends HardhatPluginError {\n    static isNomicLabsHardhatPluginError(other) {\n        return (other !== undefined &&\n            other !== null &&\n            other._isNomicLabsHardhatPluginError === true);\n    }\n    /**\n     * This class is used to throw errors from *core* hardhat plugins. If you are\n     * developing a third-party plugin, use HardhatPluginError instead.\n     */\n    constructor(pluginName, message, parent, shouldBeReported = false) {\n        super(pluginName, message, parent);\n        this.shouldBeReported = shouldBeReported;\n        this._isNomicLabsHardhatPluginError = true;\n        Object.setPrototypeOf(this, NomicLabsHardhatPluginError.prototype);\n    }\n}\nexports.NomicLabsHardhatPluginError = NomicLabsHardhatPluginError;\n/**\n * This function applies error messages templates like this:\n *\n *  - Template is a string which contains a variable tags. A variable tag is a\n *    a variable name surrounded by %. Eg: %plugin1%\n *  - A variable name is a string of alphanumeric ascii characters.\n *  - Every variable tag is replaced by its value.\n *  - %% is replaced by %.\n *  - Values can't contain variable tags.\n *  - If a variable is not present in the template, but present in the values\n *    object, an error is thrown.\n *\n * @param template The template string.\n * @param values A map of variable names to their values.\n */\nfunction applyErrorMessageTemplate(template, values) {\n    return _applyErrorMessageTemplate(template, values, false);\n}\nexports.applyErrorMessageTemplate = applyErrorMessageTemplate;\nfunction _applyErrorMessageTemplate(template, values, isRecursiveCall) {\n    if (!isRecursiveCall) {\n        for (const variableName of Object.keys(values)) {\n            if (variableName.match(/^[a-zA-Z][a-zA-Z0-9]*$/) === null) {\n                throw new HardhatError(errors_list_1.ERRORS.INTERNAL.TEMPLATE_INVALID_VARIABLE_NAME, {\n                    variable: variableName,\n                });\n            }\n            const variableTag = `%${variableName}%`;\n            if (!template.includes(variableTag)) {\n                throw new HardhatError(errors_list_1.ERRORS.INTERNAL.TEMPLATE_VARIABLE_TAG_MISSING, {\n                    variable: variableName,\n                });\n            }\n        }\n    }\n    if (template.includes(\"%%\")) {\n        return template\n            .split(\"%%\")\n            .map((part) => _applyErrorMessageTemplate(part, values, true))\n            .join(\"%\");\n    }\n    for (const variableName of Object.keys(values)) {\n        let value;\n        if (values[variableName] === undefined) {\n            value = \"undefined\";\n        }\n        else if (values[variableName] === null) {\n            value = \"null\";\n        }\n        else {\n            value = values[variableName].toString();\n        }\n        if (value === undefined) {\n            value = \"undefined\";\n        }\n        const variableTag = `%${variableName}%`;\n        if (value.match(/%([a-zA-Z][a-zA-Z0-9]*)?%/) !== null) {\n            throw new HardhatError(errors_list_1.ERRORS.INTERNAL.TEMPLATE_VALUE_CONTAINS_VARIABLE_TAG, { variable: variableName });\n        }\n        template = (0, strings_1.replaceAll)(template, variableTag, value);\n    }\n    return template;\n}\nfunction assertHardhatInvariant(invariant, message) {\n    if (!invariant) {\n        throw new HardhatError(errors_list_1.ERRORS.GENERAL.ASSERTION_ERROR, { message });\n    }\n}\nexports.assertHardhatInvariant = assertHardhatInvariant;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/execution-mode.js":
/*!**************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/execution-mode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isRunningHardhatCoreTests = exports.isLocalDev = exports.isHardhatInstalledLocallyOrLinked = void 0;\nconst packageInfo_1 = __webpack_require__(/*! ../util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst fs_utils_1 = __webpack_require__(/*! ../util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\n/**\n * Returns true if Hardhat is installed locally or linked from its repository,\n * by looking for it using the node module resolution logic.\n *\n * If a config file is provided, we start looking for it from it. Otherwise,\n * we use the current working directory.\n */\nfunction isHardhatInstalledLocallyOrLinked(configPath) {\n    try {\n        const resolvedPackageJson = __webpack_require__(\"(ssr)/./node_modules/hardhat/internal/core sync recursive\").resolve(\"hardhat/package.json\", {\n            paths: [configPath ?? process.cwd()],\n        });\n        const thisPackageJson = (0, packageInfo_1.getPackageJsonPath)();\n        // We need to get the realpaths here, as hardhat may be linked and\n        // running with `node --preserve-symlinks`\n        return ((0, fs_utils_1.getRealPathSync)(resolvedPackageJson) === (0, fs_utils_1.getRealPathSync)(thisPackageJson));\n    }\n    catch {\n        return false;\n    }\n}\nexports.isHardhatInstalledLocallyOrLinked = isHardhatInstalledLocallyOrLinked;\n/**\n * Checks whether we're using Hardhat in development mode (that is, we're working _on_ Hardhat).\n */\nfunction isLocalDev() {\n    // TODO: This may give a false positive under yarn PnP\n    return isRunningHardhatCoreTests() || !__filename.includes(\"node_modules\");\n}\nexports.isLocalDev = isLocalDev;\nfunction isRunningHardhatCoreTests() {\n    return __filename.endsWith(\".ts\");\n}\nexports.isRunningHardhatCoreTests = isRunningHardhatCoreTests;\n//# sourceMappingURL=execution-mode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL2V4ZWN1dGlvbi1tb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQyxHQUFHLGtCQUFrQixHQUFHLHlDQUF5QztBQUNsRyxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBcUI7QUFDbkQsbUJBQW1CLG1CQUFPLENBQUMsZ0ZBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxnRkFBTztBQUMzQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2NvcmUvZXhlY3V0aW9uLW1vZGUuanM/OWYzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNSdW5uaW5nSGFyZGhhdENvcmVUZXN0cyA9IGV4cG9ydHMuaXNMb2NhbERldiA9IGV4cG9ydHMuaXNIYXJkaGF0SW5zdGFsbGVkTG9jYWxseU9yTGlua2VkID0gdm9pZCAwO1xuY29uc3QgcGFja2FnZUluZm9fMSA9IHJlcXVpcmUoXCIuLi91dGlsL3BhY2thZ2VJbmZvXCIpO1xuY29uc3QgZnNfdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2ZzLXV0aWxzXCIpO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgSGFyZGhhdCBpcyBpbnN0YWxsZWQgbG9jYWxseSBvciBsaW5rZWQgZnJvbSBpdHMgcmVwb3NpdG9yeSxcbiAqIGJ5IGxvb2tpbmcgZm9yIGl0IHVzaW5nIHRoZSBub2RlIG1vZHVsZSByZXNvbHV0aW9uIGxvZ2ljLlxuICpcbiAqIElmIGEgY29uZmlnIGZpbGUgaXMgcHJvdmlkZWQsIHdlIHN0YXJ0IGxvb2tpbmcgZm9yIGl0IGZyb20gaXQuIE90aGVyd2lzZSxcbiAqIHdlIHVzZSB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS5cbiAqL1xuZnVuY3Rpb24gaXNIYXJkaGF0SW5zdGFsbGVkTG9jYWxseU9yTGlua2VkKGNvbmZpZ1BhdGgpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNvbHZlZFBhY2thZ2VKc29uID0gcmVxdWlyZS5yZXNvbHZlKFwiaGFyZGhhdC9wYWNrYWdlLmpzb25cIiwge1xuICAgICAgICAgICAgcGF0aHM6IFtjb25maWdQYXRoID8/IHByb2Nlc3MuY3dkKCldLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdGhpc1BhY2thZ2VKc29uID0gKDAsIHBhY2thZ2VJbmZvXzEuZ2V0UGFja2FnZUpzb25QYXRoKSgpO1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGdldCB0aGUgcmVhbHBhdGhzIGhlcmUsIGFzIGhhcmRoYXQgbWF5IGJlIGxpbmtlZCBhbmRcbiAgICAgICAgLy8gcnVubmluZyB3aXRoIGBub2RlIC0tcHJlc2VydmUtc3ltbGlua3NgXG4gICAgICAgIHJldHVybiAoKDAsIGZzX3V0aWxzXzEuZ2V0UmVhbFBhdGhTeW5jKShyZXNvbHZlZFBhY2thZ2VKc29uKSA9PT0gKDAsIGZzX3V0aWxzXzEuZ2V0UmVhbFBhdGhTeW5jKSh0aGlzUGFja2FnZUpzb24pKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5pc0hhcmRoYXRJbnN0YWxsZWRMb2NhbGx5T3JMaW5rZWQgPSBpc0hhcmRoYXRJbnN0YWxsZWRMb2NhbGx5T3JMaW5rZWQ7XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHdlJ3JlIHVzaW5nIEhhcmRoYXQgaW4gZGV2ZWxvcG1lbnQgbW9kZSAodGhhdCBpcywgd2UncmUgd29ya2luZyBfb25fIEhhcmRoYXQpLlxuICovXG5mdW5jdGlvbiBpc0xvY2FsRGV2KCkge1xuICAgIC8vIFRPRE86IFRoaXMgbWF5IGdpdmUgYSBmYWxzZSBwb3NpdGl2ZSB1bmRlciB5YXJuIFBuUFxuICAgIHJldHVybiBpc1J1bm5pbmdIYXJkaGF0Q29yZVRlc3RzKCkgfHwgIV9fZmlsZW5hbWUuaW5jbHVkZXMoXCJub2RlX21vZHVsZXNcIik7XG59XG5leHBvcnRzLmlzTG9jYWxEZXYgPSBpc0xvY2FsRGV2O1xuZnVuY3Rpb24gaXNSdW5uaW5nSGFyZGhhdENvcmVUZXN0cygpIHtcbiAgICByZXR1cm4gX19maWxlbmFtZS5lbmRzV2l0aChcIi50c1wiKTtcbn1cbmV4cG9ydHMuaXNSdW5uaW5nSGFyZGhhdENvcmVUZXN0cyA9IGlzUnVubmluZ0hhcmRoYXRDb3JlVGVzdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRpb24tbW9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/execution-mode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/params/argumentTypes.js":
/*!********************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/params/argumentTypes.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.any = exports.json = exports.inputFile = exports.float = exports.bigint = exports.int = exports.boolean = exports.string = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\n/**\n * String type.\n *\n * Accepts any kind of string.\n */\nexports.string = {\n    name: \"string\",\n    parse: (argName, strValue) => strValue,\n    /**\n     * Check if argument value is of type \"string\"\n     *\n     * @param argName {string} argument's name - used for context in case of error.\n     * @param value {any} argument's value to validate.\n     *\n     * @throws HH301 if value is not of type \"string\"\n     */\n    validate: (argName, value) => {\n        const isString = typeof value === \"string\";\n        if (!isString) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value,\n                name: argName,\n                type: exports.string.name,\n            });\n        }\n    },\n};\n/**\n * Boolean type.\n *\n * Accepts only 'true' or 'false' (case-insensitive).\n * @throws HH301\n */\nexports.boolean = {\n    name: \"boolean\",\n    parse: (argName, strValue) => {\n        if (strValue.toLowerCase() === \"true\") {\n            return true;\n        }\n        if (strValue.toLowerCase() === \"false\") {\n            return false;\n        }\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n            value: strValue,\n            name: argName,\n            type: \"boolean\",\n        });\n    },\n    /**\n     * Check if argument value is of type \"boolean\"\n     *\n     * @param argName {string} argument's name - used for context in case of error.\n     * @param value {any} argument's value to validate.\n     *\n     * @throws HH301 if value is not of type \"boolean\"\n     */\n    validate: (argName, value) => {\n        const isBoolean = typeof value === \"boolean\";\n        if (!isBoolean) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value,\n                name: argName,\n                type: exports.boolean.name,\n            });\n        }\n    },\n};\n/**\n * Int type.\n * Accepts either a decimal string integer or hexadecimal string integer.\n * @throws HH301\n */\nexports.int = {\n    name: \"int\",\n    parse: (argName, strValue) => {\n        const decimalPattern = /^\\d+(?:[eE]\\d+)?$/;\n        const hexPattern = /^0[xX][\\dABCDEabcde]+$/;\n        if (strValue.match(decimalPattern) === null &&\n            strValue.match(hexPattern) === null) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value: strValue,\n                name: argName,\n                type: exports.int.name,\n            });\n        }\n        return Number(strValue);\n    },\n    /**\n     * Check if argument value is of type \"int\"\n     *\n     * @param argName {string} argument's name - used for context in case of error.\n     * @param value {any} argument's value to validate.\n     *\n     * @throws HH301 if value is not of type \"int\"\n     */\n    validate: (argName, value) => {\n        const isInt = Number.isInteger(value);\n        if (!isInt) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value,\n                name: argName,\n                type: exports.int.name,\n            });\n        }\n    },\n};\n/**\n * BigInt type.\n * Accepts either a decimal string integer or hexadecimal string integer.\n * @throws HH301\n */\nexports.bigint = {\n    name: \"bigint\",\n    parse: (argName, strValue) => {\n        const decimalPattern = /^\\d+(?:n)?$/;\n        const hexPattern = /^0[xX][\\dABCDEabcde]+$/;\n        if (strValue.match(decimalPattern) === null &&\n            strValue.match(hexPattern) === null) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value: strValue,\n                name: argName,\n                type: exports.bigint.name,\n            });\n        }\n        return BigInt(strValue.replace(\"n\", \"\"));\n    },\n    /**\n     * Check if argument value is of type \"bigint\".\n     *\n     * @param argName {string} argument's name - used for context in case of error.\n     * @param value {any} argument's value to validate.\n     *\n     * @throws HH301 if value is not of type \"bigint\"\n     */\n    validate: (argName, value) => {\n        const isBigInt = typeof value === \"bigint\";\n        if (!isBigInt) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value,\n                name: argName,\n                type: exports.bigint.name,\n            });\n        }\n    },\n};\n/**\n * Float type.\n * Accepts either a decimal string number or hexadecimal string number.\n * @throws HH301\n */\nexports.float = {\n    name: \"float\",\n    parse: (argName, strValue) => {\n        const decimalPattern = /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE]\\d+)?$/;\n        const hexPattern = /^0[xX][\\dABCDEabcde]+$/;\n        if (strValue.match(decimalPattern) === null &&\n            strValue.match(hexPattern) === null) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value: strValue,\n                name: argName,\n                type: exports.float.name,\n            });\n        }\n        return Number(strValue);\n    },\n    /**\n     * Check if argument value is of type \"float\".\n     * Both decimal and integer number values are valid.\n     *\n     * @param argName {string} argument's name - used for context in case of error.\n     * @param value {any} argument's value to validate.\n     *\n     * @throws HH301 if value is not of type \"number\"\n     */\n    validate: (argName, value) => {\n        const isFloatOrInteger = typeof value === \"number\" && !isNaN(value);\n        if (!isFloatOrInteger) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value,\n                name: argName,\n                type: exports.float.name,\n            });\n        }\n    },\n};\n/**\n * Input file type.\n * Accepts a path to a readable file..\n * @throws HH302\n */\nexports.inputFile = {\n    name: \"inputFile\",\n    parse(argName, strValue) {\n        try {\n            fs.accessSync(strValue, fs_extra_1.default.constants.R_OK);\n            const stats = fs.lstatSync(strValue);\n            if (stats.isDirectory()) {\n                // This is caught and encapsulated in a hardhat error.\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw new Error(`${strValue} is a directory, not a file`);\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_INPUT_FILE, {\n                    name: argName,\n                    value: strValue,\n                }, error);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n        return strValue;\n    },\n    /**\n     * Check if argument value is of type \"inputFile\"\n     * File string validation succeeds if it can be parsed, ie. is a valid accessible file dir\n     *\n     * @param argName {string} argument's name - used for context in case of error.\n     * @param value {any} argument's value to validate.\n     *\n     * @throws HH301 if value is not of type \"inputFile\"\n     */\n    validate: (argName, value) => {\n        try {\n            exports.inputFile.parse(argName, value);\n        }\n        catch (error) {\n            // the input value is considered invalid, throw error.\n            if (error instanceof Error) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                    value,\n                    name: argName,\n                    type: exports.inputFile.name,\n                }, error);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n    },\n};\nexports.json = {\n    name: \"json\",\n    parse(argName, strValue) {\n        try {\n            return JSON.parse(strValue);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_JSON_ARGUMENT, {\n                    param: argName,\n                    error: error.message,\n                }, error);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n    },\n    /**\n     * Check if argument value is of type \"json\". We consider everything except\n     * undefined to be json.\n     *\n     * @param argName {string} argument's name - used for context in case of error.\n     * @param value {any} argument's value to validate.\n     *\n     * @throws HH301 if value is not of type \"json\"\n     */\n    validate: (argName, value) => {\n        if (value === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_VALUE_FOR_TYPE, {\n                value,\n                name: argName,\n                type: exports.json.name,\n            });\n        }\n    },\n};\nexports.any = {\n    name: \"any\",\n    validate(_argName, _argumentValue) { },\n};\n//# sourceMappingURL=argumentTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/params/argumentTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/params/env-variables.js":
/*!********************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/params/env-variables.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getEnvHardhatArguments = exports.getEnvVariablesMap = exports.paramNameToEnvVariable = void 0;\nconst ArgumentsParser_1 = __webpack_require__(/*! ../../cli/ArgumentsParser */ \"(ssr)/./node_modules/hardhat/internal/cli/ArgumentsParser.js\");\nconst unsafe_1 = __webpack_require__(/*! ../../util/unsafe */ \"(ssr)/./node_modules/hardhat/internal/util/unsafe.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst HARDHAT_ENV_ARGUMENT_PREFIX = \"HARDHAT_\";\nfunction paramNameToEnvVariable(paramName) {\n    // We create it starting from the result of ArgumentsParser.paramNameToCLA\n    // so it's easier to explain and understand their equivalences.\n    return ArgumentsParser_1.ArgumentsParser.paramNameToCLA(paramName)\n        .replace(ArgumentsParser_1.ArgumentsParser.PARAM_PREFIX, HARDHAT_ENV_ARGUMENT_PREFIX)\n        .replace(/-/g, \"_\")\n        .toUpperCase();\n}\nexports.paramNameToEnvVariable = paramNameToEnvVariable;\nfunction getEnvVariablesMap(hardhatArguments) {\n    const values = {};\n    for (const [name, value] of Object.entries(hardhatArguments)) {\n        if (value === undefined) {\n            continue;\n        }\n        values[paramNameToEnvVariable(name)] = value.toString();\n    }\n    return values;\n}\nexports.getEnvVariablesMap = getEnvVariablesMap;\nfunction getEnvHardhatArguments(paramDefinitions, envVariables) {\n    const envArgs = {};\n    for (const paramName of (0, unsafe_1.unsafeObjectKeys)(paramDefinitions)) {\n        const definition = paramDefinitions[paramName];\n        const envVarName = paramNameToEnvVariable(paramName);\n        const rawValue = envVariables[envVarName];\n        if (rawValue !== undefined) {\n            try {\n                envArgs[paramName] = definition.type.parse(paramName, rawValue);\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE, {\n                        varName: envVarName,\n                        value: rawValue,\n                    }, error);\n                }\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw error;\n            }\n        }\n        else {\n            envArgs[paramName] = definition.defaultValue;\n        }\n    }\n    // TODO: This is a little type-unsafe, but we know we have all the needed arguments\n    return envArgs;\n}\nexports.getEnvHardhatArguments = getEnvHardhatArguments;\n//# sourceMappingURL=env-variables.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3BhcmFtcy9lbnYtdmFyaWFibGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QixHQUFHLDBCQUEwQixHQUFHLDhCQUE4QjtBQUM1RiwwQkFBMEIsbUJBQU8sQ0FBQywrRkFBMkI7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMsK0VBQW1CO0FBQzVDLGlCQUFpQixtQkFBTyxDQUFDLHVFQUFXO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLGlGQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3BhcmFtcy9lbnYtdmFyaWFibGVzLmpzPzk4YTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVudkhhcmRoYXRBcmd1bWVudHMgPSBleHBvcnRzLmdldEVudlZhcmlhYmxlc01hcCA9IGV4cG9ydHMucGFyYW1OYW1lVG9FbnZWYXJpYWJsZSA9IHZvaWQgMDtcbmNvbnN0IEFyZ3VtZW50c1BhcnNlcl8xID0gcmVxdWlyZShcIi4uLy4uL2NsaS9Bcmd1bWVudHNQYXJzZXJcIik7XG5jb25zdCB1bnNhZmVfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL3Vuc2FmZVwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IGVycm9yc19saXN0XzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzLWxpc3RcIik7XG5jb25zdCBIQVJESEFUX0VOVl9BUkdVTUVOVF9QUkVGSVggPSBcIkhBUkRIQVRfXCI7XG5mdW5jdGlvbiBwYXJhbU5hbWVUb0VudlZhcmlhYmxlKHBhcmFtTmFtZSkge1xuICAgIC8vIFdlIGNyZWF0ZSBpdCBzdGFydGluZyBmcm9tIHRoZSByZXN1bHQgb2YgQXJndW1lbnRzUGFyc2VyLnBhcmFtTmFtZVRvQ0xBXG4gICAgLy8gc28gaXQncyBlYXNpZXIgdG8gZXhwbGFpbiBhbmQgdW5kZXJzdGFuZCB0aGVpciBlcXVpdmFsZW5jZXMuXG4gICAgcmV0dXJuIEFyZ3VtZW50c1BhcnNlcl8xLkFyZ3VtZW50c1BhcnNlci5wYXJhbU5hbWVUb0NMQShwYXJhbU5hbWUpXG4gICAgICAgIC5yZXBsYWNlKEFyZ3VtZW50c1BhcnNlcl8xLkFyZ3VtZW50c1BhcnNlci5QQVJBTV9QUkVGSVgsIEhBUkRIQVRfRU5WX0FSR1VNRU5UX1BSRUZJWClcbiAgICAgICAgLnJlcGxhY2UoLy0vZywgXCJfXCIpXG4gICAgICAgIC50b1VwcGVyQ2FzZSgpO1xufVxuZXhwb3J0cy5wYXJhbU5hbWVUb0VudlZhcmlhYmxlID0gcGFyYW1OYW1lVG9FbnZWYXJpYWJsZTtcbmZ1bmN0aW9uIGdldEVudlZhcmlhYmxlc01hcChoYXJkaGF0QXJndW1lbnRzKSB7XG4gICAgY29uc3QgdmFsdWVzID0ge307XG4gICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhhcmRoYXRBcmd1bWVudHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbcGFyYW1OYW1lVG9FbnZWYXJpYWJsZShuYW1lKV0gPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuZXhwb3J0cy5nZXRFbnZWYXJpYWJsZXNNYXAgPSBnZXRFbnZWYXJpYWJsZXNNYXA7XG5mdW5jdGlvbiBnZXRFbnZIYXJkaGF0QXJndW1lbnRzKHBhcmFtRGVmaW5pdGlvbnMsIGVudlZhcmlhYmxlcykge1xuICAgIGNvbnN0IGVudkFyZ3MgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHBhcmFtTmFtZSBvZiAoMCwgdW5zYWZlXzEudW5zYWZlT2JqZWN0S2V5cykocGFyYW1EZWZpbml0aW9ucykpIHtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHBhcmFtRGVmaW5pdGlvbnNbcGFyYW1OYW1lXTtcbiAgICAgICAgY29uc3QgZW52VmFyTmFtZSA9IHBhcmFtTmFtZVRvRW52VmFyaWFibGUocGFyYW1OYW1lKTtcbiAgICAgICAgY29uc3QgcmF3VmFsdWUgPSBlbnZWYXJpYWJsZXNbZW52VmFyTmFtZV07XG4gICAgICAgIGlmIChyYXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVudkFyZ3NbcGFyYW1OYW1lXSA9IGRlZmluaXRpb24udHlwZS5wYXJzZShwYXJhbU5hbWUsIHJhd1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuQVJHVU1FTlRTLklOVkFMSURfRU5WX1ZBUl9WQUxVRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyTmFtZTogZW52VmFyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByYXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQG5vbWljZm91bmRhdGlvbi9oYXJkaGF0LWludGVybmFsLXJ1bGVzL29ubHktaGFyZGhhdC1lcnJvclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZW52QXJnc1twYXJhbU5hbWVdID0gZGVmaW5pdGlvbi5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETzogVGhpcyBpcyBhIGxpdHRsZSB0eXBlLXVuc2FmZSwgYnV0IHdlIGtub3cgd2UgaGF2ZSBhbGwgdGhlIG5lZWRlZCBhcmd1bWVudHNcbiAgICByZXR1cm4gZW52QXJncztcbn1cbmV4cG9ydHMuZ2V0RW52SGFyZGhhdEFyZ3VtZW50cyA9IGdldEVudkhhcmRoYXRBcmd1bWVudHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnYtdmFyaWFibGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/params/env-variables.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/params/hardhat-params.js":
/*!*********************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/params/hardhat-params.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HARDHAT_PARAM_DEFINITIONS = void 0;\nconst types = __importStar(__webpack_require__(/*! ./argumentTypes */ \"(ssr)/./node_modules/hardhat/internal/core/params/argumentTypes.js\"));\nexports.HARDHAT_PARAM_DEFINITIONS = {\n    network: {\n        name: \"network\",\n        defaultValue: undefined,\n        description: \"The network to connect to.\",\n        type: types.string,\n        isOptional: true,\n        isFlag: false,\n        isVariadic: false,\n    },\n    showStackTraces: {\n        name: \"showStackTraces\",\n        defaultValue: false,\n        description: \"Show stack traces (always enabled on CI servers).\",\n        type: types.boolean,\n        isFlag: true,\n        isOptional: true,\n        isVariadic: false,\n    },\n    version: {\n        name: \"version\",\n        defaultValue: false,\n        description: \"Shows hardhat's version.\",\n        type: types.boolean,\n        isFlag: true,\n        isOptional: true,\n        isVariadic: false,\n    },\n    help: {\n        name: \"help\",\n        defaultValue: false,\n        description: \"Shows this message, or a task's help if its name is provided\",\n        type: types.boolean,\n        isFlag: true,\n        isOptional: true,\n        isVariadic: false,\n    },\n    emoji: {\n        name: \"emoji\",\n        defaultValue: process.platform === \"darwin\",\n        description: \"Use emoji in messages.\",\n        type: types.boolean,\n        isFlag: true,\n        isOptional: true,\n        isVariadic: false,\n    },\n    config: {\n        name: \"config\",\n        defaultValue: undefined,\n        description: \"A Hardhat config file.\",\n        type: types.inputFile,\n        isFlag: false,\n        isOptional: true,\n        isVariadic: false,\n    },\n    verbose: {\n        name: \"verbose\",\n        defaultValue: false,\n        description: \"Enables Hardhat verbose logging\",\n        type: types.boolean,\n        isFlag: true,\n        isOptional: true,\n        isVariadic: false,\n    },\n    maxMemory: {\n        name: \"maxMemory\",\n        defaultValue: undefined,\n        description: \"The maximum amount of memory that Hardhat can use.\",\n        type: types.int,\n        isOptional: true,\n        isFlag: false,\n        isVariadic: false,\n    },\n    tsconfig: {\n        name: \"tsconfig\",\n        defaultValue: undefined,\n        description: \"A TypeScript config file.\",\n        type: types.inputFile,\n        isOptional: true,\n        isFlag: false,\n        isVariadic: false,\n    },\n    flamegraph: {\n        name: \"flamegraph\",\n        defaultValue: undefined,\n        description: \"Generate a flamegraph of your Hardhat tasks\",\n        type: types.boolean,\n        isOptional: true,\n        isFlag: true,\n        isVariadic: false,\n    },\n    typecheck: {\n        name: \"typecheck\",\n        defaultValue: false,\n        description: \"Enable TypeScript type-checking of your scripts/tests\",\n        type: types.boolean,\n        isFlag: true,\n        isOptional: true,\n        isVariadic: false,\n    },\n};\n//# sourceMappingURL=hardhat-params.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3BhcmFtcy9oYXJkaGF0LXBhcmFtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLDJCQUEyQixtQkFBTyxDQUFDLDJGQUFpQjtBQUNwRCxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvY29yZS9wYXJhbXMvaGFyZGhhdC1wYXJhbXMuanM/YjdkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IQVJESEFUX1BBUkFNX0RFRklOSVRJT05TID0gdm9pZCAwO1xuY29uc3QgdHlwZXMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYXJndW1lbnRUeXBlc1wiKSk7XG5leHBvcnRzLkhBUkRIQVRfUEFSQU1fREVGSU5JVElPTlMgPSB7XG4gICAgbmV0d29yazoge1xuICAgICAgICBuYW1lOiBcIm5ldHdvcmtcIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBuZXR3b3JrIHRvIGNvbm5lY3QgdG8uXCIsXG4gICAgICAgIHR5cGU6IHR5cGVzLnN0cmluZyxcbiAgICAgICAgaXNPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgaXNGbGFnOiBmYWxzZSxcbiAgICAgICAgaXNWYXJpYWRpYzogZmFsc2UsXG4gICAgfSxcbiAgICBzaG93U3RhY2tUcmFjZXM6IHtcbiAgICAgICAgbmFtZTogXCJzaG93U3RhY2tUcmFjZXNcIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiU2hvdyBzdGFjayB0cmFjZXMgKGFsd2F5cyBlbmFibGVkIG9uIENJIHNlcnZlcnMpLlwiLFxuICAgICAgICB0eXBlOiB0eXBlcy5ib29sZWFuLFxuICAgICAgICBpc0ZsYWc6IHRydWUsXG4gICAgICAgIGlzT3B0aW9uYWw6IHRydWUsXG4gICAgICAgIGlzVmFyaWFkaWM6IGZhbHNlLFxuICAgIH0sXG4gICAgdmVyc2lvbjoge1xuICAgICAgICBuYW1lOiBcInZlcnNpb25cIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiU2hvd3MgaGFyZGhhdCdzIHZlcnNpb24uXCIsXG4gICAgICAgIHR5cGU6IHR5cGVzLmJvb2xlYW4sXG4gICAgICAgIGlzRmxhZzogdHJ1ZSxcbiAgICAgICAgaXNPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgaXNWYXJpYWRpYzogZmFsc2UsXG4gICAgfSxcbiAgICBoZWxwOiB7XG4gICAgICAgIG5hbWU6IFwiaGVscFwiLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJTaG93cyB0aGlzIG1lc3NhZ2UsIG9yIGEgdGFzaydzIGhlbHAgaWYgaXRzIG5hbWUgaXMgcHJvdmlkZWRcIixcbiAgICAgICAgdHlwZTogdHlwZXMuYm9vbGVhbixcbiAgICAgICAgaXNGbGFnOiB0cnVlLFxuICAgICAgICBpc09wdGlvbmFsOiB0cnVlLFxuICAgICAgICBpc1ZhcmlhZGljOiBmYWxzZSxcbiAgICB9LFxuICAgIGVtb2ppOiB7XG4gICAgICAgIG5hbWU6IFwiZW1vamlcIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBwcm9jZXNzLnBsYXRmb3JtID09PSBcImRhcndpblwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJVc2UgZW1vamkgaW4gbWVzc2FnZXMuXCIsXG4gICAgICAgIHR5cGU6IHR5cGVzLmJvb2xlYW4sXG4gICAgICAgIGlzRmxhZzogdHJ1ZSxcbiAgICAgICAgaXNPcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgaXNWYXJpYWRpYzogZmFsc2UsXG4gICAgfSxcbiAgICBjb25maWc6IHtcbiAgICAgICAgbmFtZTogXCJjb25maWdcIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgSGFyZGhhdCBjb25maWcgZmlsZS5cIixcbiAgICAgICAgdHlwZTogdHlwZXMuaW5wdXRGaWxlLFxuICAgICAgICBpc0ZsYWc6IGZhbHNlLFxuICAgICAgICBpc09wdGlvbmFsOiB0cnVlLFxuICAgICAgICBpc1ZhcmlhZGljOiBmYWxzZSxcbiAgICB9LFxuICAgIHZlcmJvc2U6IHtcbiAgICAgICAgbmFtZTogXCJ2ZXJib3NlXCIsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2UsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkVuYWJsZXMgSGFyZGhhdCB2ZXJib3NlIGxvZ2dpbmdcIixcbiAgICAgICAgdHlwZTogdHlwZXMuYm9vbGVhbixcbiAgICAgICAgaXNGbGFnOiB0cnVlLFxuICAgICAgICBpc09wdGlvbmFsOiB0cnVlLFxuICAgICAgICBpc1ZhcmlhZGljOiBmYWxzZSxcbiAgICB9LFxuICAgIG1heE1lbW9yeToge1xuICAgICAgICBuYW1lOiBcIm1heE1lbW9yeVwiLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVGhlIG1heGltdW0gYW1vdW50IG9mIG1lbW9yeSB0aGF0IEhhcmRoYXQgY2FuIHVzZS5cIixcbiAgICAgICAgdHlwZTogdHlwZXMuaW50LFxuICAgICAgICBpc09wdGlvbmFsOiB0cnVlLFxuICAgICAgICBpc0ZsYWc6IGZhbHNlLFxuICAgICAgICBpc1ZhcmlhZGljOiBmYWxzZSxcbiAgICB9LFxuICAgIHRzY29uZmlnOiB7XG4gICAgICAgIG5hbWU6IFwidHNjb25maWdcIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgVHlwZVNjcmlwdCBjb25maWcgZmlsZS5cIixcbiAgICAgICAgdHlwZTogdHlwZXMuaW5wdXRGaWxlLFxuICAgICAgICBpc09wdGlvbmFsOiB0cnVlLFxuICAgICAgICBpc0ZsYWc6IGZhbHNlLFxuICAgICAgICBpc1ZhcmlhZGljOiBmYWxzZSxcbiAgICB9LFxuICAgIGZsYW1lZ3JhcGg6IHtcbiAgICAgICAgbmFtZTogXCJmbGFtZWdyYXBoXCIsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJHZW5lcmF0ZSBhIGZsYW1lZ3JhcGggb2YgeW91ciBIYXJkaGF0IHRhc2tzXCIsXG4gICAgICAgIHR5cGU6IHR5cGVzLmJvb2xlYW4sXG4gICAgICAgIGlzT3B0aW9uYWw6IHRydWUsXG4gICAgICAgIGlzRmxhZzogdHJ1ZSxcbiAgICAgICAgaXNWYXJpYWRpYzogZmFsc2UsXG4gICAgfSxcbiAgICB0eXBlY2hlY2s6IHtcbiAgICAgICAgbmFtZTogXCJ0eXBlY2hlY2tcIixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZSxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRW5hYmxlIFR5cGVTY3JpcHQgdHlwZS1jaGVja2luZyBvZiB5b3VyIHNjcmlwdHMvdGVzdHNcIixcbiAgICAgICAgdHlwZTogdHlwZXMuYm9vbGVhbixcbiAgICAgICAgaXNGbGFnOiB0cnVlLFxuICAgICAgICBpc09wdGlvbmFsOiB0cnVlLFxuICAgICAgICBpc1ZhcmlhZGljOiBmYWxzZSxcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhcmRoYXQtcGFyYW1zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/params/hardhat-params.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/project-structure.js":
/*!*****************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/project-structure.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRecommendedGitIgnore = exports.getUserConfigPath = exports.isCwdInsideProject = void 0;\nconst find_up_1 = __importDefault(__webpack_require__(/*! find-up */ \"(ssr)/./node_modules/find-up/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst packageInfo_1 = __webpack_require__(/*! ../util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ./errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst JS_CONFIG_FILENAME = \"hardhat.config.js\";\nconst CJS_CONFIG_FILENAME = \"hardhat.config.cjs\";\nconst TS_CONFIG_FILENAME = \"hardhat.config.ts\";\nconst CTS_CONFIG_FILENAME = \"hardhat.config.cts\";\nfunction isCwdInsideProject() {\n    return (find_up_1.default.sync(TS_CONFIG_FILENAME) !== undefined ||\n        find_up_1.default.sync(CTS_CONFIG_FILENAME) !== undefined ||\n        find_up_1.default.sync(CJS_CONFIG_FILENAME) !== undefined ||\n        find_up_1.default.sync(JS_CONFIG_FILENAME) !== undefined);\n}\nexports.isCwdInsideProject = isCwdInsideProject;\nfunction getUserConfigPath() {\n    const tsConfigPath = find_up_1.default.sync(TS_CONFIG_FILENAME);\n    if (tsConfigPath !== undefined) {\n        return tsConfigPath;\n    }\n    const ctsConfigPath = find_up_1.default.sync(CTS_CONFIG_FILENAME);\n    if (ctsConfigPath !== undefined) {\n        return ctsConfigPath;\n    }\n    const cjsConfigPath = find_up_1.default.sync(CJS_CONFIG_FILENAME);\n    if (cjsConfigPath !== undefined) {\n        return cjsConfigPath;\n    }\n    const pathToConfigFile = find_up_1.default.sync(JS_CONFIG_FILENAME);\n    if (pathToConfigFile === undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.NOT_INSIDE_PROJECT);\n    }\n    return pathToConfigFile;\n}\nexports.getUserConfigPath = getUserConfigPath;\nasync function getRecommendedGitIgnore() {\n    const packageRoot = (0, packageInfo_1.getPackageRoot)();\n    const gitIgnorePath = path_1.default.join(packageRoot, \"recommended-gitignore.txt\");\n    return fs_extra_1.default.readFile(gitIgnorePath, \"utf-8\");\n}\nexports.getRecommendedGitIgnore = getRecommendedGitIgnore;\n//# sourceMappingURL=project-structure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Byb2plY3Qtc3RydWN0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcseUJBQXlCLEdBQUcsMEJBQTBCO0FBQ3hGLGtDQUFrQyxtQkFBTyxDQUFDLHNEQUFTO0FBQ25ELG1DQUFtQyxtQkFBTyxDQUFDLDREQUFVO0FBQ3JELCtCQUErQixtQkFBTyxDQUFDLGtCQUFNO0FBQzdDLHNCQUFzQixtQkFBTyxDQUFDLHNGQUFxQjtBQUNuRCxpQkFBaUIsbUJBQU8sQ0FBQyxzRUFBVTtBQUNuQyxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2NvcmUvcHJvamVjdC1zdHJ1Y3R1cmUuanM/YzZkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UmVjb21tZW5kZWRHaXRJZ25vcmUgPSBleHBvcnRzLmdldFVzZXJDb25maWdQYXRoID0gZXhwb3J0cy5pc0N3ZEluc2lkZVByb2plY3QgPSB2b2lkIDA7XG5jb25zdCBmaW5kX3VwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZpbmQtdXBcIikpO1xuY29uc3QgZnNfZXh0cmFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZnMtZXh0cmFcIikpO1xuY29uc3QgcGF0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcbmNvbnN0IHBhY2thZ2VJbmZvXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9wYWNrYWdlSW5mb1wiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgZXJyb3JzX2xpc3RfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy1saXN0XCIpO1xuY29uc3QgSlNfQ09ORklHX0ZJTEVOQU1FID0gXCJoYXJkaGF0LmNvbmZpZy5qc1wiO1xuY29uc3QgQ0pTX0NPTkZJR19GSUxFTkFNRSA9IFwiaGFyZGhhdC5jb25maWcuY2pzXCI7XG5jb25zdCBUU19DT05GSUdfRklMRU5BTUUgPSBcImhhcmRoYXQuY29uZmlnLnRzXCI7XG5jb25zdCBDVFNfQ09ORklHX0ZJTEVOQU1FID0gXCJoYXJkaGF0LmNvbmZpZy5jdHNcIjtcbmZ1bmN0aW9uIGlzQ3dkSW5zaWRlUHJvamVjdCgpIHtcbiAgICByZXR1cm4gKGZpbmRfdXBfMS5kZWZhdWx0LnN5bmMoVFNfQ09ORklHX0ZJTEVOQU1FKSAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIGZpbmRfdXBfMS5kZWZhdWx0LnN5bmMoQ1RTX0NPTkZJR19GSUxFTkFNRSkgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBmaW5kX3VwXzEuZGVmYXVsdC5zeW5jKENKU19DT05GSUdfRklMRU5BTUUpICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgZmluZF91cF8xLmRlZmF1bHQuc3luYyhKU19DT05GSUdfRklMRU5BTUUpICE9PSB1bmRlZmluZWQpO1xufVxuZXhwb3J0cy5pc0N3ZEluc2lkZVByb2plY3QgPSBpc0N3ZEluc2lkZVByb2plY3Q7XG5mdW5jdGlvbiBnZXRVc2VyQ29uZmlnUGF0aCgpIHtcbiAgICBjb25zdCB0c0NvbmZpZ1BhdGggPSBmaW5kX3VwXzEuZGVmYXVsdC5zeW5jKFRTX0NPTkZJR19GSUxFTkFNRSk7XG4gICAgaWYgKHRzQ29uZmlnUGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0c0NvbmZpZ1BhdGg7XG4gICAgfVxuICAgIGNvbnN0IGN0c0NvbmZpZ1BhdGggPSBmaW5kX3VwXzEuZGVmYXVsdC5zeW5jKENUU19DT05GSUdfRklMRU5BTUUpO1xuICAgIGlmIChjdHNDb25maWdQYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGN0c0NvbmZpZ1BhdGg7XG4gICAgfVxuICAgIGNvbnN0IGNqc0NvbmZpZ1BhdGggPSBmaW5kX3VwXzEuZGVmYXVsdC5zeW5jKENKU19DT05GSUdfRklMRU5BTUUpO1xuICAgIGlmIChjanNDb25maWdQYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNqc0NvbmZpZ1BhdGg7XG4gICAgfVxuICAgIGNvbnN0IHBhdGhUb0NvbmZpZ0ZpbGUgPSBmaW5kX3VwXzEuZGVmYXVsdC5zeW5jKEpTX0NPTkZJR19GSUxFTkFNRSk7XG4gICAgaWYgKHBhdGhUb0NvbmZpZ0ZpbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLkdFTkVSQUwuTk9UX0lOU0lERV9QUk9KRUNUKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGhUb0NvbmZpZ0ZpbGU7XG59XG5leHBvcnRzLmdldFVzZXJDb25maWdQYXRoID0gZ2V0VXNlckNvbmZpZ1BhdGg7XG5hc3luYyBmdW5jdGlvbiBnZXRSZWNvbW1lbmRlZEdpdElnbm9yZSgpIHtcbiAgICBjb25zdCBwYWNrYWdlUm9vdCA9ICgwLCBwYWNrYWdlSW5mb18xLmdldFBhY2thZ2VSb290KSgpO1xuICAgIGNvbnN0IGdpdElnbm9yZVBhdGggPSBwYXRoXzEuZGVmYXVsdC5qb2luKHBhY2thZ2VSb290LCBcInJlY29tbWVuZGVkLWdpdGlnbm9yZS50eHRcIik7XG4gICAgcmV0dXJuIGZzX2V4dHJhXzEuZGVmYXVsdC5yZWFkRmlsZShnaXRJZ25vcmVQYXRoLCBcInV0Zi04XCIpO1xufVxuZXhwb3J0cy5nZXRSZWNvbW1lbmRlZEdpdElnbm9yZSA9IGdldFJlY29tbWVuZGVkR2l0SWdub3JlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvamVjdC1zdHJ1Y3R1cmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/project-structure.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/providers/backwards-compatibility.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/providers/backwards-compatibility.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BackwardsCompatibilityProviderAdapter = void 0;\nconst util_1 = __importDefault(__webpack_require__(/*! util */ \"util\"));\nconst event_emitter_1 = __webpack_require__(/*! ../../util/event-emitter */ \"(ssr)/./node_modules/hardhat/internal/util/event-emitter.js\");\n/**\n * Hardhat predates the EIP1193 (Javascript Ethereum Provider) standard. It was\n * built following a draft of that spec, but then it changed completely. We\n * still need to support the draft api, but internally we use EIP1193. So we\n * use BackwardsCompatibilityProviderAdapter to wrap EIP1193 providers before\n * exposing them to the user.\n */\nclass BackwardsCompatibilityProviderAdapter extends event_emitter_1.EventEmitterWrapper {\n    constructor(_provider) {\n        super(_provider);\n        this._provider = _provider;\n        // We bind everything here because some test suits break otherwise\n        this.sendAsync = this.sendAsync.bind(this);\n        this.send = this.send.bind(this);\n        this._sendJsonRpcRequest = this._sendJsonRpcRequest.bind(this);\n    }\n    request(args) {\n        return this._provider.request(args);\n    }\n    send(method, params) {\n        return this._provider.request({ method, params });\n    }\n    sendAsync(payload, callback) {\n        util_1.default.callbackify(() => this._sendJsonRpcRequest(payload))(callback);\n    }\n    async _sendJsonRpcRequest(request) {\n        const response = {\n            id: request.id,\n            jsonrpc: \"2.0\",\n        };\n        try {\n            response.result = await this._provider.request({\n                method: request.method,\n                params: request.params,\n            });\n        }\n        catch (error) {\n            if (error.code === undefined) {\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw error;\n            }\n            response.error = {\n                // This might be a mistake, but I'm leaving it as is just in case,\n                // because it's not obvious what we should do here.\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                code: error.code ? +error.code : -1,\n                message: error.message,\n                data: {\n                    stack: error.stack,\n                    name: error.name,\n                },\n            };\n        }\n        return response;\n    }\n}\nexports.BackwardsCompatibilityProviderAdapter = BackwardsCompatibilityProviderAdapter;\n//# sourceMappingURL=backwards-compatibility.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Byb3ZpZGVycy9iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZDQUE2QztBQUM3QywrQkFBK0IsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3Qyx3QkFBd0IsbUJBQU8sQ0FBQyw2RkFBMEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvY29yZS9wcm92aWRlcnMvYmFja3dhcmRzLWNvbXBhdGliaWxpdHkuanM/NjI0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFja3dhcmRzQ29tcGF0aWJpbGl0eVByb3ZpZGVyQWRhcHRlciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwidXRpbFwiKSk7XG5jb25zdCBldmVudF9lbWl0dGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9ldmVudC1lbWl0dGVyXCIpO1xuLyoqXG4gKiBIYXJkaGF0IHByZWRhdGVzIHRoZSBFSVAxMTkzIChKYXZhc2NyaXB0IEV0aGVyZXVtIFByb3ZpZGVyKSBzdGFuZGFyZC4gSXQgd2FzXG4gKiBidWlsdCBmb2xsb3dpbmcgYSBkcmFmdCBvZiB0aGF0IHNwZWMsIGJ1dCB0aGVuIGl0IGNoYW5nZWQgY29tcGxldGVseS4gV2VcbiAqIHN0aWxsIG5lZWQgdG8gc3VwcG9ydCB0aGUgZHJhZnQgYXBpLCBidXQgaW50ZXJuYWxseSB3ZSB1c2UgRUlQMTE5My4gU28gd2VcbiAqIHVzZSBCYWNrd2FyZHNDb21wYXRpYmlsaXR5UHJvdmlkZXJBZGFwdGVyIHRvIHdyYXAgRUlQMTE5MyBwcm92aWRlcnMgYmVmb3JlXG4gKiBleHBvc2luZyB0aGVtIHRvIHRoZSB1c2VyLlxuICovXG5jbGFzcyBCYWNrd2FyZHNDb21wYXRpYmlsaXR5UHJvdmlkZXJBZGFwdGVyIGV4dGVuZHMgZXZlbnRfZW1pdHRlcl8xLkV2ZW50RW1pdHRlcldyYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKF9wcm92aWRlcikge1xuICAgICAgICBzdXBlcihfcHJvdmlkZXIpO1xuICAgICAgICB0aGlzLl9wcm92aWRlciA9IF9wcm92aWRlcjtcbiAgICAgICAgLy8gV2UgYmluZCBldmVyeXRoaW5nIGhlcmUgYmVjYXVzZSBzb21lIHRlc3Qgc3VpdHMgYnJlYWsgb3RoZXJ3aXNlXG4gICAgICAgIHRoaXMuc2VuZEFzeW5jID0gdGhpcy5zZW5kQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZW5kID0gdGhpcy5zZW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3NlbmRKc29uUnBjUmVxdWVzdCA9IHRoaXMuX3NlbmRKc29uUnBjUmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICByZXF1ZXN0KGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3ZpZGVyLnJlcXVlc3QoYXJncyk7XG4gICAgfVxuICAgIHNlbmQobWV0aG9kLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3ZpZGVyLnJlcXVlc3QoeyBtZXRob2QsIHBhcmFtcyB9KTtcbiAgICB9XG4gICAgc2VuZEFzeW5jKHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHV0aWxfMS5kZWZhdWx0LmNhbGxiYWNraWZ5KCgpID0+IHRoaXMuX3NlbmRKc29uUnBjUmVxdWVzdChwYXlsb2FkKSkoY2FsbGJhY2spO1xuICAgIH1cbiAgICBhc3luYyBfc2VuZEpzb25ScGNSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBpZDogcmVxdWVzdC5pZCxcbiAgICAgICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXNwb25zZS5yZXN1bHQgPSBhd2FpdCB0aGlzLl9wcm92aWRlci5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcmVxdWVzdC5wYXJhbXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQG5vbWljZm91bmRhdGlvbi9oYXJkaGF0LWludGVybmFsLXJ1bGVzL29ubHktaGFyZGhhdC1lcnJvclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBtaWdodCBiZSBhIG1pc3Rha2UsIGJ1dCBJJ20gbGVhdmluZyBpdCBhcyBpcyBqdXN0IGluIGNhc2UsXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBpdCdzIG5vdCBvYnZpb3VzIHdoYXQgd2Ugc2hvdWxkIGRvIGhlcmUuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zdHJpY3QtYm9vbGVhbi1leHByZXNzaW9uc1xuICAgICAgICAgICAgICAgIGNvZGU6IGVycm9yLmNvZGUgPyArZXJyb3IuY29kZSA6IC0xLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGVycm9yLm5hbWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFja3dhcmRzQ29tcGF0aWJpbGl0eVByb3ZpZGVyQWRhcHRlciA9IEJhY2t3YXJkc0NvbXBhdGliaWxpdHlQcm92aWRlckFkYXB0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWNrd2FyZHMtY29tcGF0aWJpbGl0eS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/providers/backwards-compatibility.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/providers/construction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/providers/construction.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.applyProviderWrappers = exports.createProvider = exports.isHDAccountsConfig = void 0;\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst date_1 = __webpack_require__(/*! ../../util/date */ \"(ssr)/./node_modules/hardhat/internal/util/date.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/hardhat/internal/core/providers/util.js\");\nfunction isHDAccountsConfig(accounts) {\n    return accounts !== undefined && Object.keys(accounts).includes(\"mnemonic\");\n}\nexports.isHDAccountsConfig = isHDAccountsConfig;\nfunction isResolvedHttpNetworkConfig(netConfig) {\n    return \"url\" in netConfig;\n}\n// This function is let's you import a provider dynamically in a pretty\n// type-safe way.\n// `ProviderNameT` and `name` must be the same literal string. TS enforces it.\n// `ModuleT` and `filePath` must also be the same, but this is not enforced.\nfunction importProvider(filePath, name) {\n    const mod = __webpack_require__(\"(ssr)/./node_modules/hardhat/internal/core/providers sync recursive\")(filePath);\n    return mod[name];\n}\nasync function createProvider(config, networkName, artifacts, extenders = []) {\n    let eip1193Provider;\n    const networkConfig = config.networks[networkName];\n    const paths = config.paths;\n    if (networkName === constants_1.HARDHAT_NETWORK_NAME) {\n        const hardhatNetConfig = networkConfig;\n        const { createHardhatNetworkProvider } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../../hardhat-network/provider/provider */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/provider.js\")));\n        let forkConfig;\n        if (hardhatNetConfig.forking?.enabled === true &&\n            hardhatNetConfig.forking?.url !== undefined) {\n            forkConfig = {\n                jsonRpcUrl: hardhatNetConfig.forking?.url,\n                blockNumber: hardhatNetConfig.forking?.blockNumber,\n                httpHeaders: hardhatNetConfig.forking.httpHeaders,\n            };\n        }\n        const accounts = (0, util_1.normalizeHardhatNetworkAccountsConfig)(hardhatNetConfig.accounts);\n        const { getForkCacheDirPath } = __webpack_require__(/*! ../../hardhat-network/provider/utils/disk-cache */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/disk-cache.js\");\n        eip1193Provider = await createHardhatNetworkProvider({\n            chainId: hardhatNetConfig.chainId,\n            networkId: hardhatNetConfig.chainId,\n            hardfork: hardhatNetConfig.hardfork,\n            blockGasLimit: hardhatNetConfig.blockGasLimit,\n            initialBaseFeePerGas: hardhatNetConfig.initialBaseFeePerGas,\n            minGasPrice: hardhatNetConfig.minGasPrice,\n            throwOnTransactionFailures: hardhatNetConfig.throwOnTransactionFailures,\n            throwOnCallFailures: hardhatNetConfig.throwOnCallFailures,\n            automine: hardhatNetConfig.mining.auto,\n            intervalMining: hardhatNetConfig.mining.interval,\n            // This cast is valid because of the config validation and resolution\n            mempoolOrder: hardhatNetConfig.mining.mempool.order,\n            chains: hardhatNetConfig.chains,\n            coinbase: hardhatNetConfig.coinbase,\n            genesisAccounts: accounts,\n            allowUnlimitedContractSize: hardhatNetConfig.allowUnlimitedContractSize,\n            allowBlocksWithSameTimestamp: hardhatNetConfig.allowBlocksWithSameTimestamp ?? false,\n            initialDate: hardhatNetConfig.initialDate !== undefined\n                ? (0, date_1.parseDateString)(hardhatNetConfig.initialDate)\n                : undefined,\n            forkConfig,\n            forkCachePath: paths !== undefined ? getForkCacheDirPath(paths) : undefined,\n            enableTransientStorage: hardhatNetConfig.enableTransientStorage ?? false,\n            enableRip7212: hardhatNetConfig.enableRip7212 ?? false,\n        }, {\n            enabled: hardhatNetConfig.loggingEnabled,\n        }, artifacts);\n    }\n    else {\n        const HttpProvider = importProvider(\"./http\", \"HttpProvider\");\n        const httpNetConfig = networkConfig;\n        eip1193Provider = new HttpProvider(httpNetConfig.url, networkName, httpNetConfig.httpHeaders, httpNetConfig.timeout);\n    }\n    let wrappedProvider = eip1193Provider;\n    for (const extender of extenders) {\n        wrappedProvider = await extender(wrappedProvider, config, networkName);\n    }\n    wrappedProvider = applyProviderWrappers(wrappedProvider, networkConfig, extenders);\n    const BackwardsCompatibilityProviderAdapter = importProvider(\"./backwards-compatibility\", \"BackwardsCompatibilityProviderAdapter\");\n    return new BackwardsCompatibilityProviderAdapter(wrappedProvider);\n}\nexports.createProvider = createProvider;\nfunction applyProviderWrappers(provider, netConfig, extenders) {\n    // These dependencies are lazy-loaded because they are really big.\n    const LocalAccountsProvider = importProvider(\"./accounts\", \"LocalAccountsProvider\");\n    const HDWalletProvider = importProvider(\"./accounts\", \"HDWalletProvider\");\n    const FixedSenderProvider = importProvider(\"./accounts\", \"FixedSenderProvider\");\n    const AutomaticSenderProvider = importProvider(\"./accounts\", \"AutomaticSenderProvider\");\n    const AutomaticGasProvider = importProvider(\"./gas-providers\", \"AutomaticGasProvider\");\n    const FixedGasProvider = importProvider(\"./gas-providers\", \"FixedGasProvider\");\n    const AutomaticGasPriceProvider = importProvider(\"./gas-providers\", \"AutomaticGasPriceProvider\");\n    const FixedGasPriceProvider = importProvider(\"./gas-providers\", \"FixedGasPriceProvider\");\n    const ChainIdValidatorProvider = importProvider(\"./chainId\", \"ChainIdValidatorProvider\");\n    if (isResolvedHttpNetworkConfig(netConfig)) {\n        const accounts = netConfig.accounts;\n        if (Array.isArray(accounts)) {\n            provider = new LocalAccountsProvider(provider, accounts);\n        }\n        else if (isHDAccountsConfig(accounts)) {\n            provider = new HDWalletProvider(provider, accounts.mnemonic, accounts.path, accounts.initialIndex, accounts.count, accounts.passphrase);\n        }\n        // TODO: Add some extension mechanism for account plugins here\n    }\n    if (netConfig.from !== undefined) {\n        provider = new FixedSenderProvider(provider, netConfig.from);\n    }\n    else {\n        provider = new AutomaticSenderProvider(provider);\n    }\n    if (netConfig.gas === undefined || netConfig.gas === \"auto\") {\n        provider = new AutomaticGasProvider(provider, netConfig.gasMultiplier);\n    }\n    else {\n        provider = new FixedGasProvider(provider, netConfig.gas);\n    }\n    if (netConfig.gasPrice === undefined || netConfig.gasPrice === \"auto\") {\n        // If you use a LocalAccountsProvider or HDWalletProvider, your transactions\n        // are signed locally. This requires having all of their fields available,\n        // including the gasPrice / maxFeePerGas & maxPriorityFeePerGas.\n        //\n        // We never use those providers when using Hardhat Network, but sign within\n        // Hardhat Network itself. This means that we don't need to provide all the\n        // fields, as the missing ones will be resolved there.\n        //\n        // Hardhat Network handles this in a more performant way, so we don't use\n        // the AutomaticGasPriceProvider for it unless there are provider extenders.\n        // The reason for this is that some extenders (like hardhat-ledger's) might\n        // do the signing themselves, and that needs the gas price to be set.\n        if (isResolvedHttpNetworkConfig(netConfig) || extenders.length > 0) {\n            provider = new AutomaticGasPriceProvider(provider);\n        }\n    }\n    else {\n        provider = new FixedGasPriceProvider(provider, netConfig.gasPrice);\n    }\n    if (isResolvedHttpNetworkConfig(netConfig) &&\n        netConfig.chainId !== undefined) {\n        provider = new ChainIdValidatorProvider(provider, netConfig.chainId);\n    }\n    return provider;\n}\nexports.applyProviderWrappers = applyProviderWrappers;\n//# sourceMappingURL=construction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/providers/construction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/providers/errors.js":
/*!****************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/providers/errors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvalidResponseError = exports.MethodNotSupportedError = exports.TransactionExecutionError = exports.InvalidInputError = exports.InternalError = exports.InvalidArgumentsError = exports.MethodNotFoundError = exports.InvalidRequestError = exports.InvalidJsonInputError = exports.ProviderError = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\n// Codes taken from: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1474.md#error-codes\n//\n// Code\t  Message\t              Meaning\t                            Category\n//\n// -32700\tParse error\t          Invalid JSON\t                      standard\n// -32600\tInvalid request\t      JSON is not a valid request object  standard\n// -32601\tMethod not found\t    Method does not exist\t              standard\n// -32602\tInvalid params\t      Invalid method parameters\t          standard\n// -32603\tInternal error\t      Internal JSON-RPC error\t            standard\n// -32004\tMethod not supported\tMethod is not implemented\t          non-standard\n// -32000\tInvalid input\t        Missing or invalid parameters\t      non-standard\n// -32003\tTransaction rejected\tTransaction creation failed\t        non-standard\n//\n//\n// Non standard:\n// -32999 Invalid response      The server returned a JSON-RPC      hardhat-sepecific\n//                              response, but the result is not\n//                              in the expected format\n//\n// Not implemented:\n//\n// -32001\tResource not found\t  Requested resource not found\t      non-standard\n// -32002\tResource unavailable\tRequested resource not available\t  non-standard\nclass ProviderError extends errors_1.CustomError {\n    static isProviderError(other) {\n        return (other !== undefined && other !== null && other._isProviderError === true);\n    }\n    constructor(message, code, parent) {\n        super(message, parent);\n        this.parent = parent;\n        this.code = code;\n        this._isProviderError = true;\n    }\n}\nexports.ProviderError = ProviderError;\nclass InvalidJsonInputError extends ProviderError {\n    constructor(message, parent) {\n        super(message, InvalidJsonInputError.CODE, parent);\n    }\n}\nInvalidJsonInputError.CODE = -32700;\nexports.InvalidJsonInputError = InvalidJsonInputError;\nclass InvalidRequestError extends ProviderError {\n    constructor(message, parent) {\n        super(message, InvalidRequestError.CODE, parent);\n    }\n}\nInvalidRequestError.CODE = -32600;\nexports.InvalidRequestError = InvalidRequestError;\nclass MethodNotFoundError extends ProviderError {\n    constructor(message, parent) {\n        super(message, MethodNotFoundError.CODE, parent);\n    }\n}\nMethodNotFoundError.CODE = -32601;\nexports.MethodNotFoundError = MethodNotFoundError;\nclass InvalidArgumentsError extends ProviderError {\n    constructor(message, parent) {\n        super(message, InvalidArgumentsError.CODE, parent);\n    }\n}\nInvalidArgumentsError.CODE = -32602;\nexports.InvalidArgumentsError = InvalidArgumentsError;\nclass InternalError extends ProviderError {\n    constructor(message, parent) {\n        super(message, InternalError.CODE, parent);\n    }\n}\nInternalError.CODE = -32603;\nexports.InternalError = InternalError;\nclass InvalidInputError extends ProviderError {\n    constructor(message, parent) {\n        super(message, InvalidInputError.CODE, parent);\n    }\n}\nInvalidInputError.CODE = -32000;\nexports.InvalidInputError = InvalidInputError;\nclass TransactionExecutionError extends ProviderError {\n    // TODO: This should have the transaction id\n    // TODO: Normalize this constructor\n    constructor(parentOrMsg) {\n        if (typeof parentOrMsg === \"string\") {\n            super(parentOrMsg, TransactionExecutionError.CODE);\n        }\n        else {\n            super(parentOrMsg.message, TransactionExecutionError.CODE, parentOrMsg);\n        }\n    }\n}\nTransactionExecutionError.CODE = -32003;\nexports.TransactionExecutionError = TransactionExecutionError;\nclass MethodNotSupportedError extends ProviderError {\n    constructor(method, parent) {\n        super(`Method ${method} is not supported`, MethodNotSupportedError.CODE, parent);\n    }\n}\nMethodNotSupportedError.CODE = -32004;\nexports.MethodNotSupportedError = MethodNotSupportedError;\nclass InvalidResponseError extends ProviderError {\n    constructor(message, parent) {\n        super(message, InvalidResponseError.CODE, parent);\n    }\n}\nInvalidResponseError.CODE = -32999;\nexports.InvalidResponseError = InvalidResponseError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Byb3ZpZGVycy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsK0JBQStCLEdBQUcsaUNBQWlDLEdBQUcseUJBQXlCLEdBQUcscUJBQXFCLEdBQUcsNkJBQTZCLEdBQUcsMkJBQTJCLEdBQUcsMkJBQTJCLEdBQUcsNkJBQTZCLEdBQUcscUJBQXFCO0FBQzFTLGlCQUFpQixtQkFBTyxDQUFDLHVFQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2NvcmUvcHJvdmlkZXJzL2Vycm9ycy5qcz9jZTlhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnZhbGlkUmVzcG9uc2VFcnJvciA9IGV4cG9ydHMuTWV0aG9kTm90U3VwcG9ydGVkRXJyb3IgPSBleHBvcnRzLlRyYW5zYWN0aW9uRXhlY3V0aW9uRXJyb3IgPSBleHBvcnRzLkludmFsaWRJbnB1dEVycm9yID0gZXhwb3J0cy5JbnRlcm5hbEVycm9yID0gZXhwb3J0cy5JbnZhbGlkQXJndW1lbnRzRXJyb3IgPSBleHBvcnRzLk1ldGhvZE5vdEZvdW5kRXJyb3IgPSBleHBvcnRzLkludmFsaWRSZXF1ZXN0RXJyb3IgPSBleHBvcnRzLkludmFsaWRKc29uSW5wdXRFcnJvciA9IGV4cG9ydHMuUHJvdmlkZXJFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbi8vIENvZGVzIHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2Jsb2IvbWFzdGVyL0VJUFMvZWlwLTE0NzQubWQjZXJyb3ItY29kZXNcbi8vXG4vLyBDb2RlXHQgIE1lc3NhZ2VcdCAgICAgICAgICAgICAgTWVhbmluZ1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhdGVnb3J5XG4vL1xuLy8gLTMyNzAwXHRQYXJzZSBlcnJvclx0ICAgICAgICAgIEludmFsaWQgSlNPTlx0ICAgICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkXG4vLyAtMzI2MDBcdEludmFsaWQgcmVxdWVzdFx0ICAgICAgSlNPTiBpcyBub3QgYSB2YWxpZCByZXF1ZXN0IG9iamVjdCAgc3RhbmRhcmRcbi8vIC0zMjYwMVx0TWV0aG9kIG5vdCBmb3VuZFx0ICAgIE1ldGhvZCBkb2VzIG5vdCBleGlzdFx0ICAgICAgICAgICAgICBzdGFuZGFyZFxuLy8gLTMyNjAyXHRJbnZhbGlkIHBhcmFtc1x0ICAgICAgSW52YWxpZCBtZXRob2QgcGFyYW1ldGVyc1x0ICAgICAgICAgIHN0YW5kYXJkXG4vLyAtMzI2MDNcdEludGVybmFsIGVycm9yXHQgICAgICBJbnRlcm5hbCBKU09OLVJQQyBlcnJvclx0ICAgICAgICAgICAgc3RhbmRhcmRcbi8vIC0zMjAwNFx0TWV0aG9kIG5vdCBzdXBwb3J0ZWRcdE1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWRcdCAgICAgICAgICBub24tc3RhbmRhcmRcbi8vIC0zMjAwMFx0SW52YWxpZCBpbnB1dFx0ICAgICAgICBNaXNzaW5nIG9yIGludmFsaWQgcGFyYW1ldGVyc1x0ICAgICAgbm9uLXN0YW5kYXJkXG4vLyAtMzIwMDNcdFRyYW5zYWN0aW9uIHJlamVjdGVkXHRUcmFuc2FjdGlvbiBjcmVhdGlvbiBmYWlsZWRcdCAgICAgICAgbm9uLXN0YW5kYXJkXG4vL1xuLy9cbi8vIE5vbiBzdGFuZGFyZDpcbi8vIC0zMjk5OSBJbnZhbGlkIHJlc3BvbnNlICAgICAgVGhlIHNlcnZlciByZXR1cm5lZCBhIEpTT04tUlBDICAgICAgaGFyZGhhdC1zZXBlY2lmaWNcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsIGJ1dCB0aGUgcmVzdWx0IGlzIG5vdFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZXhwZWN0ZWQgZm9ybWF0XG4vL1xuLy8gTm90IGltcGxlbWVudGVkOlxuLy9cbi8vIC0zMjAwMVx0UmVzb3VyY2Ugbm90IGZvdW5kXHQgIFJlcXVlc3RlZCByZXNvdXJjZSBub3QgZm91bmRcdCAgICAgIG5vbi1zdGFuZGFyZFxuLy8gLTMyMDAyXHRSZXNvdXJjZSB1bmF2YWlsYWJsZVx0UmVxdWVzdGVkIHJlc291cmNlIG5vdCBhdmFpbGFibGVcdCAgbm9uLXN0YW5kYXJkXG5jbGFzcyBQcm92aWRlckVycm9yIGV4dGVuZHMgZXJyb3JzXzEuQ3VzdG9tRXJyb3Ige1xuICAgIHN0YXRpYyBpc1Byb3ZpZGVyRXJyb3Iob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIChvdGhlciAhPT0gdW5kZWZpbmVkICYmIG90aGVyICE9PSBudWxsICYmIG90aGVyLl9pc1Byb3ZpZGVyRXJyb3IgPT09IHRydWUpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBwYXJlbnQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgcGFyZW50KTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIHRoaXMuX2lzUHJvdmlkZXJFcnJvciA9IHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm92aWRlckVycm9yID0gUHJvdmlkZXJFcnJvcjtcbmNsYXNzIEludmFsaWRKc29uSW5wdXRFcnJvciBleHRlbmRzIFByb3ZpZGVyRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHBhcmVudCkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBJbnZhbGlkSnNvbklucHV0RXJyb3IuQ09ERSwgcGFyZW50KTtcbiAgICB9XG59XG5JbnZhbGlkSnNvbklucHV0RXJyb3IuQ09ERSA9IC0zMjcwMDtcbmV4cG9ydHMuSW52YWxpZEpzb25JbnB1dEVycm9yID0gSW52YWxpZEpzb25JbnB1dEVycm9yO1xuY2xhc3MgSW52YWxpZFJlcXVlc3RFcnJvciBleHRlbmRzIFByb3ZpZGVyRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHBhcmVudCkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBJbnZhbGlkUmVxdWVzdEVycm9yLkNPREUsIHBhcmVudCk7XG4gICAgfVxufVxuSW52YWxpZFJlcXVlc3RFcnJvci5DT0RFID0gLTMyNjAwO1xuZXhwb3J0cy5JbnZhbGlkUmVxdWVzdEVycm9yID0gSW52YWxpZFJlcXVlc3RFcnJvcjtcbmNsYXNzIE1ldGhvZE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBwYXJlbnQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgTWV0aG9kTm90Rm91bmRFcnJvci5DT0RFLCBwYXJlbnQpO1xuICAgIH1cbn1cbk1ldGhvZE5vdEZvdW5kRXJyb3IuQ09ERSA9IC0zMjYwMTtcbmV4cG9ydHMuTWV0aG9kTm90Rm91bmRFcnJvciA9IE1ldGhvZE5vdEZvdW5kRXJyb3I7XG5jbGFzcyBJbnZhbGlkQXJndW1lbnRzRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBwYXJlbnQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgSW52YWxpZEFyZ3VtZW50c0Vycm9yLkNPREUsIHBhcmVudCk7XG4gICAgfVxufVxuSW52YWxpZEFyZ3VtZW50c0Vycm9yLkNPREUgPSAtMzI2MDI7XG5leHBvcnRzLkludmFsaWRBcmd1bWVudHNFcnJvciA9IEludmFsaWRBcmd1bWVudHNFcnJvcjtcbmNsYXNzIEludGVybmFsRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBwYXJlbnQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgSW50ZXJuYWxFcnJvci5DT0RFLCBwYXJlbnQpO1xuICAgIH1cbn1cbkludGVybmFsRXJyb3IuQ09ERSA9IC0zMjYwMztcbmV4cG9ydHMuSW50ZXJuYWxFcnJvciA9IEludGVybmFsRXJyb3I7XG5jbGFzcyBJbnZhbGlkSW5wdXRFcnJvciBleHRlbmRzIFByb3ZpZGVyRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHBhcmVudCkge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBJbnZhbGlkSW5wdXRFcnJvci5DT0RFLCBwYXJlbnQpO1xuICAgIH1cbn1cbkludmFsaWRJbnB1dEVycm9yLkNPREUgPSAtMzIwMDA7XG5leHBvcnRzLkludmFsaWRJbnB1dEVycm9yID0gSW52YWxpZElucHV0RXJyb3I7XG5jbGFzcyBUcmFuc2FjdGlvbkV4ZWN1dGlvbkVycm9yIGV4dGVuZHMgUHJvdmlkZXJFcnJvciB7XG4gICAgLy8gVE9ETzogVGhpcyBzaG91bGQgaGF2ZSB0aGUgdHJhbnNhY3Rpb24gaWRcbiAgICAvLyBUT0RPOiBOb3JtYWxpemUgdGhpcyBjb25zdHJ1Y3RvclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudE9yTXNnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyZW50T3JNc2cgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHN1cGVyKHBhcmVudE9yTXNnLCBUcmFuc2FjdGlvbkV4ZWN1dGlvbkVycm9yLkNPREUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIocGFyZW50T3JNc2cubWVzc2FnZSwgVHJhbnNhY3Rpb25FeGVjdXRpb25FcnJvci5DT0RFLCBwYXJlbnRPck1zZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5UcmFuc2FjdGlvbkV4ZWN1dGlvbkVycm9yLkNPREUgPSAtMzIwMDM7XG5leHBvcnRzLlRyYW5zYWN0aW9uRXhlY3V0aW9uRXJyb3IgPSBUcmFuc2FjdGlvbkV4ZWN1dGlvbkVycm9yO1xuY2xhc3MgTWV0aG9kTm90U3VwcG9ydGVkRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIHBhcmVudCkge1xuICAgICAgICBzdXBlcihgTWV0aG9kICR7bWV0aG9kfSBpcyBub3Qgc3VwcG9ydGVkYCwgTWV0aG9kTm90U3VwcG9ydGVkRXJyb3IuQ09ERSwgcGFyZW50KTtcbiAgICB9XG59XG5NZXRob2ROb3RTdXBwb3J0ZWRFcnJvci5DT0RFID0gLTMyMDA0O1xuZXhwb3J0cy5NZXRob2ROb3RTdXBwb3J0ZWRFcnJvciA9IE1ldGhvZE5vdFN1cHBvcnRlZEVycm9yO1xuY2xhc3MgSW52YWxpZFJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBwYXJlbnQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgSW52YWxpZFJlc3BvbnNlRXJyb3IuQ09ERSwgcGFyZW50KTtcbiAgICB9XG59XG5JbnZhbGlkUmVzcG9uc2VFcnJvci5DT0RFID0gLTMyOTk5O1xuZXhwb3J0cy5JbnZhbGlkUmVzcG9uc2VFcnJvciA9IEludmFsaWRSZXNwb25zZUVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/providers/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/providers/http.js":
/*!**************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/providers/http.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpProvider = exports.isErrorResponse = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst jsonrpc_1 = __webpack_require__(/*! ../../util/jsonrpc */ \"(ssr)/./node_modules/hardhat/internal/util/jsonrpc.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../../util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst proxy_1 = __webpack_require__(/*! ../../util/proxy */ \"(ssr)/./node_modules/hardhat/internal/util/proxy.js\");\nconst errors_2 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/hardhat/internal/core/providers/errors.js\");\nfunction isErrorResponse(response) {\n    return typeof response.error !== \"undefined\";\n}\nexports.isErrorResponse = isErrorResponse;\nconst MAX_RETRIES = 6;\nconst MAX_RETRY_AWAIT_SECONDS = 5;\nconst TOO_MANY_REQUEST_STATUS = 429;\nconst hardhatVersion = (0, packageInfo_1.getHardhatVersion)();\nclass HttpProvider extends events_1.EventEmitter {\n    constructor(_url, _networkName, _extraHeaders = {}, _timeout = 20000, client = undefined) {\n        super();\n        this._url = _url;\n        this._networkName = _networkName;\n        this._extraHeaders = _extraHeaders;\n        this._timeout = _timeout;\n        this._nextRequestId = 1;\n        const { Pool, ProxyAgent } = __webpack_require__(/*! undici */ \"(ssr)/./node_modules/undici/index.js\");\n        if (this._url.trim().length === 0) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.EMPTY_URL, {\n                value: this._url,\n            });\n        }\n        const url = new URL(this._url);\n        this._path = url.pathname;\n        this._authHeader =\n            url.username === \"\"\n                ? undefined\n                : `Basic ${Buffer.from(`${url.username}:${url.password}`, \"utf-8\").toString(\"base64\")}`;\n        try {\n            this._dispatcher = client ?? new Pool(url.origin);\n            if (process.env.http_proxy !== undefined && (0, proxy_1.shouldUseProxy)(url.origin)) {\n                this._dispatcher = new ProxyAgent(process.env.http_proxy);\n            }\n        }\n        catch (e) {\n            if (e instanceof TypeError && e.message === \"Invalid URL\") {\n                e.message += ` ${url.origin}`;\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw e;\n        }\n    }\n    get url() {\n        return this._url;\n    }\n    async request(args) {\n        // This is a temporary fix to an issue with noisy warnings in the logs\n        // of a local node (#5406). This will be fixed in the next major release.\n        if (args.method === \"hardhat_setLedgerOutputEnabled\") {\n            const error = new errors_2.ProviderError(\"hardhat_setLedgerOutputEnabled - Method not supported\", -32004);\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n        const jsonRpcRequest = this._getJsonRpcRequest(args.method, args.params);\n        const jsonRpcResponse = await this._fetchJsonRpcResponse(jsonRpcRequest);\n        if (isErrorResponse(jsonRpcResponse)) {\n            const error = new errors_2.ProviderError(jsonRpcResponse.error.message, jsonRpcResponse.error.code);\n            error.data = jsonRpcResponse.error.data;\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n        if (args.method === \"hardhat_reset\") {\n            this.emit(constants_1.HARDHAT_NETWORK_RESET_EVENT);\n        }\n        if (args.method === \"evm_revert\") {\n            this.emit(constants_1.HARDHAT_NETWORK_REVERT_SNAPSHOT_EVENT);\n        }\n        return jsonRpcResponse.result;\n    }\n    /**\n     * Sends a batch of requests. Fails if any of them fails.\n     */\n    async sendBatch(batch) {\n        // We create the errors here to capture the stack traces at this point,\n        // the async call that follows would probably loose of the stack trace\n        const stackSavingError = new errors_2.ProviderError(\"HttpProviderError\", -1);\n        // we need this to sort the responses\n        const idToIndexMap = {};\n        const requests = batch.map((r, i) => {\n            const jsonRpcRequest = this._getJsonRpcRequest(r.method, r.params);\n            idToIndexMap[jsonRpcRequest.id] = i;\n            return jsonRpcRequest;\n        });\n        const jsonRpcResponses = await this._fetchJsonRpcResponse(requests);\n        for (const response of jsonRpcResponses) {\n            if (isErrorResponse(response)) {\n                const error = new errors_2.ProviderError(response.error.message, response.error.code, stackSavingError);\n                error.data = response.error.data;\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw error;\n            }\n        }\n        // We already know that it has this type, but TS can't infer it.\n        const responses = jsonRpcResponses;\n        // we use the id to sort the responses so that they match the order of the requests\n        const sortedResponses = responses\n            .map((response) => [idToIndexMap[response.id], response.result])\n            .sort(([indexA], [indexB]) => indexA - indexB)\n            .map(([, result]) => result);\n        return sortedResponses;\n    }\n    async _fetchJsonRpcResponse(request, retryNumber = 0) {\n        const { request: sendRequest } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! undici */ \"(ssr)/./node_modules/undici/index.js\")));\n        const url = new URL(this._url);\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": `hardhat ${hardhatVersion}`,\n            ...this._extraHeaders,\n        };\n        if (this._authHeader !== undefined) {\n            headers.Authorization = this._authHeader;\n        }\n        try {\n            const response = await sendRequest(url, {\n                dispatcher: this._dispatcher,\n                method: \"POST\",\n                body: JSON.stringify(request),\n                maxRedirections: 10,\n                headersTimeout: process.env.DO_NOT_SET_THIS_ENV_VAR____IS_HARDHAT_CI !== undefined\n                    ? 0\n                    : this._timeout,\n                headers,\n            });\n            if (this._isRateLimitResponse(response)) {\n                // \"The Fetch Standard allows users to skip consuming the response body\n                // by relying on garbage collection to release connection resources.\n                // Undici does not do the same. Therefore, it is important to always\n                // either consume or cancel the response body.\"\n                // https://undici.nodejs.org/#/?id=garbage-collection\n                // It's not clear how to \"cancel\", so we'll just consume:\n                await response.body.text();\n                const seconds = this._getRetryAfterSeconds(response, retryNumber);\n                if (seconds !== undefined && this._shouldRetry(retryNumber, seconds)) {\n                    return await this._retry(request, seconds, retryNumber);\n                }\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw new errors_2.ProviderError(`Too Many Requests error received from ${url.hostname}`, -32005 // Limit exceeded according to EIP1474\n                );\n            }\n            return (0, jsonrpc_1.parseJsonResponse)(await response.body.text());\n        }\n        catch (error) {\n            if (error.code === \"ECONNREFUSED\") {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.NODE_IS_NOT_RUNNING, { network: this._networkName }, error);\n            }\n            if (error.type === \"request-timeout\") {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.NETWORK_TIMEOUT, {}, error);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n    }\n    async _retry(request, seconds, retryNumber) {\n        await new Promise((resolve) => setTimeout(resolve, 1000 * seconds));\n        return this._fetchJsonRpcResponse(request, retryNumber + 1);\n    }\n    _getJsonRpcRequest(method, params = []) {\n        return {\n            jsonrpc: \"2.0\",\n            method,\n            params,\n            id: this._nextRequestId++,\n        };\n    }\n    _shouldRetry(retryNumber, retryAfterSeconds) {\n        if (retryNumber > MAX_RETRIES) {\n            return false;\n        }\n        if (retryAfterSeconds > MAX_RETRY_AWAIT_SECONDS) {\n            return false;\n        }\n        return true;\n    }\n    _isRateLimitResponse(response) {\n        return response.statusCode === TOO_MANY_REQUEST_STATUS;\n    }\n    _getRetryAfterSeconds(response, retryNumber) {\n        const header = response.headers[\"retry-after\"];\n        if (header === undefined || header === null || Array.isArray(header)) {\n            // if the response doesn't have a retry-after header, we do\n            // an exponential backoff\n            return Math.min(2 ** retryNumber, MAX_RETRY_AWAIT_SECONDS);\n        }\n        const parsed = parseInt(header, 10);\n        if (isNaN(parsed)) {\n            return undefined;\n        }\n        return parsed;\n    }\n}\nexports.HttpProvider = HttpProvider;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/providers/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/providers/lazy-initialization.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/providers/lazy-initialization.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LazyInitializationProviderAdapter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\n/**\n * A class that delays the (async) creation of its internal provider until the first call\n * to a JSON RPC method via request/send/sendAsync or the init method is called.\n */\nclass LazyInitializationProviderAdapter {\n    constructor(_providerFactory) {\n        this._providerFactory = _providerFactory;\n        this._emitter = new events_1.EventEmitter();\n    }\n    /**\n     * Gets the internal wrapped provider.\n     * Using it directly is discouraged and should be done with care,\n     * use the public methods from the class like `request` and all event emitter methods instead\n     */\n    get _wrapped() {\n        if (this.provider === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.UNINITIALIZED_PROVIDER);\n        }\n        return this.provider;\n    }\n    async init() {\n        if (this.provider === undefined) {\n            if (this._initializingPromise === undefined) {\n                this._initializingPromise = this._providerFactory();\n            }\n            this.provider = await this._initializingPromise;\n            // Copy any event emitter events before initialization over to the provider\n            const recordedEvents = this._emitter.eventNames();\n            this.provider.setMaxListeners(this._emitter.getMaxListeners());\n            for (const event of recordedEvents) {\n                const listeners = this._emitter.rawListeners(event);\n                for (const listener of listeners) {\n                    this.provider.on(event, listener);\n                    this._emitter.removeListener(event, listener);\n                }\n            }\n        }\n        return this.provider;\n    }\n    // Provider methods\n    async request(args) {\n        const provider = await this._getOrInitProvider();\n        return provider.request(args);\n    }\n    async send(method, params) {\n        const provider = await this._getOrInitProvider();\n        return provider.send(method, params);\n    }\n    sendAsync(payload, callback) {\n        this._getOrInitProvider().then((provider) => {\n            provider.sendAsync(payload, callback);\n        }, (e) => {\n            callback(e, null);\n        });\n    }\n    // EventEmitter methods\n    addListener(event, listener) {\n        this._getEmitter().addListener(event, listener);\n        return this;\n    }\n    on(event, listener) {\n        this._getEmitter().on(event, listener);\n        return this;\n    }\n    once(event, listener) {\n        this._getEmitter().once(event, listener);\n        return this;\n    }\n    prependListener(event, listener) {\n        this._getEmitter().prependListener(event, listener);\n        return this;\n    }\n    prependOnceListener(event, listener) {\n        this._getEmitter().prependOnceListener(event, listener);\n        return this;\n    }\n    removeListener(event, listener) {\n        this._getEmitter().removeListener(event, listener);\n        return this;\n    }\n    off(event, listener) {\n        this._getEmitter().off(event, listener);\n        return this;\n    }\n    removeAllListeners(event) {\n        this._getEmitter().removeAllListeners(event);\n        return this;\n    }\n    setMaxListeners(n) {\n        this._getEmitter().setMaxListeners(n);\n        return this;\n    }\n    getMaxListeners() {\n        return this._getEmitter().getMaxListeners();\n    }\n    // disable ban-types to satisfy the EventEmitter interface\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    listeners(event) {\n        return this._getEmitter().listeners(event);\n    }\n    // disable ban-types to satisfy the EventEmitter interface\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    rawListeners(event) {\n        return this._getEmitter().rawListeners(event);\n    }\n    emit(event, ...args) {\n        return this._getEmitter().emit(event, ...args);\n    }\n    eventNames() {\n        return this._getEmitter().eventNames();\n    }\n    listenerCount(type) {\n        return this._getEmitter().listenerCount(type);\n    }\n    _getEmitter() {\n        return this.provider === undefined ? this._emitter : this.provider;\n    }\n    async _getOrInitProvider() {\n        // This is here to avoid multiple calls to send async stacking and re-creating the provider\n        // over and over again. It shouldn't run for request or send\n        if (this._initializingPromise !== undefined) {\n            await this._initializingPromise;\n        }\n        if (this.provider === undefined) {\n            this.provider = await this.init();\n        }\n        return this.provider;\n    }\n}\nexports.LazyInitializationProviderAdapter = LazyInitializationProviderAdapter;\n//# sourceMappingURL=lazy-initialization.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/providers/lazy-initialization.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/providers/util.js":
/*!**************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/providers/util.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.normalizeHardhatNetworkAccountsConfig = exports.derivePrivateKeys = void 0;\nconst keys_derivation_1 = __webpack_require__(/*! ../../util/keys-derivation */ \"(ssr)/./node_modules/hardhat/internal/util/keys-derivation.js\");\nconst default_config_1 = __webpack_require__(/*! ../config/default-config */ \"(ssr)/./node_modules/hardhat/internal/core/config/default-config.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst HD_PATH_REGEX = /^m(:?\\/\\d+'?)+\\/?$/;\nfunction derivePrivateKeys(mnemonic, hdpath, initialIndex, count, passphrase) {\n    if (hdpath.match(HD_PATH_REGEX) === null) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.INVALID_HD_PATH, { path: hdpath });\n    }\n    if (!hdpath.endsWith(\"/\")) {\n        hdpath += \"/\";\n    }\n    const privateKeys = [];\n    for (let i = initialIndex; i < initialIndex + count; i++) {\n        const privateKey = (0, keys_derivation_1.deriveKeyFromMnemonicAndPath)(mnemonic, hdpath + i.toString(), passphrase);\n        if (privateKey === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.CANT_DERIVE_KEY, {\n                mnemonic,\n                path: hdpath,\n            });\n        }\n        privateKeys.push(privateKey);\n    }\n    return privateKeys;\n}\nexports.derivePrivateKeys = derivePrivateKeys;\nfunction normalizeHardhatNetworkAccountsConfig(accountsConfig) {\n    if (Array.isArray(accountsConfig)) {\n        return accountsConfig;\n    }\n    const { bytesToHex } = __webpack_require__(/*! @nomicfoundation/ethereumjs-util */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-util/dist/esm/index.js\");\n    return derivePrivateKeys(accountsConfig.mnemonic, accountsConfig.path, accountsConfig.initialIndex, accountsConfig.count, accountsConfig.passphrase).map((pk) => ({\n        privateKey: bytesToHex(pk),\n        balance: accountsConfig.accountsBalance ?? default_config_1.DEFAULT_HARDHAT_NETWORK_BALANCE,\n    }));\n}\nexports.normalizeHardhatNetworkAccountsConfig = normalizeHardhatNetworkAccountsConfig;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Byb3ZpZGVycy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZDQUE2QyxHQUFHLHlCQUF5QjtBQUN6RSwwQkFBMEIsbUJBQU8sQ0FBQyxpR0FBNEI7QUFDOUQseUJBQXlCLG1CQUFPLENBQUMscUdBQTBCO0FBQzNELGlCQUFpQixtQkFBTyxDQUFDLHVFQUFXO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLGlGQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSx3RkFBd0YsY0FBYztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDBCQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGFBQWEsRUFBRSxtQkFBTyxDQUFDLGlIQUFrQztBQUNyRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw2Q0FBNkM7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvY29yZS9wcm92aWRlcnMvdXRpbC5qcz81NGNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub3JtYWxpemVIYXJkaGF0TmV0d29ya0FjY291bnRzQ29uZmlnID0gZXhwb3J0cy5kZXJpdmVQcml2YXRlS2V5cyA9IHZvaWQgMDtcbmNvbnN0IGtleXNfZGVyaXZhdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwva2V5cy1kZXJpdmF0aW9uXCIpO1xuY29uc3QgZGVmYXVsdF9jb25maWdfMSA9IHJlcXVpcmUoXCIuLi9jb25maWcvZGVmYXVsdC1jb25maWdcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4uL2Vycm9ycy1saXN0XCIpO1xuY29uc3QgSERfUEFUSF9SRUdFWCA9IC9ebSg6P1xcL1xcZCsnPykrXFwvPyQvO1xuZnVuY3Rpb24gZGVyaXZlUHJpdmF0ZUtleXMobW5lbW9uaWMsIGhkcGF0aCwgaW5pdGlhbEluZGV4LCBjb3VudCwgcGFzc3BocmFzZSkge1xuICAgIGlmIChoZHBhdGgubWF0Y2goSERfUEFUSF9SRUdFWCkgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5ORVRXT1JLLklOVkFMSURfSERfUEFUSCwgeyBwYXRoOiBoZHBhdGggfSk7XG4gICAgfVxuICAgIGlmICghaGRwYXRoLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgICBoZHBhdGggKz0gXCIvXCI7XG4gICAgfVxuICAgIGNvbnN0IHByaXZhdGVLZXlzID0gW107XG4gICAgZm9yIChsZXQgaSA9IGluaXRpYWxJbmRleDsgaSA8IGluaXRpYWxJbmRleCArIGNvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9ICgwLCBrZXlzX2Rlcml2YXRpb25fMS5kZXJpdmVLZXlGcm9tTW5lbW9uaWNBbmRQYXRoKShtbmVtb25pYywgaGRwYXRoICsgaS50b1N0cmluZygpLCBwYXNzcGhyYXNlKTtcbiAgICAgICAgaWYgKHByaXZhdGVLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5ORVRXT1JLLkNBTlRfREVSSVZFX0tFWSwge1xuICAgICAgICAgICAgICAgIG1uZW1vbmljLFxuICAgICAgICAgICAgICAgIHBhdGg6IGhkcGF0aCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGVLZXlzLnB1c2gocHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIHJldHVybiBwcml2YXRlS2V5cztcbn1cbmV4cG9ydHMuZGVyaXZlUHJpdmF0ZUtleXMgPSBkZXJpdmVQcml2YXRlS2V5cztcbmZ1bmN0aW9uIG5vcm1hbGl6ZUhhcmRoYXROZXR3b3JrQWNjb3VudHNDb25maWcoYWNjb3VudHNDb25maWcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhY2NvdW50c0NvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuIGFjY291bnRzQ29uZmlnO1xuICAgIH1cbiAgICBjb25zdCB7IGJ5dGVzVG9IZXggfSA9IHJlcXVpcmUoXCJAbm9taWNmb3VuZGF0aW9uL2V0aGVyZXVtanMtdXRpbFwiKTtcbiAgICByZXR1cm4gZGVyaXZlUHJpdmF0ZUtleXMoYWNjb3VudHNDb25maWcubW5lbW9uaWMsIGFjY291bnRzQ29uZmlnLnBhdGgsIGFjY291bnRzQ29uZmlnLmluaXRpYWxJbmRleCwgYWNjb3VudHNDb25maWcuY291bnQsIGFjY291bnRzQ29uZmlnLnBhc3NwaHJhc2UpLm1hcCgocGspID0+ICh7XG4gICAgICAgIHByaXZhdGVLZXk6IGJ5dGVzVG9IZXgocGspLFxuICAgICAgICBiYWxhbmNlOiBhY2NvdW50c0NvbmZpZy5hY2NvdW50c0JhbGFuY2UgPz8gZGVmYXVsdF9jb25maWdfMS5ERUZBVUxUX0hBUkRIQVRfTkVUV09SS19CQUxBTkNFLFxuICAgIH0pKTtcbn1cbmV4cG9ydHMubm9ybWFsaXplSGFyZGhhdE5ldHdvcmtBY2NvdW50c0NvbmZpZyA9IG5vcm1hbGl6ZUhhcmRoYXROZXR3b3JrQWNjb3VudHNDb25maWc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/providers/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/providers/wrapper.js":
/*!*****************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/providers/wrapper.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProviderWrapper = void 0;\nconst event_emitter_1 = __webpack_require__(/*! ../../util/event-emitter */ \"(ssr)/./node_modules/hardhat/internal/util/event-emitter.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/hardhat/internal/core/providers/errors.js\");\n/**\n * A wrapper class that makes it easy to implement the EIP1193 (Javascript Ethereum Provider) standard.\n * It comes baked in with all EventEmitter methods needed,\n * which will be added to the provider supplied in the constructor.\n * It also provides the interface for the standard .request() method as an abstract method.\n */\nclass ProviderWrapper extends event_emitter_1.EventEmitterWrapper {\n    constructor(_wrappedProvider) {\n        super(_wrappedProvider);\n        this._wrappedProvider = _wrappedProvider;\n    }\n    /**\n     * Extract the params from RequestArguments and optionally type them.\n     * It defaults to an empty array if no params are found.\n     */\n    _getParams(args) {\n        const params = args.params;\n        if (params === undefined) {\n            return [];\n        }\n        if (!Array.isArray(params)) {\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw new errors_1.InvalidInputError(\"Hardhat Network doesn't support JSON-RPC params sent as an object\");\n        }\n        return params;\n    }\n}\nexports.ProviderWrapper = ProviderWrapper;\n//# sourceMappingURL=wrapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Byb3ZpZGVycy93cmFwcGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2Qix3QkFBd0IsbUJBQU8sQ0FBQyw2RkFBMEI7QUFDMUQsaUJBQWlCLG1CQUFPLENBQUMsZ0ZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2NvcmUvcHJvdmlkZXJzL3dyYXBwZXIuanM/NDhmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvdmlkZXJXcmFwcGVyID0gdm9pZCAwO1xuY29uc3QgZXZlbnRfZW1pdHRlcl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZXZlbnQtZW1pdHRlclwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuLyoqXG4gKiBBIHdyYXBwZXIgY2xhc3MgdGhhdCBtYWtlcyBpdCBlYXN5IHRvIGltcGxlbWVudCB0aGUgRUlQMTE5MyAoSmF2YXNjcmlwdCBFdGhlcmV1bSBQcm92aWRlcikgc3RhbmRhcmQuXG4gKiBJdCBjb21lcyBiYWtlZCBpbiB3aXRoIGFsbCBFdmVudEVtaXR0ZXIgbWV0aG9kcyBuZWVkZWQsXG4gKiB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBwcm92aWRlciBzdXBwbGllZCBpbiB0aGUgY29uc3RydWN0b3IuXG4gKiBJdCBhbHNvIHByb3ZpZGVzIHRoZSBpbnRlcmZhY2UgZm9yIHRoZSBzdGFuZGFyZCAucmVxdWVzdCgpIG1ldGhvZCBhcyBhbiBhYnN0cmFjdCBtZXRob2QuXG4gKi9cbmNsYXNzIFByb3ZpZGVyV3JhcHBlciBleHRlbmRzIGV2ZW50X2VtaXR0ZXJfMS5FdmVudEVtaXR0ZXJXcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihfd3JhcHBlZFByb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKF93cmFwcGVkUHJvdmlkZXIpO1xuICAgICAgICB0aGlzLl93cmFwcGVkUHJvdmlkZXIgPSBfd3JhcHBlZFByb3ZpZGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0IHRoZSBwYXJhbXMgZnJvbSBSZXF1ZXN0QXJndW1lbnRzIGFuZCBvcHRpb25hbGx5IHR5cGUgdGhlbS5cbiAgICAgKiBJdCBkZWZhdWx0cyB0byBhbiBlbXB0eSBhcnJheSBpZiBubyBwYXJhbXMgYXJlIGZvdW5kLlxuICAgICAqL1xuICAgIF9nZXRQYXJhbXMoYXJncykge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBhcmdzLnBhcmFtcztcbiAgICAgICAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBhcmFtcykpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAbm9taWNmb3VuZGF0aW9uL2hhcmRoYXQtaW50ZXJuYWwtcnVsZXMvb25seS1oYXJkaGF0LWVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZElucHV0RXJyb3IoXCJIYXJkaGF0IE5ldHdvcmsgZG9lc24ndCBzdXBwb3J0IEpTT04tUlBDIHBhcmFtcyBzZW50IGFzIGFuIG9iamVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdmlkZXJXcmFwcGVyID0gUHJvdmlkZXJXcmFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcHBlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/providers/wrapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/runtime-environment.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/runtime-environment.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Environment = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst artifacts_1 = __webpack_require__(/*! ../artifacts */ \"(ssr)/./node_modules/hardhat/internal/artifacts.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst config_loading_1 = __webpack_require__(/*! ./config/config-loading */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-loading.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ./errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst construction_1 = __webpack_require__(/*! ./providers/construction */ \"(ssr)/./node_modules/hardhat/internal/core/providers/construction.js\");\nconst lazy_initialization_1 = __webpack_require__(/*! ./providers/lazy-initialization */ \"(ssr)/./node_modules/hardhat/internal/core/providers/lazy-initialization.js\");\nconst task_definitions_1 = __webpack_require__(/*! ./tasks/task-definitions */ \"(ssr)/./node_modules/hardhat/internal/core/tasks/task-definitions.js\");\nconst task_profiling_1 = __webpack_require__(/*! ./task-profiling */ \"(ssr)/./node_modules/hardhat/internal/core/task-profiling.js\");\nconst util_1 = __webpack_require__(/*! ./tasks/util */ \"(ssr)/./node_modules/hardhat/internal/core/tasks/util.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:hre\");\nclass Environment {\n    /**\n     * Initializes the Hardhat Runtime Environment and the given\n     * extender functions.\n     *\n     * @remarks The extenders' execution order is given by the order\n     * of the requires in the hardhat's config file and its plugins.\n     *\n     * @param config The hardhat's config object.\n     * @param hardhatArguments The parsed hardhat's arguments.\n     * @param tasks A map of tasks.\n     * @param scopes A map of scopes.\n     * @param environmentExtenders A list of environment extenders.\n     * @param providerExtenders A list of provider extenders.\n     */\n    constructor(config, hardhatArguments, tasks, scopes, environmentExtenders = [], userConfig = {}, providerExtenders = []) {\n        this.config = config;\n        this.hardhatArguments = hardhatArguments;\n        this.tasks = tasks;\n        this.scopes = scopes;\n        this.userConfig = userConfig;\n        this.version = (0, packageInfo_1.getHardhatVersion)();\n        /**\n         * Executes the task with the given name.\n         *\n         * @param taskIdentifier The task or scoped task to be executed.\n         * @param taskArguments A map of task's arguments.\n         * @param subtaskArguments A map of subtasks to their arguments.\n         *\n         * @throws a HH303 if there aren't any defined tasks with the given name.\n         * @returns a promise with the task's execution result.\n         */\n        this.run = async (taskIdentifier, taskArguments = {}, subtaskArguments = {}, callerTaskProfile) => {\n            const { scope, task } = (0, util_1.parseTaskIdentifier)(taskIdentifier);\n            let taskDefinition;\n            if (scope === undefined) {\n                taskDefinition = this.tasks[task];\n                log(\"Running task %s\", task);\n            }\n            else {\n                const scopeDefinition = this.scopes[scope];\n                if (scopeDefinition === undefined) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_SCOPE, {\n                        scope,\n                    });\n                }\n                taskDefinition = scopeDefinition.tasks?.[task];\n                log(\"Running scoped task %s %s\", scope, task);\n            }\n            if (taskDefinition === undefined) {\n                if (scope !== undefined) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_SCOPED_TASK, {\n                        scope,\n                        task,\n                    });\n                }\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n                    task,\n                });\n            }\n            const resolvedTaskArguments = this._resolveValidTaskArguments(taskDefinition, taskArguments, subtaskArguments);\n            let taskProfile;\n            if (this.hardhatArguments.flamegraph === true) {\n                taskProfile = (0, task_profiling_1.createTaskProfile)(task);\n                if (callerTaskProfile !== undefined) {\n                    callerTaskProfile.children.push(taskProfile);\n                }\n                else {\n                    this.entryTaskProfile = taskProfile;\n                }\n            }\n            try {\n                return await this._runTaskDefinition(taskDefinition, resolvedTaskArguments, subtaskArguments, taskProfile);\n            }\n            catch (e) {\n                (0, config_loading_1.analyzeModuleNotFoundError)(e, this.config.paths.configFile);\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw e;\n            }\n            finally {\n                if (taskProfile !== undefined) {\n                    (0, task_profiling_1.completeTaskProfile)(taskProfile);\n                }\n            }\n        };\n        log(\"Creating HardhatRuntimeEnvironment\");\n        const networkName = hardhatArguments.network !== undefined\n            ? hardhatArguments.network\n            : config.defaultNetwork;\n        const networkConfig = config.networks[networkName];\n        if (networkConfig === undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.CONFIG_NOT_FOUND, {\n                network: networkName,\n            });\n        }\n        this.artifacts = new artifacts_1.Artifacts(config.paths.artifacts);\n        const provider = new lazy_initialization_1.LazyInitializationProviderAdapter(async () => {\n            log(`Creating provider for network ${networkName}`);\n            return (0, construction_1.createProvider)(config, networkName, this.artifacts, providerExtenders);\n        });\n        this.network = {\n            name: networkName,\n            config: networkConfig,\n            provider,\n        };\n        this._environmentExtenders = environmentExtenders;\n        environmentExtenders.forEach((extender) => extender(this));\n    }\n    /**\n     * Injects the properties of `this` (the Hardhat Runtime Environment) into the global scope.\n     *\n     * @param blacklist a list of property names that won't be injected.\n     *\n     * @returns a function that restores the previous environment.\n     */\n    injectToGlobal(blacklist = Environment._BLACKLISTED_PROPERTIES) {\n        const globalAsAny = global;\n        const previousValues = {};\n        const previousHre = globalAsAny.hre;\n        globalAsAny.hre = this;\n        for (const [key, value] of Object.entries(this)) {\n            if (blacklist.includes(key)) {\n                continue;\n            }\n            previousValues[key] = globalAsAny[key];\n            globalAsAny[key] = value;\n        }\n        return () => {\n            for (const [key, _] of Object.entries(this)) {\n                if (blacklist.includes(key)) {\n                    continue;\n                }\n                globalAsAny.hre = previousHre;\n                globalAsAny[key] = previousValues[key];\n            }\n        };\n    }\n    /**\n     * @param taskProfile Undefined if we aren't computing task profiles\n     * @private\n     */\n    async _runTaskDefinition(taskDefinition, taskArguments, subtaskArguments, taskProfile) {\n        let runSuperFunction;\n        if (taskDefinition instanceof task_definitions_1.OverriddenTaskDefinition) {\n            runSuperFunction = async (_taskArguments = taskArguments, _subtaskArguments = subtaskArguments) => {\n                log(\"Running %s's super\", taskDefinition.name);\n                if (taskProfile === undefined) {\n                    return this._runTaskDefinition(taskDefinition.parentTaskDefinition, _taskArguments, _subtaskArguments);\n                }\n                const parentTaskProfile = (0, task_profiling_1.createParentTaskProfile)(taskProfile);\n                taskProfile.children.push(parentTaskProfile);\n                try {\n                    return await this._runTaskDefinition(taskDefinition.parentTaskDefinition, _taskArguments, _subtaskArguments, parentTaskProfile);\n                }\n                finally {\n                    (0, task_profiling_1.completeTaskProfile)(parentTaskProfile);\n                }\n            };\n            runSuperFunction.isDefined = true;\n        }\n        else {\n            runSuperFunction = async () => {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.RUNSUPER_NOT_AVAILABLE, {\n                    taskName: taskDefinition.name,\n                });\n            };\n            runSuperFunction.isDefined = false;\n        }\n        const runSuper = runSuperFunction;\n        const globalAsAny = global;\n        const previousRunSuper = globalAsAny.runSuper;\n        globalAsAny.runSuper = runSuper;\n        // We create a proxied version of `this`, as we want to keep track of the\n        // `subtaskArguments` and `taskProfile` through `run` invocations. This\n        // way we keep track of callers's data, even when tasks are run in parallel.\n        const proxiedHre = new Proxy(this, {\n            get(target, p, receiver) {\n                if (p === \"run\") {\n                    return (_name, _taskArguments, _subtaskArguments) => target.run(_name, _taskArguments, { ..._subtaskArguments, ...subtaskArguments }, // parent subtask args take precedence\n                    taskProfile);\n                }\n                return Reflect.get(target, p, receiver);\n            },\n        });\n        if (this.hardhatArguments.flamegraph === true) {\n            // We modify the `this` again to add  a few utility methods.\n            proxiedHre.adhocProfile = async (_name, f) => {\n                const adhocProfile = (0, task_profiling_1.createTaskProfile)(_name);\n                taskProfile.children.push(adhocProfile);\n                try {\n                    return await f();\n                }\n                finally {\n                    (0, task_profiling_1.completeTaskProfile)(adhocProfile);\n                }\n            };\n            proxiedHre.adhocProfileSync = (_name, f) => {\n                const adhocProfile = (0, task_profiling_1.createTaskProfile)(_name);\n                taskProfile.children.push(adhocProfile);\n                try {\n                    return f();\n                }\n                finally {\n                    (0, task_profiling_1.completeTaskProfile)(adhocProfile);\n                }\n            };\n        }\n        const uninjectFromGlobal = proxiedHre.injectToGlobal();\n        try {\n            return await taskDefinition.action(taskArguments, proxiedHre, runSuper);\n        }\n        finally {\n            uninjectFromGlobal();\n            globalAsAny.runSuper = previousRunSuper;\n        }\n    }\n    /**\n     * Check that task arguments are within TaskDefinition defined params constraints.\n     * Also, populate missing, non-mandatory arguments with default param values (if any).\n     *\n     * @private\n     * @throws HardhatError if any of the following are true:\n     *  > a required argument is missing\n     *  > an argument's value's type doesn't match the defined param type\n     *\n     * @param taskDefinition\n     * @param taskArguments\n     * @returns resolvedTaskArguments\n     */\n    _resolveValidTaskArguments(taskDefinition, taskArguments, subtaskArguments) {\n        const { name: taskName, paramDefinitions, positionalParamDefinitions, } = taskDefinition;\n        const nonPositionalParamDefinitions = Object.values(paramDefinitions);\n        // gather all task param definitions\n        const allTaskParamDefinitions = [\n            ...nonPositionalParamDefinitions,\n            ...positionalParamDefinitions,\n        ];\n        const resolvedArguments = {};\n        for (const paramDefinition of allTaskParamDefinitions) {\n            const paramName = paramDefinition.name;\n            const argumentValue = subtaskArguments[taskName]?.[paramName] ?? taskArguments[paramName];\n            const resolvedArgumentValue = this._resolveArgument(paramDefinition, argumentValue, taskDefinition.name);\n            if (resolvedArgumentValue !== undefined) {\n                resolvedArguments[paramName] = resolvedArgumentValue;\n            }\n        }\n        // We keep the args in taskArguments that were not resolved\n        return { ...taskArguments, ...resolvedArguments };\n    }\n    /**\n     * Resolves an argument according to a ParamDefinition rules.\n     *\n     * @param paramDefinition\n     * @param argumentValue\n     * @private\n     */\n    _resolveArgument(paramDefinition, argumentValue, taskName) {\n        const { name, isOptional, defaultValue } = paramDefinition;\n        if (argumentValue === undefined) {\n            if (isOptional) {\n                // undefined & optional argument -> return defaultValue\n                return defaultValue;\n            }\n            // undefined & mandatory argument -> error\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.MISSING_TASK_ARGUMENT, {\n                param: name,\n                task: taskName,\n            });\n        }\n        // arg was present -> validate type, if applicable\n        this._checkTypeValidation(paramDefinition, argumentValue);\n        return argumentValue;\n    }\n    /**\n     * Checks if value is valid for the specified param definition.\n     *\n     * @param paramDefinition {ParamDefinition} - the param definition for validation\n     * @param argumentValue - the value to be validated\n     * @private\n     * @throws HH301 if value is not valid for the param type\n     */\n    _checkTypeValidation(paramDefinition, argumentValue) {\n        const { name: paramName, type, isVariadic } = paramDefinition;\n        // in case of variadic param, argValue is an array and the type validation must pass for all values.\n        // otherwise, it's a single value that is to be validated\n        const argumentValueContainer = isVariadic ? argumentValue : [argumentValue];\n        for (const value of argumentValueContainer) {\n            type.validate(paramName, value);\n        }\n    }\n}\nEnvironment._BLACKLISTED_PROPERTIES = [\n    \"injectToGlobal\",\n    \"entryTaskProfile\",\n    \"_runTaskDefinition\",\n    \"_extenders\",\n];\nexports.Environment = Environment;\n//# sourceMappingURL=runtime-environment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/runtime-environment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/task-profiling.js":
/*!**************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/task-profiling.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.flagParallelChildren = exports.createParentTaskProfile = exports.completeTaskProfile = exports.createTaskProfile = void 0;\nfunction createTaskProfile(name) {\n    return {\n        name,\n        start: process.hrtime.bigint(),\n        children: [],\n    };\n}\nexports.createTaskProfile = createTaskProfile;\nfunction completeTaskProfile(taskProfile) {\n    taskProfile.end = process.hrtime.bigint();\n}\nexports.completeTaskProfile = completeTaskProfile;\nfunction createParentTaskProfile(taskProfile) {\n    return createTaskProfile(`super::${taskProfile.name}`);\n}\nexports.createParentTaskProfile = createParentTaskProfile;\n/**\n * Sets `parallel` to `true` to any children that was running at the same time\n * of another.\n *\n * We assume `children[]` is in chronological `start` order.\n */\nfunction flagParallelChildren(profile, isParentParallel = false) {\n    if (isParentParallel) {\n        profile.parallel = true;\n        for (const child of profile.children) {\n            child.parallel = true;\n        }\n    }\n    else {\n        for (const [i, child] of profile.children.entries()) {\n            if (i === 0) {\n                continue;\n            }\n            const prevChild = profile.children[i - 1];\n            if (child.start < prevChild.end) {\n                prevChild.parallel = true;\n                child.parallel = true;\n            }\n        }\n    }\n    for (const child of profile.children) {\n        flagParallelChildren(child, child.parallel);\n    }\n}\nexports.flagParallelChildren = flagParallelChildren;\n//# sourceMappingURL=task-profiling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Rhc2stcHJvZmlsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLHlCQUF5QjtBQUN4SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSx1Q0FBdUMsaUJBQWlCO0FBQ3hEO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvY29yZS90YXNrLXByb2ZpbGluZy5qcz8wNDliIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mbGFnUGFyYWxsZWxDaGlsZHJlbiA9IGV4cG9ydHMuY3JlYXRlUGFyZW50VGFza1Byb2ZpbGUgPSBleHBvcnRzLmNvbXBsZXRlVGFza1Byb2ZpbGUgPSBleHBvcnRzLmNyZWF0ZVRhc2tQcm9maWxlID0gdm9pZCAwO1xuZnVuY3Rpb24gY3JlYXRlVGFza1Byb2ZpbGUobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHN0YXJ0OiBwcm9jZXNzLmhydGltZS5iaWdpbnQoKSxcbiAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZVRhc2tQcm9maWxlID0gY3JlYXRlVGFza1Byb2ZpbGU7XG5mdW5jdGlvbiBjb21wbGV0ZVRhc2tQcm9maWxlKHRhc2tQcm9maWxlKSB7XG4gICAgdGFza1Byb2ZpbGUuZW5kID0gcHJvY2Vzcy5ocnRpbWUuYmlnaW50KCk7XG59XG5leHBvcnRzLmNvbXBsZXRlVGFza1Byb2ZpbGUgPSBjb21wbGV0ZVRhc2tQcm9maWxlO1xuZnVuY3Rpb24gY3JlYXRlUGFyZW50VGFza1Byb2ZpbGUodGFza1Byb2ZpbGUpIHtcbiAgICByZXR1cm4gY3JlYXRlVGFza1Byb2ZpbGUoYHN1cGVyOjoke3Rhc2tQcm9maWxlLm5hbWV9YCk7XG59XG5leHBvcnRzLmNyZWF0ZVBhcmVudFRhc2tQcm9maWxlID0gY3JlYXRlUGFyZW50VGFza1Byb2ZpbGU7XG4vKipcbiAqIFNldHMgYHBhcmFsbGVsYCB0byBgdHJ1ZWAgdG8gYW55IGNoaWxkcmVuIHRoYXQgd2FzIHJ1bm5pbmcgYXQgdGhlIHNhbWUgdGltZVxuICogb2YgYW5vdGhlci5cbiAqXG4gKiBXZSBhc3N1bWUgYGNoaWxkcmVuW11gIGlzIGluIGNocm9ub2xvZ2ljYWwgYHN0YXJ0YCBvcmRlci5cbiAqL1xuZnVuY3Rpb24gZmxhZ1BhcmFsbGVsQ2hpbGRyZW4ocHJvZmlsZSwgaXNQYXJlbnRQYXJhbGxlbCA9IGZhbHNlKSB7XG4gICAgaWYgKGlzUGFyZW50UGFyYWxsZWwpIHtcbiAgICAgICAgcHJvZmlsZS5wYXJhbGxlbCA9IHRydWU7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgcHJvZmlsZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQucGFyYWxsZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IFtpLCBjaGlsZF0gb2YgcHJvZmlsZS5jaGlsZHJlbi5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBwcm9maWxlLmNoaWxkcmVuW2kgLSAxXTtcbiAgICAgICAgICAgIGlmIChjaGlsZC5zdGFydCA8IHByZXZDaGlsZC5lbmQpIHtcbiAgICAgICAgICAgICAgICBwcmV2Q2hpbGQucGFyYWxsZWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNoaWxkLnBhcmFsbGVsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHByb2ZpbGUuY2hpbGRyZW4pIHtcbiAgICAgICAgZmxhZ1BhcmFsbGVsQ2hpbGRyZW4oY2hpbGQsIGNoaWxkLnBhcmFsbGVsKTtcbiAgICB9XG59XG5leHBvcnRzLmZsYWdQYXJhbGxlbENoaWxkcmVuID0gZmxhZ1BhcmFsbGVsQ2hpbGRyZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YXNrLXByb2ZpbGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/task-profiling.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/tasks/builtin-tasks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/tasks/builtin-tasks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! ../../../builtin-tasks/check */ \"(ssr)/./node_modules/hardhat/builtin-tasks/check.js\");\n__webpack_require__(/*! ../../../builtin-tasks/clean */ \"(ssr)/./node_modules/hardhat/builtin-tasks/clean.js\");\n__webpack_require__(/*! ../../../builtin-tasks/compile */ \"(ssr)/./node_modules/hardhat/builtin-tasks/compile.js\");\n__webpack_require__(/*! ../../../builtin-tasks/console */ \"(ssr)/./node_modules/hardhat/builtin-tasks/console.js\");\n__webpack_require__(/*! ../../../builtin-tasks/flatten */ \"(ssr)/./node_modules/hardhat/builtin-tasks/flatten.js\");\n__webpack_require__(/*! ../../../builtin-tasks/help */ \"(ssr)/./node_modules/hardhat/builtin-tasks/help.js\");\n__webpack_require__(/*! ../../../builtin-tasks/node */ \"(ssr)/./node_modules/hardhat/builtin-tasks/node.js\");\n__webpack_require__(/*! ../../../builtin-tasks/run */ \"(ssr)/./node_modules/hardhat/builtin-tasks/run.js\");\n__webpack_require__(/*! ../../../builtin-tasks/vars */ \"(ssr)/./node_modules/hardhat/builtin-tasks/vars.js\");\n__webpack_require__(/*! ../../../builtin-tasks/test */ \"(ssr)/./node_modules/hardhat/builtin-tasks/test.js\");\n//# sourceMappingURL=builtin-tasks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Rhc2tzL2J1aWx0aW4tdGFza3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQU8sQ0FBQyx5RkFBOEI7QUFDdEMsbUJBQU8sQ0FBQyx5RkFBOEI7QUFDdEMsbUJBQU8sQ0FBQyw2RkFBZ0M7QUFDeEMsbUJBQU8sQ0FBQyw2RkFBZ0M7QUFDeEMsbUJBQU8sQ0FBQyw2RkFBZ0M7QUFDeEMsbUJBQU8sQ0FBQyx1RkFBNkI7QUFDckMsbUJBQU8sQ0FBQyx1RkFBNkI7QUFDckMsbUJBQU8sQ0FBQyxxRkFBNEI7QUFDcEMsbUJBQU8sQ0FBQyx1RkFBNkI7QUFDckMsbUJBQU8sQ0FBQyx1RkFBNkI7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvY29yZS90YXNrcy9idWlsdGluLXRhc2tzLmpzPzcxYmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5yZXF1aXJlKFwiLi4vLi4vLi4vYnVpbHRpbi10YXNrcy9jaGVja1wiKTtcbnJlcXVpcmUoXCIuLi8uLi8uLi9idWlsdGluLXRhc2tzL2NsZWFuXCIpO1xucmVxdWlyZShcIi4uLy4uLy4uL2J1aWx0aW4tdGFza3MvY29tcGlsZVwiKTtcbnJlcXVpcmUoXCIuLi8uLi8uLi9idWlsdGluLXRhc2tzL2NvbnNvbGVcIik7XG5yZXF1aXJlKFwiLi4vLi4vLi4vYnVpbHRpbi10YXNrcy9mbGF0dGVuXCIpO1xucmVxdWlyZShcIi4uLy4uLy4uL2J1aWx0aW4tdGFza3MvaGVscFwiKTtcbnJlcXVpcmUoXCIuLi8uLi8uLi9idWlsdGluLXRhc2tzL25vZGVcIik7XG5yZXF1aXJlKFwiLi4vLi4vLi4vYnVpbHRpbi10YXNrcy9ydW5cIik7XG5yZXF1aXJlKFwiLi4vLi4vLi4vYnVpbHRpbi10YXNrcy92YXJzXCIpO1xucmVxdWlyZShcIi4uLy4uLy4uL2J1aWx0aW4tdGFza3MvdGVzdFwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1aWx0aW4tdGFza3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/tasks/builtin-tasks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/tasks/dsl.js":
/*!*********************************************************!*\
  !*** ./node_modules/hardhat/internal/core/tasks/dsl.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TasksDSL = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst task_definitions_1 = __webpack_require__(/*! ./task-definitions */ \"(ssr)/./node_modules/hardhat/internal/core/tasks/task-definitions.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/hardhat/internal/core/tasks/util.js\");\n/**\n * This class defines the DSL used in Hardhat config files\n * for creating and overriding tasks.\n */\nclass TasksDSL {\n    constructor() {\n        this.internalTask = this.subtask;\n        this._tasks = {};\n        this._scopes = {};\n    }\n    task(name, descriptionOrAction, action) {\n        // if this function is updated, update the corresponding callback\n        // passed to `new SimpleScopeDefinition`\n        return this._addTask(name, descriptionOrAction, action, false);\n    }\n    subtask(name, descriptionOrAction, action) {\n        // if this function is updated, update the corresponding callback\n        // passed to `new SimpleScopeDefinition`\n        return this._addTask(name, descriptionOrAction, action, true);\n    }\n    scope(name, description) {\n        if (this._tasks[name] !== undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.TASK_SCOPE_CLASH, {\n                scopeName: name,\n            });\n        }\n        const scopeDefinition = this._scopes[name];\n        if (scopeDefinition !== undefined) {\n            // if the scope already exists, the only thing we might\n            // do is to update its description\n            if (description !== undefined) {\n                scopeDefinition.setDescription(description);\n            }\n            return scopeDefinition;\n        }\n        const scope = new task_definitions_1.SimpleScopeDefinition(name, description, (taskName, descriptionOrAction, action) => \n        // if this function is updated, update the dsl.task function too\n        this._addTask({ scope: name, task: taskName }, descriptionOrAction, action, false), (subtaskName, descriptionOrAction, action) => \n        // if this function is updated, update the dsl.subtask function too\n        this._addTask({ scope: name, task: subtaskName }, descriptionOrAction, action, true));\n        this._scopes[name] = scope;\n        return scope;\n    }\n    /**\n     * Retrieves the task definitions.\n     *\n     * @returns The tasks container.\n     */\n    getTaskDefinitions() {\n        return this._tasks;\n    }\n    /**\n     * Retrieves the scoped task definitions.\n     *\n     * @returns The scoped tasks container.\n     */\n    getScopesDefinitions() {\n        return this._scopes;\n    }\n    getTaskDefinition(scope, name) {\n        if (scope === undefined) {\n            return this._tasks[name];\n        }\n        else {\n            return this._scopes[scope]?.tasks?.[name];\n        }\n    }\n    _addTask(taskIdentifier, descriptionOrAction, action, isSubtask) {\n        const { scope, task } = (0, util_1.parseTaskIdentifier)(taskIdentifier);\n        if (scope === undefined && this._scopes[task] !== undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.SCOPE_TASK_CLASH, {\n                taskName: task,\n            });\n        }\n        const parentTaskDefinition = this.getTaskDefinition(scope, task);\n        let taskDefinition;\n        if (parentTaskDefinition !== undefined) {\n            taskDefinition = new task_definitions_1.OverriddenTaskDefinition(parentTaskDefinition, isSubtask);\n        }\n        else {\n            taskDefinition = new task_definitions_1.SimpleTaskDefinition(taskIdentifier, isSubtask);\n        }\n        if (descriptionOrAction instanceof Function) {\n            action = descriptionOrAction;\n            descriptionOrAction = undefined;\n        }\n        if (descriptionOrAction !== undefined) {\n            taskDefinition.setDescription(descriptionOrAction);\n        }\n        if (action !== undefined) {\n            taskDefinition.setAction(action);\n        }\n        if (scope === undefined) {\n            this._tasks[task] = taskDefinition;\n        }\n        else {\n            const scopeDefinition = this._scopes[scope];\n            (0, errors_1.assertHardhatInvariant)(scopeDefinition !== undefined, \"It shouldn't be possible to create a task in a scope that doesn't exist\");\n            scopeDefinition.tasks[task] = taskDefinition;\n        }\n        return taskDefinition;\n    }\n}\nexports.TasksDSL = TasksDSL;\n//# sourceMappingURL=dsl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Rhc2tzL2RzbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsaUJBQWlCLG1CQUFPLENBQUMsdUVBQVc7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsaUZBQWdCO0FBQzlDLDJCQUEyQixtQkFBTyxDQUFDLGdHQUFvQjtBQUN2RCxlQUFlLG1CQUFPLENBQUMsd0VBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQSx3QkFBd0IsZ0NBQWdDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Rhc2tzL2RzbC5qcz8yY2ZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UYXNrc0RTTCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IGVycm9yc19saXN0XzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzLWxpc3RcIik7XG5jb25zdCB0YXNrX2RlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiLi90YXNrLWRlZmluaXRpb25zXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbi8qKlxuICogVGhpcyBjbGFzcyBkZWZpbmVzIHRoZSBEU0wgdXNlZCBpbiBIYXJkaGF0IGNvbmZpZyBmaWxlc1xuICogZm9yIGNyZWF0aW5nIGFuZCBvdmVycmlkaW5nIHRhc2tzLlxuICovXG5jbGFzcyBUYXNrc0RTTCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxUYXNrID0gdGhpcy5zdWJ0YXNrO1xuICAgICAgICB0aGlzLl90YXNrcyA9IHt9O1xuICAgICAgICB0aGlzLl9zY29wZXMgPSB7fTtcbiAgICB9XG4gICAgdGFzayhuYW1lLCBkZXNjcmlwdGlvbk9yQWN0aW9uLCBhY3Rpb24pIHtcbiAgICAgICAgLy8gaWYgdGhpcyBmdW5jdGlvbiBpcyB1cGRhdGVkLCB1cGRhdGUgdGhlIGNvcnJlc3BvbmRpbmcgY2FsbGJhY2tcbiAgICAgICAgLy8gcGFzc2VkIHRvIGBuZXcgU2ltcGxlU2NvcGVEZWZpbml0aW9uYFxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkVGFzayhuYW1lLCBkZXNjcmlwdGlvbk9yQWN0aW9uLCBhY3Rpb24sIGZhbHNlKTtcbiAgICB9XG4gICAgc3VidGFzayhuYW1lLCBkZXNjcmlwdGlvbk9yQWN0aW9uLCBhY3Rpb24pIHtcbiAgICAgICAgLy8gaWYgdGhpcyBmdW5jdGlvbiBpcyB1cGRhdGVkLCB1cGRhdGUgdGhlIGNvcnJlc3BvbmRpbmcgY2FsbGJhY2tcbiAgICAgICAgLy8gcGFzc2VkIHRvIGBuZXcgU2ltcGxlU2NvcGVEZWZpbml0aW9uYFxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkVGFzayhuYW1lLCBkZXNjcmlwdGlvbk9yQWN0aW9uLCBhY3Rpb24sIHRydWUpO1xuICAgIH1cbiAgICBzY29wZShuYW1lLCBkZXNjcmlwdGlvbikge1xuICAgICAgICBpZiAodGhpcy5fdGFza3NbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5UQVNLX0RFRklOSVRJT05TLlRBU0tfU0NPUEVfQ0xBU0gsIHtcbiAgICAgICAgICAgICAgICBzY29wZU5hbWU6IG5hbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY29wZURlZmluaXRpb24gPSB0aGlzLl9zY29wZXNbbmFtZV07XG4gICAgICAgIGlmIChzY29wZURlZmluaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHNjb3BlIGFscmVhZHkgZXhpc3RzLCB0aGUgb25seSB0aGluZyB3ZSBtaWdodFxuICAgICAgICAgICAgLy8gZG8gaXMgdG8gdXBkYXRlIGl0cyBkZXNjcmlwdGlvblxuICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzY29wZURlZmluaXRpb24uc2V0RGVzY3JpcHRpb24oZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNjb3BlRGVmaW5pdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY29wZSA9IG5ldyB0YXNrX2RlZmluaXRpb25zXzEuU2ltcGxlU2NvcGVEZWZpbml0aW9uKG5hbWUsIGRlc2NyaXB0aW9uLCAodGFza05hbWUsIGRlc2NyaXB0aW9uT3JBY3Rpb24sIGFjdGlvbikgPT4gXG4gICAgICAgIC8vIGlmIHRoaXMgZnVuY3Rpb24gaXMgdXBkYXRlZCwgdXBkYXRlIHRoZSBkc2wudGFzayBmdW5jdGlvbiB0b29cbiAgICAgICAgdGhpcy5fYWRkVGFzayh7IHNjb3BlOiBuYW1lLCB0YXNrOiB0YXNrTmFtZSB9LCBkZXNjcmlwdGlvbk9yQWN0aW9uLCBhY3Rpb24sIGZhbHNlKSwgKHN1YnRhc2tOYW1lLCBkZXNjcmlwdGlvbk9yQWN0aW9uLCBhY3Rpb24pID0+IFxuICAgICAgICAvLyBpZiB0aGlzIGZ1bmN0aW9uIGlzIHVwZGF0ZWQsIHVwZGF0ZSB0aGUgZHNsLnN1YnRhc2sgZnVuY3Rpb24gdG9vXG4gICAgICAgIHRoaXMuX2FkZFRhc2soeyBzY29wZTogbmFtZSwgdGFzazogc3VidGFza05hbWUgfSwgZGVzY3JpcHRpb25PckFjdGlvbiwgYWN0aW9uLCB0cnVlKSk7XG4gICAgICAgIHRoaXMuX3Njb3Blc1tuYW1lXSA9IHNjb3BlO1xuICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgdGFzayBkZWZpbml0aW9ucy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSB0YXNrcyBjb250YWluZXIuXG4gICAgICovXG4gICAgZ2V0VGFza0RlZmluaXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFza3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgc2NvcGVkIHRhc2sgZGVmaW5pdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc2NvcGVkIHRhc2tzIGNvbnRhaW5lci5cbiAgICAgKi9cbiAgICBnZXRTY29wZXNEZWZpbml0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlcztcbiAgICB9XG4gICAgZ2V0VGFza0RlZmluaXRpb24oc2NvcGUsIG5hbWUpIHtcbiAgICAgICAgaWYgKHNjb3BlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXNrc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY29wZXNbc2NvcGVdPy50YXNrcz8uW25hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hZGRUYXNrKHRhc2tJZGVudGlmaWVyLCBkZXNjcmlwdGlvbk9yQWN0aW9uLCBhY3Rpb24sIGlzU3VidGFzaykge1xuICAgICAgICBjb25zdCB7IHNjb3BlLCB0YXNrIH0gPSAoMCwgdXRpbF8xLnBhcnNlVGFza0lkZW50aWZpZXIpKHRhc2tJZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKHNjb3BlID09PSB1bmRlZmluZWQgJiYgdGhpcy5fc2NvcGVzW3Rhc2tdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuVEFTS19ERUZJTklUSU9OUy5TQ09QRV9UQVNLX0NMQVNILCB7XG4gICAgICAgICAgICAgICAgdGFza05hbWU6IHRhc2ssXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRUYXNrRGVmaW5pdGlvbiA9IHRoaXMuZ2V0VGFza0RlZmluaXRpb24oc2NvcGUsIHRhc2spO1xuICAgICAgICBsZXQgdGFza0RlZmluaXRpb247XG4gICAgICAgIGlmIChwYXJlbnRUYXNrRGVmaW5pdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0YXNrRGVmaW5pdGlvbiA9IG5ldyB0YXNrX2RlZmluaXRpb25zXzEuT3ZlcnJpZGRlblRhc2tEZWZpbml0aW9uKHBhcmVudFRhc2tEZWZpbml0aW9uLCBpc1N1YnRhc2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFza0RlZmluaXRpb24gPSBuZXcgdGFza19kZWZpbml0aW9uc18xLlNpbXBsZVRhc2tEZWZpbml0aW9uKHRhc2tJZGVudGlmaWVyLCBpc1N1YnRhc2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXNjcmlwdGlvbk9yQWN0aW9uIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IGRlc2NyaXB0aW9uT3JBY3Rpb247XG4gICAgICAgICAgICBkZXNjcmlwdGlvbk9yQWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXNjcmlwdGlvbk9yQWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRhc2tEZWZpbml0aW9uLnNldERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uT3JBY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGFza0RlZmluaXRpb24uc2V0QWN0aW9uKGFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjb3BlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rhc2tzW3Rhc2tdID0gdGFza0RlZmluaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzY29wZURlZmluaXRpb24gPSB0aGlzLl9zY29wZXNbc2NvcGVdO1xuICAgICAgICAgICAgKDAsIGVycm9yc18xLmFzc2VydEhhcmRoYXRJbnZhcmlhbnQpKHNjb3BlRGVmaW5pdGlvbiAhPT0gdW5kZWZpbmVkLCBcIkl0IHNob3VsZG4ndCBiZSBwb3NzaWJsZSB0byBjcmVhdGUgYSB0YXNrIGluIGEgc2NvcGUgdGhhdCBkb2Vzbid0IGV4aXN0XCIpO1xuICAgICAgICAgICAgc2NvcGVEZWZpbml0aW9uLnRhc2tzW3Rhc2tdID0gdGFza0RlZmluaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhc2tEZWZpbml0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuVGFza3NEU0wgPSBUYXNrc0RTTDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRzbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/tasks/dsl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/tasks/task-definitions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/tasks/task-definitions.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimpleScopeDefinition = exports.OverriddenTaskDefinition = exports.SimpleTaskDefinition = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst types = __importStar(__webpack_require__(/*! ../params/argumentTypes */ \"(ssr)/./node_modules/hardhat/internal/core/params/argumentTypes.js\"));\nconst hardhat_params_1 = __webpack_require__(/*! ../params/hardhat-params */ \"(ssr)/./node_modules/hardhat/internal/core/params/hardhat-params.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/hardhat/internal/core/tasks/util.js\");\nfunction isCLIArgumentType(type) {\n    return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\nclass SimpleTaskDefinition {\n    get name() {\n        return this._task;\n    }\n    get scope() {\n        return this._scope;\n    }\n    get description() {\n        return this._description;\n    }\n    /**\n     * Creates an empty task definition.\n     *\n     * This definition will have no params, and will throw a HH205 if executed.\n     *\n     * @param taskIdentifier The task's identifier.\n     * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n     */\n    constructor(taskIdentifier, isSubtask = false) {\n        this.isSubtask = isSubtask;\n        this.paramDefinitions = {};\n        this.positionalParamDefinitions = [];\n        this._positionalParamNames = new Set();\n        this._hasVariadicParam = false;\n        this._hasOptionalPositionalParam = false;\n        const { scope, task } = (0, util_1.parseTaskIdentifier)(taskIdentifier);\n        this._scope = scope;\n        this._task = task;\n        this.action = () => {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n                taskName: this._task,\n            });\n        };\n    }\n    /**\n     * Sets the task's description.\n     * @param description The description.\n     */\n    setDescription(description) {\n        this._description = description;\n        return this;\n    }\n    /**\n     * Sets the task's action.\n     * @param action The action.\n     */\n    setAction(action) {\n        // TODO: There's probably something bad here. See types.ts for more info.\n        this.action = action;\n        return this;\n    }\n    /**\n     * Adds a parameter to the task's definition.\n     *\n     * @remarks This will throw if the `name` is already used by this task or\n     * by Hardhat's global parameters.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n    addParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n        if (type === undefined) {\n            if (defaultValue === undefined) {\n                return this.addParam(name, description, undefined, types.string, isOptional);\n            }\n            if (typeof defaultValue !== \"string\") {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n                    paramName: name,\n                    taskName: this.name,\n                });\n            }\n            return this.addParam(name, description, defaultValue, types.string, isOptional);\n        }\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n        this._validateCLIArgumentTypesForExternalTasks(type);\n        this.paramDefinitions[name] = {\n            name,\n            defaultValue,\n            type,\n            description,\n            isOptional,\n            isFlag: false,\n            isVariadic: false,\n        };\n        return this;\n    }\n    /**\n     * Adds an optional parameter to the task's definition.\n     *\n     * @see addParam.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n    addOptionalParam(name, description, defaultValue, type) {\n        return this.addParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a boolean parameter or flag to the task's definition.\n     *\n     * Flags are params with default value set to `false`, and that don't expect\n     * values to be set in the CLI. A normal boolean param must be called with\n     * `--param true`, while a flag is called with `--flag`.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     */\n    addFlag(name, description) {\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this.paramDefinitions[name] = {\n            name,\n            defaultValue: false,\n            type: types.boolean,\n            description,\n            isFlag: true,\n            isOptional: true,\n            isVariadic: false,\n        };\n        return this;\n    }\n    /**\n     * Adds a positional parameter to the task's definition.\n     *\n     * @remarks This will throw if the `name` is already used by this task or\n     * by Hardhat's global parameters.\n     * @remarks This will throw if `isOptional` is `false` and an optional positional\n     * param was already set.\n     * @remarks This will throw if a variadic positional param is already set.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n    addPositionalParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n        if (type === undefined) {\n            if (defaultValue === undefined) {\n                return this.addPositionalParam(name, description, undefined, types.string, isOptional);\n            }\n            if (typeof defaultValue !== \"string\") {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n                    paramName: name,\n                    taskName: this.name,\n                });\n            }\n            return this.addPositionalParam(name, description, defaultValue, types.string, isOptional);\n        }\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this._validateNotAfterVariadicParam(name);\n        this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n        this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n        this._validateCLIArgumentTypesForExternalTasks(type);\n        const definition = {\n            name,\n            defaultValue,\n            type,\n            description,\n            isVariadic: false,\n            isOptional,\n            isFlag: false,\n        };\n        this._addPositionalParamDefinition(definition);\n        return this;\n    }\n    /**\n     * Adds an optional positional parameter to the task's definition.\n     *\n     * @see addPositionalParam.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n    addOptionalPositionalParam(name, description, defaultValue, type) {\n        return this.addPositionalParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a variadic positional parameter to the task's definition. Variadic\n     * positional params act as `...rest` parameters in JavaScript.\n     *\n     * @param name The parameter's name.\n     * @param description The parameter's description.\n     * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n     * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n     * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n     */\n    addVariadicPositionalParam(name, description, defaultValue, type, isOptional = defaultValue !== undefined) {\n        if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n            defaultValue = [defaultValue];\n        }\n        if (type === undefined) {\n            if (defaultValue === undefined) {\n                return this.addVariadicPositionalParam(name, description, undefined, types.string, isOptional);\n            }\n            if (!this._isStringArray(defaultValue)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n                    paramName: name,\n                    taskName: this.name,\n                });\n            }\n            return this.addVariadicPositionalParam(name, description, defaultValue, types.string, isOptional);\n        }\n        this._validateParamNameCasing(name);\n        this._validateNameNotUsed(name);\n        this._validateNotAfterVariadicParam(name);\n        this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n        this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n        this._validateCLIArgumentTypesForExternalTasks(type);\n        const definition = {\n            name,\n            defaultValue,\n            type,\n            description,\n            isVariadic: true,\n            isOptional,\n            isFlag: false,\n        };\n        this._addPositionalParamDefinition(definition);\n        return this;\n    }\n    /**\n     * Adds a positional parameter to the task's definition.\n     *\n     * This will check if the `name` is already used and\n     * if the parameter is being added after a varidic argument.\n     *\n     * @param name the parameter's name.\n     * @param description the parameter's description.\n     * @param defaultValue a default value.\n     * @param type param's type.\n     */\n    addOptionalVariadicPositionalParam(name, description, defaultValue, type) {\n        return this.addVariadicPositionalParam(name, description, defaultValue, type, true);\n    }\n    /**\n     * Adds a positional parameter to the task's definition.\n     *\n     * @param definition the param's definition\n     */\n    _addPositionalParamDefinition(definition) {\n        if (definition.isVariadic) {\n            this._hasVariadicParam = true;\n        }\n        if (definition.isOptional) {\n            this._hasOptionalPositionalParam = true;\n        }\n        this._positionalParamNames.add(definition.name);\n        this.positionalParamDefinitions.push(definition);\n    }\n    /**\n     * Validates if the given param's name is after a variadic parameter.\n     * @param name the param's name.\n     * @throws HH200\n     */\n    _validateNotAfterVariadicParam(name) {\n        if (this._hasVariadicParam) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    /**\n     * Validates if the param's name is already used.\n     * @param name the param's name.\n     *\n     * @throws HH201 if `name` is already used as a param.\n     * @throws HH202 if `name` is already used as a param by Hardhat\n     */\n    _validateNameNotUsed(name) {\n        if (this._hasParamDefined(name)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n        if (Object.keys(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    /**\n     * Checks if the given name is already used.\n     * @param name the param's name.\n     */\n    _hasParamDefined(name) {\n        return (this.paramDefinitions[name] !== undefined ||\n            this._positionalParamNames.has(name));\n    }\n    /**\n     * Validates if a mandatory param is being added after optional params.\n     *\n     * @param name the param's name to be added.\n     * @param isOptional true if the new param is optional, false otherwise.\n     *\n     * @throws HH203 if validation fail\n     */\n    _validateNoMandatoryParamAfterOptionalOnes(name, isOptional) {\n        if (!isOptional && this._hasOptionalPositionalParam) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    _validateParamNameCasing(name) {\n        const pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n        const match = name.match(pattern);\n        if (match === null) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    _validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name) {\n        if (defaultValue !== undefined && !isOptional) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM, {\n                paramName: name,\n                taskName: this.name,\n            });\n        }\n    }\n    _isStringArray(values) {\n        return Array.isArray(values) && values.every((v) => typeof v === \"string\");\n    }\n    _validateCLIArgumentTypesForExternalTasks(type) {\n        if (this.isSubtask) {\n            return;\n        }\n        if (!isCLIArgumentType(type)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED, {\n                task: this.name,\n                type: type.name,\n            });\n        }\n    }\n}\nexports.SimpleTaskDefinition = SimpleTaskDefinition;\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\nclass OverriddenTaskDefinition {\n    constructor(parentTaskDefinition, isSubtask = false) {\n        this.parentTaskDefinition = parentTaskDefinition;\n        this.isSubtask = isSubtask;\n        this.isSubtask = isSubtask;\n        this.parentTaskDefinition = parentTaskDefinition;\n    }\n    /**\n     * Sets the task's description.\n     * @param description The description.\n     */\n    setDescription(description) {\n        this._description = description;\n        return this;\n    }\n    /**\n     * Overrides the parent task's action.\n     * @param action the action.\n     */\n    setAction(action) {\n        // TODO: There's probably something bad here. See types.ts for more info.\n        this._action = action;\n        return this;\n    }\n    /**\n     * Retrieves the parent task's scope.\n     */\n    get scope() {\n        return this.parentTaskDefinition.scope;\n    }\n    /**\n     * Retrieves the parent task's name.\n     */\n    get name() {\n        return this.parentTaskDefinition.name;\n    }\n    /**\n     * Retrieves, if defined, the description of the overridden task,\n     * otherwise retrieves the description of the parent task.\n     */\n    get description() {\n        if (this._description !== undefined) {\n            return this._description;\n        }\n        return this.parentTaskDefinition.description;\n    }\n    /**\n     * Retrieves, if defined, the action of the overridden task,\n     * otherwise retrieves the action of the parent task.\n     */\n    get action() {\n        if (this._action !== undefined) {\n            return this._action;\n        }\n        return this.parentTaskDefinition.action;\n    }\n    /**\n     * Retrieves the parent task's param definitions.\n     */\n    get paramDefinitions() {\n        return this.parentTaskDefinition.paramDefinitions;\n    }\n    /**\n     * Retrieves the parent task's positional param definitions.\n     */\n    get positionalParamDefinitions() {\n        return this.parentTaskDefinition.positionalParamDefinitions;\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addParam(name, description, defaultValue, type, isOptional) {\n        if (isOptional === undefined || !isOptional) {\n            return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS);\n        }\n        return this.addOptionalParam(name, description, defaultValue, type);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addOptionalParam(name, description, defaultValue, type) {\n        this.parentTaskDefinition.addOptionalParam(name, description, defaultValue, type);\n        return this;\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addOptionalPositionalParam(_name, _description, _defaultValue, _type) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addVariadicPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n    }\n    /**\n     * Overriden tasks can't add new parameters.\n     */\n    addOptionalVariadicPositionalParam(_name, _description, _defaultValue, _type) {\n        return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n    }\n    /**\n     * Add a flag param to the overridden task.\n     * @throws HH201 if param name was already defined in any parent task.\n     * @throws HH209 if param name is not in camelCase.\n     */\n    addFlag(name, description) {\n        this.parentTaskDefinition.addFlag(name, description);\n        return this;\n    }\n    _throwNoParamsOverrideError(errorDescriptor) {\n        throw new errors_1.HardhatError(errorDescriptor, {\n            taskName: this.name,\n        });\n    }\n}\nexports.OverriddenTaskDefinition = OverriddenTaskDefinition;\nclass SimpleScopeDefinition {\n    constructor(name, _description, _addTask, _addSubtask) {\n        this.name = name;\n        this._description = _description;\n        this._addTask = _addTask;\n        this._addSubtask = _addSubtask;\n        this.tasks = {};\n    }\n    get description() {\n        return this._description;\n    }\n    setDescription(description) {\n        this._description = description;\n        return this;\n    }\n    task(name, descriptionOrAction, action) {\n        const task = this._addTask(name, descriptionOrAction, action);\n        this.tasks[name] = task;\n        return task;\n    }\n    subtask(name, descriptionOrAction, action) {\n        const subtask = this._addSubtask(name, descriptionOrAction, action);\n        this.tasks[name] = subtask;\n        return subtask;\n    }\n}\nexports.SimpleScopeDefinition = SimpleScopeDefinition;\n//# sourceMappingURL=task-definitions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/tasks/task-definitions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/tasks/util.js":
/*!**********************************************************!*\
  !*** ./node_modules/hardhat/internal/core/tasks/util.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseTaskIdentifier = void 0;\nfunction parseTaskIdentifier(taskIdentifier) {\n    if (typeof taskIdentifier === \"string\") {\n        return {\n            scope: undefined,\n            task: taskIdentifier,\n        };\n    }\n    else {\n        return {\n            scope: taskIdentifier.scope,\n            task: taskIdentifier.task,\n        };\n    }\n}\nexports.parseTaskIdentifier = parseTaskIdentifier;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3Rhc2tzL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvY29yZS90YXNrcy91dGlsLmpzP2Y1ODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlVGFza0lkZW50aWZpZXIgPSB2b2lkIDA7XG5mdW5jdGlvbiBwYXJzZVRhc2tJZGVudGlmaWVyKHRhc2tJZGVudGlmaWVyKSB7XG4gICAgaWYgKHR5cGVvZiB0YXNrSWRlbnRpZmllciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRhc2s6IHRhc2tJZGVudGlmaWVyLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjb3BlOiB0YXNrSWRlbnRpZmllci5zY29wZSxcbiAgICAgICAgICAgIHRhc2s6IHRhc2tJZGVudGlmaWVyLnRhc2ssXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5wYXJzZVRhc2tJZGVudGlmaWVyID0gcGFyc2VUYXNrSWRlbnRpZmllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/tasks/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/typescript-support.js":
/*!******************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/typescript-support.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isJavascriptFile = exports.isTypescriptFile = exports.loadTsNode = exports.isTypescriptSupported = exports.isRunningWithTypescript = exports.willRunWithTypescript = void 0;\nconst config_loading_1 = __webpack_require__(/*! ./config/config-loading */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-loading.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ./errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst execution_mode_1 = __webpack_require__(/*! ./execution-mode */ \"(ssr)/./node_modules/hardhat/internal/core/execution-mode.js\");\nlet cachedIsTypescriptSupported;\n/**\n * Returns true if Hardhat will run in using typescript mode.\n * @param configPath The config path if provider by the user.\n */\nfunction willRunWithTypescript(configPath) {\n    const config = (0, config_loading_1.resolveConfigPath)(configPath);\n    return isNonEsmTypescriptFile(config);\n}\nexports.willRunWithTypescript = willRunWithTypescript;\n/**\n * Returns true if a Hardhat is already running with typescript.\n */\nfunction isRunningWithTypescript(config) {\n    return isNonEsmTypescriptFile(config.paths.configFile);\n}\nexports.isRunningWithTypescript = isRunningWithTypescript;\nfunction isTypescriptSupported() {\n    if (cachedIsTypescriptSupported === undefined) {\n        try {\n            // We resolve these from Hardhat's installation.\n            /*require.resolve*/(/*! typescript */ \"typescript\");\n            /*require.resolve*/(/*! ts-node */ \"ts-node\");\n            cachedIsTypescriptSupported = true;\n        }\n        catch {\n            cachedIsTypescriptSupported = false;\n        }\n    }\n    return cachedIsTypescriptSupported;\n}\nexports.isTypescriptSupported = isTypescriptSupported;\nfunction loadTsNode(tsConfigPath, shouldTypecheck = false) {\n    try {\n        /*require.resolve*/(/*! typescript */ \"typescript\");\n    }\n    catch {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.TYPESCRIPT_NOT_INSTALLED);\n    }\n    try {\n        /*require.resolve*/(/*! ts-node */ \"ts-node\");\n    }\n    catch {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.TS_NODE_NOT_INSTALLED);\n    }\n    // If we are running tests we just want to transpile\n    if ((0, execution_mode_1.isRunningHardhatCoreTests)()) {\n        // eslint-disable-next-line import/no-extraneous-dependencies\n        __webpack_require__(/*! ts-node/register/transpile-only */ \"ts-node/register/transpile-only\");\n        return;\n    }\n    if (tsConfigPath !== undefined) {\n        process.env.TS_NODE_PROJECT = tsConfigPath;\n    }\n    // See: https://github.com/nomiclabs/hardhat/issues/265\n    if (process.env.TS_NODE_FILES === undefined) {\n        process.env.TS_NODE_FILES = \"true\";\n    }\n    let tsNodeRequirement = \"ts-node/register\";\n    if (!shouldTypecheck) {\n        tsNodeRequirement += \"/transpile-only\";\n    }\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    __webpack_require__(\"(ssr)/./node_modules/hardhat/internal/core sync recursive\")(tsNodeRequirement);\n}\nexports.loadTsNode = loadTsNode;\nfunction isNonEsmTypescriptFile(path) {\n    return /\\.(ts|cts)$/i.test(path);\n}\nfunction isTypescriptFile(path) {\n    return /\\.(ts|cts|mts)$/i.test(path);\n}\nexports.isTypescriptFile = isTypescriptFile;\nfunction isJavascriptFile(path) {\n    return /\\.(js|cjs|mjs)$/i.test(path);\n}\nexports.isJavascriptFile = isJavascriptFile;\n//# sourceMappingURL=typescript-support.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3R5cGVzY3JpcHQtc3VwcG9ydC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyx3QkFBd0IsR0FBRyxrQkFBa0IsR0FBRyw2QkFBNkIsR0FBRywrQkFBK0IsR0FBRyw2QkFBNkI7QUFDMUsseUJBQXlCLG1CQUFPLENBQUMsb0dBQXlCO0FBQzFELGlCQUFpQixtQkFBTyxDQUFDLHNFQUFVO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLGdGQUFlO0FBQzdDLHlCQUF5QixtQkFBTyxDQUFDLHNGQUFrQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQkFBZSxDQUFDLDhCQUFZO0FBQ3hDLFlBQVksbUJBQWUsQ0FBQyx3QkFBUztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQSxRQUFRLG1CQUFlLENBQUMsOEJBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsbUJBQWUsQ0FBQyx3QkFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsbUJBQU8sQ0FBQyx3RUFBaUM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksaUZBQVEsaUJBQWlCLENBQUM7QUFDOUI7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3R5cGVzY3JpcHQtc3VwcG9ydC5qcz9iYzg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0phdmFzY3JpcHRGaWxlID0gZXhwb3J0cy5pc1R5cGVzY3JpcHRGaWxlID0gZXhwb3J0cy5sb2FkVHNOb2RlID0gZXhwb3J0cy5pc1R5cGVzY3JpcHRTdXBwb3J0ZWQgPSBleHBvcnRzLmlzUnVubmluZ1dpdGhUeXBlc2NyaXB0ID0gZXhwb3J0cy53aWxsUnVuV2l0aFR5cGVzY3JpcHQgPSB2b2lkIDA7XG5jb25zdCBjb25maWdfbG9hZGluZ18xID0gcmVxdWlyZShcIi4vY29uZmlnL2NvbmZpZy1sb2FkaW5nXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4vZXJyb3JzLWxpc3RcIik7XG5jb25zdCBleGVjdXRpb25fbW9kZV8xID0gcmVxdWlyZShcIi4vZXhlY3V0aW9uLW1vZGVcIik7XG5sZXQgY2FjaGVkSXNUeXBlc2NyaXB0U3VwcG9ydGVkO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgSGFyZGhhdCB3aWxsIHJ1biBpbiB1c2luZyB0eXBlc2NyaXB0IG1vZGUuXG4gKiBAcGFyYW0gY29uZmlnUGF0aCBUaGUgY29uZmlnIHBhdGggaWYgcHJvdmlkZXIgYnkgdGhlIHVzZXIuXG4gKi9cbmZ1bmN0aW9uIHdpbGxSdW5XaXRoVHlwZXNjcmlwdChjb25maWdQYXRoKSB7XG4gICAgY29uc3QgY29uZmlnID0gKDAsIGNvbmZpZ19sb2FkaW5nXzEucmVzb2x2ZUNvbmZpZ1BhdGgpKGNvbmZpZ1BhdGgpO1xuICAgIHJldHVybiBpc05vbkVzbVR5cGVzY3JpcHRGaWxlKGNvbmZpZyk7XG59XG5leHBvcnRzLndpbGxSdW5XaXRoVHlwZXNjcmlwdCA9IHdpbGxSdW5XaXRoVHlwZXNjcmlwdDtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgSGFyZGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgd2l0aCB0eXBlc2NyaXB0LlxuICovXG5mdW5jdGlvbiBpc1J1bm5pbmdXaXRoVHlwZXNjcmlwdChjb25maWcpIHtcbiAgICByZXR1cm4gaXNOb25Fc21UeXBlc2NyaXB0RmlsZShjb25maWcucGF0aHMuY29uZmlnRmlsZSk7XG59XG5leHBvcnRzLmlzUnVubmluZ1dpdGhUeXBlc2NyaXB0ID0gaXNSdW5uaW5nV2l0aFR5cGVzY3JpcHQ7XG5mdW5jdGlvbiBpc1R5cGVzY3JpcHRTdXBwb3J0ZWQoKSB7XG4gICAgaWYgKGNhY2hlZElzVHlwZXNjcmlwdFN1cHBvcnRlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXZSByZXNvbHZlIHRoZXNlIGZyb20gSGFyZGhhdCdzIGluc3RhbGxhdGlvbi5cbiAgICAgICAgICAgIHJlcXVpcmUucmVzb2x2ZShcInR5cGVzY3JpcHRcIik7XG4gICAgICAgICAgICByZXF1aXJlLnJlc29sdmUoXCJ0cy1ub2RlXCIpO1xuICAgICAgICAgICAgY2FjaGVkSXNUeXBlc2NyaXB0U3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICBjYWNoZWRJc1R5cGVzY3JpcHRTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkSXNUeXBlc2NyaXB0U3VwcG9ydGVkO1xufVxuZXhwb3J0cy5pc1R5cGVzY3JpcHRTdXBwb3J0ZWQgPSBpc1R5cGVzY3JpcHRTdXBwb3J0ZWQ7XG5mdW5jdGlvbiBsb2FkVHNOb2RlKHRzQ29uZmlnUGF0aCwgc2hvdWxkVHlwZWNoZWNrID0gZmFsc2UpIHtcbiAgICB0cnkge1xuICAgICAgICByZXF1aXJlLnJlc29sdmUoXCJ0eXBlc2NyaXB0XCIpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuR0VORVJBTC5UWVBFU0NSSVBUX05PVF9JTlNUQUxMRUQpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXF1aXJlLnJlc29sdmUoXCJ0cy1ub2RlXCIpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuR0VORVJBTC5UU19OT0RFX05PVF9JTlNUQUxMRUQpO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBhcmUgcnVubmluZyB0ZXN0cyB3ZSBqdXN0IHdhbnQgdG8gdHJhbnNwaWxlXG4gICAgaWYgKCgwLCBleGVjdXRpb25fbW9kZV8xLmlzUnVubmluZ0hhcmRoYXRDb3JlVGVzdHMpKCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuICAgICAgICByZXF1aXJlKFwidHMtbm9kZS9yZWdpc3Rlci90cmFuc3BpbGUtb25seVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHNDb25maWdQYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuVFNfTk9ERV9QUk9KRUNUID0gdHNDb25maWdQYXRoO1xuICAgIH1cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub21pY2xhYnMvaGFyZGhhdC9pc3N1ZXMvMjY1XG4gICAgaWYgKHByb2Nlc3MuZW52LlRTX05PREVfRklMRVMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9jZXNzLmVudi5UU19OT0RFX0ZJTEVTID0gXCJ0cnVlXCI7XG4gICAgfVxuICAgIGxldCB0c05vZGVSZXF1aXJlbWVudCA9IFwidHMtbm9kZS9yZWdpc3RlclwiO1xuICAgIGlmICghc2hvdWxkVHlwZWNoZWNrKSB7XG4gICAgICAgIHRzTm9kZVJlcXVpcmVtZW50ICs9IFwiL3RyYW5zcGlsZS1vbmx5XCI7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXNcbiAgICByZXF1aXJlKHRzTm9kZVJlcXVpcmVtZW50KTtcbn1cbmV4cG9ydHMubG9hZFRzTm9kZSA9IGxvYWRUc05vZGU7XG5mdW5jdGlvbiBpc05vbkVzbVR5cGVzY3JpcHRGaWxlKHBhdGgpIHtcbiAgICByZXR1cm4gL1xcLih0c3xjdHMpJC9pLnRlc3QocGF0aCk7XG59XG5mdW5jdGlvbiBpc1R5cGVzY3JpcHRGaWxlKHBhdGgpIHtcbiAgICByZXR1cm4gL1xcLih0c3xjdHN8bXRzKSQvaS50ZXN0KHBhdGgpO1xufVxuZXhwb3J0cy5pc1R5cGVzY3JpcHRGaWxlID0gaXNUeXBlc2NyaXB0RmlsZTtcbmZ1bmN0aW9uIGlzSmF2YXNjcmlwdEZpbGUocGF0aCkge1xuICAgIHJldHVybiAvXFwuKGpzfGNqc3xtanMpJC9pLnRlc3QocGF0aCk7XG59XG5leHBvcnRzLmlzSmF2YXNjcmlwdEZpbGUgPSBpc0phdmFzY3JpcHRGaWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXNjcmlwdC1zdXBwb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/typescript-support.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/core/vars/vars-manager.js":
/*!*****************************************************************!*\
  !*** ./node_modules/hardhat/internal/core/vars/vars-manager.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VarsManager = void 0;\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:vars:varsManager\");\nclass VarsManager {\n    constructor(_varsFilePath) {\n        this._varsFilePath = _varsFilePath;\n        this._VERSION = \"hh-vars-1\";\n        this._ENV_VAR_PREFIX = \"HARDHAT_VAR_\";\n        log(\"Creating a new instance of VarsManager\");\n        this._initializeVarsFile();\n        this._storageCache = fs_extra_1.default.readJSONSync(this._varsFilePath);\n        this._envCache = {};\n        this._loadVarsFromEnv();\n    }\n    getStoragePath() {\n        return this._varsFilePath;\n    }\n    set(key, value) {\n        this.validateKey(key);\n        if (value === \"\") {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.INVALID_EMPTY_VALUE);\n        }\n        const vars = this._storageCache.vars;\n        vars[key] = { value };\n        this._writeStoredVars(vars);\n    }\n    has(key, includeEnvs = false) {\n        if (includeEnvs && key in this._envCache) {\n            return true;\n        }\n        return key in this._storageCache.vars;\n    }\n    get(key, defaultValue, includeEnvs = false) {\n        if (includeEnvs && key in this._envCache) {\n            return this._envCache[key];\n        }\n        return this._storageCache.vars[key]?.value ?? defaultValue;\n    }\n    getEnvVars() {\n        return Object.keys(this._envCache).map((k) => `${this._ENV_VAR_PREFIX}${k}`);\n    }\n    list() {\n        return Object.keys(this._storageCache.vars);\n    }\n    delete(key) {\n        const vars = this._storageCache.vars;\n        if (vars[key] === undefined)\n            return false;\n        delete vars[key];\n        this._writeStoredVars(vars);\n        return true;\n    }\n    validateKey(key) {\n        const KEY_REGEX = /^[a-zA-Z_]+[a-zA-Z0-9_]*$/;\n        if (!KEY_REGEX.test(key)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.VARS.INVALID_CONFIG_VAR_NAME, {\n                value: key,\n            });\n        }\n    }\n    _initializeVarsFile() {\n        if (!fs_extra_1.default.pathExistsSync(this._varsFilePath)) {\n            // Initialize the vars file if it does not exist\n            log(`Vars file do not exist. Creating a new one at '${this._varsFilePath}' with version '${this._VERSION}'`);\n            fs_extra_1.default.writeJSONSync(this._varsFilePath, this._getVarsFileStructure(), {\n                spaces: 2,\n            });\n        }\n    }\n    _getVarsFileStructure() {\n        return {\n            _format: this._VERSION,\n            vars: {},\n        };\n    }\n    _loadVarsFromEnv() {\n        log(\"Loading ENV variables if any\");\n        for (const key in process.env) {\n            if (key.startsWith(this._ENV_VAR_PREFIX)) {\n                const envVar = process.env[key];\n                if (envVar === undefined ||\n                    envVar.replace(/[\\s\\t]/g, \"\").length === 0) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.INVALID_ENV_VAR_VALUE, {\n                        varName: key,\n                        value: envVar,\n                    });\n                }\n                const envKey = key.replace(this._ENV_VAR_PREFIX, \"\");\n                this.validateKey(envKey);\n                // Store only in cache, not in a file, as the vars are sourced from environment variables\n                this._envCache[envKey] = envVar;\n            }\n        }\n    }\n    _writeStoredVars(vars) {\n        // ENV variables are not stored in the file\n        this._storageCache.vars = vars;\n        fs_extra_1.default.writeJSONSync(this._varsFilePath, this._storageCache, { spaces: 2 });\n    }\n}\nexports.VarsManager = VarsManager;\n//# sourceMappingURL=vars-manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9jb3JlL3ZhcnMvdmFycy1tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLG1DQUFtQyxtQkFBTyxDQUFDLDREQUFVO0FBQ3JELGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFPO0FBQy9DLGlCQUFpQixtQkFBTyxDQUFDLHVFQUFXO0FBQ3BDLHNCQUFzQixtQkFBTyxDQUFDLGlGQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELHFCQUFxQixFQUFFLEVBQUU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLG1CQUFtQixrQkFBa0IsY0FBYztBQUNySDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsV0FBVztBQUM5RjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2NvcmUvdmFycy92YXJzLW1hbmFnZXIuanM/NGZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmFyc01hbmFnZXIgPSB2b2lkIDA7XG5jb25zdCBmc19leHRyYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmcy1leHRyYVwiKSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4uL2Vycm9ycy1saXN0XCIpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJoYXJkaGF0OmNvcmU6dmFyczp2YXJzTWFuYWdlclwiKTtcbmNsYXNzIFZhcnNNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihfdmFyc0ZpbGVQYXRoKSB7XG4gICAgICAgIHRoaXMuX3ZhcnNGaWxlUGF0aCA9IF92YXJzRmlsZVBhdGg7XG4gICAgICAgIHRoaXMuX1ZFUlNJT04gPSBcImhoLXZhcnMtMVwiO1xuICAgICAgICB0aGlzLl9FTlZfVkFSX1BSRUZJWCA9IFwiSEFSREhBVF9WQVJfXCI7XG4gICAgICAgIGxvZyhcIkNyZWF0aW5nIGEgbmV3IGluc3RhbmNlIG9mIFZhcnNNYW5hZ2VyXCIpO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplVmFyc0ZpbGUoKTtcbiAgICAgICAgdGhpcy5fc3RvcmFnZUNhY2hlID0gZnNfZXh0cmFfMS5kZWZhdWx0LnJlYWRKU09OU3luYyh0aGlzLl92YXJzRmlsZVBhdGgpO1xuICAgICAgICB0aGlzLl9lbnZDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9sb2FkVmFyc0Zyb21FbnYoKTtcbiAgICB9XG4gICAgZ2V0U3RvcmFnZVBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YXJzRmlsZVBhdGg7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVLZXkoa2V5KTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLlZBUlMuSU5WQUxJRF9FTVBUWV9WQUxVRSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFycyA9IHRoaXMuX3N0b3JhZ2VDYWNoZS52YXJzO1xuICAgICAgICB2YXJzW2tleV0gPSB7IHZhbHVlIH07XG4gICAgICAgIHRoaXMuX3dyaXRlU3RvcmVkVmFycyh2YXJzKTtcbiAgICB9XG4gICAgaGFzKGtleSwgaW5jbHVkZUVudnMgPSBmYWxzZSkge1xuICAgICAgICBpZiAoaW5jbHVkZUVudnMgJiYga2V5IGluIHRoaXMuX2VudkNhY2hlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMuX3N0b3JhZ2VDYWNoZS52YXJzO1xuICAgIH1cbiAgICBnZXQoa2V5LCBkZWZhdWx0VmFsdWUsIGluY2x1ZGVFbnZzID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVFbnZzICYmIGtleSBpbiB0aGlzLl9lbnZDYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VudkNhY2hlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0b3JhZ2VDYWNoZS52YXJzW2tleV0/LnZhbHVlID8/IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgZ2V0RW52VmFycygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2VudkNhY2hlKS5tYXAoKGspID0+IGAke3RoaXMuX0VOVl9WQVJfUFJFRklYfSR7a31gKTtcbiAgICB9XG4gICAgbGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3N0b3JhZ2VDYWNoZS52YXJzKTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCB2YXJzID0gdGhpcy5fc3RvcmFnZUNhY2hlLnZhcnM7XG4gICAgICAgIGlmICh2YXJzW2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZGVsZXRlIHZhcnNba2V5XTtcbiAgICAgICAgdGhpcy5fd3JpdGVTdG9yZWRWYXJzKHZhcnMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFsaWRhdGVLZXkoa2V5KSB7XG4gICAgICAgIGNvbnN0IEtFWV9SRUdFWCA9IC9eW2EtekEtWl9dK1thLXpBLVowLTlfXSokLztcbiAgICAgICAgaWYgKCFLRVlfUkVHRVgudGVzdChrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLlZBUlMuSU5WQUxJRF9DT05GSUdfVkFSX05BTUUsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2luaXRpYWxpemVWYXJzRmlsZSgpIHtcbiAgICAgICAgaWYgKCFmc19leHRyYV8xLmRlZmF1bHQucGF0aEV4aXN0c1N5bmModGhpcy5fdmFyc0ZpbGVQYXRoKSkge1xuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdmFycyBmaWxlIGlmIGl0IGRvZXMgbm90IGV4aXN0XG4gICAgICAgICAgICBsb2coYFZhcnMgZmlsZSBkbyBub3QgZXhpc3QuIENyZWF0aW5nIGEgbmV3IG9uZSBhdCAnJHt0aGlzLl92YXJzRmlsZVBhdGh9JyB3aXRoIHZlcnNpb24gJyR7dGhpcy5fVkVSU0lPTn0nYCk7XG4gICAgICAgICAgICBmc19leHRyYV8xLmRlZmF1bHQud3JpdGVKU09OU3luYyh0aGlzLl92YXJzRmlsZVBhdGgsIHRoaXMuX2dldFZhcnNGaWxlU3RydWN0dXJlKCksIHtcbiAgICAgICAgICAgICAgICBzcGFjZXM6IDIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZ2V0VmFyc0ZpbGVTdHJ1Y3R1cmUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfZm9ybWF0OiB0aGlzLl9WRVJTSU9OLFxuICAgICAgICAgICAgdmFyczoge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9sb2FkVmFyc0Zyb21FbnYoKSB7XG4gICAgICAgIGxvZyhcIkxvYWRpbmcgRU5WIHZhcmlhYmxlcyBpZiBhbnlcIik7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb2Nlc3MuZW52KSB7XG4gICAgICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgodGhpcy5fRU5WX1ZBUl9QUkVGSVgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW52VmFyID0gcHJvY2Vzcy5lbnZba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoZW52VmFyID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgZW52VmFyLnJlcGxhY2UoL1tcXHNcXHRdL2csIFwiXCIpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLkFSR1VNRU5UUy5JTlZBTElEX0VOVl9WQVJfVkFMVUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhck5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbnZWYXIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBlbnZLZXkgPSBrZXkucmVwbGFjZSh0aGlzLl9FTlZfVkFSX1BSRUZJWCwgXCJcIik7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUtleShlbnZLZXkpO1xuICAgICAgICAgICAgICAgIC8vIFN0b3JlIG9ubHkgaW4gY2FjaGUsIG5vdCBpbiBhIGZpbGUsIGFzIHRoZSB2YXJzIGFyZSBzb3VyY2VkIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgICAgICAgICAgICAgdGhpcy5fZW52Q2FjaGVbZW52S2V5XSA9IGVudlZhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfd3JpdGVTdG9yZWRWYXJzKHZhcnMpIHtcbiAgICAgICAgLy8gRU5WIHZhcmlhYmxlcyBhcmUgbm90IHN0b3JlZCBpbiB0aGUgZmlsZVxuICAgICAgICB0aGlzLl9zdG9yYWdlQ2FjaGUudmFycyA9IHZhcnM7XG4gICAgICAgIGZzX2V4dHJhXzEuZGVmYXVsdC53cml0ZUpTT05TeW5jKHRoaXMuX3ZhcnNGaWxlUGF0aCwgdGhpcy5fc3RvcmFnZUNhY2hlLCB7IHNwYWNlczogMiB9KTtcbiAgICB9XG59XG5leHBvcnRzLlZhcnNNYW5hZ2VyID0gVmFyc01hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YXJzLW1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/core/vars/vars-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/jsonrpc/handler.js":
/*!**************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/jsonrpc/handler.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsonRpcHandler = void 0;\nconst raw_body_1 = __importDefault(__webpack_require__(/*! raw-body */ \"(ssr)/./node_modules/raw-body/index.js\"));\nconst json_stream_stringify_1 = __webpack_require__(/*! json-stream-stringify */ \"(ssr)/./node_modules/json-stream-stringify/lib/umd/index.js\");\nconst errors_1 = __webpack_require__(/*! ../../core/providers/errors */ \"(ssr)/./node_modules/hardhat/internal/core/providers/errors.js\");\nconst jsonrpc_1 = __webpack_require__(/*! ../../util/jsonrpc */ \"(ssr)/./node_modules/hardhat/internal/util/jsonrpc.js\");\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\nclass JsonRpcHandler {\n    constructor(_provider) {\n        this._provider = _provider;\n        this.handleHttp = async (req, res) => {\n            this._setCorsHeaders(res);\n            if (req.method === \"OPTIONS\") {\n                this._sendEmptyResponse(res);\n                return;\n            }\n            let jsonHttpRequest;\n            try {\n                jsonHttpRequest = await _readJsonHttpRequest(req);\n            }\n            catch (error) {\n                this._sendResponse(res, _handleError(error));\n                return;\n            }\n            if (Array.isArray(jsonHttpRequest)) {\n                const responses = await Promise.all(jsonHttpRequest.map((singleReq) => this._handleSingleRequest(singleReq)));\n                this._sendResponse(res, responses);\n                return;\n            }\n            const rpcResp = await this._handleSingleRequest(jsonHttpRequest);\n            this._sendResponse(res, rpcResp);\n        };\n        this.handleWs = async (ws) => {\n            const subscriptions = [];\n            let isClosed = false;\n            const listener = (payload) => {\n                // Don't attempt to send a message to the websocket if we already know it is closed,\n                // or the current websocket connection isn't interested in the particular subscription.\n                if (isClosed || !subscriptions.includes(payload.subscription)) {\n                    return;\n                }\n                try {\n                    ws.send(JSON.stringify({\n                        jsonrpc: \"2.0\",\n                        method: \"eth_subscription\",\n                        params: payload,\n                    }));\n                }\n                catch (error) {\n                    _handleError(error);\n                }\n            };\n            // Handle eth_subscribe notifications.\n            this._provider.addListener(\"notification\", listener);\n            ws.on(\"message\", async (msg) => {\n                let rpcReq;\n                let rpcResp;\n                try {\n                    rpcReq = _readWsRequest(msg);\n                    rpcResp = Array.isArray(rpcReq)\n                        ? await Promise.all(rpcReq.map((req) => this._handleSingleWsRequest(req, subscriptions)))\n                        : await this._handleSingleWsRequest(rpcReq, subscriptions);\n                }\n                catch (error) {\n                    rpcResp = _handleError(error);\n                }\n                ws.send(JSON.stringify(rpcResp));\n            });\n            ws.on(\"close\", () => {\n                // Remove eth_subscribe listener.\n                this._provider.removeListener(\"notification\", listener);\n                // Clear any active subscriptions for the closed websocket connection.\n                isClosed = true;\n                subscriptions.forEach(async (subscriptionId) => {\n                    await this._provider.request({\n                        method: \"eth_unsubscribe\",\n                        params: [subscriptionId],\n                    });\n                });\n            });\n        };\n        this._handleRequest = async (req) => {\n            const result = await this._provider.request({\n                method: req.method,\n                params: req.params,\n            });\n            return {\n                jsonrpc: \"2.0\",\n                id: req.id,\n                result,\n            };\n        };\n    }\n    _sendEmptyResponse(res) {\n        res.writeHead(200);\n        res.end();\n    }\n    _setCorsHeaders(res) {\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Request-Method\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Methods\", \"OPTIONS, GET\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n    }\n    _sendResponse(res, rpcResp) {\n        res.statusCode = 200;\n        res.setHeader(\"Content-Type\", \"application/json\");\n        new json_stream_stringify_1.JsonStreamStringify(rpcResp).pipe(res);\n    }\n    async _handleSingleRequest(req) {\n        if (!(0, jsonrpc_1.isValidJsonRequest)(req)) {\n            return _handleError(new errors_1.InvalidRequestError(\"Invalid request\"));\n        }\n        const rpcReq = req;\n        let rpcResp;\n        try {\n            rpcResp = await this._handleRequest(rpcReq);\n        }\n        catch (error) {\n            rpcResp = _handleError(error);\n        }\n        // Validate the RPC response.\n        if (!(0, jsonrpc_1.isValidJsonResponse)(rpcResp)) {\n            // Malformed response coming from the provider, report to user as an internal error.\n            rpcResp = _handleError(new errors_1.InternalError(\"Internal error\"));\n        }\n        if (rpcReq !== undefined) {\n            rpcResp.id = rpcReq.id !== undefined ? rpcReq.id : null;\n        }\n        return rpcResp;\n    }\n    async _handleSingleWsRequest(rpcReq, subscriptions) {\n        const rpcResp = await this._handleSingleRequest(rpcReq);\n        // If eth_subscribe was successful, keep track of the subscription id,\n        // so we can cleanup on websocket close.\n        if (rpcReq.method === \"eth_subscribe\" &&\n            (0, jsonrpc_1.isSuccessfulJsonResponse)(rpcResp)) {\n            subscriptions.push(rpcResp.result);\n        }\n        return rpcResp;\n    }\n}\nexports.JsonRpcHandler = JsonRpcHandler;\nconst _readJsonHttpRequest = async (req) => {\n    let json;\n    try {\n        const buf = await (0, raw_body_1.default)(req);\n        const text = buf.toString();\n        json = JSON.parse(text);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            throw new errors_1.InvalidJsonInputError(`Parse error: ${error.message}`);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n    }\n    return json;\n};\nconst _readWsRequest = (msg) => {\n    let json;\n    try {\n        json = JSON.parse(msg);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            throw new errors_1.InvalidJsonInputError(`Parse error: ${error.message}`);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n    }\n    return json;\n};\nconst _handleError = (error) => {\n    // extract the relevant fields from the error before wrapping it\n    let txHash;\n    let returnData;\n    if (error.transactionHash !== undefined) {\n        txHash = error.transactionHash;\n    }\n    if (error.data !== undefined) {\n        if (error.data?.data !== undefined) {\n            returnData = error.data.data;\n        }\n        else {\n            returnData = error.data;\n        }\n        if (txHash === undefined && error.data?.transactionHash !== undefined) {\n            txHash = error.data.transactionHash;\n        }\n    }\n    // In case of non-hardhat error, treat it as internal and associate the appropriate error code.\n    if (!errors_1.ProviderError.isProviderError(error)) {\n        error = new errors_1.InternalError(error);\n    }\n    const response = {\n        jsonrpc: \"2.0\",\n        id: null,\n        error: {\n            code: error.code,\n            message: error.message,\n        },\n    };\n    response.error.data = {\n        message: error.message,\n    };\n    if (txHash !== undefined) {\n        response.error.data.txHash = txHash;\n    }\n    if (returnData !== undefined) {\n        response.error.data.data = returnData;\n    }\n    return response;\n};\n//# sourceMappingURL=handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/jsonrpc/handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/jsonrpc/server.js":
/*!*************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/jsonrpc/server.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JsonRpcServer = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst http_1 = __importDefault(__webpack_require__(/*! http */ \"http\"));\nconst http_2 = __webpack_require__(/*! ../../core/providers/http */ \"(ssr)/./node_modules/hardhat/internal/core/providers/http.js\");\nconst handler_1 = __webpack_require__(/*! ./handler */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/jsonrpc/handler.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:hardhat-network:jsonrpc\");\nclass JsonRpcServer {\n    constructor(config) {\n        this.getProvider = (name = \"json-rpc\") => {\n            const { Client } = __webpack_require__(/*! undici */ \"(ssr)/./node_modules/undici/index.js\");\n            const { address, port } = this._httpServer.address();\n            const dispatcher = new Client(`http://${address}:${port}/`, {\n                keepAliveTimeout: 10,\n                keepAliveMaxTimeout: 10,\n            });\n            return new http_2.HttpProvider(`http://${address}:${port}/`, name, {}, 20000, dispatcher);\n        };\n        this.listen = () => {\n            return new Promise((resolve) => {\n                log(`Starting JSON-RPC server on port ${this._config.port}`);\n                this._httpServer.listen(this._config.port, this._config.hostname, () => {\n                    // We get the address and port directly from the server in order to handle random port allocation with `0`.\n                    const address = this._httpServer.address(); // TCP sockets return AddressInfo\n                    resolve(address);\n                });\n            });\n        };\n        this.waitUntilClosed = async () => {\n            const httpServerClosed = new Promise((resolve) => {\n                this._httpServer.once(\"close\", resolve);\n            });\n            const wsServerClosed = new Promise((resolve) => {\n                this._wsServer.once(\"close\", resolve);\n            });\n            await Promise.all([httpServerClosed, wsServerClosed]);\n        };\n        this.close = async () => {\n            await Promise.all([\n                new Promise((resolve, reject) => {\n                    log(\"Closing JSON-RPC server\");\n                    this._httpServer.close((err) => {\n                        if (err !== null && err !== undefined) {\n                            log(\"Failed to close JSON-RPC server\");\n                            reject(err);\n                            return;\n                        }\n                        log(\"JSON-RPC server closed\");\n                        resolve();\n                    });\n                }),\n                new Promise((resolve, reject) => {\n                    log(\"Closing websocket server\");\n                    this._wsServer.close((err) => {\n                        if (err !== null && err !== undefined) {\n                            log(\"Failed to close websocket server\");\n                            reject(err);\n                            return;\n                        }\n                        log(\"Websocket server closed\");\n                        resolve();\n                    });\n                }),\n            ]);\n        };\n        const { Server: WSServer } = __webpack_require__(/*! ws */ \"(ssr)/./node_modules/ws/index.js\");\n        this._config = config;\n        const handler = new handler_1.JsonRpcHandler(config.provider);\n        this._httpServer = http_1.default.createServer();\n        this._wsServer = new WSServer({\n            server: this._httpServer,\n        });\n        this._httpServer.on(\"request\", handler.handleHttp);\n        this._wsServer.on(\"connection\", handler.handleWs);\n    }\n}\nexports.JsonRpcServer = JsonRpcServer;\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvanNvbnJwYy9zZXJ2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsZ0NBQWdDLG1CQUFPLENBQUMsc0RBQU87QUFDL0MsK0JBQStCLG1CQUFPLENBQUMsa0JBQU07QUFDN0MsZUFBZSxtQkFBTyxDQUFDLCtGQUEyQjtBQUNsRCxrQkFBa0IsbUJBQU8sQ0FBQywyRkFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTLEVBQUUsbUJBQU8sQ0FBQyxvREFBUTtBQUMvQyxvQkFBb0IsZ0JBQWdCO0FBQ3BDLG9EQUFvRCxRQUFRLEdBQUcsS0FBSztBQUNwRTtBQUNBO0FBQ0EsYUFBYTtBQUNiLHFEQUFxRCxRQUFRLEdBQUcsS0FBSyxZQUFZO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxrQkFBa0I7QUFDMUU7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUIsRUFBRSxtQkFBTyxDQUFDLDRDQUFJO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvaGFyZGhhdC1uZXR3b3JrL2pzb25ycGMvc2VydmVyLmpzPzhkOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkpzb25ScGNTZXJ2ZXIgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBodHRwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImh0dHBcIikpO1xuY29uc3QgaHR0cF8yID0gcmVxdWlyZShcIi4uLy4uL2NvcmUvcHJvdmlkZXJzL2h0dHBcIik7XG5jb25zdCBoYW5kbGVyXzEgPSByZXF1aXJlKFwiLi9oYW5kbGVyXCIpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJoYXJkaGF0OmNvcmU6aGFyZGhhdC1uZXR3b3JrOmpzb25ycGNcIik7XG5jbGFzcyBKc29uUnBjU2VydmVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5nZXRQcm92aWRlciA9IChuYW1lID0gXCJqc29uLXJwY1wiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IENsaWVudCB9ID0gcmVxdWlyZShcInVuZGljaVwiKTtcbiAgICAgICAgICAgIGNvbnN0IHsgYWRkcmVzcywgcG9ydCB9ID0gdGhpcy5faHR0cFNlcnZlci5hZGRyZXNzKCk7XG4gICAgICAgICAgICBjb25zdCBkaXNwYXRjaGVyID0gbmV3IENsaWVudChgaHR0cDovLyR7YWRkcmVzc306JHtwb3J0fS9gLCB7XG4gICAgICAgICAgICAgICAga2VlcEFsaXZlVGltZW91dDogMTAsXG4gICAgICAgICAgICAgICAga2VlcEFsaXZlTWF4VGltZW91dDogMTAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgaHR0cF8yLkh0dHBQcm92aWRlcihgaHR0cDovLyR7YWRkcmVzc306JHtwb3J0fS9gLCBuYW1lLCB7fSwgMjAwMDAsIGRpc3BhdGNoZXIpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZyhgU3RhcnRpbmcgSlNPTi1SUEMgc2VydmVyIG9uIHBvcnQgJHt0aGlzLl9jb25maWcucG9ydH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9odHRwU2VydmVyLmxpc3Rlbih0aGlzLl9jb25maWcucG9ydCwgdGhpcy5fY29uZmlnLmhvc3RuYW1lLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGdldCB0aGUgYWRkcmVzcyBhbmQgcG9ydCBkaXJlY3RseSBmcm9tIHRoZSBzZXJ2ZXIgaW4gb3JkZXIgdG8gaGFuZGxlIHJhbmRvbSBwb3J0IGFsbG9jYXRpb24gd2l0aCBgMGAuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLl9odHRwU2VydmVyLmFkZHJlc3MoKTsgLy8gVENQIHNvY2tldHMgcmV0dXJuIEFkZHJlc3NJbmZvXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53YWl0VW50aWxDbG9zZWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBodHRwU2VydmVyQ2xvc2VkID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9odHRwU2VydmVyLm9uY2UoXCJjbG9zZVwiLCByZXNvbHZlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgd3NTZXJ2ZXJDbG9zZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dzU2VydmVyLm9uY2UoXCJjbG9zZVwiLCByZXNvbHZlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW2h0dHBTZXJ2ZXJDbG9zZWQsIHdzU2VydmVyQ2xvc2VkXSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsb2coXCJDbG9zaW5nIEpTT04tUlBDIHNlcnZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faHR0cFNlcnZlci5jbG9zZSgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyICE9PSBudWxsICYmIGVyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKFwiRmFpbGVkIHRvIGNsb3NlIEpTT04tUlBDIHNlcnZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2coXCJKU09OLVJQQyBzZXJ2ZXIgY2xvc2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvZyhcIkNsb3Npbmcgd2Vic29ja2V0IHNlcnZlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd3NTZXJ2ZXIuY2xvc2UoKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVyciAhPT0gbnVsbCAmJiBlcnIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhcIkZhaWxlZCB0byBjbG9zZSB3ZWJzb2NrZXQgc2VydmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhcIldlYnNvY2tldCBzZXJ2ZXIgY2xvc2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IFNlcnZlcjogV1NTZXJ2ZXIgfSA9IHJlcXVpcmUoXCJ3c1wiKTtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IGhhbmRsZXJfMS5Kc29uUnBjSGFuZGxlcihjb25maWcucHJvdmlkZXIpO1xuICAgICAgICB0aGlzLl9odHRwU2VydmVyID0gaHR0cF8xLmRlZmF1bHQuY3JlYXRlU2VydmVyKCk7XG4gICAgICAgIHRoaXMuX3dzU2VydmVyID0gbmV3IFdTU2VydmVyKHtcbiAgICAgICAgICAgIHNlcnZlcjogdGhpcy5faHR0cFNlcnZlcixcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2h0dHBTZXJ2ZXIub24oXCJyZXF1ZXN0XCIsIGhhbmRsZXIuaGFuZGxlSHR0cCk7XG4gICAgICAgIHRoaXMuX3dzU2VydmVyLm9uKFwiY29ubmVjdGlvblwiLCBoYW5kbGVyLmhhbmRsZVdzKTtcbiAgICB9XG59XG5leHBvcnRzLkpzb25ScGNTZXJ2ZXIgPSBKc29uUnBjU2VydmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/jsonrpc/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/modules/logger.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/modules/logger.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.replaceLastLine = exports.printLine = void 0;\nconst ansi_escapes_1 = __importDefault(__webpack_require__(/*! ansi-escapes */ \"(ssr)/./node_modules/ansi-escapes/index.js\"));\nfunction printLine(line) {\n    console.log(line);\n}\nexports.printLine = printLine;\nfunction replaceLastLine(newLine) {\n    if (process.stdout.isTTY === true) {\n        process.stdout.write(\n        // eslint-disable-next-line prefer-template\n        ansi_escapes_1.default.cursorHide +\n            ansi_escapes_1.default.cursorPrevLine +\n            newLine +\n            ansi_escapes_1.default.eraseEndLine +\n            \"\\n\" +\n            ansi_escapes_1.default.cursorShow);\n    }\n    else {\n        process.stdout.write(`${newLine}\\n`);\n    }\n}\nexports.replaceLastLine = replaceLastLine;\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvcHJvdmlkZXIvbW9kdWxlcy9sb2dnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxpQkFBaUI7QUFDM0MsdUNBQXVDLG1CQUFPLENBQUMsZ0VBQWM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRO0FBQ3hDO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvaGFyZGhhdC1uZXR3b3JrL3Byb3ZpZGVyL21vZHVsZXMvbG9nZ2VyLmpzPzRmYmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlcGxhY2VMYXN0TGluZSA9IGV4cG9ydHMucHJpbnRMaW5lID0gdm9pZCAwO1xuY29uc3QgYW5zaV9lc2NhcGVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFuc2ktZXNjYXBlc1wiKSk7XG5mdW5jdGlvbiBwcmludExpbmUobGluZSkge1xuICAgIGNvbnNvbGUubG9nKGxpbmUpO1xufVxuZXhwb3J0cy5wcmludExpbmUgPSBwcmludExpbmU7XG5mdW5jdGlvbiByZXBsYWNlTGFzdExpbmUobmV3TGluZSkge1xuICAgIGlmIChwcm9jZXNzLnN0ZG91dC5pc1RUWSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZVxuICAgICAgICBhbnNpX2VzY2FwZXNfMS5kZWZhdWx0LmN1cnNvckhpZGUgK1xuICAgICAgICAgICAgYW5zaV9lc2NhcGVzXzEuZGVmYXVsdC5jdXJzb3JQcmV2TGluZSArXG4gICAgICAgICAgICBuZXdMaW5lICtcbiAgICAgICAgICAgIGFuc2lfZXNjYXBlc18xLmRlZmF1bHQuZXJhc2VFbmRMaW5lICtcbiAgICAgICAgICAgIFwiXFxuXCIgK1xuICAgICAgICAgICAgYW5zaV9lc2NhcGVzXzEuZGVmYXVsdC5jdXJzb3JTaG93KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGAke25ld0xpbmV9XFxuYCk7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBsYWNlTGFzdExpbmUgPSByZXBsYWNlTGFzdExpbmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/modules/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/provider.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createHardhatNetworkProvider = exports.EdrProviderWrapper = exports.getNodeConfig = exports.getGlobalEdrContext = exports.DEFAULT_COINBASE = void 0;\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst semver_1 = __importDefault(__webpack_require__(/*! semver */ \"(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\"));\nconst napi_rs_1 = __webpack_require__(/*! ../../../common/napi-rs */ \"(ssr)/./node_modules/hardhat/common/napi-rs.js\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst errors_1 = __webpack_require__(/*! ../../core/providers/errors */ \"(ssr)/./node_modules/hardhat/internal/core/providers/errors.js\");\nconst http_1 = __webpack_require__(/*! ../../core/providers/http */ \"(ssr)/./node_modules/hardhat/internal/core/providers/http.js\");\nconst hardforks_1 = __webpack_require__(/*! ../../util/hardforks */ \"(ssr)/./node_modules/hardhat/internal/util/hardforks.js\");\nconst consoleLogger_1 = __webpack_require__(/*! ../stack-traces/consoleLogger */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/consoleLogger.js\");\nconst constants_2 = __webpack_require__(/*! ../stack-traces/constants */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/constants.js\");\nconst solidity_errors_1 = __webpack_require__(/*! ../stack-traces/solidity-errors */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../../util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst convertToEdr_1 = __webpack_require__(/*! ./utils/convertToEdr */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/convertToEdr.js\");\nconst makeCommon_1 = __webpack_require__(/*! ./utils/makeCommon */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/makeCommon.js\");\nconst logger_1 = __webpack_require__(/*! ./modules/logger */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/modules/logger.js\");\nconst minimal_vm_1 = __webpack_require__(/*! ./vm/minimal-vm */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/vm/minimal-vm.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:hardhat-network:provider\");\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\nexports.DEFAULT_COINBASE = \"0xc014ba5ec014ba5ec014ba5ec014ba5ec014ba5e\";\nlet _globalEdrContext;\n// Lazy initialize the global EDR context.\nfunction getGlobalEdrContext() {\n    const { EdrContext } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/edr\");\n    if (_globalEdrContext === undefined) {\n        // Only one is allowed to exist\n        _globalEdrContext = new EdrContext();\n    }\n    return _globalEdrContext;\n}\nexports.getGlobalEdrContext = getGlobalEdrContext;\nfunction getNodeConfig(config, tracingConfig) {\n    return {\n        automine: config.automine,\n        blockGasLimit: config.blockGasLimit,\n        minGasPrice: config.minGasPrice,\n        genesisAccounts: config.genesisAccounts,\n        allowUnlimitedContractSize: config.allowUnlimitedContractSize,\n        tracingConfig,\n        initialBaseFeePerGas: config.initialBaseFeePerGas,\n        mempoolOrder: config.mempoolOrder,\n        hardfork: config.hardfork,\n        chainId: config.chainId,\n        networkId: config.networkId,\n        initialDate: config.initialDate,\n        forkConfig: config.forkConfig,\n        forkCachePath: config.forkConfig !== undefined ? config.forkCachePath : undefined,\n        coinbase: config.coinbase ?? exports.DEFAULT_COINBASE,\n        chains: config.chains,\n        allowBlocksWithSameTimestamp: config.allowBlocksWithSameTimestamp,\n        enableTransientStorage: config.enableTransientStorage,\n    };\n}\nexports.getNodeConfig = getNodeConfig;\nclass EdrProviderEventAdapter extends events_1.EventEmitter {\n}\nclass EdrProviderWrapper extends events_1.EventEmitter {\n    constructor(_provider, \n    // we add this for backwards-compatibility with plugins like solidity-coverage\n    _node, \n    // The common configuration for EthereumJS VM is not used by EDR, but tests expect it as part of the provider.\n    _common) {\n        super();\n        this._provider = _provider;\n        this._node = _node;\n        this._common = _common;\n        this._failedStackTraces = 0;\n    }\n    static async create(config, loggerConfig, tracingConfig) {\n        const { Provider } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/edr\");\n        const coinbase = config.coinbase ?? exports.DEFAULT_COINBASE;\n        let fork;\n        if (config.forkConfig !== undefined) {\n            let httpHeaders;\n            if (config.forkConfig.httpHeaders !== undefined) {\n                httpHeaders = [];\n                for (const [name, value] of Object.entries(config.forkConfig.httpHeaders)) {\n                    httpHeaders.push({\n                        name,\n                        value,\n                    });\n                }\n            }\n            fork = {\n                jsonRpcUrl: config.forkConfig.jsonRpcUrl,\n                blockNumber: config.forkConfig.blockNumber !== undefined\n                    ? BigInt(config.forkConfig.blockNumber)\n                    : undefined,\n                httpHeaders,\n            };\n        }\n        const initialDate = config.initialDate !== undefined\n            ? BigInt(Math.floor(config.initialDate.getTime() / 1000))\n            : undefined;\n        // To accomodate construction ordering, we need an adapter to forward events\n        // from the EdrProvider callback to the wrapper's listener\n        const eventAdapter = new EdrProviderEventAdapter();\n        const printLineFn = loggerConfig.printLineFn ?? logger_1.printLine;\n        const replaceLastLineFn = loggerConfig.replaceLastLineFn ?? logger_1.replaceLastLine;\n        const hardforkName = (0, hardforks_1.getHardforkName)(config.hardfork);\n        const provider = await Provider.withConfig(getGlobalEdrContext(), {\n            allowBlocksWithSameTimestamp: config.allowBlocksWithSameTimestamp ?? false,\n            allowUnlimitedContractSize: config.allowUnlimitedContractSize,\n            bailOnCallFailure: config.throwOnCallFailures,\n            bailOnTransactionFailure: config.throwOnTransactionFailures,\n            blockGasLimit: BigInt(config.blockGasLimit),\n            chainId: BigInt(config.chainId),\n            chains: Array.from(config.chains, ([chainId, hardforkConfig]) => {\n                return {\n                    chainId: BigInt(chainId),\n                    hardforks: Array.from(hardforkConfig.hardforkHistory, ([hardfork, blockNumber]) => {\n                        return {\n                            blockNumber: BigInt(blockNumber),\n                            specId: (0, convertToEdr_1.ethereumsjsHardforkToEdrSpecId)((0, hardforks_1.getHardforkName)(hardfork)),\n                        };\n                    }),\n                };\n            }),\n            cacheDir: config.forkCachePath,\n            coinbase: Buffer.from(coinbase.slice(2), \"hex\"),\n            enableRip7212: config.enableRip7212,\n            fork,\n            hardfork: (0, convertToEdr_1.ethereumsjsHardforkToEdrSpecId)(hardforkName),\n            genesisAccounts: config.genesisAccounts.map((account) => {\n                return {\n                    secretKey: account.privateKey,\n                    balance: BigInt(account.balance),\n                };\n            }),\n            initialDate,\n            initialBaseFeePerGas: config.initialBaseFeePerGas !== undefined\n                ? BigInt(config.initialBaseFeePerGas)\n                : undefined,\n            minGasPrice: config.minGasPrice,\n            mining: {\n                autoMine: config.automine,\n                interval: (0, convertToEdr_1.ethereumjsIntervalMiningConfigToEdr)(config.intervalMining),\n                memPool: {\n                    order: (0, convertToEdr_1.ethereumjsMempoolOrderToEdrMineOrdering)(config.mempoolOrder),\n                },\n            },\n            networkId: BigInt(config.networkId),\n        }, {\n            enable: loggerConfig.enabled,\n            decodeConsoleLogInputsCallback: consoleLogger_1.ConsoleLogger.getDecodedLogs,\n            printLineCallback: (message, replace) => {\n                if (replace) {\n                    replaceLastLineFn(message);\n                }\n                else {\n                    printLineFn(message);\n                }\n            },\n        }, tracingConfig ?? {}, (event) => {\n            eventAdapter.emit(\"ethEvent\", event);\n        });\n        const minimalEthereumJsNode = {\n            _vm: (0, minimal_vm_1.getMinimalEthereumJsVm)(provider),\n        };\n        const common = (0, makeCommon_1.makeCommon)(getNodeConfig(config));\n        const wrapper = new EdrProviderWrapper(provider, minimalEthereumJsNode, common);\n        // Pass through all events from the provider\n        eventAdapter.addListener(\"ethEvent\", wrapper._ethEventListener.bind(wrapper));\n        return wrapper;\n    }\n    async request(args) {\n        if (args.params !== undefined && !Array.isArray(args.params)) {\n            throw new errors_1.InvalidInputError(\"Hardhat Network doesn't support JSON-RPC params sent as an object\");\n        }\n        const params = args.params ?? [];\n        if (args.method === \"hardhat_getStackTraceFailuresCount\") {\n            // stubbed for backwards compatibility\n            return 0;\n        }\n        const stringifiedArgs = JSON.stringify({\n            method: args.method,\n            params,\n        });\n        const responseObject = await this._provider.handleRequest(stringifiedArgs);\n        let response;\n        if (typeof responseObject.data === \"string\") {\n            response = JSON.parse(responseObject.data);\n        }\n        else {\n            response = responseObject.data;\n        }\n        const needsTraces = this._node._vm.evm.events.eventNames().length > 0 ||\n            this._node._vm.events.eventNames().length > 0;\n        if (needsTraces) {\n            const rawTraces = responseObject.traces;\n            for (const rawTrace of rawTraces) {\n                // For other consumers in JS we need to marshall the entire trace over FFI\n                const trace = rawTrace.trace();\n                // beforeTx event\n                if (this._node._vm.events.listenerCount(\"beforeTx\") > 0) {\n                    this._node._vm.events.emit(\"beforeTx\");\n                }\n                for (const traceItem of trace) {\n                    // step event\n                    if (\"pc\" in traceItem) {\n                        if (this._node._vm.evm.events.listenerCount(\"step\") > 0) {\n                            this._node._vm.evm.events.emit(\"step\", (0, convertToEdr_1.edrTracingStepToMinimalInterpreterStep)(traceItem));\n                        }\n                    }\n                    // afterMessage event\n                    else if (\"executionResult\" in traceItem) {\n                        if (this._node._vm.evm.events.listenerCount(\"afterMessage\") > 0) {\n                            this._node._vm.evm.events.emit(\"afterMessage\", (0, convertToEdr_1.edrTracingMessageResultToMinimalEVMResult)(traceItem));\n                        }\n                    }\n                    // beforeMessage event\n                    else {\n                        if (this._node._vm.evm.events.listenerCount(\"beforeMessage\") > 0) {\n                            this._node._vm.evm.events.emit(\"beforeMessage\", (0, convertToEdr_1.edrTracingMessageToMinimalMessage)(traceItem));\n                        }\n                    }\n                }\n                // afterTx event\n                if (this._node._vm.events.listenerCount(\"afterTx\") > 0) {\n                    this._node._vm.events.emit(\"afterTx\");\n                }\n            }\n        }\n        if ((0, http_1.isErrorResponse)(response)) {\n            let error;\n            let stackTrace = null;\n            try {\n                stackTrace = responseObject.stackTrace();\n            }\n            catch (e) {\n                log(\"Failed to get stack trace: %O\", e);\n            }\n            if (stackTrace !== null) {\n                error = (0, solidity_errors_1.encodeSolidityStackTrace)(response.error.message, stackTrace);\n                // Pass data and transaction hash from the original error\n                error.data = response.error.data?.data ?? undefined;\n                error.transactionHash =\n                    response.error.data?.transactionHash ?? undefined;\n            }\n            else {\n                if (response.error.code === errors_1.InvalidArgumentsError.CODE) {\n                    error = new errors_1.InvalidArgumentsError(response.error.message);\n                }\n                else {\n                    error = new errors_1.ProviderError(response.error.message, response.error.code);\n                }\n                error.data = response.error.data;\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n        if (args.method === \"hardhat_reset\") {\n            this.emit(constants_1.HARDHAT_NETWORK_RESET_EVENT);\n        }\n        else if (args.method === \"evm_revert\") {\n            this.emit(constants_1.HARDHAT_NETWORK_REVERT_SNAPSHOT_EVENT);\n        }\n        // Override EDR version string with Hardhat version string with EDR backend,\n        // e.g. `HardhatNetwork/2.19.0/@nomicfoundation/edr/0.2.0-dev`\n        if (args.method === \"web3_clientVersion\") {\n            return clientVersion(response.result);\n        }\n        else if (args.method === \"debug_traceTransaction\" ||\n            args.method === \"debug_traceCall\") {\n            return (0, convertToEdr_1.edrRpcDebugTraceToHardhat)(response.result);\n        }\n        else {\n            return response.result;\n        }\n    }\n    // temporarily added to make smock work with HH+EDR\n    _setCallOverrideCallback(callback) {\n        this._callOverrideCallback = callback;\n        this._provider.setCallOverrideCallback(async (address, data) => {\n            return this._callOverrideCallback?.(address, data);\n        });\n    }\n    _setVerboseTracing(enabled) {\n        this._provider.setVerboseTracing(enabled);\n    }\n    _ethEventListener(event) {\n        const subscription = `0x${event.filterId.toString(16)}`;\n        const results = Array.isArray(event.result) ? event.result : [event.result];\n        for (const result of results) {\n            this._emitLegacySubscriptionEvent(subscription, result);\n            this._emitEip1193SubscriptionEvent(subscription, result);\n        }\n    }\n    _emitLegacySubscriptionEvent(subscription, result) {\n        this.emit(\"notification\", {\n            subscription,\n            result,\n        });\n    }\n    _emitEip1193SubscriptionEvent(subscription, result) {\n        const message = {\n            type: \"eth_subscription\",\n            data: {\n                subscription,\n                result,\n            },\n        };\n        this.emit(\"message\", message);\n    }\n}\nexports.EdrProviderWrapper = EdrProviderWrapper;\nasync function clientVersion(edrClientVersion) {\n    const hardhatPackage = await (0, packageInfo_1.getPackageJson)();\n    const edrVersion = edrClientVersion.split(\"/\")[1];\n    return `HardhatNetwork/${hardhatPackage.version}/@nomicfoundation/edr/${edrVersion}`;\n}\nasync function createHardhatNetworkProvider(hardhatNetworkProviderConfig, loggerConfig, artifacts) {\n    log(\"Making tracing config\");\n    const tracingConfig = await makeTracingConfig(artifacts);\n    log(\"Creating EDR provider\");\n    const provider = await EdrProviderWrapper.create(hardhatNetworkProviderConfig, loggerConfig, tracingConfig);\n    log(\"EDR provider created\");\n    return provider;\n}\nexports.createHardhatNetworkProvider = createHardhatNetworkProvider;\nasync function makeTracingConfig(artifacts) {\n    if (artifacts !== undefined) {\n        const buildInfos = [];\n        const buildInfoFiles = await artifacts.getBuildInfoPaths();\n        try {\n            for (const buildInfoFile of buildInfoFiles) {\n                const buildInfo = await fs_extra_1.default.readJson(buildInfoFile);\n                if (semver_1.default.gte(buildInfo.solcVersion, constants_2.FIRST_SOLC_VERSION_SUPPORTED)) {\n                    buildInfos.push(buildInfo);\n                }\n            }\n            return {\n                buildInfos,\n            };\n        }\n        catch (error) {\n            console.warn(picocolors_1.default.yellow(\"Stack traces engine could not be initialized. Run Hardhat with --verbose to learn more.\"));\n            log(\"Solidity stack traces disabled: Failed to read solc's input and output files. Please report this to help us improve Hardhat.\\n\", error);\n        }\n    }\n}\n//# sourceMappingURL=provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/return-data.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/return-data.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReturnData = void 0;\nconst napi_rs_1 = __webpack_require__(/*! ../../../common/napi-rs */ \"(ssr)/./node_modules/hardhat/common/napi-rs.js\");\nconst { ReturnData } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/edr\");\nexports.ReturnData = ReturnData;\n//# sourceMappingURL=return-data.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvcHJvdmlkZXIvcmV0dXJuLWRhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGtCQUFrQixtQkFBTyxDQUFDLCtFQUF5QjtBQUNuRCxRQUFRLGFBQWE7QUFDckIsa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2hhcmRoYXQtbmV0d29yay9wcm92aWRlci9yZXR1cm4tZGF0YS5qcz9jMmUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZXR1cm5EYXRhID0gdm9pZCAwO1xuY29uc3QgbmFwaV9yc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi9uYXBpLXJzXCIpO1xuY29uc3QgeyBSZXR1cm5EYXRhIH0gPSAoMCwgbmFwaV9yc18xLnJlcXVpcmVOYXBpUnNNb2R1bGUpKFwiQG5vbWljZm91bmRhdGlvbi9lZHJcIik7XG5leHBvcnRzLlJldHVybkRhdGEgPSBSZXR1cm5EYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0dXJuLWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/return-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/convertToEdr.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/utils/convertToEdr.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.edrTracingMessageToMinimalMessage = exports.edrTracingMessageResultToMinimalEVMResult = exports.edrTracingStepToMinimalInterpreterStep = exports.edrRpcDebugTraceToHardhat = exports.ethereumjsMempoolOrderToEdrMineOrdering = exports.ethereumjsIntervalMiningConfigToEdr = exports.edrSpecIdToEthereumHardfork = exports.ethereumsjsHardforkToEdrSpecId = void 0;\nconst ethereumjs_util_1 = __webpack_require__(/*! @nomicfoundation/ethereumjs-util */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-util/dist/esm/index.js\");\nconst napi_rs_1 = __webpack_require__(/*! ../../../../common/napi-rs */ \"(ssr)/./node_modules/hardhat/common/napi-rs.js\");\nconst hardforks_1 = __webpack_require__(/*! ../../../util/hardforks */ \"(ssr)/./node_modules/hardhat/internal/util/hardforks.js\");\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\nfunction ethereumsjsHardforkToEdrSpecId(hardfork) {\n    const { SpecId } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/edr\");\n    switch (hardfork) {\n        case hardforks_1.HardforkName.FRONTIER:\n            return 0 /* SpecId.Frontier */;\n        case hardforks_1.HardforkName.HOMESTEAD:\n            return 2 /* SpecId.Homestead */;\n        case hardforks_1.HardforkName.DAO:\n            return 3 /* SpecId.DaoFork */;\n        case hardforks_1.HardforkName.TANGERINE_WHISTLE:\n            return 4 /* SpecId.Tangerine */;\n        case hardforks_1.HardforkName.SPURIOUS_DRAGON:\n            return 5 /* SpecId.SpuriousDragon */;\n        case hardforks_1.HardforkName.BYZANTIUM:\n            return 6 /* SpecId.Byzantium */;\n        case hardforks_1.HardforkName.CONSTANTINOPLE:\n            return 7 /* SpecId.Constantinople */;\n        case hardforks_1.HardforkName.PETERSBURG:\n            return 8 /* SpecId.Petersburg */;\n        case hardforks_1.HardforkName.ISTANBUL:\n            return 9 /* SpecId.Istanbul */;\n        case hardforks_1.HardforkName.MUIR_GLACIER:\n            return 10 /* SpecId.MuirGlacier */;\n        case hardforks_1.HardforkName.BERLIN:\n            return 11 /* SpecId.Berlin */;\n        case hardforks_1.HardforkName.LONDON:\n            return 12 /* SpecId.London */;\n        case hardforks_1.HardforkName.ARROW_GLACIER:\n            return 13 /* SpecId.ArrowGlacier */;\n        case hardforks_1.HardforkName.GRAY_GLACIER:\n            return 14 /* SpecId.GrayGlacier */;\n        case hardforks_1.HardforkName.MERGE:\n            return 15 /* SpecId.Merge */;\n        case hardforks_1.HardforkName.SHANGHAI:\n            return 16 /* SpecId.Shanghai */;\n        case hardforks_1.HardforkName.CANCUN:\n            return 17 /* SpecId.Cancun */;\n        default:\n            const _exhaustiveCheck = hardfork;\n            throw new Error(`Unknown hardfork name '${hardfork}', this shouldn't happen`);\n    }\n}\nexports.ethereumsjsHardforkToEdrSpecId = ethereumsjsHardforkToEdrSpecId;\nfunction edrSpecIdToEthereumHardfork(specId) {\n    const { SpecId } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/edr\");\n    switch (specId) {\n        case 0 /* SpecId.Frontier */:\n            return hardforks_1.HardforkName.FRONTIER;\n        case 2 /* SpecId.Homestead */:\n            return hardforks_1.HardforkName.HOMESTEAD;\n        case 3 /* SpecId.DaoFork */:\n            return hardforks_1.HardforkName.DAO;\n        case 4 /* SpecId.Tangerine */:\n            return hardforks_1.HardforkName.TANGERINE_WHISTLE;\n        case 5 /* SpecId.SpuriousDragon */:\n            return hardforks_1.HardforkName.SPURIOUS_DRAGON;\n        case 6 /* SpecId.Byzantium */:\n            return hardforks_1.HardforkName.BYZANTIUM;\n        case 7 /* SpecId.Constantinople */:\n            return hardforks_1.HardforkName.CONSTANTINOPLE;\n        case 8 /* SpecId.Petersburg */:\n            return hardforks_1.HardforkName.PETERSBURG;\n        case 9 /* SpecId.Istanbul */:\n            return hardforks_1.HardforkName.ISTANBUL;\n        case 10 /* SpecId.MuirGlacier */:\n            return hardforks_1.HardforkName.MUIR_GLACIER;\n        case 11 /* SpecId.Berlin */:\n            return hardforks_1.HardforkName.BERLIN;\n        case 12 /* SpecId.London */:\n            return hardforks_1.HardforkName.LONDON;\n        case 13 /* SpecId.ArrowGlacier */:\n            return hardforks_1.HardforkName.ARROW_GLACIER;\n        case 14 /* SpecId.GrayGlacier */:\n            return hardforks_1.HardforkName.GRAY_GLACIER;\n        case 15 /* SpecId.Merge */:\n            return hardforks_1.HardforkName.MERGE;\n        case 16 /* SpecId.Shanghai */:\n            return hardforks_1.HardforkName.SHANGHAI;\n        // HACK: EthereumJS doesn't support Cancun, so report Shanghai\n        case 17 /* SpecId.Cancun */:\n            return hardforks_1.HardforkName.SHANGHAI;\n        default:\n            throw new Error(`Unknown spec id '${specId}', this shouldn't happen`);\n    }\n}\nexports.edrSpecIdToEthereumHardfork = edrSpecIdToEthereumHardfork;\nfunction ethereumjsIntervalMiningConfigToEdr(config) {\n    if (typeof config === \"number\") {\n        // Is interval mining disabled?\n        if (config === 0) {\n            return undefined;\n        }\n        else {\n            return BigInt(config);\n        }\n    }\n    else {\n        return {\n            min: BigInt(config[0]),\n            max: BigInt(config[1]),\n        };\n    }\n}\nexports.ethereumjsIntervalMiningConfigToEdr = ethereumjsIntervalMiningConfigToEdr;\nfunction ethereumjsMempoolOrderToEdrMineOrdering(mempoolOrder) {\n    const { MineOrdering } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/edr\");\n    switch (mempoolOrder) {\n        case \"fifo\":\n            return \"Fifo\" /* MineOrdering.Fifo */;\n        case \"priority\":\n            return \"Priority\" /* MineOrdering.Priority */;\n    }\n}\nexports.ethereumjsMempoolOrderToEdrMineOrdering = ethereumjsMempoolOrderToEdrMineOrdering;\nfunction edrRpcDebugTraceToHardhat(rpcDebugTrace) {\n    const structLogs = rpcDebugTrace.structLogs.map((log) => {\n        const result = {\n            depth: Number(log.depth),\n            gas: Number(log.gas),\n            gasCost: Number(log.gasCost),\n            op: log.opName,\n            pc: Number(log.pc),\n        };\n        if (log.memory !== undefined) {\n            result.memory = log.memory;\n        }\n        if (log.stack !== undefined) {\n            // Remove 0x prefix which is required by EIP-3155, but not expected by Hardhat.\n            result.stack = log.stack?.map((item) => item.slice(2));\n        }\n        if (log.storage !== undefined) {\n            result.storage = Object.fromEntries(Object.entries(log.storage).map(([key, value]) => {\n                return [key.slice(2), value.slice(2)];\n            }));\n        }\n        if (log.error !== undefined) {\n            result.error = {\n                message: log.error,\n            };\n        }\n        return result;\n    });\n    // REVM trace adds initial STOP that Hardhat doesn't expect\n    if (structLogs.length > 0 && structLogs[0].op === \"STOP\") {\n        structLogs.shift();\n    }\n    let returnValue = rpcDebugTrace.output?.toString(\"hex\") ?? \"\";\n    if (returnValue === \"0x\") {\n        returnValue = \"\";\n    }\n    return {\n        failed: !rpcDebugTrace.pass,\n        gas: Number(rpcDebugTrace.gasUsed),\n        returnValue,\n        structLogs,\n    };\n}\nexports.edrRpcDebugTraceToHardhat = edrRpcDebugTraceToHardhat;\nfunction edrTracingStepToMinimalInterpreterStep(step) {\n    const minimalInterpreterStep = {\n        pc: Number(step.pc),\n        depth: step.depth,\n        opcode: {\n            name: step.opcode,\n        },\n        stack: step.stack,\n    };\n    if (step.memory !== undefined) {\n        minimalInterpreterStep.memory = step.memory;\n    }\n    return minimalInterpreterStep;\n}\nexports.edrTracingStepToMinimalInterpreterStep = edrTracingStepToMinimalInterpreterStep;\nfunction edrTracingMessageResultToMinimalEVMResult(tracingMessageResult) {\n    const { result, contractAddress } = tracingMessageResult.executionResult;\n    // only SuccessResult has logs\n    const success = \"logs\" in result;\n    const minimalEVMResult = {\n        execResult: {\n            executionGasUsed: result.gasUsed,\n            success,\n        },\n    };\n    // only success and exceptional halt have reason\n    if (\"reason\" in result) {\n        minimalEVMResult.execResult.reason = result.reason;\n    }\n    if (\"output\" in result) {\n        const { output } = result;\n        if (Buffer.isBuffer(output)) {\n            minimalEVMResult.execResult.output = output;\n        }\n        else {\n            minimalEVMResult.execResult.output = output.returnValue;\n        }\n    }\n    if (contractAddress !== undefined) {\n        minimalEVMResult.execResult.contractAddress = new ethereumjs_util_1.Address(contractAddress);\n    }\n    return minimalEVMResult;\n}\nexports.edrTracingMessageResultToMinimalEVMResult = edrTracingMessageResultToMinimalEVMResult;\nfunction edrTracingMessageToMinimalMessage(message) {\n    return {\n        to: message.to !== undefined ? new ethereumjs_util_1.Address(message.to) : undefined,\n        codeAddress: message.codeAddress !== undefined\n            ? new ethereumjs_util_1.Address(message.codeAddress)\n            : undefined,\n        data: message.data,\n        value: message.value,\n        caller: new ethereumjs_util_1.Address(message.caller),\n        gasLimit: message.gasLimit,\n        isStaticCall: message.isStaticCall,\n    };\n}\nexports.edrTracingMessageToMinimalMessage = edrTracingMessageToMinimalMessage;\n//# sourceMappingURL=convertToEdr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/convertToEdr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/disk-cache.js":
/*!************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/utils/disk-cache.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getForkCacheDirPath = void 0;\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nfunction getForkCacheDirPath(paths) {\n    return path_1.default.join(paths.cache, \"hardhat-network-fork\");\n}\nexports.getForkCacheDirPath = getForkCacheDirPath;\n//# sourceMappingURL=disk-cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvcHJvdmlkZXIvdXRpbHMvZGlzay1jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQiwrQkFBK0IsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QztBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvaGFyZGhhdC1uZXR3b3JrL3Byb3ZpZGVyL3V0aWxzL2Rpc2stY2FjaGUuanM/YWEyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0Rm9ya0NhY2hlRGlyUGF0aCA9IHZvaWQgMDtcbmNvbnN0IHBhdGhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XG5mdW5jdGlvbiBnZXRGb3JrQ2FjaGVEaXJQYXRoKHBhdGhzKSB7XG4gICAgcmV0dXJuIHBhdGhfMS5kZWZhdWx0LmpvaW4ocGF0aHMuY2FjaGUsIFwiaGFyZGhhdC1uZXR3b3JrLWZvcmtcIik7XG59XG5leHBvcnRzLmdldEZvcmtDYWNoZURpclBhdGggPSBnZXRGb3JrQ2FjaGVEaXJQYXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzay1jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/disk-cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/fork-recomendations-banner.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/utils/fork-recomendations-banner.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.showForkRecommendationsBannerIfNecessary = void 0;\nconst picocolors_1 = __importDefault(__webpack_require__(/*! picocolors */ \"(ssr)/./node_modules/picocolors/picocolors.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nfunction getAlreadyShownFilePath(forkCachePath) {\n    return path_1.default.join(forkCachePath, \"recommendations-already-shown.json\");\n}\nfunction displayBanner() {\n    console.warn(picocolors_1.default.yellow(`You're running a network fork starting from the latest block.\nPerformance may degrade due to fetching data from the network with each run.\nIf connecting to an archival node (e.g. Alchemy), we strongly recommend setting\nblockNumber to a fixed value to increase performance with a local cache.`));\n}\nasync function showForkRecommendationsBannerIfNecessary(currentNetworkConfig, forkCachePath) {\n    if (!(\"forking\" in currentNetworkConfig)) {\n        return;\n    }\n    if (currentNetworkConfig.forking?.enabled !== true) {\n        return;\n    }\n    if (currentNetworkConfig.forking?.blockNumber !== undefined) {\n        return;\n    }\n    const shownPath = getAlreadyShownFilePath(forkCachePath);\n    if (await fs_extra_1.default.pathExists(shownPath)) {\n        return;\n    }\n    displayBanner();\n    await fs_extra_1.default.ensureDir(path_1.default.dirname(shownPath));\n    await fs_extra_1.default.writeJSON(shownPath, true);\n}\nexports.showForkRecommendationsBannerIfNecessary = showForkRecommendationsBannerIfNecessary;\n//# sourceMappingURL=fork-recomendations-banner.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvcHJvdmlkZXIvdXRpbHMvZm9yay1yZWNvbWVuZGF0aW9ucy1iYW5uZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnREFBZ0Q7QUFDaEQscUNBQXFDLG1CQUFPLENBQUMsaUVBQVk7QUFDekQsbUNBQW1DLG1CQUFPLENBQUMsNERBQVU7QUFDckQsK0JBQStCLG1CQUFPLENBQUMsa0JBQU07QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2hhcmRoYXQtbmV0d29yay9wcm92aWRlci91dGlscy9mb3JrLXJlY29tZW5kYXRpb25zLWJhbm5lci5qcz9hZGI3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaG93Rm9ya1JlY29tbWVuZGF0aW9uc0Jhbm5lcklmTmVjZXNzYXJ5ID0gdm9pZCAwO1xuY29uc3QgcGljb2NvbG9yc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwaWNvY29sb3JzXCIpKTtcbmNvbnN0IGZzX2V4dHJhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZzLWV4dHJhXCIpKTtcbmNvbnN0IHBhdGhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XG5mdW5jdGlvbiBnZXRBbHJlYWR5U2hvd25GaWxlUGF0aChmb3JrQ2FjaGVQYXRoKSB7XG4gICAgcmV0dXJuIHBhdGhfMS5kZWZhdWx0LmpvaW4oZm9ya0NhY2hlUGF0aCwgXCJyZWNvbW1lbmRhdGlvbnMtYWxyZWFkeS1zaG93bi5qc29uXCIpO1xufVxuZnVuY3Rpb24gZGlzcGxheUJhbm5lcigpIHtcbiAgICBjb25zb2xlLndhcm4ocGljb2NvbG9yc18xLmRlZmF1bHQueWVsbG93KGBZb3UncmUgcnVubmluZyBhIG5ldHdvcmsgZm9yayBzdGFydGluZyBmcm9tIHRoZSBsYXRlc3QgYmxvY2suXG5QZXJmb3JtYW5jZSBtYXkgZGVncmFkZSBkdWUgdG8gZmV0Y2hpbmcgZGF0YSBmcm9tIHRoZSBuZXR3b3JrIHdpdGggZWFjaCBydW4uXG5JZiBjb25uZWN0aW5nIHRvIGFuIGFyY2hpdmFsIG5vZGUgKGUuZy4gQWxjaGVteSksIHdlIHN0cm9uZ2x5IHJlY29tbWVuZCBzZXR0aW5nXG5ibG9ja051bWJlciB0byBhIGZpeGVkIHZhbHVlIHRvIGluY3JlYXNlIHBlcmZvcm1hbmNlIHdpdGggYSBsb2NhbCBjYWNoZS5gKSk7XG59XG5hc3luYyBmdW5jdGlvbiBzaG93Rm9ya1JlY29tbWVuZGF0aW9uc0Jhbm5lcklmTmVjZXNzYXJ5KGN1cnJlbnROZXR3b3JrQ29uZmlnLCBmb3JrQ2FjaGVQYXRoKSB7XG4gICAgaWYgKCEoXCJmb3JraW5nXCIgaW4gY3VycmVudE5ldHdvcmtDb25maWcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnROZXR3b3JrQ29uZmlnLmZvcmtpbmc/LmVuYWJsZWQgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY3VycmVudE5ldHdvcmtDb25maWcuZm9ya2luZz8uYmxvY2tOdW1iZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNob3duUGF0aCA9IGdldEFscmVhZHlTaG93bkZpbGVQYXRoKGZvcmtDYWNoZVBhdGgpO1xuICAgIGlmIChhd2FpdCBmc19leHRyYV8xLmRlZmF1bHQucGF0aEV4aXN0cyhzaG93blBhdGgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlzcGxheUJhbm5lcigpO1xuICAgIGF3YWl0IGZzX2V4dHJhXzEuZGVmYXVsdC5lbnN1cmVEaXIocGF0aF8xLmRlZmF1bHQuZGlybmFtZShzaG93blBhdGgpKTtcbiAgICBhd2FpdCBmc19leHRyYV8xLmRlZmF1bHQud3JpdGVKU09OKHNob3duUGF0aCwgdHJ1ZSk7XG59XG5leHBvcnRzLnNob3dGb3JrUmVjb21tZW5kYXRpb25zQmFubmVySWZOZWNlc3NhcnkgPSBzaG93Rm9ya1JlY29tbWVuZGF0aW9uc0Jhbm5lcklmTmVjZXNzYXJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9yay1yZWNvbWVuZGF0aW9ucy1iYW5uZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/fork-recomendations-banner.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/makeCommon.js":
/*!************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/utils/makeCommon.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeCommon = void 0;\nconst ethereumjs_common_1 = __webpack_require__(/*! @nomicfoundation/ethereumjs-common */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-common/dist/esm/index.js\");\nconst hardforks_1 = __webpack_require__(/*! ../../../util/hardforks */ \"(ssr)/./node_modules/hardhat/internal/util/hardforks.js\");\nfunction makeCommon({ chainId, networkId, hardfork }) {\n    const common = ethereumjs_common_1.Common.custom({\n        chainId,\n        networkId,\n    }, {\n        // ethereumjs uses this name for the merge hardfork\n        hardfork: hardfork === hardforks_1.HardforkName.MERGE ? \"mergeForkIdTransition\" : hardfork,\n    });\n    return common;\n}\nexports.makeCommon = makeCommon;\n//# sourceMappingURL=makeCommon.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvcHJvdmlkZXIvdXRpbHMvbWFrZUNvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsNEJBQTRCLG1CQUFPLENBQUMscUhBQW9DO0FBQ3hFLG9CQUFvQixtQkFBTyxDQUFDLHdGQUF5QjtBQUNyRCxzQkFBc0IsOEJBQThCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvaGFyZGhhdC1uZXR3b3JrL3Byb3ZpZGVyL3V0aWxzL21ha2VDb21tb24uanM/NzA3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFrZUNvbW1vbiA9IHZvaWQgMDtcbmNvbnN0IGV0aGVyZXVtanNfY29tbW9uXzEgPSByZXF1aXJlKFwiQG5vbWljZm91bmRhdGlvbi9ldGhlcmV1bWpzLWNvbW1vblwiKTtcbmNvbnN0IGhhcmRmb3Jrc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWwvaGFyZGZvcmtzXCIpO1xuZnVuY3Rpb24gbWFrZUNvbW1vbih7IGNoYWluSWQsIG5ldHdvcmtJZCwgaGFyZGZvcmsgfSkge1xuICAgIGNvbnN0IGNvbW1vbiA9IGV0aGVyZXVtanNfY29tbW9uXzEuQ29tbW9uLmN1c3RvbSh7XG4gICAgICAgIGNoYWluSWQsXG4gICAgICAgIG5ldHdvcmtJZCxcbiAgICB9LCB7XG4gICAgICAgIC8vIGV0aGVyZXVtanMgdXNlcyB0aGlzIG5hbWUgZm9yIHRoZSBtZXJnZSBoYXJkZm9ya1xuICAgICAgICBoYXJkZm9yazogaGFyZGZvcmsgPT09IGhhcmRmb3Jrc18xLkhhcmRmb3JrTmFtZS5NRVJHRSA/IFwibWVyZ2VGb3JrSWRUcmFuc2l0aW9uXCIgOiBoYXJkZm9yayxcbiAgICB9KTtcbiAgICByZXR1cm4gY29tbW9uO1xufVxuZXhwb3J0cy5tYWtlQ29tbW9uID0gbWFrZUNvbW1vbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ha2VDb21tb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/utils/makeCommon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/vm/minimal-vm.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/provider/vm/minimal-vm.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getMinimalEthereumJsVm = exports.MinimalEthereumJsEvmEventEmitter = exports.MinimalEthereumJsVmEventEmitter = void 0;\nconst ethereumjs_util_1 = __webpack_require__(/*! @nomicfoundation/ethereumjs-util */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-util/dist/esm/index.js\");\nclass MinimalEthereumJsVmEventEmitter extends ethereumjs_util_1.AsyncEventEmitter {\n}\nexports.MinimalEthereumJsVmEventEmitter = MinimalEthereumJsVmEventEmitter;\nclass MinimalEthereumJsEvmEventEmitter extends ethereumjs_util_1.AsyncEventEmitter {\n}\nexports.MinimalEthereumJsEvmEventEmitter = MinimalEthereumJsEvmEventEmitter;\nfunction getMinimalEthereumJsVm(provider) {\n    const minimalEthereumJsVm = {\n        events: new MinimalEthereumJsVmEventEmitter(),\n        evm: {\n            events: new MinimalEthereumJsEvmEventEmitter(),\n        },\n        stateManager: {\n            putContractCode: async (address, code) => {\n                await provider.handleRequest(JSON.stringify({\n                    method: \"hardhat_setCode\",\n                    params: [address.toString(), `0x${code.toString(\"hex\")}`],\n                }));\n            },\n            getContractStorage: async (address, slotHash) => {\n                const responseObject = await provider.handleRequest(JSON.stringify({\n                    method: \"eth_getStorageAt\",\n                    params: [address.toString(), `0x${slotHash.toString(\"hex\")}`],\n                }));\n                let response;\n                if (typeof responseObject.data === \"string\") {\n                    response = JSON.parse(responseObject.data);\n                }\n                else {\n                    response = responseObject.data;\n                }\n                return Buffer.from(response.result.slice(2), \"hex\");\n            },\n            putContractStorage: async (address, slotHash, slotValue) => {\n                await provider.handleRequest(JSON.stringify({\n                    method: \"hardhat_setStorageAt\",\n                    params: [\n                        address.toString(),\n                        `0x${slotHash.toString(\"hex\")}`,\n                        `0x${slotValue.toString(\"hex\")}`,\n                    ],\n                }));\n            },\n        },\n    };\n    return minimalEthereumJsVm;\n}\nexports.getMinimalEthereumJsVm = getMinimalEthereumJsVm;\n//# sourceMappingURL=minimal-vm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvcHJvdmlkZXIvdm0vbWluaW1hbC12bS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyx3Q0FBd0MsR0FBRyx1Q0FBdUM7QUFDbkgsMEJBQTBCLG1CQUFPLENBQUMsaUhBQWtDO0FBQ3BFO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELHFCQUFxQjtBQUMzRSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUI7QUFDL0UsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix5QkFBeUI7QUFDdEQsNkJBQTZCLDBCQUEwQjtBQUN2RDtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvcHJvdmlkZXIvdm0vbWluaW1hbC12bS5qcz8yMGM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRNaW5pbWFsRXRoZXJldW1Kc1ZtID0gZXhwb3J0cy5NaW5pbWFsRXRoZXJldW1Kc0V2bUV2ZW50RW1pdHRlciA9IGV4cG9ydHMuTWluaW1hbEV0aGVyZXVtSnNWbUV2ZW50RW1pdHRlciA9IHZvaWQgMDtcbmNvbnN0IGV0aGVyZXVtanNfdXRpbF8xID0gcmVxdWlyZShcIkBub21pY2ZvdW5kYXRpb24vZXRoZXJldW1qcy11dGlsXCIpO1xuY2xhc3MgTWluaW1hbEV0aGVyZXVtSnNWbUV2ZW50RW1pdHRlciBleHRlbmRzIGV0aGVyZXVtanNfdXRpbF8xLkFzeW5jRXZlbnRFbWl0dGVyIHtcbn1cbmV4cG9ydHMuTWluaW1hbEV0aGVyZXVtSnNWbUV2ZW50RW1pdHRlciA9IE1pbmltYWxFdGhlcmV1bUpzVm1FdmVudEVtaXR0ZXI7XG5jbGFzcyBNaW5pbWFsRXRoZXJldW1Kc0V2bUV2ZW50RW1pdHRlciBleHRlbmRzIGV0aGVyZXVtanNfdXRpbF8xLkFzeW5jRXZlbnRFbWl0dGVyIHtcbn1cbmV4cG9ydHMuTWluaW1hbEV0aGVyZXVtSnNFdm1FdmVudEVtaXR0ZXIgPSBNaW5pbWFsRXRoZXJldW1Kc0V2bUV2ZW50RW1pdHRlcjtcbmZ1bmN0aW9uIGdldE1pbmltYWxFdGhlcmV1bUpzVm0ocHJvdmlkZXIpIHtcbiAgICBjb25zdCBtaW5pbWFsRXRoZXJldW1Kc1ZtID0ge1xuICAgICAgICBldmVudHM6IG5ldyBNaW5pbWFsRXRoZXJldW1Kc1ZtRXZlbnRFbWl0dGVyKCksXG4gICAgICAgIGV2bToge1xuICAgICAgICAgICAgZXZlbnRzOiBuZXcgTWluaW1hbEV0aGVyZXVtSnNFdm1FdmVudEVtaXR0ZXIoKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdGVNYW5hZ2VyOiB7XG4gICAgICAgICAgICBwdXRDb250cmFjdENvZGU6IGFzeW5jIChhZGRyZXNzLCBjb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcHJvdmlkZXIuaGFuZGxlUmVxdWVzdChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJoYXJkaGF0X3NldENvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbYWRkcmVzcy50b1N0cmluZygpLCBgMHgke2NvZGUudG9TdHJpbmcoXCJoZXhcIil9YF0sXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENvbnRyYWN0U3RvcmFnZTogYXN5bmMgKGFkZHJlc3MsIHNsb3RIYXNoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VPYmplY3QgPSBhd2FpdCBwcm92aWRlci5oYW5kbGVSZXF1ZXN0KEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRTdG9yYWdlQXRcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbYWRkcmVzcy50b1N0cmluZygpLCBgMHgke3Nsb3RIYXNoLnRvU3RyaW5nKFwiaGV4XCIpfWBdLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZU9iamVjdC5kYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXNwb25zZU9iamVjdC5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2VPYmplY3QuZGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHJlc3BvbnNlLnJlc3VsdC5zbGljZSgyKSwgXCJoZXhcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHV0Q29udHJhY3RTdG9yYWdlOiBhc3luYyAoYWRkcmVzcywgc2xvdEhhc2gsIHNsb3RWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHByb3ZpZGVyLmhhbmRsZVJlcXVlc3QoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiaGFyZGhhdF9zZXRTdG9yYWdlQXRcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBgMHgke3Nsb3RIYXNoLnRvU3RyaW5nKFwiaGV4XCIpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBgMHgke3Nsb3RWYWx1ZS50b1N0cmluZyhcImhleFwiKX1gLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gbWluaW1hbEV0aGVyZXVtSnNWbTtcbn1cbmV4cG9ydHMuZ2V0TWluaW1hbEV0aGVyZXVtSnNWbSA9IGdldE1pbmltYWxFdGhlcmV1bUpzVm07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taW5pbWFsLXZtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/vm/minimal-vm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/consoleLogger.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/stack-traces/consoleLogger.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConsoleLogger = void 0;\nconst ethereumjs_util_1 = __webpack_require__(/*! @nomicfoundation/ethereumjs-util */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-util/dist/esm/index.js\");\nconst util_1 = __importDefault(__webpack_require__(/*! util */ \"util\"));\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/logger.js\");\nconst REGISTER_SIZE = 32;\nclass ConsoleLogger {\n    /**\n     * Temporary code to print console.sol messages that come from EDR\n     */\n    static getDecodedLogs(messages) {\n        const logs = [];\n        for (const message of messages) {\n            const log = ConsoleLogger._maybeConsoleLog(message);\n            if (log !== undefined) {\n                logs.push(ConsoleLogger.format(log));\n            }\n        }\n        return logs;\n    }\n    /**\n     * Returns a formatted string using the first argument as a `printf`-like\n     * format string which can contain zero or more format specifiers.\n     *\n     * If there are more arguments passed than the number of specifiers, the\n     * extra arguments are concatenated to the returned string, separated by spaces.\n     */\n    static format(args = []) {\n        return util_1.default.format(...args);\n    }\n    /** Decodes a calldata buffer into string arguments for a console log. */\n    static _maybeConsoleLog(calldata) {\n        const selector = (0, ethereumjs_util_1.bytesToInt)(calldata.slice(0, 4));\n        const parameters = calldata.slice(4);\n        const argTypes = logger_1.CONSOLE_LOG_SIGNATURES[selector];\n        if (argTypes === undefined) {\n            return;\n        }\n        const decodedArgs = ConsoleLogger._decode(parameters, argTypes);\n        /**\n         * The first argument is interpreted as the format string, which may need adjusting.\n         * Replace the occurrences of %d and %i with %s. This is necessary because if the arguments passed are numbers,\n         * they could be too large to be formatted as a Number or an Integer, so it is safer to use a String.\n         * %d and %i are replaced only if there is an odd number of % before the d or i.\n         * If there is an even number of % then it is assumed that the % is escaped and should not be replaced.\n         * The regex matches a '%d' or an '%i' that has an even number of\n         * '%' behind it (including 0). This group of pairs of '%' is captured\n         * and preserved, while the '%[di]' is replaced with '%s'.\n         * Naively doing (%%)* is not enough; we also have to use the\n         * (?<!%) negative look-behind to make this work.\n         * The (?:) is just to avoid capturing that inner group.\n         */\n        if (decodedArgs.length > 0) {\n            decodedArgs[0] = decodedArgs[0].replace(/((?<!%)(?:%%)*)(%[di])/g, \"$1%s\");\n        }\n        return decodedArgs;\n    }\n    /** Decodes calldata parameters from `data` according to `types` into their string representation. */\n    static _decode(data, types) {\n        return types.map((type, i) => {\n            const position = i * 32;\n            switch (types[i]) {\n                case logger_1.Uint256Ty:\n                    return (0, ethereumjs_util_1.bytesToBigInt)(data.slice(position, position + REGISTER_SIZE)).toString(10);\n                case logger_1.Int256Ty:\n                    return (0, ethereumjs_util_1.fromSigned)(data.slice(position, position + REGISTER_SIZE)).toString();\n                case logger_1.BoolTy:\n                    if (data[position + 31] !== 0) {\n                        return \"true\";\n                    }\n                    return \"false\";\n                case logger_1.StringTy:\n                    const sStart = (0, ethereumjs_util_1.bytesToInt)(data.slice(position, position + REGISTER_SIZE));\n                    const sLen = (0, ethereumjs_util_1.bytesToInt)(data.slice(sStart, sStart + REGISTER_SIZE));\n                    return data\n                        .slice(sStart + REGISTER_SIZE, sStart + REGISTER_SIZE + sLen)\n                        .toString();\n                case logger_1.AddressTy:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position + 12, position + REGISTER_SIZE));\n                case logger_1.BytesTy:\n                    const bStart = (0, ethereumjs_util_1.bytesToInt)(data.slice(position, position + REGISTER_SIZE));\n                    const bLen = (0, ethereumjs_util_1.bytesToInt)(data.slice(bStart, bStart + REGISTER_SIZE));\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(bStart + REGISTER_SIZE, bStart + REGISTER_SIZE + bLen));\n                case logger_1.Bytes1Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 1));\n                case logger_1.Bytes2Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 2));\n                case logger_1.Bytes3Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 3));\n                case logger_1.Bytes4Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 4));\n                case logger_1.Bytes5Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 5));\n                case logger_1.Bytes6Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 6));\n                case logger_1.Bytes7Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 7));\n                case logger_1.Bytes8Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 8));\n                case logger_1.Bytes9Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 9));\n                case logger_1.Bytes10Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 10));\n                case logger_1.Bytes11Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 11));\n                case logger_1.Bytes12Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 12));\n                case logger_1.Bytes13Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 13));\n                case logger_1.Bytes14Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 14));\n                case logger_1.Bytes15Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 15));\n                case logger_1.Bytes16Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 16));\n                case logger_1.Bytes17Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 17));\n                case logger_1.Bytes18Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 18));\n                case logger_1.Bytes19Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 19));\n                case logger_1.Bytes20Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 20));\n                case logger_1.Bytes21Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 21));\n                case logger_1.Bytes22Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 22));\n                case logger_1.Bytes23Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 23));\n                case logger_1.Bytes24Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 24));\n                case logger_1.Bytes25Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 25));\n                case logger_1.Bytes26Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 26));\n                case logger_1.Bytes27Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 27));\n                case logger_1.Bytes28Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 28));\n                case logger_1.Bytes29Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 29));\n                case logger_1.Bytes30Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 30));\n                case logger_1.Bytes31Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 31));\n                case logger_1.Bytes32Ty:\n                    return (0, ethereumjs_util_1.bytesToHex)(data.slice(position, position + 32));\n                default:\n                    return \"\";\n            }\n        });\n    }\n}\nexports.ConsoleLogger = ConsoleLogger;\n//# sourceMappingURL=consoleLogger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/consoleLogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/stack-traces/constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FIRST_SOLC_VERSION_SUPPORTED = exports.SUPPORTED_SOLIDITY_VERSION_RANGE = void 0;\nexports.SUPPORTED_SOLIDITY_VERSION_RANGE = \"<=0.8.28\";\nexports.FIRST_SOLC_VERSION_SUPPORTED = \"0.5.1\";\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvc3RhY2stdHJhY2VzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0MsR0FBRyx3Q0FBd0M7QUFDL0Usd0NBQXdDO0FBQ3hDLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvc3RhY2stdHJhY2VzL2NvbnN0YW50cy5qcz9hOTJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GSVJTVF9TT0xDX1ZFUlNJT05fU1VQUE9SVEVEID0gZXhwb3J0cy5TVVBQT1JURURfU09MSURJVFlfVkVSU0lPTl9SQU5HRSA9IHZvaWQgMDtcbmV4cG9ydHMuU1VQUE9SVEVEX1NPTElESVRZX1ZFUlNJT05fUkFOR0UgPSBcIjw9MC44LjI4XCI7XG5leHBvcnRzLkZJUlNUX1NPTENfVkVSU0lPTl9TVVBQT1JURUQgPSBcIjAuNS4xXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/logger.js":
/*!******************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/stack-traces/logger.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// ------------------------------------\n// This code was autogenerated using\n// scripts/console-library-generator.ts\n// ------------------------------------\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CONSOLE_LOG_SIGNATURES = exports.Bytes32Ty = exports.Bytes31Ty = exports.Bytes30Ty = exports.Bytes29Ty = exports.Bytes28Ty = exports.Bytes27Ty = exports.Bytes26Ty = exports.Bytes25Ty = exports.Bytes24Ty = exports.Bytes23Ty = exports.Bytes22Ty = exports.Bytes21Ty = exports.Bytes20Ty = exports.Bytes19Ty = exports.Bytes18Ty = exports.Bytes17Ty = exports.Bytes16Ty = exports.Bytes15Ty = exports.Bytes14Ty = exports.Bytes13Ty = exports.Bytes12Ty = exports.Bytes11Ty = exports.Bytes10Ty = exports.Bytes9Ty = exports.Bytes8Ty = exports.Bytes7Ty = exports.Bytes6Ty = exports.Bytes5Ty = exports.Bytes4Ty = exports.Bytes3Ty = exports.Bytes2Ty = exports.Bytes1Ty = exports.BytesTy = exports.AddressTy = exports.BoolTy = exports.StringTy = exports.Uint256Ty = exports.Int256Ty = void 0;\nexports.Int256Ty = \"Int256\";\nexports.Uint256Ty = \"Uint256\";\nexports.StringTy = \"String\";\nexports.BoolTy = \"Bool\";\nexports.AddressTy = \"Address\";\nexports.BytesTy = \"Bytes\";\nexports.Bytes1Ty = \"Bytes1\";\nexports.Bytes2Ty = \"Bytes2\";\nexports.Bytes3Ty = \"Bytes3\";\nexports.Bytes4Ty = \"Bytes4\";\nexports.Bytes5Ty = \"Bytes5\";\nexports.Bytes6Ty = \"Bytes6\";\nexports.Bytes7Ty = \"Bytes7\";\nexports.Bytes8Ty = \"Bytes8\";\nexports.Bytes9Ty = \"Bytes9\";\nexports.Bytes10Ty = \"Bytes10\";\nexports.Bytes11Ty = \"Bytes11\";\nexports.Bytes12Ty = \"Bytes12\";\nexports.Bytes13Ty = \"Bytes13\";\nexports.Bytes14Ty = \"Bytes14\";\nexports.Bytes15Ty = \"Bytes15\";\nexports.Bytes16Ty = \"Bytes16\";\nexports.Bytes17Ty = \"Bytes17\";\nexports.Bytes18Ty = \"Bytes18\";\nexports.Bytes19Ty = \"Bytes19\";\nexports.Bytes20Ty = \"Bytes20\";\nexports.Bytes21Ty = \"Bytes21\";\nexports.Bytes22Ty = \"Bytes22\";\nexports.Bytes23Ty = \"Bytes23\";\nexports.Bytes24Ty = \"Bytes24\";\nexports.Bytes25Ty = \"Bytes25\";\nexports.Bytes26Ty = \"Bytes26\";\nexports.Bytes27Ty = \"Bytes27\";\nexports.Bytes28Ty = \"Bytes28\";\nexports.Bytes29Ty = \"Bytes29\";\nexports.Bytes30Ty = \"Bytes30\";\nexports.Bytes31Ty = \"Bytes31\";\nexports.Bytes32Ty = \"Bytes32\";\n/** Maps from a 4-byte function selector to a signature (argument types) */\nexports.CONSOLE_LOG_SIGNATURES = {\n    0x51973ec9: [],\n    0x2d5b6cb9: [exports.Int256Ty],\n    0xf82c50f1: [exports.Uint256Ty],\n    0x41304fac: [exports.StringTy],\n    0x32458eed: [exports.BoolTy],\n    0x2c2ecbc2: [exports.AddressTy],\n    0x0be77f56: [exports.BytesTy],\n    0x6e18a128: [exports.Bytes1Ty],\n    0xe9b62296: [exports.Bytes2Ty],\n    0x2d834926: [exports.Bytes3Ty],\n    0xe05f48d1: [exports.Bytes4Ty],\n    0xa684808d: [exports.Bytes5Ty],\n    0xae84a591: [exports.Bytes6Ty],\n    0x4ed57e28: [exports.Bytes7Ty],\n    0x4f84252e: [exports.Bytes8Ty],\n    0x90bd8cd0: [exports.Bytes9Ty],\n    0x013d178b: [exports.Bytes10Ty],\n    0x04004a2e: [exports.Bytes11Ty],\n    0x86a06abd: [exports.Bytes12Ty],\n    0x94529e34: [exports.Bytes13Ty],\n    0x9266f07f: [exports.Bytes14Ty],\n    0xda9574e0: [exports.Bytes15Ty],\n    0x665c6104: [exports.Bytes16Ty],\n    0x339f673a: [exports.Bytes17Ty],\n    0xc4d23d9a: [exports.Bytes18Ty],\n    0x5e6b5a33: [exports.Bytes19Ty],\n    0x5188e3e9: [exports.Bytes20Ty],\n    0xe9da3560: [exports.Bytes21Ty],\n    0xd5fae89c: [exports.Bytes22Ty],\n    0xaba1cf0d: [exports.Bytes23Ty],\n    0xf1b35b34: [exports.Bytes24Ty],\n    0x0b84bc58: [exports.Bytes25Ty],\n    0xf8b149f1: [exports.Bytes26Ty],\n    0x3a3757dd: [exports.Bytes27Ty],\n    0xc82aeaee: [exports.Bytes28Ty],\n    0x4b69c3d5: [exports.Bytes29Ty],\n    0xee12c4ed: [exports.Bytes30Ty],\n    0xc2854d92: [exports.Bytes31Ty],\n    0x27b7cf85: [exports.Bytes32Ty],\n    0xf666715a: [exports.Uint256Ty, exports.Uint256Ty],\n    0x643fd0df: [exports.Uint256Ty, exports.StringTy],\n    0x1c9d7eb3: [exports.Uint256Ty, exports.BoolTy],\n    0x69276c86: [exports.Uint256Ty, exports.AddressTy],\n    0xb60e72cc: [exports.StringTy, exports.Uint256Ty],\n    0x4b5c4277: [exports.StringTy, exports.StringTy],\n    0xc3b55635: [exports.StringTy, exports.BoolTy],\n    0x319af333: [exports.StringTy, exports.AddressTy],\n    0x399174d3: [exports.BoolTy, exports.Uint256Ty],\n    0x8feac525: [exports.BoolTy, exports.StringTy],\n    0x2a110e83: [exports.BoolTy, exports.BoolTy],\n    0x853c4849: [exports.BoolTy, exports.AddressTy],\n    0x8309e8a8: [exports.AddressTy, exports.Uint256Ty],\n    0x759f86bb: [exports.AddressTy, exports.StringTy],\n    0x75b605d3: [exports.AddressTy, exports.BoolTy],\n    0xdaf0d4aa: [exports.AddressTy, exports.AddressTy],\n    0xd1ed7a3c: [exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty],\n    0x71d04af2: [exports.Uint256Ty, exports.Uint256Ty, exports.StringTy],\n    0x4766da72: [exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy],\n    0x5c96b331: [exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy],\n    0x37aa7d4c: [exports.Uint256Ty, exports.StringTy, exports.Uint256Ty],\n    0xb115611f: [exports.Uint256Ty, exports.StringTy, exports.StringTy],\n    0x4ceda75a: [exports.Uint256Ty, exports.StringTy, exports.BoolTy],\n    0x7afac959: [exports.Uint256Ty, exports.StringTy, exports.AddressTy],\n    0x20098014: [exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty],\n    0x85775021: [exports.Uint256Ty, exports.BoolTy, exports.StringTy],\n    0x20718650: [exports.Uint256Ty, exports.BoolTy, exports.BoolTy],\n    0x35085f7b: [exports.Uint256Ty, exports.BoolTy, exports.AddressTy],\n    0x5a9b5ed5: [exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty],\n    0x63cb41f9: [exports.Uint256Ty, exports.AddressTy, exports.StringTy],\n    0x9b6ec042: [exports.Uint256Ty, exports.AddressTy, exports.BoolTy],\n    0xbcfd9be0: [exports.Uint256Ty, exports.AddressTy, exports.AddressTy],\n    0xca47c4eb: [exports.StringTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x5970e089: [exports.StringTy, exports.Uint256Ty, exports.StringTy],\n    0xca7733b1: [exports.StringTy, exports.Uint256Ty, exports.BoolTy],\n    0x1c7ec448: [exports.StringTy, exports.Uint256Ty, exports.AddressTy],\n    0x5821efa1: [exports.StringTy, exports.StringTy, exports.Uint256Ty],\n    0x2ced7cef: [exports.StringTy, exports.StringTy, exports.StringTy],\n    0xb0e0f9b5: [exports.StringTy, exports.StringTy, exports.BoolTy],\n    0x95ed0195: [exports.StringTy, exports.StringTy, exports.AddressTy],\n    0xc95958d6: [exports.StringTy, exports.BoolTy, exports.Uint256Ty],\n    0xe298f47d: [exports.StringTy, exports.BoolTy, exports.StringTy],\n    0x850b7ad6: [exports.StringTy, exports.BoolTy, exports.BoolTy],\n    0x932bbb38: [exports.StringTy, exports.BoolTy, exports.AddressTy],\n    0x0d26b925: [exports.StringTy, exports.AddressTy, exports.Uint256Ty],\n    0xe0e9ad4f: [exports.StringTy, exports.AddressTy, exports.StringTy],\n    0xc91d5ed4: [exports.StringTy, exports.AddressTy, exports.BoolTy],\n    0xfcec75e0: [exports.StringTy, exports.AddressTy, exports.AddressTy],\n    0x37103367: [exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty],\n    0xc3fc3970: [exports.BoolTy, exports.Uint256Ty, exports.StringTy],\n    0xe8defba9: [exports.BoolTy, exports.Uint256Ty, exports.BoolTy],\n    0x088ef9d2: [exports.BoolTy, exports.Uint256Ty, exports.AddressTy],\n    0x1093ee11: [exports.BoolTy, exports.StringTy, exports.Uint256Ty],\n    0xb076847f: [exports.BoolTy, exports.StringTy, exports.StringTy],\n    0xdbb4c247: [exports.BoolTy, exports.StringTy, exports.BoolTy],\n    0x9591b953: [exports.BoolTy, exports.StringTy, exports.AddressTy],\n    0x12f21602: [exports.BoolTy, exports.BoolTy, exports.Uint256Ty],\n    0x2555fa46: [exports.BoolTy, exports.BoolTy, exports.StringTy],\n    0x50709698: [exports.BoolTy, exports.BoolTy, exports.BoolTy],\n    0x1078f68d: [exports.BoolTy, exports.BoolTy, exports.AddressTy],\n    0x5f7b9afb: [exports.BoolTy, exports.AddressTy, exports.Uint256Ty],\n    0xde9a9270: [exports.BoolTy, exports.AddressTy, exports.StringTy],\n    0x18c9c746: [exports.BoolTy, exports.AddressTy, exports.BoolTy],\n    0xd2763667: [exports.BoolTy, exports.AddressTy, exports.AddressTy],\n    0xb69bcaf6: [exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty],\n    0xa1f2e8aa: [exports.AddressTy, exports.Uint256Ty, exports.StringTy],\n    0x678209a8: [exports.AddressTy, exports.Uint256Ty, exports.BoolTy],\n    0x7bc0d848: [exports.AddressTy, exports.Uint256Ty, exports.AddressTy],\n    0x67dd6ff1: [exports.AddressTy, exports.StringTy, exports.Uint256Ty],\n    0xfb772265: [exports.AddressTy, exports.StringTy, exports.StringTy],\n    0xcf020fb1: [exports.AddressTy, exports.StringTy, exports.BoolTy],\n    0xf08744e8: [exports.AddressTy, exports.StringTy, exports.AddressTy],\n    0x9c4f99fb: [exports.AddressTy, exports.BoolTy, exports.Uint256Ty],\n    0x212255cc: [exports.AddressTy, exports.BoolTy, exports.StringTy],\n    0xeb830c92: [exports.AddressTy, exports.BoolTy, exports.BoolTy],\n    0xf11699ed: [exports.AddressTy, exports.BoolTy, exports.AddressTy],\n    0x17fe6185: [exports.AddressTy, exports.AddressTy, exports.Uint256Ty],\n    0x007150be: [exports.AddressTy, exports.AddressTy, exports.StringTy],\n    0xf2a66286: [exports.AddressTy, exports.AddressTy, exports.BoolTy],\n    0x018c84c2: [exports.AddressTy, exports.AddressTy, exports.AddressTy],\n    0x193fb800: [exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty],\n    0x59cfcbe3: [exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty, exports.StringTy],\n    0xc598d185: [exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy],\n    0xfa8185af: [exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy],\n    0x5da297eb: [exports.Uint256Ty, exports.Uint256Ty, exports.StringTy, exports.Uint256Ty],\n    0x27d8afd2: [exports.Uint256Ty, exports.Uint256Ty, exports.StringTy, exports.StringTy],\n    0x7af6ab25: [exports.Uint256Ty, exports.Uint256Ty, exports.StringTy, exports.BoolTy],\n    0x42d21db7: [exports.Uint256Ty, exports.Uint256Ty, exports.StringTy, exports.AddressTy],\n    0xeb7f6fd2: [exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty],\n    0xa5b4fc99: [exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy, exports.StringTy],\n    0xab085ae6: [exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy, exports.BoolTy],\n    0x9a816a83: [exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy, exports.AddressTy],\n    0x88f6e4b2: [exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty],\n    0x6cde40b8: [exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy, exports.StringTy],\n    0x15cac476: [exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy, exports.BoolTy],\n    0x56a5d1b1: [exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy, exports.AddressTy],\n    0x82c25b74: [exports.Uint256Ty, exports.StringTy, exports.Uint256Ty, exports.Uint256Ty],\n    0xb7b914ca: [exports.Uint256Ty, exports.StringTy, exports.Uint256Ty, exports.StringTy],\n    0x691a8f74: [exports.Uint256Ty, exports.StringTy, exports.Uint256Ty, exports.BoolTy],\n    0x3b2279b4: [exports.Uint256Ty, exports.StringTy, exports.Uint256Ty, exports.AddressTy],\n    0xb028c9bd: [exports.Uint256Ty, exports.StringTy, exports.StringTy, exports.Uint256Ty],\n    0x21ad0683: [exports.Uint256Ty, exports.StringTy, exports.StringTy, exports.StringTy],\n    0xb3a6b6bd: [exports.Uint256Ty, exports.StringTy, exports.StringTy, exports.BoolTy],\n    0xd583c602: [exports.Uint256Ty, exports.StringTy, exports.StringTy, exports.AddressTy],\n    0xcf009880: [exports.Uint256Ty, exports.StringTy, exports.BoolTy, exports.Uint256Ty],\n    0xd2d423cd: [exports.Uint256Ty, exports.StringTy, exports.BoolTy, exports.StringTy],\n    0xba535d9c: [exports.Uint256Ty, exports.StringTy, exports.BoolTy, exports.BoolTy],\n    0xae2ec581: [exports.Uint256Ty, exports.StringTy, exports.BoolTy, exports.AddressTy],\n    0xe8d3018d: [exports.Uint256Ty, exports.StringTy, exports.AddressTy, exports.Uint256Ty],\n    0x9c3adfa1: [exports.Uint256Ty, exports.StringTy, exports.AddressTy, exports.StringTy],\n    0x90c30a56: [exports.Uint256Ty, exports.StringTy, exports.AddressTy, exports.BoolTy],\n    0x6168ed61: [exports.Uint256Ty, exports.StringTy, exports.AddressTy, exports.AddressTy],\n    0xc6acc7a8: [exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty],\n    0xde03e774: [exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty, exports.StringTy],\n    0x91a02e2a: [exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty, exports.BoolTy],\n    0x88cb6041: [exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty, exports.AddressTy],\n    0x2c1d0746: [exports.Uint256Ty, exports.BoolTy, exports.StringTy, exports.Uint256Ty],\n    0x68c8b8bd: [exports.Uint256Ty, exports.BoolTy, exports.StringTy, exports.StringTy],\n    0xeb928d7f: [exports.Uint256Ty, exports.BoolTy, exports.StringTy, exports.BoolTy],\n    0xef529018: [exports.Uint256Ty, exports.BoolTy, exports.StringTy, exports.AddressTy],\n    0x7464ce23: [exports.Uint256Ty, exports.BoolTy, exports.BoolTy, exports.Uint256Ty],\n    0xdddb9561: [exports.Uint256Ty, exports.BoolTy, exports.BoolTy, exports.StringTy],\n    0xb6f577a1: [exports.Uint256Ty, exports.BoolTy, exports.BoolTy, exports.BoolTy],\n    0x69640b59: [exports.Uint256Ty, exports.BoolTy, exports.BoolTy, exports.AddressTy],\n    0x078287f5: [exports.Uint256Ty, exports.BoolTy, exports.AddressTy, exports.Uint256Ty],\n    0xade052c7: [exports.Uint256Ty, exports.BoolTy, exports.AddressTy, exports.StringTy],\n    0x454d54a5: [exports.Uint256Ty, exports.BoolTy, exports.AddressTy, exports.BoolTy],\n    0xa1ef4cbb: [exports.Uint256Ty, exports.BoolTy, exports.AddressTy, exports.AddressTy],\n    0x0c9cd9c1: [exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty],\n    0xddb06521: [exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty, exports.StringTy],\n    0x5f743a7c: [exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty, exports.BoolTy],\n    0x15c127b5: [exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty, exports.AddressTy],\n    0x46826b5d: [exports.Uint256Ty, exports.AddressTy, exports.StringTy, exports.Uint256Ty],\n    0x3e128ca3: [exports.Uint256Ty, exports.AddressTy, exports.StringTy, exports.StringTy],\n    0xcc32ab07: [exports.Uint256Ty, exports.AddressTy, exports.StringTy, exports.BoolTy],\n    0x9cba8fff: [exports.Uint256Ty, exports.AddressTy, exports.StringTy, exports.AddressTy],\n    0x5abd992a: [exports.Uint256Ty, exports.AddressTy, exports.BoolTy, exports.Uint256Ty],\n    0x90fb06aa: [exports.Uint256Ty, exports.AddressTy, exports.BoolTy, exports.StringTy],\n    0xe351140f: [exports.Uint256Ty, exports.AddressTy, exports.BoolTy, exports.BoolTy],\n    0xef72c513: [exports.Uint256Ty, exports.AddressTy, exports.BoolTy, exports.AddressTy],\n    0x736efbb6: [exports.Uint256Ty, exports.AddressTy, exports.AddressTy, exports.Uint256Ty],\n    0x031c6f73: [exports.Uint256Ty, exports.AddressTy, exports.AddressTy, exports.StringTy],\n    0x091ffaf5: [exports.Uint256Ty, exports.AddressTy, exports.AddressTy, exports.BoolTy],\n    0x2488b414: [exports.Uint256Ty, exports.AddressTy, exports.AddressTy, exports.AddressTy],\n    0xa7a87853: [exports.StringTy, exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty],\n    0x854b3496: [exports.StringTy, exports.Uint256Ty, exports.Uint256Ty, exports.StringTy],\n    0x7626db92: [exports.StringTy, exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy],\n    0xe21de278: [exports.StringTy, exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy],\n    0xc67ea9d1: [exports.StringTy, exports.Uint256Ty, exports.StringTy, exports.Uint256Ty],\n    0x5ab84e1f: [exports.StringTy, exports.Uint256Ty, exports.StringTy, exports.StringTy],\n    0x7d24491d: [exports.StringTy, exports.Uint256Ty, exports.StringTy, exports.BoolTy],\n    0x7c4632a4: [exports.StringTy, exports.Uint256Ty, exports.StringTy, exports.AddressTy],\n    0xe41b6f6f: [exports.StringTy, exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty],\n    0xabf73a98: [exports.StringTy, exports.Uint256Ty, exports.BoolTy, exports.StringTy],\n    0x354c36d6: [exports.StringTy, exports.Uint256Ty, exports.BoolTy, exports.BoolTy],\n    0xe0e95b98: [exports.StringTy, exports.Uint256Ty, exports.BoolTy, exports.AddressTy],\n    0x4f04fdc6: [exports.StringTy, exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty],\n    0x9ffb2f93: [exports.StringTy, exports.Uint256Ty, exports.AddressTy, exports.StringTy],\n    0x82112a42: [exports.StringTy, exports.Uint256Ty, exports.AddressTy, exports.BoolTy],\n    0x5ea2b7ae: [exports.StringTy, exports.Uint256Ty, exports.AddressTy, exports.AddressTy],\n    0xf45d7d2c: [exports.StringTy, exports.StringTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x5d1a971a: [exports.StringTy, exports.StringTy, exports.Uint256Ty, exports.StringTy],\n    0xc3a8a654: [exports.StringTy, exports.StringTy, exports.Uint256Ty, exports.BoolTy],\n    0x1023f7b2: [exports.StringTy, exports.StringTy, exports.Uint256Ty, exports.AddressTy],\n    0x8eafb02b: [exports.StringTy, exports.StringTy, exports.StringTy, exports.Uint256Ty],\n    0xde68f20a: [exports.StringTy, exports.StringTy, exports.StringTy, exports.StringTy],\n    0x2c1754ed: [exports.StringTy, exports.StringTy, exports.StringTy, exports.BoolTy],\n    0x6d572f44: [exports.StringTy, exports.StringTy, exports.StringTy, exports.AddressTy],\n    0xd6aefad2: [exports.StringTy, exports.StringTy, exports.BoolTy, exports.Uint256Ty],\n    0x5e84b0ea: [exports.StringTy, exports.StringTy, exports.BoolTy, exports.StringTy],\n    0x40785869: [exports.StringTy, exports.StringTy, exports.BoolTy, exports.BoolTy],\n    0xc371c7db: [exports.StringTy, exports.StringTy, exports.BoolTy, exports.AddressTy],\n    0x7cc3c607: [exports.StringTy, exports.StringTy, exports.AddressTy, exports.Uint256Ty],\n    0xeb1bff80: [exports.StringTy, exports.StringTy, exports.AddressTy, exports.StringTy],\n    0x5ccd4e37: [exports.StringTy, exports.StringTy, exports.AddressTy, exports.BoolTy],\n    0x439c7bef: [exports.StringTy, exports.StringTy, exports.AddressTy, exports.AddressTy],\n    0x64b5bb67: [exports.StringTy, exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x742d6ee7: [exports.StringTy, exports.BoolTy, exports.Uint256Ty, exports.StringTy],\n    0x8af7cf8a: [exports.StringTy, exports.BoolTy, exports.Uint256Ty, exports.BoolTy],\n    0x935e09bf: [exports.StringTy, exports.BoolTy, exports.Uint256Ty, exports.AddressTy],\n    0x24f91465: [exports.StringTy, exports.BoolTy, exports.StringTy, exports.Uint256Ty],\n    0xa826caeb: [exports.StringTy, exports.BoolTy, exports.StringTy, exports.StringTy],\n    0x3f8a701d: [exports.StringTy, exports.BoolTy, exports.StringTy, exports.BoolTy],\n    0xe0625b29: [exports.StringTy, exports.BoolTy, exports.StringTy, exports.AddressTy],\n    0x8e3f78a9: [exports.StringTy, exports.BoolTy, exports.BoolTy, exports.Uint256Ty],\n    0x9d22d5dd: [exports.StringTy, exports.BoolTy, exports.BoolTy, exports.StringTy],\n    0x895af8c5: [exports.StringTy, exports.BoolTy, exports.BoolTy, exports.BoolTy],\n    0x7190a529: [exports.StringTy, exports.BoolTy, exports.BoolTy, exports.AddressTy],\n    0x5d08bb05: [exports.StringTy, exports.BoolTy, exports.AddressTy, exports.Uint256Ty],\n    0x2d8e33a4: [exports.StringTy, exports.BoolTy, exports.AddressTy, exports.StringTy],\n    0x958c28c6: [exports.StringTy, exports.BoolTy, exports.AddressTy, exports.BoolTy],\n    0x33e9dd1d: [exports.StringTy, exports.BoolTy, exports.AddressTy, exports.AddressTy],\n    0xf8f51b1e: [exports.StringTy, exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x5a477632: [exports.StringTy, exports.AddressTy, exports.Uint256Ty, exports.StringTy],\n    0xfc4845f0: [exports.StringTy, exports.AddressTy, exports.Uint256Ty, exports.BoolTy],\n    0x63fb8bc5: [exports.StringTy, exports.AddressTy, exports.Uint256Ty, exports.AddressTy],\n    0x91d1112e: [exports.StringTy, exports.AddressTy, exports.StringTy, exports.Uint256Ty],\n    0x245986f2: [exports.StringTy, exports.AddressTy, exports.StringTy, exports.StringTy],\n    0x5f15d28c: [exports.StringTy, exports.AddressTy, exports.StringTy, exports.BoolTy],\n    0xaabc9a31: [exports.StringTy, exports.AddressTy, exports.StringTy, exports.AddressTy],\n    0x3e9f866a: [exports.StringTy, exports.AddressTy, exports.BoolTy, exports.Uint256Ty],\n    0x0454c079: [exports.StringTy, exports.AddressTy, exports.BoolTy, exports.StringTy],\n    0x79884c2b: [exports.StringTy, exports.AddressTy, exports.BoolTy, exports.BoolTy],\n    0x223603bd: [exports.StringTy, exports.AddressTy, exports.BoolTy, exports.AddressTy],\n    0x8ef3f399: [exports.StringTy, exports.AddressTy, exports.AddressTy, exports.Uint256Ty],\n    0x800a1c67: [exports.StringTy, exports.AddressTy, exports.AddressTy, exports.StringTy],\n    0xb59dbd60: [exports.StringTy, exports.AddressTy, exports.AddressTy, exports.BoolTy],\n    0xed8f28f6: [exports.StringTy, exports.AddressTy, exports.AddressTy, exports.AddressTy],\n    0x374bb4b2: [exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty],\n    0x8e69fb5d: [exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty, exports.StringTy],\n    0xbe984353: [exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy],\n    0x00dd87b9: [exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy],\n    0x6a1199e2: [exports.BoolTy, exports.Uint256Ty, exports.StringTy, exports.Uint256Ty],\n    0xf5bc2249: [exports.BoolTy, exports.Uint256Ty, exports.StringTy, exports.StringTy],\n    0xe5e70b2b: [exports.BoolTy, exports.Uint256Ty, exports.StringTy, exports.BoolTy],\n    0xfedd1fff: [exports.BoolTy, exports.Uint256Ty, exports.StringTy, exports.AddressTy],\n    0x7f9bbca2: [exports.BoolTy, exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty],\n    0x9143dbb1: [exports.BoolTy, exports.Uint256Ty, exports.BoolTy, exports.StringTy],\n    0xceb5f4d7: [exports.BoolTy, exports.Uint256Ty, exports.BoolTy, exports.BoolTy],\n    0x9acd3616: [exports.BoolTy, exports.Uint256Ty, exports.BoolTy, exports.AddressTy],\n    0x1537dc87: [exports.BoolTy, exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty],\n    0x1bb3b09a: [exports.BoolTy, exports.Uint256Ty, exports.AddressTy, exports.StringTy],\n    0xb4c314ff: [exports.BoolTy, exports.Uint256Ty, exports.AddressTy, exports.BoolTy],\n    0x26f560a8: [exports.BoolTy, exports.Uint256Ty, exports.AddressTy, exports.AddressTy],\n    0x28863fcb: [exports.BoolTy, exports.StringTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x1ad96de6: [exports.BoolTy, exports.StringTy, exports.Uint256Ty, exports.StringTy],\n    0x6b0e5d53: [exports.BoolTy, exports.StringTy, exports.Uint256Ty, exports.BoolTy],\n    0x1596a1ce: [exports.BoolTy, exports.StringTy, exports.Uint256Ty, exports.AddressTy],\n    0x7be0c3eb: [exports.BoolTy, exports.StringTy, exports.StringTy, exports.Uint256Ty],\n    0x1762e32a: [exports.BoolTy, exports.StringTy, exports.StringTy, exports.StringTy],\n    0x1e4b87e5: [exports.BoolTy, exports.StringTy, exports.StringTy, exports.BoolTy],\n    0x97d394d8: [exports.BoolTy, exports.StringTy, exports.StringTy, exports.AddressTy],\n    0x1606a393: [exports.BoolTy, exports.StringTy, exports.BoolTy, exports.Uint256Ty],\n    0x483d0416: [exports.BoolTy, exports.StringTy, exports.BoolTy, exports.StringTy],\n    0xdc5e935b: [exports.BoolTy, exports.StringTy, exports.BoolTy, exports.BoolTy],\n    0x538e06ab: [exports.BoolTy, exports.StringTy, exports.BoolTy, exports.AddressTy],\n    0xa5cada94: [exports.BoolTy, exports.StringTy, exports.AddressTy, exports.Uint256Ty],\n    0x12d6c788: [exports.BoolTy, exports.StringTy, exports.AddressTy, exports.StringTy],\n    0x6dd434ca: [exports.BoolTy, exports.StringTy, exports.AddressTy, exports.BoolTy],\n    0x2b2b18dc: [exports.BoolTy, exports.StringTy, exports.AddressTy, exports.AddressTy],\n    0x0bb00eab: [exports.BoolTy, exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x7dd4d0e0: [exports.BoolTy, exports.BoolTy, exports.Uint256Ty, exports.StringTy],\n    0x619e4d0e: [exports.BoolTy, exports.BoolTy, exports.Uint256Ty, exports.BoolTy],\n    0x54a7a9a0: [exports.BoolTy, exports.BoolTy, exports.Uint256Ty, exports.AddressTy],\n    0xe3a9ca2f: [exports.BoolTy, exports.BoolTy, exports.StringTy, exports.Uint256Ty],\n    0x6d1e8751: [exports.BoolTy, exports.BoolTy, exports.StringTy, exports.StringTy],\n    0xb857163a: [exports.BoolTy, exports.BoolTy, exports.StringTy, exports.BoolTy],\n    0xf9ad2b89: [exports.BoolTy, exports.BoolTy, exports.StringTy, exports.AddressTy],\n    0x6d7045c1: [exports.BoolTy, exports.BoolTy, exports.BoolTy, exports.Uint256Ty],\n    0x2ae408d4: [exports.BoolTy, exports.BoolTy, exports.BoolTy, exports.StringTy],\n    0x3b2a5ce0: [exports.BoolTy, exports.BoolTy, exports.BoolTy, exports.BoolTy],\n    0x8c329b1a: [exports.BoolTy, exports.BoolTy, exports.BoolTy, exports.AddressTy],\n    0x4c123d57: [exports.BoolTy, exports.BoolTy, exports.AddressTy, exports.Uint256Ty],\n    0xa0a47963: [exports.BoolTy, exports.BoolTy, exports.AddressTy, exports.StringTy],\n    0xc0a302d8: [exports.BoolTy, exports.BoolTy, exports.AddressTy, exports.BoolTy],\n    0xf4880ea4: [exports.BoolTy, exports.BoolTy, exports.AddressTy, exports.AddressTy],\n    0x7bf181a1: [exports.BoolTy, exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x51f09ff8: [exports.BoolTy, exports.AddressTy, exports.Uint256Ty, exports.StringTy],\n    0xd6019f1c: [exports.BoolTy, exports.AddressTy, exports.Uint256Ty, exports.BoolTy],\n    0x136b05dd: [exports.BoolTy, exports.AddressTy, exports.Uint256Ty, exports.AddressTy],\n    0xc21f64c7: [exports.BoolTy, exports.AddressTy, exports.StringTy, exports.Uint256Ty],\n    0xa73c1db6: [exports.BoolTy, exports.AddressTy, exports.StringTy, exports.StringTy],\n    0xe2bfd60b: [exports.BoolTy, exports.AddressTy, exports.StringTy, exports.BoolTy],\n    0x6f7c603e: [exports.BoolTy, exports.AddressTy, exports.StringTy, exports.AddressTy],\n    0x07831502: [exports.BoolTy, exports.AddressTy, exports.BoolTy, exports.Uint256Ty],\n    0x4a66cb34: [exports.BoolTy, exports.AddressTy, exports.BoolTy, exports.StringTy],\n    0x6a9c478b: [exports.BoolTy, exports.AddressTy, exports.BoolTy, exports.BoolTy],\n    0x1c41a336: [exports.BoolTy, exports.AddressTy, exports.BoolTy, exports.AddressTy],\n    0x0c66d1be: [exports.BoolTy, exports.AddressTy, exports.AddressTy, exports.Uint256Ty],\n    0xd812a167: [exports.BoolTy, exports.AddressTy, exports.AddressTy, exports.StringTy],\n    0x46600be0: [exports.BoolTy, exports.AddressTy, exports.AddressTy, exports.BoolTy],\n    0x1d14d001: [exports.BoolTy, exports.AddressTy, exports.AddressTy, exports.AddressTy],\n    0x34f0e636: [exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty, exports.Uint256Ty],\n    0x4a28c017: [exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty, exports.StringTy],\n    0x66f1bc67: [exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty, exports.BoolTy],\n    0x20e3984d: [exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty, exports.AddressTy],\n    0xbf01f891: [exports.AddressTy, exports.Uint256Ty, exports.StringTy, exports.Uint256Ty],\n    0x88a8c406: [exports.AddressTy, exports.Uint256Ty, exports.StringTy, exports.StringTy],\n    0xcf18105c: [exports.AddressTy, exports.Uint256Ty, exports.StringTy, exports.BoolTy],\n    0x5c430d47: [exports.AddressTy, exports.Uint256Ty, exports.StringTy, exports.AddressTy],\n    0x22f6b999: [exports.AddressTy, exports.Uint256Ty, exports.BoolTy, exports.Uint256Ty],\n    0xc5ad85f9: [exports.AddressTy, exports.Uint256Ty, exports.BoolTy, exports.StringTy],\n    0x3bf5e537: [exports.AddressTy, exports.Uint256Ty, exports.BoolTy, exports.BoolTy],\n    0xa31bfdcc: [exports.AddressTy, exports.Uint256Ty, exports.BoolTy, exports.AddressTy],\n    0x100f650e: [exports.AddressTy, exports.Uint256Ty, exports.AddressTy, exports.Uint256Ty],\n    0x1da986ea: [exports.AddressTy, exports.Uint256Ty, exports.AddressTy, exports.StringTy],\n    0xa1bcc9b3: [exports.AddressTy, exports.Uint256Ty, exports.AddressTy, exports.BoolTy],\n    0x478d1c62: [exports.AddressTy, exports.Uint256Ty, exports.AddressTy, exports.AddressTy],\n    0x1dc8e1b8: [exports.AddressTy, exports.StringTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x448830a8: [exports.AddressTy, exports.StringTy, exports.Uint256Ty, exports.StringTy],\n    0x0ef7e050: [exports.AddressTy, exports.StringTy, exports.Uint256Ty, exports.BoolTy],\n    0x63183678: [exports.AddressTy, exports.StringTy, exports.Uint256Ty, exports.AddressTy],\n    0x159f8927: [exports.AddressTy, exports.StringTy, exports.StringTy, exports.Uint256Ty],\n    0x5d02c50b: [exports.AddressTy, exports.StringTy, exports.StringTy, exports.StringTy],\n    0x35a5071f: [exports.AddressTy, exports.StringTy, exports.StringTy, exports.BoolTy],\n    0xa04e2f87: [exports.AddressTy, exports.StringTy, exports.StringTy, exports.AddressTy],\n    0x515e38b6: [exports.AddressTy, exports.StringTy, exports.BoolTy, exports.Uint256Ty],\n    0xbc0b61fe: [exports.AddressTy, exports.StringTy, exports.BoolTy, exports.StringTy],\n    0x5f1d5c9f: [exports.AddressTy, exports.StringTy, exports.BoolTy, exports.BoolTy],\n    0x205871c2: [exports.AddressTy, exports.StringTy, exports.BoolTy, exports.AddressTy],\n    0x457fe3cf: [exports.AddressTy, exports.StringTy, exports.AddressTy, exports.Uint256Ty],\n    0xf7e36245: [exports.AddressTy, exports.StringTy, exports.AddressTy, exports.StringTy],\n    0x0df12b76: [exports.AddressTy, exports.StringTy, exports.AddressTy, exports.BoolTy],\n    0x0d36fa20: [exports.AddressTy, exports.StringTy, exports.AddressTy, exports.AddressTy],\n    0x386ff5f4: [exports.AddressTy, exports.BoolTy, exports.Uint256Ty, exports.Uint256Ty],\n    0x0aa6cfad: [exports.AddressTy, exports.BoolTy, exports.Uint256Ty, exports.StringTy],\n    0xc4643e20: [exports.AddressTy, exports.BoolTy, exports.Uint256Ty, exports.BoolTy],\n    0xccf790a1: [exports.AddressTy, exports.BoolTy, exports.Uint256Ty, exports.AddressTy],\n    0x80e6a20b: [exports.AddressTy, exports.BoolTy, exports.StringTy, exports.Uint256Ty],\n    0x475c5c33: [exports.AddressTy, exports.BoolTy, exports.StringTy, exports.StringTy],\n    0x50ad461d: [exports.AddressTy, exports.BoolTy, exports.StringTy, exports.BoolTy],\n    0x19fd4956: [exports.AddressTy, exports.BoolTy, exports.StringTy, exports.AddressTy],\n    0x8c4e5de6: [exports.AddressTy, exports.BoolTy, exports.BoolTy, exports.Uint256Ty],\n    0xdfc4a2e8: [exports.AddressTy, exports.BoolTy, exports.BoolTy, exports.StringTy],\n    0xcac43479: [exports.AddressTy, exports.BoolTy, exports.BoolTy, exports.BoolTy],\n    0xcf394485: [exports.AddressTy, exports.BoolTy, exports.BoolTy, exports.AddressTy],\n    0xa75c59de: [exports.AddressTy, exports.BoolTy, exports.AddressTy, exports.Uint256Ty],\n    0x2dd778e6: [exports.AddressTy, exports.BoolTy, exports.AddressTy, exports.StringTy],\n    0xa6f50b0f: [exports.AddressTy, exports.BoolTy, exports.AddressTy, exports.BoolTy],\n    0x660375dd: [exports.AddressTy, exports.BoolTy, exports.AddressTy, exports.AddressTy],\n    0xbe553481: [exports.AddressTy, exports.AddressTy, exports.Uint256Ty, exports.Uint256Ty],\n    0xfdb4f990: [exports.AddressTy, exports.AddressTy, exports.Uint256Ty, exports.StringTy],\n    0x9b4254e2: [exports.AddressTy, exports.AddressTy, exports.Uint256Ty, exports.BoolTy],\n    0x8da6def5: [exports.AddressTy, exports.AddressTy, exports.Uint256Ty, exports.AddressTy],\n    0xef1cefe7: [exports.AddressTy, exports.AddressTy, exports.StringTy, exports.Uint256Ty],\n    0x21bdaf25: [exports.AddressTy, exports.AddressTy, exports.StringTy, exports.StringTy],\n    0x6f1a594e: [exports.AddressTy, exports.AddressTy, exports.StringTy, exports.BoolTy],\n    0x8f736d16: [exports.AddressTy, exports.AddressTy, exports.StringTy, exports.AddressTy],\n    0x3971e78c: [exports.AddressTy, exports.AddressTy, exports.BoolTy, exports.Uint256Ty],\n    0xaa6540c8: [exports.AddressTy, exports.AddressTy, exports.BoolTy, exports.StringTy],\n    0x2cd4134a: [exports.AddressTy, exports.AddressTy, exports.BoolTy, exports.BoolTy],\n    0x9f1bc36e: [exports.AddressTy, exports.AddressTy, exports.BoolTy, exports.AddressTy],\n    0x94250d77: [exports.AddressTy, exports.AddressTy, exports.AddressTy, exports.Uint256Ty],\n    0xf808da20: [exports.AddressTy, exports.AddressTy, exports.AddressTy, exports.StringTy],\n    0x0e378994: [exports.AddressTy, exports.AddressTy, exports.AddressTy, exports.BoolTy],\n    0x665bf134: [exports.AddressTy, exports.AddressTy, exports.AddressTy, exports.AddressTy],\n};\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/panic-errors.js":
/*!************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/stack-traces/panic-errors.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.panicErrorCodeToMessage = void 0;\nfunction panicErrorCodeToMessage(errorCode) {\n    const reason = panicErrorCodeToReason(errorCode);\n    if (reason !== undefined) {\n        return `reverted with panic code 0x${errorCode.toString(16)} (${reason})`;\n    }\n    return `reverted with unknown panic code 0x${errorCode.toString(16)}`;\n}\nexports.panicErrorCodeToMessage = panicErrorCodeToMessage;\nfunction panicErrorCodeToReason(errorCode) {\n    switch (errorCode) {\n        case 0x1n:\n            return \"Assertion error\";\n        case 0x11n:\n            return \"Arithmetic operation overflowed outside of an unchecked block\";\n        case 0x12n:\n            return \"Division or modulo division by zero\";\n        case 0x21n:\n            return \"Tried to convert a value into an enum, but the value was too big or negative\";\n        case 0x22n:\n            return \"Incorrectly encoded storage byte array\";\n        case 0x31n:\n            return \".pop() was called on an empty array\";\n        case 0x32n:\n            return \"Array accessed at an out-of-bounds or negative index\";\n        case 0x41n:\n            return \"Too much memory was allocated, or an array was created that is too large\";\n        case 0x51n:\n            return \"Called a zero-initialized variable of internal function type\";\n    }\n}\n//# sourceMappingURL=panic-errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvc3RhY2stdHJhY2VzL3BhbmljLWVycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHdCQUF3QixHQUFHLE9BQU87QUFDL0U7QUFDQSxpREFBaUQsdUJBQXVCO0FBQ3hFO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvaGFyZGhhdC1uZXR3b3JrL3N0YWNrLXRyYWNlcy9wYW5pYy1lcnJvcnMuanM/Mjk1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFuaWNFcnJvckNvZGVUb01lc3NhZ2UgPSB2b2lkIDA7XG5mdW5jdGlvbiBwYW5pY0Vycm9yQ29kZVRvTWVzc2FnZShlcnJvckNvZGUpIHtcbiAgICBjb25zdCByZWFzb24gPSBwYW5pY0Vycm9yQ29kZVRvUmVhc29uKGVycm9yQ29kZSk7XG4gICAgaWYgKHJlYXNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBgcmV2ZXJ0ZWQgd2l0aCBwYW5pYyBjb2RlIDB4JHtlcnJvckNvZGUudG9TdHJpbmcoMTYpfSAoJHtyZWFzb259KWA7XG4gICAgfVxuICAgIHJldHVybiBgcmV2ZXJ0ZWQgd2l0aCB1bmtub3duIHBhbmljIGNvZGUgMHgke2Vycm9yQ29kZS50b1N0cmluZygxNil9YDtcbn1cbmV4cG9ydHMucGFuaWNFcnJvckNvZGVUb01lc3NhZ2UgPSBwYW5pY0Vycm9yQ29kZVRvTWVzc2FnZTtcbmZ1bmN0aW9uIHBhbmljRXJyb3JDb2RlVG9SZWFzb24oZXJyb3JDb2RlKSB7XG4gICAgc3dpdGNoIChlcnJvckNvZGUpIHtcbiAgICAgICAgY2FzZSAweDFuOlxuICAgICAgICAgICAgcmV0dXJuIFwiQXNzZXJ0aW9uIGVycm9yXCI7XG4gICAgICAgIGNhc2UgMHgxMW46XG4gICAgICAgICAgICByZXR1cm4gXCJBcml0aG1ldGljIG9wZXJhdGlvbiBvdmVyZmxvd2VkIG91dHNpZGUgb2YgYW4gdW5jaGVja2VkIGJsb2NrXCI7XG4gICAgICAgIGNhc2UgMHgxMm46XG4gICAgICAgICAgICByZXR1cm4gXCJEaXZpc2lvbiBvciBtb2R1bG8gZGl2aXNpb24gYnkgemVyb1wiO1xuICAgICAgICBjYXNlIDB4MjFuOlxuICAgICAgICAgICAgcmV0dXJuIFwiVHJpZWQgdG8gY29udmVydCBhIHZhbHVlIGludG8gYW4gZW51bSwgYnV0IHRoZSB2YWx1ZSB3YXMgdG9vIGJpZyBvciBuZWdhdGl2ZVwiO1xuICAgICAgICBjYXNlIDB4MjJuOlxuICAgICAgICAgICAgcmV0dXJuIFwiSW5jb3JyZWN0bHkgZW5jb2RlZCBzdG9yYWdlIGJ5dGUgYXJyYXlcIjtcbiAgICAgICAgY2FzZSAweDMxbjpcbiAgICAgICAgICAgIHJldHVybiBcIi5wb3AoKSB3YXMgY2FsbGVkIG9uIGFuIGVtcHR5IGFycmF5XCI7XG4gICAgICAgIGNhc2UgMHgzMm46XG4gICAgICAgICAgICByZXR1cm4gXCJBcnJheSBhY2Nlc3NlZCBhdCBhbiBvdXQtb2YtYm91bmRzIG9yIG5lZ2F0aXZlIGluZGV4XCI7XG4gICAgICAgIGNhc2UgMHg0MW46XG4gICAgICAgICAgICByZXR1cm4gXCJUb28gbXVjaCBtZW1vcnkgd2FzIGFsbG9jYXRlZCwgb3IgYW4gYXJyYXkgd2FzIGNyZWF0ZWQgdGhhdCBpcyB0b28gbGFyZ2VcIjtcbiAgICAgICAgY2FzZSAweDUxbjpcbiAgICAgICAgICAgIHJldHVybiBcIkNhbGxlZCBhIHplcm8taW5pdGlhbGl6ZWQgdmFyaWFibGUgb2YgaW50ZXJuYWwgZnVuY3Rpb24gdHlwZVwiO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhbmljLWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/panic-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SolidityError = exports.encodeSolidityStackTrace = exports.wrapWithSolidityErrorsCorrection = exports.getCurrentStack = void 0;\nconst ethereumjs_util_1 = __webpack_require__(/*! @nomicfoundation/ethereumjs-util */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-util/dist/esm/index.js\");\nconst return_data_1 = __webpack_require__(/*! ../provider/return-data */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/provider/return-data.js\");\nconst panic_errors_1 = __webpack_require__(/*! ./panic-errors */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/panic-errors.js\");\nconst solidity_stack_trace_1 = __webpack_require__(/*! ./solidity-stack-trace */ \"(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-stack-trace.js\");\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction getCurrentStack() {\n    const previousPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = (e, s) => s;\n    const error = new Error();\n    const stack = error.stack;\n    Error.prepareStackTrace = previousPrepareStackTrace;\n    return stack;\n}\nexports.getCurrentStack = getCurrentStack;\nasync function wrapWithSolidityErrorsCorrection(f, stackFramesToRemove) {\n    const stackTraceAtCall = getCurrentStack().slice(stackFramesToRemove);\n    try {\n        return await f();\n    }\n    catch (error) {\n        if (error.stackTrace === undefined) {\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw encodeSolidityStackTrace(error.message, error.stackTrace, stackTraceAtCall);\n    }\n}\nexports.wrapWithSolidityErrorsCorrection = wrapWithSolidityErrorsCorrection;\nfunction encodeSolidityStackTrace(fallbackMessage, stackTrace, previousStack) {\n    if (Error.prepareStackTrace === undefined) {\n        // Node 12 doesn't have a default Error.prepareStackTrace\n        __webpack_require__(/*! source-map-support/register */ \"(ssr)/./node_modules/source-map-support/register.js\");\n    }\n    const previousPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = (error, stack) => {\n        if (previousStack !== undefined) {\n            stack = previousStack;\n        }\n        else {\n            // We remove error management related stack traces\n            stack.splice(0, 1);\n        }\n        for (const entry of stackTrace) {\n            const callsite = encodeStackTraceEntry(entry);\n            if (callsite === undefined) {\n                continue;\n            }\n            stack.unshift(callsite);\n        }\n        return previousPrepareStackTrace(error, stack);\n    };\n    const msg = getMessageFromLastStackTraceEntry(stackTrace[stackTrace.length - 1]);\n    const solidityError = new SolidityError(msg !== undefined ? msg : fallbackMessage, stackTrace);\n    // This hack is here because prepare stack is lazy\n    solidityError.stack = solidityError.stack;\n    Error.prepareStackTrace = previousPrepareStackTrace;\n    return solidityError;\n}\nexports.encodeSolidityStackTrace = encodeSolidityStackTrace;\nfunction encodeStackTraceEntry(stackTraceEntry) {\n    switch (stackTraceEntry.type) {\n        case 11 /* StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR */:\n        case 12 /* StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR */:\n            return sourceReferenceToSolidityCallsite({\n                ...stackTraceEntry.sourceReference,\n                function: solidity_stack_trace_1.UNRECOGNIZED_FUNCTION_NAME,\n            });\n        case 0 /* StackTraceEntryType.CALLSTACK_ENTRY */:\n        case 4 /* StackTraceEntryType.REVERT_ERROR */:\n        case 6 /* StackTraceEntryType.CUSTOM_ERROR */:\n        case 7 /* StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR */:\n        case 8 /* StackTraceEntryType.INVALID_PARAMS_ERROR */:\n        case 9 /* StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR */:\n        case 10 /* StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR */:\n        case 13 /* StackTraceEntryType.RETURNDATA_SIZE_ERROR */:\n        case 14 /* StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR */:\n        case 15 /* StackTraceEntryType.CALL_FAILED_ERROR */:\n        case 16 /* StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR */:\n            return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n        case 1 /* StackTraceEntryType.UNRECOGNIZED_CREATE_CALLSTACK_ENTRY */:\n            return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.CONSTRUCTOR_FUNCTION_NAME, undefined);\n        case 2 /* StackTraceEntryType.UNRECOGNIZED_CONTRACT_CALLSTACK_ENTRY */:\n            return new SolidityCallSite((0, ethereumjs_util_1.bytesToHex)(stackTraceEntry.address), solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n        case 3 /* StackTraceEntryType.PRECOMPILE_ERROR */:\n            return new SolidityCallSite(undefined, `<PrecompileContract ${stackTraceEntry.precompile}>`, solidity_stack_trace_1.PRECOMPILE_FUNCTION_NAME, undefined);\n        case 17 /* StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR */:\n            return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.CONSTRUCTOR_FUNCTION_NAME, undefined);\n        case 18 /* StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR */:\n            return new SolidityCallSite((0, ethereumjs_util_1.bytesToHex)(stackTraceEntry.address), solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n        case 22 /* StackTraceEntryType.INTERNAL_FUNCTION_CALLSTACK_ENTRY */:\n            return new SolidityCallSite(stackTraceEntry.sourceReference.sourceName, stackTraceEntry.sourceReference.contract, `internal@${stackTraceEntry.pc}`, undefined);\n        case 23 /* StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR */:\n            if (stackTraceEntry.sourceReference !== undefined) {\n                return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n            }\n            return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n        case 19 /* StackTraceEntryType.OTHER_EXECUTION_ERROR */:\n        case 21 /* StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR */:\n        case 5 /* StackTraceEntryType.PANIC_ERROR */:\n        case 20 /* StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR */:\n            if (stackTraceEntry.sourceReference === undefined) {\n                return new SolidityCallSite(undefined, solidity_stack_trace_1.UNRECOGNIZED_CONTRACT_NAME, solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, undefined);\n            }\n            return sourceReferenceToSolidityCallsite(stackTraceEntry.sourceReference);\n    }\n}\nfunction sourceReferenceToSolidityCallsite(sourceReference) {\n    return new SolidityCallSite(sourceReference.sourceName, sourceReference.contract, sourceReference.function !== undefined\n        ? sourceReference.function\n        : solidity_stack_trace_1.UNKNOWN_FUNCTION_NAME, sourceReference.line);\n}\nfunction getMessageFromLastStackTraceEntry(stackTraceEntry) {\n    switch (stackTraceEntry.type) {\n        case 3 /* StackTraceEntryType.PRECOMPILE_ERROR */:\n            return `Transaction reverted: call to precompile ${stackTraceEntry.precompile} failed`;\n        case 7 /* StackTraceEntryType.FUNCTION_NOT_PAYABLE_ERROR */:\n            return `Transaction reverted: non-payable function was called with value ${stackTraceEntry.value.toString(10)}`;\n        case 8 /* StackTraceEntryType.INVALID_PARAMS_ERROR */:\n            return `Transaction reverted: function was called with incorrect parameters`;\n        case 9 /* StackTraceEntryType.FALLBACK_NOT_PAYABLE_ERROR */:\n            return `Transaction reverted: fallback function is not payable and was called with value ${stackTraceEntry.value.toString(10)}`;\n        case 10 /* StackTraceEntryType.FALLBACK_NOT_PAYABLE_AND_NO_RECEIVE_ERROR */:\n            return `Transaction reverted: there's no receive function, fallback function is not payable and was called with value ${stackTraceEntry.value.toString(10)}`;\n        case 11 /* StackTraceEntryType.UNRECOGNIZED_FUNCTION_WITHOUT_FALLBACK_ERROR */:\n            return `Transaction reverted: function selector was not recognized and there's no fallback function`;\n        case 12 /* StackTraceEntryType.MISSING_FALLBACK_OR_RECEIVE_ERROR */:\n            return `Transaction reverted: function selector was not recognized and there's no fallback nor receive function`;\n        case 13 /* StackTraceEntryType.RETURNDATA_SIZE_ERROR */:\n            return `Transaction reverted: function returned an unexpected amount of data`;\n        case 14 /* StackTraceEntryType.NONCONTRACT_ACCOUNT_CALLED_ERROR */:\n            return `Transaction reverted: function call to a non-contract account`;\n        case 15 /* StackTraceEntryType.CALL_FAILED_ERROR */:\n            return `Transaction reverted: function call failed to execute`;\n        case 16 /* StackTraceEntryType.DIRECT_LIBRARY_CALL_ERROR */:\n            return `Transaction reverted: library was called directly`;\n        case 17 /* StackTraceEntryType.UNRECOGNIZED_CREATE_ERROR */:\n        case 18 /* StackTraceEntryType.UNRECOGNIZED_CONTRACT_ERROR */: {\n            const returnData = new return_data_1.ReturnData(stackTraceEntry.returnData);\n            if (returnData.isErrorReturnData()) {\n                return `VM Exception while processing transaction: reverted with reason string '${returnData.decodeError()}'`;\n            }\n            if (returnData.isPanicReturnData()) {\n                const message = (0, panic_errors_1.panicErrorCodeToMessage)(returnData.decodePanic());\n                return `VM Exception while processing transaction: ${message}`;\n            }\n            if (!returnData.isEmpty()) {\n                const buffer = Buffer.from(returnData.value).toString(\"hex\");\n                return `VM Exception while processing transaction: reverted with an unrecognized custom error (return data: 0x${buffer})`;\n            }\n            if (stackTraceEntry.isInvalidOpcodeError) {\n                return \"VM Exception while processing transaction: invalid opcode\";\n            }\n            return \"Transaction reverted without a reason string\";\n        }\n        case 4 /* StackTraceEntryType.REVERT_ERROR */: {\n            const returnData = new return_data_1.ReturnData(stackTraceEntry.returnData);\n            if (returnData.isErrorReturnData()) {\n                return `VM Exception while processing transaction: reverted with reason string '${returnData.decodeError()}'`;\n            }\n            if (stackTraceEntry.isInvalidOpcodeError) {\n                return \"VM Exception while processing transaction: invalid opcode\";\n            }\n            return \"Transaction reverted without a reason string\";\n        }\n        case 5 /* StackTraceEntryType.PANIC_ERROR */:\n            const panicMessage = (0, panic_errors_1.panicErrorCodeToMessage)(stackTraceEntry.errorCode);\n            return `VM Exception while processing transaction: ${panicMessage}`;\n        case 6 /* StackTraceEntryType.CUSTOM_ERROR */:\n            return `VM Exception while processing transaction: ${stackTraceEntry.message}`;\n        case 19 /* StackTraceEntryType.OTHER_EXECUTION_ERROR */:\n            // TODO: What if there was returnData?\n            return `Transaction reverted and Hardhat couldn't infer the reason.`;\n        case 20 /* StackTraceEntryType.UNMAPPED_SOLC_0_6_3_REVERT_ERROR */:\n            return \"Transaction reverted without a reason string and without a valid sourcemap provided by the compiler. Some line numbers may be off. We strongly recommend upgrading solc and always using revert reasons.\";\n        case 21 /* StackTraceEntryType.CONTRACT_TOO_LARGE_ERROR */:\n            return \"Transaction reverted: trying to deploy a contract whose code is too large\";\n        case 23 /* StackTraceEntryType.CONTRACT_CALL_RUN_OUT_OF_GAS_ERROR */:\n            return \"Transaction reverted: contract call run out of gas and made the transaction revert\";\n    }\n}\n// Note: This error class MUST NOT extend ProviderError, as libraries\n//   use the code property to detect if they are dealing with a JSON-RPC error,\n//   and take control of errors.\nclass SolidityError extends Error {\n    constructor(message, stackTrace) {\n        super(message);\n        this.stackTrace = stackTrace;\n    }\n    [inspect]() {\n        return this.inspect();\n    }\n    inspect() {\n        return this.stack !== undefined\n            ? this.stack\n            : \"Internal error when encoding SolidityError\";\n    }\n}\nexports.SolidityError = SolidityError;\nclass SolidityCallSite {\n    constructor(_sourceName, _contract, _functionName, _line) {\n        this._sourceName = _sourceName;\n        this._contract = _contract;\n        this._functionName = _functionName;\n        this._line = _line;\n    }\n    getColumnNumber() {\n        return null;\n    }\n    getEvalOrigin() {\n        return undefined;\n    }\n    getFileName() {\n        return this._sourceName ?? \"unknown\";\n    }\n    getFunction() {\n        return undefined;\n    }\n    getFunctionName() {\n        // if it's a top-level function, we print its name\n        if (this._contract === undefined) {\n            return this._functionName ?? null;\n        }\n        return null;\n    }\n    getLineNumber() {\n        return this._line !== undefined ? this._line : null;\n    }\n    getMethodName() {\n        if (this._contract !== undefined) {\n            return this._functionName ?? null;\n        }\n        return null;\n    }\n    getPosition() {\n        return 0;\n    }\n    getPromiseIndex() {\n        return 0;\n    }\n    getScriptNameOrSourceURL() {\n        return \"\";\n    }\n    getThis() {\n        return undefined;\n    }\n    getTypeName() {\n        return this._contract ?? null;\n    }\n    isAsync() {\n        return false;\n    }\n    isConstructor() {\n        return false;\n    }\n    isEval() {\n        return false;\n    }\n    isNative() {\n        return false;\n    }\n    isPromiseAll() {\n        return false;\n    }\n    isToplevel() {\n        return false;\n    }\n    getScriptHash() {\n        return \"\";\n    }\n    getEnclosingColumnNumber() {\n        return 0;\n    }\n    getEnclosingLineNumber() {\n        return 0;\n    }\n    toString() {\n        return \"[SolidityCallSite]\";\n    }\n}\n//# sourceMappingURL=solidity-errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-stack-trace.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-stack-trace.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UNRECOGNIZED_CONTRACT_NAME = exports.PRECOMPILE_FUNCTION_NAME = exports.UNKNOWN_FUNCTION_NAME = exports.UNRECOGNIZED_FUNCTION_NAME = exports.CONSTRUCTOR_FUNCTION_NAME = exports.RECEIVE_FUNCTION_NAME = exports.FALLBACK_FUNCTION_NAME = exports.stackTraceEntryTypeToString = exports.StackTraceEntryType = void 0;\nconst napi_rs_1 = __webpack_require__(/*! ../../../common/napi-rs */ \"(ssr)/./node_modules/hardhat/common/napi-rs.js\");\nconst { StackTraceEntryType, stackTraceEntryTypeToString, FALLBACK_FUNCTION_NAME, RECEIVE_FUNCTION_NAME, CONSTRUCTOR_FUNCTION_NAME, UNRECOGNIZED_FUNCTION_NAME, UNKNOWN_FUNCTION_NAME, PRECOMPILE_FUNCTION_NAME, UNRECOGNIZED_CONTRACT_NAME, } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/edr\");\nexports.StackTraceEntryType = StackTraceEntryType;\nexports.stackTraceEntryTypeToString = stackTraceEntryTypeToString;\nexports.FALLBACK_FUNCTION_NAME = FALLBACK_FUNCTION_NAME;\nexports.RECEIVE_FUNCTION_NAME = RECEIVE_FUNCTION_NAME;\nexports.CONSTRUCTOR_FUNCTION_NAME = CONSTRUCTOR_FUNCTION_NAME;\nexports.UNRECOGNIZED_FUNCTION_NAME = UNRECOGNIZED_FUNCTION_NAME;\nexports.UNKNOWN_FUNCTION_NAME = UNKNOWN_FUNCTION_NAME;\nexports.PRECOMPILE_FUNCTION_NAME = PRECOMPILE_FUNCTION_NAME;\nexports.UNRECOGNIZED_CONTRACT_NAME = UNRECOGNIZED_CONTRACT_NAME;\n//# sourceMappingURL=solidity-stack-trace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9oYXJkaGF0LW5ldHdvcmsvc3RhY2stdHJhY2VzL3NvbGlkaXR5LXN0YWNrLXRyYWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQyxHQUFHLGdDQUFnQyxHQUFHLDZCQUE2QixHQUFHLGtDQUFrQyxHQUFHLGlDQUFpQyxHQUFHLDZCQUE2QixHQUFHLDhCQUE4QixHQUFHLG1DQUFtQyxHQUFHLDJCQUEyQjtBQUNuVCxrQkFBa0IsbUJBQU8sQ0FBQywrRUFBeUI7QUFDbkQsUUFBUSx1T0FBdU87QUFDL08sMkJBQTJCO0FBQzNCLG1DQUFtQztBQUNuQyw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCLGlDQUFpQztBQUNqQyxrQ0FBa0M7QUFDbEMsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUNoQyxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvaGFyZGhhdC1uZXR3b3JrL3N0YWNrLXRyYWNlcy9zb2xpZGl0eS1zdGFjay10cmFjZS5qcz8zZGY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VTlJFQ09HTklaRURfQ09OVFJBQ1RfTkFNRSA9IGV4cG9ydHMuUFJFQ09NUElMRV9GVU5DVElPTl9OQU1FID0gZXhwb3J0cy5VTktOT1dOX0ZVTkNUSU9OX05BTUUgPSBleHBvcnRzLlVOUkVDT0dOSVpFRF9GVU5DVElPTl9OQU1FID0gZXhwb3J0cy5DT05TVFJVQ1RPUl9GVU5DVElPTl9OQU1FID0gZXhwb3J0cy5SRUNFSVZFX0ZVTkNUSU9OX05BTUUgPSBleHBvcnRzLkZBTExCQUNLX0ZVTkNUSU9OX05BTUUgPSBleHBvcnRzLnN0YWNrVHJhY2VFbnRyeVR5cGVUb1N0cmluZyA9IGV4cG9ydHMuU3RhY2tUcmFjZUVudHJ5VHlwZSA9IHZvaWQgMDtcbmNvbnN0IG5hcGlfcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vbmFwaS1yc1wiKTtcbmNvbnN0IHsgU3RhY2tUcmFjZUVudHJ5VHlwZSwgc3RhY2tUcmFjZUVudHJ5VHlwZVRvU3RyaW5nLCBGQUxMQkFDS19GVU5DVElPTl9OQU1FLCBSRUNFSVZFX0ZVTkNUSU9OX05BTUUsIENPTlNUUlVDVE9SX0ZVTkNUSU9OX05BTUUsIFVOUkVDT0dOSVpFRF9GVU5DVElPTl9OQU1FLCBVTktOT1dOX0ZVTkNUSU9OX05BTUUsIFBSRUNPTVBJTEVfRlVOQ1RJT05fTkFNRSwgVU5SRUNPR05JWkVEX0NPTlRSQUNUX05BTUUsIH0gPSAoMCwgbmFwaV9yc18xLnJlcXVpcmVOYXBpUnNNb2R1bGUpKFwiQG5vbWljZm91bmRhdGlvbi9lZHJcIik7XG5leHBvcnRzLlN0YWNrVHJhY2VFbnRyeVR5cGUgPSBTdGFja1RyYWNlRW50cnlUeXBlO1xuZXhwb3J0cy5zdGFja1RyYWNlRW50cnlUeXBlVG9TdHJpbmcgPSBzdGFja1RyYWNlRW50cnlUeXBlVG9TdHJpbmc7XG5leHBvcnRzLkZBTExCQUNLX0ZVTkNUSU9OX05BTUUgPSBGQUxMQkFDS19GVU5DVElPTl9OQU1FO1xuZXhwb3J0cy5SRUNFSVZFX0ZVTkNUSU9OX05BTUUgPSBSRUNFSVZFX0ZVTkNUSU9OX05BTUU7XG5leHBvcnRzLkNPTlNUUlVDVE9SX0ZVTkNUSU9OX05BTUUgPSBDT05TVFJVQ1RPUl9GVU5DVElPTl9OQU1FO1xuZXhwb3J0cy5VTlJFQ09HTklaRURfRlVOQ1RJT05fTkFNRSA9IFVOUkVDT0dOSVpFRF9GVU5DVElPTl9OQU1FO1xuZXhwb3J0cy5VTktOT1dOX0ZVTkNUSU9OX05BTUUgPSBVTktOT1dOX0ZVTkNUSU9OX05BTUU7XG5leHBvcnRzLlBSRUNPTVBJTEVfRlVOQ1RJT05fTkFNRSA9IFBSRUNPTVBJTEVfRlVOQ1RJT05fTkFNRTtcbmV4cG9ydHMuVU5SRUNPR05JWkVEX0NPTlRSQUNUX05BTUUgPSBVTlJFQ09HTklaRURfQ09OVFJBQ1RfTkFNRTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvbGlkaXR5LXN0YWNrLXRyYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/hardhat-network/stack-traces/solidity-stack-trace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/lib/hardhat-lib.js":
/*!**********************************************************!*\
  !*** ./node_modules/hardhat/internal/lib/hardhat-lib.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst context_1 = __webpack_require__(/*! ../context */ \"(ssr)/./node_modules/hardhat/internal/context.js\");\nconst config_loading_1 = __webpack_require__(/*! ../core/config/config-loading */ \"(ssr)/./node_modules/hardhat/internal/core/config/config-loading.js\");\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst env_variables_1 = __webpack_require__(/*! ../core/params/env-variables */ \"(ssr)/./node_modules/hardhat/internal/core/params/env-variables.js\");\nconst hardhat_params_1 = __webpack_require__(/*! ../core/params/hardhat-params */ \"(ssr)/./node_modules/hardhat/internal/core/params/hardhat-params.js\");\nconst runtime_environment_1 = __webpack_require__(/*! ../core/runtime-environment */ \"(ssr)/./node_modules/hardhat/internal/core/runtime-environment.js\");\nlet ctx;\nlet env;\nif (context_1.HardhatContext.isCreated()) {\n    ctx = context_1.HardhatContext.getHardhatContext();\n    // The most probable reason for this to happen is that this file was imported\n    // from the config file\n    if (ctx.environment === undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.LIB_IMPORTED_FROM_THE_CONFIG);\n    }\n    env = ctx.environment;\n}\nelse {\n    ctx = context_1.HardhatContext.createHardhatContext();\n    const hardhatArguments = (0, env_variables_1.getEnvHardhatArguments)(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS, process.env);\n    if (hardhatArguments.verbose) {\n        debug_1.default.enable(\"hardhat*\");\n    }\n    const { resolvedConfig, userConfig } = (0, config_loading_1.loadConfigAndTasks)(hardhatArguments);\n    env = new runtime_environment_1.Environment(resolvedConfig, hardhatArguments, ctx.tasksDSL.getTaskDefinitions(), ctx.tasksDSL.getScopesDefinitions(), ctx.environmentExtenders, userConfig, ctx.providerExtenders);\n    ctx.setHardhatRuntimeEnvironment(env);\n}\nmodule.exports = env;\n//# sourceMappingURL=hardhat-lib.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9saWIvaGFyZGhhdC1saWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFPO0FBQy9DLGtCQUFrQixtQkFBTyxDQUFDLG9FQUFZO0FBQ3RDLHlCQUF5QixtQkFBTyxDQUFDLDBHQUErQjtBQUNoRSxpQkFBaUIsbUJBQU8sQ0FBQyw0RUFBZ0I7QUFDekMsc0JBQXNCLG1CQUFPLENBQUMsc0ZBQXFCO0FBQ25ELHdCQUF3QixtQkFBTyxDQUFDLHdHQUE4QjtBQUM5RCx5QkFBeUIsbUJBQU8sQ0FBQywwR0FBK0I7QUFDaEUsOEJBQThCLG1CQUFPLENBQUMsc0dBQTZCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL2xpYi9oYXJkaGF0LWxpYi5qcz9mZDg2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgY29udGV4dF8xID0gcmVxdWlyZShcIi4uL2NvbnRleHRcIik7XG5jb25zdCBjb25maWdfbG9hZGluZ18xID0gcmVxdWlyZShcIi4uL2NvcmUvY29uZmlnL2NvbmZpZy1sb2FkaW5nXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vY29yZS9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4uL2NvcmUvZXJyb3JzLWxpc3RcIik7XG5jb25zdCBlbnZfdmFyaWFibGVzXzEgPSByZXF1aXJlKFwiLi4vY29yZS9wYXJhbXMvZW52LXZhcmlhYmxlc1wiKTtcbmNvbnN0IGhhcmRoYXRfcGFyYW1zXzEgPSByZXF1aXJlKFwiLi4vY29yZS9wYXJhbXMvaGFyZGhhdC1wYXJhbXNcIik7XG5jb25zdCBydW50aW1lX2Vudmlyb25tZW50XzEgPSByZXF1aXJlKFwiLi4vY29yZS9ydW50aW1lLWVudmlyb25tZW50XCIpO1xubGV0IGN0eDtcbmxldCBlbnY7XG5pZiAoY29udGV4dF8xLkhhcmRoYXRDb250ZXh0LmlzQ3JlYXRlZCgpKSB7XG4gICAgY3R4ID0gY29udGV4dF8xLkhhcmRoYXRDb250ZXh0LmdldEhhcmRoYXRDb250ZXh0KCk7XG4gICAgLy8gVGhlIG1vc3QgcHJvYmFibGUgcmVhc29uIGZvciB0aGlzIHRvIGhhcHBlbiBpcyB0aGF0IHRoaXMgZmlsZSB3YXMgaW1wb3J0ZWRcbiAgICAvLyBmcm9tIHRoZSBjb25maWcgZmlsZVxuICAgIGlmIChjdHguZW52aXJvbm1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLkdFTkVSQUwuTElCX0lNUE9SVEVEX0ZST01fVEhFX0NPTkZJRyk7XG4gICAgfVxuICAgIGVudiA9IGN0eC5lbnZpcm9ubWVudDtcbn1cbmVsc2Uge1xuICAgIGN0eCA9IGNvbnRleHRfMS5IYXJkaGF0Q29udGV4dC5jcmVhdGVIYXJkaGF0Q29udGV4dCgpO1xuICAgIGNvbnN0IGhhcmRoYXRBcmd1bWVudHMgPSAoMCwgZW52X3ZhcmlhYmxlc18xLmdldEVudkhhcmRoYXRBcmd1bWVudHMpKGhhcmRoYXRfcGFyYW1zXzEuSEFSREhBVF9QQVJBTV9ERUZJTklUSU9OUywgcHJvY2Vzcy5lbnYpO1xuICAgIGlmIChoYXJkaGF0QXJndW1lbnRzLnZlcmJvc2UpIHtcbiAgICAgICAgZGVidWdfMS5kZWZhdWx0LmVuYWJsZShcImhhcmRoYXQqXCIpO1xuICAgIH1cbiAgICBjb25zdCB7IHJlc29sdmVkQ29uZmlnLCB1c2VyQ29uZmlnIH0gPSAoMCwgY29uZmlnX2xvYWRpbmdfMS5sb2FkQ29uZmlnQW5kVGFza3MpKGhhcmRoYXRBcmd1bWVudHMpO1xuICAgIGVudiA9IG5ldyBydW50aW1lX2Vudmlyb25tZW50XzEuRW52aXJvbm1lbnQocmVzb2x2ZWRDb25maWcsIGhhcmRoYXRBcmd1bWVudHMsIGN0eC50YXNrc0RTTC5nZXRUYXNrRGVmaW5pdGlvbnMoKSwgY3R4LnRhc2tzRFNMLmdldFNjb3Blc0RlZmluaXRpb25zKCksIGN0eC5lbnZpcm9ubWVudEV4dGVuZGVycywgdXNlckNvbmZpZywgY3R4LnByb3ZpZGVyRXh0ZW5kZXJzKTtcbiAgICBjdHguc2V0SGFyZGhhdFJ1bnRpbWVFbnZpcm9ubWVudChlbnYpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBlbnY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXJkaGF0LWxpYi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/lib/hardhat-lib.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/sentry/reporter.js":
/*!**********************************************************!*\
  !*** ./node_modules/hardhat/internal/sentry/reporter.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Reporter = exports.SENTRY_DSN = void 0;\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst execution_mode_1 = __webpack_require__(/*! ../core/execution-mode */ \"(ssr)/./node_modules/hardhat/internal/core/execution-mode.js\");\nconst errors_2 = __webpack_require__(/*! ../core/providers/errors */ \"(ssr)/./node_modules/hardhat/internal/core/providers/errors.js\");\nconst ci_detection_1 = __webpack_require__(/*! ../util/ci-detection */ \"(ssr)/./node_modules/hardhat/internal/util/ci-detection.js\");\nconst global_dir_1 = __webpack_require__(/*! ../util/global-dir */ \"(ssr)/./node_modules/hardhat/internal/util/global-dir.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(ssr)/./node_modules/hardhat/internal/sentry/transport.js\");\nexports.SENTRY_DSN = \"https://38ba58bb85fa409e9bb7f50d2c419bc2@o385026.ingest.sentry.io/5224869\";\n/**\n * This class acts as a global singleton for reporting errors through Sentry.\n */\nclass Reporter {\n    static reportError(error) {\n        const instance = Reporter._getInstance();\n        if (!instance.enabled) {\n            return;\n        }\n        if (!Reporter.shouldReport(error)) {\n            return;\n        }\n        instance.init();\n        const Sentry = __webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/index.js\");\n        Sentry.setExtra(\"verbose\", instance.verbose);\n        Sentry.setExtra(\"configPath\", instance.configPath);\n        Sentry.setExtra(\"nodeVersion\", process.version);\n        const hardhatVersion = (0, packageInfo_1.getHardhatVersion)();\n        Sentry.setExtra(\"hardhatVersion\", hardhatVersion);\n        Sentry.captureException(error);\n        return true;\n    }\n    /**\n     * Enable or disable reporting. When disabled, all calls to `reportError` are\n     * no-ops.\n     */\n    static setEnabled(enabled) {\n        const instance = Reporter._getInstance();\n        instance.enabled = enabled;\n    }\n    /**\n     * Enable or disable verbose output. This is necessary to pass the correct\n     * environment variable to the transport subprocess.\n     */\n    static setVerbose(verbose) {\n        const instance = Reporter._getInstance();\n        instance.verbose = verbose;\n    }\n    /**\n     * The path to the hardhat config file. We use this when files are anonymized,\n     * since the hardhat config is the only file in the user's project that is not\n     * anonymized.\n     */\n    static setConfigPath(configPath) {\n        const instance = Reporter._getInstance();\n        instance.configPath = configPath;\n    }\n    /**\n     * Wait until all Sentry events were sent or until `timeout` milliseconds are\n     * elapsed.\n     *\n     * This needs to be used before calling `process.exit`, otherwise some events\n     * might get lost.\n     */\n    static async close(timeout) {\n        const instance = Reporter._getInstance();\n        if (!instance.enabled || !instance.initialized) {\n            return true;\n        }\n        const Sentry = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/index.js\")));\n        return Sentry.close(timeout);\n    }\n    static shouldReport(error) {\n        if (errors_1.HardhatError.isHardhatError(error) &&\n            !error.errorDescriptor.shouldBeReported) {\n            return false;\n        }\n        if (errors_1.HardhatPluginError.isHardhatPluginError(error)) {\n            if (errors_1.NomicLabsHardhatPluginError.isNomicLabsHardhatPluginError(error)) {\n                return error.shouldBeReported;\n            }\n            // don't log errors from third-party plugins\n            return false;\n        }\n        // We don't report network related errors\n        if (error instanceof errors_2.ProviderError) {\n            return false;\n        }\n        if (!Reporter._hasTelemetryConsent()) {\n            return false;\n        }\n        return true;\n    }\n    static _getInstance() {\n        if (this._instance === undefined) {\n            this._instance = new Reporter();\n        }\n        return this._instance;\n    }\n    static _hasTelemetryConsent() {\n        const telemetryConsent = (0, global_dir_1.hasConsentedTelemetry)();\n        return telemetryConsent === true;\n    }\n    constructor() {\n        this.initialized = false;\n        this.verbose = false;\n        this.enabled = true;\n        if ((0, ci_detection_1.isRunningOnCiServer)()) {\n            this.enabled = false;\n        }\n        // set HARDHAT_ENABLE_SENTRY=true to enable sentry during development (for local testing)\n        if ((0, execution_mode_1.isLocalDev)() && process.env.HARDHAT_ENABLE_SENTRY === undefined) {\n            this.enabled = false;\n        }\n    }\n    init() {\n        if (this.initialized) {\n            return;\n        }\n        const Sentry = __webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/index.js\");\n        const linkedErrorsIntegration = new Sentry.Integrations.LinkedErrors({\n            key: \"parent\",\n        });\n        Sentry.init({\n            dsn: exports.SENTRY_DSN,\n            transport: (0, transport_1.getSubprocessTransport)(),\n            integrations: () => [linkedErrorsIntegration],\n        });\n        this.initialized = true;\n    }\n}\nexports.Reporter = Reporter;\n//# sourceMappingURL=reporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/sentry/reporter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/sentry/transport.js":
/*!***********************************************************!*\
  !*** ./node_modules/hardhat/internal/sentry/transport.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getSubprocessTransport = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\n// This class is wrapped in a function to avoid having to\n// import @sentry/node just for the BaseTransport base class\nfunction getSubprocessTransport() {\n    const { Status, Transports } = __webpack_require__(/*! @sentry/node */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/index.js\");\n    class SubprocessTransport extends Transports.BaseTransport {\n        async sendEvent(event) {\n            const extra = event.extra ?? {};\n            const { verbose = false, configPath } = extra;\n            // don't send user's full config path for privacy reasons\n            delete event.extra?.configPath;\n            // we don't care about the verbose setting\n            delete event.extra?.verbose;\n            const serializedEvent = JSON.stringify(event);\n            const env = {\n                HARDHAT_SENTRY_EVENT: serializedEvent,\n                HARDHAT_SENTRY_VERBOSE: verbose.toString(),\n            };\n            if (configPath !== undefined) {\n                env.HARDHAT_SENTRY_CONFIG_PATH = configPath;\n            }\n            const subprocessPath = path.join(__dirname, \"subprocess\");\n            const subprocess = (0, child_process_1.spawn)(process.execPath, [subprocessPath], {\n                detached: true,\n                env,\n                stdio: (verbose ? \"inherit\" : \"ignore\"),\n            });\n            subprocess.unref();\n            return {\n                status: Status.Success,\n            };\n        }\n    }\n    return SubprocessTransport;\n}\nexports.getSubprocessTransport = getSubprocessTransport;\n//# sourceMappingURL=transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9zZW50cnkvdHJhbnNwb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsd0JBQXdCLG1CQUFPLENBQUMsb0NBQWU7QUFDL0MsMEJBQTBCLG1CQUFPLENBQUMsa0JBQU07QUFDeEM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUIsRUFBRSxtQkFBTyxDQUFDLHlGQUFjO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL3NlbnRyeS90cmFuc3BvcnQuanM/ZjBhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRTdWJwcm9jZXNzVHJhbnNwb3J0ID0gdm9pZCAwO1xuY29uc3QgY2hpbGRfcHJvY2Vzc18xID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG5jb25zdCBwYXRoID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJwYXRoXCIpKTtcbi8vIFRoaXMgY2xhc3MgaXMgd3JhcHBlZCBpbiBhIGZ1bmN0aW9uIHRvIGF2b2lkIGhhdmluZyB0b1xuLy8gaW1wb3J0IEBzZW50cnkvbm9kZSBqdXN0IGZvciB0aGUgQmFzZVRyYW5zcG9ydCBiYXNlIGNsYXNzXG5mdW5jdGlvbiBnZXRTdWJwcm9jZXNzVHJhbnNwb3J0KCkge1xuICAgIGNvbnN0IHsgU3RhdHVzLCBUcmFuc3BvcnRzIH0gPSByZXF1aXJlKFwiQHNlbnRyeS9ub2RlXCIpO1xuICAgIGNsYXNzIFN1YnByb2Nlc3NUcmFuc3BvcnQgZXh0ZW5kcyBUcmFuc3BvcnRzLkJhc2VUcmFuc3BvcnQge1xuICAgICAgICBhc3luYyBzZW5kRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhID0gZXZlbnQuZXh0cmEgPz8ge307XG4gICAgICAgICAgICBjb25zdCB7IHZlcmJvc2UgPSBmYWxzZSwgY29uZmlnUGF0aCB9ID0gZXh0cmE7XG4gICAgICAgICAgICAvLyBkb24ndCBzZW5kIHVzZXIncyBmdWxsIGNvbmZpZyBwYXRoIGZvciBwcml2YWN5IHJlYXNvbnNcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudC5leHRyYT8uY29uZmlnUGF0aDtcbiAgICAgICAgICAgIC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhlIHZlcmJvc2Ugc2V0dGluZ1xuICAgICAgICAgICAgZGVsZXRlIGV2ZW50LmV4dHJhPy52ZXJib3NlO1xuICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZEV2ZW50ID0gSlNPTi5zdHJpbmdpZnkoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgZW52ID0ge1xuICAgICAgICAgICAgICAgIEhBUkRIQVRfU0VOVFJZX0VWRU5UOiBzZXJpYWxpemVkRXZlbnQsXG4gICAgICAgICAgICAgICAgSEFSREhBVF9TRU5UUllfVkVSQk9TRTogdmVyYm9zZS50b1N0cmluZygpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjb25maWdQYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBlbnYuSEFSREhBVF9TRU5UUllfQ09ORklHX1BBVEggPSBjb25maWdQYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3VicHJvY2Vzc1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBcInN1YnByb2Nlc3NcIik7XG4gICAgICAgICAgICBjb25zdCBzdWJwcm9jZXNzID0gKDAsIGNoaWxkX3Byb2Nlc3NfMS5zcGF3bikocHJvY2Vzcy5leGVjUGF0aCwgW3N1YnByb2Nlc3NQYXRoXSwge1xuICAgICAgICAgICAgICAgIGRldGFjaGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudixcbiAgICAgICAgICAgICAgICBzdGRpbzogKHZlcmJvc2UgPyBcImluaGVyaXRcIiA6IFwiaWdub3JlXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdWJwcm9jZXNzLnVucmVmKCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogU3RhdHVzLlN1Y2Nlc3MsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTdWJwcm9jZXNzVHJhbnNwb3J0O1xufVxuZXhwb3J0cy5nZXRTdWJwcm9jZXNzVHJhbnNwb3J0ID0gZ2V0U3VicHJvY2Vzc1RyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zcG9ydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/sentry/transport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/compilation-job.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/compilation-job.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeCompilationJobsWithoutBug = exports.mergeCompilationJobsWithBug = exports.createCompilationJobFromFile = exports.createCompilationJobsFromConnectedComponent = exports.CompilationJob = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst semver_1 = __importDefault(__webpack_require__(/*! semver */ \"(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\"));\nconst builtin_tasks_1 = __webpack_require__(/*! ../../types/builtin-tasks */ \"(ssr)/./node_modules/hardhat/types/builtin-tasks/index.js\");\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:compilation-job\");\n// this should have a proper version range when it's fixed\nconst SOLC_BUG_9573_VERSIONS = \"<0.8.0\";\nfunction isCompilationJobCreationError(x) {\n    return \"reason\" in x;\n}\nclass CompilationJob {\n    constructor(solidityConfig) {\n        this.solidityConfig = solidityConfig;\n        this._filesToCompile = new Map();\n    }\n    addFileToCompile(file, emitsArtifacts) {\n        const fileToCompile = this._filesToCompile.get(file.sourceName);\n        // if the file doesn't exist, we add it\n        // we also add it if emitsArtifacts is true, to override it in case it was\n        // previously added but with a false emitsArtifacts\n        if (fileToCompile === undefined || emitsArtifacts) {\n            this._filesToCompile.set(file.sourceName, { file, emitsArtifacts });\n        }\n    }\n    hasSolc9573Bug() {\n        return (this.solidityConfig?.settings?.optimizer?.enabled === true &&\n            semver_1.default.satisfies(this.solidityConfig.version, SOLC_BUG_9573_VERSIONS));\n    }\n    merge(job) {\n        const isEqual = __webpack_require__(/*! lodash/isEqual */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n        (0, errors_1.assertHardhatInvariant)(isEqual(this.solidityConfig, job.getSolcConfig()), \"Merging jobs with different solidity configurations\");\n        const mergedJobs = new CompilationJob(job.getSolcConfig());\n        for (const file of this.getResolvedFiles()) {\n            mergedJobs.addFileToCompile(file, this.emitsArtifacts(file));\n        }\n        for (const file of job.getResolvedFiles()) {\n            mergedJobs.addFileToCompile(file, job.emitsArtifacts(file));\n        }\n        return mergedJobs;\n    }\n    getSolcConfig() {\n        return this.solidityConfig;\n    }\n    isEmpty() {\n        return this._filesToCompile.size === 0;\n    }\n    getResolvedFiles() {\n        return [...this._filesToCompile.values()].map((x) => x.file);\n    }\n    /**\n     * Check if the given file emits artifacts.\n     *\n     * If no file is given, check if *some* file in the job emits artifacts.\n     */\n    emitsArtifacts(file) {\n        const fileToCompile = this._filesToCompile.get(file.sourceName);\n        (0, errors_1.assertHardhatInvariant)(fileToCompile !== undefined, `File '${file.sourceName}' does not exist in this compilation job`);\n        return fileToCompile.emitsArtifacts;\n    }\n}\nexports.CompilationJob = CompilationJob;\nfunction mergeCompilationJobs(jobs, isMergeable) {\n    const jobsMap = new Map();\n    for (const job of jobs) {\n        const mergedJobs = jobsMap.get(job.getSolcConfig());\n        if (isMergeable(job)) {\n            if (mergedJobs === undefined) {\n                jobsMap.set(job.getSolcConfig(), [job]);\n            }\n            else if (mergedJobs.length === 1) {\n                const newJob = mergedJobs[0].merge(job);\n                jobsMap.set(job.getSolcConfig(), [newJob]);\n            }\n            else {\n                (0, errors_1.assertHardhatInvariant)(false, \"More than one mergeable job was added for the same configuration\");\n            }\n        }\n        else {\n            if (mergedJobs === undefined) {\n                jobsMap.set(job.getSolcConfig(), [job]);\n            }\n            else {\n                jobsMap.set(job.getSolcConfig(), [...mergedJobs, job]);\n            }\n        }\n    }\n    // Array#flat This method defaults to depth limit 1\n    return [...jobsMap.values()].flat(1000000);\n}\n/**\n * Creates a list of compilation jobs from a dependency graph. *This function\n * assumes that the given graph is a connected component*.\n * Returns the list of compilation jobs on success, and a list of\n * non-compilable files on failure.\n */\nasync function createCompilationJobsFromConnectedComponent(connectedComponent, getFromFile) {\n    const compilationJobs = [];\n    const errors = [];\n    for (const file of connectedComponent.getResolvedFiles()) {\n        const compilationJobOrError = await getFromFile(file);\n        if (isCompilationJobCreationError(compilationJobOrError)) {\n            log(`'${file.absolutePath}' couldn't be compiled. Reason: '${compilationJobOrError}'`);\n            errors.push(compilationJobOrError);\n            continue;\n        }\n        compilationJobs.push(compilationJobOrError);\n    }\n    const jobs = mergeCompilationJobsWithBug(compilationJobs);\n    return { jobs, errors };\n}\nexports.createCompilationJobsFromConnectedComponent = createCompilationJobsFromConnectedComponent;\nasync function createCompilationJobFromFile(dependencyGraph, file, solidityConfig) {\n    const directDependencies = dependencyGraph.getDependencies(file);\n    const transitiveDependencies = dependencyGraph.getTransitiveDependencies(file);\n    const compilerConfig = getCompilerConfigForFile(file, directDependencies, transitiveDependencies, solidityConfig);\n    // if the config cannot be obtained, we just return the failure\n    if (isCompilationJobCreationError(compilerConfig)) {\n        return compilerConfig;\n    }\n    log(`File '${file.absolutePath}' will be compiled with version '${compilerConfig.version}'`);\n    const compilationJob = new CompilationJob(compilerConfig);\n    compilationJob.addFileToCompile(file, true);\n    for (const { dependency } of transitiveDependencies) {\n        log(`File '${dependency.absolutePath}' added as dependency of '${file.absolutePath}'`);\n        compilationJob.addFileToCompile(dependency, false);\n    }\n    return compilationJob;\n}\nexports.createCompilationJobFromFile = createCompilationJobFromFile;\n/**\n * Merge compilation jobs affected by the solc #9573 bug\n */\nfunction mergeCompilationJobsWithBug(compilationJobs) {\n    return mergeCompilationJobs(compilationJobs, (job) => job.hasSolc9573Bug());\n}\nexports.mergeCompilationJobsWithBug = mergeCompilationJobsWithBug;\n/**\n * Merge compilation jobs not affected by the solc #9573 bug\n */\nfunction mergeCompilationJobsWithoutBug(compilationJobs) {\n    return mergeCompilationJobs(compilationJobs, (job) => !job.hasSolc9573Bug());\n}\nexports.mergeCompilationJobsWithoutBug = mergeCompilationJobsWithoutBug;\n/**\n * Return the compiler config with the newest version that satisfies the given\n * version ranges, or a value indicating why the compiler couldn't be obtained.\n */\nfunction getCompilerConfigForFile(file, directDependencies, transitiveDependencies, solidityConfig) {\n    const transitiveDependenciesVersionPragmas = transitiveDependencies\n        .map(({ dependency }) => dependency.content.versionPragmas)\n        .flat();\n    const versionRange = Array.from(new Set([\n        ...file.content.versionPragmas,\n        ...transitiveDependenciesVersionPragmas,\n    ])).join(\" \");\n    const overrides = solidityConfig.overrides ?? {};\n    const overriddenCompiler = overrides[file.sourceName];\n    // if there's an override, we only check that\n    if (overriddenCompiler !== undefined) {\n        if (!semver_1.default.satisfies(overriddenCompiler.version, versionRange)) {\n            return getCompilationJobCreationError(file, directDependencies, transitiveDependencies, [overriddenCompiler.version], true);\n        }\n        return overriddenCompiler;\n    }\n    // if there's no override, we find a compiler that matches the version range\n    const compilerVersions = solidityConfig.compilers.map((x) => x.version);\n    const matchingVersion = semver_1.default.maxSatisfying(compilerVersions, versionRange);\n    if (matchingVersion === null) {\n        return getCompilationJobCreationError(file, directDependencies, transitiveDependencies, compilerVersions, false);\n    }\n    const matchingConfig = solidityConfig.compilers.find((x) => x.version === matchingVersion);\n    return matchingConfig;\n}\nfunction getCompilationJobCreationError(file, directDependencies, transitiveDependencies, compilerVersions, overriden) {\n    const fileVersionRange = file.content.versionPragmas.join(\" \");\n    if (semver_1.default.maxSatisfying(compilerVersions, fileVersionRange) === null) {\n        const reason = overriden\n            ? builtin_tasks_1.CompilationJobCreationErrorReason.INCOMPATIBLE_OVERRIDEN_SOLC_VERSION\n            : builtin_tasks_1.CompilationJobCreationErrorReason.NO_COMPATIBLE_SOLC_VERSION_FOUND;\n        return { reason, file };\n    }\n    const incompatibleDirectImports = [];\n    for (const dependency of directDependencies) {\n        const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n        if (!semver_1.default.intersects(fileVersionRange, dependencyVersionRange)) {\n            incompatibleDirectImports.push(dependency);\n        }\n    }\n    if (incompatibleDirectImports.length > 0) {\n        return {\n            reason: builtin_tasks_1.CompilationJobCreationErrorReason.DIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n            file,\n            extra: {\n                incompatibleDirectImports,\n            },\n        };\n    }\n    const incompatibleIndirectImports = [];\n    for (const transitiveDependency of transitiveDependencies) {\n        const { dependency } = transitiveDependency;\n        const dependencyVersionRange = dependency.content.versionPragmas.join(\" \");\n        if (!semver_1.default.intersects(fileVersionRange, dependencyVersionRange)) {\n            incompatibleIndirectImports.push(transitiveDependency);\n        }\n    }\n    if (incompatibleIndirectImports.length > 0) {\n        return {\n            reason: builtin_tasks_1.CompilationJobCreationErrorReason.INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE,\n            file,\n            extra: {\n                incompatibleIndirectImports,\n            },\n        };\n    }\n    return { reason: builtin_tasks_1.CompilationJobCreationErrorReason.OTHER_ERROR, file };\n}\n//# sourceMappingURL=compilation-job.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/compilation-job.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/compiler/compiler-input.js":
/*!***************************************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/compiler/compiler-input.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getInputFromCompilationJob = void 0;\nfunction getInputFromCompilationJob(compilationJob) {\n    const sources = {};\n    // we sort the files so that we always get the same compilation input\n    const resolvedFiles = compilationJob\n        .getResolvedFiles()\n        .sort((a, b) => a.sourceName.localeCompare(b.sourceName));\n    for (const file of resolvedFiles) {\n        sources[file.sourceName] = {\n            content: file.content.rawContent,\n        };\n    }\n    const { settings } = compilationJob.getSolcConfig();\n    return {\n        language: \"Solidity\",\n        sources,\n        settings,\n    };\n}\nexports.getInputFromCompilationJob = getInputFromCompilationJob;\n//# sourceMappingURL=compiler-input.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9zb2xpZGl0eS9jb21waWxlci9jb21waWxlci1pbnB1dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvc29saWRpdHkvY29tcGlsZXIvY29tcGlsZXItaW5wdXQuanM/NmY3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SW5wdXRGcm9tQ29tcGlsYXRpb25Kb2IgPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRJbnB1dEZyb21Db21waWxhdGlvbkpvYihjb21waWxhdGlvbkpvYikge1xuICAgIGNvbnN0IHNvdXJjZXMgPSB7fTtcbiAgICAvLyB3ZSBzb3J0IHRoZSBmaWxlcyBzbyB0aGF0IHdlIGFsd2F5cyBnZXQgdGhlIHNhbWUgY29tcGlsYXRpb24gaW5wdXRcbiAgICBjb25zdCByZXNvbHZlZEZpbGVzID0gY29tcGlsYXRpb25Kb2JcbiAgICAgICAgLmdldFJlc29sdmVkRmlsZXMoKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5zb3VyY2VOYW1lLmxvY2FsZUNvbXBhcmUoYi5zb3VyY2VOYW1lKSk7XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIHJlc29sdmVkRmlsZXMpIHtcbiAgICAgICAgc291cmNlc1tmaWxlLnNvdXJjZU5hbWVdID0ge1xuICAgICAgICAgICAgY29udGVudDogZmlsZS5jb250ZW50LnJhd0NvbnRlbnQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHsgc2V0dGluZ3MgfSA9IGNvbXBpbGF0aW9uSm9iLmdldFNvbGNDb25maWcoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBsYW5ndWFnZTogXCJTb2xpZGl0eVwiLFxuICAgICAgICBzb3VyY2VzLFxuICAgICAgICBzZXR0aW5ncyxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRJbnB1dEZyb21Db21waWxhdGlvbkpvYiA9IGdldElucHV0RnJvbUNvbXBpbGF0aW9uSm9iO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGlsZXItaW5wdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/compiler/compiler-input.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/compiler/downloader.js":
/*!***********************************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/compiler/downloader.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompilerDownloader = exports.CompilerPlatform = void 0;\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst download_1 = __webpack_require__(/*! ../../util/download */ \"(ssr)/./node_modules/hardhat/internal/util/download.js\");\nconst errors_1 = __webpack_require__(/*! ../../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst multi_process_mutex_1 = __webpack_require__(/*! ../../util/multi-process-mutex */ \"(ssr)/./node_modules/hardhat/internal/util/multi-process-mutex.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:solidity:downloader\");\nconst COMPILER_REPOSITORY_URL = \"https://binaries.soliditylang.org\";\nvar CompilerPlatform;\n(function (CompilerPlatform) {\n    CompilerPlatform[\"LINUX\"] = \"linux-amd64\";\n    CompilerPlatform[\"WINDOWS\"] = \"windows-amd64\";\n    CompilerPlatform[\"MACOS\"] = \"macosx-amd64\";\n    CompilerPlatform[\"WASM\"] = \"wasm\";\n})(CompilerPlatform = exports.CompilerPlatform || (exports.CompilerPlatform = {}));\n/**\n * Default implementation of ICompilerDownloader.\n *\n * Important things to note:\n *   1. If a compiler version is not found, this downloader may fail.\n *    1.1. It only re-downloads the list of compilers once every X time.\n *      1.1.1 If a user tries to download a new compiler before X amount of time\n *      has passed since its release, they may need to clean the cache, as\n *      indicated in the error messages.\n */\nclass CompilerDownloader {\n    static getCompilerPlatform() {\n        // TODO: This check is seriously wrong. It doesn't take into account\n        //  the architecture nor the toolchain. This should check the triplet of\n        //  system instead (see: https://wiki.osdev.org/Target_Triplet).\n        //\n        //  The only reason this downloader works is that it validates if the\n        //  binaries actually run.\n        switch (os_1.default.platform()) {\n            case \"win32\":\n                return CompilerPlatform.WINDOWS;\n            case \"linux\":\n                return CompilerPlatform.LINUX;\n            case \"darwin\":\n                return CompilerPlatform.MACOS;\n            default:\n                return CompilerPlatform.WASM;\n        }\n    }\n    static getConcurrencySafeDownloader(platform, compilersDir) {\n        const key = platform + compilersDir;\n        if (!this._downloaderPerPlatform.has(key)) {\n            this._downloaderPerPlatform.set(key, new CompilerDownloader(platform, compilersDir));\n        }\n        return this._downloaderPerPlatform.get(key);\n    }\n    /**\n     * Use CompilerDownloader.getConcurrencySafeDownloader instead\n     */\n    constructor(_platform, _compilersDir, _compilerListCachePeriodMs = CompilerDownloader.defaultCompilerListCachePeriod, _downloadFunction = download_1.download) {\n        this._platform = _platform;\n        this._compilersDir = _compilersDir;\n        this._compilerListCachePeriodMs = _compilerListCachePeriodMs;\n        this._downloadFunction = _downloadFunction;\n        this._mutex = new multi_process_mutex_1.MultiProcessMutex(\"compiler-download\");\n    }\n    async isCompilerDownloaded(version) {\n        const build = await this._getCompilerBuild(version);\n        if (build === undefined) {\n            return false;\n        }\n        const downloadPath = this._getCompilerBinaryPathFromBuild(build);\n        return fs_extra_1.default.pathExists(downloadPath);\n    }\n    async downloadCompiler(version, downloadStartedCb, downloadEndedCb) {\n        // Since only one process at a time can acquire the mutex, we avoid the risk of downloading the same compiler multiple times.\n        // This is because the mutex blocks access until a compiler has been fully downloaded, preventing any new process\n        // from checking whether that version of the compiler exists. Without mutex it might incorrectly\n        // return false, indicating that the compiler isn't present, even though it is currently being downloaded.\n        await this._mutex.use(async () => {\n            const isCompilerDownloaded = await this.isCompilerDownloaded(version);\n            if (isCompilerDownloaded === true) {\n                return;\n            }\n            await downloadStartedCb(isCompilerDownloaded);\n            let build = await this._getCompilerBuild(version);\n            if (build === undefined && (await this._shouldDownloadCompilerList())) {\n                try {\n                    await this._downloadCompilerList();\n                }\n                catch (e) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.VERSION_LIST_DOWNLOAD_FAILED, {}, e);\n                }\n                build = await this._getCompilerBuild(version);\n            }\n            if (build === undefined) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_VERSION, { version });\n            }\n            let downloadPath;\n            try {\n                downloadPath = await this._downloadCompiler(build);\n            }\n            catch (e) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.DOWNLOAD_FAILED, {\n                    remoteVersion: build.longVersion,\n                }, e);\n            }\n            const verified = await this._verifyCompilerDownload(build, downloadPath);\n            if (!verified) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.INVALID_DOWNLOAD, {\n                    remoteVersion: build.longVersion,\n                });\n            }\n            await this._postProcessCompilerDownload(build, downloadPath);\n            await downloadEndedCb(isCompilerDownloaded);\n        });\n    }\n    async getCompiler(version) {\n        const build = await this._getCompilerBuild(version);\n        (0, errors_1.assertHardhatInvariant)(build !== undefined, \"Trying to get a compiler before it was downloaded\");\n        const compilerPath = this._getCompilerBinaryPathFromBuild(build);\n        (0, errors_1.assertHardhatInvariant)(await fs_extra_1.default.pathExists(compilerPath), \"Trying to get a compiler before it was downloaded\");\n        if (await fs_extra_1.default.pathExists(this._getCompilerDoesntWorkFile(build))) {\n            return undefined;\n        }\n        return {\n            version,\n            longVersion: build.longVersion,\n            compilerPath,\n            isSolcJs: this._platform === CompilerPlatform.WASM,\n        };\n    }\n    async _getCompilerBuild(version) {\n        const listPath = this._getCompilerListPath();\n        if (!(await fs_extra_1.default.pathExists(listPath))) {\n            return undefined;\n        }\n        const list = await this._readCompilerList(listPath);\n        return list.builds.find((b) => b.version === version);\n    }\n    _getCompilerListPath() {\n        return path_1.default.join(this._compilersDir, this._platform, \"list.json\");\n    }\n    async _readCompilerList(listPath) {\n        return fs_extra_1.default.readJSON(listPath);\n    }\n    _getCompilerDownloadPathFromBuild(build) {\n        return path_1.default.join(this._compilersDir, this._platform, build.path);\n    }\n    _getCompilerBinaryPathFromBuild(build) {\n        const downloadPath = this._getCompilerDownloadPathFromBuild(build);\n        if (this._platform !== CompilerPlatform.WINDOWS ||\n            !downloadPath.endsWith(\".zip\")) {\n            return downloadPath;\n        }\n        return path_1.default.join(this._compilersDir, build.version, \"solc.exe\");\n    }\n    _getCompilerDoesntWorkFile(build) {\n        return `${this._getCompilerBinaryPathFromBuild(build)}.does.not.work`;\n    }\n    async _shouldDownloadCompilerList() {\n        const listPath = this._getCompilerListPath();\n        if (!(await fs_extra_1.default.pathExists(listPath))) {\n            return true;\n        }\n        const stats = await fs_extra_1.default.stat(listPath);\n        const age = new Date().valueOf() - stats.ctimeMs;\n        return age > this._compilerListCachePeriodMs;\n    }\n    async _downloadCompilerList() {\n        log(`Downloading compiler list for platform ${this._platform}`);\n        const url = `${COMPILER_REPOSITORY_URL}/${this._platform}/list.json`;\n        const downloadPath = this._getCompilerListPath();\n        await this._downloadFunction(url, downloadPath);\n    }\n    async _downloadCompiler(build) {\n        log(`Downloading compiler ${build.longVersion}`);\n        const url = `${COMPILER_REPOSITORY_URL}/${this._platform}/${build.path}`;\n        const downloadPath = this._getCompilerDownloadPathFromBuild(build);\n        await this._downloadFunction(url, downloadPath);\n        return downloadPath;\n    }\n    async _verifyCompilerDownload(build, downloadPath) {\n        const { bytesToHex } = __webpack_require__(/*! @nomicfoundation/ethereumjs-util */ \"(ssr)/./node_modules/@nomicfoundation/ethereumjs-util/dist/esm/index.js\");\n        const { keccak256 } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ../../util/keccak */ \"(ssr)/./node_modules/hardhat/internal/util/keccak.js\")));\n        const expectedKeccak256 = build.keccak256;\n        const compiler = await fs_extra_1.default.readFile(downloadPath);\n        const compilerKeccak256 = bytesToHex(keccak256(compiler));\n        if (expectedKeccak256 !== compilerKeccak256) {\n            await fs_extra_1.default.unlink(downloadPath);\n            return false;\n        }\n        return true;\n    }\n    async _postProcessCompilerDownload(build, downloadPath) {\n        if (this._platform === CompilerPlatform.WASM) {\n            return;\n        }\n        if (this._platform === CompilerPlatform.LINUX ||\n            this._platform === CompilerPlatform.MACOS) {\n            fs_extra_1.default.chmodSync(downloadPath, 0o755);\n        }\n        else if (this._platform === CompilerPlatform.WINDOWS &&\n            downloadPath.endsWith(\".zip\")) {\n            // some window builds are zipped, some are not\n            const AdmZip = __webpack_require__(/*! adm-zip */ \"(ssr)/./node_modules/adm-zip/adm-zip.js\");\n            const solcFolder = path_1.default.join(this._compilersDir, build.version);\n            await fs_extra_1.default.ensureDir(solcFolder);\n            const zip = new AdmZip(downloadPath);\n            zip.extractAllTo(solcFolder);\n        }\n        log(\"Checking native solc binary\");\n        const nativeSolcWorks = await this._checkNativeSolc(build);\n        if (nativeSolcWorks) {\n            return;\n        }\n        await fs_extra_1.default.createFile(this._getCompilerDoesntWorkFile(build));\n    }\n    async _checkNativeSolc(build) {\n        const solcPath = this._getCompilerBinaryPathFromBuild(build);\n        const execFileP = (0, util_1.promisify)(child_process_1.execFile);\n        try {\n            await execFileP(solcPath, [\"--version\"]);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n}\nCompilerDownloader._downloaderPerPlatform = new Map();\nCompilerDownloader.defaultCompilerListCachePeriod = 360000;\nexports.CompilerDownloader = CompilerDownloader;\n//# sourceMappingURL=downloader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/compiler/downloader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/compiler/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/compiler/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NativeCompiler = exports.Compiler = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst node_os_1 = __importDefault(__webpack_require__(/*! node:os */ \"node:os\"));\nconst node_path_1 = __importDefault(__webpack_require__(/*! node:path */ \"node:path\"));\nconst semver = __importStar(__webpack_require__(/*! semver */ \"(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\"));\nconst errors_1 = __webpack_require__(/*! ../../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nclass Compiler {\n    constructor(_pathToSolcJs) {\n        this._pathToSolcJs = _pathToSolcJs;\n    }\n    async compile(input) {\n        const scriptPath = node_path_1.default.join(__dirname, \"./solcjs-runner.js\");\n        const output = await new Promise((resolve, reject) => {\n            try {\n                const subprocess = (0, child_process_1.execFile)(process.execPath, [scriptPath, this._pathToSolcJs], {\n                    maxBuffer: 1024 * 1024 * 500,\n                }, (err, stdout) => {\n                    if (err !== null) {\n                        return reject(err);\n                    }\n                    resolve(stdout);\n                });\n                subprocess.stdin.write(JSON.stringify(input));\n                subprocess.stdin.end();\n            }\n            catch (e) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.SOLCJS_ERROR, { error: e.message }, e);\n            }\n        });\n        return JSON.parse(output);\n    }\n}\nexports.Compiler = Compiler;\nclass NativeCompiler {\n    constructor(_pathToSolc, _solcVersion) {\n        this._pathToSolc = _pathToSolc;\n        this._solcVersion = _solcVersion;\n    }\n    async compile(input) {\n        const args = [\"--standard-json\"];\n        // Logic to make sure that solc default import callback is not being used.\n        // If solcVersion is not defined or <= 0.6.8, do not add extra args.\n        if (this._solcVersion !== undefined) {\n            if (semver.gte(this._solcVersion, \"0.8.22\")) {\n                // version >= 0.8.22\n                args.push(\"--no-import-callback\");\n            }\n            else if (semver.gte(this._solcVersion, \"0.6.9\")) {\n                // version >= 0.6.9\n                const tmpFolder = node_path_1.default.join(node_os_1.default.tmpdir(), \"hardhat-solc\");\n                fs.mkdirSync(tmpFolder, { recursive: true });\n                args.push(`--base-path`);\n                args.push(tmpFolder);\n            }\n        }\n        const output = await new Promise((resolve, reject) => {\n            try {\n                const process = (0, child_process_1.execFile)(this._pathToSolc, args, {\n                    maxBuffer: 1024 * 1024 * 500,\n                }, (err, stdout) => {\n                    if (err !== null) {\n                        return reject(err);\n                    }\n                    resolve(stdout);\n                });\n                process.stdin.write(JSON.stringify(input));\n                process.stdin.end();\n            }\n            catch (e) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.CANT_RUN_NATIVE_COMPILER, {}, e);\n            }\n        });\n        return JSON.parse(output);\n    }\n}\nexports.NativeCompiler = NativeCompiler;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9zb2xpZGl0eS9jb21waWxlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxnQkFBZ0I7QUFDekMsd0JBQXdCLG1CQUFPLENBQUMsb0NBQWU7QUFDL0Msd0JBQXdCLG1CQUFPLENBQUMsY0FBSTtBQUNwQyxrQ0FBa0MsbUJBQU8sQ0FBQyx3QkFBUztBQUNuRCxvQ0FBb0MsbUJBQU8sQ0FBQyw0QkFBVztBQUN2RCw0QkFBNEIsbUJBQU8sQ0FBQywwRUFBUTtBQUM1QyxpQkFBaUIsbUJBQU8sQ0FBQywrRUFBbUI7QUFDNUMsc0JBQXNCLG1CQUFPLENBQUMseUZBQXdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEZBQTBGLGtCQUFrQjtBQUM1RztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxpQkFBaUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNHQUFzRztBQUN0RztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvc29saWRpdHkvY29tcGlsZXIvaW5kZXguanM/MGFlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OYXRpdmVDb21waWxlciA9IGV4cG9ydHMuQ29tcGlsZXIgPSB2b2lkIDA7XG5jb25zdCBjaGlsZF9wcm9jZXNzXzEgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcbmNvbnN0IGZzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJmc1wiKSk7XG5jb25zdCBub2RlX29zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGU6b3NcIikpO1xuY29uc3Qgbm9kZV9wYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm5vZGU6cGF0aFwiKSk7XG5jb25zdCBzZW12ZXIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInNlbXZlclwiKSk7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb3JlL2Vycm9yc1wiKTtcbmNvbnN0IGVycm9yc19saXN0XzEgPSByZXF1aXJlKFwiLi4vLi4vY29yZS9lcnJvcnMtbGlzdFwiKTtcbmNsYXNzIENvbXBpbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihfcGF0aFRvU29sY0pzKSB7XG4gICAgICAgIHRoaXMuX3BhdGhUb1NvbGNKcyA9IF9wYXRoVG9Tb2xjSnM7XG4gICAgfVxuICAgIGFzeW5jIGNvbXBpbGUoaW5wdXQpIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0UGF0aCA9IG5vZGVfcGF0aF8xLmRlZmF1bHQuam9pbihfX2Rpcm5hbWUsIFwiLi9zb2xjanMtcnVubmVyLmpzXCIpO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnByb2Nlc3MgPSAoMCwgY2hpbGRfcHJvY2Vzc18xLmV4ZWNGaWxlKShwcm9jZXNzLmV4ZWNQYXRoLCBbc2NyaXB0UGF0aCwgdGhpcy5fcGF0aFRvU29sY0pzXSwge1xuICAgICAgICAgICAgICAgICAgICBtYXhCdWZmZXI6IDEwMjQgKiAxMDI0ICogNTAwLFxuICAgICAgICAgICAgICAgIH0sIChlcnIsIHN0ZG91dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdGRvdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN1YnByb2Nlc3Muc3RkaW4ud3JpdGUoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKTtcbiAgICAgICAgICAgICAgICBzdWJwcm9jZXNzLnN0ZGluLmVuZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSGFyZGhhdEVycm9yKGVycm9yc19saXN0XzEuRVJST1JTLlNPTEMuU09MQ0pTX0VSUk9SLCB7IGVycm9yOiBlLm1lc3NhZ2UgfSwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShvdXRwdXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tcGlsZXIgPSBDb21waWxlcjtcbmNsYXNzIE5hdGl2ZUNvbXBpbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihfcGF0aFRvU29sYywgX3NvbGNWZXJzaW9uKSB7XG4gICAgICAgIHRoaXMuX3BhdGhUb1NvbGMgPSBfcGF0aFRvU29sYztcbiAgICAgICAgdGhpcy5fc29sY1ZlcnNpb24gPSBfc29sY1ZlcnNpb247XG4gICAgfVxuICAgIGFzeW5jIGNvbXBpbGUoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IFtcIi0tc3RhbmRhcmQtanNvblwiXTtcbiAgICAgICAgLy8gTG9naWMgdG8gbWFrZSBzdXJlIHRoYXQgc29sYyBkZWZhdWx0IGltcG9ydCBjYWxsYmFjayBpcyBub3QgYmVpbmcgdXNlZC5cbiAgICAgICAgLy8gSWYgc29sY1ZlcnNpb24gaXMgbm90IGRlZmluZWQgb3IgPD0gMC42LjgsIGRvIG5vdCBhZGQgZXh0cmEgYXJncy5cbiAgICAgICAgaWYgKHRoaXMuX3NvbGNWZXJzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChzZW12ZXIuZ3RlKHRoaXMuX3NvbGNWZXJzaW9uLCBcIjAuOC4yMlwiKSkge1xuICAgICAgICAgICAgICAgIC8vIHZlcnNpb24gPj0gMC44LjIyXG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKFwiLS1uby1pbXBvcnQtY2FsbGJhY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZW12ZXIuZ3RlKHRoaXMuX3NvbGNWZXJzaW9uLCBcIjAuNi45XCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gdmVyc2lvbiA+PSAwLjYuOVxuICAgICAgICAgICAgICAgIGNvbnN0IHRtcEZvbGRlciA9IG5vZGVfcGF0aF8xLmRlZmF1bHQuam9pbihub2RlX29zXzEuZGVmYXVsdC50bXBkaXIoKSwgXCJoYXJkaGF0LXNvbGNcIik7XG4gICAgICAgICAgICAgICAgZnMubWtkaXJTeW5jKHRtcEZvbGRlciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGAtLWJhc2UtcGF0aGApO1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh0bXBGb2xkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvY2VzcyA9ICgwLCBjaGlsZF9wcm9jZXNzXzEuZXhlY0ZpbGUpKHRoaXMuX3BhdGhUb1NvbGMsIGFyZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4QnVmZmVyOiAxMDI0ICogMTAyNCAqIDUwMCxcbiAgICAgICAgICAgICAgICB9LCAoZXJyLCBzdGRvdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3Rkb3V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLnN0ZGluLndyaXRlKEpTT04uc3RyaW5naWZ5KGlucHV0KSk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRpbi5lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5TT0xDLkNBTlRfUlVOX05BVElWRV9DT01QSUxFUiwge30sIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uob3V0cHV0KTtcbiAgICB9XG59XG5leHBvcnRzLk5hdGl2ZUNvbXBpbGVyID0gTmF0aXZlQ29tcGlsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/compiler/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/compiler/solc-info.js":
/*!**********************************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/compiler/solc-info.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getEvmVersionFromSolcVersion = void 0;\nconst defaultEvmTargets = {\n    \"0.5.1\": \"byzantium\",\n    \"0.5.2\": \"byzantium\",\n    \"0.5.3\": \"byzantium\",\n    \"0.5.4\": \"byzantium\",\n    \"0.5.5\": \"petersburg\",\n    \"0.5.6\": \"petersburg\",\n    \"0.5.7\": \"petersburg\",\n    \"0.5.8\": \"petersburg\",\n    \"0.5.9\": \"petersburg\",\n    \"0.5.10\": \"petersburg\",\n    \"0.5.11\": \"petersburg\",\n    \"0.5.12\": \"petersburg\",\n    \"0.5.13\": \"petersburg\",\n    \"0.5.14\": \"istanbul\",\n    \"0.5.15\": \"istanbul\",\n    \"0.5.16\": \"istanbul\",\n    \"0.5.17\": \"istanbul\",\n    \"0.6.0\": \"istanbul\",\n    \"0.6.1\": \"istanbul\",\n    \"0.6.2\": \"istanbul\",\n    \"0.6.3\": \"istanbul\",\n    \"0.6.4\": \"istanbul\",\n    \"0.6.5\": \"istanbul\",\n    \"0.6.6\": \"istanbul\",\n    \"0.6.7\": \"istanbul\",\n    \"0.6.8\": \"istanbul\",\n    \"0.6.9\": \"istanbul\",\n    \"0.6.10\": \"istanbul\",\n    \"0.6.11\": \"istanbul\",\n    \"0.6.12\": \"istanbul\",\n    \"0.7.0\": \"istanbul\",\n    \"0.7.1\": \"istanbul\",\n    \"0.7.2\": \"istanbul\",\n    \"0.7.3\": \"istanbul\",\n    \"0.7.4\": \"istanbul\",\n    \"0.7.5\": \"istanbul\",\n    \"0.7.6\": \"istanbul\",\n    \"0.8.0\": \"istanbul\",\n    \"0.8.1\": \"istanbul\",\n    \"0.8.2\": \"istanbul\",\n    \"0.8.3\": \"istanbul\",\n    \"0.8.4\": \"istanbul\",\n    \"0.8.5\": \"berlin\",\n    \"0.8.6\": \"berlin\",\n    \"0.8.7\": \"london\",\n    \"0.8.8\": \"london\",\n    \"0.8.9\": \"london\",\n    \"0.8.10\": \"london\",\n    \"0.8.11\": \"london\",\n    \"0.8.12\": \"london\",\n    \"0.8.13\": \"london\",\n    \"0.8.14\": \"london\",\n    \"0.8.15\": \"london\",\n    \"0.8.16\": \"london\",\n    \"0.8.17\": \"london\",\n    \"0.8.18\": \"paris\",\n    \"0.8.19\": \"paris\",\n    \"0.8.20\": \"shanghai\",\n    \"0.8.21\": \"shanghai\",\n    \"0.8.22\": \"shanghai\",\n    \"0.8.23\": \"shanghai\",\n    \"0.8.24\": \"shanghai\",\n    \"0.8.25\": \"cancun\",\n    \"0.8.26\": \"cancun\",\n    \"0.8.27\": \"cancun\",\n    \"0.8.28\": \"cancun\",\n};\nfunction getEvmVersionFromSolcVersion(solcVersion) {\n    return defaultEvmTargets[solcVersion];\n}\nexports.getEvmVersionFromSolcVersion = getEvmVersionFromSolcVersion;\n//# sourceMappingURL=solc-info.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9zb2xpZGl0eS9jb21waWxlci9zb2xjLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvc29saWRpdHkvY29tcGlsZXIvc29sYy1pbmZvLmpzP2YyZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEV2bVZlcnNpb25Gcm9tU29sY1ZlcnNpb24gPSB2b2lkIDA7XG5jb25zdCBkZWZhdWx0RXZtVGFyZ2V0cyA9IHtcbiAgICBcIjAuNS4xXCI6IFwiYnl6YW50aXVtXCIsXG4gICAgXCIwLjUuMlwiOiBcImJ5emFudGl1bVwiLFxuICAgIFwiMC41LjNcIjogXCJieXphbnRpdW1cIixcbiAgICBcIjAuNS40XCI6IFwiYnl6YW50aXVtXCIsXG4gICAgXCIwLjUuNVwiOiBcInBldGVyc2J1cmdcIixcbiAgICBcIjAuNS42XCI6IFwicGV0ZXJzYnVyZ1wiLFxuICAgIFwiMC41LjdcIjogXCJwZXRlcnNidXJnXCIsXG4gICAgXCIwLjUuOFwiOiBcInBldGVyc2J1cmdcIixcbiAgICBcIjAuNS45XCI6IFwicGV0ZXJzYnVyZ1wiLFxuICAgIFwiMC41LjEwXCI6IFwicGV0ZXJzYnVyZ1wiLFxuICAgIFwiMC41LjExXCI6IFwicGV0ZXJzYnVyZ1wiLFxuICAgIFwiMC41LjEyXCI6IFwicGV0ZXJzYnVyZ1wiLFxuICAgIFwiMC41LjEzXCI6IFwicGV0ZXJzYnVyZ1wiLFxuICAgIFwiMC41LjE0XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNS4xNVwiOiBcImlzdGFuYnVsXCIsXG4gICAgXCIwLjUuMTZcIjogXCJpc3RhbmJ1bFwiLFxuICAgIFwiMC41LjE3XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi4wXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi4xXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi4yXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi4zXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi40XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi41XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi42XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi43XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi44XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi45XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNi4xMFwiOiBcImlzdGFuYnVsXCIsXG4gICAgXCIwLjYuMTFcIjogXCJpc3RhbmJ1bFwiLFxuICAgIFwiMC42LjEyXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNy4wXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNy4xXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNy4yXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNy4zXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNy40XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNy41XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuNy42XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuOC4wXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuOC4xXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuOC4yXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuOC4zXCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuOC40XCI6IFwiaXN0YW5idWxcIixcbiAgICBcIjAuOC41XCI6IFwiYmVybGluXCIsXG4gICAgXCIwLjguNlwiOiBcImJlcmxpblwiLFxuICAgIFwiMC44LjdcIjogXCJsb25kb25cIixcbiAgICBcIjAuOC44XCI6IFwibG9uZG9uXCIsXG4gICAgXCIwLjguOVwiOiBcImxvbmRvblwiLFxuICAgIFwiMC44LjEwXCI6IFwibG9uZG9uXCIsXG4gICAgXCIwLjguMTFcIjogXCJsb25kb25cIixcbiAgICBcIjAuOC4xMlwiOiBcImxvbmRvblwiLFxuICAgIFwiMC44LjEzXCI6IFwibG9uZG9uXCIsXG4gICAgXCIwLjguMTRcIjogXCJsb25kb25cIixcbiAgICBcIjAuOC4xNVwiOiBcImxvbmRvblwiLFxuICAgIFwiMC44LjE2XCI6IFwibG9uZG9uXCIsXG4gICAgXCIwLjguMTdcIjogXCJsb25kb25cIixcbiAgICBcIjAuOC4xOFwiOiBcInBhcmlzXCIsXG4gICAgXCIwLjguMTlcIjogXCJwYXJpc1wiLFxuICAgIFwiMC44LjIwXCI6IFwic2hhbmdoYWlcIixcbiAgICBcIjAuOC4yMVwiOiBcInNoYW5naGFpXCIsXG4gICAgXCIwLjguMjJcIjogXCJzaGFuZ2hhaVwiLFxuICAgIFwiMC44LjIzXCI6IFwic2hhbmdoYWlcIixcbiAgICBcIjAuOC4yNFwiOiBcInNoYW5naGFpXCIsXG4gICAgXCIwLjguMjVcIjogXCJjYW5jdW5cIixcbiAgICBcIjAuOC4yNlwiOiBcImNhbmN1blwiLFxuICAgIFwiMC44LjI3XCI6IFwiY2FuY3VuXCIsXG4gICAgXCIwLjguMjhcIjogXCJjYW5jdW5cIixcbn07XG5mdW5jdGlvbiBnZXRFdm1WZXJzaW9uRnJvbVNvbGNWZXJzaW9uKHNvbGNWZXJzaW9uKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRFdm1UYXJnZXRzW3NvbGNWZXJzaW9uXTtcbn1cbmV4cG9ydHMuZ2V0RXZtVmVyc2lvbkZyb21Tb2xjVmVyc2lvbiA9IGdldEV2bVZlcnNpb25Gcm9tU29sY1ZlcnNpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb2xjLWluZm8uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/compiler/solc-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/dependencyGraph.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/dependencyGraph.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DependencyGraph = void 0;\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nclass DependencyGraph {\n    static async createFromResolvedFiles(resolver, resolvedFiles) {\n        const graph = new DependencyGraph();\n        // TODO refactor this to make the results deterministic\n        await Promise.all(resolvedFiles.map((resolvedFile) => graph._addDependenciesFrom(resolver, resolvedFile)));\n        return graph;\n    }\n    constructor() {\n        this._resolvedFiles = new Map();\n        this._dependenciesPerFile = new Map();\n        // map absolute paths to source names\n        this._visitedFiles = new Map();\n    }\n    getResolvedFiles() {\n        return Array.from(this._resolvedFiles.values());\n    }\n    has(file) {\n        return this._resolvedFiles.has(file.sourceName);\n    }\n    isEmpty() {\n        return this._resolvedFiles.size === 0;\n    }\n    entries() {\n        return Array.from(this._dependenciesPerFile.entries()).map(([key, value]) => [this._resolvedFiles.get(key), value]);\n    }\n    getDependencies(file) {\n        const dependencies = this._dependenciesPerFile.get(file.sourceName) ?? new Set();\n        return [...dependencies];\n    }\n    getTransitiveDependencies(file) {\n        const visited = new Set();\n        const transitiveDependencies = this._getTransitiveDependencies(file, visited, []);\n        return [...transitiveDependencies];\n    }\n    getConnectedComponents() {\n        const undirectedGraph = {};\n        for (const [sourceName, dependencies,] of this._dependenciesPerFile.entries()) {\n            undirectedGraph[sourceName] = undirectedGraph[sourceName] ?? new Set();\n            for (const dependency of dependencies) {\n                undirectedGraph[dependency.sourceName] =\n                    undirectedGraph[dependency.sourceName] ?? new Set();\n                undirectedGraph[sourceName].add(dependency.sourceName);\n                undirectedGraph[dependency.sourceName].add(sourceName);\n            }\n        }\n        const components = [];\n        const visited = new Set();\n        for (const node of Object.keys(undirectedGraph)) {\n            if (visited.has(node)) {\n                continue;\n            }\n            visited.add(node);\n            const component = new Set([node]);\n            const stack = [...undirectedGraph[node]];\n            while (stack.length > 0) {\n                const newNode = stack.pop();\n                if (visited.has(newNode)) {\n                    continue;\n                }\n                visited.add(newNode);\n                component.add(newNode);\n                [...undirectedGraph[newNode]].forEach((adjacent) => {\n                    if (!visited.has(adjacent)) {\n                        stack.push(adjacent);\n                    }\n                });\n            }\n            components.push(component);\n        }\n        const connectedComponents = [];\n        for (const component of components) {\n            const dependencyGraph = new DependencyGraph();\n            for (const sourceName of component) {\n                const file = this._resolvedFiles.get(sourceName);\n                const dependencies = this._dependenciesPerFile.get(sourceName);\n                dependencyGraph._resolvedFiles.set(sourceName, file);\n                dependencyGraph._dependenciesPerFile.set(sourceName, dependencies);\n            }\n            connectedComponents.push(dependencyGraph);\n        }\n        return connectedComponents;\n    }\n    _getTransitiveDependencies(file, visited, path) {\n        if (visited.has(file)) {\n            return new Set();\n        }\n        visited.add(file);\n        const directDependencies = this.getDependencies(file).map((dependency) => ({\n            dependency,\n            path,\n        }));\n        const transitiveDependencies = new Set(directDependencies);\n        for (const { dependency } of transitiveDependencies) {\n            this._getTransitiveDependencies(dependency, visited, path.concat(dependency)).forEach((x) => transitiveDependencies.add(x));\n        }\n        return transitiveDependencies;\n    }\n    async _addDependenciesFrom(resolver, file) {\n        const sourceName = this._visitedFiles.get(file.absolutePath);\n        if (sourceName !== undefined) {\n            if (sourceName !== file.sourceName) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.AMBIGUOUS_SOURCE_NAMES, {\n                    sourcenames: `'${sourceName}' and '${file.sourceName}'`,\n                    file: file.absolutePath,\n                });\n            }\n            return;\n        }\n        this._visitedFiles.set(file.absolutePath, file.sourceName);\n        const dependencies = new Set();\n        this._resolvedFiles.set(file.sourceName, file);\n        this._dependenciesPerFile.set(file.sourceName, dependencies);\n        // TODO refactor this to make the results deterministic\n        await Promise.all(file.content.imports.map(async (imp) => {\n            const dependency = await resolver.resolveImport(file, imp);\n            dependencies.add(dependency);\n            await this._addDependenciesFrom(resolver, dependency);\n        }));\n    }\n}\nexports.DependencyGraph = DependencyGraph;\n//# sourceMappingURL=dependencyGraph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/dependencyGraph.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/parse.js":
/*!*********************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/parse.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Parser = void 0;\nconst solidity_files_cache_1 = __webpack_require__(/*! ../../builtin-tasks/utils/solidity-files-cache */ \"(ssr)/./node_modules/hardhat/builtin-tasks/utils/solidity-files-cache.js\");\nconst napi_rs_1 = __webpack_require__(/*! ../../common/napi-rs */ \"(ssr)/./node_modules/hardhat/common/napi-rs.js\");\nclass Parser {\n    constructor(_solidityFilesCache) {\n        this._cache = new Map();\n        this._solidityFilesCache =\n            _solidityFilesCache ?? solidity_files_cache_1.SolidityFilesCache.createEmpty();\n    }\n    parse(fileContent, absolutePath, contentHash) {\n        const cacheResult = this._getFromCache(absolutePath, contentHash);\n        if (cacheResult !== null) {\n            return cacheResult;\n        }\n        const { analyze } = (0, napi_rs_1.requireNapiRsModule)(\"@nomicfoundation/solidity-analyzer\");\n        const result = analyze(fileContent);\n        this._cache.set(contentHash, result);\n        return result;\n    }\n    /**\n     * Get parsed data from the internal cache, or from the solidity files cache.\n     *\n     * Returns null if cannot find it in either one.\n     */\n    _getFromCache(absolutePath, contentHash) {\n        const internalCacheEntry = this._cache.get(contentHash);\n        if (internalCacheEntry !== undefined) {\n            return internalCacheEntry;\n        }\n        const solidityFilesCacheEntry = this._solidityFilesCache.getEntry(absolutePath);\n        if (solidityFilesCacheEntry === undefined) {\n            return null;\n        }\n        const { imports, versionPragmas } = solidityFilesCacheEntry;\n        if (solidityFilesCacheEntry.contentHash !== contentHash) {\n            return null;\n        }\n        return { imports, versionPragmas };\n    }\n}\nexports.Parser = Parser;\n//# sourceMappingURL=parse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9zb2xpZGl0eS9wYXJzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2QsK0JBQStCLG1CQUFPLENBQUMsZ0lBQWdEO0FBQ3ZGLGtCQUFrQixtQkFBTyxDQUFDLDRFQUFzQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFVBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC9zb2xpZGl0eS9wYXJzZS5qcz81MWU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBzb2xpZGl0eV9maWxlc19jYWNoZV8xID0gcmVxdWlyZShcIi4uLy4uL2J1aWx0aW4tdGFza3MvdXRpbHMvc29saWRpdHktZmlsZXMtY2FjaGVcIik7XG5jb25zdCBuYXBpX3JzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL25hcGktcnNcIik7XG5jbGFzcyBQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKF9zb2xpZGl0eUZpbGVzQ2FjaGUpIHtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3NvbGlkaXR5RmlsZXNDYWNoZSA9XG4gICAgICAgICAgICBfc29saWRpdHlGaWxlc0NhY2hlID8/IHNvbGlkaXR5X2ZpbGVzX2NhY2hlXzEuU29saWRpdHlGaWxlc0NhY2hlLmNyZWF0ZUVtcHR5KCk7XG4gICAgfVxuICAgIHBhcnNlKGZpbGVDb250ZW50LCBhYnNvbHV0ZVBhdGgsIGNvbnRlbnRIYXNoKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlUmVzdWx0ID0gdGhpcy5fZ2V0RnJvbUNhY2hlKGFic29sdXRlUGF0aCwgY29udGVudEhhc2gpO1xuICAgICAgICBpZiAoY2FjaGVSZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZVJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGFuYWx5emUgfSA9ICgwLCBuYXBpX3JzXzEucmVxdWlyZU5hcGlSc01vZHVsZSkoXCJAbm9taWNmb3VuZGF0aW9uL3NvbGlkaXR5LWFuYWx5emVyXCIpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhbmFseXplKGZpbGVDb250ZW50KTtcbiAgICAgICAgdGhpcy5fY2FjaGUuc2V0KGNvbnRlbnRIYXNoLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgcGFyc2VkIGRhdGEgZnJvbSB0aGUgaW50ZXJuYWwgY2FjaGUsIG9yIGZyb20gdGhlIHNvbGlkaXR5IGZpbGVzIGNhY2hlLlxuICAgICAqXG4gICAgICogUmV0dXJucyBudWxsIGlmIGNhbm5vdCBmaW5kIGl0IGluIGVpdGhlciBvbmUuXG4gICAgICovXG4gICAgX2dldEZyb21DYWNoZShhYnNvbHV0ZVBhdGgsIGNvbnRlbnRIYXNoKSB7XG4gICAgICAgIGNvbnN0IGludGVybmFsQ2FjaGVFbnRyeSA9IHRoaXMuX2NhY2hlLmdldChjb250ZW50SGFzaCk7XG4gICAgICAgIGlmIChpbnRlcm5hbENhY2hlRW50cnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsQ2FjaGVFbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzb2xpZGl0eUZpbGVzQ2FjaGVFbnRyeSA9IHRoaXMuX3NvbGlkaXR5RmlsZXNDYWNoZS5nZXRFbnRyeShhYnNvbHV0ZVBhdGgpO1xuICAgICAgICBpZiAoc29saWRpdHlGaWxlc0NhY2hlRW50cnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBpbXBvcnRzLCB2ZXJzaW9uUHJhZ21hcyB9ID0gc29saWRpdHlGaWxlc0NhY2hlRW50cnk7XG4gICAgICAgIGlmIChzb2xpZGl0eUZpbGVzQ2FjaGVFbnRyeS5jb250ZW50SGFzaCAhPT0gY29udGVudEhhc2gpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGltcG9ydHMsIHZlcnNpb25QcmFnbWFzIH07XG4gICAgfVxufVxuZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/solidity/resolver.js":
/*!************************************************************!*\
  !*** ./node_modules/hardhat/internal/solidity/resolver.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Resolver = exports.ResolvedFile = void 0;\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst resolve_1 = __importDefault(__webpack_require__(/*! resolve */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/index.js\"));\nconst source_names_1 = __webpack_require__(/*! ../../utils/source-names */ \"(ssr)/./node_modules/hardhat/utils/source-names.js\");\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst hash_1 = __webpack_require__(/*! ../util/hash */ \"(ssr)/./node_modules/hardhat/internal/util/hash.js\");\nconst fs_utils_1 = __webpack_require__(/*! ../util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\nconst remappings_1 = __webpack_require__(/*! ../../utils/remappings */ \"(ssr)/./node_modules/hardhat/utils/remappings.js\");\nconst NODE_MODULES = \"node_modules\";\nclass ResolvedFile {\n    constructor(sourceName, absolutePath, content, contentHash, lastModificationDate, libraryName, libraryVersion) {\n        this.sourceName = sourceName;\n        this.absolutePath = absolutePath;\n        this.content = content;\n        this.contentHash = contentHash;\n        this.lastModificationDate = lastModificationDate;\n        (0, errors_1.assertHardhatInvariant)((libraryName === undefined && libraryVersion === undefined) ||\n            (libraryName !== undefined && libraryVersion !== undefined), \"Libraries should have both name and version, or neither one\");\n        if (libraryName !== undefined && libraryVersion !== undefined) {\n            this.library = {\n                name: libraryName,\n                version: libraryVersion,\n            };\n        }\n    }\n    getVersionedName() {\n        return (this.sourceName +\n            (this.library !== undefined ? `@v${this.library.version}` : \"\"));\n    }\n}\nexports.ResolvedFile = ResolvedFile;\nclass Resolver {\n    constructor(_projectRoot, _parser, _remappings, _readFile, _transformImportName) {\n        this._projectRoot = _projectRoot;\n        this._parser = _parser;\n        this._remappings = _remappings;\n        this._readFile = _readFile;\n        this._transformImportName = _transformImportName;\n        this._cache = new Map();\n    }\n    /**\n     * Resolves a source name into a ResolvedFile.\n     *\n     * @param sourceName The source name as it would be provided to solc.\n     */\n    async resolveSourceName(sourceName) {\n        const cached = this._cache.get(sourceName);\n        if (cached !== undefined) {\n            return cached;\n        }\n        const remappedSourceName = (0, remappings_1.applyRemappings)(this._remappings, sourceName);\n        (0, source_names_1.validateSourceNameFormat)(remappedSourceName);\n        let resolvedFile;\n        if (await (0, source_names_1.isLocalSourceName)(this._projectRoot, remappedSourceName)) {\n            resolvedFile = await this._resolveLocalSourceName(sourceName, remappedSourceName);\n        }\n        else {\n            resolvedFile = await this._resolveLibrarySourceName(sourceName, remappedSourceName);\n        }\n        this._cache.set(sourceName, resolvedFile);\n        return resolvedFile;\n    }\n    /**\n     * Resolves an import from an already resolved file.\n     * @param from The file were the import statement is present.\n     * @param importName The path in the import statement.\n     */\n    async resolveImport(from, importName) {\n        // sanity check for deprecated task\n        if (importName !== (await this._transformImportName(importName))) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEPRECATED_TRANSFORM_IMPORT_TASK);\n        }\n        const imported = (0, remappings_1.applyRemappings)(this._remappings, importName);\n        const scheme = this._getUriScheme(imported);\n        if (scheme !== undefined) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.INVALID_IMPORT_PROTOCOL, {\n                from: from.sourceName,\n                imported,\n                protocol: scheme,\n            });\n        }\n        if ((0, source_names_1.replaceBackslashes)(imported) !== imported) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.INVALID_IMPORT_BACKSLASH, {\n                from: from.sourceName,\n                imported,\n            });\n        }\n        if ((0, source_names_1.isAbsolutePathSourceName)(imported)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.INVALID_IMPORT_ABSOLUTE_PATH, {\n                from: from.sourceName,\n                imported,\n            });\n        }\n        // Edge-case where an import can contain the current package's name in monorepos.\n        // The path can be resolved because there's a symlink in the node modules.\n        if (await (0, source_names_1.includesOwnPackageName)(imported)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.INCLUDES_OWN_PACKAGE_NAME, {\n                from: from.sourceName,\n                imported,\n            });\n        }\n        try {\n            let sourceName;\n            const isRelativeImport = this._isRelativeImport(imported);\n            if (isRelativeImport) {\n                sourceName = await this._relativeImportToSourceName(from, imported);\n            }\n            else {\n                sourceName = (0, source_names_1.normalizeSourceName)(importName); // The sourceName of the imported file is not transformed\n            }\n            const cached = this._cache.get(sourceName);\n            if (cached !== undefined) {\n                return cached;\n            }\n            let resolvedFile;\n            // We have this special case here, because otherwise local relative\n            // imports can be treated as library imports. For example if\n            // `contracts/c.sol` imports `../non-existent/a.sol`\n            if (from.library === undefined &&\n                isRelativeImport &&\n                !this._isRelativeImportToLibrary(from, imported)) {\n                resolvedFile = await this._resolveLocalSourceName(sourceName, (0, remappings_1.applyRemappings)(this._remappings, sourceName));\n            }\n            else {\n                resolvedFile = await this.resolveSourceName(sourceName);\n            }\n            this._cache.set(sourceName, resolvedFile);\n            return resolvedFile;\n        }\n        catch (error) {\n            if (errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.RESOLVER.FILE_NOT_FOUND) ||\n                errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.RESOLVER.LIBRARY_FILE_NOT_FOUND)) {\n                if (imported !== importName) {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.IMPORTED_MAPPED_FILE_NOT_FOUND, {\n                        imported,\n                        importName,\n                        from: from.sourceName,\n                    }, error);\n                }\n                else {\n                    throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.IMPORTED_FILE_NOT_FOUND, {\n                        imported,\n                        from: from.sourceName,\n                    }, error);\n                }\n            }\n            if (errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.RESOLVER.WRONG_SOURCE_NAME_CASING)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.INVALID_IMPORT_WRONG_CASING, {\n                    imported,\n                    from: from.sourceName,\n                }, error);\n            }\n            if (errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.RESOLVER.LIBRARY_NOT_INSTALLED)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.IMPORTED_LIBRARY_NOT_INSTALLED, {\n                    library: error.messageArguments.library,\n                    from: from.sourceName,\n                }, error);\n            }\n            if (errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.GENERAL.INVALID_READ_OF_DIRECTORY)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.INVALID_IMPORT_OF_DIRECTORY, {\n                    imported,\n                    from: from.sourceName,\n                }, error);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n    }\n    async _resolveLocalSourceName(sourceName, remappedSourceName) {\n        await this._validateSourceNameExistenceAndCasing(this._projectRoot, remappedSourceName, false);\n        const absolutePath = path_1.default.join(this._projectRoot, remappedSourceName);\n        return this._resolveFile(sourceName, absolutePath);\n    }\n    async _resolveLibrarySourceName(sourceName, remappedSourceName) {\n        const normalizedSourceName = remappedSourceName.replace(/^node_modules\\//, \"\");\n        const libraryName = this._getLibraryName(normalizedSourceName);\n        let packageJsonPath;\n        try {\n            packageJsonPath = this._resolveNodeModulesFileFromProjectRoot(path_1.default.join(libraryName, \"package.json\"));\n        }\n        catch (error) {\n            // if the project is using a dependency from hardhat itself but it can't\n            // be found, this means that a global installation is being used, so we\n            // resolve the dependency relative to this file\n            if (libraryName === \"hardhat\") {\n                const hardhatCoreDir = path_1.default.join(__dirname, \"..\", \"..\");\n                packageJsonPath = path_1.default.join(hardhatCoreDir, \"package.json\");\n            }\n            else {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.LIBRARY_NOT_INSTALLED, {\n                    library: libraryName,\n                }, error);\n            }\n        }\n        let nodeModulesPath = path_1.default.dirname(path_1.default.dirname(packageJsonPath));\n        if (this._isScopedPackage(normalizedSourceName)) {\n            nodeModulesPath = path_1.default.dirname(nodeModulesPath);\n        }\n        let absolutePath;\n        if (path_1.default.basename(nodeModulesPath) !== NODE_MODULES) {\n            // this can happen in monorepos that use PnP, in those\n            // cases we handle resolution differently\n            const packageRoot = path_1.default.dirname(packageJsonPath);\n            const pattern = new RegExp(`^${libraryName}/?`);\n            const fileName = normalizedSourceName.replace(pattern, \"\");\n            await this._validateSourceNameExistenceAndCasing(packageRoot, \n            // TODO: this is _not_ a source name; we should handle this scenario in\n            // a better way\n            fileName, true);\n            absolutePath = path_1.default.join(packageRoot, fileName);\n        }\n        else {\n            await this._validateSourceNameExistenceAndCasing(nodeModulesPath, normalizedSourceName, true);\n            absolutePath = path_1.default.join(nodeModulesPath, normalizedSourceName);\n        }\n        const packageInfo = await fs_extra_1.default.readJson(packageJsonPath);\n        const libraryVersion = packageInfo.version;\n        return this._resolveFile(sourceName, \n        // We resolve to the real path here, as we may be resolving a linked library\n        await (0, fs_utils_1.getRealPath)(absolutePath), libraryName, libraryVersion);\n    }\n    async _relativeImportToSourceName(from, imported) {\n        // This is a special case, were we turn relative imports from local files\n        // into library imports if necessary. The reason for this is that many\n        // users just do `import \"../node_modules/lib/a.sol\";`.\n        if (this._isRelativeImportToLibrary(from, imported)) {\n            return this._relativeImportToLibraryToSourceName(from, imported);\n        }\n        const sourceName = (0, source_names_1.normalizeSourceName)(path_1.default.join(path_1.default.dirname(from.sourceName), imported));\n        // If the file with the import is local, and the normalized version\n        // starts with ../ means that it's trying to get outside of the project.\n        if (from.library === undefined && sourceName.startsWith(\"../\")) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.INVALID_IMPORT_OUTSIDE_OF_PROJECT, { from: from.sourceName, imported });\n        }\n        if (from.library !== undefined &&\n            !this._isInsideSameDir(from.sourceName, sourceName)) {\n            // If the file is being imported from a library, this means that it's\n            // trying to reach another one.\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.ILLEGAL_IMPORT, {\n                from: from.sourceName,\n                imported,\n            });\n        }\n        return sourceName;\n    }\n    async _resolveFile(sourceName, absolutePath, libraryName, libraryVersion) {\n        const rawContent = await this._readFile(absolutePath);\n        const stats = await fs_extra_1.default.stat(absolutePath);\n        const lastModificationDate = new Date(stats.ctime);\n        const contentHash = (0, hash_1.createNonCryptographicHashBasedIdentifier)(Buffer.from(rawContent)).toString(\"hex\");\n        const parsedContent = this._parser.parse(rawContent, absolutePath, contentHash);\n        const content = {\n            rawContent,\n            ...parsedContent,\n        };\n        return new ResolvedFile(sourceName, absolutePath, content, contentHash, lastModificationDate, libraryName, libraryVersion);\n    }\n    _isRelativeImport(imported) {\n        return imported.startsWith(\"./\") || imported.startsWith(\"../\");\n    }\n    _resolveNodeModulesFileFromProjectRoot(fileName) {\n        return resolve_1.default.sync(fileName, {\n            basedir: this._projectRoot,\n            preserveSymlinks: true,\n        });\n    }\n    _getLibraryName(sourceName) {\n        let endIndex;\n        if (this._isScopedPackage(sourceName)) {\n            endIndex = sourceName.indexOf(\"/\", sourceName.indexOf(\"/\") + 1);\n        }\n        else if (sourceName.indexOf(\"/\") === -1) {\n            endIndex = sourceName.length;\n        }\n        else {\n            endIndex = sourceName.indexOf(\"/\");\n        }\n        return sourceName.slice(0, endIndex);\n    }\n    _getUriScheme(s) {\n        const re = /([a-zA-Z]+):\\/\\//;\n        const match = re.exec(s);\n        if (match === null) {\n            return undefined;\n        }\n        return match[1];\n    }\n    _isInsideSameDir(sourceNameInDir, sourceNameToTest) {\n        const firstSlash = sourceNameInDir.indexOf(\"/\");\n        const dir = firstSlash !== -1\n            ? sourceNameInDir.substring(0, firstSlash)\n            : sourceNameInDir;\n        return sourceNameToTest.startsWith(dir);\n    }\n    _isScopedPackage(packageOrPackageFile) {\n        return packageOrPackageFile.startsWith(\"@\");\n    }\n    _isRelativeImportToLibrary(from, imported) {\n        return (this._isRelativeImport(imported) &&\n            from.library === undefined &&\n            imported.includes(`${NODE_MODULES}/`));\n    }\n    _relativeImportToLibraryToSourceName(from, imported) {\n        const sourceName = (0, source_names_1.normalizeSourceName)(path_1.default.join(path_1.default.dirname(from.sourceName), imported));\n        const nmIndex = sourceName.indexOf(`${NODE_MODULES}/`);\n        return sourceName.substr(nmIndex + NODE_MODULES.length + 1);\n    }\n    async _validateSourceNameExistenceAndCasing(fromDir, sourceName, isLibrary) {\n        try {\n            await (0, source_names_1.validateSourceNameExistenceAndCasing)(fromDir, sourceName);\n        }\n        catch (error) {\n            if (errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.SOURCE_NAMES.FILE_NOT_FOUND)) {\n                throw new errors_1.HardhatError(isLibrary\n                    ? errors_list_1.ERRORS.RESOLVER.LIBRARY_FILE_NOT_FOUND\n                    : errors_list_1.ERRORS.RESOLVER.FILE_NOT_FOUND, { file: sourceName }, error);\n            }\n            if (errors_1.HardhatError.isHardhatErrorType(error, errors_list_1.ERRORS.SOURCE_NAMES.WRONG_CASING)) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.RESOLVER.WRONG_SOURCE_NAME_CASING, {\n                    incorrect: sourceName,\n                    correct: error.messageArguments.correct,\n                }, error);\n            }\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw error;\n        }\n    }\n}\nexports.Resolver = Resolver;\n//# sourceMappingURL=resolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/solidity/resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/caller-package.js":
/*!**************************************************************!*\
  !*** ./node_modules/hardhat/internal/util/caller-package.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getClosestCallerPackage = void 0;\nconst find_up_1 = __importDefault(__webpack_require__(/*! find-up */ \"(ssr)/./node_modules/find-up/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nfunction findClosestPackageJson(file) {\n    return find_up_1.default.sync(\"package.json\", { cwd: path_1.default.dirname(file) });\n}\n/**\n * Returns the name of the closest package in the callstack that isn't this.\n */\nfunction getClosestCallerPackage() {\n    const previousPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = (e, s) => s;\n    const error = new Error();\n    const stack = error.stack;\n    Error.prepareStackTrace = previousPrepareStackTrace;\n    const currentPackage = findClosestPackageJson(__filename);\n    for (const callSite of stack) {\n        const fileName = callSite.getFileName();\n        // fileName is string | null in @types/node <=18\n        // and string | undefined in @types/node 20\n        if (fileName !== null &&\n            fileName !== undefined &&\n            path_1.default.isAbsolute(fileName)) {\n            const callerPackage = findClosestPackageJson(fileName);\n            if (callerPackage === currentPackage) {\n                continue;\n            }\n            if (callerPackage === undefined) {\n                return undefined;\n            }\n            return __webpack_require__(\"(ssr)/./node_modules/hardhat/internal/util sync recursive\")(callerPackage).name;\n        }\n    }\n    return undefined;\n}\nexports.getClosestCallerPackage = getClosestCallerPackage;\n//# sourceMappingURL=caller-package.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2NhbGxlci1wYWNrYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLGtDQUFrQyxtQkFBTyxDQUFDLHNEQUFTO0FBQ25ELCtCQUErQixtQkFBTyxDQUFDLGtCQUFNO0FBQzdDO0FBQ0Esb0RBQW9ELG1DQUFtQztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpRkFBUSxhQUFhLENBQUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC9jYWxsZXItcGFja2FnZS5qcz9hMzFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDbG9zZXN0Q2FsbGVyUGFja2FnZSA9IHZvaWQgMDtcbmNvbnN0IGZpbmRfdXBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZmluZC11cFwiKSk7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuZnVuY3Rpb24gZmluZENsb3Nlc3RQYWNrYWdlSnNvbihmaWxlKSB7XG4gICAgcmV0dXJuIGZpbmRfdXBfMS5kZWZhdWx0LnN5bmMoXCJwYWNrYWdlLmpzb25cIiwgeyBjd2Q6IHBhdGhfMS5kZWZhdWx0LmRpcm5hbWUoZmlsZSkgfSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGNsb3Nlc3QgcGFja2FnZSBpbiB0aGUgY2FsbHN0YWNrIHRoYXQgaXNuJ3QgdGhpcy5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2xvc2VzdENhbGxlclBhY2thZ2UoKSB7XG4gICAgY29uc3QgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gKGUsIHMpID0+IHM7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoKTtcbiAgICBjb25zdCBzdGFjayA9IGVycm9yLnN0YWNrO1xuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZTtcbiAgICBjb25zdCBjdXJyZW50UGFja2FnZSA9IGZpbmRDbG9zZXN0UGFja2FnZUpzb24oX19maWxlbmFtZSk7XG4gICAgZm9yIChjb25zdCBjYWxsU2l0ZSBvZiBzdGFjaykge1xuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGNhbGxTaXRlLmdldEZpbGVOYW1lKCk7XG4gICAgICAgIC8vIGZpbGVOYW1lIGlzIHN0cmluZyB8IG51bGwgaW4gQHR5cGVzL25vZGUgPD0xOFxuICAgICAgICAvLyBhbmQgc3RyaW5nIHwgdW5kZWZpbmVkIGluIEB0eXBlcy9ub2RlIDIwXG4gICAgICAgIGlmIChmaWxlTmFtZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgZmlsZU5hbWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgcGF0aF8xLmRlZmF1bHQuaXNBYnNvbHV0ZShmaWxlTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxlclBhY2thZ2UgPSBmaW5kQ2xvc2VzdFBhY2thZ2VKc29uKGZpbGVOYW1lKTtcbiAgICAgICAgICAgIGlmIChjYWxsZXJQYWNrYWdlID09PSBjdXJyZW50UGFja2FnZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbGxlclBhY2thZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVxdWlyZShjYWxsZXJQYWNrYWdlKS5uYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLmdldENsb3Nlc3RDYWxsZXJQYWNrYWdlID0gZ2V0Q2xvc2VzdENhbGxlclBhY2thZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsZXItcGFja2FnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/caller-package.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/ci-detection.js":
/*!************************************************************!*\
  !*** ./node_modules/hardhat/internal/util/ci-detection.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isRunningOnCiServer = void 0;\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\n// This has been tested in:\n//   - Travis CI\n//   - Circle CI\n//   - GitHub Actions\n//   - Azure Pipelines\n//\n// This should also work in this CI providers because they set process.env.CI:\n//   - AppVeyor\n//   - Bitbucket Pipelines\n//   - GitLab CI\n//\n// This should also work:\n//   - AWS CodeBuild -- Special case\n//   - Jenkins -- Using process.env.BUILD_NUMBER\n//   - ZEIT Now -- Special case\nfunction isRunningOnCiServer() {\n    const ci = __webpack_require__(/*! ci-info */ \"(ssr)/./node_modules/ci-info/index.js\");\n    return (ci.isCI ||\n        isGithubActions() ||\n        isLinuxWithoutDisplayServer() ||\n        isNow() ||\n        isAwsCodeBuild());\n}\nexports.isRunningOnCiServer = isRunningOnCiServer;\nfunction isGithubActions() {\n    return process.env.GITHUB_ACTIONS !== undefined;\n}\nfunction isLinuxWithoutDisplayServer() {\n    if (os_1.default.type() !== \"Linux\") {\n        return false;\n    }\n    if (process.env.DISPLAY !== undefined) {\n        return false;\n    }\n    if (process.env.WAYLAND_DISPLAY !== undefined) {\n        return false;\n    }\n    return true;\n}\nfunction isNow() {\n    return (process.env.NOW !== undefined || process.env.DEPLOYMENT_ID !== undefined);\n}\nfunction isAwsCodeBuild() {\n    return process.env.CODEBUILD_BUILD_NUMBER !== undefined;\n}\n//# sourceMappingURL=ci-detection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2NpLWRldGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQiw2QkFBNkIsbUJBQU8sQ0FBQyxjQUFJO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLHNEQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2NpLWRldGVjdGlvbi5qcz82NTdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1J1bm5pbmdPbkNpU2VydmVyID0gdm9pZCAwO1xuY29uc3Qgb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwib3NcIikpO1xuLy8gVGhpcyBoYXMgYmVlbiB0ZXN0ZWQgaW46XG4vLyAgIC0gVHJhdmlzIENJXG4vLyAgIC0gQ2lyY2xlIENJXG4vLyAgIC0gR2l0SHViIEFjdGlvbnNcbi8vICAgLSBBenVyZSBQaXBlbGluZXNcbi8vXG4vLyBUaGlzIHNob3VsZCBhbHNvIHdvcmsgaW4gdGhpcyBDSSBwcm92aWRlcnMgYmVjYXVzZSB0aGV5IHNldCBwcm9jZXNzLmVudi5DSTpcbi8vICAgLSBBcHBWZXlvclxuLy8gICAtIEJpdGJ1Y2tldCBQaXBlbGluZXNcbi8vICAgLSBHaXRMYWIgQ0lcbi8vXG4vLyBUaGlzIHNob3VsZCBhbHNvIHdvcms6XG4vLyAgIC0gQVdTIENvZGVCdWlsZCAtLSBTcGVjaWFsIGNhc2Vcbi8vICAgLSBKZW5raW5zIC0tIFVzaW5nIHByb2Nlc3MuZW52LkJVSUxEX05VTUJFUlxuLy8gICAtIFpFSVQgTm93IC0tIFNwZWNpYWwgY2FzZVxuZnVuY3Rpb24gaXNSdW5uaW5nT25DaVNlcnZlcigpIHtcbiAgICBjb25zdCBjaSA9IHJlcXVpcmUoXCJjaS1pbmZvXCIpO1xuICAgIHJldHVybiAoY2kuaXNDSSB8fFxuICAgICAgICBpc0dpdGh1YkFjdGlvbnMoKSB8fFxuICAgICAgICBpc0xpbnV4V2l0aG91dERpc3BsYXlTZXJ2ZXIoKSB8fFxuICAgICAgICBpc05vdygpIHx8XG4gICAgICAgIGlzQXdzQ29kZUJ1aWxkKCkpO1xufVxuZXhwb3J0cy5pc1J1bm5pbmdPbkNpU2VydmVyID0gaXNSdW5uaW5nT25DaVNlcnZlcjtcbmZ1bmN0aW9uIGlzR2l0aHViQWN0aW9ucygpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuR0lUSFVCX0FDVElPTlMgIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGlzTGludXhXaXRob3V0RGlzcGxheVNlcnZlcigpIHtcbiAgICBpZiAob3NfMS5kZWZhdWx0LnR5cGUoKSAhPT0gXCJMaW51eFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52LkRJU1BMQVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5XQVlMQU5EX0RJU1BMQVkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNOb3coKSB7XG4gICAgcmV0dXJuIChwcm9jZXNzLmVudi5OT1cgIT09IHVuZGVmaW5lZCB8fCBwcm9jZXNzLmVudi5ERVBMT1lNRU5UX0lEICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gaXNBd3NDb2RlQnVpbGQoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LkNPREVCVUlMRF9CVUlMRF9OVU1CRVIgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNpLWRldGVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/ci-detection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/date.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/internal/util/date.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getDifferenceInSeconds = exports.timestampSecondsToDate = exports.dateToTimestampSeconds = exports.parseDateString = void 0;\nfunction parseDateString(str) {\n    return new Date(str);\n}\nexports.parseDateString = parseDateString;\nfunction dateToTimestampSeconds(date) {\n    return Math.floor(date.valueOf() / 1000);\n}\nexports.dateToTimestampSeconds = dateToTimestampSeconds;\nfunction timestampSecondsToDate(timestamp) {\n    return new Date(timestamp * 1000);\n}\nexports.timestampSecondsToDate = timestampSecondsToDate;\nfunction getDifferenceInSeconds(a, b) {\n    return Math.floor((a.valueOf() - b.valueOf()) / 1000);\n}\nexports.getDifferenceInSeconds = getDifferenceInSeconds;\n//# sourceMappingURL=date.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcsOEJBQThCLEdBQUcsOEJBQThCLEdBQUcsdUJBQXVCO0FBQzFIO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2RhdGUuanM/N2ZjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RGlmZmVyZW5jZUluU2Vjb25kcyA9IGV4cG9ydHMudGltZXN0YW1wU2Vjb25kc1RvRGF0ZSA9IGV4cG9ydHMuZGF0ZVRvVGltZXN0YW1wU2Vjb25kcyA9IGV4cG9ydHMucGFyc2VEYXRlU3RyaW5nID0gdm9pZCAwO1xuZnVuY3Rpb24gcGFyc2VEYXRlU3RyaW5nKHN0cikge1xuICAgIHJldHVybiBuZXcgRGF0ZShzdHIpO1xufVxuZXhwb3J0cy5wYXJzZURhdGVTdHJpbmcgPSBwYXJzZURhdGVTdHJpbmc7XG5mdW5jdGlvbiBkYXRlVG9UaW1lc3RhbXBTZWNvbmRzKGRhdGUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihkYXRlLnZhbHVlT2YoKSAvIDEwMDApO1xufVxuZXhwb3J0cy5kYXRlVG9UaW1lc3RhbXBTZWNvbmRzID0gZGF0ZVRvVGltZXN0YW1wU2Vjb25kcztcbmZ1bmN0aW9uIHRpbWVzdGFtcFNlY29uZHNUb0RhdGUodGltZXN0YW1wKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApO1xufVxuZXhwb3J0cy50aW1lc3RhbXBTZWNvbmRzVG9EYXRlID0gdGltZXN0YW1wU2Vjb25kc1RvRGF0ZTtcbmZ1bmN0aW9uIGdldERpZmZlcmVuY2VJblNlY29uZHMoYSwgYikge1xuICAgIHJldHVybiBNYXRoLmZsb29yKChhLnZhbHVlT2YoKSAtIGIudmFsdWVPZigpKSAvIDEwMDApO1xufVxuZXhwb3J0cy5nZXREaWZmZXJlbmNlSW5TZWNvbmRzID0gZ2V0RGlmZmVyZW5jZUluU2Vjb25kcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/date.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/download.js":
/*!********************************************************!*\
  !*** ./node_modules/hardhat/internal/util/download.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.download = void 0;\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst packageInfo_1 = __webpack_require__(/*! ./packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst proxy_1 = __webpack_require__(/*! ./proxy */ \"(ssr)/./node_modules/hardhat/internal/util/proxy.js\");\nconst TEMP_FILE_PREFIX = \"tmp-\";\nfunction resolveTempFileName(filePath) {\n    const { dir, ext, name } = path_1.default.parse(filePath);\n    return path_1.default.format({\n        dir,\n        ext,\n        name: `${TEMP_FILE_PREFIX}${name}`,\n    });\n}\nasync function download(url, filePath, timeoutMillis = 10000, extraHeaders = {}) {\n    const { getGlobalDispatcher, ProxyAgent, request } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! undici */ \"(ssr)/./node_modules/undici/index.js\")));\n    let dispatcher;\n    if (process.env.http_proxy !== undefined && (0, proxy_1.shouldUseProxy)(url)) {\n        dispatcher = new ProxyAgent(process.env.http_proxy);\n    }\n    else {\n        dispatcher = getGlobalDispatcher();\n    }\n    const hardhatVersion = (0, packageInfo_1.getHardhatVersion)();\n    // Fetch the url\n    const response = await request(url, {\n        dispatcher,\n        headersTimeout: timeoutMillis,\n        maxRedirections: 10,\n        method: \"GET\",\n        headers: {\n            ...extraHeaders,\n            \"User-Agent\": `hardhat ${hardhatVersion}`,\n        },\n    });\n    if (response.statusCode >= 200 && response.statusCode <= 299) {\n        const responseBody = Buffer.from(await response.body.arrayBuffer());\n        const tmpFilePath = resolveTempFileName(filePath);\n        await fs_extra_1.default.ensureDir(path_1.default.dirname(filePath));\n        await fs_extra_1.default.writeFile(tmpFilePath, responseBody);\n        return fs_extra_1.default.move(tmpFilePath, filePath, { overwrite: true });\n    }\n    // undici's response bodies must always be consumed to prevent leaks\n    const text = await response.body.text();\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw new Error(`Failed to download ${url} - ${response.statusCode} received. ${text}`);\n}\nexports.download = download;\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2Rvd25sb2FkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQixtQ0FBbUMsbUJBQU8sQ0FBQyw0REFBVTtBQUNyRCwrQkFBK0IsbUJBQU8sQ0FBQyxrQkFBTTtBQUM3QyxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBZTtBQUM3QyxnQkFBZ0IsbUJBQU8sQ0FBQyxvRUFBUztBQUNqQztBQUNBO0FBQ0EsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQixFQUFFLEtBQUs7QUFDekMsS0FBSztBQUNMO0FBQ0EsK0VBQStFO0FBQy9FLFlBQVksMkNBQTJDLGtEQUFrRCxtQkFBTyxDQUFDLG9EQUFRO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGVBQWU7QUFDcEQsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGlCQUFpQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxLQUFLLElBQUkscUJBQXFCLFlBQVksS0FBSztBQUN6RjtBQUNBLGdCQUFnQjtBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2Rvd25sb2FkLmpzP2IzYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZG93bmxvYWQgPSB2b2lkIDA7XG5jb25zdCBmc19leHRyYV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmcy1leHRyYVwiKSk7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3QgcGFja2FnZUluZm9fMSA9IHJlcXVpcmUoXCIuL3BhY2thZ2VJbmZvXCIpO1xuY29uc3QgcHJveHlfMSA9IHJlcXVpcmUoXCIuL3Byb3h5XCIpO1xuY29uc3QgVEVNUF9GSUxFX1BSRUZJWCA9IFwidG1wLVwiO1xuZnVuY3Rpb24gcmVzb2x2ZVRlbXBGaWxlTmFtZShmaWxlUGF0aCkge1xuICAgIGNvbnN0IHsgZGlyLCBleHQsIG5hbWUgfSA9IHBhdGhfMS5kZWZhdWx0LnBhcnNlKGZpbGVQYXRoKTtcbiAgICByZXR1cm4gcGF0aF8xLmRlZmF1bHQuZm9ybWF0KHtcbiAgICAgICAgZGlyLFxuICAgICAgICBleHQsXG4gICAgICAgIG5hbWU6IGAke1RFTVBfRklMRV9QUkVGSVh9JHtuYW1lfWAsXG4gICAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZCh1cmwsIGZpbGVQYXRoLCB0aW1lb3V0TWlsbGlzID0gMTAwMDAsIGV4dHJhSGVhZGVycyA9IHt9KSB7XG4gICAgY29uc3QgeyBnZXRHbG9iYWxEaXNwYXRjaGVyLCBQcm94eUFnZW50LCByZXF1ZXN0IH0gPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IF9faW1wb3J0U3RhcihyZXF1aXJlKFwidW5kaWNpXCIpKSk7XG4gICAgbGV0IGRpc3BhdGNoZXI7XG4gICAgaWYgKHByb2Nlc3MuZW52Lmh0dHBfcHJveHkgIT09IHVuZGVmaW5lZCAmJiAoMCwgcHJveHlfMS5zaG91bGRVc2VQcm94eSkodXJsKSkge1xuICAgICAgICBkaXNwYXRjaGVyID0gbmV3IFByb3h5QWdlbnQocHJvY2Vzcy5lbnYuaHR0cF9wcm94eSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkaXNwYXRjaGVyID0gZ2V0R2xvYmFsRGlzcGF0Y2hlcigpO1xuICAgIH1cbiAgICBjb25zdCBoYXJkaGF0VmVyc2lvbiA9ICgwLCBwYWNrYWdlSW5mb18xLmdldEhhcmRoYXRWZXJzaW9uKSgpO1xuICAgIC8vIEZldGNoIHRoZSB1cmxcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QodXJsLCB7XG4gICAgICAgIGRpc3BhdGNoZXIsXG4gICAgICAgIGhlYWRlcnNUaW1lb3V0OiB0aW1lb3V0TWlsbGlzLFxuICAgICAgICBtYXhSZWRpcmVjdGlvbnM6IDEwLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIC4uLmV4dHJhSGVhZGVycyxcbiAgICAgICAgICAgIFwiVXNlci1BZ2VudFwiOiBgaGFyZGhhdCAke2hhcmRoYXRWZXJzaW9ufWAsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPD0gMjk5KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IEJ1ZmZlci5mcm9tKGF3YWl0IHJlc3BvbnNlLmJvZHkuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgIGNvbnN0IHRtcEZpbGVQYXRoID0gcmVzb2x2ZVRlbXBGaWxlTmFtZShmaWxlUGF0aCk7XG4gICAgICAgIGF3YWl0IGZzX2V4dHJhXzEuZGVmYXVsdC5lbnN1cmVEaXIocGF0aF8xLmRlZmF1bHQuZGlybmFtZShmaWxlUGF0aCkpO1xuICAgICAgICBhd2FpdCBmc19leHRyYV8xLmRlZmF1bHQud3JpdGVGaWxlKHRtcEZpbGVQYXRoLCByZXNwb25zZUJvZHkpO1xuICAgICAgICByZXR1cm4gZnNfZXh0cmFfMS5kZWZhdWx0Lm1vdmUodG1wRmlsZVBhdGgsIGZpbGVQYXRoLCB7IG92ZXJ3cml0ZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgLy8gdW5kaWNpJ3MgcmVzcG9uc2UgYm9kaWVzIG11c3QgYWx3YXlzIGJlIGNvbnN1bWVkIHRvIHByZXZlbnQgbGVha3NcbiAgICBjb25zdCB0ZXh0ID0gYXdhaXQgcmVzcG9uc2UuYm9keS50ZXh0KCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBub21pY2ZvdW5kYXRpb24vaGFyZGhhdC1pbnRlcm5hbC1ydWxlcy9vbmx5LWhhcmRoYXQtZXJyb3JcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBkb3dubG9hZCAke3VybH0gLSAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9IHJlY2VpdmVkLiAke3RleHR9YCk7XG59XG5leHBvcnRzLmRvd25sb2FkID0gZG93bmxvYWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb3dubG9hZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/download.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/event-emitter.js":
/*!*************************************************************!*\
  !*** ./node_modules/hardhat/internal/util/event-emitter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventEmitterWrapper = void 0;\n// IMPORTANT NOTE: This class is type-checked against the currently installed\n// version of @types/node (10.x atm), and manually checked to be compatible with\n// Node.js up to 14.3.0 (the latest release atm). There's a test that ensures\n// that we are exporting all the EventEmitter's members, but it can't check the\n// actual types of those members if they are functions.\n//\n// If a new version of Node.js adds new members to EventEmitter or overloads\n// existing ones this class has to be updated, even if it still type-checks.\n// This is a serious limitation ot DefinitelyTyped when the original, un-typed,\n// library can change because of the user having a different version.\nclass EventEmitterWrapper {\n    constructor(_wrapped) {\n        this._wrapped = _wrapped;\n    }\n    addListener(event, listener) {\n        this._wrapped.addListener(event, listener);\n        return this;\n    }\n    on(event, listener) {\n        this._wrapped.on(event, listener);\n        return this;\n    }\n    once(event, listener) {\n        this._wrapped.once(event, listener);\n        return this;\n    }\n    prependListener(event, listener) {\n        this._wrapped.prependListener(event, listener);\n        return this;\n    }\n    prependOnceListener(event, listener) {\n        this._wrapped.prependOnceListener(event, listener);\n        return this;\n    }\n    removeListener(event, listener) {\n        this._wrapped.removeListener(event, listener);\n        return this;\n    }\n    off(event, listener) {\n        this._wrapped.off(event, listener);\n        return this;\n    }\n    removeAllListeners(event) {\n        this._wrapped.removeAllListeners(event);\n        return this;\n    }\n    setMaxListeners(n) {\n        this._wrapped.setMaxListeners(n);\n        return this;\n    }\n    getMaxListeners() {\n        return this._wrapped.getMaxListeners();\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    listeners(event) {\n        return this._wrapped.listeners(event);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    rawListeners(event) {\n        return this._wrapped.rawListeners(event);\n    }\n    emit(event, ...args) {\n        return this._wrapped.emit(event, ...args);\n    }\n    eventNames() {\n        return this._wrapped.eventNames();\n    }\n    listenerCount(type) {\n        return this._wrapped.listenerCount(type);\n    }\n}\nexports.EventEmitterWrapper = EventEmitterWrapper;\n//# sourceMappingURL=event-emitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2V2ZW50LWVtaXR0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC9ldmVudC1lbWl0dGVyLmpzP2Q1MDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV2ZW50RW1pdHRlcldyYXBwZXIgPSB2b2lkIDA7XG4vLyBJTVBPUlRBTlQgTk9URTogVGhpcyBjbGFzcyBpcyB0eXBlLWNoZWNrZWQgYWdhaW5zdCB0aGUgY3VycmVudGx5IGluc3RhbGxlZFxuLy8gdmVyc2lvbiBvZiBAdHlwZXMvbm9kZSAoMTAueCBhdG0pLCBhbmQgbWFudWFsbHkgY2hlY2tlZCB0byBiZSBjb21wYXRpYmxlIHdpdGhcbi8vIE5vZGUuanMgdXAgdG8gMTQuMy4wICh0aGUgbGF0ZXN0IHJlbGVhc2UgYXRtKS4gVGhlcmUncyBhIHRlc3QgdGhhdCBlbnN1cmVzXG4vLyB0aGF0IHdlIGFyZSBleHBvcnRpbmcgYWxsIHRoZSBFdmVudEVtaXR0ZXIncyBtZW1iZXJzLCBidXQgaXQgY2FuJ3QgY2hlY2sgdGhlXG4vLyBhY3R1YWwgdHlwZXMgb2YgdGhvc2UgbWVtYmVycyBpZiB0aGV5IGFyZSBmdW5jdGlvbnMuXG4vL1xuLy8gSWYgYSBuZXcgdmVyc2lvbiBvZiBOb2RlLmpzIGFkZHMgbmV3IG1lbWJlcnMgdG8gRXZlbnRFbWl0dGVyIG9yIG92ZXJsb2Fkc1xuLy8gZXhpc3Rpbmcgb25lcyB0aGlzIGNsYXNzIGhhcyB0byBiZSB1cGRhdGVkLCBldmVuIGlmIGl0IHN0aWxsIHR5cGUtY2hlY2tzLlxuLy8gVGhpcyBpcyBhIHNlcmlvdXMgbGltaXRhdGlvbiBvdCBEZWZpbml0ZWx5VHlwZWQgd2hlbiB0aGUgb3JpZ2luYWwsIHVuLXR5cGVkLFxuLy8gbGlicmFyeSBjYW4gY2hhbmdlIGJlY2F1c2Ugb2YgdGhlIHVzZXIgaGF2aW5nIGEgZGlmZmVyZW50IHZlcnNpb24uXG5jbGFzcyBFdmVudEVtaXR0ZXJXcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihfd3JhcHBlZCkge1xuICAgICAgICB0aGlzLl93cmFwcGVkID0gX3dyYXBwZWQ7XG4gICAgfVxuICAgIGFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl93cmFwcGVkLmFkZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fd3JhcHBlZC5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb25jZShldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fd3JhcHBlZC5vbmNlKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBwcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3dyYXBwZWQucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBwcmVwZW5kT25jZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl93cmFwcGVkLnByZXBlbmRPbmNlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl93cmFwcGVkLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3dyYXBwZWQub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fd3JhcHBlZC5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgICAgICAgdGhpcy5fd3JhcHBlZC5zZXRNYXhMaXN0ZW5lcnMobik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93cmFwcGVkLmdldE1heExpc3RlbmVycygpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIGxpc3RlbmVycyhldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZC5saXN0ZW5lcnMoZXZlbnQpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIHJhd0xpc3RlbmVycyhldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZC5yYXdMaXN0ZW5lcnMoZXZlbnQpO1xuICAgIH1cbiAgICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93cmFwcGVkLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBldmVudE5hbWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZC5ldmVudE5hbWVzKCk7XG4gICAgfVxuICAgIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd3JhcHBlZC5saXN0ZW5lckNvdW50KHR5cGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuRXZlbnRFbWl0dGVyV3JhcHBlciA9IEV2ZW50RW1pdHRlcldyYXBwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudC1lbWl0dGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/event-emitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/fs-utils.js":
/*!********************************************************!*\
  !*** ./node_modules/hardhat/internal/util/fs-utils.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getFileTrueCaseSync = exports.getFileTrueCase = exports.getAllFilesMatchingSync = exports.getAllFilesMatching = exports.getRealPathSync = exports.getRealPath = exports.InvalidDirectoryError = exports.FileNotFoundError = exports.FileSystemAccessError = void 0;\nconst promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\n// We use this error to encapsulate any other error possibly thrown by node's\n// fs apis, as sometimes their errors don't have stack traces.\nclass FileSystemAccessError extends errors_1.CustomError {\n}\nexports.FileSystemAccessError = FileSystemAccessError;\nclass FileNotFoundError extends errors_1.CustomError {\n    constructor(filePath, parent) {\n        super(`File ${filePath} not found`, parent);\n    }\n}\nexports.FileNotFoundError = FileNotFoundError;\nclass InvalidDirectoryError extends errors_1.CustomError {\n    constructor(filePath, parent) {\n        super(`Invalid directory ${filePath}`, parent);\n    }\n}\nexports.InvalidDirectoryError = InvalidDirectoryError;\n/**\n * Returns the real path of absolutePath, resolving symlinks.\n *\n * @throws FileNotFoundError if absolutePath doesn't exist.\n */\nasync function getRealPath(absolutePath) {\n    try {\n        // This method returns the actual casing.\n        // Please read Node.js' docs to learn more.\n        return await promises_1.default.realpath(path_1.default.normalize(absolutePath));\n    }\n    catch (e) {\n        if (e.code === \"ENOENT\") {\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw new FileNotFoundError(absolutePath, e);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw new FileSystemAccessError(e.message, e);\n    }\n}\nexports.getRealPath = getRealPath;\n/**\n * Sync version of getRealPath\n *\n * @see getRealCase\n */\nfunction getRealPathSync(absolutePath) {\n    try {\n        // This method returns the actual casing.\n        // Please read Node.js' docs to learn more.\n        return fs_1.default.realpathSync.native(path_1.default.normalize(absolutePath));\n    }\n    catch (e) {\n        if (e.code === \"ENOENT\") {\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw new FileNotFoundError(absolutePath, e);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw new FileSystemAccessError(e.message, e);\n    }\n}\nexports.getRealPathSync = getRealPathSync;\n/**\n * Returns an array of files (not dirs) that match a condition.\n *\n * @param absolutePathToDir A directory. If it doesn't exist `[]` is returned.\n * @param matches A function to filter files (not directories)\n * @returns An array of absolute paths. Each file has its true case, except\n *  for the initial absolutePathToDir part, which preserves the given casing.\n *  No order is guaranteed.\n */\nasync function getAllFilesMatching(absolutePathToDir, matches) {\n    const dir = await readdir(absolutePathToDir);\n    const results = await Promise.all(dir.map(async (file) => {\n        const absolutePathToFile = path_1.default.join(absolutePathToDir, file);\n        const stats = await promises_1.default.stat(absolutePathToFile);\n        if (stats.isDirectory()) {\n            const files = await getAllFilesMatching(absolutePathToFile, matches);\n            return files.flat();\n        }\n        else if (matches === undefined || matches(absolutePathToFile)) {\n            return absolutePathToFile;\n        }\n        else {\n            return [];\n        }\n    }));\n    return results.flat();\n}\nexports.getAllFilesMatching = getAllFilesMatching;\n/**\n * Sync version of getAllFilesMatching\n *\n * @see getAllFilesMatching\n */\nfunction getAllFilesMatchingSync(absolutePathToDir, matches) {\n    const dir = readdirSync(absolutePathToDir);\n    const results = dir.map((file) => {\n        const absolutePathToFile = path_1.default.join(absolutePathToDir, file);\n        const stats = fs_1.default.statSync(absolutePathToFile);\n        if (stats.isDirectory()) {\n            return getAllFilesMatchingSync(absolutePathToFile, matches).flat();\n        }\n        else if (matches === undefined || matches(absolutePathToFile)) {\n            return absolutePathToFile;\n        }\n        else {\n            return [];\n        }\n    });\n    return results.flat();\n}\nexports.getAllFilesMatchingSync = getAllFilesMatchingSync;\n/**\n * Returns the true case relative path of `relativePath` from `from`, without\n * resolving symlinks.\n */\nasync function getFileTrueCase(from, relativePath) {\n    const dirEntries = await readdir(from);\n    const parts = relativePath.split(path_1.default.sep);\n    const nextDirLowerCase = parts[0].toLowerCase();\n    for (const dirEntry of dirEntries) {\n        if (dirEntry.toLowerCase() === nextDirLowerCase) {\n            if (parts.length === 1) {\n                return dirEntry;\n            }\n            return path_1.default.join(dirEntry, await getFileTrueCase(path_1.default.join(from, dirEntry), path_1.default.relative(parts[0], relativePath)));\n        }\n    }\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw new FileNotFoundError(path_1.default.join(from, relativePath));\n}\nexports.getFileTrueCase = getFileTrueCase;\n/**\n * Sync version of getFileTrueCase\n *\n * @see getFileTrueCase\n */\nfunction getFileTrueCaseSync(from, relativePath) {\n    const dirEntries = readdirSync(from);\n    const parts = relativePath.split(path_1.default.sep);\n    const nextDirLowerCase = parts[0].toLowerCase();\n    for (const dirEntry of dirEntries) {\n        if (dirEntry.toLowerCase() === nextDirLowerCase) {\n            if (parts.length === 1) {\n                return dirEntry;\n            }\n            return path_1.default.join(dirEntry, getFileTrueCaseSync(path_1.default.join(from, dirEntry), path_1.default.relative(parts[0], relativePath)));\n        }\n    }\n    // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n    throw new FileNotFoundError(path_1.default.join(from, relativePath));\n}\nexports.getFileTrueCaseSync = getFileTrueCaseSync;\nasync function readdir(absolutePathToDir) {\n    try {\n        return await promises_1.default.readdir(absolutePathToDir);\n    }\n    catch (e) {\n        if (e.code === \"ENOENT\") {\n            return [];\n        }\n        if (e.code === \"ENOTDIR\") {\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw new InvalidDirectoryError(absolutePathToDir, e);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw new FileSystemAccessError(e.message, e);\n    }\n}\nfunction readdirSync(absolutePathToDir) {\n    try {\n        return fs_1.default.readdirSync(absolutePathToDir);\n    }\n    catch (e) {\n        if (e.code === \"ENOENT\") {\n            return [];\n        }\n        if (e.code === \"ENOTDIR\") {\n            // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n            throw new InvalidDirectoryError(absolutePathToDir, e);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw new FileSystemAccessError(e.message, e);\n    }\n}\n//# sourceMappingURL=fs-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/glob.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/internal/util/glob.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.globSync = exports.glob = void 0;\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\n/**\n * DO NOT USE THIS FUNCTION. It's SLOW and its semantics are optimized for\n * user-facing CLI globs, not traversing the FS.\n *\n * It's not removed because unfortunately some plugins used it, like the truffle\n * ones.\n *\n * @deprecated\n */\nasync function glob(pattern, options = {}) {\n    const files = await (await Promise.resolve().then(() => __importStar(__webpack_require__(/*! tinyglobby */ \"(ssr)/./node_modules/tinyglobby/dist/index.js\")))).glob([pattern], options);\n    return files.map(path.normalize);\n}\nexports.glob = glob;\n/**\n * @deprecated\n * @see glob\n */\nfunction globSync(pattern, options = {}) {\n    const files = (__webpack_require__(/*! tinyglobby */ \"(ssr)/./node_modules/tinyglobby/dist/index.js\").globSync)([pattern], options);\n    return files.map(path.normalize);\n}\nexports.globSync = globSync;\n//# sourceMappingURL=glob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2dsb2IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixHQUFHLFlBQVk7QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsa0JBQU07QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHlFQUF5RSxtQkFBTyxDQUFDLGlFQUFZO0FBQzdGO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsa0JBQWtCLGlHQUE4QjtBQUNoRDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL3V0aWwvZ2xvYi5qcz8yODBiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdsb2JTeW5jID0gZXhwb3J0cy5nbG9iID0gdm9pZCAwO1xuY29uc3QgcGF0aCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicGF0aFwiKSk7XG4vKipcbiAqIERPIE5PVCBVU0UgVEhJUyBGVU5DVElPTi4gSXQncyBTTE9XIGFuZCBpdHMgc2VtYW50aWNzIGFyZSBvcHRpbWl6ZWQgZm9yXG4gKiB1c2VyLWZhY2luZyBDTEkgZ2xvYnMsIG5vdCB0cmF2ZXJzaW5nIHRoZSBGUy5cbiAqXG4gKiBJdCdzIG5vdCByZW1vdmVkIGJlY2F1c2UgdW5mb3J0dW5hdGVseSBzb21lIHBsdWdpbnMgdXNlZCBpdCwgbGlrZSB0aGUgdHJ1ZmZsZVxuICogb25lcy5cbiAqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5hc3luYyBmdW5jdGlvbiBnbG9iKHBhdHRlcm4sIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgKGF3YWl0IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJ0aW55Z2xvYmJ5XCIpKSkpLmdsb2IoW3BhdHRlcm5dLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZmlsZXMubWFwKHBhdGgubm9ybWFsaXplKTtcbn1cbmV4cG9ydHMuZ2xvYiA9IGdsb2I7XG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBAc2VlIGdsb2JcbiAqL1xuZnVuY3Rpb24gZ2xvYlN5bmMocGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgZmlsZXMgPSByZXF1aXJlKFwidGlueWdsb2JieVwiKS5nbG9iU3luYyhbcGF0dGVybl0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBmaWxlcy5tYXAocGF0aC5ub3JtYWxpemUpO1xufVxuZXhwb3J0cy5nbG9iU3luYyA9IGdsb2JTeW5jO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/glob.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/global-dir.js":
/*!**********************************************************!*\
  !*** ./node_modules/hardhat/internal/util/global-dir.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getVarsFilePath = exports.writePromptedForHHVSCode = exports.hasPromptedForHHVSCode = exports.writeTelemetryConsent = exports.hasConsentedTelemetry = exports.getCompilersDir = exports.writeAnalyticsId = exports.readSecondLegacyAnalyticsId = exports.readFirstLegacyAnalyticsId = exports.readAnalyticsId = exports.getCacheDir = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst log = (0, debug_1.default)(\"hardhat:core:global-dir\");\nasync function generatePaths(packageName = \"hardhat\") {\n    const { default: envPaths } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! env-paths */ \"(ssr)/./node_modules/env-paths/index.js\")));\n    return envPaths(packageName);\n}\nfunction generatePathsSync(packageName = \"hardhat\") {\n    const envPaths = __webpack_require__(/*! env-paths */ \"(ssr)/./node_modules/env-paths/index.js\");\n    return envPaths(packageName);\n}\nfunction getConfigDirSync() {\n    const { config } = generatePathsSync();\n    fs_extra_1.default.ensureDirSync(config);\n    return config;\n}\nasync function getDataDir(packageName) {\n    const { data } = await generatePaths(packageName);\n    await fs_extra_1.default.ensureDir(data);\n    return data;\n}\nasync function getCacheDir() {\n    const { cache } = await generatePaths();\n    await fs_extra_1.default.ensureDir(cache);\n    return cache;\n}\nexports.getCacheDir = getCacheDir;\nasync function readAnalyticsId() {\n    const globalDataDir = await getDataDir();\n    const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n    return readId(idFile);\n}\nexports.readAnalyticsId = readAnalyticsId;\n/**\n * This is the first way that the analytics id was saved.\n */\nfunction readFirstLegacyAnalyticsId() {\n    const oldIdFile = path_1.default.join(os_1.default.homedir(), \".buidler\", \"config.json\");\n    return readId(oldIdFile);\n}\nexports.readFirstLegacyAnalyticsId = readFirstLegacyAnalyticsId;\n/**\n * This is the same way the analytics id is saved now, but using buidler as the\n * name of the project for env-paths\n */\nasync function readSecondLegacyAnalyticsId() {\n    const globalDataDir = await getDataDir(\"buidler\");\n    const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n    return readId(idFile);\n}\nexports.readSecondLegacyAnalyticsId = readSecondLegacyAnalyticsId;\nasync function readId(idFile) {\n    log(`Looking up Client Id at ${idFile}`);\n    let clientId;\n    try {\n        const data = await fs_extra_1.default.readJSON(idFile, { encoding: \"utf8\" });\n        clientId = data.analytics.clientId;\n    }\n    catch (error) {\n        return undefined;\n    }\n    log(`Client Id found: ${clientId}`);\n    return clientId;\n}\nasync function writeAnalyticsId(clientId) {\n    const globalDataDir = await getDataDir();\n    const idFile = path_1.default.join(globalDataDir, \"analytics.json\");\n    await fs_extra_1.default.writeJSON(idFile, {\n        analytics: {\n            clientId,\n        },\n    }, { encoding: \"utf-8\", spaces: 2 });\n    log(`Stored clientId ${clientId}`);\n}\nexports.writeAnalyticsId = writeAnalyticsId;\nasync function getCompilersDir() {\n    const cache = await getCacheDir();\n    // Note: we introduce `-v2` to invalidate all the previous compilers at once\n    const compilersCache = path_1.default.join(cache, \"compilers-v2\");\n    await fs_extra_1.default.ensureDir(compilersCache);\n    return compilersCache;\n}\nexports.getCompilersDir = getCompilersDir;\n/**\n * Checks if the user has given (or refused) consent for telemetry.\n *\n * Returns undefined if it can't be determined.\n */\nfunction hasConsentedTelemetry() {\n    const configDir = getConfigDirSync();\n    const telemetryConsentPath = path_1.default.join(configDir, \"telemetry-consent.json\");\n    const fileExists = fs_extra_1.default.pathExistsSync(telemetryConsentPath);\n    if (!fileExists) {\n        return undefined;\n    }\n    const { consent } = fs_extra_1.default.readJSONSync(telemetryConsentPath);\n    return consent;\n}\nexports.hasConsentedTelemetry = hasConsentedTelemetry;\nfunction writeTelemetryConsent(consent) {\n    const configDir = getConfigDirSync();\n    const telemetryConsentPath = path_1.default.join(configDir, \"telemetry-consent.json\");\n    fs_extra_1.default.writeJSONSync(telemetryConsentPath, { consent }, { spaces: 2 });\n}\nexports.writeTelemetryConsent = writeTelemetryConsent;\n/**\n * Checks if we have already prompted the user to install the Hardhat for VSCode extension.\n */\nfunction hasPromptedForHHVSCode() {\n    const configDir = getConfigDirSync();\n    const extensionPromptedPath = path_1.default.join(configDir, \"extension-prompt.json\");\n    const fileExists = fs_extra_1.default.pathExistsSync(extensionPromptedPath);\n    return fileExists;\n}\nexports.hasPromptedForHHVSCode = hasPromptedForHHVSCode;\nfunction writePromptedForHHVSCode() {\n    const configDir = getConfigDirSync();\n    const extensionPromptedPath = path_1.default.join(configDir, \"extension-prompt.json\");\n    fs_extra_1.default.writeFileSync(extensionPromptedPath, \"{}\");\n}\nexports.writePromptedForHHVSCode = writePromptedForHHVSCode;\nfunction getVarsFilePath() {\n    return path_1.default.join(getConfigDirSync(), \"vars.json\");\n}\nexports.getVarsFilePath = getVarsFilePath;\n//# sourceMappingURL=global-dir.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/global-dir.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/hardforks.js":
/*!*********************************************************!*\
  !*** ./node_modules/hardhat/internal/util/hardforks.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.selectHardfork = exports.hardforkGte = exports.getHardforkName = exports.HardforkName = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_2 = __webpack_require__(/*! ../core/providers/errors */ \"(ssr)/./node_modules/hardhat/internal/core/providers/errors.js\");\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\nvar HardforkName;\n(function (HardforkName) {\n    HardforkName[\"FRONTIER\"] = \"chainstart\";\n    HardforkName[\"HOMESTEAD\"] = \"homestead\";\n    HardforkName[\"DAO\"] = \"dao\";\n    HardforkName[\"TANGERINE_WHISTLE\"] = \"tangerineWhistle\";\n    HardforkName[\"SPURIOUS_DRAGON\"] = \"spuriousDragon\";\n    HardforkName[\"BYZANTIUM\"] = \"byzantium\";\n    HardforkName[\"CONSTANTINOPLE\"] = \"constantinople\";\n    HardforkName[\"PETERSBURG\"] = \"petersburg\";\n    HardforkName[\"ISTANBUL\"] = \"istanbul\";\n    HardforkName[\"MUIR_GLACIER\"] = \"muirGlacier\";\n    HardforkName[\"BERLIN\"] = \"berlin\";\n    HardforkName[\"LONDON\"] = \"london\";\n    HardforkName[\"ARROW_GLACIER\"] = \"arrowGlacier\";\n    HardforkName[\"GRAY_GLACIER\"] = \"grayGlacier\";\n    HardforkName[\"MERGE\"] = \"merge\";\n    HardforkName[\"SHANGHAI\"] = \"shanghai\";\n    HardforkName[\"CANCUN\"] = \"cancun\";\n})(HardforkName = exports.HardforkName || (exports.HardforkName = {}));\nconst HARDFORKS_ORDER = [\n    HardforkName.FRONTIER,\n    HardforkName.HOMESTEAD,\n    HardforkName.DAO,\n    HardforkName.TANGERINE_WHISTLE,\n    HardforkName.SPURIOUS_DRAGON,\n    HardforkName.BYZANTIUM,\n    HardforkName.CONSTANTINOPLE,\n    HardforkName.PETERSBURG,\n    HardforkName.ISTANBUL,\n    HardforkName.MUIR_GLACIER,\n    HardforkName.BERLIN,\n    HardforkName.LONDON,\n    HardforkName.ARROW_GLACIER,\n    HardforkName.GRAY_GLACIER,\n    HardforkName.MERGE,\n    HardforkName.SHANGHAI,\n    HardforkName.CANCUN,\n];\nfunction getHardforkName(name) {\n    const hardforkName = Object.values(HardforkName)[Object.values(HardforkName).indexOf(name)];\n    (0, errors_1.assertHardhatInvariant)(hardforkName !== undefined, `Invalid harfork name ${name}`);\n    return hardforkName;\n}\nexports.getHardforkName = getHardforkName;\n/**\n * Check if `hardforkA` is greater than or equal to `hardforkB`,\n * that is, if it includes all its changes.\n */\nfunction hardforkGte(hardforkA, hardforkB) {\n    // This function should not load any ethereumjs library, as it's used during\n    // the Hardhat initialization, and that would make it too slow.\n    const indexA = HARDFORKS_ORDER.lastIndexOf(hardforkA);\n    const indexB = HARDFORKS_ORDER.lastIndexOf(hardforkB);\n    return indexA >= indexB;\n}\nexports.hardforkGte = hardforkGte;\nfunction selectHardfork(forkBlockNumber, currentHardfork, hardforkActivations, blockNumber) {\n    if (forkBlockNumber === undefined || blockNumber > forkBlockNumber) {\n        return currentHardfork;\n    }\n    if (hardforkActivations === undefined || hardforkActivations.size === 0) {\n        throw new errors_2.InternalError(`No known hardfork for execution on historical block ${blockNumber.toString()} (relative to fork block number ${forkBlockNumber}). The node was not configured with a hardfork activation history.  See http://hardhat.org/custom-hardfork-history`);\n    }\n    /** search this._hardforkActivations for the highest block number that\n     * isn't higher than blockNumber, and then return that found block number's\n     * associated hardfork name. */\n    const hardforkHistory = Array.from(hardforkActivations.entries());\n    const [hardfork, activationBlock] = hardforkHistory.reduce(([highestHardfork, highestBlock], [thisHardfork, thisBlock]) => thisBlock > highestBlock && thisBlock <= blockNumber\n        ? [thisHardfork, thisBlock]\n        : [highestHardfork, highestBlock]);\n    if (hardfork === undefined || blockNumber < activationBlock) {\n        throw new errors_2.InternalError(`Could not find a hardfork to run for block ${blockNumber.toString()}, after having looked for one in the hardfork activation history, which was: ${JSON.stringify(hardforkHistory)}. For more information, see https://hardhat.org/hardhat-network/reference/#config`);\n    }\n    if (!constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.includes(hardfork)) {\n        throw new errors_2.InternalError(`Tried to run a call or transaction in the context of a block whose hardfork is \"${hardfork}\", but Hardhat Network only supports the following hardforks: ${constants_1.HARDHAT_NETWORK_SUPPORTED_HARDFORKS.join(\", \")}`);\n    }\n    return hardfork;\n}\nexports.selectHardfork = selectHardfork;\n//# sourceMappingURL=hardforks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2hhcmRmb3Jrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxtQkFBbUIsR0FBRyx1QkFBdUIsR0FBRyxvQkFBb0I7QUFDN0Ysb0JBQW9CLG1CQUFPLENBQUMsd0VBQWM7QUFDMUMsaUJBQWlCLG1CQUFPLENBQUMsNEVBQWdCO0FBQ3pDLGlCQUFpQixtQkFBTyxDQUFDLGdHQUEwQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEMsb0JBQW9CLEtBQUs7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGLEtBQUs7QUFDbEc7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnR0FBZ0csd0JBQXdCLGlDQUFpQyxnQkFBZ0I7QUFDeks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLHVCQUF1QiwrRUFBK0UsZ0NBQWdDO0FBQzdOO0FBQ0E7QUFDQSw0SEFBNEgsU0FBUyxnRUFBZ0UsMkRBQTJEO0FBQ2hRO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2hhcmRmb3Jrcy5qcz9lNmY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZWxlY3RIYXJkZm9yayA9IGV4cG9ydHMuaGFyZGZvcmtHdGUgPSBleHBvcnRzLmdldEhhcmRmb3JrTmFtZSA9IGV4cG9ydHMuSGFyZGZvcmtOYW1lID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vY29yZS9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfMiA9IHJlcXVpcmUoXCIuLi9jb3JlL3Byb3ZpZGVycy9lcnJvcnNcIik7XG4vKiBlc2xpbnQtZGlzYWJsZSBAbm9taWNmb3VuZGF0aW9uL2hhcmRoYXQtaW50ZXJuYWwtcnVsZXMvb25seS1oYXJkaGF0LWVycm9yICovXG52YXIgSGFyZGZvcmtOYW1lO1xuKGZ1bmN0aW9uIChIYXJkZm9ya05hbWUpIHtcbiAgICBIYXJkZm9ya05hbWVbXCJGUk9OVElFUlwiXSA9IFwiY2hhaW5zdGFydFwiO1xuICAgIEhhcmRmb3JrTmFtZVtcIkhPTUVTVEVBRFwiXSA9IFwiaG9tZXN0ZWFkXCI7XG4gICAgSGFyZGZvcmtOYW1lW1wiREFPXCJdID0gXCJkYW9cIjtcbiAgICBIYXJkZm9ya05hbWVbXCJUQU5HRVJJTkVfV0hJU1RMRVwiXSA9IFwidGFuZ2VyaW5lV2hpc3RsZVwiO1xuICAgIEhhcmRmb3JrTmFtZVtcIlNQVVJJT1VTX0RSQUdPTlwiXSA9IFwic3B1cmlvdXNEcmFnb25cIjtcbiAgICBIYXJkZm9ya05hbWVbXCJCWVpBTlRJVU1cIl0gPSBcImJ5emFudGl1bVwiO1xuICAgIEhhcmRmb3JrTmFtZVtcIkNPTlNUQU5USU5PUExFXCJdID0gXCJjb25zdGFudGlub3BsZVwiO1xuICAgIEhhcmRmb3JrTmFtZVtcIlBFVEVSU0JVUkdcIl0gPSBcInBldGVyc2J1cmdcIjtcbiAgICBIYXJkZm9ya05hbWVbXCJJU1RBTkJVTFwiXSA9IFwiaXN0YW5idWxcIjtcbiAgICBIYXJkZm9ya05hbWVbXCJNVUlSX0dMQUNJRVJcIl0gPSBcIm11aXJHbGFjaWVyXCI7XG4gICAgSGFyZGZvcmtOYW1lW1wiQkVSTElOXCJdID0gXCJiZXJsaW5cIjtcbiAgICBIYXJkZm9ya05hbWVbXCJMT05ET05cIl0gPSBcImxvbmRvblwiO1xuICAgIEhhcmRmb3JrTmFtZVtcIkFSUk9XX0dMQUNJRVJcIl0gPSBcImFycm93R2xhY2llclwiO1xuICAgIEhhcmRmb3JrTmFtZVtcIkdSQVlfR0xBQ0lFUlwiXSA9IFwiZ3JheUdsYWNpZXJcIjtcbiAgICBIYXJkZm9ya05hbWVbXCJNRVJHRVwiXSA9IFwibWVyZ2VcIjtcbiAgICBIYXJkZm9ya05hbWVbXCJTSEFOR0hBSVwiXSA9IFwic2hhbmdoYWlcIjtcbiAgICBIYXJkZm9ya05hbWVbXCJDQU5DVU5cIl0gPSBcImNhbmN1blwiO1xufSkoSGFyZGZvcmtOYW1lID0gZXhwb3J0cy5IYXJkZm9ya05hbWUgfHwgKGV4cG9ydHMuSGFyZGZvcmtOYW1lID0ge30pKTtcbmNvbnN0IEhBUkRGT1JLU19PUkRFUiA9IFtcbiAgICBIYXJkZm9ya05hbWUuRlJPTlRJRVIsXG4gICAgSGFyZGZvcmtOYW1lLkhPTUVTVEVBRCxcbiAgICBIYXJkZm9ya05hbWUuREFPLFxuICAgIEhhcmRmb3JrTmFtZS5UQU5HRVJJTkVfV0hJU1RMRSxcbiAgICBIYXJkZm9ya05hbWUuU1BVUklPVVNfRFJBR09OLFxuICAgIEhhcmRmb3JrTmFtZS5CWVpBTlRJVU0sXG4gICAgSGFyZGZvcmtOYW1lLkNPTlNUQU5USU5PUExFLFxuICAgIEhhcmRmb3JrTmFtZS5QRVRFUlNCVVJHLFxuICAgIEhhcmRmb3JrTmFtZS5JU1RBTkJVTCxcbiAgICBIYXJkZm9ya05hbWUuTVVJUl9HTEFDSUVSLFxuICAgIEhhcmRmb3JrTmFtZS5CRVJMSU4sXG4gICAgSGFyZGZvcmtOYW1lLkxPTkRPTixcbiAgICBIYXJkZm9ya05hbWUuQVJST1dfR0xBQ0lFUixcbiAgICBIYXJkZm9ya05hbWUuR1JBWV9HTEFDSUVSLFxuICAgIEhhcmRmb3JrTmFtZS5NRVJHRSxcbiAgICBIYXJkZm9ya05hbWUuU0hBTkdIQUksXG4gICAgSGFyZGZvcmtOYW1lLkNBTkNVTixcbl07XG5mdW5jdGlvbiBnZXRIYXJkZm9ya05hbWUobmFtZSkge1xuICAgIGNvbnN0IGhhcmRmb3JrTmFtZSA9IE9iamVjdC52YWx1ZXMoSGFyZGZvcmtOYW1lKVtPYmplY3QudmFsdWVzKEhhcmRmb3JrTmFtZSkuaW5kZXhPZihuYW1lKV07XG4gICAgKDAsIGVycm9yc18xLmFzc2VydEhhcmRoYXRJbnZhcmlhbnQpKGhhcmRmb3JrTmFtZSAhPT0gdW5kZWZpbmVkLCBgSW52YWxpZCBoYXJmb3JrIG5hbWUgJHtuYW1lfWApO1xuICAgIHJldHVybiBoYXJkZm9ya05hbWU7XG59XG5leHBvcnRzLmdldEhhcmRmb3JrTmFtZSA9IGdldEhhcmRmb3JrTmFtZTtcbi8qKlxuICogQ2hlY2sgaWYgYGhhcmRmb3JrQWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBoYXJkZm9ya0JgLFxuICogdGhhdCBpcywgaWYgaXQgaW5jbHVkZXMgYWxsIGl0cyBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBoYXJkZm9ya0d0ZShoYXJkZm9ya0EsIGhhcmRmb3JrQikge1xuICAgIC8vIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG5vdCBsb2FkIGFueSBldGhlcmV1bWpzIGxpYnJhcnksIGFzIGl0J3MgdXNlZCBkdXJpbmdcbiAgICAvLyB0aGUgSGFyZGhhdCBpbml0aWFsaXphdGlvbiwgYW5kIHRoYXQgd291bGQgbWFrZSBpdCB0b28gc2xvdy5cbiAgICBjb25zdCBpbmRleEEgPSBIQVJERk9SS1NfT1JERVIubGFzdEluZGV4T2YoaGFyZGZvcmtBKTtcbiAgICBjb25zdCBpbmRleEIgPSBIQVJERk9SS1NfT1JERVIubGFzdEluZGV4T2YoaGFyZGZvcmtCKTtcbiAgICByZXR1cm4gaW5kZXhBID49IGluZGV4Qjtcbn1cbmV4cG9ydHMuaGFyZGZvcmtHdGUgPSBoYXJkZm9ya0d0ZTtcbmZ1bmN0aW9uIHNlbGVjdEhhcmRmb3JrKGZvcmtCbG9ja051bWJlciwgY3VycmVudEhhcmRmb3JrLCBoYXJkZm9ya0FjdGl2YXRpb25zLCBibG9ja051bWJlcikge1xuICAgIGlmIChmb3JrQmxvY2tOdW1iZXIgPT09IHVuZGVmaW5lZCB8fCBibG9ja051bWJlciA+IGZvcmtCbG9ja051bWJlcikge1xuICAgICAgICByZXR1cm4gY3VycmVudEhhcmRmb3JrO1xuICAgIH1cbiAgICBpZiAoaGFyZGZvcmtBY3RpdmF0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IGhhcmRmb3JrQWN0aXZhdGlvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzIuSW50ZXJuYWxFcnJvcihgTm8ga25vd24gaGFyZGZvcmsgZm9yIGV4ZWN1dGlvbiBvbiBoaXN0b3JpY2FsIGJsb2NrICR7YmxvY2tOdW1iZXIudG9TdHJpbmcoKX0gKHJlbGF0aXZlIHRvIGZvcmsgYmxvY2sgbnVtYmVyICR7Zm9ya0Jsb2NrTnVtYmVyfSkuIFRoZSBub2RlIHdhcyBub3QgY29uZmlndXJlZCB3aXRoIGEgaGFyZGZvcmsgYWN0aXZhdGlvbiBoaXN0b3J5LiAgU2VlIGh0dHA6Ly9oYXJkaGF0Lm9yZy9jdXN0b20taGFyZGZvcmstaGlzdG9yeWApO1xuICAgIH1cbiAgICAvKiogc2VhcmNoIHRoaXMuX2hhcmRmb3JrQWN0aXZhdGlvbnMgZm9yIHRoZSBoaWdoZXN0IGJsb2NrIG51bWJlciB0aGF0XG4gICAgICogaXNuJ3QgaGlnaGVyIHRoYW4gYmxvY2tOdW1iZXIsIGFuZCB0aGVuIHJldHVybiB0aGF0IGZvdW5kIGJsb2NrIG51bWJlcidzXG4gICAgICogYXNzb2NpYXRlZCBoYXJkZm9yayBuYW1lLiAqL1xuICAgIGNvbnN0IGhhcmRmb3JrSGlzdG9yeSA9IEFycmF5LmZyb20oaGFyZGZvcmtBY3RpdmF0aW9ucy5lbnRyaWVzKCkpO1xuICAgIGNvbnN0IFtoYXJkZm9yaywgYWN0aXZhdGlvbkJsb2NrXSA9IGhhcmRmb3JrSGlzdG9yeS5yZWR1Y2UoKFtoaWdoZXN0SGFyZGZvcmssIGhpZ2hlc3RCbG9ja10sIFt0aGlzSGFyZGZvcmssIHRoaXNCbG9ja10pID0+IHRoaXNCbG9jayA+IGhpZ2hlc3RCbG9jayAmJiB0aGlzQmxvY2sgPD0gYmxvY2tOdW1iZXJcbiAgICAgICAgPyBbdGhpc0hhcmRmb3JrLCB0aGlzQmxvY2tdXG4gICAgICAgIDogW2hpZ2hlc3RIYXJkZm9yaywgaGlnaGVzdEJsb2NrXSk7XG4gICAgaWYgKGhhcmRmb3JrID09PSB1bmRlZmluZWQgfHwgYmxvY2tOdW1iZXIgPCBhY3RpdmF0aW9uQmxvY2spIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18yLkludGVybmFsRXJyb3IoYENvdWxkIG5vdCBmaW5kIGEgaGFyZGZvcmsgdG8gcnVuIGZvciBibG9jayAke2Jsb2NrTnVtYmVyLnRvU3RyaW5nKCl9LCBhZnRlciBoYXZpbmcgbG9va2VkIGZvciBvbmUgaW4gdGhlIGhhcmRmb3JrIGFjdGl2YXRpb24gaGlzdG9yeSwgd2hpY2ggd2FzOiAke0pTT04uc3RyaW5naWZ5KGhhcmRmb3JrSGlzdG9yeSl9LiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHBzOi8vaGFyZGhhdC5vcmcvaGFyZGhhdC1uZXR3b3JrL3JlZmVyZW5jZS8jY29uZmlnYCk7XG4gICAgfVxuICAgIGlmICghY29uc3RhbnRzXzEuSEFSREhBVF9ORVRXT1JLX1NVUFBPUlRFRF9IQVJERk9SS1MuaW5jbHVkZXMoaGFyZGZvcmspKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMi5JbnRlcm5hbEVycm9yKGBUcmllZCB0byBydW4gYSBjYWxsIG9yIHRyYW5zYWN0aW9uIGluIHRoZSBjb250ZXh0IG9mIGEgYmxvY2sgd2hvc2UgaGFyZGZvcmsgaXMgXCIke2hhcmRmb3JrfVwiLCBidXQgSGFyZGhhdCBOZXR3b3JrIG9ubHkgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBoYXJkZm9ya3M6ICR7Y29uc3RhbnRzXzEuSEFSREhBVF9ORVRXT1JLX1NVUFBPUlRFRF9IQVJERk9SS1Muam9pbihcIiwgXCIpfWApO1xuICAgIH1cbiAgICByZXR1cm4gaGFyZGZvcms7XG59XG5leHBvcnRzLnNlbGVjdEhhcmRmb3JrID0gc2VsZWN0SGFyZGZvcms7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXJkZm9ya3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/hardforks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/hash.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/internal/util/hash.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createNonCryptographicHashBasedIdentifier = void 0;\n/**\n * This function hashes its input with a NON cryptographic.\n *\n * This function is useful for creating unique identifiers based on some\n * input. You can be confident that there won't be any collision, as long\n * as the input is not generated by an attacker.\n *\n * The exact algorithm being used shouldn't matter.\n */\nfunction createNonCryptographicHashBasedIdentifier(input) {\n    const { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\n    return createHash(\"md5\").update(input).digest();\n}\nexports.createNonCryptographicHashBasedIdentifier = createNonCryptographicHashBasedIdentifier;\n//# sourceMappingURL=hash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2hhc2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhLEVBQUUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMzQztBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL3V0aWwvaGFzaC5qcz84ZDY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVOb25DcnlwdG9ncmFwaGljSGFzaEJhc2VkSWRlbnRpZmllciA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBoYXNoZXMgaXRzIGlucHV0IHdpdGggYSBOT04gY3J5cHRvZ3JhcGhpYy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgdW5pcXVlIGlkZW50aWZpZXJzIGJhc2VkIG9uIHNvbWVcbiAqIGlucHV0LiBZb3UgY2FuIGJlIGNvbmZpZGVudCB0aGF0IHRoZXJlIHdvbid0IGJlIGFueSBjb2xsaXNpb24sIGFzIGxvbmdcbiAqIGFzIHRoZSBpbnB1dCBpcyBub3QgZ2VuZXJhdGVkIGJ5IGFuIGF0dGFja2VyLlxuICpcbiAqIFRoZSBleGFjdCBhbGdvcml0aG0gYmVpbmcgdXNlZCBzaG91bGRuJ3QgbWF0dGVyLlxuICovXG5mdW5jdGlvbiBjcmVhdGVOb25DcnlwdG9ncmFwaGljSGFzaEJhc2VkSWRlbnRpZmllcihpbnB1dCkge1xuICAgIGNvbnN0IHsgY3JlYXRlSGFzaCB9ID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbiAgICByZXR1cm4gY3JlYXRlSGFzaChcIm1kNVwiKS51cGRhdGUoaW5wdXQpLmRpZ2VzdCgpO1xufVxuZXhwb3J0cy5jcmVhdGVOb25DcnlwdG9ncmFwaGljSGFzaEJhc2VkSWRlbnRpZmllciA9IGNyZWF0ZU5vbkNyeXB0b2dyYXBoaWNIYXNoQmFzZWRJZGVudGlmaWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/io-ts.js":
/*!*****************************************************!*\
  !*** ./node_modules/hardhat/internal/util/io-ts.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.nullable = exports.optional = exports.optionalOrNullable = void 0;\nconst t = __importStar(__webpack_require__(/*! io-ts */ \"(ssr)/./node_modules/io-ts/es6/index.js\"));\nfunction optionalOrNullable(codec, name = `${codec.name} | undefined`) {\n    return new t.Type(name, (u) => u === undefined || codec.is(u), (i, c) => {\n        if (i === undefined || i === null) {\n            return t.success(undefined);\n        }\n        return codec.validate(i, c);\n    }, (a) => {\n        if (a === undefined) {\n            return undefined;\n        }\n        return codec.encode(a);\n    });\n}\nexports.optionalOrNullable = optionalOrNullable;\nfunction optional(codec, name = `${codec.name} | undefined`) {\n    return new t.Type(name, (u) => u === undefined || codec.is(u), (u, c) => (u === undefined ? t.success(undefined) : codec.validate(u, c)), (a) => (a === undefined ? undefined : codec.encode(a)));\n}\nexports.optional = optional;\nfunction nullable(codec, name = `${codec.name} | null`) {\n    return new t.Type(name, (u) => u === null || codec.is(u), (u, c) => (u === null ? t.success(null) : codec.validate(u, c)), (a) => (a === null ? null : codec.encode(a)));\n}\nexports.nullable = nullable;\n//# sourceMappingURL=io-ts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2lvLXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsR0FBRyxnQkFBZ0IsR0FBRywwQkFBMEI7QUFDaEUsdUJBQXVCLG1CQUFPLENBQUMsc0RBQU87QUFDdEMsNkNBQTZDLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBCQUEwQjtBQUMxQixtQ0FBbUMsWUFBWTtBQUMvQztBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1DQUFtQyxZQUFZO0FBQy9DO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC9pby10cy5qcz84YmRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm51bGxhYmxlID0gZXhwb3J0cy5vcHRpb25hbCA9IGV4cG9ydHMub3B0aW9uYWxPck51bGxhYmxlID0gdm9pZCAwO1xuY29uc3QgdCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiaW8tdHNcIikpO1xuZnVuY3Rpb24gb3B0aW9uYWxPck51bGxhYmxlKGNvZGVjLCBuYW1lID0gYCR7Y29kZWMubmFtZX0gfCB1bmRlZmluZWRgKSB7XG4gICAgcmV0dXJuIG5ldyB0LlR5cGUobmFtZSwgKHUpID0+IHUgPT09IHVuZGVmaW5lZCB8fCBjb2RlYy5pcyh1KSwgKGksIGMpID0+IHtcbiAgICAgICAgaWYgKGkgPT09IHVuZGVmaW5lZCB8fCBpID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5zdWNjZXNzKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvZGVjLnZhbGlkYXRlKGksIGMpO1xuICAgIH0sIChhKSA9PiB7XG4gICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvZGVjLmVuY29kZShhKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMub3B0aW9uYWxPck51bGxhYmxlID0gb3B0aW9uYWxPck51bGxhYmxlO1xuZnVuY3Rpb24gb3B0aW9uYWwoY29kZWMsIG5hbWUgPSBgJHtjb2RlYy5uYW1lfSB8IHVuZGVmaW5lZGApIHtcbiAgICByZXR1cm4gbmV3IHQuVHlwZShuYW1lLCAodSkgPT4gdSA9PT0gdW5kZWZpbmVkIHx8IGNvZGVjLmlzKHUpLCAodSwgYykgPT4gKHUgPT09IHVuZGVmaW5lZCA/IHQuc3VjY2Vzcyh1bmRlZmluZWQpIDogY29kZWMudmFsaWRhdGUodSwgYykpLCAoYSkgPT4gKGEgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGNvZGVjLmVuY29kZShhKSkpO1xufVxuZXhwb3J0cy5vcHRpb25hbCA9IG9wdGlvbmFsO1xuZnVuY3Rpb24gbnVsbGFibGUoY29kZWMsIG5hbWUgPSBgJHtjb2RlYy5uYW1lfSB8IG51bGxgKSB7XG4gICAgcmV0dXJuIG5ldyB0LlR5cGUobmFtZSwgKHUpID0+IHUgPT09IG51bGwgfHwgY29kZWMuaXModSksICh1LCBjKSA9PiAodSA9PT0gbnVsbCA/IHQuc3VjY2VzcyhudWxsKSA6IGNvZGVjLnZhbGlkYXRlKHUsIGMpKSwgKGEpID0+IChhID09PSBudWxsID8gbnVsbCA6IGNvZGVjLmVuY29kZShhKSkpO1xufVxuZXhwb3J0cy5udWxsYWJsZSA9IG51bGxhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW8tdHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/io-ts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/jsonrpc.js":
/*!*******************************************************!*\
  !*** ./node_modules/hardhat/internal/util/jsonrpc.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSuccessfulJsonResponse = exports.isValidJsonResponse = exports.isValidJsonRequest = exports.parseJsonResponse = void 0;\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nfunction parseJsonResponse(text) {\n    try {\n        const json = JSON.parse(text);\n        const responses = Array.isArray(json) ? json : [json];\n        for (const response of responses) {\n            if (!isValidJsonResponse(response)) {\n                // We are sending the proper error inside the catch part of the statement.\n                // We just need to raise anything here.\n                // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n                throw new Error();\n            }\n        }\n        return json;\n    }\n    catch {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.NETWORK.INVALID_JSON_RESPONSE, {\n            response: text,\n        });\n    }\n}\nexports.parseJsonResponse = parseJsonResponse;\nfunction isValidJsonRequest(payload) {\n    if (payload.jsonrpc !== \"2.0\") {\n        return false;\n    }\n    if (typeof payload.id !== \"number\" && typeof payload.id !== \"string\") {\n        return false;\n    }\n    if (typeof payload.method !== \"string\") {\n        return false;\n    }\n    if (payload.params !== undefined && !Array.isArray(payload.params)) {\n        return false;\n    }\n    return true;\n}\nexports.isValidJsonRequest = isValidJsonRequest;\nfunction isValidJsonResponse(payload) {\n    if (payload.jsonrpc !== \"2.0\") {\n        return false;\n    }\n    if (typeof payload.id !== \"number\" &&\n        typeof payload.id !== \"string\" &&\n        payload.id !== null) {\n        return false;\n    }\n    if (payload.id === null && payload.error === undefined) {\n        return false;\n    }\n    if (payload.result === undefined && payload.error === undefined) {\n        return false;\n    }\n    if (payload.error !== undefined) {\n        if (typeof payload.error.code !== \"number\") {\n            return false;\n        }\n        if (typeof payload.error.message !== \"string\") {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isValidJsonResponse = isValidJsonResponse;\nfunction isSuccessfulJsonResponse(payload) {\n    return \"result\" in payload;\n}\nexports.isSuccessfulJsonResponse = isSuccessfulJsonResponse;\n//# sourceMappingURL=jsonrpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2pzb25ycGMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsMkJBQTJCLEdBQUcsMEJBQTBCLEdBQUcseUJBQXlCO0FBQ3ZILGlCQUFpQixtQkFBTyxDQUFDLDRFQUFnQjtBQUN6QyxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBcUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC9qc29ucnBjLmpzP2JlODkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzU3VjY2Vzc2Z1bEpzb25SZXNwb25zZSA9IGV4cG9ydHMuaXNWYWxpZEpzb25SZXNwb25zZSA9IGV4cG9ydHMuaXNWYWxpZEpzb25SZXF1ZXN0ID0gZXhwb3J0cy5wYXJzZUpzb25SZXNwb25zZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2NvcmUvZXJyb3JzXCIpO1xuY29uc3QgZXJyb3JzX2xpc3RfMSA9IHJlcXVpcmUoXCIuLi9jb3JlL2Vycm9ycy1saXN0XCIpO1xuZnVuY3Rpb24gcGFyc2VKc29uUmVzcG9uc2UodGV4dCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHRleHQpO1xuICAgICAgICBjb25zdCByZXNwb25zZXMgPSBBcnJheS5pc0FycmF5KGpzb24pID8ganNvbiA6IFtqc29uXTtcbiAgICAgICAgZm9yIChjb25zdCByZXNwb25zZSBvZiByZXNwb25zZXMpIHtcbiAgICAgICAgICAgIGlmICghaXNWYWxpZEpzb25SZXNwb25zZShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgc2VuZGluZyB0aGUgcHJvcGVyIGVycm9yIGluc2lkZSB0aGUgY2F0Y2ggcGFydCBvZiB0aGUgc3RhdGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFdlIGp1c3QgbmVlZCB0byByYWlzZSBhbnl0aGluZyBoZXJlLlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAbm9taWNmb3VuZGF0aW9uL2hhcmRoYXQtaW50ZXJuYWwtcnVsZXMvb25seS1oYXJkaGF0LWVycm9yXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLkhhcmRoYXRFcnJvcihlcnJvcnNfbGlzdF8xLkVSUk9SUy5ORVRXT1JLLklOVkFMSURfSlNPTl9SRVNQT05TRSwge1xuICAgICAgICAgICAgcmVzcG9uc2U6IHRleHQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMucGFyc2VKc29uUmVzcG9uc2UgPSBwYXJzZUpzb25SZXNwb25zZTtcbmZ1bmN0aW9uIGlzVmFsaWRKc29uUmVxdWVzdChwYXlsb2FkKSB7XG4gICAgaWYgKHBheWxvYWQuanNvbnJwYyAhPT0gXCIyLjBcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5pZCAhPT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgcGF5bG9hZC5pZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5tZXRob2QgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGF5bG9hZC5wYXJhbXMgIT09IHVuZGVmaW5lZCAmJiAhQXJyYXkuaXNBcnJheShwYXlsb2FkLnBhcmFtcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuaXNWYWxpZEpzb25SZXF1ZXN0ID0gaXNWYWxpZEpzb25SZXF1ZXN0O1xuZnVuY3Rpb24gaXNWYWxpZEpzb25SZXNwb25zZShwYXlsb2FkKSB7XG4gICAgaWYgKHBheWxvYWQuanNvbnJwYyAhPT0gXCIyLjBcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5pZCAhPT0gXCJudW1iZXJcIiAmJlxuICAgICAgICB0eXBlb2YgcGF5bG9hZC5pZCAhPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICBwYXlsb2FkLmlkICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBheWxvYWQuaWQgPT09IG51bGwgJiYgcGF5bG9hZC5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBheWxvYWQucmVzdWx0ID09PSB1bmRlZmluZWQgJiYgcGF5bG9hZC5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBheWxvYWQuZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHBheWxvYWQuZXJyb3IuY29kZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5lcnJvci5tZXNzYWdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzVmFsaWRKc29uUmVzcG9uc2UgPSBpc1ZhbGlkSnNvblJlc3BvbnNlO1xuZnVuY3Rpb24gaXNTdWNjZXNzZnVsSnNvblJlc3BvbnNlKHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJyZXN1bHRcIiBpbiBwYXlsb2FkO1xufVxuZXhwb3J0cy5pc1N1Y2Nlc3NmdWxKc29uUmVzcG9uc2UgPSBpc1N1Y2Nlc3NmdWxKc29uUmVzcG9uc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29ucnBjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/jsonrpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/keccak.js":
/*!******************************************************!*\
  !*** ./node_modules/hardhat/internal/util/keccak.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.keccak256 = void 0;\nconst keccak_1 = __importDefault(__webpack_require__(/*! keccak */ \"(ssr)/./node_modules/keccak/index.js\"));\nfunction keccak256(data) {\n    return (0, keccak_1.default)(\"keccak256\").update(Buffer.from(data)).digest();\n}\nexports.keccak256 = keccak256;\n//# sourceMappingURL=keccak.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2tlY2Nhay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQixpQ0FBaUMsbUJBQU8sQ0FBQyxvREFBUTtBQUNqRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC9rZWNjYWsuanM/ZGExZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMua2VjY2FrMjU2ID0gdm9pZCAwO1xuY29uc3Qga2VjY2FrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImtlY2Nha1wiKSk7XG5mdW5jdGlvbiBrZWNjYWsyNTYoZGF0YSkge1xuICAgIHJldHVybiAoMCwga2VjY2FrXzEuZGVmYXVsdCkoXCJrZWNjYWsyNTZcIikudXBkYXRlKEJ1ZmZlci5mcm9tKGRhdGEpKS5kaWdlc3QoKTtcbn1cbmV4cG9ydHMua2VjY2FrMjU2ID0ga2VjY2FrMjU2O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VjY2FrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/keccak.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/keys-derivation.js":
/*!***************************************************************!*\
  !*** ./node_modules/hardhat/internal/util/keys-derivation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deriveKeyFromMnemonicAndPath = void 0;\nfunction deriveKeyFromMnemonicAndPath(mnemonic, hdPath, passphrase) {\n    const { mnemonicToSeedSync, } = __webpack_require__(/*! ethereum-cryptography/bip39 */ \"(ssr)/./node_modules/hardhat/node_modules/ethereum-cryptography/bip39/index.js\");\n    // NOTE: If mnemonic has space or newline at the beginning or end, it will be trimmed.\n    // This is because mnemonic containing them may generate different private keys.\n    const trimmedMnemonic = mnemonic.trim();\n    const seed = mnemonicToSeedSync(trimmedMnemonic, passphrase);\n    const { HDKey, } = __webpack_require__(/*! ethereum-cryptography/hdkey */ \"(ssr)/./node_modules/hardhat/node_modules/ethereum-cryptography/hdkey.js\");\n    const masterKey = HDKey.fromMasterSeed(seed);\n    const derived = masterKey.derive(hdPath);\n    return derived.privateKey === null\n        ? undefined\n        : Buffer.from(derived.privateKey);\n}\nexports.deriveKeyFromMnemonicAndPath = deriveKeyFromMnemonicAndPath;\n//# sourceMappingURL=keys-derivation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2tleXMtZGVyaXZhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0M7QUFDcEM7QUFDQSxZQUFZLHNCQUFzQixFQUFFLG1CQUFPLENBQUMsbUhBQTZCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTLEVBQUUsbUJBQU8sQ0FBQyw2R0FBNkI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL3V0aWwva2V5cy1kZXJpdmF0aW9uLmpzPzU2YzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlcml2ZUtleUZyb21NbmVtb25pY0FuZFBhdGggPSB2b2lkIDA7XG5mdW5jdGlvbiBkZXJpdmVLZXlGcm9tTW5lbW9uaWNBbmRQYXRoKG1uZW1vbmljLCBoZFBhdGgsIHBhc3NwaHJhc2UpIHtcbiAgICBjb25zdCB7IG1uZW1vbmljVG9TZWVkU3luYywgfSA9IHJlcXVpcmUoXCJldGhlcmV1bS1jcnlwdG9ncmFwaHkvYmlwMzlcIik7XG4gICAgLy8gTk9URTogSWYgbW5lbW9uaWMgaGFzIHNwYWNlIG9yIG5ld2xpbmUgYXQgdGhlIGJlZ2lubmluZyBvciBlbmQsIGl0IHdpbGwgYmUgdHJpbW1lZC5cbiAgICAvLyBUaGlzIGlzIGJlY2F1c2UgbW5lbW9uaWMgY29udGFpbmluZyB0aGVtIG1heSBnZW5lcmF0ZSBkaWZmZXJlbnQgcHJpdmF0ZSBrZXlzLlxuICAgIGNvbnN0IHRyaW1tZWRNbmVtb25pYyA9IG1uZW1vbmljLnRyaW0oKTtcbiAgICBjb25zdCBzZWVkID0gbW5lbW9uaWNUb1NlZWRTeW5jKHRyaW1tZWRNbmVtb25pYywgcGFzc3BocmFzZSk7XG4gICAgY29uc3QgeyBIREtleSwgfSA9IHJlcXVpcmUoXCJldGhlcmV1bS1jcnlwdG9ncmFwaHkvaGRrZXlcIik7XG4gICAgY29uc3QgbWFzdGVyS2V5ID0gSERLZXkuZnJvbU1hc3RlclNlZWQoc2VlZCk7XG4gICAgY29uc3QgZGVyaXZlZCA9IG1hc3RlcktleS5kZXJpdmUoaGRQYXRoKTtcbiAgICByZXR1cm4gZGVyaXZlZC5wcml2YXRlS2V5ID09PSBudWxsXG4gICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgIDogQnVmZmVyLmZyb20oZGVyaXZlZC5wcml2YXRlS2V5KTtcbn1cbmV4cG9ydHMuZGVyaXZlS2V5RnJvbU1uZW1vbmljQW5kUGF0aCA9IGRlcml2ZUtleUZyb21NbmVtb25pY0FuZFBhdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlzLWRlcml2YXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/keys-derivation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/lang.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/internal/util/lang.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mapValues = exports.fromEntries = void 0;\nfunction fromEntries(entries) {\n    return Object.assign({}, ...entries.map(([name, value]) => ({\n        [name]: value,\n    })));\n}\nexports.fromEntries = fromEntries;\nfunction mapValues(o, callback) {\n    const result = {};\n    for (const [key, value] of Object.entries(o)) {\n        result[key] = callback(value);\n    }\n    return result;\n}\nexports.mapValues = mapValues;\n//# sourceMappingURL=lang.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL2xhbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsbUJBQW1CO0FBQ3ZDO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0EsS0FBSztBQUNMO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L2ludGVybmFsL3V0aWwvbGFuZy5qcz8zNTQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXBWYWx1ZXMgPSBleHBvcnRzLmZyb21FbnRyaWVzID0gdm9pZCAwO1xuZnVuY3Rpb24gZnJvbUVudHJpZXMoZW50cmllcykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCAuLi5lbnRyaWVzLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4gKHtcbiAgICAgICAgW25hbWVdOiB2YWx1ZSxcbiAgICB9KSkpO1xufVxuZXhwb3J0cy5mcm9tRW50cmllcyA9IGZyb21FbnRyaWVzO1xuZnVuY3Rpb24gbWFwVmFsdWVzKG8sIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobykpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBjYWxsYmFjayh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/lang.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/lazy.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/internal/util/lazy.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.lazyFunction = exports.lazyObject = void 0;\nconst util_1 = __importDefault(__webpack_require__(/*! util */ \"util\"));\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\n/**\n * This module provides function to implement proxy-based object, functions, and\n * classes (they are functions). They receive an initializer function that it's\n * not used until someone interacts with the lazy element.\n *\n * This functions can also be used like a lazy `require`, creating a proxy that\n * doesn't require the module until needed.\n *\n * The disadvantage of using this technique is that the type information is\n * lost wrt `import`, as `require` returns an `any. If done with enough care,\n * this can be manually fixed.\n *\n * TypeScript doesn't emit `require` calls for modules that are imported only\n * because of their types. So if one uses lazyObject or lazyFunction along with\n * a normal ESM import you can pass the module's type to this function.\n *\n * An example of this can be:\n *\n *    import findUpT from \"find-up\";\n *    export const findUp = lazyFunction<typeof findUpT>(() => require(\"find-up\"));\n *\n * You can also use it with named exports:\n *\n *    import { EthT } from \"web3x/eth\";\n *    const Eth = lazyFunction<typeof EthT>(() => require(\"web3x/eth\").Eth);\n */\nfunction lazyObject(objectCreator) {\n    return createLazyProxy(objectCreator, (getRealTarget) => ({\n        [inspect](depth, options, inspectFn = util_1.default.inspect) {\n            const realTarget = getRealTarget();\n            const newOptions = { ...options, depth };\n            return inspectFn(realTarget, newOptions);\n        },\n    }), (object) => {\n        if (object instanceof Function) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.UNSUPPORTED_OPERATION, {\n                operation: \"Creating lazy functions or classes with lazyObject\",\n            });\n        }\n        if (typeof object !== \"object\" || object === null) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.UNSUPPORTED_OPERATION, {\n                operation: \"Using lazyObject with anything other than objects\",\n            });\n        }\n    });\n}\nexports.lazyObject = lazyObject;\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction lazyFunction(functionCreator) {\n    return createLazyProxy(functionCreator, (getRealTarget) => {\n        function dummyTarget() { }\n        dummyTarget[inspect] = function (depth, options, inspectFn = util_1.default.inspect) {\n            const realTarget = getRealTarget();\n            const newOptions = { ...options, depth };\n            return inspectFn(realTarget, newOptions);\n        };\n        return dummyTarget;\n    }, (object) => {\n        if (!(object instanceof Function)) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.UNSUPPORTED_OPERATION, {\n                operation: \"Using lazyFunction with anything other than functions or classes\",\n            });\n        }\n    });\n}\nexports.lazyFunction = lazyFunction;\nfunction createLazyProxy(targetCreator, dummyTargetCreator, validator) {\n    let realTarget;\n    const dummyTarget = dummyTargetCreator(getRealTarget);\n    function getRealTarget() {\n        if (realTarget === undefined) {\n            const target = targetCreator();\n            validator(target);\n            // We copy all properties. We won't use them, but help us avoid Proxy\n            // invariant violations\n            const properties = Object.getOwnPropertyNames(target);\n            for (const property of properties) {\n                const descriptor = Object.getOwnPropertyDescriptor(target, property);\n                Object.defineProperty(dummyTarget, property, descriptor);\n            }\n            Object.setPrototypeOf(dummyTarget, Object.getPrototypeOf(target));\n            // Using a null prototype seems to tirgger a V8 bug, so we forbid it\n            // See: https://github.com/nodejs/node/issues/29730\n            if (Object.getPrototypeOf(target) === null) {\n                throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.UNSUPPORTED_OPERATION, {\n                    operation: \"Using lazyFunction or lazyObject to construct objects/functions with prototype null\",\n                });\n            }\n            if (!Object.isExtensible(target)) {\n                Object.preventExtensions(dummyTarget);\n            }\n            realTarget = target;\n        }\n        return realTarget;\n    }\n    const handler = {\n        defineProperty(target, property, descriptor) {\n            Reflect.defineProperty(dummyTarget, property, descriptor);\n            return Reflect.defineProperty(getRealTarget(), property, descriptor);\n        },\n        deleteProperty(target, property) {\n            Reflect.deleteProperty(dummyTarget, property);\n            return Reflect.deleteProperty(getRealTarget(), property);\n        },\n        get(target, property, receiver) {\n            // We have this short-circuit logic here to avoid a cyclic require when\n            // loading Web3.js.\n            //\n            // If a lazy object is somehow accessed while its real target is being\n            // created, it would trigger an endless loop of recreation, which node\n            // detects and resolve to an empty object.\n            //\n            // This happens with Web3.js because we a lazyObject that loads it,\n            // and expose it as `global.web3`. This Web3.js file accesses\n            // `global.web3` when it's being loaded, triggering the loop we mentioned\n            // before: https://github.com/ethereum/web3.js/blob/8574bd3bf11a2e9cf4bcf8850cab13e1db56653f/packages/web3-core-requestmanager/src/givenProvider.js#L41\n            //\n            // We just return `undefined` in that case, to not enter into the loop.\n            //\n            // **SUPER IMPORTANT NOTE:** Removing this is very tempting, I know. This\n            // is a horrible hack. The most obvious approach for doing so is to\n            // remove the `global` elements that trigger this crazy behavior right\n            // before doing our `require(\"web3\")`, and restore them afterwards.\n            // **THIS IS NOT ENOUGH** Users, and libraries (!!!!), will have their own\n            // `require`s that we can't control and will trigger the same bug.\n            const stack = new Error().stack;\n            if (stack !== undefined &&\n                stack.includes(\"givenProvider.js\") &&\n                realTarget === undefined) {\n                return undefined;\n            }\n            return Reflect.get(getRealTarget(), property, receiver);\n        },\n        getOwnPropertyDescriptor(target, property) {\n            const descriptor = Reflect.getOwnPropertyDescriptor(getRealTarget(), property);\n            if (descriptor !== undefined) {\n                Object.defineProperty(dummyTarget, property, descriptor);\n            }\n            return descriptor;\n        },\n        getPrototypeOf(_target) {\n            return Reflect.getPrototypeOf(getRealTarget());\n        },\n        has(target, property) {\n            return Reflect.has(getRealTarget(), property);\n        },\n        isExtensible(_target) {\n            return Reflect.isExtensible(getRealTarget());\n        },\n        ownKeys(_target) {\n            return Reflect.ownKeys(getRealTarget());\n        },\n        preventExtensions(_target) {\n            Object.preventExtensions(dummyTarget);\n            return Reflect.preventExtensions(getRealTarget());\n        },\n        set(target, property, value, receiver) {\n            Reflect.set(dummyTarget, property, value, receiver);\n            return Reflect.set(getRealTarget(), property, value, receiver);\n        },\n        setPrototypeOf(target, prototype) {\n            Reflect.setPrototypeOf(dummyTarget, prototype);\n            return Reflect.setPrototypeOf(getRealTarget(), prototype);\n        },\n    };\n    if (dummyTarget instanceof Function) {\n        // If dummy target is a function, the actual target must be a function too.\n        handler.apply = (target, thisArg, argArray) => {\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            return Reflect.apply(getRealTarget(), thisArg, argArray);\n        };\n        handler.construct = (target, argArray, _newTarget) => {\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            return Reflect.construct(getRealTarget(), argArray);\n        };\n    }\n    return new Proxy(dummyTarget, handler);\n}\n//# sourceMappingURL=lazy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/lazy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/multi-process-mutex.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/internal/util/multi-process-mutex.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MultiProcessMutex = void 0;\n/* eslint-disable @nomicfoundation/hardhat-internal-rules/only-hardhat-error */\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst node_fs_1 = __importDefault(__webpack_require__(/*! node:fs */ \"node:fs\"));\nconst node_path_1 = __importDefault(__webpack_require__(/*! node:path */ \"node:path\"));\nconst node_os_1 = __importDefault(__webpack_require__(/*! node:os */ \"node:os\"));\n// Logic explanation: the fs.writeFile function, when used with the wx+ flag, performs an atomic operation to create a file.\n// If multiple processes try to create the same file simultaneously, only one will succeed.\n// This logic can be utilized to implement a mutex.\n// ATTENTION: in the current implementation, there's still a risk of two processes running simultaneously.\n// For example, if processA has locked the mutex and is running, processB will wait.\n// During this wait, processB continuously checks the elapsed time since the mutex lock file was created.\n// If an excessive amount of time has passed, processB will assume ownership of the mutex to avoid stale locks.\n// However, there's a possibility that processB might take ownership because the mutex creation file is outdated, even though processA is still running\n// For more info check the Nomic Notion page (internal link).\nconst log = (0, debug_1.default)(\"hardhat:util:multi-process-mutex\");\nconst DEFAULT_MAX_MUTEX_LIFESPAN_IN_MS = 60000;\nconst MUTEX_LOOP_WAITING_TIME_IN_MS = 100;\nclass MultiProcessMutex {\n    constructor(mutexName, maxMutexLifespanInMs) {\n        log(`Creating mutex with name '${mutexName}'`);\n        this._mutexFilePath = node_path_1.default.join(node_os_1.default.tmpdir(), `${mutexName}.txt`);\n        this._mutexLifespanInMs =\n            maxMutexLifespanInMs ?? DEFAULT_MAX_MUTEX_LIFESPAN_IN_MS;\n    }\n    async use(f) {\n        log(`Starting mutex process with mutex file '${this._mutexFilePath}'`);\n        while (true) {\n            if (await this._tryToAcquireMutex()) {\n                // Mutex has been acquired\n                return this._executeFunctionAndReleaseMutex(f);\n            }\n            // Mutex not acquired\n            if (this._isMutexFileTooOld()) {\n                // If the mutex file is too old, it likely indicates a stale lock, so the file should be removed\n                log(`Current mutex file is too old, removing it at path '${this._mutexFilePath}'`);\n                this._deleteMutexFile();\n            }\n            else {\n                // wait\n                await this._waitMs();\n            }\n        }\n    }\n    async _tryToAcquireMutex() {\n        try {\n            // Create a file only if it does not exist\n            node_fs_1.default.writeFileSync(this._mutexFilePath, \"\", { flag: \"wx+\" });\n            return true;\n        }\n        catch (error) {\n            if (error.code === \"EEXIST\") {\n                // File already exists, so the mutex is already acquired\n                return false;\n            }\n            throw error;\n        }\n    }\n    async _executeFunctionAndReleaseMutex(f) {\n        log(`Mutex acquired at path '${this._mutexFilePath}'`);\n        try {\n            const res = await f();\n            // Release the mutex\n            log(`Mutex released at path '${this._mutexFilePath}'`);\n            this._deleteMutexFile();\n            log(`Mutex released at path '${this._mutexFilePath}'`);\n            return res;\n        }\n        catch (error) {\n            // Catch any error to avoid stale locks.\n            // Remove the mutex file and re-throw the error\n            this._deleteMutexFile();\n            throw error;\n        }\n    }\n    _isMutexFileTooOld() {\n        let fileStat;\n        try {\n            fileStat = node_fs_1.default.statSync(this._mutexFilePath);\n        }\n        catch (error) {\n            if (error.code === \"ENOENT\") {\n                // The file might have been deleted by another process while this function was trying to access it.\n                return false;\n            }\n            throw error;\n        }\n        const now = new Date();\n        const fileDate = new Date(fileStat.ctime);\n        const diff = now.getTime() - fileDate.getTime();\n        return diff > this._mutexLifespanInMs;\n    }\n    _deleteMutexFile() {\n        try {\n            log(`Deleting mutex file at path '${this._mutexFilePath}'`);\n            node_fs_1.default.unlinkSync(this._mutexFilePath);\n        }\n        catch (error) {\n            if (error.code === \"ENOENT\") {\n                // The file might have been deleted by another process while this function was trying to access it.\n                return;\n            }\n            throw error;\n        }\n    }\n    async _waitMs() {\n        return new Promise((resolve) => setTimeout(resolve, MUTEX_LOOP_WAITING_TIME_IN_MS));\n    }\n}\nexports.MultiProcessMutex = MultiProcessMutex;\n//# sourceMappingURL=multi-process-mutex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/multi-process-mutex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/packageInfo.js":
/*!***********************************************************!*\
  !*** ./node_modules/hardhat/internal/util/packageInfo.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getProjectPackageJson = exports.getHardhatVersion = exports.getPackageJson = exports.getPackageName = exports.findClosestPackageJson = exports.getPackageRoot = exports.getPackageJsonPath = void 0;\nconst find_up_1 = __importDefault(__webpack_require__(/*! find-up */ \"(ssr)/./node_modules/find-up/index.js\"));\nconst fs_extra_1 = __importDefault(__webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/fs-extra/lib/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nfunction getPackageJsonPath() {\n    return findClosestPackageJson(__filename);\n}\nexports.getPackageJsonPath = getPackageJsonPath;\nfunction getPackageRoot() {\n    const packageJsonPath = getPackageJsonPath();\n    return path_1.default.dirname(packageJsonPath);\n}\nexports.getPackageRoot = getPackageRoot;\nfunction findClosestPackageJson(file) {\n    return find_up_1.default.sync(\"package.json\", { cwd: path_1.default.dirname(file) });\n}\nexports.findClosestPackageJson = findClosestPackageJson;\nasync function getPackageName(file) {\n    const packageJsonPath = findClosestPackageJson(file);\n    if (packageJsonPath !== undefined && packageJsonPath !== \"\") {\n        const packageJson = await fs_extra_1.default.readJSON(packageJsonPath);\n        return packageJson.name;\n    }\n    return \"\";\n}\nexports.getPackageName = getPackageName;\nasync function getPackageJson() {\n    const root = getPackageRoot();\n    return fs_extra_1.default.readJSON(path_1.default.join(root, \"package.json\"));\n}\nexports.getPackageJson = getPackageJson;\nfunction getHardhatVersion() {\n    const packageJsonPath = findClosestPackageJson(__filename);\n    (0, errors_1.assertHardhatInvariant)(packageJsonPath !== undefined, \"There should be a package.json in hardhat-core's root directory\");\n    const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n    return packageJson.version;\n}\nexports.getHardhatVersion = getHardhatVersion;\n/**\n * Return the contents of the package.json in the user's project\n */\nfunction getProjectPackageJson() {\n    const packageJsonPath = find_up_1.default.sync(\"package.json\");\n    (0, errors_1.assertHardhatInvariant)(packageJsonPath !== undefined, \"Expected a package.json file in the current directory or in an ancestor directory\");\n    return fs_extra_1.default.readJson(packageJsonPath);\n}\nexports.getProjectPackageJson = getProjectPackageJson;\n//# sourceMappingURL=packageInfo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL3BhY2thZ2VJbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLEdBQUcseUJBQXlCLEdBQUcsc0JBQXNCLEdBQUcsc0JBQXNCLEdBQUcsOEJBQThCLEdBQUcsc0JBQXNCLEdBQUcsMEJBQTBCO0FBQ2xNLGtDQUFrQyxtQkFBTyxDQUFDLHNEQUFTO0FBQ25ELG1DQUFtQyxtQkFBTyxDQUFDLDREQUFVO0FBQ3JELCtCQUErQixtQkFBTyxDQUFDLGtCQUFNO0FBQzdDLGlCQUFpQixtQkFBTyxDQUFDLDRFQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxvREFBb0QsbUNBQW1DO0FBQ3ZGO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC9wYWNrYWdlSW5mby5qcz9hNTFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRQcm9qZWN0UGFja2FnZUpzb24gPSBleHBvcnRzLmdldEhhcmRoYXRWZXJzaW9uID0gZXhwb3J0cy5nZXRQYWNrYWdlSnNvbiA9IGV4cG9ydHMuZ2V0UGFja2FnZU5hbWUgPSBleHBvcnRzLmZpbmRDbG9zZXN0UGFja2FnZUpzb24gPSBleHBvcnRzLmdldFBhY2thZ2VSb290ID0gZXhwb3J0cy5nZXRQYWNrYWdlSnNvblBhdGggPSB2b2lkIDA7XG5jb25zdCBmaW5kX3VwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZpbmQtdXBcIikpO1xuY29uc3QgZnNfZXh0cmFfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZnMtZXh0cmFcIikpO1xuY29uc3QgcGF0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2NvcmUvZXJyb3JzXCIpO1xuZnVuY3Rpb24gZ2V0UGFja2FnZUpzb25QYXRoKCkge1xuICAgIHJldHVybiBmaW5kQ2xvc2VzdFBhY2thZ2VKc29uKF9fZmlsZW5hbWUpO1xufVxuZXhwb3J0cy5nZXRQYWNrYWdlSnNvblBhdGggPSBnZXRQYWNrYWdlSnNvblBhdGg7XG5mdW5jdGlvbiBnZXRQYWNrYWdlUm9vdCgpIHtcbiAgICBjb25zdCBwYWNrYWdlSnNvblBhdGggPSBnZXRQYWNrYWdlSnNvblBhdGgoKTtcbiAgICByZXR1cm4gcGF0aF8xLmRlZmF1bHQuZGlybmFtZShwYWNrYWdlSnNvblBhdGgpO1xufVxuZXhwb3J0cy5nZXRQYWNrYWdlUm9vdCA9IGdldFBhY2thZ2VSb290O1xuZnVuY3Rpb24gZmluZENsb3Nlc3RQYWNrYWdlSnNvbihmaWxlKSB7XG4gICAgcmV0dXJuIGZpbmRfdXBfMS5kZWZhdWx0LnN5bmMoXCJwYWNrYWdlLmpzb25cIiwgeyBjd2Q6IHBhdGhfMS5kZWZhdWx0LmRpcm5hbWUoZmlsZSkgfSk7XG59XG5leHBvcnRzLmZpbmRDbG9zZXN0UGFja2FnZUpzb24gPSBmaW5kQ2xvc2VzdFBhY2thZ2VKc29uO1xuYXN5bmMgZnVuY3Rpb24gZ2V0UGFja2FnZU5hbWUoZmlsZSkge1xuICAgIGNvbnN0IHBhY2thZ2VKc29uUGF0aCA9IGZpbmRDbG9zZXN0UGFja2FnZUpzb24oZmlsZSk7XG4gICAgaWYgKHBhY2thZ2VKc29uUGF0aCAhPT0gdW5kZWZpbmVkICYmIHBhY2thZ2VKc29uUGF0aCAhPT0gXCJcIikge1xuICAgICAgICBjb25zdCBwYWNrYWdlSnNvbiA9IGF3YWl0IGZzX2V4dHJhXzEuZGVmYXVsdC5yZWFkSlNPTihwYWNrYWdlSnNvblBhdGgpO1xuICAgICAgICByZXR1cm4gcGFja2FnZUpzb24ubmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG59XG5leHBvcnRzLmdldFBhY2thZ2VOYW1lID0gZ2V0UGFja2FnZU5hbWU7XG5hc3luYyBmdW5jdGlvbiBnZXRQYWNrYWdlSnNvbigpIHtcbiAgICBjb25zdCByb290ID0gZ2V0UGFja2FnZVJvb3QoKTtcbiAgICByZXR1cm4gZnNfZXh0cmFfMS5kZWZhdWx0LnJlYWRKU09OKHBhdGhfMS5kZWZhdWx0LmpvaW4ocm9vdCwgXCJwYWNrYWdlLmpzb25cIikpO1xufVxuZXhwb3J0cy5nZXRQYWNrYWdlSnNvbiA9IGdldFBhY2thZ2VKc29uO1xuZnVuY3Rpb24gZ2V0SGFyZGhhdFZlcnNpb24oKSB7XG4gICAgY29uc3QgcGFja2FnZUpzb25QYXRoID0gZmluZENsb3Nlc3RQYWNrYWdlSnNvbihfX2ZpbGVuYW1lKTtcbiAgICAoMCwgZXJyb3JzXzEuYXNzZXJ0SGFyZGhhdEludmFyaWFudCkocGFja2FnZUpzb25QYXRoICE9PSB1bmRlZmluZWQsIFwiVGhlcmUgc2hvdWxkIGJlIGEgcGFja2FnZS5qc29uIGluIGhhcmRoYXQtY29yZSdzIHJvb3QgZGlyZWN0b3J5XCIpO1xuICAgIGNvbnN0IHBhY2thZ2VKc29uID0gZnNfZXh0cmFfMS5kZWZhdWx0LnJlYWRKc29uU3luYyhwYWNrYWdlSnNvblBhdGgpO1xuICAgIHJldHVybiBwYWNrYWdlSnNvbi52ZXJzaW9uO1xufVxuZXhwb3J0cy5nZXRIYXJkaGF0VmVyc2lvbiA9IGdldEhhcmRoYXRWZXJzaW9uO1xuLyoqXG4gKiBSZXR1cm4gdGhlIGNvbnRlbnRzIG9mIHRoZSBwYWNrYWdlLmpzb24gaW4gdGhlIHVzZXIncyBwcm9qZWN0XG4gKi9cbmZ1bmN0aW9uIGdldFByb2plY3RQYWNrYWdlSnNvbigpIHtcbiAgICBjb25zdCBwYWNrYWdlSnNvblBhdGggPSBmaW5kX3VwXzEuZGVmYXVsdC5zeW5jKFwicGFja2FnZS5qc29uXCIpO1xuICAgICgwLCBlcnJvcnNfMS5hc3NlcnRIYXJkaGF0SW52YXJpYW50KShwYWNrYWdlSnNvblBhdGggIT09IHVuZGVmaW5lZCwgXCJFeHBlY3RlZCBhIHBhY2thZ2UuanNvbiBmaWxlIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSBvciBpbiBhbiBhbmNlc3RvciBkaXJlY3RvcnlcIik7XG4gICAgcmV0dXJuIGZzX2V4dHJhXzEuZGVmYXVsdC5yZWFkSnNvbihwYWNrYWdlSnNvblBhdGgpO1xufVxuZXhwb3J0cy5nZXRQcm9qZWN0UGFja2FnZUpzb24gPSBnZXRQcm9qZWN0UGFja2FnZUpzb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWNrYWdlSW5mby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/platform.js":
/*!********************************************************!*\
  !*** ./node_modules/hardhat/internal/util/platform.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRequireCachedFiles = void 0;\nfunction getRequireCachedFiles() {\n    return Object.keys(__webpack_require__.c).filter((p) => !p.startsWith(\"internal\") && (p.endsWith(\".js\") || p.endsWith(\".ts\")));\n}\nexports.getRequireCachedFiles = getRequireCachedFiles;\n//# sourceMappingURL=platform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL3BsYXRmb3JtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QjtBQUNBLHVCQUF1QixxQkFBYTtBQUNwQztBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL3BsYXRmb3JtLmpzPzU2NTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFJlcXVpcmVDYWNoZWRGaWxlcyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldFJlcXVpcmVDYWNoZWRGaWxlcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocmVxdWlyZS5jYWNoZSkuZmlsdGVyKChwKSA9PiAhcC5zdGFydHNXaXRoKFwiaW50ZXJuYWxcIikgJiYgKHAuZW5kc1dpdGgoXCIuanNcIikgfHwgcC5lbmRzV2l0aChcIi50c1wiKSkpO1xufVxuZXhwb3J0cy5nZXRSZXF1aXJlQ2FjaGVkRmlsZXMgPSBnZXRSZXF1aXJlQ2FjaGVkRmlsZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGF0Zm9ybS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/platform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/proxy.js":
/*!*****************************************************!*\
  !*** ./node_modules/hardhat/internal/util/proxy.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shouldUseProxy = void 0;\nfunction shouldUseProxy(url) {\n    const { hostname } = new URL(url);\n    const noProxy = process.env.NO_PROXY;\n    if (hostname === \"localhost\" || hostname === \"127.0.0.1\" || noProxy === \"*\") {\n        return false;\n    }\n    if (noProxy !== undefined && noProxy !== \"\") {\n        const noProxyList = noProxy.split(\",\");\n        if (noProxyList.includes(hostname)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.shouldUseProxy = shouldUseProxy;\n//# sourceMappingURL=proxy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL3Byb3h5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QjtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC9wcm94eS5qcz8yOGYzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaG91bGRVc2VQcm94eSA9IHZvaWQgMDtcbmZ1bmN0aW9uIHNob3VsZFVzZVByb3h5KHVybCkge1xuICAgIGNvbnN0IHsgaG9zdG5hbWUgfSA9IG5ldyBVUkwodXJsKTtcbiAgICBjb25zdCBub1Byb3h5ID0gcHJvY2Vzcy5lbnYuTk9fUFJPWFk7XG4gICAgaWYgKGhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiIHx8IGhvc3RuYW1lID09PSBcIjEyNy4wLjAuMVwiIHx8IG5vUHJveHkgPT09IFwiKlwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vUHJveHkgIT09IHVuZGVmaW5lZCAmJiBub1Byb3h5ICE9PSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IG5vUHJveHlMaXN0ID0gbm9Qcm94eS5zcGxpdChcIixcIik7XG4gICAgICAgIGlmIChub1Byb3h5TGlzdC5pbmNsdWRlcyhob3N0bmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydHMuc2hvdWxkVXNlUHJveHkgPSBzaG91bGRVc2VQcm94eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3h5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/proxy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/scripts-runner.js":
/*!**************************************************************!*\
  !*** ./node_modules/hardhat/internal/util/scripts-runner.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.runScriptWithHardhat = exports.runScript = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst execution_mode_1 = __webpack_require__(/*! ../core/execution-mode */ \"(ssr)/./node_modules/hardhat/internal/core/execution-mode.js\");\nconst env_variables_1 = __webpack_require__(/*! ../core/params/env-variables */ \"(ssr)/./node_modules/hardhat/internal/core/params/env-variables.js\");\nconst log = (0, debug_1.default)(\"hardhat:core:scripts-runner\");\nasync function runScript(scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {\n    const { fork } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! child_process */ \"child_process\")));\n    return new Promise((resolve, reject) => {\n        const processExecArgv = withFixedInspectArg(process.execArgv);\n        const nodeArgs = [\n            ...processExecArgv,\n            ...getTsNodeArgsIfNeeded(scriptPath, extraEnvVars.HARDHAT_TYPECHECK === \"true\"),\n            ...extraNodeArgs,\n        ];\n        const envVars = { ...process.env, ...extraEnvVars };\n        const childProcess = fork(scriptPath, scriptArgs, {\n            stdio: \"inherit\",\n            execArgv: nodeArgs,\n            env: envVars,\n        });\n        childProcess.once(\"close\", (status) => {\n            log(`Script ${scriptPath} exited with status code ${status ?? \"null\"}`);\n            resolve(status);\n        });\n        childProcess.once(\"error\", reject);\n    });\n}\nexports.runScript = runScript;\nasync function runScriptWithHardhat(hardhatArguments, scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {\n    log(`Creating Hardhat subprocess to run ${scriptPath}`);\n    return runScript(scriptPath, scriptArgs, [\n        ...extraNodeArgs,\n        \"--require\",\n        path_1.default.join(__dirname, \"..\", \"..\", \"register\"),\n    ], {\n        ...(0, env_variables_1.getEnvVariablesMap)(hardhatArguments),\n        ...extraEnvVars,\n    });\n}\nexports.runScriptWithHardhat = runScriptWithHardhat;\n/**\n * Fix debugger \"inspect\" arg from process.argv, if present.\n *\n * When running this process with a debugger, a debugger port\n * is specified via the \"--inspect-brk=\" arg param in some IDEs/setups.\n *\n * This normally works, but if we do a fork afterwards, we'll get an error stating\n * that the port is already in use (since the fork would also use the same args,\n * therefore the same port number). To prevent this issue, we could replace the port number with\n * a different free one, or simply use the port-agnostic --inspect\" flag, and leave the debugger\n * port selection to the Node process itself, which will pick an empty AND valid one.\n *\n * This way, we can properly use the debugger for this process AND for the executed\n * script itself - even if it's compiled using ts-node.\n */\nfunction withFixedInspectArg(argv) {\n    const fixIfInspectArg = (arg) => {\n        if (arg.toLowerCase().includes(\"--inspect-brk=\")) {\n            return \"--inspect\";\n        }\n        return arg;\n    };\n    return argv.map(fixIfInspectArg);\n}\nfunction getTsNodeArgsIfNeeded(scriptPath, shouldTypecheck) {\n    if (process.execArgv.includes(\"ts-node/register\")) {\n        return [];\n    }\n    // if we are running the tests we only want to transpile, or these tests\n    // take forever\n    if ((0, execution_mode_1.isRunningHardhatCoreTests)()) {\n        return [\"--require\", \"ts-node/register/transpile-only\"];\n    }\n    // If the script we are going to run is .ts we need ts-node\n    if (/\\.tsx?$/i.test(scriptPath)) {\n        return [\n            \"--require\",\n            `ts-node/register${shouldTypecheck ? \"\" : \"/transpile-only\"}`,\n        ];\n    }\n    return [];\n}\n//# sourceMappingURL=scripts-runner.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/scripts-runner.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/strings.js":
/*!*******************************************************!*\
  !*** ./node_modules/hardhat/internal/util/strings.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.replaceAll = exports.pluralize = void 0;\n/**\n * Returns the plural form of a word.\n *\n * @param n The number of things to represent. This dictates whether to return\n * the singular or plural form of the word.\n * @param singular The singular form of the word.\n * @param plural An optional plural form of the word. If non is given, the\n * plural form is constructed by appending an \"s\" to the singular form.\n */\nfunction pluralize(n, singular, plural) {\n    if (n === 1) {\n        return singular;\n    }\n    if (plural !== undefined) {\n        return plural;\n    }\n    return `${singular}s`;\n}\nexports.pluralize = pluralize;\n/**\n * Replaces all the instances of [[toReplace]] by [[replacement]] in [[str]].\n */\nfunction replaceAll(str, toReplace, replacement) {\n    return str.split(toReplace).join(replacement);\n}\nexports.replaceAll = replaceAll;\n//# sourceMappingURL=strings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLEdBQUcsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL3N0cmluZ3MuanM/ZjMxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwbGFjZUFsbCA9IGV4cG9ydHMucGx1cmFsaXplID0gdm9pZCAwO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBwbHVyYWwgZm9ybSBvZiBhIHdvcmQuXG4gKlxuICogQHBhcmFtIG4gVGhlIG51bWJlciBvZiB0aGluZ3MgdG8gcmVwcmVzZW50LiBUaGlzIGRpY3RhdGVzIHdoZXRoZXIgdG8gcmV0dXJuXG4gKiB0aGUgc2luZ3VsYXIgb3IgcGx1cmFsIGZvcm0gb2YgdGhlIHdvcmQuXG4gKiBAcGFyYW0gc2luZ3VsYXIgVGhlIHNpbmd1bGFyIGZvcm0gb2YgdGhlIHdvcmQuXG4gKiBAcGFyYW0gcGx1cmFsIEFuIG9wdGlvbmFsIHBsdXJhbCBmb3JtIG9mIHRoZSB3b3JkLiBJZiBub24gaXMgZ2l2ZW4sIHRoZVxuICogcGx1cmFsIGZvcm0gaXMgY29uc3RydWN0ZWQgYnkgYXBwZW5kaW5nIGFuIFwic1wiIHRvIHRoZSBzaW5ndWxhciBmb3JtLlxuICovXG5mdW5jdGlvbiBwbHVyYWxpemUobiwgc2luZ3VsYXIsIHBsdXJhbCkge1xuICAgIGlmIChuID09PSAxKSB7XG4gICAgICAgIHJldHVybiBzaW5ndWxhcjtcbiAgICB9XG4gICAgaWYgKHBsdXJhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwbHVyYWw7XG4gICAgfVxuICAgIHJldHVybiBgJHtzaW5ndWxhcn1zYDtcbn1cbmV4cG9ydHMucGx1cmFsaXplID0gcGx1cmFsaXplO1xuLyoqXG4gKiBSZXBsYWNlcyBhbGwgdGhlIGluc3RhbmNlcyBvZiBbW3RvUmVwbGFjZV1dIGJ5IFtbcmVwbGFjZW1lbnRdXSBpbiBbW3N0cl1dLlxuICovXG5mdW5jdGlvbiByZXBsYWNlQWxsKHN0ciwgdG9SZXBsYWNlLCByZXBsYWNlbWVudCkge1xuICAgIHJldHVybiBzdHIuc3BsaXQodG9SZXBsYWNlKS5qb2luKHJlcGxhY2VtZW50KTtcbn1cbmV4cG9ydHMucmVwbGFjZUFsbCA9IHJlcGxhY2VBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/strings.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/internal/util/unsafe.js":
/*!******************************************************!*\
  !*** ./node_modules/hardhat/internal/util/unsafe.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unsafeObjectEntries = exports.unsafeObjectKeys = void 0;\n/**\n * This function is a typed version of `Object.keys`. Note that it's type\n * unsafe. You have to be sure that `o` has exactly the same keys as `T`.\n */\nexports.unsafeObjectKeys = Object.keys;\n/**\n * This function is a typed version of `Object.entries`. Note that it's type\n * unsafe. You have to be sure that `o` has exactly the same keys as `T`.\n */\nfunction unsafeObjectEntries(o) {\n    return Object.entries(o);\n}\nexports.unsafeObjectEntries = unsafeObjectEntries;\n//# sourceMappingURL=unsafe.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9pbnRlcm5hbC91dGlsL3Vuc2FmZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyx3QkFBd0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvaW50ZXJuYWwvdXRpbC91bnNhZmUuanM/M2U2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudW5zYWZlT2JqZWN0RW50cmllcyA9IGV4cG9ydHMudW5zYWZlT2JqZWN0S2V5cyA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHR5cGVkIHZlcnNpb24gb2YgYE9iamVjdC5rZXlzYC4gTm90ZSB0aGF0IGl0J3MgdHlwZVxuICogdW5zYWZlLiBZb3UgaGF2ZSB0byBiZSBzdXJlIHRoYXQgYG9gIGhhcyBleGFjdGx5IHRoZSBzYW1lIGtleXMgYXMgYFRgLlxuICovXG5leHBvcnRzLnVuc2FmZU9iamVjdEtleXMgPSBPYmplY3Qua2V5cztcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHR5cGVkIHZlcnNpb24gb2YgYE9iamVjdC5lbnRyaWVzYC4gTm90ZSB0aGF0IGl0J3MgdHlwZVxuICogdW5zYWZlLiBZb3UgaGF2ZSB0byBiZSBzdXJlIHRoYXQgYG9gIGhhcyBleGFjdGx5IHRoZSBzYW1lIGtleXMgYXMgYFRgLlxuICovXG5mdW5jdGlvbiB1bnNhZmVPYmplY3RFbnRyaWVzKG8pIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMobyk7XG59XG5leHBvcnRzLnVuc2FmZU9iamVjdEVudHJpZXMgPSB1bnNhZmVPYmplY3RFbnRyaWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5zYWZlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/internal/util/unsafe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/api.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/api.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API: () => (/* binding */ API)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\nvar API = /** @class */ (function () {\n    /** Create a new instance of API */\n    function API(dsn) {\n        this.dsn = dsn;\n        this._dsnObject = new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.Dsn(dsn);\n    }\n    /** Returns the Dsn object. */\n    API.prototype.getDsn = function () {\n        return this._dsnObject;\n    };\n    /** Returns the prefix to construct Sentry ingestion API endpoints. */\n    API.prototype.getBaseApiEndpoint = function () {\n        var dsn = this._dsnObject;\n        var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n        var port = dsn.port ? \":\" + dsn.port : '';\n        return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n    };\n    /** Returns the store endpoint URL. */\n    API.prototype.getStoreEndpoint = function () {\n        return this._getIngestEndpoint('store');\n    };\n    /**\n     * Returns the store endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n        return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n    };\n    /**\n     * Returns the envelope endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n        return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n    };\n    /** Returns only the path component for the store endpoint. */\n    API.prototype.getStoreEndpointPath = function () {\n        var dsn = this._dsnObject;\n        return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n    };\n    /**\n     * Returns an object that can be used in request headers.\n     * This is needed for node and the old /store endpoint in sentry\n     */\n    API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n        var dsn = this._dsnObject;\n        var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n        header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n        header.push(\"sentry_key=\" + dsn.user);\n        if (dsn.pass) {\n            header.push(\"sentry_secret=\" + dsn.pass);\n        }\n        return {\n            'Content-Type': 'application/json',\n            'X-Sentry-Auth': header.join(', '),\n        };\n    };\n    /** Returns the url to the report dialog endpoint. */\n    API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n        if (dialogOptions === void 0) { dialogOptions = {}; }\n        var dsn = this._dsnObject;\n        var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n        var encodedOptions = [];\n        encodedOptions.push(\"dsn=\" + dsn.toString());\n        for (var key in dialogOptions) {\n            if (key === 'dsn') {\n                continue;\n            }\n            if (key === 'user') {\n                if (!dialogOptions.user) {\n                    continue;\n                }\n                if (dialogOptions.user.name) {\n                    encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n                }\n                if (dialogOptions.user.email) {\n                    encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n                }\n            }\n            else {\n                encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n            }\n        }\n        if (encodedOptions.length) {\n            return endpoint + \"?\" + encodedOptions.join('&');\n        }\n        return endpoint;\n    };\n    /** Returns the envelope endpoint URL. */\n    API.prototype._getEnvelopeEndpoint = function () {\n        return this._getIngestEndpoint('envelope');\n    };\n    /** Returns the ingest API endpoint for target. */\n    API.prototype._getIngestEndpoint = function (target) {\n        var base = this.getBaseApiEndpoint();\n        var dsn = this._dsnObject;\n        return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n    };\n    /** Returns a URL-encoded string with auth config suitable for a query string. */\n    API.prototype._encodedAuth = function () {\n        var dsn = this._dsnObject;\n        var auth = {\n            // We send only the minimum set of required information. See\n            // https://github.com/getsentry/sentry-javascript/issues/2572.\n            sentry_key: dsn.user,\n            sentry_version: SENTRY_API_VERSION,\n        };\n        return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.urlEncode)(auth);\n    };\n    return API;\n}());\n\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw4Q0FBRztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUFTO0FBQ3hCO0FBQ0E7QUFDQSxDQUFDO0FBQ2M7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9hcGkuanM/Njc2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEc24sIHVybEVuY29kZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xudmFyIFNFTlRSWV9BUElfVkVSU0lPTiA9ICc3Jztcbi8qKiBIZWxwZXIgY2xhc3MgdG8gcHJvdmlkZSB1cmxzIHRvIGRpZmZlcmVudCBTZW50cnkgZW5kcG9pbnRzLiAqL1xudmFyIEFQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEFQSSAqL1xuICAgIGZ1bmN0aW9uIEFQSShkc24pIHtcbiAgICAgICAgdGhpcy5kc24gPSBkc247XG4gICAgICAgIHRoaXMuX2Rzbk9iamVjdCA9IG5ldyBEc24oZHNuKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgdGhlIERzbiBvYmplY3QuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXREc24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kc25PYmplY3Q7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgcHJlZml4IHRvIGNvbnN0cnVjdCBTZW50cnkgaW5nZXN0aW9uIEFQSSBlbmRwb2ludHMuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRCYXNlQXBpRW5kcG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBwcm90b2NvbCA9IGRzbi5wcm90b2NvbCA/IGRzbi5wcm90b2NvbCArIFwiOlwiIDogJyc7XG4gICAgICAgIHZhciBwb3J0ID0gZHNuLnBvcnQgPyBcIjpcIiArIGRzbi5wb3J0IDogJyc7XG4gICAgICAgIHJldHVybiBwcm90b2NvbCArIFwiLy9cIiArIGRzbi5ob3N0ICsgcG9ydCArIChkc24ucGF0aCA/IFwiL1wiICsgZHNuLnBhdGggOiAnJykgKyBcIi9hcGkvXCI7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgc3RvcmUgZW5kcG9pbnQgVVJMLiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEluZ2VzdEVuZHBvaW50KCdzdG9yZScpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RvcmUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICAgICAqXG4gICAgICogU2VuZGluZyBhdXRoIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgbm90IGFzIGN1c3RvbSBIVFRQIGhlYWRlcnMgYXZvaWRzIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0U3RvcmVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RvcmVFbmRwb2ludCgpICsgXCI/XCIgKyB0aGlzLl9lbmNvZGVkQXV0aCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZW52ZWxvcGUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICAgICAqXG4gICAgICogU2VuZGluZyBhdXRoIGFzIHBhcnQgb2YgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgbm90IGFzIGN1c3RvbSBIVFRQIGhlYWRlcnMgYXZvaWRzIENPUlMgcHJlZmxpZ2h0IHJlcXVlc3RzLlxuICAgICAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVudmVsb3BlRW5kcG9pbnQoKSArIFwiP1wiICsgdGhpcy5fZW5jb2RlZEF1dGgoKTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIG9ubHkgdGhlIHBhdGggY29tcG9uZW50IGZvciB0aGUgc3RvcmUgZW5kcG9pbnQuICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRTdG9yZUVuZHBvaW50UGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgcmV0dXJuIChkc24ucGF0aCA/IFwiL1wiICsgZHNuLnBhdGggOiAnJykgKyBcIi9hcGkvXCIgKyBkc24ucHJvamVjdElkICsgXCIvc3RvcmUvXCI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGluIHJlcXVlc3QgaGVhZGVycy5cbiAgICAgKiBUaGlzIGlzIG5lZWRlZCBmb3Igbm9kZSBhbmQgdGhlIG9sZCAvc3RvcmUgZW5kcG9pbnQgaW4gc2VudHJ5XG4gICAgICovXG4gICAgQVBJLnByb3RvdHlwZS5nZXRSZXF1ZXN0SGVhZGVycyA9IGZ1bmN0aW9uIChjbGllbnROYW1lLCBjbGllbnRWZXJzaW9uKSB7XG4gICAgICAgIHZhciBkc24gPSB0aGlzLl9kc25PYmplY3Q7XG4gICAgICAgIHZhciBoZWFkZXIgPSBbXCJTZW50cnkgc2VudHJ5X3ZlcnNpb249XCIgKyBTRU5UUllfQVBJX1ZFUlNJT05dO1xuICAgICAgICBoZWFkZXIucHVzaChcInNlbnRyeV9jbGllbnQ9XCIgKyBjbGllbnROYW1lICsgXCIvXCIgKyBjbGllbnRWZXJzaW9uKTtcbiAgICAgICAgaGVhZGVyLnB1c2goXCJzZW50cnlfa2V5PVwiICsgZHNuLnVzZXIpO1xuICAgICAgICBpZiAoZHNuLnBhc3MpIHtcbiAgICAgICAgICAgIGhlYWRlci5wdXNoKFwic2VudHJ5X3NlY3JldD1cIiArIGRzbi5wYXNzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdYLVNlbnRyeS1BdXRoJzogaGVhZGVyLmpvaW4oJywgJyksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgdXJsIHRvIHRoZSByZXBvcnQgZGlhbG9nIGVuZHBvaW50LiAqL1xuICAgIEFQSS5wcm90b3R5cGUuZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQgPSBmdW5jdGlvbiAoZGlhbG9nT3B0aW9ucykge1xuICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGRpYWxvZ09wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgZHNuID0gdGhpcy5fZHNuT2JqZWN0O1xuICAgICAgICB2YXIgZW5kcG9pbnQgPSB0aGlzLmdldEJhc2VBcGlFbmRwb2ludCgpICsgXCJlbWJlZC9lcnJvci1wYWdlL1wiO1xuICAgICAgICB2YXIgZW5jb2RlZE9wdGlvbnMgPSBbXTtcbiAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChcImRzbj1cIiArIGRzbi50b1N0cmluZygpKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRpYWxvZ09wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdkc24nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAndXNlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRpYWxvZ09wdGlvbnMudXNlcikge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpYWxvZ09wdGlvbnMudXNlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZWRPcHRpb25zLnB1c2goXCJuYW1lPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRpYWxvZ09wdGlvbnMudXNlci5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkaWFsb2dPcHRpb25zLnVzZXIuZW1haWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlZE9wdGlvbnMucHVzaChcImVtYWlsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGRpYWxvZ09wdGlvbnMudXNlci5lbWFpbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuY29kZWRPcHRpb25zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zW2tleV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5jb2RlZE9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5kcG9pbnQgKyBcIj9cIiArIGVuY29kZWRPcHRpb25zLmpvaW4oJyYnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5kcG9pbnQ7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgZW52ZWxvcGUgZW5kcG9pbnQgVVJMLiAqL1xuICAgIEFQSS5wcm90b3R5cGUuX2dldEVudmVsb3BlRW5kcG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRJbmdlc3RFbmRwb2ludCgnZW52ZWxvcGUnKTtcbiAgICB9O1xuICAgIC8qKiBSZXR1cm5zIHRoZSBpbmdlc3QgQVBJIGVuZHBvaW50IGZvciB0YXJnZXQuICovXG4gICAgQVBJLnByb3RvdHlwZS5fZ2V0SW5nZXN0RW5kcG9pbnQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBiYXNlID0gdGhpcy5nZXRCYXNlQXBpRW5kcG9pbnQoKTtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBiYXNlICsgZHNuLnByb2plY3RJZCArIFwiL1wiICsgdGFyZ2V0ICsgXCIvXCI7XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyBhIFVSTC1lbmNvZGVkIHN0cmluZyB3aXRoIGF1dGggY29uZmlnIHN1aXRhYmxlIGZvciBhIHF1ZXJ5IHN0cmluZy4gKi9cbiAgICBBUEkucHJvdG90eXBlLl9lbmNvZGVkQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRzbiA9IHRoaXMuX2Rzbk9iamVjdDtcbiAgICAgICAgdmFyIGF1dGggPSB7XG4gICAgICAgICAgICAvLyBXZSBzZW5kIG9ubHkgdGhlIG1pbmltdW0gc2V0IG9mIHJlcXVpcmVkIGluZm9ybWF0aW9uLiBTZWVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzI1NzIuXG4gICAgICAgICAgICBzZW50cnlfa2V5OiBkc24udXNlcixcbiAgICAgICAgICAgIHNlbnRyeV92ZXJzaW9uOiBTRU5UUllfQVBJX1ZFUlNJT04sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB1cmxFbmNvZGUoYXV0aCk7XG4gICAgfTtcbiAgICByZXR1cm4gQVBJO1xufSgpKTtcbmV4cG9ydCB7IEFQSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/basebackend.js":
/*!***************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/basebackend.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseBackend: () => (/* binding */ BaseBackend)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var _transports_noop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transports/noop */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/transports/noop.js\");\n\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nvar BaseBackend = /** @class */ (function () {\n    /** Creates a new backend instance. */\n    function BaseBackend(options) {\n        this._options = options;\n        if (!this._options.dsn) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.warn('No DSN provided, backend will not do anything.');\n        }\n        this._transport = this._setupTransport();\n    }\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    BaseBackend.prototype.eventFromException = function (_exception, _hint) {\n        throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.SentryError('Backend has to implement `eventFromException` method');\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseBackend.prototype.eventFromMessage = function (_message, _level, _hint) {\n        throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_1__.SentryError('Backend has to implement `eventFromMessage` method');\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseBackend.prototype.sendEvent = function (event) {\n        this._transport.sendEvent(event).then(null, function (reason) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error while sending event: \" + reason);\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseBackend.prototype.sendSession = function (session) {\n        if (!this._transport.sendSession) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n            return;\n        }\n        this._transport.sendSession(session).then(null, function (reason) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Error while sending session: \" + reason);\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseBackend.prototype.getTransport = function () {\n        return this._transport;\n    };\n    /**\n     * Sets up the transport so it can be used later to send requests.\n     */\n    BaseBackend.prototype._setupTransport = function () {\n        return new _transports_noop__WEBPACK_IMPORTED_MODULE_2__.NoopTransport();\n    };\n    return BaseBackend;\n}());\n\n//# sourceMappingURL=basebackend.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9iYXNlYmFja2VuZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBQ0Y7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNEQUFXO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0RBQVc7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpREFBTTtBQUNsQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpREFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlEQUFNO0FBQ2xCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDJEQUFhO0FBQ2hDO0FBQ0E7QUFDQSxDQUFDO0FBQ3NCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2Jhc2ViYWNrZW5kLmpzPzIwNmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nZ2VyLCBTZW50cnlFcnJvciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgTm9vcFRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0cy9ub29wJztcbi8qKlxuICogVGhpcyBpcyB0aGUgYmFzZSBpbXBsZW1lbnRpb24gb2YgYSBCYWNrZW5kLlxuICogQGhpZGRlblxuICovXG52YXIgQmFzZUJhY2tlbmQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBpbnN0YW5jZS4gKi9cbiAgICBmdW5jdGlvbiBCYXNlQmFja2VuZChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMuX29wdGlvbnMuZHNuKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybignTm8gRFNOIHByb3ZpZGVkLCBiYWNrZW5kIHdpbGwgbm90IGRvIGFueXRoaW5nLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IHRoaXMuX3NldHVwVHJhbnNwb3J0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tRXhjZXB0aW9uID0gZnVuY3Rpb24gKF9leGNlcHRpb24sIF9oaW50KSB7XG4gICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignQmFja2VuZCBoYXMgdG8gaW1wbGVtZW50IGBldmVudEZyb21FeGNlcHRpb25gIG1ldGhvZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuZXZlbnRGcm9tTWVzc2FnZSA9IGZ1bmN0aW9uIChfbWVzc2FnZSwgX2xldmVsLCBfaGludCkge1xuICAgICAgICB0aHJvdyBuZXcgU2VudHJ5RXJyb3IoJ0JhY2tlbmQgaGFzIHRvIGltcGxlbWVudCBgZXZlbnRGcm9tTWVzc2FnZWAgbWV0aG9kJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnNlbmRFdmVudChldmVudCkudGhlbihudWxsLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJFcnJvciB3aGlsZSBzZW5kaW5nIGV2ZW50OiBcIiArIHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuc2VuZFNlc3Npb24gPSBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydC5zZW5kU2Vzc2lvbikge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJEcm9wcGluZyBzZXNzaW9uIGJlY2F1c2UgY3VzdG9tIHRyYW5zcG9ydCBkb2Vzbid0IGltcGxlbWVudCBzZW5kU2Vzc2lvblwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmFuc3BvcnQuc2VuZFNlc3Npb24oc2Vzc2lvbikudGhlbihudWxsLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJFcnJvciB3aGlsZSBzZW5kaW5nIHNlc3Npb246IFwiICsgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEJhc2VCYWNrZW5kLnByb3RvdHlwZS5nZXRUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIHRoZSB0cmFuc3BvcnQgc28gaXQgY2FuIGJlIHVzZWQgbGF0ZXIgdG8gc2VuZCByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBCYXNlQmFja2VuZC5wcm90b3R5cGUuX3NldHVwVHJhbnNwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IE5vb3BUcmFuc3BvcnQoKTtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlQmFja2VuZDtcbn0oKSk7XG5leHBvcnQgeyBCYXNlQmFja2VuZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZWJhY2tlbmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/basebackend.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/baseclient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/baseclient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseClient: () => (/* binding */ BaseClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/scope.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/session.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/time.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/string.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var _integration__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./integration */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integration.js\");\n\n/* eslint-disable max-lines */\n\n\n\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nvar BaseClient = /** @class */ (function () {\n    /**\n     * Initializes this client instance.\n     *\n     * @param backendClass A constructor function to create the backend.\n     * @param options Options for the client.\n     */\n    function BaseClient(backendClass, options) {\n        /** Array of used integrations. */\n        this._integrations = {};\n        /** Number of call being processed */\n        this._processing = 0;\n        this._backend = new backendClass(options);\n        this._options = options;\n        if (options.dsn) {\n            this._dsn = new _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.Dsn(options.dsn);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    BaseClient.prototype.captureException = function (exception, hint, scope) {\n        var _this = this;\n        var eventId = hint && hint.event_id;\n        this._process(this._getBackend()\n            .eventFromException(exception, hint)\n            .then(function (event) { return _this._captureEvent(event, hint, scope); })\n            .then(function (result) {\n            eventId = result;\n        }));\n        return eventId;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n        var _this = this;\n        var eventId = hint && hint.event_id;\n        var promisedEvent = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.isPrimitive)(message)\n            ? this._getBackend().eventFromMessage(String(message), level, hint)\n            : this._getBackend().eventFromException(message, hint);\n        this._process(promisedEvent\n            .then(function (event) { return _this._captureEvent(event, hint, scope); })\n            .then(function (result) {\n            eventId = result;\n        }));\n        return eventId;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.captureEvent = function (event, hint, scope) {\n        var eventId = hint && hint.event_id;\n        this._process(this._captureEvent(event, hint, scope).then(function (result) {\n            eventId = result;\n        }));\n        return eventId;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.captureSession = function (session) {\n        if (!session.release) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn('Discarded session because of missing release');\n        }\n        else {\n            this._sendSession(session);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.getDsn = function () {\n        return this._dsn;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.getOptions = function () {\n        return this._options;\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.flush = function (timeout) {\n        var _this = this;\n        return this._isClientProcessing(timeout).then(function (ready) {\n            return _this._getBackend()\n                .getTransport()\n                .close(timeout)\n                .then(function (transportFlushed) { return ready && transportFlushed; });\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.close = function (timeout) {\n        var _this = this;\n        return this.flush(timeout).then(function (result) {\n            _this.getOptions().enabled = false;\n            return result;\n        });\n    };\n    /**\n     * Sets up the integrations\n     */\n    BaseClient.prototype.setupIntegrations = function () {\n        if (this._isEnabled()) {\n            this._integrations = (0,_integration__WEBPACK_IMPORTED_MODULE_3__.setupIntegrations)(this._options);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseClient.prototype.getIntegration = function (integration) {\n        try {\n            return this._integrations[integration.id] || null;\n        }\n        catch (_oO) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n            return null;\n        }\n    };\n    /** Updates existing session based on the provided event */\n    BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n        var e_1, _a;\n        var crashed = false;\n        var errored = false;\n        var userAgent;\n        var exceptions = event.exception && event.exception.values;\n        if (exceptions) {\n            errored = true;\n            try {\n                for (var exceptions_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__values)(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n                    var ex = exceptions_1_1.value;\n                    var mechanism = ex.mechanism;\n                    if (mechanism && mechanism.handled === false) {\n                        crashed = true;\n                        break;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        var user = event.user;\n        if (!session.userAgent) {\n            var headers = event.request ? event.request.headers : {};\n            for (var key in headers) {\n                if (key.toLowerCase() === 'user-agent') {\n                    userAgent = headers[key];\n                    break;\n                }\n            }\n        }\n        session.update((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, (crashed && { status: _sentry_types__WEBPACK_IMPORTED_MODULE_5__.SessionStatus.Crashed })), { user: user,\n            userAgent: userAgent, errors: session.errors + Number(errored || crashed) }));\n    };\n    /** Deliver captured session to Sentry */\n    BaseClient.prototype._sendSession = function (session) {\n        this._getBackend().sendSession(session);\n    };\n    /** Waits for the client to be done with processing. */\n    BaseClient.prototype._isClientProcessing = function (timeout) {\n        var _this = this;\n        return new _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.SyncPromise(function (resolve) {\n            var ticked = 0;\n            var tick = 1;\n            var interval = setInterval(function () {\n                if (_this._processing == 0) {\n                    clearInterval(interval);\n                    resolve(true);\n                }\n                else {\n                    ticked += tick;\n                    if (timeout && ticked >= timeout) {\n                        clearInterval(interval);\n                        resolve(false);\n                    }\n                }\n            }, tick);\n        });\n    };\n    /** Returns the current backend. */\n    BaseClient.prototype._getBackend = function () {\n        return this._backend;\n    };\n    /** Determines whether this SDK is enabled and a valid Dsn is present. */\n    BaseClient.prototype._isEnabled = function () {\n        return this.getOptions().enabled !== false && this._dsn !== undefined;\n    };\n    /**\n     * Adds common information to events.\n     *\n     * The information includes release and environment from `options`,\n     * breadcrumbs and context (extra, tags and user) from the scope.\n     *\n     * Information that is already present in the event is never overwritten. For\n     * nested objects, such as the context, keys are merged.\n     *\n     * @param event The original event.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A new event with more information.\n     */\n    BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n        var _this = this;\n        var _a = this.getOptions().normalizeDepth, normalizeDepth = _a === void 0 ? 3 : _a;\n        var prepared = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, event), { event_id: event.event_id || (hint && hint.event_id ? hint.event_id : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.uuid4)()), timestamp: event.timestamp || (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.dateTimestampInSeconds)() });\n        this._applyClientOptions(prepared);\n        this._applyIntegrationsMetadata(prepared);\n        // If we have scope given to us, use it as the base for further modifications.\n        // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n        var finalScope = scope;\n        if (hint && hint.captureContext) {\n            finalScope = _sentry_hub__WEBPACK_IMPORTED_MODULE_9__.Scope.clone(finalScope).update(hint.captureContext);\n        }\n        // We prepare the result here with a resolved Event.\n        var result = _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.SyncPromise.resolve(prepared);\n        // This should be the last thing called, since we want that\n        // {@link Hub.addEventProcessor} gets the finished prepared event.\n        if (finalScope) {\n            // In case we have a hub we reassign it.\n            result = finalScope.applyToEvent(prepared, hint);\n        }\n        return result.then(function (evt) {\n            if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n                return _this._normalizeEvent(evt, normalizeDepth);\n            }\n            return evt;\n        });\n    };\n    /**\n     * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n     * Normalized keys:\n     * - `breadcrumbs.data`\n     * - `user`\n     * - `contexts`\n     * - `extra`\n     * @param event Event\n     * @returns Normalized event\n     */\n    BaseClient.prototype._normalizeEvent = function (event, depth) {\n        if (!event) {\n            return null;\n        }\n        var normalized = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, event), (event.breadcrumbs && {\n            breadcrumbs: event.breadcrumbs.map(function (b) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, b), (b.data && {\n                data: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.normalize)(b.data, depth),\n            }))); }),\n        })), (event.user && {\n            user: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.normalize)(event.user, depth),\n        })), (event.contexts && {\n            contexts: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.normalize)(event.contexts, depth),\n        })), (event.extra && {\n            extra: (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_10__.normalize)(event.extra, depth),\n        }));\n        // event.contexts.trace stores information about a Transaction. Similarly,\n        // event.spans[] stores information about child Spans. Given that a\n        // Transaction is conceptually a Span, normalization should apply to both\n        // Transactions and Spans consistently.\n        // For now the decision is to skip normalization of Transactions and Spans,\n        // so this block overwrites the normalized event to add back the original\n        // Transaction information prior to normalization.\n        if (event.contexts && event.contexts.trace) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            normalized.contexts.trace = event.contexts.trace;\n        }\n        return normalized;\n    };\n    /**\n     *  Enhances event using the client configuration.\n     *  It takes care of all \"static\" values like environment, release and `dist`,\n     *  as well as truncating overly long values.\n     * @param event event instance to be enhanced\n     */\n    BaseClient.prototype._applyClientOptions = function (event) {\n        var options = this.getOptions();\n        var environment = options.environment, release = options.release, dist = options.dist, _a = options.maxValueLength, maxValueLength = _a === void 0 ? 250 : _a;\n        if (!('environment' in event)) {\n            event.environment = 'environment' in options ? environment : 'production';\n        }\n        if (event.release === undefined && release !== undefined) {\n            event.release = release;\n        }\n        if (event.dist === undefined && dist !== undefined) {\n            event.dist = dist;\n        }\n        if (event.message) {\n            event.message = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_11__.truncate)(event.message, maxValueLength);\n        }\n        var exception = event.exception && event.exception.values && event.exception.values[0];\n        if (exception && exception.value) {\n            exception.value = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_11__.truncate)(exception.value, maxValueLength);\n        }\n        var request = event.request;\n        if (request && request.url) {\n            request.url = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_11__.truncate)(request.url, maxValueLength);\n        }\n    };\n    /**\n     * This function adds all used integrations to the SDK info in the event.\n     * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n     */\n    BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n        var sdkInfo = event.sdk;\n        var integrationsArray = Object.keys(this._integrations);\n        if (sdkInfo && integrationsArray.length > 0) {\n            sdkInfo.integrations = integrationsArray;\n        }\n    };\n    /**\n     * Tells the backend to send this event\n     * @param event The Sentry event to send\n     */\n    BaseClient.prototype._sendEvent = function (event) {\n        this._getBackend().sendEvent(event);\n    };\n    /**\n     * Processes the event and logs an error in case of rejection\n     * @param event\n     * @param hint\n     * @param scope\n     */\n    BaseClient.prototype._captureEvent = function (event, hint, scope) {\n        return this._processEvent(event, hint, scope).then(function (finalEvent) {\n            return finalEvent.event_id;\n        }, function (reason) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.error(reason);\n            return undefined;\n        });\n    };\n    /**\n     * Processes an event (either error or message) and sends it to Sentry.\n     *\n     * This also adds breadcrumbs and context information to the event. However,\n     * platform specific meta data (such as the User's IP address) must be added\n     * by the SDK implementor.\n     *\n     *\n     * @param event The event to send to Sentry.\n     * @param hint May contain additional information about the original exception.\n     * @param scope A scope containing event metadata.\n     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n     */\n    BaseClient.prototype._processEvent = function (event, hint, scope) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        var _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;\n        if (!this._isEnabled()) {\n            return _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.SyncPromise.reject(new _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError('SDK not enabled, will not send event.'));\n        }\n        var isTransaction = event.type === 'transaction';\n        // 1.0 === 100% events are sent\n        // 0.0 === 0% events are sent\n        // Sampling for transaction happens somewhere else\n        if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n            return _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.SyncPromise.reject(new _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \" + sampleRate + \")\"));\n        }\n        return this._prepareEvent(event, scope, hint)\n            .then(function (prepared) {\n            if (prepared === null) {\n                throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError('An event processor returned null, will not send event.');\n            }\n            var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n            if (isInternalException || isTransaction || !beforeSend) {\n                return prepared;\n            }\n            var beforeSendResult = beforeSend(prepared, hint);\n            if (typeof beforeSendResult === 'undefined') {\n                throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError('`beforeSend` method has to return `null` or a valid event.');\n            }\n            else if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.isThenable)(beforeSendResult)) {\n                return beforeSendResult.then(function (event) { return event; }, function (e) {\n                    throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError(\"beforeSend rejected with \" + e);\n                });\n            }\n            return beforeSendResult;\n        })\n            .then(function (processedEvent) {\n            if (processedEvent === null) {\n                throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError('`beforeSend` returned `null`, will not send event.');\n            }\n            var session = scope && scope.getSession && scope.getSession();\n            if (!isTransaction && session) {\n                _this._updateSessionFromEvent(session, processedEvent);\n            }\n            _this._sendEvent(processedEvent);\n            return processedEvent;\n        })\n            .then(null, function (reason) {\n            if (reason instanceof _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError) {\n                throw reason;\n            }\n            _this.captureException(reason, {\n                data: {\n                    __sentry__: true,\n                },\n                originalException: reason,\n            });\n            throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_12__.SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n        });\n    };\n    /**\n     * Occupies the client with processing and event\n     */\n    BaseClient.prototype._process = function (promise) {\n        var _this = this;\n        this._processing += 1;\n        promise.then(function (value) {\n            _this._processing -= 1;\n            return value;\n        }, function (reason) {\n            _this._processing -= 1;\n            return reason;\n        });\n    };\n    return BaseClient;\n}());\n\n//# sourceMappingURL=baseclient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/baseclient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integration.js":
/*!***************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/integration.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIntegrationsToSetup: () => (/* binding */ getIntegrationsToSetup),\n/* harmony export */   installedIntegrations: () => (/* binding */ installedIntegrations),\n/* harmony export */   setupIntegration: () => (/* binding */ setupIntegration),\n/* harmony export */   setupIntegrations: () => (/* binding */ setupIntegrations)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/scope.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n\n\n\nvar installedIntegrations = [];\n/** Gets integration to install */\nfunction getIntegrationsToSetup(options) {\n    var defaultIntegrations = (options.defaultIntegrations && (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spread)(options.defaultIntegrations)) || [];\n    var userIntegrations = options.integrations;\n    var integrations = [];\n    if (Array.isArray(userIntegrations)) {\n        var userIntegrationsNames_1 = userIntegrations.map(function (i) { return i.name; });\n        var pickedIntegrationsNames_1 = [];\n        // Leave only unique default integrations, that were not overridden with provided user integrations\n        defaultIntegrations.forEach(function (defaultIntegration) {\n            if (userIntegrationsNames_1.indexOf(defaultIntegration.name) === -1 &&\n                pickedIntegrationsNames_1.indexOf(defaultIntegration.name) === -1) {\n                integrations.push(defaultIntegration);\n                pickedIntegrationsNames_1.push(defaultIntegration.name);\n            }\n        });\n        // Don't add same user integration twice\n        userIntegrations.forEach(function (userIntegration) {\n            if (pickedIntegrationsNames_1.indexOf(userIntegration.name) === -1) {\n                integrations.push(userIntegration);\n                pickedIntegrationsNames_1.push(userIntegration.name);\n            }\n        });\n    }\n    else if (typeof userIntegrations === 'function') {\n        integrations = userIntegrations(defaultIntegrations);\n        integrations = Array.isArray(integrations) ? integrations : [integrations];\n    }\n    else {\n        integrations = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spread)(defaultIntegrations);\n    }\n    // Make sure that if present, `Debug` integration will always run last\n    var integrationsNames = integrations.map(function (i) { return i.name; });\n    var alwaysLastToRun = 'Debug';\n    if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n        integrations.push.apply(integrations, (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spread)(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));\n    }\n    return integrations;\n}\n/** Setup given integration */\nfunction setupIntegration(integration) {\n    if (installedIntegrations.indexOf(integration.name) !== -1) {\n        return;\n    }\n    integration.setupOnce(_sentry_hub__WEBPACK_IMPORTED_MODULE_1__.addGlobalEventProcessor, _sentry_hub__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub);\n    installedIntegrations.push(integration.name);\n    _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.log(\"Integration installed: \" + integration.name);\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nfunction setupIntegrations(options) {\n    var integrations = {};\n    getIntegrationsToSetup(options).forEach(function (integration) {\n        integrations[integration.name] = integration;\n        setupIntegration(integration);\n    });\n    return integrations;\n}\n//# sourceMappingURL=integration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF5QztBQUM0QjtBQUM5QjtBQUNoQztBQUNQO0FBQ087QUFDUCw4REFBOEQsK0NBQVE7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLGdCQUFnQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsK0NBQVE7QUFDL0I7QUFDQTtBQUNBLDREQUE0RCxnQkFBZ0I7QUFDNUU7QUFDQTtBQUNBLDhDQUE4QywrQ0FBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGdFQUF1QixFQUFFLHNEQUFhO0FBQ2hFO0FBQ0EsSUFBSSxpREFBTTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9lc20vaW50ZWdyYXRpb24uanM/ZTkwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBhZGRHbG9iYWxFdmVudFByb2Nlc3NvciwgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvaHViJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuZXhwb3J0IHZhciBpbnN0YWxsZWRJbnRlZ3JhdGlvbnMgPSBbXTtcbi8qKiBHZXRzIGludGVncmF0aW9uIHRvIGluc3RhbGwgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRlZ3JhdGlvbnNUb1NldHVwKG9wdGlvbnMpIHtcbiAgICB2YXIgZGVmYXVsdEludGVncmF0aW9ucyA9IChvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgJiYgX19zcHJlYWQob3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zKSkgfHwgW107XG4gICAgdmFyIHVzZXJJbnRlZ3JhdGlvbnMgPSBvcHRpb25zLmludGVncmF0aW9ucztcbiAgICB2YXIgaW50ZWdyYXRpb25zID0gW107XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodXNlckludGVncmF0aW9ucykpIHtcbiAgICAgICAgdmFyIHVzZXJJbnRlZ3JhdGlvbnNOYW1lc18xID0gdXNlckludGVncmF0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkubmFtZTsgfSk7XG4gICAgICAgIHZhciBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xID0gW107XG4gICAgICAgIC8vIExlYXZlIG9ubHkgdW5pcXVlIGRlZmF1bHQgaW50ZWdyYXRpb25zLCB0aGF0IHdlcmUgbm90IG92ZXJyaWRkZW4gd2l0aCBwcm92aWRlZCB1c2VyIGludGVncmF0aW9uc1xuICAgICAgICBkZWZhdWx0SW50ZWdyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGRlZmF1bHRJbnRlZ3JhdGlvbikge1xuICAgICAgICAgICAgaWYgKHVzZXJJbnRlZ3JhdGlvbnNOYW1lc18xLmluZGV4T2YoZGVmYXVsdEludGVncmF0aW9uLm5hbWUpID09PSAtMSAmJlxuICAgICAgICAgICAgICAgIHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEuaW5kZXhPZihkZWZhdWx0SW50ZWdyYXRpb24ubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaW50ZWdyYXRpb25zLnB1c2goZGVmYXVsdEludGVncmF0aW9uKTtcbiAgICAgICAgICAgICAgICBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLnB1c2goZGVmYXVsdEludGVncmF0aW9uLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gRG9uJ3QgYWRkIHNhbWUgdXNlciBpbnRlZ3JhdGlvbiB0d2ljZVxuICAgICAgICB1c2VySW50ZWdyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHVzZXJJbnRlZ3JhdGlvbikge1xuICAgICAgICAgICAgaWYgKHBpY2tlZEludGVncmF0aW9uc05hbWVzXzEuaW5kZXhPZih1c2VySW50ZWdyYXRpb24ubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaW50ZWdyYXRpb25zLnB1c2godXNlckludGVncmF0aW9uKTtcbiAgICAgICAgICAgICAgICBwaWNrZWRJbnRlZ3JhdGlvbnNOYW1lc18xLnB1c2godXNlckludGVncmF0aW9uLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHVzZXJJbnRlZ3JhdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW50ZWdyYXRpb25zID0gdXNlckludGVncmF0aW9ucyhkZWZhdWx0SW50ZWdyYXRpb25zKTtcbiAgICAgICAgaW50ZWdyYXRpb25zID0gQXJyYXkuaXNBcnJheShpbnRlZ3JhdGlvbnMpID8gaW50ZWdyYXRpb25zIDogW2ludGVncmF0aW9uc107XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbnRlZ3JhdGlvbnMgPSBfX3NwcmVhZChkZWZhdWx0SW50ZWdyYXRpb25zKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgaWYgcHJlc2VudCwgYERlYnVnYCBpbnRlZ3JhdGlvbiB3aWxsIGFsd2F5cyBydW4gbGFzdFxuICAgIHZhciBpbnRlZ3JhdGlvbnNOYW1lcyA9IGludGVncmF0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkubmFtZTsgfSk7XG4gICAgdmFyIGFsd2F5c0xhc3RUb1J1biA9ICdEZWJ1Zyc7XG4gICAgaWYgKGludGVncmF0aW9uc05hbWVzLmluZGV4T2YoYWx3YXlzTGFzdFRvUnVuKSAhPT0gLTEpIHtcbiAgICAgICAgaW50ZWdyYXRpb25zLnB1c2guYXBwbHkoaW50ZWdyYXRpb25zLCBfX3NwcmVhZChpbnRlZ3JhdGlvbnMuc3BsaWNlKGludGVncmF0aW9uc05hbWVzLmluZGV4T2YoYWx3YXlzTGFzdFRvUnVuKSwgMSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVncmF0aW9ucztcbn1cbi8qKiBTZXR1cCBnaXZlbiBpbnRlZ3JhdGlvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwSW50ZWdyYXRpb24oaW50ZWdyYXRpb24pIHtcbiAgICBpZiAoaW5zdGFsbGVkSW50ZWdyYXRpb25zLmluZGV4T2YoaW50ZWdyYXRpb24ubmFtZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW50ZWdyYXRpb24uc2V0dXBPbmNlKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViKTtcbiAgICBpbnN0YWxsZWRJbnRlZ3JhdGlvbnMucHVzaChpbnRlZ3JhdGlvbi5uYW1lKTtcbiAgICBsb2dnZXIubG9nKFwiSW50ZWdyYXRpb24gaW5zdGFsbGVkOiBcIiArIGludGVncmF0aW9uLm5hbWUpO1xufVxuLyoqXG4gKiBHaXZlbiBhIGxpc3Qgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzIHRoaXMgaW5zdGFsbHMgdGhlbSBhbGwuIFdoZW4gYHdpdGhEZWZhdWx0c2AgaXMgc2V0IHRvIGB0cnVlYCB0aGVuIGFsbCBkZWZhdWx0XG4gKiBpbnRlZ3JhdGlvbnMgYXJlIGFkZGVkIHVubGVzcyB0aGV5IHdlcmUgYWxyZWFkeSBwcm92aWRlZCBiZWZvcmUuXG4gKiBAcGFyYW0gaW50ZWdyYXRpb25zIGFycmF5IG9mIGludGVncmF0aW9uIGluc3RhbmNlc1xuICogQHBhcmFtIHdpdGhEZWZhdWx0IHNob3VsZCBlbmFibGUgZGVmYXVsdCBpbnRlZ3JhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwSW50ZWdyYXRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgaW50ZWdyYXRpb25zID0ge307XG4gICAgZ2V0SW50ZWdyYXRpb25zVG9TZXR1cChvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlZ3JhdGlvbikge1xuICAgICAgICBpbnRlZ3JhdGlvbnNbaW50ZWdyYXRpb24ubmFtZV0gPSBpbnRlZ3JhdGlvbjtcbiAgICAgICAgc2V0dXBJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGludGVncmF0aW9ucztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVncmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/functiontostring.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/functiontostring.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionToString: () => (/* binding */ FunctionToString)\n/* harmony export */ });\nvar originalFunctionToString;\n/** Patch toString calls to return proper name for wrapped functions */\nvar FunctionToString = /** @class */ (function () {\n    function FunctionToString() {\n        /**\n         * @inheritDoc\n         */\n        this.name = FunctionToString.id;\n    }\n    /**\n     * @inheritDoc\n     */\n    FunctionToString.prototype.setupOnce = function () {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        originalFunctionToString = Function.prototype.toString;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Function.prototype.toString = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var context = this.__sentry_original__ || this;\n            return originalFunctionToString.apply(context, args);\n        };\n    };\n    /**\n     * @inheritDoc\n     */\n    FunctionToString.id = 'FunctionToString';\n    return FunctionToString;\n}());\n\n//# sourceMappingURL=functiontostring.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHVCQUF1QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUMyQjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcz8xYjBhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmc7XG4vKiogUGF0Y2ggdG9TdHJpbmcgY2FsbHMgdG8gcmV0dXJuIHByb3BlciBuYW1lIGZvciB3cmFwcGVkIGZ1bmN0aW9ucyAqL1xudmFyIEZ1bmN0aW9uVG9TdHJpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRnVuY3Rpb25Ub1N0cmluZygpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBGdW5jdGlvblRvU3RyaW5nLmlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIEZ1bmN0aW9uVG9TdHJpbmcucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fX3NlbnRyeV9vcmlnaW5hbF9fIHx8IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBGdW5jdGlvblRvU3RyaW5nLmlkID0gJ0Z1bmN0aW9uVG9TdHJpbmcnO1xuICAgIHJldHVybiBGdW5jdGlvblRvU3RyaW5nO1xufSgpKTtcbmV4cG9ydCB7IEZ1bmN0aW9uVG9TdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9udG9zdHJpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/functiontostring.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/inboundfilters.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/inboundfilters.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InboundFilters: () => (/* binding */ InboundFilters)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/scope.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/string.js\");\n\n\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nvar DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n/** Inbound filters configurable by the user */\nvar InboundFilters = /** @class */ (function () {\n    function InboundFilters(_options) {\n        if (_options === void 0) { _options = {}; }\n        this._options = _options;\n        /**\n         * @inheritDoc\n         */\n        this.name = InboundFilters.id;\n    }\n    /**\n     * @inheritDoc\n     */\n    InboundFilters.prototype.setupOnce = function () {\n        (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_0__.addGlobalEventProcessor)(function (event) {\n            var hub = (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n            if (!hub) {\n                return event;\n            }\n            var self = hub.getIntegration(InboundFilters);\n            if (self) {\n                var client = hub.getClient();\n                var clientOptions = client ? client.getOptions() : {};\n                var options = self._mergeOptions(clientOptions);\n                if (self._shouldDropEvent(event, options)) {\n                    return null;\n                }\n            }\n            return event;\n        });\n    };\n    /** JSDoc */\n    InboundFilters.prototype._shouldDropEvent = function (event, options) {\n        if (this._isSentryError(event, options)) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Event dropped due to being internal Sentry Error.\\nEvent: \" + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event));\n            return true;\n        }\n        if (this._isIgnoredError(event, options)) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Event dropped due to being matched by `ignoreErrors` option.\\nEvent: \" + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event));\n            return true;\n        }\n        if (this._isDeniedUrl(event, options)) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Event dropped due to being matched by `denyUrls` option.\\nEvent: \" + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event) + \".\\nUrl: \" + this._getEventFilterUrl(event));\n            return true;\n        }\n        if (!this._isAllowedUrl(event, options)) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Event dropped due to not being matched by `allowUrls` option.\\nEvent: \" + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event) + \".\\nUrl: \" + this._getEventFilterUrl(event));\n            return true;\n        }\n        return false;\n    };\n    /** JSDoc */\n    InboundFilters.prototype._isSentryError = function (event, options) {\n        if (!options.ignoreInternal) {\n            return false;\n        }\n        try {\n            return ((event &&\n                event.exception &&\n                event.exception.values &&\n                event.exception.values[0] &&\n                event.exception.values[0].type === 'SentryError') ||\n                false);\n        }\n        catch (_oO) {\n            return false;\n        }\n    };\n    /** JSDoc */\n    InboundFilters.prototype._isIgnoredError = function (event, options) {\n        if (!options.ignoreErrors || !options.ignoreErrors.length) {\n            return false;\n        }\n        return this._getPossibleEventMessages(event).some(function (message) {\n            // Not sure why TypeScript complains here...\n            return options.ignoreErrors.some(function (pattern) { return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.isMatchingPattern)(message, pattern); });\n        });\n    };\n    /** JSDoc */\n    InboundFilters.prototype._isDeniedUrl = function (event, options) {\n        // TODO: Use Glob instead?\n        if (!options.denyUrls || !options.denyUrls.length) {\n            return false;\n        }\n        var url = this._getEventFilterUrl(event);\n        return !url ? false : options.denyUrls.some(function (pattern) { return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.isMatchingPattern)(url, pattern); });\n    };\n    /** JSDoc */\n    InboundFilters.prototype._isAllowedUrl = function (event, options) {\n        // TODO: Use Glob instead?\n        if (!options.allowUrls || !options.allowUrls.length) {\n            return true;\n        }\n        var url = this._getEventFilterUrl(event);\n        return !url ? true : options.allowUrls.some(function (pattern) { return (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.isMatchingPattern)(url, pattern); });\n    };\n    /** JSDoc */\n    InboundFilters.prototype._mergeOptions = function (clientOptions) {\n        if (clientOptions === void 0) { clientOptions = {}; }\n        return {\n            allowUrls: (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__spread)((this._options.whitelistUrls || []), (this._options.allowUrls || []), (clientOptions.whitelistUrls || []), (clientOptions.allowUrls || [])),\n            denyUrls: (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__spread)((this._options.blacklistUrls || []), (this._options.denyUrls || []), (clientOptions.blacklistUrls || []), (clientOptions.denyUrls || [])),\n            ignoreErrors: (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__spread)((this._options.ignoreErrors || []), (clientOptions.ignoreErrors || []), DEFAULT_IGNORE_ERRORS),\n            ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n        };\n    };\n    /** JSDoc */\n    InboundFilters.prototype._getPossibleEventMessages = function (event) {\n        if (event.message) {\n            return [event.message];\n        }\n        if (event.exception) {\n            try {\n                var _a = (event.exception.values && event.exception.values[0]) || {}, _b = _a.type, type = _b === void 0 ? '' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;\n                return [\"\" + value, type + \": \" + value];\n            }\n            catch (oO) {\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Cannot extract message for event \" + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event));\n                return [];\n            }\n        }\n        return [];\n    };\n    /** JSDoc */\n    InboundFilters.prototype._getEventFilterUrl = function (event) {\n        try {\n            if (event.stacktrace) {\n                var frames_1 = event.stacktrace.frames;\n                return (frames_1 && frames_1[frames_1.length - 1].filename) || null;\n            }\n            if (event.exception) {\n                var frames_2 = event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n                return (frames_2 && frames_2[frames_2.length - 1].filename) || null;\n            }\n            return null;\n        }\n        catch (oO) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Cannot extract url for event \" + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event));\n            return null;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    InboundFilters.id = 'InboundFilters';\n    return InboundFilters;\n}());\n\n//# sourceMappingURL=inboundfilters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/inboundfilters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionToString: () => (/* reexport safe */ _functiontostring__WEBPACK_IMPORTED_MODULE_0__.FunctionToString),\n/* harmony export */   InboundFilters: () => (/* reexport safe */ _inboundfilters__WEBPACK_IMPORTED_MODULE_1__.InboundFilters)\n/* harmony export */ });\n/* harmony import */ var _functiontostring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functiontostring */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/functiontostring.js\");\n/* harmony import */ var _inboundfilters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inboundfilters */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/inboundfilters.js\");\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9pbnRlZ3JhdGlvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRDtBQUNKO0FBQ2xEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL2ludGVncmF0aW9ucy9pbmRleC5qcz9iOWYxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEZ1bmN0aW9uVG9TdHJpbmcgfSBmcm9tICcuL2Z1bmN0aW9udG9zdHJpbmcnO1xuZXhwb3J0IHsgSW5ib3VuZEZpbHRlcnMgfSBmcm9tICcuL2luYm91bmRmaWx0ZXJzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/request.js":
/*!***********************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/request.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eventToSentryRequest: () => (/* binding */ eventToSentryRequest),\n/* harmony export */   sessionToSentryRequest: () => (/* binding */ sessionToSentryRequest)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n\n/** Creates a SentryRequest from an event. */\nfunction sessionToSentryRequest(session, api) {\n    var envelopeHeaders = JSON.stringify({\n        sent_at: new Date().toISOString(),\n    });\n    var itemHeaders = JSON.stringify({\n        type: 'session',\n    });\n    return {\n        body: envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + JSON.stringify(session),\n        type: 'session',\n        url: api.getEnvelopeEndpointWithUrlEncodedAuth(),\n    };\n}\n/** Creates a SentryRequest from an event. */\nfunction eventToSentryRequest(event, api) {\n    // since JS has no Object.prototype.pop()\n    var _a = event.tags || {}, samplingMethod = _a.__sentry_samplingMethod, sampleRate = _a.__sentry_sampleRate, otherTags = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_a, [\"__sentry_samplingMethod\", \"__sentry_sampleRate\"]);\n    event.tags = otherTags;\n    var useEnvelope = event.type === 'transaction';\n    var req = {\n        body: JSON.stringify(event),\n        type: event.type || 'event',\n        url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n    };\n    // https://develop.sentry.dev/sdk/envelopes/\n    // Since we don't need to manipulate envelopes nor store them, there is no\n    // exported concept of an Envelope with operations including serialization and\n    // deserialization. Instead, we only implement a minimal subset of the spec to\n    // serialize events inline here.\n    if (useEnvelope) {\n        var envelopeHeaders = JSON.stringify({\n            event_id: event.event_id,\n            sent_at: new Date().toISOString(),\n        });\n        var itemHeaders = JSON.stringify({\n            type: event.type,\n            // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n            // explicitly-set sampling decisions). Are we good with that?\n            sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n        });\n        // The trailing newline is optional. We intentionally don't send it to avoid\n        // sending unnecessary bytes.\n        //\n        // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n        var envelope = envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + req.body;\n        req.body = envelope;\n    }\n    return req;\n}\n//# sourceMappingURL=request.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQjtBQUMvQjtBQUNPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLDZCQUE2QixnR0FBZ0csNkNBQU07QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsc0NBQXNDO0FBQ25FLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZ0JBQWdCLElBQUksWUFBWSxJQUFJLFNBQVM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3JlcXVlc3QuanM/OGZiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3Jlc3QgfSBmcm9tIFwidHNsaWJcIjtcbi8qKiBDcmVhdGVzIGEgU2VudHJ5UmVxdWVzdCBmcm9tIGFuIGV2ZW50LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlc3Npb25Ub1NlbnRyeVJlcXVlc3Qoc2Vzc2lvbiwgYXBpKSB7XG4gICAgdmFyIGVudmVsb3BlSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH0pO1xuICAgIHZhciBpdGVtSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdHlwZTogJ3Nlc3Npb24nLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvZHk6IGVudmVsb3BlSGVhZGVycyArIFwiXFxuXCIgKyBpdGVtSGVhZGVycyArIFwiXFxuXCIgKyBKU09OLnN0cmluZ2lmeShzZXNzaW9uKSxcbiAgICAgICAgdHlwZTogJ3Nlc3Npb24nLFxuICAgICAgICB1cmw6IGFwaS5nZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKCksXG4gICAgfTtcbn1cbi8qKiBDcmVhdGVzIGEgU2VudHJ5UmVxdWVzdCBmcm9tIGFuIGV2ZW50LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV2ZW50VG9TZW50cnlSZXF1ZXN0KGV2ZW50LCBhcGkpIHtcbiAgICAvLyBzaW5jZSBKUyBoYXMgbm8gT2JqZWN0LnByb3RvdHlwZS5wb3AoKVxuICAgIHZhciBfYSA9IGV2ZW50LnRhZ3MgfHwge30sIHNhbXBsaW5nTWV0aG9kID0gX2EuX19zZW50cnlfc2FtcGxpbmdNZXRob2QsIHNhbXBsZVJhdGUgPSBfYS5fX3NlbnRyeV9zYW1wbGVSYXRlLCBvdGhlclRhZ3MgPSBfX3Jlc3QoX2EsIFtcIl9fc2VudHJ5X3NhbXBsaW5nTWV0aG9kXCIsIFwiX19zZW50cnlfc2FtcGxlUmF0ZVwiXSk7XG4gICAgZXZlbnQudGFncyA9IG90aGVyVGFncztcbiAgICB2YXIgdXNlRW52ZWxvcGUgPSBldmVudC50eXBlID09PSAndHJhbnNhY3Rpb24nO1xuICAgIHZhciByZXEgPSB7XG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGV2ZW50KSxcbiAgICAgICAgdHlwZTogZXZlbnQudHlwZSB8fCAnZXZlbnQnLFxuICAgICAgICB1cmw6IHVzZUVudmVsb3BlID8gYXBpLmdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoKSA6IGFwaS5nZXRTdG9yZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoKCksXG4gICAgfTtcbiAgICAvLyBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZW52ZWxvcGVzL1xuICAgIC8vIFNpbmNlIHdlIGRvbid0IG5lZWQgdG8gbWFuaXB1bGF0ZSBlbnZlbG9wZXMgbm9yIHN0b3JlIHRoZW0sIHRoZXJlIGlzIG5vXG4gICAgLy8gZXhwb3J0ZWQgY29uY2VwdCBvZiBhbiBFbnZlbG9wZSB3aXRoIG9wZXJhdGlvbnMgaW5jbHVkaW5nIHNlcmlhbGl6YXRpb24gYW5kXG4gICAgLy8gZGVzZXJpYWxpemF0aW9uLiBJbnN0ZWFkLCB3ZSBvbmx5IGltcGxlbWVudCBhIG1pbmltYWwgc3Vic2V0IG9mIHRoZSBzcGVjIHRvXG4gICAgLy8gc2VyaWFsaXplIGV2ZW50cyBpbmxpbmUgaGVyZS5cbiAgICBpZiAodXNlRW52ZWxvcGUpIHtcbiAgICAgICAgdmFyIGVudmVsb3BlSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGV2ZW50X2lkOiBldmVudC5ldmVudF9pZCxcbiAgICAgICAgICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpdGVtSGVhZGVycyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAgICAgICAvLyBUT0RPOiBSaWdodCBub3csIHNhbXBsZVJhdGUgbWF5IG9yIG1heSBub3QgYmUgZGVmaW5lZCAoaXQgd29uJ3QgYmUgaW4gdGhlIGNhc2VzIG9mIGluaGVyaXRhbmNlIGFuZFxuICAgICAgICAgICAgLy8gZXhwbGljaXRseS1zZXQgc2FtcGxpbmcgZGVjaXNpb25zKS4gQXJlIHdlIGdvb2Qgd2l0aCB0aGF0P1xuICAgICAgICAgICAgc2FtcGxlX3JhdGVzOiBbeyBpZDogc2FtcGxpbmdNZXRob2QsIHJhdGU6IHNhbXBsZVJhdGUgfV0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaGUgdHJhaWxpbmcgbmV3bGluZSBpcyBvcHRpb25hbC4gV2UgaW50ZW50aW9uYWxseSBkb24ndCBzZW5kIGl0IHRvIGF2b2lkXG4gICAgICAgIC8vIHNlbmRpbmcgdW5uZWNlc3NhcnkgYnl0ZXMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGNvbnN0IGVudmVsb3BlID0gYCR7ZW52ZWxvcGVIZWFkZXJzfVxcbiR7aXRlbUhlYWRlcnN9XFxuJHtyZXEuYm9keX1cXG5gO1xuICAgICAgICB2YXIgZW52ZWxvcGUgPSBlbnZlbG9wZUhlYWRlcnMgKyBcIlxcblwiICsgaXRlbUhlYWRlcnMgKyBcIlxcblwiICsgcmVxLmJvZHk7XG4gICAgICAgIHJlcS5ib2R5ID0gZW52ZWxvcGU7XG4gICAgfVxuICAgIHJldHVybiByZXE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/sdk.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/sdk.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initAndBind: () => (/* binding */ initAndBind)\n/* harmony export */ });\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n    if (options.debug === true) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.logger.enable();\n    }\n    var hub = (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n    var client = new clientClass(options);\n    hub.bindClient(client);\n}\n//# sourceMappingURL=sdk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9zZGsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBQ0w7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsUUFBUSxpREFBTTtBQUNkO0FBQ0EsY0FBYywwREFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS9zZGsuanM/MWJlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDdXJyZW50SHViIH0gZnJvbSAnQHNlbnRyeS9odWInO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG4vKipcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBTREsgY2xpZW50IGluc3RhbmNlLiBUaGUgY2xpZW50IGlzXG4gKiBpbnN0YWxsZWQgYW5kIHRoZW4gYm91bmQgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogQHBhcmFtIGNsaWVudENsYXNzIFRoZSBjbGllbnQgY2xhc3MgdG8gaW5zdGFudGlhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRBbmRCaW5kKGNsaWVudENsYXNzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICAgICAgbG9nZ2VyLmVuYWJsZSgpO1xuICAgIH1cbiAgICB2YXIgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgIHZhciBjbGllbnQgPSBuZXcgY2xpZW50Q2xhc3Mob3B0aW9ucyk7XG4gICAgaHViLmJpbmRDbGllbnQoY2xpZW50KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNkay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/sdk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/transports/noop.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/core/esm/transports/noop.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopTransport: () => (/* binding */ NoopTransport)\n/* harmony export */ });\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/status.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js\");\n\n\n/** Noop transport */\nvar NoopTransport = /** @class */ (function () {\n    function NoopTransport() {\n    }\n    /**\n     * @inheritDoc\n     */\n    NoopTransport.prototype.sendEvent = function (_) {\n        return _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.SyncPromise.resolve({\n            reason: \"NoopTransport: Event has been skipped because no Dsn is configured.\",\n            status: _sentry_types__WEBPACK_IMPORTED_MODULE_1__.Status.Skipped,\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    NoopTransport.prototype.close = function (_) {\n        return _sentry_utils__WEBPACK_IMPORTED_MODULE_0__.SyncPromise.resolve(true);\n    };\n    return NoopTransport;\n}());\n\n//# sourceMappingURL=noop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2VzbS90cmFuc3BvcnRzL25vb3AuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVDO0FBQ0s7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsc0RBQVc7QUFDMUI7QUFDQSxvQkFBb0IsaURBQU07QUFDMUIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQSxDQUFDO0FBQ3dCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvZXNtL3RyYW5zcG9ydHMvbm9vcC5qcz84OTRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXR1cyB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuaW1wb3J0IHsgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbi8qKiBOb29wIHRyYW5zcG9ydCAqL1xudmFyIE5vb3BUcmFuc3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9vcFRyYW5zcG9ydCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBOb29wVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kRXZlbnQgPSBmdW5jdGlvbiAoXykge1xuICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICByZWFzb246IFwiTm9vcFRyYW5zcG9ydDogRXZlbnQgaGFzIGJlZW4gc2tpcHBlZCBiZWNhdXNlIG5vIERzbiBpcyBjb25maWd1cmVkLlwiLFxuICAgICAgICAgICAgc3RhdHVzOiBTdGF0dXMuU2tpcHBlZCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIE5vb3BUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gTm9vcFRyYW5zcG9ydDtcbn0oKSk7XG5leHBvcnQgeyBOb29wVHJhbnNwb3J0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/transports/noop.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/backend.js":
/*!***********************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/backend.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeBackend: () => (/* binding */ NodeBackend)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/basebackend.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/severity.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/dsn.js\");\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/parsers.js\");\n/* harmony import */ var _transports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transports */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/index.js\");\n\n\n\n\n\n\n/**\n * The Sentry Node SDK Backend.\n * @hidden\n */\nvar NodeBackend = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(NodeBackend, _super);\n    function NodeBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    NodeBackend.prototype.eventFromException = function (exception, hint) {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var ex = exception;\n        var mechanism = {\n            handled: true,\n            type: 'generic',\n        };\n        if (!(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isError)(exception)) {\n            if ((0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(exception)) {\n                // This will allow us to group events based on top-level keys\n                // which is much better than creating new group when any key/value change\n                var message = \"Non-Error exception captured with keys: \" + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.extractExceptionKeysForMessage)(exception);\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.getCurrentHub)().configureScope(function (scope) {\n                    scope.setExtra('__serialized__', (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_4__.normalizeToSize)(exception));\n                });\n                ex = (hint && hint.syntheticException) || new Error(message);\n                ex.message = message;\n            }\n            else {\n                // This handles when someone does: `throw \"something awesome\";`\n                // We use synthesized Error here so we can extract a (rough) stack trace.\n                ex = (hint && hint.syntheticException) || new Error(exception);\n                ex.message = exception;\n            }\n            mechanism.synthetic = true;\n        }\n        return new _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.SyncPromise(function (resolve, reject) {\n            return (0,_parsers__WEBPACK_IMPORTED_MODULE_0__.parseError)(ex, _this._options)\n                .then(function (event) {\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.addExceptionTypeValue)(event, undefined, undefined);\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_7__.addExceptionMechanism)(event, mechanism);\n                resolve((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, event), { event_id: hint && hint.event_id }));\n            })\n                .then(null, reject);\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    NodeBackend.prototype.eventFromMessage = function (message, level, hint) {\n        var _this = this;\n        if (level === void 0) { level = _sentry_types__WEBPACK_IMPORTED_MODULE_8__.Severity.Info; }\n        var event = {\n            event_id: hint && hint.event_id,\n            level: level,\n            message: message,\n        };\n        return new _sentry_utils__WEBPACK_IMPORTED_MODULE_6__.SyncPromise(function (resolve) {\n            if (_this._options.attachStacktrace && hint && hint.syntheticException) {\n                var stack = hint.syntheticException ? (0,_parsers__WEBPACK_IMPORTED_MODULE_0__.extractStackFromError)(hint.syntheticException) : [];\n                (0,_parsers__WEBPACK_IMPORTED_MODULE_0__.parseStack)(stack, _this._options)\n                    .then(function (frames) {\n                    event.stacktrace = {\n                        frames: (0,_parsers__WEBPACK_IMPORTED_MODULE_0__.prepareFramesForEvent)(frames),\n                    };\n                    resolve(event);\n                })\n                    .then(null, function () {\n                    resolve(event);\n                });\n            }\n            else {\n                resolve(event);\n            }\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    NodeBackend.prototype._setupTransport = function () {\n        if (!this._options.dsn) {\n            // We return the noop transport here in case there is no Dsn.\n            return _super.prototype._setupTransport.call(this);\n        }\n        var dsn = new _sentry_utils__WEBPACK_IMPORTED_MODULE_9__.Dsn(this._options.dsn);\n        var transportOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, this._options.transportOptions), (this._options.httpProxy && { httpProxy: this._options.httpProxy })), (this._options.httpsProxy && { httpsProxy: this._options.httpsProxy })), (this._options.caCerts && { caCerts: this._options.caCerts })), { dsn: this._options.dsn });\n        if (this._options.transport) {\n            return new this._options.transport(transportOptions);\n        }\n        if (dsn.protocol === 'http') {\n            return new _transports__WEBPACK_IMPORTED_MODULE_1__.HTTPTransport(transportOptions);\n        }\n        return new _transports__WEBPACK_IMPORTED_MODULE_1__.HTTPSTransport(transportOptions);\n    };\n    return NodeBackend;\n}(_sentry_core__WEBPACK_IMPORTED_MODULE_10__.BaseBackend));\n\n//# sourceMappingURL=backend.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/backend.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/client.js":
/*!**********************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/client.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeClient: () => (/* binding */ NodeClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/baseclient.js\");\n/* harmony import */ var _backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/backend.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/version.js\");\n\n\n\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar NodeClient = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(NodeClient, _super);\n    /**\n     * Creates a new Node SDK instance.\n     * @param options Configuration options for this SDK.\n     */\n    function NodeClient(options) {\n        return _super.call(this, _backend__WEBPACK_IMPORTED_MODULE_0__.NodeBackend, options) || this;\n    }\n    /**\n     * @inheritDoc\n     */\n    NodeClient.prototype._prepareEvent = function (event, scope, hint) {\n        event.platform = event.platform || 'node';\n        event.sdk = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, event.sdk), { name: _version__WEBPACK_IMPORTED_MODULE_1__.SDK_NAME, packages: (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spread)(((event.sdk && event.sdk.packages) || []), [\n                {\n                    name: 'npm:@sentry/node',\n                    version: _version__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\n                },\n            ]), version: _version__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION });\n        if (this.getOptions().serverName) {\n            event.server_name = this.getOptions().serverName;\n        }\n        return _super.prototype._prepareEvent.call(this, event, scope, hint);\n    };\n    return NodeClient;\n}(_sentry_core__WEBPACK_IMPORTED_MODULE_3__.BaseClient));\n\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9jbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEQ7QUFDcEI7QUFDRjtBQUNVO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaURBQVc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLCtDQUFRLENBQUMsK0NBQVEsR0FBRyxnQkFBZ0IsTUFBTSw4Q0FBUSxZQUFZLCtDQUFRO0FBQzFGO0FBQ0E7QUFDQSw2QkFBNkIsaURBQVc7QUFDeEMsaUJBQWlCO0FBQ2pCLHlCQUF5QixpREFBVyxFQUFFO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxvREFBVTtBQUNVO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2NsaWVudC5qcz9mMWI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMsIF9fcmVhZCwgX19zcHJlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEJhc2VDbGllbnQgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgTm9kZUJhY2tlbmQgfSBmcm9tICcuL2JhY2tlbmQnO1xuaW1wb3J0IHsgU0RLX05BTUUsIFNES19WRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uJztcbi8qKlxuICogVGhlIFNlbnRyeSBOb2RlIFNESyBDbGllbnQuXG4gKlxuICogQHNlZSBOb2RlT3B0aW9ucyBmb3IgZG9jdW1lbnRhdGlvbiBvbiBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKiBAc2VlIFNlbnRyeUNsaWVudCBmb3IgdXNhZ2UgZG9jdW1lbnRhdGlvbi5cbiAqL1xudmFyIE5vZGVDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE5vZGVDbGllbnQsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBOb2RlIFNESyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoaXMgU0RLLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vZGVDbGllbnQob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgTm9kZUJhY2tlbmQsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTm9kZUNsaWVudC5wcm90b3R5cGUuX3ByZXBhcmVFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgc2NvcGUsIGhpbnQpIHtcbiAgICAgICAgZXZlbnQucGxhdGZvcm0gPSBldmVudC5wbGF0Zm9ybSB8fCAnbm9kZSc7XG4gICAgICAgIGV2ZW50LnNkayA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudC5zZGspLCB7IG5hbWU6IFNES19OQU1FLCBwYWNrYWdlczogX19zcHJlYWQoKChldmVudC5zZGsgJiYgZXZlbnQuc2RrLnBhY2thZ2VzKSB8fCBbXSksIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICducG06QHNlbnRyeS9ub2RlJyxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogU0RLX1ZFUlNJT04sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0pLCB2ZXJzaW9uOiBTREtfVkVSU0lPTiB9KTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9ucygpLnNlcnZlck5hbWUpIHtcbiAgICAgICAgICAgIGV2ZW50LnNlcnZlcl9uYW1lID0gdGhpcy5nZXRPcHRpb25zKCkuc2VydmVyTmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fcHJlcGFyZUV2ZW50LmNhbGwodGhpcywgZXZlbnQsIHNjb3BlLCBoaW50KTtcbiAgICB9O1xuICAgIHJldHVybiBOb2RlQ2xpZW50O1xufShCYXNlQ2xpZW50KSk7XG5leHBvcnQgeyBOb2RlQ2xpZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/handlers.js":
/*!************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/handlers.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorHandler: () => (/* binding */ errorHandler),\n/* harmony export */   logAndExitProcess: () => (/* binding */ logAndExitProcess),\n/* harmony export */   parseRequest: () => (/* binding */ parseRequest),\n/* harmony export */   requestHandler: () => (/* binding */ requestHandler),\n/* harmony export */   tracingHandler: () => (/* binding */ tracingHandler)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/minimal/esm/index.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_tracing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/tracing */ \"(ssr)/./node_modules/@sentry/tracing/esm/utils.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/node.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/async.js\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domain */ \"domain\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(domain__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdk */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/sdk.js\");\n\n/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\n\n\n\n\nvar DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\nfunction tracingHandler() {\n    return function sentryTracingMiddleware(req, res, next) {\n        // If there is a trace header set, we extract the data from it (parentSpanId, traceId, and sampling decision)\n        var traceparentData;\n        if (req.headers && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isString)(req.headers['sentry-trace'])) {\n            traceparentData = (0,_sentry_tracing__WEBPACK_IMPORTED_MODULE_4__.extractTraceparentData)(req.headers['sentry-trace']);\n        }\n        var transaction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.startTransaction)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({ name: extractExpressTransactionName(req, { path: true, method: true }), op: 'http.server' }, traceparentData));\n        // We put the transaction on the scope so users can attach children to it\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getCurrentHub)().configureScope(function (scope) {\n            scope.setSpan(transaction);\n        });\n        // We also set __sentry_transaction on the response so people can grab the transaction there to add\n        // spans to it later.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        res.__sentry_transaction = transaction;\n        res.once('finish', function () {\n            // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n            // closes\n            setImmediate(function () {\n                addExpressReqToTransaction(transaction, req);\n                transaction.setHttpStatus(res.statusCode);\n                transaction.finish();\n            });\n        });\n        next();\n    };\n}\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addExpressReqToTransaction(transaction, req) {\n    if (!transaction)\n        return;\n    transaction.name = extractExpressTransactionName(req, { path: true, method: true });\n    transaction.setData('url', req.originalUrl);\n    transaction.setData('baseUrl', req.baseUrl);\n    transaction.setData('query', req.query);\n}\n/**\n * Extracts complete generalized path from the request object and uses it to construct transaction name.\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req The ExpressRequest object\n * @param options What to include in the transaction name (method, path, or both)\n *\n * @returns The fully constructed transaction name\n */\nfunction extractExpressTransactionName(req, options) {\n    if (options === void 0) { options = {}; }\n    var _a;\n    var method = (_a = req.method) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n    var path = '';\n    if (req.route) {\n        // if the mountpoint is `/`, req.baseUrl is '' (not undefined), so it's safe to include it here\n        // see https://github.com/expressjs/express/blob/508936853a6e311099c9985d4c11a4b1b8f6af07/test/req.baseUrl.js#L7\n        path = \"\" + req.baseUrl + req.route.path;\n    }\n    else if (req.originalUrl || req.url) {\n        path = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_8__.stripUrlQueryAndFragment)(req.originalUrl || req.url || '');\n    }\n    var info = '';\n    if (options.method && method) {\n        info += method;\n    }\n    if (options.method && options.path) {\n        info += \" \";\n    }\n    if (options.path && path) {\n        info += path;\n    }\n    return info;\n}\n/** JSDoc */\nfunction extractTransaction(req, type) {\n    var _a;\n    switch (type) {\n        case 'path': {\n            return extractExpressTransactionName(req, { path: true });\n        }\n        case 'handler': {\n            return ((_a = req.route) === null || _a === void 0 ? void 0 : _a.stack[0].name) || '<anonymous>';\n        }\n        case 'methodPath':\n        default: {\n            return extractExpressTransactionName(req, { path: true, method: true });\n        }\n    }\n}\n/** Default user keys that'll be used to extract data from the request */\nvar DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n/** JSDoc */\nfunction extractUserData(user, keys) {\n    var extractedUser = {};\n    var attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n    attributes.forEach(function (key) {\n        if (user && key in user) {\n            extractedUser[key] = user[key];\n        }\n    });\n    return extractedUser;\n}\n/**\n * Enriches passed event with request data.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\nfunction parseRequest(event, req, options) {\n    // eslint-disable-next-line no-param-reassign\n    options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({ ip: false, request: true, serverName: true, transaction: true, user: true, version: true }, options);\n    if (options.version) {\n        event.contexts = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, event.contexts), { runtime: {\n                name: 'node',\n                version: global.process.version,\n            } });\n    }\n    if (options.request) {\n        // if the option value is `true`, use the default set of keys by not passing anything to `extractNodeRequestData()`\n        var extractedRequestData = Array.isArray(options.request)\n            ? (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_9__.extractNodeRequestData)(req, options.request)\n            : (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_9__.extractNodeRequestData)(req);\n        event.request = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, event.request), extractedRequestData);\n    }\n    if (options.serverName && !event.server_name) {\n        event.server_name = global.process.env.SENTRY_NAME || os__WEBPACK_IMPORTED_MODULE_1__.hostname();\n    }\n    if (options.user) {\n        var extractedUser = req.user && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(req.user) ? extractUserData(req.user, options.user) : {};\n        if (Object.keys(extractedUser)) {\n            event.user = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, event.user), extractedUser);\n        }\n    }\n    // client ip:\n    //   node: req.connection.remoteAddress\n    //   express, koa: req.ip\n    if (options.ip) {\n        var ip = req.ip || (req.connection && req.connection.remoteAddress);\n        if (ip) {\n            event.user = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, event.user), { ip_address: ip });\n        }\n    }\n    if (options.transaction && !event.transaction) {\n        event.transaction = extractTransaction(req, options.transaction);\n    }\n    return event;\n}\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\nfunction requestHandler(options) {\n    return function sentryRequestMiddleware(req, res, next) {\n        if (options && options.flushTimeout && options.flushTimeout > 0) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            var _end_1 = res.end;\n            res.end = function (chunk, encoding, cb) {\n                var _this = this;\n                (0,_sdk__WEBPACK_IMPORTED_MODULE_2__.flush)(options.flushTimeout)\n                    .then(function () {\n                    _end_1.call(_this, chunk, encoding, cb);\n                })\n                    .then(null, function (e) {\n                    _sentry_utils__WEBPACK_IMPORTED_MODULE_10__.logger.error(e);\n                });\n            };\n        }\n        var local = domain__WEBPACK_IMPORTED_MODULE_0__.create();\n        local.add(req);\n        local.add(res);\n        local.on('error', next);\n        local.run(function () {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getCurrentHub)().configureScope(function (scope) {\n                return scope.addEventProcessor(function (event) { return parseRequest(event, req, options); });\n            });\n            next();\n        });\n    };\n}\n/** JSDoc */\nfunction getStatusCodeFromResponse(error) {\n    var statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n    return statusCode ? parseInt(statusCode, 10) : 500;\n}\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n    var status = getStatusCodeFromResponse(error);\n    return status >= 500;\n}\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\nfunction errorHandler(options) {\n    return function sentryErrorMiddleware(error, _req, res, next) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        var shouldHandleError = (options && options.shouldHandleError) || defaultShouldHandleError;\n        if (shouldHandleError(error)) {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.withScope)(function (_scope) {\n                // For some reason we need to set the transaction on the scope again\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                var transaction = res.__sentry_transaction;\n                if (transaction && _scope.getSpan() === undefined) {\n                    _scope.setSpan(transaction);\n                }\n                var eventId = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.captureException)(error);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                res.sentry = eventId;\n                next(error);\n            });\n            return;\n        }\n        next(error);\n    };\n}\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n    // eslint-disable-next-line no-console\n    console.error(error && error.stack ? error.stack : error);\n    var client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.getCurrentHub)().getClient();\n    if (client === undefined) {\n        _sentry_utils__WEBPACK_IMPORTED_MODULE_10__.logger.warn('No NodeClient was defined, we are exiting the process now.');\n        global.process.exit(1);\n        return;\n    }\n    var options = client.getOptions();\n    var timeout = (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n        DEFAULT_SHUTDOWN_TIMEOUT;\n    (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_11__.forget)(client.close(timeout).then(function (result) {\n        if (!result) {\n            _sentry_utils__WEBPACK_IMPORTED_MODULE_10__.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n        }\n        global.process.exit(1);\n    }));\n}\n//# sourceMappingURL=handlers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/handlers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Handlers: () => (/* reexport module object */ _handlers__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   Hub: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.Hub),\n/* harmony export */   Integrations: () => (/* binding */ INTEGRATIONS),\n/* harmony export */   NodeBackend: () => (/* reexport safe */ _backend__WEBPACK_IMPORTED_MODULE_5__.NodeBackend),\n/* harmony export */   NodeClient: () => (/* reexport safe */ _client__WEBPACK_IMPORTED_MODULE_6__.NodeClient),\n/* harmony export */   SDK_NAME: () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_8__.SDK_NAME),\n/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_8__.SDK_VERSION),\n/* harmony export */   Scope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_2__.Scope),\n/* harmony export */   Severity: () => (/* reexport safe */ _sentry_types__WEBPACK_IMPORTED_MODULE_0__.Severity),\n/* harmony export */   Status: () => (/* reexport safe */ _sentry_types__WEBPACK_IMPORTED_MODULE_1__.Status),\n/* harmony export */   Transports: () => (/* reexport module object */ _transports__WEBPACK_IMPORTED_MODULE_12__),\n/* harmony export */   addBreadcrumb: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.addBreadcrumb),\n/* harmony export */   addGlobalEventProcessor: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_2__.addGlobalEventProcessor),\n/* harmony export */   captureEvent: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureEvent),\n/* harmony export */   captureException: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureException),\n/* harmony export */   captureMessage: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.captureMessage),\n/* harmony export */   close: () => (/* reexport safe */ _sdk__WEBPACK_IMPORTED_MODULE_7__.close),\n/* harmony export */   configureScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.configureScope),\n/* harmony export */   defaultIntegrations: () => (/* reexport safe */ _sdk__WEBPACK_IMPORTED_MODULE_7__.defaultIntegrations),\n/* harmony export */   flush: () => (/* reexport safe */ _sdk__WEBPACK_IMPORTED_MODULE_7__.flush),\n/* harmony export */   getCurrentHub: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.getCurrentHub),\n/* harmony export */   getHubFromCarrier: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.getHubFromCarrier),\n/* harmony export */   init: () => (/* reexport safe */ _sdk__WEBPACK_IMPORTED_MODULE_7__.init),\n/* harmony export */   lastEventId: () => (/* reexport safe */ _sdk__WEBPACK_IMPORTED_MODULE_7__.lastEventId),\n/* harmony export */   makeMain: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.makeMain),\n/* harmony export */   setContext: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setContext),\n/* harmony export */   setExtra: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setExtra),\n/* harmony export */   setExtras: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setExtras),\n/* harmony export */   setTag: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setTag),\n/* harmony export */   setTags: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setTags),\n/* harmony export */   setUser: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.setUser),\n/* harmony export */   startTransaction: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.startTransaction),\n/* harmony export */   withScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.withScope)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/severity.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/status.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/minimal/esm/index.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _backend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./backend */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/backend.js\");\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/client.js\");\n/* harmony import */ var _sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sdk */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/sdk.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/version.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/index.js\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! domain */ \"domain\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(domain__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _handlers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./handlers */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/handlers.js\");\n/* harmony import */ var _integrations__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./integrations */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/index.js\");\n/* harmony import */ var _transports__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transports */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar INTEGRATIONS = (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_13__.__assign)({}, _sentry_core__WEBPACK_IMPORTED_MODULE_14__), _integrations__WEBPACK_IMPORTED_MODULE_11__);\n\n// We need to patch domain on the global __SENTRY__ object to make it work for node in cross-platform packages like\n// @sentry/hub. If we don't do this, browser bundlers will have troubles resolving `require('domain')`.\nvar carrier = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.getMainCarrier)();\nif (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    carrier.__SENTRY__.extensions.domain = carrier.__SENTRY__.extensions.domain || domain__WEBPACK_IMPORTED_MODULE_9__;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlDO0FBQ2lCO0FBQ3FPO0FBQy9PO0FBQ0Y7QUFDdUM7QUFDM0I7QUFDYztBQUNuQjtBQUNaO0FBQ007QUFDWTtBQUNSO0FBQzNDLG1CQUFtQixnREFBUSxDQUFDLGdEQUFRLEdBQUcsRUFBRSwwQ0FBZ0IsR0FBRywyQ0FBZ0I7QUFDZDtBQUM5RDtBQUNBO0FBQ0EsY0FBYyw0REFBYztBQUM1QjtBQUNBO0FBQ0EsbUZBQW1GLG1DQUFNO0FBQ3pGO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vaW5kZXguanM/NjNmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHsgU2V2ZXJpdHksIFN0YXR1cywgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmV4cG9ydCB7IGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBhZGRCcmVhZGNydW1iLCBjYXB0dXJlRXhjZXB0aW9uLCBjYXB0dXJlRXZlbnQsIGNhcHR1cmVNZXNzYWdlLCBjb25maWd1cmVTY29wZSwgZ2V0SHViRnJvbUNhcnJpZXIsIGdldEN1cnJlbnRIdWIsIEh1YiwgbWFrZU1haW4sIFNjb3BlLCBzdGFydFRyYW5zYWN0aW9uLCBzZXRDb250ZXh0LCBzZXRFeHRyYSwgc2V0RXh0cmFzLCBzZXRUYWcsIHNldFRhZ3MsIHNldFVzZXIsIHdpdGhTY29wZSwgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuZXhwb3J0IHsgTm9kZUJhY2tlbmQgfSBmcm9tICcuL2JhY2tlbmQnO1xuZXhwb3J0IHsgTm9kZUNsaWVudCB9IGZyb20gJy4vY2xpZW50JztcbmV4cG9ydCB7IGRlZmF1bHRJbnRlZ3JhdGlvbnMsIGluaXQsIGxhc3RFdmVudElkLCBmbHVzaCwgY2xvc2UgfSBmcm9tICcuL3Nkayc7XG5leHBvcnQgeyBTREtfTkFNRSwgU0RLX1ZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24nO1xuaW1wb3J0IHsgSW50ZWdyYXRpb25zIGFzIENvcmVJbnRlZ3JhdGlvbnMgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgZ2V0TWFpbkNhcnJpZXIgfSBmcm9tICdAc2VudHJ5L2h1Yic7XG5pbXBvcnQgKiBhcyBkb21haW4gZnJvbSAnZG9tYWluJztcbmltcG9ydCAqIGFzIEhhbmRsZXJzIGZyb20gJy4vaGFuZGxlcnMnO1xuaW1wb3J0ICogYXMgTm9kZUludGVncmF0aW9ucyBmcm9tICcuL2ludGVncmF0aW9ucyc7XG5pbXBvcnQgKiBhcyBUcmFuc3BvcnRzIGZyb20gJy4vdHJhbnNwb3J0cyc7XG52YXIgSU5URUdSQVRJT05TID0gX19hc3NpZ24oX19hc3NpZ24oe30sIENvcmVJbnRlZ3JhdGlvbnMpLCBOb2RlSW50ZWdyYXRpb25zKTtcbmV4cG9ydCB7IElOVEVHUkFUSU9OUyBhcyBJbnRlZ3JhdGlvbnMsIFRyYW5zcG9ydHMsIEhhbmRsZXJzIH07XG4vLyBXZSBuZWVkIHRvIHBhdGNoIGRvbWFpbiBvbiB0aGUgZ2xvYmFsIF9fU0VOVFJZX18gb2JqZWN0IHRvIG1ha2UgaXQgd29yayBmb3Igbm9kZSBpbiBjcm9zcy1wbGF0Zm9ybSBwYWNrYWdlcyBsaWtlXG4vLyBAc2VudHJ5L2h1Yi4gSWYgd2UgZG9uJ3QgZG8gdGhpcywgYnJvd3NlciBidW5kbGVycyB3aWxsIGhhdmUgdHJvdWJsZXMgcmVzb2x2aW5nIGByZXF1aXJlKCdkb21haW4nKWAuXG52YXIgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG5pZiAoY2Fycmllci5fX1NFTlRSWV9fKSB7XG4gICAgY2Fycmllci5fX1NFTlRSWV9fLmV4dGVuc2lvbnMgPSBjYXJyaWVyLl9fU0VOVFJZX18uZXh0ZW5zaW9ucyB8fCB7fTtcbiAgICBjYXJyaWVyLl9fU0VOVFJZX18uZXh0ZW5zaW9ucy5kb21haW4gPSBjYXJyaWVyLl9fU0VOVFJZX18uZXh0ZW5zaW9ucy5kb21haW4gfHwgZG9tYWluO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/console.js":
/*!************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/console.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Console: () => (/* binding */ Console)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/severity.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n\n\n/** Console module integration */\nvar Console = /** @class */ (function () {\n    function Console() {\n        /**\n         * @inheritDoc\n         */\n        this.name = Console.id;\n    }\n    /**\n     * @inheritDoc\n     */\n    Console.prototype.setupOnce = function () {\n        var e_1, _a;\n        var consoleModule = __webpack_require__(/*! console */ \"console\");\n        try {\n            for (var _b = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__values)(['debug', 'info', 'warn', 'error', 'log']), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var level = _c.value;\n                (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.fill)(consoleModule, level, createConsoleWrapper(level));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Console.id = 'Console';\n    return Console;\n}());\n\n/**\n * Wrapper function that'll be used for every console level\n */\nfunction createConsoleWrapper(level) {\n    return function consoleWrapper(originalConsoleMethod) {\n        var sentryLevel;\n        switch (level) {\n            case 'debug':\n                sentryLevel = _sentry_types__WEBPACK_IMPORTED_MODULE_3__.Severity.Debug;\n                break;\n            case 'error':\n                sentryLevel = _sentry_types__WEBPACK_IMPORTED_MODULE_3__.Severity.Error;\n                break;\n            case 'info':\n                sentryLevel = _sentry_types__WEBPACK_IMPORTED_MODULE_3__.Severity.Info;\n                break;\n            case 'warn':\n                sentryLevel = _sentry_types__WEBPACK_IMPORTED_MODULE_3__.Severity.Warning;\n                break;\n            default:\n                sentryLevel = _sentry_types__WEBPACK_IMPORTED_MODULE_3__.Severity.Log;\n        }\n        return function () {\n            if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.getCurrentHub)().getIntegration(Console)) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.getCurrentHub)().addBreadcrumb({\n                    category: 'console',\n                    level: sentryLevel,\n                    message: util__WEBPACK_IMPORTED_MODULE_0__.format.apply(undefined, arguments),\n                }, {\n                    input: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spread)(arguments),\n                    level: level,\n                });\n            }\n            originalConsoleMethod.apply(this, arguments);\n        };\n    };\n}\n//# sourceMappingURL=console.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQW1EO0FBQ047QUFDSjtBQUNKO0FBQ1I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQU8sQ0FBQyx3QkFBUztBQUM3QztBQUNBLDBCQUEwQiwrQ0FBUSw2REFBNkQsVUFBVTtBQUN6RztBQUNBLGdCQUFnQixtREFBSTtBQUNwQjtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ2tCO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbURBQVE7QUFDdEM7QUFDQTtBQUNBLDhCQUE4QixtREFBUTtBQUN0QztBQUNBO0FBQ0EsOEJBQThCLG1EQUFRO0FBQ3RDO0FBQ0E7QUFDQSw4QkFBOEIsbURBQVE7QUFDdEM7QUFDQTtBQUNBLDhCQUE4QixtREFBUTtBQUN0QztBQUNBO0FBQ0EsZ0JBQWdCLDJEQUFhO0FBQzdCLGdCQUFnQiwyREFBYTtBQUM3QjtBQUNBO0FBQ0EsNkJBQTZCLHdDQUFXO0FBQ3hDLGlCQUFpQjtBQUNqQiwyQkFBMkIsK0NBQVE7QUFDbkM7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2ludGVncmF0aW9ucy9jb25zb2xlLmpzPzFiZmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZCwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgU2V2ZXJpdHkgfSBmcm9tICdAc2VudHJ5L3R5cGVzJztcbmltcG9ydCB7IGZpbGwgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG4vKiogQ29uc29sZSBtb2R1bGUgaW50ZWdyYXRpb24gKi9cbnZhciBDb25zb2xlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnNvbGUoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gQ29uc29sZS5pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBDb25zb2xlLnByb3RvdHlwZS5zZXR1cE9uY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB2YXIgY29uc29sZU1vZHVsZSA9IHJlcXVpcmUoJ2NvbnNvbGUnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnbG9nJ10pLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgZmlsbChjb25zb2xlTW9kdWxlLCBsZXZlbCwgY3JlYXRlQ29uc29sZVdyYXBwZXIobGV2ZWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIENvbnNvbGUuaWQgPSAnQ29uc29sZSc7XG4gICAgcmV0dXJuIENvbnNvbGU7XG59KCkpO1xuZXhwb3J0IHsgQ29uc29sZSB9O1xuLyoqXG4gKiBXcmFwcGVyIGZ1bmN0aW9uIHRoYXQnbGwgYmUgdXNlZCBmb3IgZXZlcnkgY29uc29sZSBsZXZlbFxuICovXG5mdW5jdGlvbiBjcmVhdGVDb25zb2xlV3JhcHBlcihsZXZlbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb25zb2xlV3JhcHBlcihvcmlnaW5hbENvbnNvbGVNZXRob2QpIHtcbiAgICAgICAgdmFyIHNlbnRyeUxldmVsO1xuICAgICAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICAgICAgICBjYXNlICdkZWJ1Zyc6XG4gICAgICAgICAgICAgICAgc2VudHJ5TGV2ZWwgPSBTZXZlcml0eS5EZWJ1ZztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgICAgICAgICBzZW50cnlMZXZlbCA9IFNldmVyaXR5LkVycm9yO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaW5mbyc6XG4gICAgICAgICAgICAgICAgc2VudHJ5TGV2ZWwgPSBTZXZlcml0eS5JbmZvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Fybic6XG4gICAgICAgICAgICAgICAgc2VudHJ5TGV2ZWwgPSBTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzZW50cnlMZXZlbCA9IFNldmVyaXR5LkxvZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihDb25zb2xlKSkge1xuICAgICAgICAgICAgICAgIGdldEN1cnJlbnRIdWIoKS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdjb25zb2xlJyxcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IHNlbnRyeUxldmVsLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB1dGlsLmZvcm1hdC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dDogX19zcHJlYWQoYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IGxldmVsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3JpZ2luYWxDb25zb2xlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnNvbGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/console.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/http.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/http.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Http: () => (/* binding */ Http)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/object.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _utils_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/http */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/utils/http.js\");\n\n\n\n\nvar NODE_VERSION = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_1__.parseSemver)(process.versions.node);\n/** http module integration */\nvar Http = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function Http(options) {\n        if (options === void 0) { options = {}; }\n        /**\n         * @inheritDoc\n         */\n        this.name = Http.id;\n        this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n        this._tracing = typeof options.tracing === 'undefined' ? false : options.tracing;\n    }\n    /**\n     * @inheritDoc\n     */\n    Http.prototype.setupOnce = function () {\n        // No need to instrument if we don't want to track anything\n        if (!this._breadcrumbs && !this._tracing) {\n            return;\n        }\n        var wrappedHandlerMaker = _createWrappedRequestMethodFactory(this._breadcrumbs, this._tracing);\n        var httpModule = __webpack_require__(/*! http */ \"http\");\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.fill)(httpModule, 'get', wrappedHandlerMaker);\n        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.fill)(httpModule, 'request', wrappedHandlerMaker);\n        // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n        // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n        // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n        if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n            var httpsModule = __webpack_require__(/*! https */ \"https\");\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.fill)(httpsModule, 'get', wrappedHandlerMaker);\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.fill)(httpsModule, 'request', wrappedHandlerMaker);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Http.id = 'Http';\n    return Http;\n}());\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(breadcrumbsEnabled, tracingEnabled) {\n    return function wrappedRequestMethodFactory(originalRequestMethod) {\n        return function wrappedMethod() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var httpModule = this;\n            var requestArgs = (0,_utils_http__WEBPACK_IMPORTED_MODULE_0__.normalizeRequestArgs)(args);\n            var requestOptions = requestArgs[0];\n            var requestUrl = (0,_utils_http__WEBPACK_IMPORTED_MODULE_0__.extractUrl)(requestOptions);\n            // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n            if ((0,_utils_http__WEBPACK_IMPORTED_MODULE_0__.isSentryRequest)(requestUrl)) {\n                return originalRequestMethod.apply(httpModule, requestArgs);\n            }\n            var span;\n            var parentSpan;\n            var scope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)().getScope();\n            if (scope && tracingEnabled) {\n                parentSpan = scope.getSpan();\n                if (parentSpan) {\n                    span = parentSpan.startChild({\n                        description: (requestOptions.method || 'GET') + \" \" + requestUrl,\n                        op: 'request',\n                    });\n                    var sentryTraceHeader = span.toTraceparent();\n                    _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.logger.log(\"[Tracing] Adding sentry-trace header to outgoing request: \" + sentryTraceHeader);\n                    requestOptions.headers = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_5__.__assign)({}, requestOptions.headers), { 'sentry-trace': sentryTraceHeader });\n                }\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return originalRequestMethod\n                .apply(httpModule, requestArgs)\n                .once('response', function (res) {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                var req = this;\n                if (breadcrumbsEnabled) {\n                    addRequestBreadcrumb('response', requestUrl, req, res);\n                }\n                if (tracingEnabled && span) {\n                    if (res.statusCode) {\n                        span.setHttpStatus(res.statusCode);\n                    }\n                    span.description = (0,_utils_http__WEBPACK_IMPORTED_MODULE_0__.cleanSpanDescription)(span.description, requestOptions, req);\n                    span.finish();\n                }\n            })\n                .once('error', function () {\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                var req = this;\n                if (breadcrumbsEnabled) {\n                    addRequestBreadcrumb('error', requestUrl, req);\n                }\n                if (tracingEnabled && span) {\n                    span.setHttpStatus(500);\n                    span.description = (0,_utils_http__WEBPACK_IMPORTED_MODULE_0__.cleanSpanDescription)(span.description, requestOptions, req);\n                    span.finish();\n                }\n            });\n        };\n    };\n}\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(event, url, req, res) {\n    if (!(0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)().getIntegration(Http)) {\n        return;\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getCurrentHub)().addBreadcrumb({\n        category: 'http',\n        data: {\n            method: req.method,\n            status_code: res && res.statusCode,\n            url: url,\n        },\n        type: 'http',\n    }, {\n        event: event,\n        request: req,\n        response: res,\n    });\n}\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Console: () => (/* reexport safe */ _console__WEBPACK_IMPORTED_MODULE_0__.Console),\n/* harmony export */   Http: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.Http),\n/* harmony export */   LinkedErrors: () => (/* reexport safe */ _linkederrors__WEBPACK_IMPORTED_MODULE_4__.LinkedErrors),\n/* harmony export */   Modules: () => (/* reexport safe */ _modules__WEBPACK_IMPORTED_MODULE_5__.Modules),\n/* harmony export */   OnUncaughtException: () => (/* reexport safe */ _onuncaughtexception__WEBPACK_IMPORTED_MODULE_2__.OnUncaughtException),\n/* harmony export */   OnUnhandledRejection: () => (/* reexport safe */ _onunhandledrejection__WEBPACK_IMPORTED_MODULE_3__.OnUnhandledRejection)\n/* harmony export */ });\n/* harmony import */ var _console__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./console */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/console.js\");\n/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/http.js\");\n/* harmony import */ var _onuncaughtexception__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./onuncaughtexception */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onuncaughtexception.js\");\n/* harmony import */ var _onunhandledrejection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./onunhandledrejection */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onunhandledrejection.js\");\n/* harmony import */ var _linkederrors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./linkederrors */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/linkederrors.js\");\n/* harmony import */ var _modules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/modules.js\");\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ047QUFDOEI7QUFDRTtBQUNoQjtBQUNWO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2ludGVncmF0aW9ucy9pbmRleC5qcz8xYzc5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IENvbnNvbGUgfSBmcm9tICcuL2NvbnNvbGUnO1xuZXhwb3J0IHsgSHR0cCB9IGZyb20gJy4vaHR0cCc7XG5leHBvcnQgeyBPblVuY2F1Z2h0RXhjZXB0aW9uIH0gZnJvbSAnLi9vbnVuY2F1Z2h0ZXhjZXB0aW9uJztcbmV4cG9ydCB7IE9uVW5oYW5kbGVkUmVqZWN0aW9uIH0gZnJvbSAnLi9vbnVuaGFuZGxlZHJlamVjdGlvbic7XG5leHBvcnQgeyBMaW5rZWRFcnJvcnMgfSBmcm9tICcuL2xpbmtlZGVycm9ycyc7XG5leHBvcnQgeyBNb2R1bGVzIH0gZnJvbSAnLi9tb2R1bGVzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/linkederrors.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/linkederrors.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinkedErrors: () => (/* binding */ LinkedErrors)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/is.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parsers */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/parsers.js\");\n\n\n\n\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\nvar LinkedErrors = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function LinkedErrors(options) {\n        if (options === void 0) { options = {}; }\n        /**\n         * @inheritDoc\n         */\n        this.name = LinkedErrors.id;\n        this._key = options.key || DEFAULT_KEY;\n        this._limit = options.limit || DEFAULT_LIMIT;\n    }\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.prototype.setupOnce = function () {\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.addGlobalEventProcessor)(function (event, hint) {\n            var self = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCurrentHub)().getIntegration(LinkedErrors);\n            if (self) {\n                var handler = self._handler && self._handler.bind(self);\n                return typeof handler === 'function' ? handler(event, hint) : event;\n            }\n            return event;\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.prototype._handler = function (event, hint) {\n        var _this = this;\n        if (!event.exception || !event.exception.values || !hint || !(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isInstanceOf)(hint.originalException, Error)) {\n            return _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise.resolve(event);\n        }\n        return new _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise(function (resolve) {\n            _this._walkErrorTree(hint.originalException, _this._key)\n                .then(function (linkedErrors) {\n                if (event && event.exception && event.exception.values) {\n                    event.exception.values = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__spread)(linkedErrors, event.exception.values);\n                }\n                resolve(event);\n            })\n                .then(null, function () {\n                resolve(event);\n            });\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n        var _this = this;\n        if (stack === void 0) { stack = []; }\n        if (!(0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.isInstanceOf)(error[key], Error) || stack.length + 1 >= this._limit) {\n            return _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise.resolve(stack);\n        }\n        return new _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise(function (resolve, reject) {\n            (0,_parsers__WEBPACK_IMPORTED_MODULE_0__.getExceptionFromError)(error[key])\n                .then(function (exception) {\n                _this._walkErrorTree(error[key], key, (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__spread)([exception], stack))\n                    .then(resolve)\n                    .then(null, function () {\n                    reject();\n                });\n            })\n                .then(null, function () {\n                reject();\n            });\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    LinkedErrors.id = 'LinkedErrors';\n    return LinkedErrors;\n}());\n\n//# sourceMappingURL=linkederrors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBeUM7QUFDNkI7QUFDWjtBQUNQO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscUVBQXVCO0FBQy9CLHVCQUF1QiwyREFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSwyREFBWTtBQUNqRixtQkFBbUIsc0RBQVc7QUFDOUI7QUFDQSxtQkFBbUIsc0RBQVc7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLCtDQUFRO0FBQ3JEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLGFBQWEsMkRBQVk7QUFDekIsbUJBQW1CLHNEQUFXO0FBQzlCO0FBQ0EsbUJBQW1CLHNEQUFXO0FBQzlCLFlBQVksK0RBQXFCO0FBQ2pDO0FBQ0Esc0RBQXNELCtDQUFRO0FBQzlEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUN1QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzP2NkM2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IsIGdldEN1cnJlbnRIdWIgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgaXNJbnN0YW5jZU9mLCBTeW5jUHJvbWlzZSB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0RXhjZXB0aW9uRnJvbUVycm9yIH0gZnJvbSAnLi4vcGFyc2Vycyc7XG52YXIgREVGQVVMVF9LRVkgPSAnY2F1c2UnO1xudmFyIERFRkFVTFRfTElNSVQgPSA1O1xuLyoqIEFkZHMgU0RLIGluZm8gdG8gYW4gZXZlbnQuICovXG52YXIgTGlua2VkRXJyb3JzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlua2VkRXJyb3JzKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBMaW5rZWRFcnJvcnMuaWQ7XG4gICAgICAgIHRoaXMuX2tleSA9IG9wdGlvbnMua2V5IHx8IERFRkFVTFRfS0VZO1xuICAgICAgICB0aGlzLl9saW1pdCA9IG9wdGlvbnMubGltaXQgfHwgREVGQVVMVF9MSU1JVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkR2xvYmFsRXZlbnRQcm9jZXNzb3IoZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IGdldEN1cnJlbnRIdWIoKS5nZXRJbnRlZ3JhdGlvbihMaW5rZWRFcnJvcnMpO1xuICAgICAgICAgICAgaWYgKHNlbGYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IHNlbGYuX2hhbmRsZXIgJiYgc2VsZi5faGFuZGxlci5iaW5kKHNlbGYpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyA/IGhhbmRsZXIoZXZlbnQsIGhpbnQpIDogZXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLl9oYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50LCBoaW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghZXZlbnQuZXhjZXB0aW9uIHx8ICFldmVudC5leGNlcHRpb24udmFsdWVzIHx8ICFoaW50IHx8ICFpc0luc3RhbmNlT2YoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgX3RoaXMuX3dhbGtFcnJvclRyZWUoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgX3RoaXMuX2tleSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobGlua2VkRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmV4Y2VwdGlvbiAmJiBldmVudC5leGNlcHRpb24udmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPSBfX3NwcmVhZChsaW5rZWRFcnJvcnMsIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBMaW5rZWRFcnJvcnMucHJvdG90eXBlLl93YWxrRXJyb3JUcmVlID0gZnVuY3Rpb24gKGVycm9yLCBrZXksIHN0YWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChzdGFjayA9PT0gdm9pZCAwKSB7IHN0YWNrID0gW107IH1cbiAgICAgICAgaWYgKCFpc0luc3RhbmNlT2YoZXJyb3Jba2V5XSwgRXJyb3IpIHx8IHN0YWNrLmxlbmd0aCArIDEgPj0gdGhpcy5fbGltaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBTeW5jUHJvbWlzZS5yZXNvbHZlKHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGdldEV4Y2VwdGlvbkZyb21FcnJvcihlcnJvcltrZXldKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fd2Fsa0Vycm9yVHJlZShlcnJvcltrZXldLCBrZXksIF9fc3ByZWFkKFtleGNlcHRpb25dLCBzdGFjaykpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc29sdmUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTGlua2VkRXJyb3JzLmlkID0gJ0xpbmtlZEVycm9ycyc7XG4gICAgcmV0dXJuIExpbmtlZEVycm9ycztcbn0oKSk7XG5leHBvcnQgeyBMaW5rZWRFcnJvcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmtlZGVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/linkederrors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/modules.js":
/*!************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/modules.js ***!
  \************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Modules: () => (/* binding */ Modules)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar moduleCache;\n/** Extract information about paths */\nfunction getPaths() {\n    try {\n        return __webpack_require__.c ? Object.keys(__webpack_require__.c) : [];\n    }\n    catch (e) {\n        return [];\n    }\n}\n/** Extract information about package.json modules */\nfunction collectModules() {\n    var mainPaths = (__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths) || [];\n    var paths = getPaths();\n    var infos = {};\n    var seen = {};\n    paths.forEach(function (path) {\n        var dir = path;\n        /** Traverse directories upward in the search of package.json file */\n        var updir = function () {\n            var orig = dir;\n            dir = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)(orig);\n            if (!dir || orig === dir || seen[orig]) {\n                return undefined;\n            }\n            if (mainPaths.indexOf(dir) < 0) {\n                return updir();\n            }\n            var pkgfile = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(orig, 'package.json');\n            seen[orig] = true;\n            if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(pkgfile)) {\n                return updir();\n            }\n            try {\n                var info = JSON.parse((0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(pkgfile, 'utf8'));\n                infos[info.name] = info.version;\n            }\n            catch (_oO) {\n                // no-empty\n            }\n        };\n        updir();\n    });\n    return infos;\n}\n/** Add node modules / packages to the event */\nvar Modules = /** @class */ (function () {\n    function Modules() {\n        /**\n         * @inheritDoc\n         */\n        this.name = Modules.id;\n    }\n    /**\n     * @inheritDoc\n     */\n    Modules.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n        var _this = this;\n        addGlobalEventProcessor(function (event) {\n            if (!getCurrentHub().getIntegration(Modules)) {\n                return event;\n            }\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, event), { modules: _this._getModules() });\n        });\n    };\n    /** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\n    Modules.prototype._getModules = function () {\n        if (!moduleCache) {\n            moduleCache = collectModules();\n        }\n        return moduleCache;\n    };\n    /**\n     * @inheritDoc\n     */\n    Modules.id = 'Modules';\n    return Modules;\n}());\n\n//# sourceMappingURL=modules.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUM7QUFDYTtBQUNUO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQkFBYSxlQUFlLHFCQUFhO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRDQUFZLElBQUksNENBQVk7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2Q0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMENBQUk7QUFDOUI7QUFDQSxpQkFBaUIsOENBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGdEQUFZO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLCtDQUFRLENBQUMsK0NBQVEsR0FBRyxZQUFZLDhCQUE4QjtBQUNqRixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ2tCO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL2ludGVncmF0aW9ucy9tb2R1bGVzLmpzPzM1YzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24gfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGV4aXN0c1N5bmMsIHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IGRpcm5hbWUsIGpvaW4gfSBmcm9tICdwYXRoJztcbnZhciBtb2R1bGVDYWNoZTtcbi8qKiBFeHRyYWN0IGluZm9ybWF0aW9uIGFib3V0IHBhdGhzICovXG5mdW5jdGlvbiBnZXRQYXRocygpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZS5jYWNoZSA/IE9iamVjdC5rZXlzKHJlcXVpcmUuY2FjaGUpIDogW107XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYWNrYWdlLmpzb24gbW9kdWxlcyAqL1xuZnVuY3Rpb24gY29sbGVjdE1vZHVsZXMoKSB7XG4gICAgdmFyIG1haW5QYXRocyA9IChyZXF1aXJlLm1haW4gJiYgcmVxdWlyZS5tYWluLnBhdGhzKSB8fCBbXTtcbiAgICB2YXIgcGF0aHMgPSBnZXRQYXRocygpO1xuICAgIHZhciBpbmZvcyA9IHt9O1xuICAgIHZhciBzZWVuID0ge307XG4gICAgcGF0aHMuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgZGlyID0gcGF0aDtcbiAgICAgICAgLyoqIFRyYXZlcnNlIGRpcmVjdG9yaWVzIHVwd2FyZCBpbiB0aGUgc2VhcmNoIG9mIHBhY2thZ2UuanNvbiBmaWxlICovXG4gICAgICAgIHZhciB1cGRpciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvcmlnID0gZGlyO1xuICAgICAgICAgICAgZGlyID0gZGlybmFtZShvcmlnKTtcbiAgICAgICAgICAgIGlmICghZGlyIHx8IG9yaWcgPT09IGRpciB8fCBzZWVuW29yaWddKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYWluUGF0aHMuaW5kZXhPZihkaXIpIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cGRpcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBrZ2ZpbGUgPSBqb2luKG9yaWcsICdwYWNrYWdlLmpzb24nKTtcbiAgICAgICAgICAgIHNlZW5bb3JpZ10gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFleGlzdHNTeW5jKHBrZ2ZpbGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGlyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBpbmZvID0gSlNPTi5wYXJzZShyZWFkRmlsZVN5bmMocGtnZmlsZSwgJ3V0ZjgnKSk7XG4gICAgICAgICAgICAgICAgaW5mb3NbaW5mby5uYW1lXSA9IGluZm8udmVyc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfb08pIHtcbiAgICAgICAgICAgICAgICAvLyBuby1lbXB0eVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB1cGRpcigpO1xuICAgIH0pO1xuICAgIHJldHVybiBpbmZvcztcbn1cbi8qKiBBZGQgbm9kZSBtb2R1bGVzIC8gcGFja2FnZXMgdG8gdGhlIGV2ZW50ICovXG52YXIgTW9kdWxlcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2R1bGVzKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IE1vZHVsZXMuaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgTW9kdWxlcy5wcm90b3R5cGUuc2V0dXBPbmNlID0gZnVuY3Rpb24gKGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yLCBnZXRDdXJyZW50SHViKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGFkZEdsb2JhbEV2ZW50UHJvY2Vzc29yKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCFnZXRDdXJyZW50SHViKCkuZ2V0SW50ZWdyYXRpb24oTW9kdWxlcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50KSwgeyBtb2R1bGVzOiBfdGhpcy5fZ2V0TW9kdWxlcygpIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKiBGZXRjaGVzIHRoZSBsaXN0IG9mIG1vZHVsZXMgYW5kIHRoZSB2ZXJzaW9ucyBsb2FkZWQgYnkgdGhlIGVudHJ5IGZpbGUgZm9yIHlvdXIgbm9kZS5qcyBhcHAuICovXG4gICAgTW9kdWxlcy5wcm90b3R5cGUuX2dldE1vZHVsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghbW9kdWxlQ2FjaGUpIHtcbiAgICAgICAgICAgIG1vZHVsZUNhY2hlID0gY29sbGVjdE1vZHVsZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kdWxlQ2FjaGU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIE1vZHVsZXMuaWQgPSAnTW9kdWxlcyc7XG4gICAgcmV0dXJuIE1vZHVsZXM7XG59KCkpO1xuZXhwb3J0IHsgTW9kdWxlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/modules.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onuncaughtexception.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onuncaughtexception.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnUncaughtException: () => (/* binding */ OnUncaughtException)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/severity.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var _handlers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../handlers */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/handlers.js\");\n\n\n\n\n/** Global Promise Rejection handler */\nvar OnUncaughtException = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function OnUncaughtException(_options) {\n        if (_options === void 0) { _options = {}; }\n        this._options = _options;\n        /**\n         * @inheritDoc\n         */\n        this.name = OnUncaughtException.id;\n        /**\n         * @inheritDoc\n         */\n        this.handler = this._makeErrorHandler();\n    }\n    /**\n     * @inheritDoc\n     */\n    OnUncaughtException.prototype.setupOnce = function () {\n        global.process.on('uncaughtException', this.handler.bind(this));\n    };\n    /**\n     * @hidden\n     */\n    OnUncaughtException.prototype._makeErrorHandler = function () {\n        var _this = this;\n        var timeout = 2000;\n        var caughtFirstError = false;\n        var caughtSecondError = false;\n        var calledFatalError = false;\n        var firstError;\n        return function (error) {\n            var onFatalError = _handlers__WEBPACK_IMPORTED_MODULE_0__.logAndExitProcess;\n            var client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)().getClient();\n            if (_this._options.onFatalError) {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onFatalError = _this._options.onFatalError;\n            }\n            else if (client && client.getOptions().onFatalError) {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                onFatalError = client.getOptions().onFatalError;\n            }\n            if (!caughtFirstError) {\n                var hub_1 = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n                // this is the first uncaught error and the ultimate reason for shutting down\n                // we want to do absolutely everything possible to ensure it gets captured\n                // also we want to make sure we don't go recursion crazy if more errors happen after this one\n                firstError = error;\n                caughtFirstError = true;\n                if (hub_1.getIntegration(OnUncaughtException)) {\n                    hub_1.withScope(function (scope) {\n                        scope.setLevel(_sentry_types__WEBPACK_IMPORTED_MODULE_2__.Severity.Fatal);\n                        hub_1.captureException(error, { originalException: error });\n                        if (!calledFatalError) {\n                            calledFatalError = true;\n                            onFatalError(error);\n                        }\n                    });\n                }\n                else {\n                    if (!calledFatalError) {\n                        calledFatalError = true;\n                        onFatalError(error);\n                    }\n                }\n            }\n            else if (calledFatalError) {\n                // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n                _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.logger.warn('uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown');\n                (0,_handlers__WEBPACK_IMPORTED_MODULE_0__.logAndExitProcess)(error);\n            }\n            else if (!caughtSecondError) {\n                // two cases for how we can hit this branch:\n                //   - capturing of first error blew up and we just caught the exception from that\n                //     - quit trying to capture, proceed with shutdown\n                //   - a second independent error happened while waiting for first error to capture\n                //     - want to avoid causing premature shutdown before first error capture finishes\n                // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n                // so let's instead just delay a bit before we proceed with our action here\n                // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n                // in case 2, the delay hopefully made us wait long enough for the capture to finish\n                // two potential nonideal outcomes:\n                //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n                //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n                // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n                //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n                caughtSecondError = true;\n                setTimeout(function () {\n                    if (!calledFatalError) {\n                        // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                        calledFatalError = true;\n                        onFatalError(firstError, error);\n                    }\n                    else {\n                        // it was probably case 2, our first error finished capturing while we waited, cool, do nothing\n                    }\n                }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n            }\n        };\n    };\n    /**\n     * @inheritDoc\n     */\n    OnUncaughtException.id = 'OnUncaughtException';\n    return OnUncaughtException;\n}());\n\n//# sourceMappingURL=onuncaughtexception.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onunhandledrejection.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onunhandledrejection.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnUnhandledRejection: () => (/* binding */ OnUnhandledRejection)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _handlers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../handlers */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/handlers.js\");\n\n\n\n/** Global Promise Rejection handler */\nvar OnUnhandledRejection = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function OnUnhandledRejection(_options) {\n        if (_options === void 0) { _options = { mode: 'warn' }; }\n        this._options = _options;\n        /**\n         * @inheritDoc\n         */\n        this.name = OnUnhandledRejection.id;\n    }\n    /**\n     * @inheritDoc\n     */\n    OnUnhandledRejection.prototype.setupOnce = function () {\n        global.process.on('unhandledRejection', this.sendUnhandledPromise.bind(this));\n    };\n    /**\n     * Send an exception with reason\n     * @param reason string\n     * @param promise promise\n     */\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\n    OnUnhandledRejection.prototype.sendUnhandledPromise = function (reason, promise) {\n        var hub = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)();\n        if (!hub.getIntegration(OnUnhandledRejection)) {\n            this._handleRejection(reason);\n            return;\n        }\n        /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n        var context = (promise.domain && promise.domain.sentryContext) || {};\n        hub.withScope(function (scope) {\n            scope.setExtra('unhandledPromiseRejection', true);\n            // Preserve backwards compatibility with raven-node for now\n            if (context.user) {\n                scope.setUser(context.user);\n            }\n            if (context.tags) {\n                scope.setTags(context.tags);\n            }\n            if (context.extra) {\n                scope.setExtras(context.extra);\n            }\n            hub.captureException(reason, { originalException: promise });\n        });\n        /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n        this._handleRejection(reason);\n    };\n    /**\n     * Handler for `mode` option\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    OnUnhandledRejection.prototype._handleRejection = function (reason) {\n        // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n        var rejectionWarning = 'This error originated either by ' +\n            'throwing inside of an async function without a catch block, ' +\n            'or by rejecting a promise which was not handled with .catch().' +\n            ' The promise rejected with the reason:';\n        /* eslint-disable no-console */\n        if (this._options.mode === 'warn') {\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.consoleSandbox)(function () {\n                console.warn(rejectionWarning);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                console.error(reason && reason.stack ? reason.stack : reason);\n            });\n        }\n        else if (this._options.mode === 'strict') {\n            (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_2__.consoleSandbox)(function () {\n                console.warn(rejectionWarning);\n            });\n            (0,_handlers__WEBPACK_IMPORTED_MODULE_0__.logAndExitProcess)(reason);\n        }\n        /* eslint-enable no-console */\n    };\n    /**\n     * @inheritDoc\n     */\n    OnUnhandledRejection.id = 'OnUnhandledRejection';\n    return OnUnhandledRejection;\n}());\n\n//# sourceMappingURL=onunhandledrejection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QztBQUNFO0FBQ0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGFBQWE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMkRBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLDRCQUE0QjtBQUN2RSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw2REFBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFlBQVksNkRBQWM7QUFDMUI7QUFDQSxhQUFhO0FBQ2IsWUFBWSw0REFBaUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDK0I7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzP2RhZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q3VycmVudEh1YiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBjb25zb2xlU2FuZGJveCB9IGZyb20gJ0BzZW50cnkvdXRpbHMnO1xuaW1wb3J0IHsgbG9nQW5kRXhpdFByb2Nlc3MgfSBmcm9tICcuLi9oYW5kbGVycyc7XG4vKiogR2xvYmFsIFByb21pc2UgUmVqZWN0aW9uIGhhbmRsZXIgKi9cbnZhciBPblVuaGFuZGxlZFJlamVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIE9uVW5oYW5kbGVkUmVqZWN0aW9uKF9vcHRpb25zKSB7XG4gICAgICAgIGlmIChfb3B0aW9ucyA9PT0gdm9pZCAwKSB7IF9vcHRpb25zID0geyBtb2RlOiAnd2FybicgfTsgfVxuICAgICAgICB0aGlzLl9vcHRpb25zID0gX29wdGlvbnM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gT25VbmhhbmRsZWRSZWplY3Rpb24uaWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgT25VbmhhbmRsZWRSZWplY3Rpb24ucHJvdG90eXBlLnNldHVwT25jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2xvYmFsLnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIHRoaXMuc2VuZFVuaGFuZGxlZFByb21pc2UuYmluZCh0aGlzKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIGV4Y2VwdGlvbiB3aXRoIHJlYXNvblxuICAgICAqIEBwYXJhbSByZWFzb24gc3RyaW5nXG4gICAgICogQHBhcmFtIHByb21pc2UgcHJvbWlzZVxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgT25VbmhhbmRsZWRSZWplY3Rpb24ucHJvdG90eXBlLnNlbmRVbmhhbmRsZWRQcm9taXNlID0gZnVuY3Rpb24gKHJlYXNvbiwgcHJvbWlzZSkge1xuICAgICAgICB2YXIgaHViID0gZ2V0Q3VycmVudEh1YigpO1xuICAgICAgICBpZiAoIWh1Yi5nZXRJbnRlZ3JhdGlvbihPblVuaGFuZGxlZFJlamVjdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVJlamVjdGlvbihyZWFzb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgICAgICB2YXIgY29udGV4dCA9IChwcm9taXNlLmRvbWFpbiAmJiBwcm9taXNlLmRvbWFpbi5zZW50cnlDb250ZXh0KSB8fCB7fTtcbiAgICAgICAgaHViLndpdGhTY29wZShmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgICAgICAgIHNjb3BlLnNldEV4dHJhKCd1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uJywgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBQcmVzZXJ2ZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIHJhdmVuLW5vZGUgZm9yIG5vd1xuICAgICAgICAgICAgaWYgKGNvbnRleHQudXNlcikge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNldFVzZXIoY29udGV4dC51c2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb250ZXh0LnRhZ3MpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zZXRUYWdzKGNvbnRleHQudGFncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29udGV4dC5leHRyYSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNldEV4dHJhcyhjb250ZXh0LmV4dHJhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh1Yi5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwgeyBvcmlnaW5hbEV4Y2VwdGlvbjogcHJvbWlzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuICAgICAgICB0aGlzLl9oYW5kbGVSZWplY3Rpb24ocmVhc29uKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgZm9yIGBtb2RlYCBvcHRpb25cbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIE9uVW5oYW5kbGVkUmVqZWN0aW9uLnByb3RvdHlwZS5faGFuZGxlUmVqZWN0aW9uID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi83Y2Y2ZjllOTY0YWEwMDc3Mjk2NTM5MWMyM2FjZGE2ZDcxOTcyYTlhL2xpYi9pbnRlcm5hbC9wcm9jZXNzL3Byb21pc2VzLmpzI0wyMzQtTDI0MFxuICAgICAgICB2YXIgcmVqZWN0aW9uV2FybmluZyA9ICdUaGlzIGVycm9yIG9yaWdpbmF0ZWQgZWl0aGVyIGJ5ICcgK1xuICAgICAgICAgICAgJ3Rocm93aW5nIGluc2lkZSBvZiBhbiBhc3luYyBmdW5jdGlvbiB3aXRob3V0IGEgY2F0Y2ggYmxvY2ssICcgK1xuICAgICAgICAgICAgJ29yIGJ5IHJlamVjdGluZyBhIHByb21pc2Ugd2hpY2ggd2FzIG5vdCBoYW5kbGVkIHdpdGggLmNhdGNoKCkuJyArXG4gICAgICAgICAgICAnIFRoZSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbjonO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgIGlmICh0aGlzLl9vcHRpb25zLm1vZGUgPT09ICd3YXJuJykge1xuICAgICAgICAgICAgY29uc29sZVNhbmRib3goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZWFzb24gJiYgcmVhc29uLnN0YWNrID8gcmVhc29uLnN0YWNrIDogcmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX29wdGlvbnMubW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGVTYW5kYm94KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxvZ0FuZEV4aXRQcm9jZXNzKHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAaW5oZXJpdERvY1xuICAgICAqL1xuICAgIE9uVW5oYW5kbGVkUmVqZWN0aW9uLmlkID0gJ09uVW5oYW5kbGVkUmVqZWN0aW9uJztcbiAgICByZXR1cm4gT25VbmhhbmRsZWRSZWplY3Rpb247XG59KCkpO1xuZXhwb3J0IHsgT25VbmhhbmRsZWRSZWplY3Rpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9udW5oYW5kbGVkcmVqZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/utils/http.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/utils/http.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanSpanDescription: () => (/* binding */ cleanSpanDescription),\n/* harmony export */   extractUrl: () => (/* binding */ extractUrl),\n/* harmony export */   isSentryRequest: () => (/* binding */ isSentryRequest),\n/* harmony export */   normalizeRequestArgs: () => (/* binding */ normalizeRequestArgs),\n/* harmony export */   urlToOptions: () => (/* binding */ urlToOptions)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n/**\n * Checks whether given url points to Sentry server\n * @param url url to verify\n */\nfunction isSentryRequest(url) {\n    var _a;\n    var dsn = (_a = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.getCurrentHub)()\n        .getClient()) === null || _a === void 0 ? void 0 : _a.getDsn();\n    return dsn ? url.includes(dsn.host) : false;\n}\n/**\n * Assemble a URL to be used for breadcrumbs and spans.\n *\n * @param requestOptions RequestOptions object containing the component parts for a URL\n * @returns Fully-formed URL\n */\nfunction extractUrl(requestOptions) {\n    var protocol = requestOptions.protocol || '';\n    var hostname = requestOptions.hostname || requestOptions.host || '';\n    // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n    var port = !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 ? '' : \":\" + requestOptions.port;\n    var path = requestOptions.path ? requestOptions.path : '/';\n    return protocol + \"//\" + hostname + port + path;\n}\n/**\n * Handle various edge cases in the span description (for spans representing http(s) requests).\n *\n * @param description current `description` property of the span representing the request\n * @param requestOptions Configuration data for the request\n * @param Request Request object\n *\n * @returns The cleaned description\n */\nfunction cleanSpanDescription(description, requestOptions, request) {\n    var _a, _b, _c;\n    // nothing to clean\n    if (!description) {\n        return description;\n    }\n    // eslint-disable-next-line prefer-const\n    var _d = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)(description.split(' '), 2), method = _d[0], requestUrl = _d[1];\n    // superagent sticks the protocol in a weird place (we check for host because if both host *and* protocol are missing,\n    // we're likely dealing with an internal route and this doesn't apply)\n    if (requestOptions.host && !requestOptions.protocol) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n        requestOptions.protocol = (_b = (_a = request) === null || _a === void 0 ? void 0 : _a.agent) === null || _b === void 0 ? void 0 : _b.protocol; // worst comes to worst, this is undefined and nothing changes\n        requestUrl = extractUrl(requestOptions);\n    }\n    // internal routes can end up starting with a triple slash rather than a single one\n    if ((_c = requestUrl) === null || _c === void 0 ? void 0 : _c.startsWith('///')) {\n        requestUrl = requestUrl.slice(2);\n    }\n    return method + \" \" + requestUrl;\n}\n/**\n * Convert a URL object into a RequestOptions object.\n *\n * Copied from Node's internals (where it's used in http(s).request() and http(s).get()), modified only to use the\n * RequestOptions type above.\n *\n * See https://github.com/nodejs/node/blob/master/lib/internal/url.js.\n */\nfunction urlToOptions(url) {\n    var options = {\n        protocol: url.protocol,\n        hostname: typeof url.hostname === 'string' && url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,\n        hash: url.hash,\n        search: url.search,\n        pathname: url.pathname,\n        path: \"\" + (url.pathname || '') + (url.search || ''),\n        href: url.href,\n    };\n    if (url.port !== '') {\n        options.port = Number(url.port);\n    }\n    if (url.username || url.password) {\n        options.auth = url.username + \":\" + url.password;\n    }\n    return options;\n}\n/**\n * Normalize inputs to `http(s).request()` and `http(s).get()`.\n *\n * Legal inputs to `http(s).request()` and `http(s).get()` can take one of ten forms:\n *     [ RequestOptions | string | URL ],\n *     [ RequestOptions | string | URL, RequestCallback ],\n *     [ string | URL, RequestOptions ], and\n *     [ string | URL, RequestOptions, RequestCallback ].\n *\n * This standardizes to one of two forms: [ RequestOptions ] and [ RequestOptions, RequestCallback ]. A similar thing is\n * done as the first step of `http(s).request()` and `http(s).get()`; this just does it early so that we can interact\n * with the args in a standard way.\n *\n * @param requestArgs The inputs to `http(s).request()` or `http(s).get()`, as an array.\n *\n * @returns Equivalent args of the form [ RequestOptions ] or [ RequestOptions, RequestCallback ].\n */\nfunction normalizeRequestArgs(requestArgs) {\n    var callback, requestOptions;\n    // pop off the callback, if there is one\n    if (typeof requestArgs[requestArgs.length - 1] === 'function') {\n        callback = requestArgs.pop();\n    }\n    // create a RequestOptions object of whatever's at index 0\n    if (typeof requestArgs[0] === 'string') {\n        requestOptions = urlToOptions(new url__WEBPACK_IMPORTED_MODULE_0__.URL(requestArgs[0]));\n    }\n    else if (requestArgs[0] instanceof url__WEBPACK_IMPORTED_MODULE_0__.URL) {\n        requestOptions = urlToOptions(requestArgs[0]);\n    }\n    else {\n        requestOptions = requestArgs[0];\n    }\n    // if the options were given separately from the URL, fold them in\n    if (requestArgs.length === 2) {\n        requestOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, requestOptions), requestArgs[1]);\n    }\n    // return args in standardized form\n    if (callback) {\n        return [requestOptions, callback];\n    }\n    else {\n        return [requestOptions];\n    }\n}\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/utils/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/parsers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/parsers.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractStackFromError: () => (/* binding */ extractStackFromError),\n/* harmony export */   getExceptionFromError: () => (/* binding */ getExceptionFromError),\n/* harmony export */   parseError: () => (/* binding */ parseError),\n/* harmony export */   parseStack: () => (/* binding */ parseStack),\n/* harmony export */   prepareFramesForEvent: () => (/* binding */ prepareFramesForEvent),\n/* harmony export */   resetFileContentCache: () => (/* binding */ resetFileContentCache)\n/* harmony export */ });\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/path.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/syncpromise.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lru_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lru_map */ \"(ssr)/./node_modules/lru_map/lru.js\");\n/* harmony import */ var lru_map__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lru_map__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _stacktrace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stacktrace */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/stacktrace.js\");\n\n\n\n\nvar DEFAULT_LINES_OF_CONTEXT = 7;\nvar FILE_CONTENT_CACHE = new lru_map__WEBPACK_IMPORTED_MODULE_1__.LRUMap(100);\n/**\n * Resets the file cache. Exists for testing purposes.\n * @hidden\n */\nfunction resetFileContentCache() {\n    FILE_CONTENT_CACHE.clear();\n}\n/** JSDoc */\nfunction getFunction(frame) {\n    try {\n        return frame.functionName || frame.typeName + \".\" + (frame.methodName || '<anonymous>');\n    }\n    catch (e) {\n        // This seems to happen sometimes when using 'use strict',\n        // stemming from `getTypeName`.\n        // [TypeError: Cannot read property 'constructor' of undefined]\n        return '<anonymous>';\n    }\n}\nvar mainModule = ((__webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].filename && (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.dirname)(__webpack_require__.c[__webpack_require__.s].filename)) ||\n    global.process.cwd()) + \"/\";\n/** JSDoc */\nfunction getModule(filename, base) {\n    if (!base) {\n        // eslint-disable-next-line no-param-reassign\n        base = mainModule;\n    }\n    // It's specifically a module\n    var file = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.basename)(filename, '.js');\n    // eslint-disable-next-line no-param-reassign\n    filename = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_3__.dirname)(filename);\n    var n = filename.lastIndexOf('/node_modules/');\n    if (n > -1) {\n        // /node_modules/ is 14 chars\n        return filename.substr(n + 14).replace(/\\//g, '.') + \":\" + file;\n    }\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    n = (filename + \"/\").lastIndexOf(base, 0);\n    if (n === 0) {\n        var moduleName = filename.substr(base.length).replace(/\\//g, '.');\n        if (moduleName) {\n            moduleName += ':';\n        }\n        moduleName += file;\n        return moduleName;\n    }\n    return file;\n}\n/**\n * This function reads file contents and caches them in a global LRU cache.\n * Returns a Promise filepath => content array for all files that we were able to read.\n *\n * @param filenames Array of filepaths to read content from.\n */\nfunction readSourceFiles(filenames) {\n    // we're relying on filenames being de-duped already\n    if (filenames.length === 0) {\n        return _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise.resolve({});\n    }\n    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise(function (resolve) {\n        var sourceFiles = {};\n        var count = 0;\n        var _loop_1 = function (i) {\n            var filename = filenames[i];\n            var cache = FILE_CONTENT_CACHE.get(filename);\n            // We have a cache hit\n            if (cache !== undefined) {\n                // If it's not null (which means we found a file and have a content)\n                // we set the content and return it later.\n                if (cache !== null) {\n                    sourceFiles[filename] = cache;\n                }\n                // eslint-disable-next-line no-plusplus\n                count++;\n                // In any case we want to skip here then since we have a content already or we couldn't\n                // read the file and don't want to try again.\n                if (count === filenames.length) {\n                    resolve(sourceFiles);\n                }\n                return \"continue\";\n            }\n            (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFile)(filename, function (err, data) {\n                var content = err ? null : data.toString();\n                sourceFiles[filename] = content;\n                // We always want to set the cache, even to null which means there was an error reading the file.\n                // We do not want to try to read the file again.\n                FILE_CONTENT_CACHE.set(filename, content);\n                // eslint-disable-next-line no-plusplus\n                count++;\n                if (count === filenames.length) {\n                    resolve(sourceFiles);\n                }\n            });\n        };\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (var i = 0; i < filenames.length; i++) {\n            _loop_1(i);\n        }\n    });\n}\n/**\n * @hidden\n */\nfunction extractStackFromError(error) {\n    var stack = _stacktrace__WEBPACK_IMPORTED_MODULE_2__.parse(error);\n    if (!stack) {\n        return [];\n    }\n    return stack;\n}\n/**\n * @hidden\n */\nfunction parseStack(stack, options) {\n    var filesToRead = [];\n    var linesOfContext = options && options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n    var frames = stack.map(function (frame) {\n        var parsedFrame = {\n            colno: frame.columnNumber,\n            filename: frame.fileName || '',\n            function: getFunction(frame),\n            lineno: frame.lineNumber,\n        };\n        var isInternal = frame.native ||\n            (parsedFrame.filename &&\n                !parsedFrame.filename.startsWith('/') &&\n                !parsedFrame.filename.startsWith('.') &&\n                parsedFrame.filename.indexOf(':\\\\') !== 1);\n        // in_app is all that's not an internal Node function or a module within node_modules\n        // note that isNative appears to return true even for node core libraries\n        // see https://github.com/getsentry/raven-node/issues/176\n        parsedFrame.in_app =\n            !isInternal && parsedFrame.filename !== undefined && parsedFrame.filename.indexOf('node_modules/') === -1;\n        // Extract a module name based on the filename\n        if (parsedFrame.filename) {\n            parsedFrame.module = getModule(parsedFrame.filename);\n            if (!isInternal && linesOfContext > 0 && filesToRead.indexOf(parsedFrame.filename) === -1) {\n                filesToRead.push(parsedFrame.filename);\n            }\n        }\n        return parsedFrame;\n    });\n    // We do an early return if we do not want to fetch context liens\n    if (linesOfContext <= 0) {\n        return _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise.resolve(frames);\n    }\n    try {\n        return addPrePostContext(filesToRead, frames, linesOfContext);\n    }\n    catch (_) {\n        // This happens in electron for example where we are not able to read files from asar.\n        // So it's fine, we recover be just returning all frames without pre/post context.\n        return _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise.resolve(frames);\n    }\n}\n/**\n * This function tries to read the source files + adding pre and post context (source code)\n * to a frame.\n * @param filesToRead string[] of filepaths\n * @param frames StackFrame[] containg all frames\n */\nfunction addPrePostContext(filesToRead, frames, linesOfContext) {\n    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise(function (resolve) {\n        return readSourceFiles(filesToRead).then(function (sourceFiles) {\n            var result = frames.map(function (frame) {\n                if (frame.filename && sourceFiles[frame.filename]) {\n                    try {\n                        var lines = sourceFiles[frame.filename].split('\\n');\n                        (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.addContextToFrame)(lines, frame, linesOfContext);\n                    }\n                    catch (e) {\n                        // anomaly, being defensive in case\n                        // unlikely to ever happen in practice but can definitely happen in theory\n                    }\n                }\n                return frame;\n            });\n            resolve(result);\n        });\n    });\n}\n/**\n * @hidden\n */\nfunction getExceptionFromError(error, options) {\n    var name = error.name || error.constructor.name;\n    var stack = extractStackFromError(error);\n    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise(function (resolve) {\n        return parseStack(stack, options).then(function (frames) {\n            var result = {\n                stacktrace: {\n                    frames: prepareFramesForEvent(frames),\n                },\n                type: name,\n                value: error.message,\n            };\n            resolve(result);\n        });\n    });\n}\n/**\n * @hidden\n */\nfunction parseError(error, options) {\n    return new _sentry_utils__WEBPACK_IMPORTED_MODULE_4__.SyncPromise(function (resolve) {\n        return getExceptionFromError(error, options).then(function (exception) {\n            resolve({\n                exception: {\n                    values: [exception],\n                },\n            });\n        });\n    });\n}\n/**\n * @hidden\n */\nfunction prepareFramesForEvent(stack) {\n    if (!stack || !stack.length) {\n        return [];\n    }\n    var localStack = stack;\n    var firstFrameFunction = localStack[0].function || '';\n    if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n        localStack = localStack.slice(1);\n    }\n    // The frame where the crash happened, should be the last entry in the array\n    return localStack.reverse();\n}\n//# sourceMappingURL=parsers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9wYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtGO0FBQ3BEO0FBQ0c7QUFDVTtBQUMzQztBQUNBLDZCQUE2QiwyQ0FBTTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw0Q0FBWSxJQUFJLDRDQUFZLGFBQWEsc0RBQU8sQ0FBQyw0Q0FBWTtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1REFBUTtBQUN2QjtBQUNBLGVBQWUsc0RBQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzREFBVyxXQUFXO0FBQ3JDO0FBQ0EsZUFBZSxzREFBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRDQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGdCQUFnQiw4Q0FBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzREFBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0VBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGVBQWUsc0RBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxlQUFlLHNEQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vcGFyc2Vycy5qcz8xN2ZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZENvbnRleHRUb0ZyYW1lLCBiYXNlbmFtZSwgZGlybmFtZSwgU3luY1Byb21pc2UgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCB7IHJlYWRGaWxlIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgTFJVTWFwIH0gZnJvbSAnbHJ1X21hcCc7XG5pbXBvcnQgKiBhcyBzdGFja3RyYWNlIGZyb20gJy4vc3RhY2t0cmFjZSc7XG52YXIgREVGQVVMVF9MSU5FU19PRl9DT05URVhUID0gNztcbnZhciBGSUxFX0NPTlRFTlRfQ0FDSEUgPSBuZXcgTFJVTWFwKDEwMCk7XG4vKipcbiAqIFJlc2V0cyB0aGUgZmlsZSBjYWNoZS4gRXhpc3RzIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRGaWxlQ29udGVudENhY2hlKCkge1xuICAgIEZJTEVfQ09OVEVOVF9DQUNIRS5jbGVhcigpO1xufVxuLyoqIEpTRG9jICovXG5mdW5jdGlvbiBnZXRGdW5jdGlvbihmcmFtZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmcmFtZS5mdW5jdGlvbk5hbWUgfHwgZnJhbWUudHlwZU5hbWUgKyBcIi5cIiArIChmcmFtZS5tZXRob2ROYW1lIHx8ICc8YW5vbnltb3VzPicpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBUaGlzIHNlZW1zIHRvIGhhcHBlbiBzb21ldGltZXMgd2hlbiB1c2luZyAndXNlIHN0cmljdCcsXG4gICAgICAgIC8vIHN0ZW1taW5nIGZyb20gYGdldFR5cGVOYW1lYC5cbiAgICAgICAgLy8gW1R5cGVFcnJvcjogQ2Fubm90IHJlYWQgcHJvcGVydHkgJ2NvbnN0cnVjdG9yJyBvZiB1bmRlZmluZWRdXG4gICAgICAgIHJldHVybiAnPGFub255bW91cz4nO1xuICAgIH1cbn1cbnZhciBtYWluTW9kdWxlID0gKChyZXF1aXJlLm1haW4gJiYgcmVxdWlyZS5tYWluLmZpbGVuYW1lICYmIGRpcm5hbWUocmVxdWlyZS5tYWluLmZpbGVuYW1lKSkgfHxcbiAgICBnbG9iYWwucHJvY2Vzcy5jd2QoKSkgKyBcIi9cIjtcbi8qKiBKU0RvYyAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlKGZpbGVuYW1lLCBiYXNlKSB7XG4gICAgaWYgKCFiYXNlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBiYXNlID0gbWFpbk1vZHVsZTtcbiAgICB9XG4gICAgLy8gSXQncyBzcGVjaWZpY2FsbHkgYSBtb2R1bGVcbiAgICB2YXIgZmlsZSA9IGJhc2VuYW1lKGZpbGVuYW1lLCAnLmpzJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgZmlsZW5hbWUgPSBkaXJuYW1lKGZpbGVuYW1lKTtcbiAgICB2YXIgbiA9IGZpbGVuYW1lLmxhc3RJbmRleE9mKCcvbm9kZV9tb2R1bGVzLycpO1xuICAgIGlmIChuID4gLTEpIHtcbiAgICAgICAgLy8gL25vZGVfbW9kdWxlcy8gaXMgMTQgY2hhcnNcbiAgICAgICAgcmV0dXJuIGZpbGVuYW1lLnN1YnN0cihuICsgMTQpLnJlcGxhY2UoL1xcLy9nLCAnLicpICsgXCI6XCIgKyBmaWxlO1xuICAgIH1cbiAgICAvLyBMZXQncyBzZWUgaWYgaXQncyBhIHBhcnQgb2YgdGhlIG1haW4gbW9kdWxlXG4gICAgLy8gVG8gYmUgYSBwYXJ0IG9mIG1haW4gbW9kdWxlLCBpdCBoYXMgdG8gc2hhcmUgdGhlIHNhbWUgYmFzZVxuICAgIG4gPSAoZmlsZW5hbWUgKyBcIi9cIikubGFzdEluZGV4T2YoYmFzZSwgMCk7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgdmFyIG1vZHVsZU5hbWUgPSBmaWxlbmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xuICAgICAgICBpZiAobW9kdWxlTmFtZSkge1xuICAgICAgICAgICAgbW9kdWxlTmFtZSArPSAnOic7XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlTmFtZSArPSBmaWxlO1xuICAgICAgICByZXR1cm4gbW9kdWxlTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbGU7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmVhZHMgZmlsZSBjb250ZW50cyBhbmQgY2FjaGVzIHRoZW0gaW4gYSBnbG9iYWwgTFJVIGNhY2hlLlxuICogUmV0dXJucyBhIFByb21pc2UgZmlsZXBhdGggPT4gY29udGVudCBhcnJheSBmb3IgYWxsIGZpbGVzIHRoYXQgd2Ugd2VyZSBhYmxlIHRvIHJlYWQuXG4gKlxuICogQHBhcmFtIGZpbGVuYW1lcyBBcnJheSBvZiBmaWxlcGF0aHMgdG8gcmVhZCBjb250ZW50IGZyb20uXG4gKi9cbmZ1bmN0aW9uIHJlYWRTb3VyY2VGaWxlcyhmaWxlbmFtZXMpIHtcbiAgICAvLyB3ZSdyZSByZWx5aW5nIG9uIGZpbGVuYW1lcyBiZWluZyBkZS1kdXBlZCBhbHJlYWR5XG4gICAgaWYgKGZpbGVuYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoe30pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHZhciBzb3VyY2VGaWxlcyA9IHt9O1xuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSBmaWxlbmFtZXNbaV07XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBGSUxFX0NPTlRFTlRfQ0FDSEUuZ2V0KGZpbGVuYW1lKTtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBjYWNoZSBoaXRcbiAgICAgICAgICAgIGlmIChjYWNoZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQncyBub3QgbnVsbCAod2hpY2ggbWVhbnMgd2UgZm91bmQgYSBmaWxlIGFuZCBoYXZlIGEgY29udGVudClcbiAgICAgICAgICAgICAgICAvLyB3ZSBzZXQgdGhlIGNvbnRlbnQgYW5kIHJldHVybiBpdCBsYXRlci5cbiAgICAgICAgICAgICAgICBpZiAoY2FjaGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlRmlsZXNbZmlsZW5hbWVdID0gY2FjaGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgLy8gSW4gYW55IGNhc2Ugd2Ugd2FudCB0byBza2lwIGhlcmUgdGhlbiBzaW5jZSB3ZSBoYXZlIGEgY29udGVudCBhbHJlYWR5IG9yIHdlIGNvdWxkbid0XG4gICAgICAgICAgICAgICAgLy8gcmVhZCB0aGUgZmlsZSBhbmQgZG9uJ3Qgd2FudCB0byB0cnkgYWdhaW4uXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSBmaWxlbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc291cmNlRmlsZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVhZEZpbGUoZmlsZW5hbWUsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGVyciA/IG51bGwgOiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgc291cmNlRmlsZXNbZmlsZW5hbWVdID0gY29udGVudDtcbiAgICAgICAgICAgICAgICAvLyBXZSBhbHdheXMgd2FudCB0byBzZXQgdGhlIGNhY2hlLCBldmVuIHRvIG51bGwgd2hpY2ggbWVhbnMgdGhlcmUgd2FzIGFuIGVycm9yIHJlYWRpbmcgdGhlIGZpbGUuXG4gICAgICAgICAgICAgICAgLy8gV2UgZG8gbm90IHdhbnQgdG8gdHJ5IHRvIHJlYWQgdGhlIGZpbGUgYWdhaW4uXG4gICAgICAgICAgICAgICAgRklMRV9DT05URU5UX0NBQ0hFLnNldChmaWxlbmFtZSwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzXG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IGZpbGVuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzb3VyY2VGaWxlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0U3RhY2tGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGFja3RyYWNlLnBhcnNlKGVycm9yKTtcbiAgICBpZiAoIXN0YWNrKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0YWNrKHN0YWNrLCBvcHRpb25zKSB7XG4gICAgdmFyIGZpbGVzVG9SZWFkID0gW107XG4gICAgdmFyIGxpbmVzT2ZDb250ZXh0ID0gb3B0aW9ucyAmJiBvcHRpb25zLmZyYW1lQ29udGV4dExpbmVzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZyYW1lQ29udGV4dExpbmVzIDogREVGQVVMVF9MSU5FU19PRl9DT05URVhUO1xuICAgIHZhciBmcmFtZXMgPSBzdGFjay5tYXAoZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgIHZhciBwYXJzZWRGcmFtZSA9IHtcbiAgICAgICAgICAgIGNvbG5vOiBmcmFtZS5jb2x1bW5OdW1iZXIsXG4gICAgICAgICAgICBmaWxlbmFtZTogZnJhbWUuZmlsZU5hbWUgfHwgJycsXG4gICAgICAgICAgICBmdW5jdGlvbjogZ2V0RnVuY3Rpb24oZnJhbWUpLFxuICAgICAgICAgICAgbGluZW5vOiBmcmFtZS5saW5lTnVtYmVyLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgaXNJbnRlcm5hbCA9IGZyYW1lLm5hdGl2ZSB8fFxuICAgICAgICAgICAgKHBhcnNlZEZyYW1lLmZpbGVuYW1lICYmXG4gICAgICAgICAgICAgICAgIXBhcnNlZEZyYW1lLmZpbGVuYW1lLnN0YXJ0c1dpdGgoJy8nKSAmJlxuICAgICAgICAgICAgICAgICFwYXJzZWRGcmFtZS5maWxlbmFtZS5zdGFydHNXaXRoKCcuJykgJiZcbiAgICAgICAgICAgICAgICBwYXJzZWRGcmFtZS5maWxlbmFtZS5pbmRleE9mKCc6XFxcXCcpICE9PSAxKTtcbiAgICAgICAgLy8gaW5fYXBwIGlzIGFsbCB0aGF0J3Mgbm90IGFuIGludGVybmFsIE5vZGUgZnVuY3Rpb24gb3IgYSBtb2R1bGUgd2l0aGluIG5vZGVfbW9kdWxlc1xuICAgICAgICAvLyBub3RlIHRoYXQgaXNOYXRpdmUgYXBwZWFycyB0byByZXR1cm4gdHJ1ZSBldmVuIGZvciBub2RlIGNvcmUgbGlicmFyaWVzXG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLW5vZGUvaXNzdWVzLzE3NlxuICAgICAgICBwYXJzZWRGcmFtZS5pbl9hcHAgPVxuICAgICAgICAgICAgIWlzSW50ZXJuYWwgJiYgcGFyc2VkRnJhbWUuZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiBwYXJzZWRGcmFtZS5maWxlbmFtZS5pbmRleE9mKCdub2RlX21vZHVsZXMvJykgPT09IC0xO1xuICAgICAgICAvLyBFeHRyYWN0IGEgbW9kdWxlIG5hbWUgYmFzZWQgb24gdGhlIGZpbGVuYW1lXG4gICAgICAgIGlmIChwYXJzZWRGcmFtZS5maWxlbmFtZSkge1xuICAgICAgICAgICAgcGFyc2VkRnJhbWUubW9kdWxlID0gZ2V0TW9kdWxlKHBhcnNlZEZyYW1lLmZpbGVuYW1lKTtcbiAgICAgICAgICAgIGlmICghaXNJbnRlcm5hbCAmJiBsaW5lc09mQ29udGV4dCA+IDAgJiYgZmlsZXNUb1JlYWQuaW5kZXhPZihwYXJzZWRGcmFtZS5maWxlbmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZmlsZXNUb1JlYWQucHVzaChwYXJzZWRGcmFtZS5maWxlbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZEZyYW1lO1xuICAgIH0pO1xuICAgIC8vIFdlIGRvIGFuIGVhcmx5IHJldHVybiBpZiB3ZSBkbyBub3Qgd2FudCB0byBmZXRjaCBjb250ZXh0IGxpZW5zXG4gICAgaWYgKGxpbmVzT2ZDb250ZXh0IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIFN5bmNQcm9taXNlLnJlc29sdmUoZnJhbWVzKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFkZFByZVBvc3RDb250ZXh0KGZpbGVzVG9SZWFkLCBmcmFtZXMsIGxpbmVzT2ZDb250ZXh0KTtcbiAgICB9XG4gICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgLy8gVGhpcyBoYXBwZW5zIGluIGVsZWN0cm9uIGZvciBleGFtcGxlIHdoZXJlIHdlIGFyZSBub3QgYWJsZSB0byByZWFkIGZpbGVzIGZyb20gYXNhci5cbiAgICAgICAgLy8gU28gaXQncyBmaW5lLCB3ZSByZWNvdmVyIGJlIGp1c3QgcmV0dXJuaW5nIGFsbCBmcmFtZXMgd2l0aG91dCBwcmUvcG9zdCBjb250ZXh0LlxuICAgICAgICByZXR1cm4gU3luY1Byb21pc2UucmVzb2x2ZShmcmFtZXMpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB0cmllcyB0byByZWFkIHRoZSBzb3VyY2UgZmlsZXMgKyBhZGRpbmcgcHJlIGFuZCBwb3N0IGNvbnRleHQgKHNvdXJjZSBjb2RlKVxuICogdG8gYSBmcmFtZS5cbiAqIEBwYXJhbSBmaWxlc1RvUmVhZCBzdHJpbmdbXSBvZiBmaWxlcGF0aHNcbiAqIEBwYXJhbSBmcmFtZXMgU3RhY2tGcmFtZVtdIGNvbnRhaW5nIGFsbCBmcmFtZXNcbiAqL1xuZnVuY3Rpb24gYWRkUHJlUG9zdENvbnRleHQoZmlsZXNUb1JlYWQsIGZyYW1lcywgbGluZXNPZkNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHJldHVybiByZWFkU291cmNlRmlsZXMoZmlsZXNUb1JlYWQpLnRoZW4oZnVuY3Rpb24gKHNvdXJjZUZpbGVzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnJhbWVzLm1hcChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWUuZmlsZW5hbWUgJiYgc291cmNlRmlsZXNbZnJhbWUuZmlsZW5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSBzb3VyY2VGaWxlc1tmcmFtZS5maWxlbmFtZV0uc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ29udGV4dFRvRnJhbWUobGluZXMsIGZyYW1lLCBsaW5lc09mQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFub21hbHksIGJlaW5nIGRlZmVuc2l2ZSBpbiBjYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1bmxpa2VseSB0byBldmVyIGhhcHBlbiBpbiBwcmFjdGljZSBidXQgY2FuIGRlZmluaXRlbHkgaGFwcGVuIGluIHRoZW9yeVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhjZXB0aW9uRnJvbUVycm9yKGVycm9yLCBvcHRpb25zKSB7XG4gICAgdmFyIG5hbWUgPSBlcnJvci5uYW1lIHx8IGVycm9yLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgdmFyIHN0YWNrID0gZXh0cmFjdFN0YWNrRnJvbUVycm9yKGVycm9yKTtcbiAgICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVN0YWNrKHN0YWNrLCBvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChmcmFtZXMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgc3RhY2t0cmFjZToge1xuICAgICAgICAgICAgICAgICAgICBmcmFtZXM6IHByZXBhcmVGcmFtZXNGb3JFdmVudChmcmFtZXMpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZTogbmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVycm9yKGVycm9yLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXR1cm4gZ2V0RXhjZXB0aW9uRnJvbUVycm9yKGVycm9yLCBvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGV4Y2VwdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFtleGNlcHRpb25dLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVGcmFtZXNGb3JFdmVudChzdGFjaykge1xuICAgIGlmICghc3RhY2sgfHwgIXN0YWNrLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciBsb2NhbFN0YWNrID0gc3RhY2s7XG4gICAgdmFyIGZpcnN0RnJhbWVGdW5jdGlvbiA9IGxvY2FsU3RhY2tbMF0uZnVuY3Rpb24gfHwgJyc7XG4gICAgaWYgKGZpcnN0RnJhbWVGdW5jdGlvbi5pbmRleE9mKCdjYXB0dXJlTWVzc2FnZScpICE9PSAtMSB8fCBmaXJzdEZyYW1lRnVuY3Rpb24uaW5kZXhPZignY2FwdHVyZUV4Y2VwdGlvbicpICE9PSAtMSkge1xuICAgICAgICBsb2NhbFN0YWNrID0gbG9jYWxTdGFjay5zbGljZSgxKTtcbiAgICB9XG4gICAgLy8gVGhlIGZyYW1lIHdoZXJlIHRoZSBjcmFzaCBoYXBwZW5lZCwgc2hvdWxkIGJlIHRoZSBsYXN0IGVudHJ5IGluIHRoZSBhcnJheVxuICAgIHJldHVybiBsb2NhbFN0YWNrLnJldmVyc2UoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/sdk.js":
/*!*******************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/sdk.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   defaultIntegrations: () => (/* binding */ defaultIntegrations),\n/* harmony export */   flush: () => (/* binding */ flush),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   lastEventId: () => (/* binding */ lastEventId)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/inboundfilters.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/integrations/functiontostring.js\");\n/* harmony import */ var _sentry_hub__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/hub */ \"(ssr)/./node_modules/@sentry/hub/esm/hub.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/sdk.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! domain */ \"domain\");\n/* harmony import */ var domain__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(domain__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/client.js\");\n/* harmony import */ var _integrations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./integrations */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/integrations/index.js\");\n\n\n\n\n\n\n\nvar defaultIntegrations = [\n    // Common\n    new _sentry_core__WEBPACK_IMPORTED_MODULE_3__.InboundFilters(),\n    new _sentry_core__WEBPACK_IMPORTED_MODULE_4__.FunctionToString(),\n    // Native Wrappers\n    new _integrations__WEBPACK_IMPORTED_MODULE_2__.Console(),\n    new _integrations__WEBPACK_IMPORTED_MODULE_2__.Http(),\n    // Global Handlers\n    new _integrations__WEBPACK_IMPORTED_MODULE_2__.OnUncaughtException(),\n    new _integrations__WEBPACK_IMPORTED_MODULE_2__.OnUnhandledRejection(),\n    // Misc\n    new _integrations__WEBPACK_IMPORTED_MODULE_2__.LinkedErrors(),\n];\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\nfunction init(options) {\n    if (options === void 0) { options = {}; }\n    if (options.defaultIntegrations === undefined) {\n        options.defaultIntegrations = defaultIntegrations;\n    }\n    if (options.dsn === undefined && process.env.SENTRY_DSN) {\n        options.dsn = process.env.SENTRY_DSN;\n    }\n    if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n        var tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n        if (isFinite(tracesSampleRate)) {\n            options.tracesSampleRate = tracesSampleRate;\n        }\n    }\n    if (options.release === undefined) {\n        var global_1 = (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_5__.getGlobalObject)();\n        // Prefer env var over global\n        if (process.env.SENTRY_RELEASE) {\n            options.release = process.env.SENTRY_RELEASE;\n        }\n        // This supports the variable that sentry-webpack-plugin injects\n        else if (global_1.SENTRY_RELEASE && global_1.SENTRY_RELEASE.id) {\n            options.release = global_1.SENTRY_RELEASE.id;\n        }\n    }\n    if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n        options.environment = process.env.SENTRY_ENVIRONMENT;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (domain__WEBPACK_IMPORTED_MODULE_0__.active) {\n        (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_6__.setHubOnCarrier)((0,_sentry_hub__WEBPACK_IMPORTED_MODULE_6__.getMainCarrier)(), (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_6__.getCurrentHub)());\n    }\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.initAndBind)(_client__WEBPACK_IMPORTED_MODULE_1__.NodeClient, options);\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nfunction lastEventId() {\n    return (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_6__.getCurrentHub)().lastEventId();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nfunction flush(timeout) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {\n        var client;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {\n            client = (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_6__.getCurrentHub)().getClient();\n            if (client) {\n                return [2 /*return*/, client.flush(timeout)];\n            }\n            return [2 /*return*/, Promise.reject(false)];\n        });\n    });\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nfunction close(timeout) {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function () {\n        var client;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__generator)(this, function (_a) {\n            client = (0,_sentry_hub__WEBPACK_IMPORTED_MODULE_6__.getCurrentHub)().getClient();\n            if (client) {\n                return [2 /*return*/, client.close(timeout)];\n            }\n            return [2 /*return*/, Promise.reject(false)];\n        });\n    });\n}\n//# sourceMappingURL=sdk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/sdk.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/stacktrace.js":
/*!**************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/stacktrace.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/**\n * stack-trace - Parses node.js stack traces\n *\n * This was originally forked to fix this issue:\n * https://github.com/felixge/node-stack-trace/issues/31\n *\n * Mar 19,2019 - #4fd379e\n *\n * https://github.com/felixge/node-stack-trace/\n * @license MIT\n */\n/** Extracts StackFrames from the Error */\nfunction parse(err) {\n    if (!err.stack) {\n        return [];\n    }\n    var lines = err.stack.split('\\n').slice(1);\n    return lines\n        .map(function (line) {\n        if (line.match(/^\\s*[-]{4,}$/)) {\n            return {\n                columnNumber: null,\n                fileName: line,\n                functionName: null,\n                lineNumber: null,\n                methodName: null,\n                native: null,\n                typeName: null,\n            };\n        }\n        var lineMatch = line.match(/at (?:(.+?)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?/);\n        if (!lineMatch) {\n            return undefined;\n        }\n        var object = null;\n        var method = null;\n        var functionName = null;\n        var typeName = null;\n        var methodName = null;\n        var isNative = lineMatch[5] === 'native';\n        if (lineMatch[1]) {\n            functionName = lineMatch[1];\n            var methodStart = functionName.lastIndexOf('.');\n            if (functionName[methodStart - 1] === '.') {\n                // eslint-disable-next-line no-plusplus\n                methodStart--;\n            }\n            if (methodStart > 0) {\n                object = functionName.substr(0, methodStart);\n                method = functionName.substr(methodStart + 1);\n                var objectEnd = object.indexOf('.Module');\n                if (objectEnd > 0) {\n                    functionName = functionName.substr(objectEnd + 1);\n                    object = object.substr(0, objectEnd);\n                }\n            }\n            typeName = null;\n        }\n        if (method) {\n            typeName = object;\n            methodName = method;\n        }\n        if (method === '<anonymous>') {\n            methodName = null;\n            functionName = null;\n        }\n        var properties = {\n            columnNumber: parseInt(lineMatch[4], 10) || null,\n            fileName: lineMatch[2] || null,\n            functionName: functionName,\n            lineNumber: parseInt(lineMatch[3], 10) || null,\n            methodName: methodName,\n            native: isNative,\n            typeName: typeName,\n        };\n        return properties;\n    })\n        .filter(function (callSite) { return !!callSite; });\n}\n//# sourceMappingURL=stacktrace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS9zdGFja3RyYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxHQUFHO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0NBQXNDLG9CQUFvQjtBQUMxRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL3N0YWNrdHJhY2UuanM/ZDZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHN0YWNrLXRyYWNlIC0gUGFyc2VzIG5vZGUuanMgc3RhY2sgdHJhY2VzXG4gKlxuICogVGhpcyB3YXMgb3JpZ2luYWxseSBmb3JrZWQgdG8gZml4IHRoaXMgaXNzdWU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmVsaXhnZS9ub2RlLXN0YWNrLXRyYWNlL2lzc3Vlcy8zMVxuICpcbiAqIE1hciAxOSwyMDE5IC0gIzRmZDM3OWVcbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmVsaXhnZS9ub2RlLXN0YWNrLXRyYWNlL1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cbi8qKiBFeHRyYWN0cyBTdGFja0ZyYW1lcyBmcm9tIHRoZSBFcnJvciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKGVycikge1xuICAgIGlmICghZXJyLnN0YWNrKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdmFyIGxpbmVzID0gZXJyLnN0YWNrLnNwbGl0KCdcXG4nKS5zbGljZSgxKTtcbiAgICByZXR1cm4gbGluZXNcbiAgICAgICAgLm1hcChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICBpZiAobGluZS5tYXRjaCgvXlxccypbLV17NCx9JC8pKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbHVtbk51bWJlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogbGluZSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXRob2ROYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgIG5hdGl2ZTogbnVsbCxcbiAgICAgICAgICAgICAgICB0eXBlTmFtZTogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmVNYXRjaCA9IGxpbmUubWF0Y2goL2F0ICg/OiguKz8pXFxzK1xcKCk/KD86KC4rPyk6KFxcZCspKD86OihcXGQrKSk/fChbXildKykpXFwpPy8pO1xuICAgICAgICBpZiAoIWxpbmVNYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2JqZWN0ID0gbnVsbDtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG51bGw7XG4gICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBudWxsO1xuICAgICAgICB2YXIgdHlwZU5hbWUgPSBudWxsO1xuICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IG51bGw7XG4gICAgICAgIHZhciBpc05hdGl2ZSA9IGxpbmVNYXRjaFs1XSA9PT0gJ25hdGl2ZSc7XG4gICAgICAgIGlmIChsaW5lTWF0Y2hbMV0pIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IGxpbmVNYXRjaFsxXTtcbiAgICAgICAgICAgIHZhciBtZXRob2RTdGFydCA9IGZ1bmN0aW9uTmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgaWYgKGZ1bmN0aW9uTmFtZVttZXRob2RTdGFydCAtIDFdID09PSAnLicpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgICAgICAgICAgICAgICBtZXRob2RTdGFydC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldGhvZFN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgICAgIG9iamVjdCA9IGZ1bmN0aW9uTmFtZS5zdWJzdHIoMCwgbWV0aG9kU3RhcnQpO1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IGZ1bmN0aW9uTmFtZS5zdWJzdHIobWV0aG9kU3RhcnQgKyAxKTtcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0RW5kID0gb2JqZWN0LmluZGV4T2YoJy5Nb2R1bGUnKTtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0RW5kID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWUgPSBmdW5jdGlvbk5hbWUuc3Vic3RyKG9iamVjdEVuZCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSBvYmplY3Quc3Vic3RyKDAsIG9iamVjdEVuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZU5hbWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRob2QpIHtcbiAgICAgICAgICAgIHR5cGVOYW1lID0gb2JqZWN0O1xuICAgICAgICAgICAgbWV0aG9kTmFtZSA9IG1ldGhvZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kID09PSAnPGFub255bW91cz4nKSB7XG4gICAgICAgICAgICBtZXRob2ROYW1lID0gbnVsbDtcbiAgICAgICAgICAgIGZ1bmN0aW9uTmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBjb2x1bW5OdW1iZXI6IHBhcnNlSW50KGxpbmVNYXRjaFs0XSwgMTApIHx8IG51bGwsXG4gICAgICAgICAgICBmaWxlTmFtZTogbGluZU1hdGNoWzJdIHx8IG51bGwsXG4gICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IHBhcnNlSW50KGxpbmVNYXRjaFszXSwgMTApIHx8IG51bGwsXG4gICAgICAgICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgICAgICAgbmF0aXZlOiBpc05hdGl2ZSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiB0eXBlTmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgfSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoY2FsbFNpdGUpIHsgcmV0dXJuICEhY2FsbFNpdGU7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhY2t0cmFjZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/stacktrace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/base.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/transports/base.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransport: () => (/* binding */ BaseTransport)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/api.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/core/esm/request.js\");\n/* harmony import */ var _sentry_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/types */ \"(ssr)/./node_modules/@sentry/types/esm/status.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/promisebuffer.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/misc.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/logger.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../version */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/version.js\");\n\n\n\n\n\n\n\n/** Base Transport class implementation */\nvar BaseTransport = /** @class */ (function () {\n    /** Create instance and set this.dsn */\n    function BaseTransport(options) {\n        this.options = options;\n        /** A simple buffer holding all requests. */\n        this._buffer = new _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.PromiseBuffer(30);\n        /** Locks transport after receiving 429 response */\n        this._disabledUntil = new Date(Date.now());\n        this._api = new _sentry_core__WEBPACK_IMPORTED_MODULE_4__.API(options.dsn);\n    }\n    /**\n     * @inheritDoc\n     */\n    BaseTransport.prototype.sendEvent = function (_) {\n        throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.SentryError('Transport Class has to implement `sendEvent` method.');\n    };\n    /**\n     * @inheritDoc\n     */\n    BaseTransport.prototype.close = function (timeout) {\n        return this._buffer.drain(timeout);\n    };\n    /** Returns a build request option object used by request */\n    BaseTransport.prototype._getRequestOptions = function (uri) {\n        var headers = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this._api.getRequestHeaders(_version__WEBPACK_IMPORTED_MODULE_2__.SDK_NAME, _version__WEBPACK_IMPORTED_MODULE_2__.SDK_VERSION)), this.options.headers);\n        var hostname = uri.hostname, pathname = uri.pathname, port = uri.port, protocol = uri.protocol;\n        // See https://github.com/nodejs/node/blob/38146e717fed2fabe3aacb6540d839475e0ce1c6/lib/internal/url.js#L1268-L1290\n        // We ignore the query string on purpose\n        var path = \"\" + pathname;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({ agent: this.client, headers: headers,\n            hostname: hostname, method: 'POST', path: path,\n            port: port,\n            protocol: protocol }, (this.options.caCerts && {\n            ca: fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(this.options.caCerts),\n        }));\n    };\n    /** JSDoc */\n    BaseTransport.prototype._sendWithModule = function (httpModule, event) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function () {\n            var _this = this;\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__generator)(this, function (_a) {\n                if (new Date(Date.now()) < this._disabledUntil) {\n                    return [2 /*return*/, Promise.reject(new _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.SentryError(\"Transport locked till \" + this._disabledUntil + \" due to too many requests.\"))];\n                }\n                if (!this._buffer.isReady()) {\n                    return [2 /*return*/, Promise.reject(new _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.SentryError('Not adding Promise due to buffer limit reached.'))];\n                }\n                return [2 /*return*/, this._buffer.add(new Promise(function (resolve, reject) {\n                        var sentryReq = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.eventToSentryRequest)(event, _this._api);\n                        var options = _this._getRequestOptions(new url__WEBPACK_IMPORTED_MODULE_1__.URL(sentryReq.url));\n                        var req = httpModule.request(options, function (res) {\n                            var statusCode = res.statusCode || 500;\n                            var status = _sentry_types__WEBPACK_IMPORTED_MODULE_8__.Status.fromHttpCode(statusCode);\n                            res.setEncoding('utf8');\n                            if (status === _sentry_types__WEBPACK_IMPORTED_MODULE_8__.Status.Success) {\n                                resolve({ status: status });\n                            }\n                            else {\n                                if (status === _sentry_types__WEBPACK_IMPORTED_MODULE_8__.Status.RateLimit) {\n                                    var now = Date.now();\n                                    /**\n                                     * \"Key-value pairs of header names and values. Header names are lower-cased.\"\n                                     * https://nodejs.org/api/http.html#http_message_headers\n                                     */\n                                    var retryAfterHeader = res.headers ? res.headers['retry-after'] : '';\n                                    retryAfterHeader = (Array.isArray(retryAfterHeader) ? retryAfterHeader[0] : retryAfterHeader);\n                                    _this._disabledUntil = new Date(now + (0,_sentry_utils__WEBPACK_IMPORTED_MODULE_9__.parseRetryAfterHeader)(now, retryAfterHeader));\n                                    _sentry_utils__WEBPACK_IMPORTED_MODULE_10__.logger.warn(\"Too many requests, backing off till: \" + _this._disabledUntil);\n                                }\n                                var rejectionMessage = \"HTTP Error (\" + statusCode + \")\";\n                                if (res.headers && res.headers['x-sentry-error']) {\n                                    rejectionMessage += \": \" + res.headers['x-sentry-error'];\n                                }\n                                reject(new _sentry_utils__WEBPACK_IMPORTED_MODULE_5__.SentryError(rejectionMessage));\n                            }\n                            // Force the socket to drain\n                            res.on('data', function () {\n                                // Drain\n                            });\n                            res.on('end', function () {\n                                // Drain\n                            });\n                        });\n                        req.on('error', reject);\n                        req.end(sentryReq.body);\n                    }))];\n            });\n        });\n    };\n    return BaseTransport;\n}());\n\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/http.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/transports/http.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTPTransport: () => (/* binding */ HTTPTransport)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/base.js\");\n\n\n\n\n/** Node http module transport */\nvar HTTPTransport = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(HTTPTransport, _super);\n    /** Create a new instance and set this.agent */\n    function HTTPTransport(options) {\n        var _this = _super.call(this, options) || this;\n        _this.options = options;\n        var proxy = options.httpProxy || process.env.http_proxy;\n        _this.module = http__WEBPACK_IMPORTED_MODULE_0__;\n        _this.client = proxy\n            ? new (__webpack_require__(/*! https-proxy-agent */ \"(ssr)/./node_modules/https-proxy-agent/dist/index.js\"))(proxy)\n            : new http__WEBPACK_IMPORTED_MODULE_0__.Agent({ keepAlive: false, maxSockets: 30, timeout: 2000 });\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    HTTPTransport.prototype.sendEvent = function (event) {\n        if (!this.module) {\n            throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.SentryError('No module available in HTTPTransport');\n        }\n        return this._sendWithModule(this.module, event);\n    };\n    return HTTPTransport;\n}(_base__WEBPACK_IMPORTED_MODULE_1__.BaseTransport));\n\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS90cmFuc3BvcnRzL2h0dHAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtDO0FBQ1U7QUFDZjtBQUNVO0FBQ3ZDO0FBQ0E7QUFDQSxJQUFJLGdEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQ0FBSTtBQUMzQjtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLCtFQUFtQjtBQUM5QyxrQkFBa0IsdUNBQVUsR0FBRyxpREFBaUQ7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0RBQVc7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsZ0RBQWE7QUFDVTtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS90cmFuc3BvcnRzL2h0dHAuanM/MDZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFNlbnRyeUVycm9yIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgQmFzZVRyYW5zcG9ydCB9IGZyb20gJy4vYmFzZSc7XG4vKiogTm9kZSBodHRwIG1vZHVsZSB0cmFuc3BvcnQgKi9cbnZhciBIVFRQVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhIVFRQVHJhbnNwb3J0LCBfc3VwZXIpO1xuICAgIC8qKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2UgYW5kIHNldCB0aGlzLmFnZW50ICovXG4gICAgZnVuY3Rpb24gSFRUUFRyYW5zcG9ydChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB2YXIgcHJveHkgPSBvcHRpb25zLmh0dHBQcm94eSB8fCBwcm9jZXNzLmVudi5odHRwX3Byb3h5O1xuICAgICAgICBfdGhpcy5tb2R1bGUgPSBodHRwO1xuICAgICAgICBfdGhpcy5jbGllbnQgPSBwcm94eVxuICAgICAgICAgICAgPyBuZXcgKHJlcXVpcmUoJ2h0dHBzLXByb3h5LWFnZW50JykpKHByb3h5KVxuICAgICAgICAgICAgOiBuZXcgaHR0cC5BZ2VudCh7IGtlZXBBbGl2ZTogZmFsc2UsIG1heFNvY2tldHM6IDMwLCB0aW1lb3V0OiAyMDAwIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbmhlcml0RG9jXG4gICAgICovXG4gICAgSFRUUFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb2R1bGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignTm8gbW9kdWxlIGF2YWlsYWJsZSBpbiBIVFRQVHJhbnNwb3J0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRXaXRoTW9kdWxlKHRoaXMubW9kdWxlLCBldmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gSFRUUFRyYW5zcG9ydDtcbn0oQmFzZVRyYW5zcG9ydCkpO1xuZXhwb3J0IHsgSFRUUFRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/https.js":
/*!********************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/transports/https.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTPSTransport: () => (/* binding */ HTTPSTransport)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _sentry_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/utils */ \"(ssr)/./node_modules/@sentry/utils/esm/error.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/base.js\");\n\n\n\n\n/** Node https module transport */\nvar HTTPSTransport = /** @class */ (function (_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(HTTPSTransport, _super);\n    /** Create a new instance and set this.agent */\n    function HTTPSTransport(options) {\n        var _this = _super.call(this, options) || this;\n        _this.options = options;\n        var proxy = options.httpsProxy || options.httpProxy || process.env.https_proxy || process.env.http_proxy;\n        _this.module = https__WEBPACK_IMPORTED_MODULE_0__;\n        _this.client = proxy\n            ? new (__webpack_require__(/*! https-proxy-agent */ \"(ssr)/./node_modules/https-proxy-agent/dist/index.js\"))(proxy)\n            : new https__WEBPACK_IMPORTED_MODULE_0__.Agent({ keepAlive: false, maxSockets: 30, timeout: 2000 });\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    HTTPSTransport.prototype.sendEvent = function (event) {\n        if (!this.module) {\n            throw new _sentry_utils__WEBPACK_IMPORTED_MODULE_3__.SentryError('No module available in HTTPSTransport');\n        }\n        return this._sendWithModule(this.module, event);\n    };\n    return HTTPSTransport;\n}(_base__WEBPACK_IMPORTED_MODULE_1__.BaseTransport));\n\n//# sourceMappingURL=https.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS90cmFuc3BvcnRzL2h0dHBzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFrQztBQUNVO0FBQ2I7QUFDUTtBQUN2QztBQUNBO0FBQ0EsSUFBSSxnREFBUztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0NBQUs7QUFDNUI7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQywrRUFBbUI7QUFDOUMsa0JBQWtCLHdDQUFXLEdBQUcsaURBQWlEO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFXO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLGdEQUFhO0FBQ1c7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vdHJhbnNwb3J0cy9odHRwcy5qcz8yMjY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU2VudHJ5RXJyb3IgfSBmcm9tICdAc2VudHJ5L3V0aWxzJztcbmltcG9ydCAqIGFzIGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCB7IEJhc2VUcmFuc3BvcnQgfSBmcm9tICcuL2Jhc2UnO1xuLyoqIE5vZGUgaHR0cHMgbW9kdWxlIHRyYW5zcG9ydCAqL1xudmFyIEhUVFBTVHJhbnNwb3J0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhIVFRQU1RyYW5zcG9ydCwgX3N1cGVyKTtcbiAgICAvKiogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIGFuZCBzZXQgdGhpcy5hZ2VudCAqL1xuICAgIGZ1bmN0aW9uIEhUVFBTVHJhbnNwb3J0KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHZhciBwcm94eSA9IG9wdGlvbnMuaHR0cHNQcm94eSB8fCBvcHRpb25zLmh0dHBQcm94eSB8fCBwcm9jZXNzLmVudi5odHRwc19wcm94eSB8fCBwcm9jZXNzLmVudi5odHRwX3Byb3h5O1xuICAgICAgICBfdGhpcy5tb2R1bGUgPSBodHRwcztcbiAgICAgICAgX3RoaXMuY2xpZW50ID0gcHJveHlcbiAgICAgICAgICAgID8gbmV3IChyZXF1aXJlKCdodHRwcy1wcm94eS1hZ2VudCcpKShwcm94eSlcbiAgICAgICAgICAgIDogbmV3IGh0dHBzLkFnZW50KHsga2VlcEFsaXZlOiBmYWxzZSwgbWF4U29ja2V0czogMzAsIHRpbWVvdXQ6IDIwMDAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGluaGVyaXREb2NcbiAgICAgKi9cbiAgICBIVFRQU1RyYW5zcG9ydC5wcm90b3R5cGUuc2VuZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb2R1bGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTZW50cnlFcnJvcignTm8gbW9kdWxlIGF2YWlsYWJsZSBpbiBIVFRQU1RyYW5zcG9ydCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zZW5kV2l0aE1vZHVsZSh0aGlzLm1vZHVsZSwgZXZlbnQpO1xuICAgIH07XG4gICAgcmV0dXJuIEhUVFBTVHJhbnNwb3J0O1xufShCYXNlVHJhbnNwb3J0KSk7XG5leHBvcnQgeyBIVFRQU1RyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/https.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/transports/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransport: () => (/* reexport safe */ _base__WEBPACK_IMPORTED_MODULE_0__.BaseTransport),\n/* harmony export */   HTTPSTransport: () => (/* reexport safe */ _https__WEBPACK_IMPORTED_MODULE_2__.HTTPSTransport),\n/* harmony export */   HTTPTransport: () => (/* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_1__.HTTPTransport)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/base.js\");\n/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./http */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/http.js\");\n/* harmony import */ var _https__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./https */ \"(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/https.js\");\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS90cmFuc3BvcnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1QztBQUNBO0FBQ0U7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9lc20vdHJhbnNwb3J0cy9pbmRleC5qcz9hNDU3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEJhc2VUcmFuc3BvcnQgfSBmcm9tICcuL2Jhc2UnO1xuZXhwb3J0IHsgSFRUUFRyYW5zcG9ydCB9IGZyb20gJy4vaHR0cCc7XG5leHBvcnQgeyBIVFRQU1RyYW5zcG9ydCB9IGZyb20gJy4vaHR0cHMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/transports/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/version.js":
/*!***********************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/@sentry/node/esm/version.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_NAME: () => (/* binding */ SDK_NAME),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\nvar SDK_NAME = 'sentry.javascript.node';\nvar SDK_VERSION = '5.30.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2VzbS92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87QUFDQTtBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvZXNtL3ZlcnNpb24uanM/MzExYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFNES19OQU1FID0gJ3NlbnRyeS5qYXZhc2NyaXB0Lm5vZGUnO1xuZXhwb3J0IHZhciBTREtfVkVSU0lPTiA9ICc1LjMwLjAnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/@sentry/node/esm/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/chokidar/handler.js":
/*!***************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/chokidar/handler.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NodeFsHandler = exports.EVENTS = exports.isIBMi = exports.isFreeBSD = exports.isLinux = exports.isMacos = exports.isWindows = exports.IDENTITY_FN = exports.EMPTY_FN = exports.STR_CLOSE = exports.STR_END = exports.STR_DATA = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst promises_1 = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst sysPath = __webpack_require__(/*! path */ \"path\");\nconst os_1 = __webpack_require__(/*! os */ \"os\");\nexports.STR_DATA = 'data';\nexports.STR_END = 'end';\nexports.STR_CLOSE = 'close';\nconst EMPTY_FN = () => { };\nexports.EMPTY_FN = EMPTY_FN;\nconst IDENTITY_FN = (val) => val;\nexports.IDENTITY_FN = IDENTITY_FN;\nconst pl = process.platform;\nexports.isWindows = pl === 'win32';\nexports.isMacos = pl === 'darwin';\nexports.isLinux = pl === 'linux';\nexports.isFreeBSD = pl === 'freebsd';\nexports.isIBMi = (0, os_1.type)() === 'OS400';\nexports.EVENTS = {\n    ALL: 'all',\n    READY: 'ready',\n    ADD: 'add',\n    CHANGE: 'change',\n    ADD_DIR: 'addDir',\n    UNLINK: 'unlink',\n    UNLINK_DIR: 'unlinkDir',\n    RAW: 'raw',\n    ERROR: 'error',\n};\nconst EV = exports.EVENTS;\nconst THROTTLE_MODE_WATCH = 'watch';\nconst statMethods = { lstat: promises_1.lstat, stat: promises_1.stat };\nconst KEY_LISTENERS = 'listeners';\nconst KEY_ERR = 'errHandlers';\nconst KEY_RAW = 'rawEmitters';\nconst HANDLER_KEYS = [KEY_LISTENERS, KEY_ERR, KEY_RAW];\n// prettier-ignore\nconst binaryExtensions = new Set([\n    '3dm', '3ds', '3g2', '3gp', '7z', 'a', 'aac', 'adp', 'afdesign', 'afphoto', 'afpub', 'ai',\n    'aif', 'aiff', 'alz', 'ape', 'apk', 'appimage', 'ar', 'arj', 'asf', 'au', 'avi',\n    'bak', 'baml', 'bh', 'bin', 'bk', 'bmp', 'btif', 'bz2', 'bzip2',\n    'cab', 'caf', 'cgm', 'class', 'cmx', 'cpio', 'cr2', 'cur', 'dat', 'dcm', 'deb', 'dex', 'djvu',\n    'dll', 'dmg', 'dng', 'doc', 'docm', 'docx', 'dot', 'dotm', 'dra', 'DS_Store', 'dsk', 'dts',\n    'dtshd', 'dvb', 'dwg', 'dxf',\n    'ecelp4800', 'ecelp7470', 'ecelp9600', 'egg', 'eol', 'eot', 'epub', 'exe',\n    'f4v', 'fbs', 'fh', 'fla', 'flac', 'flatpak', 'fli', 'flv', 'fpx', 'fst', 'fvt',\n    'g3', 'gh', 'gif', 'graffle', 'gz', 'gzip',\n    'h261', 'h263', 'h264', 'icns', 'ico', 'ief', 'img', 'ipa', 'iso',\n    'jar', 'jpeg', 'jpg', 'jpgv', 'jpm', 'jxr', 'key', 'ktx',\n    'lha', 'lib', 'lvp', 'lz', 'lzh', 'lzma', 'lzo',\n    'm3u', 'm4a', 'm4v', 'mar', 'mdi', 'mht', 'mid', 'midi', 'mj2', 'mka', 'mkv', 'mmr', 'mng',\n    'mobi', 'mov', 'movie', 'mp3',\n    'mp4', 'mp4a', 'mpeg', 'mpg', 'mpga', 'mxu',\n    'nef', 'npx', 'numbers', 'nupkg',\n    'o', 'odp', 'ods', 'odt', 'oga', 'ogg', 'ogv', 'otf', 'ott',\n    'pages', 'pbm', 'pcx', 'pdb', 'pdf', 'pea', 'pgm', 'pic', 'png', 'pnm', 'pot', 'potm',\n    'potx', 'ppa', 'ppam',\n    'ppm', 'pps', 'ppsm', 'ppsx', 'ppt', 'pptm', 'pptx', 'psd', 'pya', 'pyc', 'pyo', 'pyv',\n    'qt',\n    'rar', 'ras', 'raw', 'resources', 'rgb', 'rip', 'rlc', 'rmf', 'rmvb', 'rpm', 'rtf', 'rz',\n    's3m', 's7z', 'scpt', 'sgi', 'shar', 'snap', 'sil', 'sketch', 'slk', 'smv', 'snk', 'so',\n    'stl', 'suo', 'sub', 'swf',\n    'tar', 'tbz', 'tbz2', 'tga', 'tgz', 'thmx', 'tif', 'tiff', 'tlz', 'ttc', 'ttf', 'txz',\n    'udf', 'uvh', 'uvi', 'uvm', 'uvp', 'uvs', 'uvu',\n    'viv', 'vob',\n    'war', 'wav', 'wax', 'wbmp', 'wdp', 'weba', 'webm', 'webp', 'whl', 'wim', 'wm', 'wma',\n    'wmv', 'wmx', 'woff', 'woff2', 'wrm', 'wvx',\n    'xbm', 'xif', 'xla', 'xlam', 'xls', 'xlsb', 'xlsm', 'xlsx', 'xlt', 'xltm', 'xltx', 'xm',\n    'xmind', 'xpi', 'xpm', 'xwd', 'xz',\n    'z', 'zip', 'zipx',\n]);\nconst isBinaryPath = (filePath) => binaryExtensions.has(sysPath.extname(filePath).slice(1).toLowerCase());\n// TODO: emit errors properly. Example: EMFILE on Macos.\nconst foreach = (val, fn) => {\n    if (val instanceof Set) {\n        val.forEach(fn);\n    }\n    else {\n        fn(val);\n    }\n};\nconst addAndConvert = (main, prop, item) => {\n    let container = main[prop];\n    if (!(container instanceof Set)) {\n        main[prop] = container = new Set([container]);\n    }\n    container.add(item);\n};\nconst clearItem = (cont) => (key) => {\n    const set = cont[key];\n    if (set instanceof Set) {\n        set.clear();\n    }\n    else {\n        delete cont[key];\n    }\n};\nconst delFromSet = (main, prop, item) => {\n    const container = main[prop];\n    if (container instanceof Set) {\n        container.delete(item);\n    }\n    else if (container === item) {\n        delete main[prop];\n    }\n};\nconst isEmptySet = (val) => (val instanceof Set ? val.size === 0 : !val);\nconst FsWatchInstances = new Map();\n/**\n * Instantiates the fs_watch interface\n * @param path to be watched\n * @param options to be passed to fs_watch\n * @param listener main event handler\n * @param errHandler emits info about errors\n * @param emitRaw emits raw event data\n * @returns {NativeFsWatcher}\n */\nfunction createFsWatchInstance(path, options, listener, errHandler, emitRaw) {\n    const handleEvent = (rawEvent, evPath) => {\n        listener(path);\n        emitRaw(rawEvent, evPath, { watchedPath: path });\n        // emit based on events occurring for files from a directory's watcher in\n        // case the file's watcher misses it (and rely on throttling to de-dupe)\n        if (evPath && path !== evPath) {\n            fsWatchBroadcast(sysPath.resolve(path, evPath), KEY_LISTENERS, sysPath.join(path, evPath));\n        }\n    };\n    try {\n        return (0, fs_1.watch)(path, {\n            persistent: options.persistent,\n        }, handleEvent);\n    }\n    catch (error) {\n        errHandler(error);\n        return undefined;\n    }\n}\n/**\n * Helper for passing fs_watch event data to a collection of listeners\n * @param fullPath absolute path bound to fs_watch instance\n */\nconst fsWatchBroadcast = (fullPath, listenerType, val1, val2, val3) => {\n    const cont = FsWatchInstances.get(fullPath);\n    if (!cont)\n        return;\n    foreach(cont[listenerType], (listener) => {\n        listener(val1, val2, val3);\n    });\n};\n/**\n * Instantiates the fs_watch interface or binds listeners\n * to an existing one covering the same file system entry\n * @param path\n * @param fullPath absolute path\n * @param options to be passed to fs_watch\n * @param handlers container for event listener functions\n */\nconst setFsWatchListener = (path, fullPath, options, handlers) => {\n    const { listener, errHandler, rawEmitter } = handlers;\n    let cont = FsWatchInstances.get(fullPath);\n    let watcher;\n    if (!options.persistent) {\n        watcher = createFsWatchInstance(path, options, listener, errHandler, rawEmitter);\n        if (!watcher)\n            return;\n        return watcher.close.bind(watcher);\n    }\n    if (cont) {\n        addAndConvert(cont, KEY_LISTENERS, listener);\n        addAndConvert(cont, KEY_ERR, errHandler);\n        addAndConvert(cont, KEY_RAW, rawEmitter);\n    }\n    else {\n        watcher = createFsWatchInstance(path, options, fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS), errHandler, // no need to use broadcast here\n        fsWatchBroadcast.bind(null, fullPath, KEY_RAW));\n        if (!watcher)\n            return;\n        watcher.on(EV.ERROR, async (error) => {\n            const broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);\n            if (cont)\n                cont.watcherUnusable = true; // documented since Node 10.4.1\n            // Workaround for https://github.com/joyent/node/issues/4337\n            if (exports.isWindows && error.code === 'EPERM') {\n                try {\n                    const fd = await (0, promises_1.open)(path, 'r');\n                    await fd.close();\n                    broadcastErr(error);\n                }\n                catch (err) {\n                    // do nothing\n                }\n            }\n            else {\n                broadcastErr(error);\n            }\n        });\n        cont = {\n            listeners: listener,\n            errHandlers: errHandler,\n            rawEmitters: rawEmitter,\n            watcher,\n        };\n        FsWatchInstances.set(fullPath, cont);\n    }\n    // const index = cont.listeners.indexOf(listener);\n    // removes this instance's listeners and closes the underlying fs_watch\n    // instance if there are no more listeners left\n    return () => {\n        delFromSet(cont, KEY_LISTENERS, listener);\n        delFromSet(cont, KEY_ERR, errHandler);\n        delFromSet(cont, KEY_RAW, rawEmitter);\n        if (isEmptySet(cont.listeners)) {\n            // Check to protect against issue gh-730.\n            // if (cont.watcherUnusable) {\n            cont.watcher.close();\n            // }\n            FsWatchInstances.delete(fullPath);\n            HANDLER_KEYS.forEach(clearItem(cont));\n            // @ts-ignore\n            cont.watcher = undefined;\n            Object.freeze(cont);\n        }\n    };\n};\n// fs_watchFile helpers\n// object to hold per-process fs_watchFile instances\n// (may be shared across chokidar FSWatcher instances)\nconst FsWatchFileInstances = new Map();\n/**\n * Instantiates the fs_watchFile interface or binds listeners\n * to an existing one covering the same file system entry\n * @param path to be watched\n * @param fullPath absolute path\n * @param options options to be passed to fs_watchFile\n * @param handlers container for event listener functions\n * @returns closer\n */\nconst setFsWatchFileListener = (path, fullPath, options, handlers) => {\n    const { listener, rawEmitter } = handlers;\n    let cont = FsWatchFileInstances.get(fullPath);\n    // let listeners = new Set();\n    // let rawEmitters = new Set();\n    const copts = cont && cont.options;\n    if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {\n        // \"Upgrade\" the watcher to persistence or a quicker interval.\n        // This creates some unlikely edge case issues if the user mixes\n        // settings in a very weird way, but solving for those cases\n        // doesn't seem worthwhile for the added complexity.\n        // listeners = cont.listeners;\n        // rawEmitters = cont.rawEmitters;\n        (0, fs_1.unwatchFile)(fullPath);\n        cont = undefined;\n    }\n    if (cont) {\n        addAndConvert(cont, KEY_LISTENERS, listener);\n        addAndConvert(cont, KEY_RAW, rawEmitter);\n    }\n    else {\n        // TODO\n        // listeners.add(listener);\n        // rawEmitters.add(rawEmitter);\n        cont = {\n            listeners: listener,\n            rawEmitters: rawEmitter,\n            options,\n            watcher: (0, fs_1.watchFile)(fullPath, options, (curr, prev) => {\n                foreach(cont.rawEmitters, (rawEmitter) => {\n                    rawEmitter(EV.CHANGE, fullPath, { curr, prev });\n                });\n                const currmtime = curr.mtimeMs;\n                if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) {\n                    foreach(cont.listeners, (listener) => listener(path, curr));\n                }\n            }),\n        };\n        FsWatchFileInstances.set(fullPath, cont);\n    }\n    // const index = cont.listeners.indexOf(listener);\n    // Removes this instance's listeners and closes the underlying fs_watchFile\n    // instance if there are no more listeners left.\n    return () => {\n        delFromSet(cont, KEY_LISTENERS, listener);\n        delFromSet(cont, KEY_RAW, rawEmitter);\n        if (isEmptySet(cont.listeners)) {\n            FsWatchFileInstances.delete(fullPath);\n            (0, fs_1.unwatchFile)(fullPath);\n            cont.options = cont.watcher = undefined;\n            Object.freeze(cont);\n        }\n    };\n};\n/**\n * @mixin\n */\nclass NodeFsHandler {\n    constructor(fsW) {\n        this.fsw = fsW;\n        this._boundHandleError = (error) => fsW._handleError(error);\n    }\n    /**\n     * Watch file for changes with fs_watchFile or fs_watch.\n     * @param path to file or dir\n     * @param listener on fs change\n     * @returns closer for the watcher instance\n     */\n    _watchWithNodeFs(path, listener) {\n        const opts = this.fsw.options;\n        const directory = sysPath.dirname(path);\n        const basename = sysPath.basename(path);\n        const parent = this.fsw._getWatchedDir(directory);\n        parent.add(basename);\n        const absolutePath = sysPath.resolve(path);\n        const options = {\n            persistent: opts.persistent,\n        };\n        if (!listener)\n            listener = exports.EMPTY_FN;\n        let closer;\n        if (opts.usePolling) {\n            const enableBin = opts.interval !== opts.binaryInterval;\n            options.interval = enableBin && isBinaryPath(basename) ? opts.binaryInterval : opts.interval;\n            closer = setFsWatchFileListener(path, absolutePath, options, {\n                listener,\n                rawEmitter: this.fsw._emitRaw,\n            });\n        }\n        else {\n            closer = setFsWatchListener(path, absolutePath, options, {\n                listener,\n                errHandler: this._boundHandleError,\n                rawEmitter: this.fsw._emitRaw,\n            });\n        }\n        return closer;\n    }\n    /**\n     * Watch a file and emit add event if warranted.\n     * @returns closer for the watcher instance\n     */\n    _handleFile(file, stats, initialAdd) {\n        if (this.fsw.closed) {\n            return;\n        }\n        const dirname = sysPath.dirname(file);\n        const basename = sysPath.basename(file);\n        const parent = this.fsw._getWatchedDir(dirname);\n        // stats is always present\n        let prevStats = stats;\n        // if the file is already being watched, do nothing\n        if (parent.has(basename))\n            return;\n        const listener = async (path, newStats) => {\n            if (!this.fsw._throttle(THROTTLE_MODE_WATCH, file, 5))\n                return;\n            if (!newStats || newStats.mtimeMs === 0) {\n                try {\n                    const newStats = await (0, promises_1.stat)(file);\n                    if (this.fsw.closed)\n                        return;\n                    // Check that change event was not fired because of changed only accessTime.\n                    const at = newStats.atimeMs;\n                    const mt = newStats.mtimeMs;\n                    if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n                        this.fsw._emit(EV.CHANGE, file, newStats);\n                    }\n                    if ((exports.isMacos || exports.isLinux || exports.isFreeBSD) && prevStats.ino !== newStats.ino) {\n                        this.fsw._closeFile(path);\n                        prevStats = newStats;\n                        const closer = this._watchWithNodeFs(file, listener);\n                        if (closer)\n                            this.fsw._addPathCloser(path, closer);\n                    }\n                    else {\n                        prevStats = newStats;\n                    }\n                }\n                catch (error) {\n                    // Fix issues where mtime is null but file is still present\n                    this.fsw._remove(dirname, basename);\n                }\n                // add is about to be emitted if file not already tracked in parent\n            }\n            else if (parent.has(basename)) {\n                // Check that change event was not fired because of changed only accessTime.\n                const at = newStats.atimeMs;\n                const mt = newStats.mtimeMs;\n                if (!at || at <= mt || mt !== prevStats.mtimeMs) {\n                    this.fsw._emit(EV.CHANGE, file, newStats);\n                }\n                prevStats = newStats;\n            }\n        };\n        // kick off the watcher\n        const closer = this._watchWithNodeFs(file, listener);\n        // emit an add event if we're supposed to\n        if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {\n            if (!this.fsw._throttle(EV.ADD, file, 0))\n                return;\n            this.fsw._emit(EV.ADD, file, stats);\n        }\n        return closer;\n    }\n    /**\n     * Handle symlinks encountered while reading a dir.\n     * @param entry returned by readdirp\n     * @param directory path of dir being read\n     * @param path of this item\n     * @param item basename of this item\n     * @returns true if no more processing is needed for this entry.\n     */\n    async _handleSymlink(entry, directory, path, item) {\n        if (this.fsw.closed) {\n            return;\n        }\n        const full = entry.fullPath;\n        const dir = this.fsw._getWatchedDir(directory);\n        if (!this.fsw.options.followSymlinks) {\n            // watch symlink directly (don't follow) and detect changes\n            this.fsw._incrReadyCount();\n            let linkPath;\n            try {\n                linkPath = await (0, promises_1.realpath)(path);\n            }\n            catch (e) {\n                this.fsw._emitReady();\n                return true;\n            }\n            if (this.fsw.closed)\n                return;\n            if (dir.has(item)) {\n                if (this.fsw._symlinkPaths.get(full) !== linkPath) {\n                    this.fsw._symlinkPaths.set(full, linkPath);\n                    this.fsw._emit(EV.CHANGE, path, entry.stats);\n                }\n            }\n            else {\n                dir.add(item);\n                this.fsw._symlinkPaths.set(full, linkPath);\n                this.fsw._emit(EV.ADD, path, entry.stats);\n            }\n            this.fsw._emitReady();\n            return true;\n        }\n        // don't follow the same symlink more than once\n        if (this.fsw._symlinkPaths.has(full)) {\n            return true;\n        }\n        this.fsw._symlinkPaths.set(full, true);\n    }\n    _handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {\n        // Normalize the directory name on Windows\n        directory = sysPath.join(directory, '');\n        throttler = this.fsw._throttle('readdir', directory, 1000);\n        if (!throttler)\n            return;\n        const previous = this.fsw._getWatchedDir(wh.path);\n        const current = new Set();\n        let stream = this.fsw._readdirp(directory, {\n            fileFilter: (entry) => wh.filterPath(entry),\n            directoryFilter: (entry) => wh.filterDir(entry),\n        });\n        if (!stream)\n            return;\n        stream\n            .on(exports.STR_DATA, async (entry) => {\n            if (this.fsw.closed) {\n                stream = undefined;\n                return;\n            }\n            const item = entry.path;\n            let path = sysPath.join(directory, item);\n            current.add(item);\n            if (entry.stats.isSymbolicLink() &&\n                (await this._handleSymlink(entry, directory, path, item))) {\n                return;\n            }\n            if (this.fsw.closed) {\n                stream = undefined;\n                return;\n            }\n            // Files that present in current directory snapshot\n            // but absent in previous are added to watch list and\n            // emit `add` event.\n            if (item === target || (!target && !previous.has(item))) {\n                this.fsw._incrReadyCount();\n                // ensure relativeness of path is preserved in case of watcher reuse\n                path = sysPath.join(dir, sysPath.relative(dir, path));\n                this._addToNodeFs(path, initialAdd, wh, depth + 1);\n            }\n        })\n            .on(EV.ERROR, this._boundHandleError);\n        return new Promise((resolve, reject) => {\n            if (!stream)\n                return reject();\n            stream.once(exports.STR_END, () => {\n                if (this.fsw.closed) {\n                    stream = undefined;\n                    return;\n                }\n                const wasThrottled = throttler ? throttler.clear() : false;\n                resolve(undefined);\n                // Files that absent in current directory snapshot\n                // but present in previous emit `remove` event\n                // and are removed from @watched[directory].\n                previous\n                    .getChildren()\n                    .filter((item) => {\n                    return item !== directory && !current.has(item);\n                })\n                    .forEach((item) => {\n                    this.fsw._remove(directory, item);\n                });\n                stream = undefined;\n                // one more time for any missed in case changes came in extremely quickly\n                if (wasThrottled)\n                    this._handleRead(directory, false, wh, target, dir, depth, throttler);\n            });\n        });\n    }\n    /**\n     * Read directory to add / remove files from `@watched` list and re-read it on change.\n     * @param dir fs path\n     * @param stats\n     * @param initialAdd\n     * @param depth relative to user-supplied path\n     * @param target child path targeted for watch\n     * @param wh Common watch helpers for this path\n     * @param realpath\n     * @returns closer for the watcher instance.\n     */\n    async _handleDir(dir, stats, initialAdd, depth, target, wh, realpath) {\n        const parentDir = this.fsw._getWatchedDir(sysPath.dirname(dir));\n        const tracked = parentDir.has(sysPath.basename(dir));\n        if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) {\n            this.fsw._emit(EV.ADD_DIR, dir, stats);\n        }\n        // ensure dir is tracked (harmless if redundant)\n        parentDir.add(sysPath.basename(dir));\n        this.fsw._getWatchedDir(dir);\n        let throttler;\n        let closer;\n        const oDepth = this.fsw.options.depth;\n        if ((oDepth == null || depth <= oDepth) && !this.fsw._symlinkPaths.has(realpath)) {\n            if (!target) {\n                await this._handleRead(dir, initialAdd, wh, target, dir, depth, throttler);\n                if (this.fsw.closed)\n                    return;\n            }\n            closer = this._watchWithNodeFs(dir, (dirPath, stats) => {\n                // if current directory is removed, do nothing\n                if (stats && stats.mtimeMs === 0)\n                    return;\n                this._handleRead(dirPath, false, wh, target, dir, depth, throttler);\n            });\n        }\n        return closer;\n    }\n    /**\n     * Handle added file, directory, or glob pattern.\n     * Delegates call to _handleFile / _handleDir after checks.\n     * @param path to file or ir\n     * @param initialAdd was the file added at watch instantiation?\n     * @param priorWh depth relative to user-supplied path\n     * @param depth Child path actually targeted for watch\n     * @param target Child path actually targeted for watch\n     */\n    async _addToNodeFs(path, initialAdd, priorWh, depth, target) {\n        const ready = this.fsw._emitReady;\n        if (this.fsw._isIgnored(path) || this.fsw.closed) {\n            ready();\n            return false;\n        }\n        const wh = this.fsw._getWatchHelpers(path);\n        if (priorWh) {\n            wh.filterPath = (entry) => priorWh.filterPath(entry);\n            wh.filterDir = (entry) => priorWh.filterDir(entry);\n        }\n        // evaluate what is at the path we're being asked to watch\n        try {\n            const stats = await statMethods[wh.statMethod](wh.watchPath);\n            if (this.fsw.closed)\n                return;\n            if (this.fsw._isIgnored(wh.watchPath, stats)) {\n                ready();\n                return false;\n            }\n            const follow = this.fsw.options.followSymlinks;\n            let closer;\n            if (stats.isDirectory()) {\n                const absPath = sysPath.resolve(path);\n                const targetPath = follow ? await (0, promises_1.realpath)(path) : path;\n                if (this.fsw.closed)\n                    return;\n                closer = await this._handleDir(wh.watchPath, stats, initialAdd, depth, target, wh, targetPath);\n                if (this.fsw.closed)\n                    return;\n                // preserve this symlink's target path\n                if (absPath !== targetPath && targetPath !== undefined) {\n                    this.fsw._symlinkPaths.set(absPath, targetPath);\n                }\n            }\n            else if (stats.isSymbolicLink()) {\n                const targetPath = follow ? await (0, promises_1.realpath)(path) : path;\n                if (this.fsw.closed)\n                    return;\n                const parent = sysPath.dirname(wh.watchPath);\n                this.fsw._getWatchedDir(parent).add(wh.watchPath);\n                this.fsw._emit(EV.ADD, wh.watchPath, stats);\n                closer = await this._handleDir(parent, stats, initialAdd, depth, path, wh, targetPath);\n                if (this.fsw.closed)\n                    return;\n                // preserve this symlink's target path\n                if (targetPath !== undefined) {\n                    this.fsw._symlinkPaths.set(sysPath.resolve(path), targetPath);\n                }\n            }\n            else {\n                closer = this._handleFile(wh.watchPath, stats, initialAdd);\n            }\n            ready();\n            if (closer)\n                this.fsw._addPathCloser(path, closer);\n            return false;\n        }\n        catch (error) {\n            if (this.fsw._handleError(error)) {\n                ready();\n                return path;\n            }\n        }\n    }\n}\nexports.NodeFsHandler = NodeFsHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/chokidar/handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/chokidar/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/chokidar/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FSWatcher = exports.WatchHelper = void 0;\nexports.watch = watch;\n/*! chokidar - MIT License (c) 2012 Paul Miller (paulmillr.com) */\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst promises_1 = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst sysPath = __webpack_require__(/*! path */ \"path\");\nconst readdirp_1 = __webpack_require__(/*! readdirp */ \"(ssr)/./node_modules/hardhat/node_modules/readdirp/index.js\");\nconst handler_js_1 = __webpack_require__(/*! ./handler.js */ \"(ssr)/./node_modules/hardhat/node_modules/chokidar/handler.js\");\nconst SLASH = '/';\nconst SLASH_SLASH = '//';\nconst ONE_DOT = '.';\nconst TWO_DOTS = '..';\nconst STRING_TYPE = 'string';\nconst BACK_SLASH_RE = /\\\\/g;\nconst DOUBLE_SLASH_RE = /\\/\\//;\nconst DOT_RE = /\\..*\\.(sw[px])$|~$|\\.subl.*\\.tmp/;\nconst REPLACER_RE = /^\\.[/\\\\]/;\nfunction arrify(item) {\n    return Array.isArray(item) ? item : [item];\n}\nconst isMatcherObject = (matcher) => typeof matcher === 'object' && matcher !== null && !(matcher instanceof RegExp);\nfunction createPattern(matcher) {\n    if (typeof matcher === 'function')\n        return matcher;\n    if (typeof matcher === 'string')\n        return (string) => matcher === string;\n    if (matcher instanceof RegExp)\n        return (string) => matcher.test(string);\n    if (typeof matcher === 'object' && matcher !== null) {\n        return (string) => {\n            if (matcher.path === string)\n                return true;\n            if (matcher.recursive) {\n                const relative = sysPath.relative(matcher.path, string);\n                if (!relative) {\n                    return false;\n                }\n                return !relative.startsWith('..') && !sysPath.isAbsolute(relative);\n            }\n            return false;\n        };\n    }\n    return () => false;\n}\nfunction normalizePath(path) {\n    if (typeof path !== 'string')\n        throw new Error('string expected');\n    path = sysPath.normalize(path);\n    path = path.replace(/\\\\/g, '/');\n    let prepend = false;\n    if (path.startsWith('//'))\n        prepend = true;\n    const DOUBLE_SLASH_RE = /\\/\\//;\n    while (path.match(DOUBLE_SLASH_RE))\n        path = path.replace(DOUBLE_SLASH_RE, '/');\n    if (prepend)\n        path = '/' + path;\n    return path;\n}\nfunction matchPatterns(patterns, testString, stats) {\n    const path = normalizePath(testString);\n    for (let index = 0; index < patterns.length; index++) {\n        const pattern = patterns[index];\n        if (pattern(path, stats)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction anymatch(matchers, testString) {\n    if (matchers == null) {\n        throw new TypeError('anymatch: specify first argument');\n    }\n    // Early cache for matchers.\n    const matchersArray = arrify(matchers);\n    const patterns = matchersArray.map((matcher) => createPattern(matcher));\n    if (testString == null) {\n        return (testString, stats) => {\n            return matchPatterns(patterns, testString, stats);\n        };\n    }\n    return matchPatterns(patterns, testString);\n}\nconst unifyPaths = (paths_) => {\n    const paths = arrify(paths_).flat();\n    if (!paths.every((p) => typeof p === STRING_TYPE)) {\n        throw new TypeError(`Non-string provided as watch path: ${paths}`);\n    }\n    return paths.map(normalizePathToUnix);\n};\n// If SLASH_SLASH occurs at the beginning of path, it is not replaced\n//     because \"//StoragePC/DrivePool/Movies\" is a valid network path\nconst toUnix = (string) => {\n    let str = string.replace(BACK_SLASH_RE, SLASH);\n    let prepend = false;\n    if (str.startsWith(SLASH_SLASH)) {\n        prepend = true;\n    }\n    while (str.match(DOUBLE_SLASH_RE)) {\n        str = str.replace(DOUBLE_SLASH_RE, SLASH);\n    }\n    if (prepend) {\n        str = SLASH + str;\n    }\n    return str;\n};\n// Our version of upath.normalize\n// TODO: this is not equal to path-normalize module - investigate why\nconst normalizePathToUnix = (path) => toUnix(sysPath.normalize(toUnix(path)));\n// TODO: refactor\nconst normalizeIgnored = (cwd = '') => (path) => {\n    if (typeof path === 'string') {\n        return normalizePathToUnix(sysPath.isAbsolute(path) ? path : sysPath.join(cwd, path));\n    }\n    else {\n        return path;\n    }\n};\nconst getAbsolutePath = (path, cwd) => {\n    if (sysPath.isAbsolute(path)) {\n        return path;\n    }\n    return sysPath.join(cwd, path);\n};\nconst EMPTY_SET = Object.freeze(new Set());\n/**\n * Directory entry.\n */\nclass DirEntry {\n    constructor(dir, removeWatcher) {\n        this.path = dir;\n        this._removeWatcher = removeWatcher;\n        this.items = new Set();\n    }\n    add(item) {\n        const { items } = this;\n        if (!items)\n            return;\n        if (item !== ONE_DOT && item !== TWO_DOTS)\n            items.add(item);\n    }\n    async remove(item) {\n        const { items } = this;\n        if (!items)\n            return;\n        items.delete(item);\n        if (items.size > 0)\n            return;\n        const dir = this.path;\n        try {\n            await (0, promises_1.readdir)(dir);\n        }\n        catch (err) {\n            if (this._removeWatcher) {\n                this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));\n            }\n        }\n    }\n    has(item) {\n        const { items } = this;\n        if (!items)\n            return;\n        return items.has(item);\n    }\n    getChildren() {\n        const { items } = this;\n        if (!items)\n            return [];\n        return [...items.values()];\n    }\n    dispose() {\n        this.items.clear();\n        this.path = '';\n        this._removeWatcher = handler_js_1.EMPTY_FN;\n        this.items = EMPTY_SET;\n        Object.freeze(this);\n    }\n}\nconst STAT_METHOD_F = 'stat';\nconst STAT_METHOD_L = 'lstat';\nclass WatchHelper {\n    constructor(path, follow, fsw) {\n        this.fsw = fsw;\n        const watchPath = path;\n        this.path = path = path.replace(REPLACER_RE, '');\n        this.watchPath = watchPath;\n        this.fullWatchPath = sysPath.resolve(watchPath);\n        this.dirParts = [];\n        this.dirParts.forEach((parts) => {\n            if (parts.length > 1)\n                parts.pop();\n        });\n        this.followSymlinks = follow;\n        this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;\n    }\n    entryPath(entry) {\n        return sysPath.join(this.watchPath, sysPath.relative(this.watchPath, entry.fullPath));\n    }\n    filterPath(entry) {\n        const { stats } = entry;\n        if (stats && stats.isSymbolicLink())\n            return this.filterDir(entry);\n        const resolvedPath = this.entryPath(entry);\n        // TODO: what if stats is undefined? remove !\n        return this.fsw._isntIgnored(resolvedPath, stats) && this.fsw._hasReadPermissions(stats);\n    }\n    filterDir(entry) {\n        return this.fsw._isntIgnored(this.entryPath(entry), entry.stats);\n    }\n}\nexports.WatchHelper = WatchHelper;\n/**\n * Watches files & directories for changes. Emitted events:\n * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`\n *\n *     new FSWatcher()\n *       .add(directories)\n *       .on('add', path => log('File', path, 'was added'))\n */\nclass FSWatcher extends events_1.EventEmitter {\n    // Not indenting methods for history sake; for now.\n    constructor(_opts = {}) {\n        super();\n        this.closed = false;\n        this._closers = new Map();\n        this._ignoredPaths = new Set();\n        this._throttled = new Map();\n        this._streams = new Set();\n        this._symlinkPaths = new Map();\n        this._watched = new Map();\n        this._pendingWrites = new Map();\n        this._pendingUnlinks = new Map();\n        this._readyCount = 0;\n        this._readyEmitted = false;\n        const awf = _opts.awaitWriteFinish;\n        const DEF_AWF = { stabilityThreshold: 2000, pollInterval: 100 };\n        const opts = {\n            // Defaults\n            persistent: true,\n            ignoreInitial: false,\n            ignorePermissionErrors: false,\n            interval: 100,\n            binaryInterval: 300,\n            followSymlinks: true,\n            usePolling: false,\n            // useAsync: false,\n            atomic: true, // NOTE: overwritten later (depends on usePolling)\n            ..._opts,\n            // Change format\n            ignored: _opts.ignored ? arrify(_opts.ignored) : arrify([]),\n            awaitWriteFinish: awf === true ? DEF_AWF : typeof awf === 'object' ? { ...DEF_AWF, ...awf } : false,\n        };\n        // Always default to polling on IBM i because fs.watch() is not available on IBM i.\n        if (handler_js_1.isIBMi)\n            opts.usePolling = true;\n        // Editor atomic write normalization enabled by default with fs.watch\n        if (opts.atomic === undefined)\n            opts.atomic = !opts.usePolling;\n        // opts.atomic = typeof _opts.atomic === 'number' ? _opts.atomic : 100;\n        // Global override. Useful for developers, who need to force polling for all\n        // instances of chokidar, regardless of usage / dependency depth\n        const envPoll = process.env.CHOKIDAR_USEPOLLING;\n        if (envPoll !== undefined) {\n            const envLower = envPoll.toLowerCase();\n            if (envLower === 'false' || envLower === '0')\n                opts.usePolling = false;\n            else if (envLower === 'true' || envLower === '1')\n                opts.usePolling = true;\n            else\n                opts.usePolling = !!envLower;\n        }\n        const envInterval = process.env.CHOKIDAR_INTERVAL;\n        if (envInterval)\n            opts.interval = Number.parseInt(envInterval, 10);\n        // This is done to emit ready only once, but each 'add' will increase that?\n        let readyCalls = 0;\n        this._emitReady = () => {\n            readyCalls++;\n            if (readyCalls >= this._readyCount) {\n                this._emitReady = handler_js_1.EMPTY_FN;\n                this._readyEmitted = true;\n                // use process.nextTick to allow time for listener to be bound\n                process.nextTick(() => this.emit(handler_js_1.EVENTS.READY));\n            }\n        };\n        this._emitRaw = (...args) => this.emit(handler_js_1.EVENTS.RAW, ...args);\n        this._boundRemove = this._remove.bind(this);\n        this.options = opts;\n        this._nodeFsHandler = new handler_js_1.NodeFsHandler(this);\n        // You’re frozen when your heart’s not open.\n        Object.freeze(opts);\n    }\n    _addIgnoredPath(matcher) {\n        if (isMatcherObject(matcher)) {\n            // return early if we already have a deeply equal matcher object\n            for (const ignored of this._ignoredPaths) {\n                if (isMatcherObject(ignored) &&\n                    ignored.path === matcher.path &&\n                    ignored.recursive === matcher.recursive) {\n                    return;\n                }\n            }\n        }\n        this._ignoredPaths.add(matcher);\n    }\n    _removeIgnoredPath(matcher) {\n        this._ignoredPaths.delete(matcher);\n        // now find any matcher objects with the matcher as path\n        if (typeof matcher === 'string') {\n            for (const ignored of this._ignoredPaths) {\n                // TODO (43081j): make this more efficient.\n                // probably just make a `this._ignoredDirectories` or some\n                // such thing.\n                if (isMatcherObject(ignored) && ignored.path === matcher) {\n                    this._ignoredPaths.delete(ignored);\n                }\n            }\n        }\n    }\n    // Public methods\n    /**\n     * Adds paths to be watched on an existing FSWatcher instance.\n     * @param paths_ file or file list. Other arguments are unused\n     */\n    add(paths_, _origAdd, _internal) {\n        const { cwd } = this.options;\n        this.closed = false;\n        this._closePromise = undefined;\n        let paths = unifyPaths(paths_);\n        if (cwd) {\n            paths = paths.map((path) => {\n                const absPath = getAbsolutePath(path, cwd);\n                // Check `path` instead of `absPath` because the cwd portion can't be a glob\n                return absPath;\n            });\n        }\n        paths.forEach((path) => {\n            this._removeIgnoredPath(path);\n        });\n        this._userIgnored = undefined;\n        if (!this._readyCount)\n            this._readyCount = 0;\n        this._readyCount += paths.length;\n        Promise.all(paths.map(async (path) => {\n            const res = await this._nodeFsHandler._addToNodeFs(path, !_internal, undefined, 0, _origAdd);\n            if (res)\n                this._emitReady();\n            return res;\n        })).then((results) => {\n            if (this.closed)\n                return;\n            results.forEach((item) => {\n                if (item)\n                    this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));\n            });\n        });\n        return this;\n    }\n    /**\n     * Close watchers or start ignoring events from specified paths.\n     */\n    unwatch(paths_) {\n        if (this.closed)\n            return this;\n        const paths = unifyPaths(paths_);\n        const { cwd } = this.options;\n        paths.forEach((path) => {\n            // convert to absolute path unless relative path already matches\n            if (!sysPath.isAbsolute(path) && !this._closers.has(path)) {\n                if (cwd)\n                    path = sysPath.join(cwd, path);\n                path = sysPath.resolve(path);\n            }\n            this._closePath(path);\n            this._addIgnoredPath(path);\n            if (this._watched.has(path)) {\n                this._addIgnoredPath({\n                    path,\n                    recursive: true,\n                });\n            }\n            // reset the cached userIgnored anymatch fn\n            // to make ignoredPaths changes effective\n            this._userIgnored = undefined;\n        });\n        return this;\n    }\n    /**\n     * Close watchers and remove all listeners from watched paths.\n     */\n    close() {\n        if (this._closePromise) {\n            return this._closePromise;\n        }\n        this.closed = true;\n        // Memory management.\n        this.removeAllListeners();\n        const closers = [];\n        this._closers.forEach((closerList) => closerList.forEach((closer) => {\n            const promise = closer();\n            if (promise instanceof Promise)\n                closers.push(promise);\n        }));\n        this._streams.forEach((stream) => stream.destroy());\n        this._userIgnored = undefined;\n        this._readyCount = 0;\n        this._readyEmitted = false;\n        this._watched.forEach((dirent) => dirent.dispose());\n        this._closers.clear();\n        this._watched.clear();\n        this._streams.clear();\n        this._symlinkPaths.clear();\n        this._throttled.clear();\n        this._closePromise = closers.length\n            ? Promise.all(closers).then(() => undefined)\n            : Promise.resolve();\n        return this._closePromise;\n    }\n    /**\n     * Expose list of watched paths\n     * @returns for chaining\n     */\n    getWatched() {\n        const watchList = {};\n        this._watched.forEach((entry, dir) => {\n            const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;\n            const index = key || ONE_DOT;\n            watchList[index] = entry.getChildren().sort();\n        });\n        return watchList;\n    }\n    emitWithAll(event, args) {\n        this.emit(event, ...args);\n        if (event !== handler_js_1.EVENTS.ERROR)\n            this.emit(handler_js_1.EVENTS.ALL, event, ...args);\n    }\n    // Common helpers\n    // --------------\n    /**\n     * Normalize and emit events.\n     * Calling _emit DOES NOT MEAN emit() would be called!\n     * @param event Type of event\n     * @param path File or directory path\n     * @param stats arguments to be passed with event\n     * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag\n     */\n    async _emit(event, path, stats) {\n        if (this.closed)\n            return;\n        const opts = this.options;\n        if (handler_js_1.isWindows)\n            path = sysPath.normalize(path);\n        if (opts.cwd)\n            path = sysPath.relative(opts.cwd, path);\n        const args = [path];\n        if (stats != null)\n            args.push(stats);\n        const awf = opts.awaitWriteFinish;\n        let pw;\n        if (awf && (pw = this._pendingWrites.get(path))) {\n            pw.lastChange = new Date();\n            return this;\n        }\n        if (opts.atomic) {\n            if (event === handler_js_1.EVENTS.UNLINK) {\n                this._pendingUnlinks.set(path, [event, ...args]);\n                setTimeout(() => {\n                    this._pendingUnlinks.forEach((entry, path) => {\n                        this.emit(...entry);\n                        this.emit(handler_js_1.EVENTS.ALL, ...entry);\n                        this._pendingUnlinks.delete(path);\n                    });\n                }, typeof opts.atomic === 'number' ? opts.atomic : 100);\n                return this;\n            }\n            if (event === handler_js_1.EVENTS.ADD && this._pendingUnlinks.has(path)) {\n                event = handler_js_1.EVENTS.CHANGE;\n                this._pendingUnlinks.delete(path);\n            }\n        }\n        if (awf && (event === handler_js_1.EVENTS.ADD || event === handler_js_1.EVENTS.CHANGE) && this._readyEmitted) {\n            const awfEmit = (err, stats) => {\n                if (err) {\n                    event = handler_js_1.EVENTS.ERROR;\n                    args[0] = err;\n                    this.emitWithAll(event, args);\n                }\n                else if (stats) {\n                    // if stats doesn't exist the file must have been deleted\n                    if (args.length > 1) {\n                        args[1] = stats;\n                    }\n                    else {\n                        args.push(stats);\n                    }\n                    this.emitWithAll(event, args);\n                }\n            };\n            this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);\n            return this;\n        }\n        if (event === handler_js_1.EVENTS.CHANGE) {\n            const isThrottled = !this._throttle(handler_js_1.EVENTS.CHANGE, path, 50);\n            if (isThrottled)\n                return this;\n        }\n        if (opts.alwaysStat &&\n            stats === undefined &&\n            (event === handler_js_1.EVENTS.ADD || event === handler_js_1.EVENTS.ADD_DIR || event === handler_js_1.EVENTS.CHANGE)) {\n            const fullPath = opts.cwd ? sysPath.join(opts.cwd, path) : path;\n            let stats;\n            try {\n                stats = await (0, promises_1.stat)(fullPath);\n            }\n            catch (err) {\n                // do nothing\n            }\n            // Suppress event when fs_stat fails, to avoid sending undefined 'stat'\n            if (!stats || this.closed)\n                return;\n            args.push(stats);\n        }\n        this.emitWithAll(event, args);\n        return this;\n    }\n    /**\n     * Common handler for errors\n     * @returns The error if defined, otherwise the value of the FSWatcher instance's `closed` flag\n     */\n    _handleError(error) {\n        const code = error && error.code;\n        if (error &&\n            code !== 'ENOENT' &&\n            code !== 'ENOTDIR' &&\n            (!this.options.ignorePermissionErrors || (code !== 'EPERM' && code !== 'EACCES'))) {\n            this.emit(handler_js_1.EVENTS.ERROR, error);\n        }\n        return error || this.closed;\n    }\n    /**\n     * Helper utility for throttling\n     * @param actionType type being throttled\n     * @param path being acted upon\n     * @param timeout duration of time to suppress duplicate actions\n     * @returns tracking object or false if action should be suppressed\n     */\n    _throttle(actionType, path, timeout) {\n        if (!this._throttled.has(actionType)) {\n            this._throttled.set(actionType, new Map());\n        }\n        const action = this._throttled.get(actionType);\n        if (!action)\n            throw new Error('invalid throttle');\n        const actionPath = action.get(path);\n        if (actionPath) {\n            actionPath.count++;\n            return false;\n        }\n        // eslint-disable-next-line prefer-const\n        let timeoutObject;\n        const clear = () => {\n            const item = action.get(path);\n            const count = item ? item.count : 0;\n            action.delete(path);\n            clearTimeout(timeoutObject);\n            if (item)\n                clearTimeout(item.timeoutObject);\n            return count;\n        };\n        timeoutObject = setTimeout(clear, timeout);\n        const thr = { timeoutObject, clear, count: 0 };\n        action.set(path, thr);\n        return thr;\n    }\n    _incrReadyCount() {\n        return this._readyCount++;\n    }\n    /**\n     * Awaits write operation to finish.\n     * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.\n     * @param path being acted upon\n     * @param threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished\n     * @param event\n     * @param awfEmit Callback to be called when ready for event to be emitted.\n     */\n    _awaitWriteFinish(path, threshold, event, awfEmit) {\n        const awf = this.options.awaitWriteFinish;\n        if (typeof awf !== 'object')\n            return;\n        const pollInterval = awf.pollInterval;\n        let timeoutHandler;\n        let fullPath = path;\n        if (this.options.cwd && !sysPath.isAbsolute(path)) {\n            fullPath = sysPath.join(this.options.cwd, path);\n        }\n        const now = new Date();\n        const writes = this._pendingWrites;\n        function awaitWriteFinishFn(prevStat) {\n            (0, fs_1.stat)(fullPath, (err, curStat) => {\n                if (err || !writes.has(path)) {\n                    if (err && err.code !== 'ENOENT')\n                        awfEmit(err);\n                    return;\n                }\n                const now = Number(new Date());\n                if (prevStat && curStat.size !== prevStat.size) {\n                    writes.get(path).lastChange = now;\n                }\n                const pw = writes.get(path);\n                const df = now - pw.lastChange;\n                if (df >= threshold) {\n                    writes.delete(path);\n                    awfEmit(undefined, curStat);\n                }\n                else {\n                    timeoutHandler = setTimeout(awaitWriteFinishFn, pollInterval, curStat);\n                }\n            });\n        }\n        if (!writes.has(path)) {\n            writes.set(path, {\n                lastChange: now,\n                cancelWait: () => {\n                    writes.delete(path);\n                    clearTimeout(timeoutHandler);\n                    return event;\n                },\n            });\n            timeoutHandler = setTimeout(awaitWriteFinishFn, pollInterval);\n        }\n    }\n    /**\n     * Determines whether user has asked to ignore this path.\n     */\n    _isIgnored(path, stats) {\n        if (this.options.atomic && DOT_RE.test(path))\n            return true;\n        if (!this._userIgnored) {\n            const { cwd } = this.options;\n            const ign = this.options.ignored;\n            const ignored = (ign || []).map(normalizeIgnored(cwd));\n            const ignoredPaths = [...this._ignoredPaths];\n            const list = [...ignoredPaths.map(normalizeIgnored(cwd)), ...ignored];\n            this._userIgnored = anymatch(list, undefined);\n        }\n        return this._userIgnored(path, stats);\n    }\n    _isntIgnored(path, stat) {\n        return !this._isIgnored(path, stat);\n    }\n    /**\n     * Provides a set of common helpers and properties relating to symlink handling.\n     * @param path file or directory pattern being watched\n     */\n    _getWatchHelpers(path) {\n        return new WatchHelper(path, this.options.followSymlinks, this);\n    }\n    // Directory helpers\n    // -----------------\n    /**\n     * Provides directory tracking objects\n     * @param directory path of the directory\n     */\n    _getWatchedDir(directory) {\n        const dir = sysPath.resolve(directory);\n        if (!this._watched.has(dir))\n            this._watched.set(dir, new DirEntry(dir, this._boundRemove));\n        return this._watched.get(dir);\n    }\n    // File helpers\n    // ------------\n    /**\n     * Check for read permissions: https://stackoverflow.com/a/11781404/1358405\n     */\n    _hasReadPermissions(stats) {\n        if (this.options.ignorePermissionErrors)\n            return true;\n        return Boolean(Number(stats.mode) & 0o400);\n    }\n    /**\n     * Handles emitting unlink events for\n     * files and directories, and via recursion, for\n     * files and directories within directories that are unlinked\n     * @param directory within which the following item is located\n     * @param item      base path of item/directory\n     */\n    _remove(directory, item, isDirectory) {\n        // if what is being deleted is a directory, get that directory's paths\n        // for recursive deleting and cleaning of watched object\n        // if it is not a directory, nestedDirectoryChildren will be empty array\n        const path = sysPath.join(directory, item);\n        const fullPath = sysPath.resolve(path);\n        isDirectory =\n            isDirectory != null ? isDirectory : this._watched.has(path) || this._watched.has(fullPath);\n        // prevent duplicate handling in case of arriving here nearly simultaneously\n        // via multiple paths (such as _handleFile and _handleDir)\n        if (!this._throttle('remove', path, 100))\n            return;\n        // if the only watched file is removed, watch for its return\n        if (!isDirectory && this._watched.size === 1) {\n            this.add(directory, item, true);\n        }\n        // This will create a new entry in the watched object in either case\n        // so we got to do the directory check beforehand\n        const wp = this._getWatchedDir(path);\n        const nestedDirectoryChildren = wp.getChildren();\n        // Recursively remove children directories / files.\n        nestedDirectoryChildren.forEach((nested) => this._remove(path, nested));\n        // Check if item was on the watched list and remove it\n        const parent = this._getWatchedDir(directory);\n        const wasTracked = parent.has(item);\n        parent.remove(item);\n        // Fixes issue #1042 -> Relative paths were detected and added as symlinks\n        // (https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L612),\n        // but never removed from the map in case the path was deleted.\n        // This leads to an incorrect state if the path was recreated:\n        // https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L553\n        if (this._symlinkPaths.has(fullPath)) {\n            this._symlinkPaths.delete(fullPath);\n        }\n        // If we wait for this file to be fully written, cancel the wait.\n        let relPath = path;\n        if (this.options.cwd)\n            relPath = sysPath.relative(this.options.cwd, path);\n        if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {\n            const event = this._pendingWrites.get(relPath).cancelWait();\n            if (event === handler_js_1.EVENTS.ADD)\n                return;\n        }\n        // The Entry will either be a directory that just got removed\n        // or a bogus entry to a file, in either case we have to remove it\n        this._watched.delete(path);\n        this._watched.delete(fullPath);\n        const eventName = isDirectory ? handler_js_1.EVENTS.UNLINK_DIR : handler_js_1.EVENTS.UNLINK;\n        if (wasTracked && !this._isIgnored(path))\n            this._emit(eventName, path);\n        // Avoid conflicts if we later create another file with the same name\n        this._closePath(path);\n    }\n    /**\n     * Closes all watchers for a path\n     */\n    _closePath(path) {\n        this._closeFile(path);\n        const dir = sysPath.dirname(path);\n        this._getWatchedDir(dir).remove(sysPath.basename(path));\n    }\n    /**\n     * Closes only file-specific watchers\n     */\n    _closeFile(path) {\n        const closers = this._closers.get(path);\n        if (!closers)\n            return;\n        closers.forEach((closer) => closer());\n        this._closers.delete(path);\n    }\n    _addPathCloser(path, closer) {\n        if (!closer)\n            return;\n        let list = this._closers.get(path);\n        if (!list) {\n            list = [];\n            this._closers.set(path, list);\n        }\n        list.push(closer);\n    }\n    _readdirp(root, opts) {\n        if (this.closed)\n            return;\n        const options = { type: handler_js_1.EVENTS.ALL, alwaysStat: true, lstat: true, ...opts, depth: 0 };\n        let stream = (0, readdirp_1.readdirp)(root, options);\n        this._streams.add(stream);\n        stream.once(handler_js_1.STR_CLOSE, () => {\n            stream = undefined;\n        });\n        stream.once(handler_js_1.STR_END, () => {\n            if (stream) {\n                this._streams.delete(stream);\n                stream = undefined;\n            }\n        });\n        return stream;\n    }\n}\nexports.FSWatcher = FSWatcher;\n/**\n * Instantiates watcher with paths to be tracked.\n * @param paths file / directory paths\n * @param options opts, such as `atomic`, `awaitWriteFinish`, `ignored`, and others\n * @returns an instance of FSWatcher for chaining.\n * @example\n * const watcher = watch('.').on('all', (event, path) => { console.log(event, path); });\n * watch('.', { atomic: true, awaitWriteFinish: true, ignored: (f, stats) => stats?.isFile() && !f.endsWith('.js') })\n */\nfunction watch(paths, options = {}) {\n    const watcher = new FSWatcher(options);\n    watcher.add(paths);\n    return watcher;\n}\nexports[\"default\"] = { watch, FSWatcher };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/chokidar/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/ethereum-cryptography/bip39/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/ethereum-cryptography/bip39/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mnemonicToSeedSync = exports.mnemonicToSeed = exports.validateMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.generateMnemonic = void 0;\nvar bip39_1 = __webpack_require__(/*! @scure/bip39 */ \"(ssr)/./node_modules/@scure/bip39/index.js\");\nObject.defineProperty(exports, \"generateMnemonic\", ({ enumerable: true, get: function () { return bip39_1.generateMnemonic; } }));\nObject.defineProperty(exports, \"mnemonicToEntropy\", ({ enumerable: true, get: function () { return bip39_1.mnemonicToEntropy; } }));\nObject.defineProperty(exports, \"entropyToMnemonic\", ({ enumerable: true, get: function () { return bip39_1.entropyToMnemonic; } }));\nObject.defineProperty(exports, \"validateMnemonic\", ({ enumerable: true, get: function () { return bip39_1.validateMnemonic; } }));\nObject.defineProperty(exports, \"mnemonicToSeed\", ({ enumerable: true, get: function () { return bip39_1.mnemonicToSeed; } }));\nObject.defineProperty(exports, \"mnemonicToSeedSync\", ({ enumerable: true, get: function () { return bip39_1.mnemonicToSeedSync; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2JpcDM5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLHNCQUFzQixHQUFHLHdCQUF3QixHQUFHLHlCQUF5QixHQUFHLHlCQUF5QixHQUFHLHdCQUF3QjtBQUNqSyxjQUFjLG1CQUFPLENBQUMsZ0VBQWM7QUFDcEMsb0RBQW1ELEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQy9ILHFEQUFvRCxFQUFFLHFDQUFxQyxxQ0FBcUMsRUFBQztBQUNqSSxxREFBb0QsRUFBRSxxQ0FBcUMscUNBQXFDLEVBQUM7QUFDakksb0RBQW1ELEVBQUUscUNBQXFDLG9DQUFvQyxFQUFDO0FBQy9ILGtEQUFpRCxFQUFFLHFDQUFxQyxrQ0FBa0MsRUFBQztBQUMzSCxzREFBcUQsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9iaXAzOS9pbmRleC5qcz85NzIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tbmVtb25pY1RvU2VlZFN5bmMgPSBleHBvcnRzLm1uZW1vbmljVG9TZWVkID0gZXhwb3J0cy52YWxpZGF0ZU1uZW1vbmljID0gZXhwb3J0cy5lbnRyb3B5VG9NbmVtb25pYyA9IGV4cG9ydHMubW5lbW9uaWNUb0VudHJvcHkgPSBleHBvcnRzLmdlbmVyYXRlTW5lbW9uaWMgPSB2b2lkIDA7XG52YXIgYmlwMzlfMSA9IHJlcXVpcmUoXCJAc2N1cmUvYmlwMzlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZW5lcmF0ZU1uZW1vbmljXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaXAzOV8xLmdlbmVyYXRlTW5lbW9uaWM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtbmVtb25pY1RvRW50cm9weVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmlwMzlfMS5tbmVtb25pY1RvRW50cm9weTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVudHJvcHlUb01uZW1vbmljXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaXAzOV8xLmVudHJvcHlUb01uZW1vbmljOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmFsaWRhdGVNbmVtb25pY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmlwMzlfMS52YWxpZGF0ZU1uZW1vbmljOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibW5lbW9uaWNUb1NlZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpcDM5XzEubW5lbW9uaWNUb1NlZWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtbmVtb25pY1RvU2VlZFN5bmNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJpcDM5XzEubW5lbW9uaWNUb1NlZWRTeW5jOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/ethereum-cryptography/bip39/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/ethereum-cryptography/hdkey.js":
/*!**************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/ethereum-cryptography/hdkey.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\nvar bip32_1 = __webpack_require__(/*! @scure/bip32 */ \"(ssr)/./node_modules/@scure/bip32/lib/index.js\");\nObject.defineProperty(exports, \"HARDENED_OFFSET\", ({ enumerable: true, get: function () { return bip32_1.HARDENED_OFFSET; } }));\nObject.defineProperty(exports, \"HDKey\", ({ enumerable: true, get: function () { return bip32_1.HDKey; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2hka2V5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsR0FBRyx1QkFBdUI7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLG9FQUFjO0FBQ3BDLG1EQUFrRCxFQUFFLHFDQUFxQyxtQ0FBbUMsRUFBQztBQUM3SCx5Q0FBd0MsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvbm9kZV9tb2R1bGVzL2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9oZGtleS5qcz82YjE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IREtleSA9IGV4cG9ydHMuSEFSREVORURfT0ZGU0VUID0gdm9pZCAwO1xudmFyIGJpcDMyXzEgPSByZXF1aXJlKFwiQHNjdXJlL2JpcDMyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSEFSREVORURfT0ZGU0VUXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaXAzMl8xLkhBUkRFTkVEX09GRlNFVDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkhES2V5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBiaXAzMl8xLkhES2V5OyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/ethereum-cryptography/hdkey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/readdirp/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/readdirp/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReaddirpStream = exports.EntryTypes = void 0;\nexports.readdirp = readdirp;\nexports.readdirpPromise = readdirpPromise;\nconst promises_1 = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst node_stream_1 = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_path_1 = __webpack_require__(/*! node:path */ \"node:path\");\nexports.EntryTypes = {\n    FILE_TYPE: 'files',\n    DIR_TYPE: 'directories',\n    FILE_DIR_TYPE: 'files_directories',\n    EVERYTHING_TYPE: 'all',\n};\nconst defaultOptions = {\n    root: '.',\n    fileFilter: (_entryInfo) => true,\n    directoryFilter: (_entryInfo) => true,\n    type: exports.EntryTypes.FILE_TYPE,\n    lstat: false,\n    depth: 2147483648,\n    alwaysStat: false,\n    highWaterMark: 4096,\n};\nObject.freeze(defaultOptions);\nconst RECURSIVE_ERROR_CODE = 'READDIRP_RECURSIVE_ERROR';\nconst NORMAL_FLOW_ERRORS = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP', RECURSIVE_ERROR_CODE]);\nconst ALL_TYPES = [\n    exports.EntryTypes.DIR_TYPE,\n    exports.EntryTypes.EVERYTHING_TYPE,\n    exports.EntryTypes.FILE_DIR_TYPE,\n    exports.EntryTypes.FILE_TYPE,\n];\nconst DIR_TYPES = new Set([\n    exports.EntryTypes.DIR_TYPE,\n    exports.EntryTypes.EVERYTHING_TYPE,\n    exports.EntryTypes.FILE_DIR_TYPE,\n]);\nconst FILE_TYPES = new Set([\n    exports.EntryTypes.EVERYTHING_TYPE,\n    exports.EntryTypes.FILE_DIR_TYPE,\n    exports.EntryTypes.FILE_TYPE,\n]);\nconst isNormalFlowError = (error) => NORMAL_FLOW_ERRORS.has(error.code);\nconst wantBigintFsStats = process.platform === 'win32';\nconst emptyFn = (_entryInfo) => true;\nconst normalizeFilter = (filter) => {\n    if (filter === undefined)\n        return emptyFn;\n    if (typeof filter === 'function')\n        return filter;\n    if (typeof filter === 'string') {\n        const fl = filter.trim();\n        return (entry) => entry.basename === fl;\n    }\n    if (Array.isArray(filter)) {\n        const trItems = filter.map((item) => item.trim());\n        return (entry) => trItems.some((f) => entry.basename === f);\n    }\n    return emptyFn;\n};\n/** Readable readdir stream, emitting new files as they're being listed. */\nclass ReaddirpStream extends node_stream_1.Readable {\n    constructor(options = {}) {\n        super({\n            objectMode: true,\n            autoDestroy: true,\n            highWaterMark: options.highWaterMark,\n        });\n        const opts = { ...defaultOptions, ...options };\n        const { root, type } = opts;\n        this._fileFilter = normalizeFilter(opts.fileFilter);\n        this._directoryFilter = normalizeFilter(opts.directoryFilter);\n        const statMethod = opts.lstat ? promises_1.lstat : promises_1.stat;\n        // Use bigint stats if it's windows and stat() supports options (node 10+).\n        if (wantBigintFsStats) {\n            this._stat = (path) => statMethod(path, { bigint: true });\n        }\n        else {\n            this._stat = statMethod;\n        }\n        this._maxDepth = opts.depth ?? defaultOptions.depth;\n        this._wantsDir = type ? DIR_TYPES.has(type) : false;\n        this._wantsFile = type ? FILE_TYPES.has(type) : false;\n        this._wantsEverything = type === exports.EntryTypes.EVERYTHING_TYPE;\n        this._root = (0, node_path_1.resolve)(root);\n        this._isDirent = !opts.alwaysStat;\n        this._statsProp = this._isDirent ? 'dirent' : 'stats';\n        this._rdOptions = { encoding: 'utf8', withFileTypes: this._isDirent };\n        // Launch stream with one parent, the root dir.\n        this.parents = [this._exploreDir(root, 1)];\n        this.reading = false;\n        this.parent = undefined;\n    }\n    async _read(batch) {\n        if (this.reading)\n            return;\n        this.reading = true;\n        try {\n            while (!this.destroyed && batch > 0) {\n                const par = this.parent;\n                const fil = par && par.files;\n                if (fil && fil.length > 0) {\n                    const { path, depth } = par;\n                    const slice = fil.splice(0, batch).map((dirent) => this._formatEntry(dirent, path));\n                    const awaited = await Promise.all(slice);\n                    for (const entry of awaited) {\n                        if (!entry) {\n                            batch--;\n                            return;\n                        }\n                        if (this.destroyed)\n                            return;\n                        const entryType = await this._getEntryType(entry);\n                        if (entryType === 'directory' && this._directoryFilter(entry)) {\n                            if (depth <= this._maxDepth) {\n                                this.parents.push(this._exploreDir(entry.fullPath, depth + 1));\n                            }\n                            if (this._wantsDir) {\n                                this.push(entry);\n                                batch--;\n                            }\n                        }\n                        else if ((entryType === 'file' || this._includeAsFile(entry)) &&\n                            this._fileFilter(entry)) {\n                            if (this._wantsFile) {\n                                this.push(entry);\n                                batch--;\n                            }\n                        }\n                    }\n                }\n                else {\n                    const parent = this.parents.pop();\n                    if (!parent) {\n                        this.push(null);\n                        break;\n                    }\n                    this.parent = await parent;\n                    if (this.destroyed)\n                        return;\n                }\n            }\n        }\n        catch (error) {\n            this.destroy(error);\n        }\n        finally {\n            this.reading = false;\n        }\n    }\n    async _exploreDir(path, depth) {\n        let files;\n        try {\n            files = await (0, promises_1.readdir)(path, this._rdOptions);\n        }\n        catch (error) {\n            this._onError(error);\n        }\n        return { files, depth, path };\n    }\n    async _formatEntry(dirent, path) {\n        let entry;\n        const basename = this._isDirent ? dirent.name : dirent;\n        try {\n            const fullPath = (0, node_path_1.resolve)((0, node_path_1.join)(path, basename));\n            entry = { path: (0, node_path_1.relative)(this._root, fullPath), fullPath, basename };\n            entry[this._statsProp] = this._isDirent ? dirent : await this._stat(fullPath);\n        }\n        catch (err) {\n            this._onError(err);\n            return;\n        }\n        return entry;\n    }\n    _onError(err) {\n        if (isNormalFlowError(err) && !this.destroyed) {\n            this.emit('warn', err);\n        }\n        else {\n            this.destroy(err);\n        }\n    }\n    async _getEntryType(entry) {\n        // entry may be undefined, because a warning or an error were emitted\n        // and the statsProp is undefined\n        if (!entry && this._statsProp in entry) {\n            return '';\n        }\n        const stats = entry[this._statsProp];\n        if (stats.isFile())\n            return 'file';\n        if (stats.isDirectory())\n            return 'directory';\n        if (stats && stats.isSymbolicLink()) {\n            const full = entry.fullPath;\n            try {\n                const entryRealPath = await (0, promises_1.realpath)(full);\n                const entryRealPathStats = await (0, promises_1.lstat)(entryRealPath);\n                if (entryRealPathStats.isFile()) {\n                    return 'file';\n                }\n                if (entryRealPathStats.isDirectory()) {\n                    const len = entryRealPath.length;\n                    if (full.startsWith(entryRealPath) && full.substr(len, 1) === node_path_1.sep) {\n                        const recursiveError = new Error(`Circular symlink detected: \"${full}\" points to \"${entryRealPath}\"`);\n                        // @ts-ignore\n                        recursiveError.code = RECURSIVE_ERROR_CODE;\n                        return this._onError(recursiveError);\n                    }\n                    return 'directory';\n                }\n            }\n            catch (error) {\n                this._onError(error);\n                return '';\n            }\n        }\n    }\n    _includeAsFile(entry) {\n        const stats = entry && entry[this._statsProp];\n        return stats && this._wantsEverything && !stats.isDirectory();\n    }\n}\nexports.ReaddirpStream = ReaddirpStream;\n/**\n * Streaming version: Reads all files and directories in given root recursively.\n * Consumes ~constant small amount of RAM.\n * @param root Root directory\n * @param options Options to specify root (start directory), filters and recursion depth\n */\nfunction readdirp(root, options = {}) {\n    // @ts-ignore\n    let type = options.entryType || options.type;\n    if (type === 'both')\n        type = exports.EntryTypes.FILE_DIR_TYPE; // backwards-compatibility\n    if (type)\n        options.type = type;\n    if (!root) {\n        throw new Error('readdirp: root argument is required. Usage: readdirp(root, options)');\n    }\n    else if (typeof root !== 'string') {\n        throw new TypeError('readdirp: root argument must be a string. Usage: readdirp(root, options)');\n    }\n    else if (type && !ALL_TYPES.includes(type)) {\n        throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(', ')}`);\n    }\n    options.root = root;\n    return new ReaddirpStream(options);\n}\n/**\n * Promise version: Reads all files and directories in given root recursively.\n * Compared to streaming version, will consume a lot of RAM e.g. when 1 million files are listed.\n * @returns array of paths and their entry infos\n */\nfunction readdirpPromise(root, options = {}) {\n    return new Promise((resolve, reject) => {\n        const files = [];\n        readdirp(root, options)\n            .on('data', (entry) => files.push(entry))\n            .on('end', () => resolve(files))\n            .on('error', (error) => reject(error));\n    });\n}\nexports[\"default\"] = readdirp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/readdirp/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/index.js":
/*!************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var async = __webpack_require__(/*! ./lib/async */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/async.js\");\nasync.core = __webpack_require__(/*! ./lib/core */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/core.js\");\nasync.isCore = __webpack_require__(/*! ./lib/is-core */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/is-core.js\");\nasync.sync = __webpack_require__(/*! ./lib/sync */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/sync.js\");\n\nmodule.exports = async;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLG1CQUFPLENBQUMsbUZBQWE7QUFDakMsYUFBYSxtQkFBTyxDQUFDLGlGQUFZO0FBQ2pDLGVBQWUsbUJBQU8sQ0FBQyx1RkFBZTtBQUN0QyxhQUFhLG1CQUFPLENBQUMsaUZBQVk7O0FBRWpDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L25vZGVfbW9kdWxlcy9yZXNvbHZlL2luZGV4LmpzPzYwMmYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzeW5jID0gcmVxdWlyZSgnLi9saWIvYXN5bmMnKTtcbmFzeW5jLmNvcmUgPSByZXF1aXJlKCcuL2xpYi9jb3JlJyk7XG5hc3luYy5pc0NvcmUgPSByZXF1aXJlKCcuL2xpYi9pcy1jb3JlJyk7XG5hc3luYy5zeW5jID0gcmVxdWlyZSgnLi9saWIvc3luYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/async.js":
/*!****************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/async.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar caller = __webpack_require__(/*! ./caller.js */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/caller.js\");\nvar nodeModulesPaths = __webpack_require__(/*! ./node-modules-paths.js */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/node-modules-paths.js\");\nvar normalizeOptions = __webpack_require__(/*! ./normalize-options.js */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/normalize-options.js\");\nvar isCore = __webpack_require__(/*! ./is-core */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/is-core.js\");\n\nvar realpathFS = fs.realpath && typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;\n\nvar defaultIsFile = function isFile(file, cb) {\n    fs.stat(file, function (err, stat) {\n        if (!err) {\n            return cb(null, stat.isFile() || stat.isFIFO());\n        }\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n        return cb(err);\n    });\n};\n\nvar defaultIsDir = function isDirectory(dir, cb) {\n    fs.stat(dir, function (err, stat) {\n        if (!err) {\n            return cb(null, stat.isDirectory());\n        }\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n        return cb(err);\n    });\n};\n\nvar defaultRealpath = function realpath(x, cb) {\n    realpathFS(x, function (realpathErr, realPath) {\n        if (realpathErr && realpathErr.code !== 'ENOENT') cb(realpathErr);\n        else cb(null, realpathErr ? x : realPath);\n    });\n};\n\nvar maybeRealpath = function maybeRealpath(realpath, x, opts, cb) {\n    if (opts && opts.preserveSymlinks === false) {\n        realpath(x, cb);\n    } else {\n        cb(null, x);\n    }\n};\n\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\n    var dirs = nodeModulesPaths(start, opts, x);\n    for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path.join(dirs[i], x);\n    }\n    return dirs;\n};\n\nmodule.exports = function resolve(x, options, callback) {\n    var cb = callback;\n    var opts = options;\n    if (typeof options === 'function') {\n        cb = opts;\n        opts = {};\n    }\n    if (typeof x !== 'string') {\n        var err = new TypeError('Path must be a string.');\n        return process.nextTick(function () {\n            cb(err);\n        });\n    }\n\n    opts = normalizeOptions(x, opts);\n\n    var isFile = opts.isFile || defaultIsFile;\n    var isDirectory = opts.isDirectory || defaultIsDir;\n    var readFile = opts.readFile || fs.readFile;\n    var realpath = opts.realpath || defaultRealpath;\n    var packageIterator = opts.packageIterator;\n\n    var extensions = opts.extensions || ['.js'];\n    var basedir = opts.basedir || path.dirname(caller());\n    var parent = opts.filename || basedir;\n\n    opts.paths = opts.paths || [];\n\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\n    var absoluteStart = path.resolve(basedir);\n\n    maybeRealpath(\n        realpath,\n        absoluteStart,\n        opts,\n        function (err, realStart) {\n            if (err) cb(err);\n            else init(realStart);\n        }\n    );\n\n    var res;\n    function init(basedir) {\n        if ((/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/).test(x)) {\n            res = path.resolve(basedir, x);\n            if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\n            if ((/\\/$/).test(x) && res === basedir) {\n                loadAsDirectory(res, opts.package, onfile);\n            } else loadAsFile(res, opts.package, onfile);\n        } else if (isCore(x)) {\n            return cb(null, x);\n        } else loadNodeModules(x, basedir, function (err, n, pkg) {\n            if (err) cb(err);\n            else if (n) {\n                return maybeRealpath(realpath, n, opts, function (err, realN) {\n                    if (err) {\n                        cb(err);\n                    } else {\n                        cb(null, realN, pkg);\n                    }\n                });\n            } else {\n                var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n                moduleError.code = 'MODULE_NOT_FOUND';\n                cb(moduleError);\n            }\n        });\n    }\n\n    function onfile(err, m, pkg) {\n        if (err) cb(err);\n        else if (m) cb(null, m, pkg);\n        else loadAsDirectory(res, function (err, d, pkg) {\n            if (err) cb(err);\n            else if (d) {\n                maybeRealpath(realpath, d, opts, function (err, realD) {\n                    if (err) {\n                        cb(err);\n                    } else {\n                        cb(null, realD, pkg);\n                    }\n                });\n            } else {\n                var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n                moduleError.code = 'MODULE_NOT_FOUND';\n                cb(moduleError);\n            }\n        });\n    }\n\n    function loadAsFile(x, thePackage, callback) {\n        var loadAsFilePackage = thePackage;\n        var cb = callback;\n        if (typeof loadAsFilePackage === 'function') {\n            cb = loadAsFilePackage;\n            loadAsFilePackage = undefined;\n        }\n\n        var exts = [''].concat(extensions);\n        load(exts, x, loadAsFilePackage);\n\n        function load(exts, x, loadPackage) {\n            if (exts.length === 0) return cb(null, undefined, loadPackage);\n            var file = x + exts[0];\n\n            var pkg = loadPackage;\n            if (pkg) onpkg(null, pkg);\n            else loadpkg(path.dirname(file), onpkg);\n\n            function onpkg(err, pkg_, dir) {\n                pkg = pkg_;\n                if (err) return cb(err);\n                if (dir && pkg && opts.pathFilter) {\n                    var rfile = path.relative(dir, file);\n                    var rel = rfile.slice(0, rfile.length - exts[0].length);\n                    var r = opts.pathFilter(pkg, x, rel);\n                    if (r) return load(\n                        [''].concat(extensions.slice()),\n                        path.resolve(dir, r),\n                        pkg\n                    );\n                }\n                isFile(file, onex);\n            }\n            function onex(err, ex) {\n                if (err) return cb(err);\n                if (ex) return cb(null, file, pkg);\n                load(exts.slice(1), x, pkg);\n            }\n        }\n    }\n\n    function loadpkg(dir, cb) {\n        if (dir === '' || dir === '/') return cb(null);\n        if (process.platform === 'win32' && (/^\\w:[/\\\\]*$/).test(dir)) {\n            return cb(null);\n        }\n        if ((/[/\\\\]node_modules[/\\\\]*$/).test(dir)) return cb(null);\n\n        maybeRealpath(realpath, dir, opts, function (unwrapErr, pkgdir) {\n            if (unwrapErr) return loadpkg(path.dirname(dir), cb);\n            var pkgfile = path.join(pkgdir, 'package.json');\n            isFile(pkgfile, function (err, ex) {\n                // on err, ex is false\n                if (!ex) return loadpkg(path.dirname(dir), cb);\n\n                readFile(pkgfile, function (err, body) {\n                    if (err) cb(err);\n                    try { var pkg = JSON.parse(body); } catch (jsonErr) {}\n\n                    if (pkg && opts.packageFilter) {\n                        pkg = opts.packageFilter(pkg, pkgfile);\n                    }\n                    cb(null, pkg, dir);\n                });\n            });\n        });\n    }\n\n    function loadAsDirectory(x, loadAsDirectoryPackage, callback) {\n        var cb = callback;\n        var fpkg = loadAsDirectoryPackage;\n        if (typeof fpkg === 'function') {\n            cb = fpkg;\n            fpkg = opts.package;\n        }\n\n        maybeRealpath(realpath, x, opts, function (unwrapErr, pkgdir) {\n            if (unwrapErr) return cb(unwrapErr);\n            var pkgfile = path.join(pkgdir, 'package.json');\n            isFile(pkgfile, function (err, ex) {\n                if (err) return cb(err);\n                if (!ex) return loadAsFile(path.join(x, 'index'), fpkg, cb);\n\n                readFile(pkgfile, function (err, body) {\n                    if (err) return cb(err);\n                    try {\n                        var pkg = JSON.parse(body);\n                    } catch (jsonErr) {}\n\n                    if (pkg && opts.packageFilter) {\n                        pkg = opts.packageFilter(pkg, pkgfile);\n                    }\n\n                    if (pkg && pkg.main) {\n                        if (typeof pkg.main !== 'string') {\n                            var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\n                            mainError.code = 'INVALID_PACKAGE_MAIN';\n                            return cb(mainError);\n                        }\n                        if (pkg.main === '.' || pkg.main === './') {\n                            pkg.main = 'index';\n                        }\n                        loadAsFile(path.resolve(x, pkg.main), pkg, function (err, m, pkg) {\n                            if (err) return cb(err);\n                            if (m) return cb(null, m, pkg);\n                            if (!pkg) return loadAsFile(path.join(x, 'index'), pkg, cb);\n\n                            var dir = path.resolve(x, pkg.main);\n                            loadAsDirectory(dir, pkg, function (err, n, pkg) {\n                                if (err) return cb(err);\n                                if (n) return cb(null, n, pkg);\n                                loadAsFile(path.join(x, 'index'), pkg, cb);\n                            });\n                        });\n                        return;\n                    }\n\n                    loadAsFile(path.join(x, '/index'), pkg, cb);\n                });\n            });\n        });\n    }\n\n    function processDirs(cb, dirs) {\n        if (dirs.length === 0) return cb(null, undefined);\n        var dir = dirs[0];\n\n        isDirectory(path.dirname(dir), isdir);\n\n        function isdir(err, isdir) {\n            if (err) return cb(err);\n            if (!isdir) return processDirs(cb, dirs.slice(1));\n            loadAsFile(dir, opts.package, onfile);\n        }\n\n        function onfile(err, m, pkg) {\n            if (err) return cb(err);\n            if (m) return cb(null, m, pkg);\n            loadAsDirectory(dir, opts.package, ondir);\n        }\n\n        function ondir(err, n, pkg) {\n            if (err) return cb(err);\n            if (n) return cb(null, n, pkg);\n            processDirs(cb, dirs.slice(1));\n        }\n    }\n    function loadNodeModules(x, start, cb) {\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\n        processDirs(\n            cb,\n            packageIterator ? packageIterator(x, start, thunk, opts) : thunk()\n        );\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/lib/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/caller.js":
/*!*****************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/caller.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n    // see https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n    var origPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = function (_, stack) { return stack; };\n    var stack = (new Error()).stack;\n    Error.prepareStackTrace = origPrepareStackTrace;\n    return stack[2].getFileName();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvY2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvY2FsbGVyLmpzP2Y4MjMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gc2VlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avdjgvd2lraS9KYXZhU2NyaXB0U3RhY2tUcmFjZUFwaVxuICAgIHZhciBvcmlnUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcbiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIChfLCBzdGFjaykgeyByZXR1cm4gc3RhY2s7IH07XG4gICAgdmFyIHN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IG9yaWdQcmVwYXJlU3RhY2tUcmFjZTtcbiAgICByZXR1cm4gc3RhY2tbMl0uZ2V0RmlsZU5hbWUoKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/lib/caller.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/core.js":
/*!***************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/core.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var current = (process.versions && process.versions.node && process.versions.node.split('.')) || [];\n\nfunction specifierIncluded(specifier) {\n    var parts = specifier.split(' ');\n    var op = parts.length > 1 ? parts[0] : '=';\n    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');\n\n    for (var i = 0; i < 3; ++i) {\n        var cur = Number(current[i] || 0);\n        var ver = Number(versionParts[i] || 0);\n        if (cur === ver) {\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        }\n        if (op === '<') {\n            return cur < ver;\n        } else if (op === '>=') {\n            return cur >= ver;\n        } else {\n            return false;\n        }\n    }\n    return op === '>=';\n}\n\nfunction matchesRange(range) {\n    var specifiers = range.split(/ ?&& ?/);\n    if (specifiers.length === 0) { return false; }\n    for (var i = 0; i < specifiers.length; ++i) {\n        if (!specifierIncluded(specifiers[i])) { return false; }\n    }\n    return true;\n}\n\nfunction versionIncluded(specifierValue) {\n    if (typeof specifierValue === 'boolean') { return specifierValue; }\n    if (specifierValue && typeof specifierValue === 'object') {\n        for (var i = 0; i < specifierValue.length; ++i) {\n            if (matchesRange(specifierValue[i])) { return true; }\n        }\n        return false;\n    }\n    return matchesRange(specifierValue);\n}\n\nvar data = __webpack_require__(/*! ./core.json */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/core.json\");\n\nvar core = {};\nfor (var mod in data) { // eslint-disable-line no-restricted-syntax\n    if (Object.prototype.hasOwnProperty.call(data, mod)) {\n        core[mod] = versionIncluded(data[mod]);\n    }\n}\nmodule.exports = core;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvY29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxvQkFBb0IsdUJBQXVCO0FBQzNDLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQSx3QkFBd0IsMkJBQTJCO0FBQ25ELG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxvRkFBYTs7QUFFaEM7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvY29yZS5qcz8wN2JlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjdXJyZW50ID0gKHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpKSB8fCBbXTtcblxuZnVuY3Rpb24gc3BlY2lmaWVySW5jbHVkZWQoc3BlY2lmaWVyKSB7XG4gICAgdmFyIHBhcnRzID0gc3BlY2lmaWVyLnNwbGl0KCcgJyk7XG4gICAgdmFyIG9wID0gcGFydHMubGVuZ3RoID4gMSA/IHBhcnRzWzBdIDogJz0nO1xuICAgIHZhciB2ZXJzaW9uUGFydHMgPSAocGFydHMubGVuZ3RoID4gMSA/IHBhcnRzWzFdIDogcGFydHNbMF0pLnNwbGl0KCcuJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgICAgICB2YXIgY3VyID0gTnVtYmVyKGN1cnJlbnRbaV0gfHwgMCk7XG4gICAgICAgIHZhciB2ZXIgPSBOdW1iZXIodmVyc2lvblBhcnRzW2ldIHx8IDApO1xuICAgICAgICBpZiAoY3VyID09PSB2ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcCA9PT0gJzwnKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VyIDwgdmVyO1xuICAgICAgICB9IGVsc2UgaWYgKG9wID09PSAnPj0nKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VyID49IHZlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3AgPT09ICc+PSc7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXNSYW5nZShyYW5nZSkge1xuICAgIHZhciBzcGVjaWZpZXJzID0gcmFuZ2Uuc3BsaXQoLyA/JiYgPy8pO1xuICAgIGlmIChzcGVjaWZpZXJzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwZWNpZmllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKCFzcGVjaWZpZXJJbmNsdWRlZChzcGVjaWZpZXJzW2ldKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHZlcnNpb25JbmNsdWRlZChzcGVjaWZpZXJWYWx1ZSkge1xuICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyVmFsdWUgPT09ICdib29sZWFuJykgeyByZXR1cm4gc3BlY2lmaWVyVmFsdWU7IH1cbiAgICBpZiAoc3BlY2lmaWVyVmFsdWUgJiYgdHlwZW9mIHNwZWNpZmllclZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwZWNpZmllclZhbHVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hlc1JhbmdlKHNwZWNpZmllclZhbHVlW2ldKSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoZXNSYW5nZShzcGVjaWZpZXJWYWx1ZSk7XG59XG5cbnZhciBkYXRhID0gcmVxdWlyZSgnLi9jb3JlLmpzb24nKTtcblxudmFyIGNvcmUgPSB7fTtcbmZvciAodmFyIG1vZCBpbiBkYXRhKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIG1vZCkpIHtcbiAgICAgICAgY29yZVttb2RdID0gdmVyc2lvbkluY2x1ZGVkKGRhdGFbbW9kXSk7XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjb3JlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/is-core.js":
/*!******************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/is-core.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var core = __webpack_require__(/*! ./core */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/core.js\");\n\nmodule.exports = function isCore(x) {\n    return Object.prototype.hasOwnProperty.call(core, x);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvaXMtY29yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsNkVBQVE7O0FBRTNCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvaXMtY29yZS5qcz8zMjNkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb3JlID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDb3JlKHgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvcmUsIHgpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/lib/is-core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/node-modules-paths.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/node-modules-paths.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var path = __webpack_require__(/*! path */ \"path\");\nvar parse = path.parse || __webpack_require__(/*! path-parse */ \"(ssr)/./node_modules/path-parse/index.js\");\n\nvar getNodeModulesDirs = function getNodeModulesDirs(absoluteStart, modules) {\n    var prefix = '/';\n    if ((/^([A-Za-z]:)/).test(absoluteStart)) {\n        prefix = '';\n    } else if ((/^\\\\\\\\/).test(absoluteStart)) {\n        prefix = '\\\\\\\\';\n    }\n\n    var paths = [absoluteStart];\n    var parsed = parse(absoluteStart);\n    while (parsed.dir !== paths[paths.length - 1]) {\n        paths.push(parsed.dir);\n        parsed = parse(parsed.dir);\n    }\n\n    return paths.reduce(function (dirs, aPath) {\n        return dirs.concat(modules.map(function (moduleDir) {\n            return path.resolve(prefix, aPath, moduleDir);\n        }));\n    }, []);\n};\n\nmodule.exports = function nodeModulesPaths(start, opts, request) {\n    var modules = opts && opts.moduleDirectory\n        ? [].concat(opts.moduleDirectory)\n        : ['node_modules'];\n\n    if (opts && typeof opts.paths === 'function') {\n        return opts.paths(\n            request,\n            start,\n            function () { return getNodeModulesDirs(start, modules); },\n            opts\n        );\n    }\n\n    var dirs = getNodeModulesDirs(start, modules);\n    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvbm9kZS1tb2R1bGVzLXBhdGhzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QiwwQkFBMEIsbUJBQU8sQ0FBQyw0REFBWTs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw0Q0FBNEM7QUFDdEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvbm9kZS1tb2R1bGVzLXBhdGhzLmpzPzNmZjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgcGFyc2UgPSBwYXRoLnBhcnNlIHx8IHJlcXVpcmUoJ3BhdGgtcGFyc2UnKTtcblxudmFyIGdldE5vZGVNb2R1bGVzRGlycyA9IGZ1bmN0aW9uIGdldE5vZGVNb2R1bGVzRGlycyhhYnNvbHV0ZVN0YXJ0LCBtb2R1bGVzKSB7XG4gICAgdmFyIHByZWZpeCA9ICcvJztcbiAgICBpZiAoKC9eKFtBLVphLXpdOikvKS50ZXN0KGFic29sdXRlU3RhcnQpKSB7XG4gICAgICAgIHByZWZpeCA9ICcnO1xuICAgIH0gZWxzZSBpZiAoKC9eXFxcXFxcXFwvKS50ZXN0KGFic29sdXRlU3RhcnQpKSB7XG4gICAgICAgIHByZWZpeCA9ICdcXFxcXFxcXCc7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhzID0gW2Fic29sdXRlU3RhcnRdO1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZShhYnNvbHV0ZVN0YXJ0KTtcbiAgICB3aGlsZSAocGFyc2VkLmRpciAhPT0gcGF0aHNbcGF0aHMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgcGF0aHMucHVzaChwYXJzZWQuZGlyKTtcbiAgICAgICAgcGFyc2VkID0gcGFyc2UocGFyc2VkLmRpcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAoZGlycywgYVBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGRpcnMuY29uY2F0KG1vZHVsZXMubWFwKGZ1bmN0aW9uIChtb2R1bGVEaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnJlc29sdmUocHJlZml4LCBhUGF0aCwgbW9kdWxlRGlyKTtcbiAgICAgICAgfSkpO1xuICAgIH0sIFtdKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9kZU1vZHVsZXNQYXRocyhzdGFydCwgb3B0cywgcmVxdWVzdCkge1xuICAgIHZhciBtb2R1bGVzID0gb3B0cyAmJiBvcHRzLm1vZHVsZURpcmVjdG9yeVxuICAgICAgICA/IFtdLmNvbmNhdChvcHRzLm1vZHVsZURpcmVjdG9yeSlcbiAgICAgICAgOiBbJ25vZGVfbW9kdWxlcyddO1xuXG4gICAgaWYgKG9wdHMgJiYgdHlwZW9mIG9wdHMucGF0aHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG9wdHMucGF0aHMoXG4gICAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBnZXROb2RlTW9kdWxlc0RpcnMoc3RhcnQsIG1vZHVsZXMpOyB9LFxuICAgICAgICAgICAgb3B0c1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBkaXJzID0gZ2V0Tm9kZU1vZHVsZXNEaXJzKHN0YXJ0LCBtb2R1bGVzKTtcbiAgICByZXR1cm4gb3B0cyAmJiBvcHRzLnBhdGhzID8gZGlycy5jb25jYXQob3B0cy5wYXRocykgOiBkaXJzO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/lib/node-modules-paths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/normalize-options.js":
/*!****************************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/normalize-options.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("module.exports = function (x, opts) {\n    /**\n     * This file is purposefully a passthrough. It's expected that third-party\n     * environments will override it at runtime in order to inject special logic\n     * into `resolve` (by manipulating the options). One such example is the PnP\n     * code path in Yarn.\n     */\n\n    return opts || {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvbm9ybWFsaXplLW9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvcmVzb2x2ZS9saWIvbm9ybWFsaXplLW9wdGlvbnMuanM/NDc0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4LCBvcHRzKSB7XG4gICAgLyoqXG4gICAgICogVGhpcyBmaWxlIGlzIHB1cnBvc2VmdWxseSBhIHBhc3N0aHJvdWdoLiBJdCdzIGV4cGVjdGVkIHRoYXQgdGhpcmQtcGFydHlcbiAgICAgKiBlbnZpcm9ubWVudHMgd2lsbCBvdmVycmlkZSBpdCBhdCBydW50aW1lIGluIG9yZGVyIHRvIGluamVjdCBzcGVjaWFsIGxvZ2ljXG4gICAgICogaW50byBgcmVzb2x2ZWAgKGJ5IG1hbmlwdWxhdGluZyB0aGUgb3B0aW9ucykuIE9uZSBzdWNoIGV4YW1wbGUgaXMgdGhlIFBuUFxuICAgICAqIGNvZGUgcGF0aCBpbiBZYXJuLlxuICAgICAqL1xuXG4gICAgcmV0dXJuIG9wdHMgfHwge307XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/lib/normalize-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/sync.js":
/*!***************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/sync.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isCore = __webpack_require__(/*! ./is-core */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/is-core.js\");\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar caller = __webpack_require__(/*! ./caller.js */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/caller.js\");\nvar nodeModulesPaths = __webpack_require__(/*! ./node-modules-paths.js */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/node-modules-paths.js\");\nvar normalizeOptions = __webpack_require__(/*! ./normalize-options.js */ \"(ssr)/./node_modules/hardhat/node_modules/resolve/lib/normalize-options.js\");\n\nvar realpathFS = fs.realpathSync && typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;\n\nvar defaultIsFile = function isFile(file) {\n    try {\n        var stat = fs.statSync(file);\n    } catch (e) {\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n        throw e;\n    }\n    return stat.isFile() || stat.isFIFO();\n};\n\nvar defaultIsDir = function isDirectory(dir) {\n    try {\n        var stat = fs.statSync(dir);\n    } catch (e) {\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n        throw e;\n    }\n    return stat.isDirectory();\n};\n\nvar defaultRealpathSync = function realpathSync(x) {\n    try {\n        return realpathFS(x);\n    } catch (realpathErr) {\n        if (realpathErr.code !== 'ENOENT') {\n            throw realpathErr;\n        }\n    }\n    return x;\n};\n\nvar maybeRealpathSync = function maybeRealpathSync(realpathSync, x, opts) {\n    if (opts && opts.preserveSymlinks === false) {\n        return realpathSync(x);\n    }\n    return x;\n};\n\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\n    var dirs = nodeModulesPaths(start, opts, x);\n    for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path.join(dirs[i], x);\n    }\n    return dirs;\n};\n\nmodule.exports = function resolveSync(x, options) {\n    if (typeof x !== 'string') {\n        throw new TypeError('Path must be a string.');\n    }\n    var opts = normalizeOptions(x, options);\n\n    var isFile = opts.isFile || defaultIsFile;\n    var readFileSync = opts.readFileSync || fs.readFileSync;\n    var isDirectory = opts.isDirectory || defaultIsDir;\n    var realpathSync = opts.realpathSync || defaultRealpathSync;\n    var packageIterator = opts.packageIterator;\n\n    var extensions = opts.extensions || ['.js'];\n    var basedir = opts.basedir || path.dirname(caller());\n    var parent = opts.filename || basedir;\n\n    opts.paths = opts.paths || [];\n\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\n    var absoluteStart = maybeRealpathSync(realpathSync, path.resolve(basedir), opts);\n\n    if ((/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/).test(x)) {\n        var res = path.resolve(absoluteStart, x);\n        if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\n        var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n        if (m) return maybeRealpathSync(realpathSync, m, opts);\n    } else if (isCore(x)) {\n        return x;\n    } else {\n        var n = loadNodeModulesSync(x, absoluteStart);\n        if (n) return maybeRealpathSync(realpathSync, n, opts);\n    }\n\n    var err = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n\n    function loadAsFileSync(x) {\n        var pkg = loadpkg(path.dirname(x));\n\n        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {\n            var rfile = path.relative(pkg.dir, x);\n            var r = opts.pathFilter(pkg.pkg, x, rfile);\n            if (r) {\n                x = path.resolve(pkg.dir, r); // eslint-disable-line no-param-reassign\n            }\n        }\n\n        if (isFile(x)) {\n            return x;\n        }\n\n        for (var i = 0; i < extensions.length; i++) {\n            var file = x + extensions[i];\n            if (isFile(file)) {\n                return file;\n            }\n        }\n    }\n\n    function loadpkg(dir) {\n        if (dir === '' || dir === '/') return;\n        if (process.platform === 'win32' && (/^\\w:[/\\\\]*$/).test(dir)) {\n            return;\n        }\n        if ((/[/\\\\]node_modules[/\\\\]*$/).test(dir)) return;\n\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, dir, opts), 'package.json');\n\n        if (!isFile(pkgfile)) {\n            return loadpkg(path.dirname(dir));\n        }\n\n        var body = readFileSync(pkgfile);\n\n        try {\n            var pkg = JSON.parse(body);\n        } catch (jsonErr) {}\n\n        if (pkg && opts.packageFilter) {\n            // v2 will pass pkgfile\n            pkg = opts.packageFilter(pkg, /*pkgfile,*/ dir); // eslint-disable-line spaced-comment\n        }\n\n        return { pkg: pkg, dir: dir };\n    }\n\n    function loadAsDirectorySync(x) {\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, x, opts), '/package.json');\n        if (isFile(pkgfile)) {\n            try {\n                var body = readFileSync(pkgfile, 'UTF8');\n                var pkg = JSON.parse(body);\n            } catch (e) {}\n\n            if (pkg && opts.packageFilter) {\n                // v2 will pass pkgfile\n                pkg = opts.packageFilter(pkg, /*pkgfile,*/ x); // eslint-disable-line spaced-comment\n            }\n\n            if (pkg && pkg.main) {\n                if (typeof pkg.main !== 'string') {\n                    var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\n                    mainError.code = 'INVALID_PACKAGE_MAIN';\n                    throw mainError;\n                }\n                if (pkg.main === '.' || pkg.main === './') {\n                    pkg.main = 'index';\n                }\n                try {\n                    var m = loadAsFileSync(path.resolve(x, pkg.main));\n                    if (m) return m;\n                    var n = loadAsDirectorySync(path.resolve(x, pkg.main));\n                    if (n) return n;\n                } catch (e) {}\n            }\n        }\n\n        return loadAsFileSync(path.join(x, '/index'));\n    }\n\n    function loadNodeModulesSync(x, start) {\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\n        var dirs = packageIterator ? packageIterator(x, start, thunk, opts) : thunk();\n\n        for (var i = 0; i < dirs.length; i++) {\n            var dir = dirs[i];\n            if (isDirectory(path.dirname(dir))) {\n                var m = loadAsFileSync(dir);\n                if (m) return m;\n                var n = loadAsDirectorySync(dir);\n                if (n) return n;\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/resolve/lib/sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/semver/semver.js":
/*!************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/semver/semver.js ***!
  \************************************************************/
/***/ ((module, exports) => {

eval("exports = module.exports = SemVer\n\nvar debug\n/* istanbul ignore next */\nif (typeof process === 'object' &&\n    process.env &&\n    process.env.NODE_DEBUG &&\n    /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n  debug = function () {\n    var args = Array.prototype.slice.call(arguments, 0)\n    args.unshift('SEMVER')\n    console.log.apply(console, args)\n  }\n} else {\n  debug = function () {}\n}\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0'\n\nvar MAX_LENGTH = 256\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16\n\nvar MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\n\n// The actual regexps go on exports.re\nvar re = exports.re = []\nvar safeRe = exports.safeRe = []\nvar src = exports.src = []\nvar t = exports.tokens = {}\nvar R = 0\n\nfunction tok (n) {\n  t[n] = R++\n}\n\nvar LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nvar safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nfunction makeSafeRe (value) {\n  for (var i = 0; i < safeRegexReplacements.length; i++) {\n    var token = safeRegexReplacements[i][0]\n    var max = safeRegexReplacements[i][1]\n    value = value\n      .split(token + '*').join(token + '{0,' + max + '}')\n      .split(token + '+').join(token + '{1,' + max + '}')\n  }\n  return value\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ntok('NUMERICIDENTIFIER')\nsrc[t.NUMERICIDENTIFIER] = '0|[1-9]\\\\d*'\ntok('NUMERICIDENTIFIERLOOSE')\nsrc[t.NUMERICIDENTIFIERLOOSE] = '\\\\d+'\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ntok('NONNUMERICIDENTIFIER')\nsrc[t.NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-]' + LETTERDASHNUMBER + '*'\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ntok('MAINVERSION')\nsrc[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[t.NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[t.NUMERICIDENTIFIER] + ')'\n\ntok('MAINVERSIONLOOSE')\nsrc[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ntok('PRERELEASEIDENTIFIER')\nsrc[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] +\n                            '|' + src[t.NONNUMERICIDENTIFIER] + ')'\n\ntok('PRERELEASEIDENTIFIERLOOSE')\nsrc[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[t.NONNUMERICIDENTIFIER] + ')'\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ntok('PRERELEASE')\nsrc[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))'\n\ntok('PRERELEASELOOSE')\nsrc[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ntok('BUILDIDENTIFIER')\nsrc[t.BUILDIDENTIFIER] = LETTERDASHNUMBER + '+'\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ntok('BUILD')\nsrc[t.BUILD] = '(?:\\\\+(' + src[t.BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[t.BUILDIDENTIFIER] + ')*))'\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ntok('FULL')\ntok('FULLPLAIN')\nsrc[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] +\n                  src[t.PRERELEASE] + '?' +\n                  src[t.BUILD] + '?'\n\nsrc[t.FULL] = '^' + src[t.FULLPLAIN] + '$'\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ntok('LOOSEPLAIN')\nsrc[t.LOOSEPLAIN] = '[v=\\\\s]*' + src[t.MAINVERSIONLOOSE] +\n                  src[t.PRERELEASELOOSE] + '?' +\n                  src[t.BUILD] + '?'\n\ntok('LOOSE')\nsrc[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$'\n\ntok('GTLT')\nsrc[t.GTLT] = '((?:<|>)?=?)'\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ntok('XRANGEIDENTIFIERLOOSE')\nsrc[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*'\ntok('XRANGEIDENTIFIER')\nsrc[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\\\*'\n\ntok('XRANGEPLAIN')\nsrc[t.XRANGEPLAIN] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[t.XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[t.PRERELEASE] + ')?' +\n                   src[t.BUILD] + '?' +\n                   ')?)?'\n\ntok('XRANGEPLAINLOOSE')\nsrc[t.XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[t.PRERELEASELOOSE] + ')?' +\n                        src[t.BUILD] + '?' +\n                        ')?)?'\n\ntok('XRANGE')\nsrc[t.XRANGE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAIN] + '$'\ntok('XRANGELOOSE')\nsrc[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\\\s*' + src[t.XRANGEPLAINLOOSE] + '$'\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ntok('COERCE')\nsrc[t.COERCE] = '(^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])'\ntok('COERCERTL')\nre[t.COERCERTL] = new RegExp(src[t.COERCE], 'g')\nsafeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), 'g')\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ntok('LONETILDE')\nsrc[t.LONETILDE] = '(?:~>?)'\n\ntok('TILDETRIM')\nsrc[t.TILDETRIM] = '(\\\\s*)' + src[t.LONETILDE] + '\\\\s+'\nre[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g')\nsafeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), 'g')\nvar tildeTrimReplace = '$1~'\n\ntok('TILDE')\nsrc[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$'\ntok('TILDELOOSE')\nsrc[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ntok('LONECARET')\nsrc[t.LONECARET] = '(?:\\\\^)'\n\ntok('CARETTRIM')\nsrc[t.CARETTRIM] = '(\\\\s*)' + src[t.LONECARET] + '\\\\s+'\nre[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g')\nsafeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), 'g')\nvar caretTrimReplace = '$1^'\n\ntok('CARET')\nsrc[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$'\ntok('CARETLOOSE')\nsrc[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ntok('COMPARATORLOOSE')\nsrc[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.LOOSEPLAIN] + ')$|^$'\ntok('COMPARATOR')\nsrc[t.COMPARATOR] = '^' + src[t.GTLT] + '\\\\s*(' + src[t.FULLPLAIN] + ')$|^$'\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ntok('COMPARATORTRIM')\nsrc[t.COMPARATORTRIM] = '(\\\\s*)' + src[t.GTLT] +\n                      '\\\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'\n\n// this one has to use the /g flag\nre[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g')\nsafeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), 'g')\nvar comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ntok('HYPHENRANGE')\nsrc[t.HYPHENRANGE] = '^\\\\s*(' + src[t.XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[t.XRANGEPLAIN] + ')' +\n                   '\\\\s*$'\n\ntok('HYPHENRANGELOOSE')\nsrc[t.HYPHENRANGELOOSE] = '^\\\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[t.XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$'\n\n// Star ranges basically just allow anything at all.\ntok('STAR')\nsrc[t.STAR] = '(<|>)?=?\\\\s*\\\\*'\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i])\n  if (!re[i]) {\n    re[i] = new RegExp(src[i])\n\n    // Replace all greedy whitespace to prevent regex dos issues. These regex are\n    // used internally via the safeRe object since all inputs in this library get\n    // normalized first to trim and collapse all extra whitespace. The original\n    // regexes are exported for userland consumption and lower level usage. A\n    // future breaking change could export the safer regex only with a note that\n    // all input should have extra whitespace removed.\n    safeRe[i] = new RegExp(makeSafeRe(src[i]))\n  }\n}\n\nexports.parse = parse\nfunction parse (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  var r = options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nexports.valid = valid\nfunction valid (version, options) {\n  var v = parse(version, options)\n  return v ? v.version : null\n}\n\nexports.clean = clean\nfunction clean (version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\n\nexports.SemVer = SemVer\n\nfunction SemVer (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose) {\n      return version\n    } else {\n      version = version.version\n    }\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  if (version.length > MAX_LENGTH) {\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n  }\n\n  if (!(this instanceof SemVer)) {\n    return new SemVer(version, options)\n  }\n\n  debug('SemVer', version, options)\n  this.options = options\n  this.loose = !!options.loose\n\n  var m = version.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL])\n\n  if (!m) {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  this.raw = version\n\n  // these are actually numbers\n  this.major = +m[1]\n  this.minor = +m[2]\n  this.patch = +m[3]\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n    throw new TypeError('Invalid major version')\n  }\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n    throw new TypeError('Invalid minor version')\n  }\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n    throw new TypeError('Invalid patch version')\n  }\n\n  // numberify any prerelease numeric ids\n  if (!m[4]) {\n    this.prerelease = []\n  } else {\n    this.prerelease = m[4].split('.').map(function (id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id\n        if (num >= 0 && num < MAX_SAFE_INTEGER) {\n          return num\n        }\n      }\n      return id\n    })\n  }\n\n  this.build = m[5] ? m[5].split('.') : []\n  this.format()\n}\n\nSemVer.prototype.format = function () {\n  this.version = this.major + '.' + this.minor + '.' + this.patch\n  if (this.prerelease.length) {\n    this.version += '-' + this.prerelease.join('.')\n  }\n  return this.version\n}\n\nSemVer.prototype.toString = function () {\n  return this.version\n}\n\nSemVer.prototype.compare = function (other) {\n  debug('SemVer.compare', this.version, this.options, other)\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return this.compareMain(other) || this.comparePre(other)\n}\n\nSemVer.prototype.compareMain = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch)\n}\n\nSemVer.prototype.comparePre = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length) {\n    return -1\n  } else if (!this.prerelease.length && other.prerelease.length) {\n    return 1\n  } else if (!this.prerelease.length && !other.prerelease.length) {\n    return 0\n  }\n\n  var i = 0\n  do {\n    var a = this.prerelease[i]\n    var b = other.prerelease[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\nSemVer.prototype.compareBuild = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  var i = 0\n  do {\n    var a = this.build[i]\n    var b = other.build[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function (release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor = 0\n      this.major++\n      this.inc('pre', identifier)\n      break\n    case 'preminor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor++\n      this.inc('pre', identifier)\n      break\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0\n      this.inc('patch', identifier)\n      this.inc('pre', identifier)\n      break\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0) {\n        this.inc('patch', identifier)\n      }\n      this.inc('pre', identifier)\n      break\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0) {\n        this.major++\n      }\n      this.minor = 0\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0) {\n        this.minor++\n      }\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0) {\n        this.patch++\n      }\n      this.prerelease = []\n      break\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0) {\n        this.prerelease = [0]\n      } else {\n        var i = this.prerelease.length\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++\n            i = -2\n          }\n        }\n        if (i === -1) {\n          // didn't increment anything\n          this.prerelease.push(0)\n        }\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1])) {\n            this.prerelease = [identifier, 0]\n          }\n        } else {\n          this.prerelease = [identifier, 0]\n        }\n      }\n      break\n\n    default:\n      throw new Error('invalid increment argument: ' + release)\n  }\n  this.format()\n  this.raw = this.version\n  return this\n}\n\nexports.inc = inc\nfunction inc (version, release, loose, identifier) {\n  if (typeof (loose) === 'string') {\n    identifier = loose\n    loose = undefined\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\n\nexports.diff = diff\nfunction diff (version1, version2) {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    var v1 = parse(version1)\n    var v2 = parse(version2)\n    var prefix = ''\n    if (v1.prerelease.length || v2.prerelease.length) {\n      prefix = 'pre'\n      var defaultResult = 'prerelease'\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers\n\nvar numeric = /^[0-9]+$/\nfunction compareIdentifiers (a, b) {\n  var anum = numeric.test(a)\n  var bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers\nfunction rcompareIdentifiers (a, b) {\n  return compareIdentifiers(b, a)\n}\n\nexports.major = major\nfunction major (a, loose) {\n  return new SemVer(a, loose).major\n}\n\nexports.minor = minor\nfunction minor (a, loose) {\n  return new SemVer(a, loose).minor\n}\n\nexports.patch = patch\nfunction patch (a, loose) {\n  return new SemVer(a, loose).patch\n}\n\nexports.compare = compare\nfunction compare (a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose))\n}\n\nexports.compareLoose = compareLoose\nfunction compareLoose (a, b) {\n  return compare(a, b, true)\n}\n\nexports.compareBuild = compareBuild\nfunction compareBuild (a, b, loose) {\n  var versionA = new SemVer(a, loose)\n  var versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\n\nexports.rcompare = rcompare\nfunction rcompare (a, b, loose) {\n  return compare(b, a, loose)\n}\n\nexports.sort = sort\nfunction sort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(a, b, loose)\n  })\n}\n\nexports.rsort = rsort\nfunction rsort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compareBuild(b, a, loose)\n  })\n}\n\nexports.gt = gt\nfunction gt (a, b, loose) {\n  return compare(a, b, loose) > 0\n}\n\nexports.lt = lt\nfunction lt (a, b, loose) {\n  return compare(a, b, loose) < 0\n}\n\nexports.eq = eq\nfunction eq (a, b, loose) {\n  return compare(a, b, loose) === 0\n}\n\nexports.neq = neq\nfunction neq (a, b, loose) {\n  return compare(a, b, loose) !== 0\n}\n\nexports.gte = gte\nfunction gte (a, b, loose) {\n  return compare(a, b, loose) >= 0\n}\n\nexports.lte = lte\nfunction lte (a, b, loose) {\n  return compare(a, b, loose) <= 0\n}\n\nexports.cmp = cmp\nfunction cmp (a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError('Invalid operator: ' + op)\n  }\n}\n\nexports.Comparator = Comparator\nfunction Comparator (comp, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose) {\n      return comp\n    } else {\n      comp = comp.value\n    }\n  }\n\n  if (!(this instanceof Comparator)) {\n    return new Comparator(comp, options)\n  }\n\n  comp = comp.trim().split(/\\s+/).join(' ')\n  debug('comparator', comp, options)\n  this.options = options\n  this.loose = !!options.loose\n  this.parse(comp)\n\n  if (this.semver === ANY) {\n    this.value = ''\n  } else {\n    this.value = this.operator + this.semver.version\n  }\n\n  debug('comp', this)\n}\n\nvar ANY = {}\nComparator.prototype.parse = function (comp) {\n  var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR]\n  var m = comp.match(r)\n\n  if (!m) {\n    throw new TypeError('Invalid comparator: ' + comp)\n  }\n\n  this.operator = m[1] !== undefined ? m[1] : ''\n  if (this.operator === '=') {\n    this.operator = ''\n  }\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2]) {\n    this.semver = ANY\n  } else {\n    this.semver = new SemVer(m[2], this.options.loose)\n  }\n}\n\nComparator.prototype.toString = function () {\n  return this.value\n}\n\nComparator.prototype.test = function (version) {\n  debug('Comparator.test', version, this.options.loose)\n\n  if (this.semver === ANY || version === ANY) {\n    return true\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options)\n    } catch (er) {\n      return false\n    }\n  }\n\n  return cmp(version, this.operator, this.semver, this.options)\n}\n\nComparator.prototype.intersects = function (comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required')\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  var rangeTmp\n\n  if (this.operator === '') {\n    if (this.value === '') {\n      return true\n    }\n    rangeTmp = new Range(comp.value, options)\n    return satisfies(this.value, rangeTmp, options)\n  } else if (comp.operator === '') {\n    if (comp.value === '') {\n      return true\n    }\n    rangeTmp = new Range(this.value, options)\n    return satisfies(comp.semver, rangeTmp, options)\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>')\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<')\n  var sameSemVer = this.semver.version === comp.semver.version\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=')\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'))\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'))\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan\n}\n\nexports.Range = Range\nfunction Range (range, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range\n    } else {\n      return new Range(range.raw, options)\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options)\n  }\n\n  if (!(this instanceof Range)) {\n    return new Range(range, options)\n  }\n\n  this.options = options\n  this.loose = !!options.loose\n  this.includePrerelease = !!options.includePrerelease\n\n  // First reduce all whitespace as much as possible so we do not have to rely\n  // on potentially slow regexes like \\s*. This is then stored and used for\n  // future error messages as well.\n  this.raw = range\n    .trim()\n    .split(/\\s+/)\n    .join(' ')\n\n  // First, split based on boolean or ||\n  this.set = this.raw.split('||').map(function (range) {\n    return this.parseRange(range.trim())\n  }, this).filter(function (c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length\n  })\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + this.raw)\n  }\n\n  this.format()\n}\n\nRange.prototype.format = function () {\n  this.range = this.set.map(function (comps) {\n    return comps.join(' ').trim()\n  }).join('||').trim()\n  return this.range\n}\n\nRange.prototype.toString = function () {\n  return this.range\n}\n\nRange.prototype.parseRange = function (range) {\n  var loose = this.options.loose\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE]\n  range = range.replace(hr, hyphenReplace)\n  debug('hyphen replace', range)\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(safeRe[t.COMPARATORTRIM], comparatorTrimReplace)\n  debug('comparator trim', range, safeRe[t.COMPARATORTRIM])\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(safeRe[t.TILDETRIM], tildeTrimReplace)\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(safeRe[t.CARETTRIM], caretTrimReplace)\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ')\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR]\n  var set = range.split(' ').map(function (comp) {\n    return parseComparator(comp, this.options)\n  }, this).join(' ').split(/\\s+/)\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function (comp) {\n      return !!comp.match(compRe)\n    })\n  }\n  set = set.map(function (comp) {\n    return new Comparator(comp, this.options)\n  }, this)\n\n  return set\n}\n\nRange.prototype.intersects = function (range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required')\n  }\n\n  return this.set.some(function (thisComparators) {\n    return (\n      isSatisfiable(thisComparators, options) &&\n      range.set.some(function (rangeComparators) {\n        return (\n          isSatisfiable(rangeComparators, options) &&\n          thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options)\n            })\n          })\n        )\n      })\n    )\n  })\n}\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nfunction isSatisfiable (comparators, options) {\n  var result = true\n  var remainingComparators = comparators.slice()\n  var testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators\nfunction toComparators (range, options) {\n  return new Range(range, options).set.map(function (comp) {\n    return comp.map(function (c) {\n      return c.value\n    }).join(' ').trim().split(' ')\n  })\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator (comp, options) {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nfunction isX (id) {\n  return !id || id.toLowerCase() === 'x' || id === '*'\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options)\n  }).join(' ')\n}\n\nfunction replaceTilde (comp, options) {\n  var r = options.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options)\n  }).join(' ')\n}\n\nfunction replaceCaret (comp, options) {\n  debug('caret', comp, options)\n  var r = options.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n      } else {\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nfunction replaceXRanges (comp, options) {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nfunction replaceXRange (comp, options) {\n  comp = comp.trim()\n  var r = options.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE]\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    var xM = isX(M)\n    var xm = xM || isX(m)\n    var xp = xm || isX(p)\n    var anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p + pr\n    } else if (xm) {\n      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0' + pr +\n        ' <' + M + '.' + (+m + 1) + '.0' + pr\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars (comp, options) {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(safeRe[t.STAR], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = '>=' + fM + '.0.0'\n  } else if (isX(fp)) {\n    from = '>=' + fM + '.' + fm + '.0'\n  } else {\n    from = '>=' + from\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = '<' + (+tM + 1) + '.0.0'\n  } else if (isX(tp)) {\n    to = '<' + tM + '.' + (+tm + 1) + '.0'\n  } else if (tpr) {\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr\n  } else {\n    to = '<=' + to\n  }\n\n  return (from + ' ' + to).trim()\n}\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function (version) {\n  if (!version) {\n    return false\n  }\n\n  if (typeof version === 'string') {\n    try {\n      version = new SemVer(version, this.options)\n    } catch (er) {\n      return false\n    }\n  }\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options)) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction testSet (set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n\nexports.satisfies = satisfies\nfunction satisfies (version, range, options) {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\n\nexports.maxSatisfying = maxSatisfying\nfunction maxSatisfying (versions, range, options) {\n  var max = null\n  var maxSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\n\nexports.minSatisfying = minSatisfying\nfunction minSatisfying (versions, range, options) {\n  var min = null\n  var minSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\n\nexports.minVersion = minVersion\nfunction minVersion (range, loose) {\n  range = new Range(range, loose)\n\n  var minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    comparators.forEach(function (comparator) {\n      // Clone to avoid manipulating the comparator's semver object.\n      var compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error('Unexpected operation: ' + comparator.operator)\n      }\n    })\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\n\nexports.validRange = validRange\nfunction validRange (range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr\nfunction ltr (version, range, options) {\n  return outside(version, range, '<', options)\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr\nfunction gtr (version, range, options) {\n  return outside(version, range, '>', options)\n}\n\nexports.outside = outside\nfunction outside (version, range, hilo, options) {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  var gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    var high = null\n    var low = null\n\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nexports.prerelease = prerelease\nfunction prerelease (version, options) {\n  var parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\n\nexports.intersects = intersects\nfunction intersects (r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce\nfunction coerce (version, options) {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  var match = null\n  if (!options.rtl) {\n    match = version.match(safeRe[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    var next\n    while ((next = safeRe[t.COERCERTL].exec(version)) &&\n      (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n          next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    safeRe[t.COERCERTL].lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  return parse(match[2] +\n    '.' + (match[3] || '0') +\n    '.' + (match[4] || '0'), options)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvc2VtdmVyL3NlbXZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTLFVBQVU7QUFDbkIsYUFBYSxjQUFjO0FBQzNCLFVBQVUsV0FBVztBQUNyQixRQUFRLGNBQWM7QUFDdEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxjQUFjO0FBQ3ZELHlDQUF5QyxjQUFjO0FBQ3ZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9DQUFvQztBQUN4RCwwQkFBMEIsb0NBQW9DO0FBQzlELDBCQUEwQixvQ0FBb0M7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IscUJBQXFCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQixzQkFBc0I7QUFDeEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9ub2RlX21vZHVsZXMvc2VtdmVyL3NlbXZlci5qcz9kZDM2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFNlbVZlclxuXG52YXIgZGVidWdcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmXG4gICAgcHJvY2Vzcy5lbnYgJiZcbiAgICBwcm9jZXNzLmVudi5OT0RFX0RFQlVHICYmXG4gICAgL1xcYnNlbXZlclxcYi9pLnRlc3QocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRykpIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgYXJncy51bnNoaWZ0KCdTRU1WRVInKVxuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3MpXG4gIH1cbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge31cbn1cblxuLy8gTm90ZTogdGhpcyBpcyB0aGUgc2VtdmVyLm9yZyB2ZXJzaW9uIG9mIHRoZSBzcGVjIHRoYXQgaXQgaW1wbGVtZW50c1xuLy8gTm90IG5lY2Vzc2FyaWx5IHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgdGhpcyBjb2RlLlxuZXhwb3J0cy5TRU1WRVJfU1BFQ19WRVJTSU9OID0gJzIuMC4wJ1xuXG52YXIgTUFYX0xFTkdUSCA9IDI1NlxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA5MDA3MTk5MjU0NzQwOTkxXG5cbi8vIE1heCBzYWZlIHNlZ21lbnQgbGVuZ3RoIGZvciBjb2VyY2lvbi5cbnZhciBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIID0gMTZcblxudmFyIE1BWF9TQUZFX0JVSUxEX0xFTkdUSCA9IE1BWF9MRU5HVEggLSA2XG5cbi8vIFRoZSBhY3R1YWwgcmVnZXhwcyBnbyBvbiBleHBvcnRzLnJlXG52YXIgcmUgPSBleHBvcnRzLnJlID0gW11cbnZhciBzYWZlUmUgPSBleHBvcnRzLnNhZmVSZSA9IFtdXG52YXIgc3JjID0gZXhwb3J0cy5zcmMgPSBbXVxudmFyIHQgPSBleHBvcnRzLnRva2VucyA9IHt9XG52YXIgUiA9IDBcblxuZnVuY3Rpb24gdG9rIChuKSB7XG4gIHRbbl0gPSBSKytcbn1cblxudmFyIExFVFRFUkRBU0hOVU1CRVIgPSAnW2EtekEtWjAtOS1dJ1xuXG4vLyBSZXBsYWNlIHNvbWUgZ3JlZWR5IHJlZ2V4IHRva2VucyB0byBwcmV2ZW50IHJlZ2V4IGRvcyBpc3N1ZXMuIFRoZXNlIHJlZ2V4IGFyZVxuLy8gdXNlZCBpbnRlcm5hbGx5IHZpYSB0aGUgc2FmZVJlIG9iamVjdCBzaW5jZSBhbGwgaW5wdXRzIGluIHRoaXMgbGlicmFyeSBnZXRcbi8vIG5vcm1hbGl6ZWQgZmlyc3QgdG8gdHJpbSBhbmQgY29sbGFwc2UgYWxsIGV4dHJhIHdoaXRlc3BhY2UuIFRoZSBvcmlnaW5hbFxuLy8gcmVnZXhlcyBhcmUgZXhwb3J0ZWQgZm9yIHVzZXJsYW5kIGNvbnN1bXB0aW9uIGFuZCBsb3dlciBsZXZlbCB1c2FnZS4gQVxuLy8gZnV0dXJlIGJyZWFraW5nIGNoYW5nZSBjb3VsZCBleHBvcnQgdGhlIHNhZmVyIHJlZ2V4IG9ubHkgd2l0aCBhIG5vdGUgdGhhdFxuLy8gYWxsIGlucHV0IHNob3VsZCBoYXZlIGV4dHJhIHdoaXRlc3BhY2UgcmVtb3ZlZC5cbnZhciBzYWZlUmVnZXhSZXBsYWNlbWVudHMgPSBbXG4gIFsnXFxcXHMnLCAxXSxcbiAgWydcXFxcZCcsIE1BWF9MRU5HVEhdLFxuICBbTEVUVEVSREFTSE5VTUJFUiwgTUFYX1NBRkVfQlVJTERfTEVOR1RIXSxcbl1cblxuZnVuY3Rpb24gbWFrZVNhZmVSZSAodmFsdWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzYWZlUmVnZXhSZXBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSBzYWZlUmVnZXhSZXBsYWNlbWVudHNbaV1bMF1cbiAgICB2YXIgbWF4ID0gc2FmZVJlZ2V4UmVwbGFjZW1lbnRzW2ldWzFdXG4gICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgLnNwbGl0KHRva2VuICsgJyonKS5qb2luKHRva2VuICsgJ3swLCcgKyBtYXggKyAnfScpXG4gICAgICAuc3BsaXQodG9rZW4gKyAnKycpLmpvaW4odG9rZW4gKyAnezEsJyArIG1heCArICd9JylcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gVGhlIGZvbGxvd2luZyBSZWd1bGFyIEV4cHJlc3Npb25zIGNhbiBiZSB1c2VkIGZvciB0b2tlbml6aW5nLFxuLy8gdmFsaWRhdGluZywgYW5kIHBhcnNpbmcgU2VtVmVyIHZlcnNpb24gc3RyaW5ncy5cblxuLy8gIyMgTnVtZXJpYyBJZGVudGlmaWVyXG4vLyBBIHNpbmdsZSBgMGAsIG9yIGEgbm9uLXplcm8gZGlnaXQgZm9sbG93ZWQgYnkgemVybyBvciBtb3JlIGRpZ2l0cy5cblxudG9rKCdOVU1FUklDSURFTlRJRklFUicpXG5zcmNbdC5OVU1FUklDSURFTlRJRklFUl0gPSAnMHxbMS05XVxcXFxkKidcbnRvaygnTlVNRVJJQ0lERU5USUZJRVJMT09TRScpXG5zcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXSA9ICdcXFxcZCsnXG5cbi8vICMjIE5vbi1udW1lcmljIElkZW50aWZpZXJcbi8vIFplcm8gb3IgbW9yZSBkaWdpdHMsIGZvbGxvd2VkIGJ5IGEgbGV0dGVyIG9yIGh5cGhlbiwgYW5kIHRoZW4gemVybyBvclxuLy8gbW9yZSBsZXR0ZXJzLCBkaWdpdHMsIG9yIGh5cGhlbnMuXG5cbnRvaygnTk9OTlVNRVJJQ0lERU5USUZJRVInKVxuc3JjW3QuTk9OTlVNRVJJQ0lERU5USUZJRVJdID0gJ1xcXFxkKlthLXpBLVotXScgKyBMRVRURVJEQVNITlVNQkVSICsgJyonXG5cbi8vICMjIE1haW4gVmVyc2lvblxuLy8gVGhyZWUgZG90LXNlcGFyYXRlZCBudW1lcmljIGlkZW50aWZpZXJzLlxuXG50b2soJ01BSU5WRVJTSU9OJylcbnNyY1t0Lk1BSU5WRVJTSU9OXSA9ICcoJyArIHNyY1t0Lk5VTUVSSUNJREVOVElGSUVSXSArICcpXFxcXC4nICtcbiAgICAgICAgICAgICAgICAgICAnKCcgKyBzcmNbdC5OVU1FUklDSURFTlRJRklFUl0gKyAnKVxcXFwuJyArXG4gICAgICAgICAgICAgICAgICAgJygnICsgc3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdICsgJyknXG5cbnRvaygnTUFJTlZFUlNJT05MT09TRScpXG5zcmNbdC5NQUlOVkVSU0lPTkxPT1NFXSA9ICcoJyArIHNyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdICsgJylcXFxcLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJygnICsgc3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV0gKyAnKVxcXFwuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKCcgKyBzcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXSArICcpJ1xuXG4vLyAjIyBQcmUtcmVsZWFzZSBWZXJzaW9uIElkZW50aWZpZXJcbi8vIEEgbnVtZXJpYyBpZGVudGlmaWVyLCBvciBhIG5vbi1udW1lcmljIGlkZW50aWZpZXIuXG5cbnRvaygnUFJFUkVMRUFTRUlERU5USUZJRVInKVxuc3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJdID0gJyg/OicgKyBzcmNbdC5OVU1FUklDSURFTlRJRklFUl0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8JyArIHNyY1t0Lk5PTk5VTUVSSUNJREVOVElGSUVSXSArICcpJ1xuXG50b2soJ1BSRVJFTEVBU0VJREVOVElGSUVSTE9PU0UnKVxuc3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV0gPSAnKD86JyArIHNyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd8JyArIHNyY1t0Lk5PTk5VTUVSSUNJREVOVElGSUVSXSArICcpJ1xuXG4vLyAjIyBQcmUtcmVsZWFzZSBWZXJzaW9uXG4vLyBIeXBoZW4sIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIGRvdC1zZXBhcmF0ZWQgcHJlLXJlbGVhc2UgdmVyc2lvblxuLy8gaWRlbnRpZmllcnMuXG5cbnRvaygnUFJFUkVMRUFTRScpXG5zcmNbdC5QUkVSRUxFQVNFXSA9ICcoPzotKCcgKyBzcmNbdC5QUkVSRUxFQVNFSURFTlRJRklFUl0gK1xuICAgICAgICAgICAgICAgICAgJyg/OlxcXFwuJyArIHNyY1t0LlBSRVJFTEVBU0VJREVOVElGSUVSXSArICcpKikpJ1xuXG50b2soJ1BSRVJFTEVBU0VMT09TRScpXG5zcmNbdC5QUkVSRUxFQVNFTE9PU0VdID0gJyg/Oi0/KCcgKyBzcmNbdC5QUkVSRUxFQVNFSURFTlRJRklFUkxPT1NFXSArXG4gICAgICAgICAgICAgICAgICAgICAgICcoPzpcXFxcLicgKyBzcmNbdC5QUkVSRUxFQVNFSURFTlRJRklFUkxPT1NFXSArICcpKikpJ1xuXG4vLyAjIyBCdWlsZCBNZXRhZGF0YSBJZGVudGlmaWVyXG4vLyBBbnkgY29tYmluYXRpb24gb2YgZGlnaXRzLCBsZXR0ZXJzLCBvciBoeXBoZW5zLlxuXG50b2soJ0JVSUxESURFTlRJRklFUicpXG5zcmNbdC5CVUlMRElERU5USUZJRVJdID0gTEVUVEVSREFTSE5VTUJFUiArICcrJ1xuXG4vLyAjIyBCdWlsZCBNZXRhZGF0YVxuLy8gUGx1cyBzaWduLCBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSBwZXJpb2Qtc2VwYXJhdGVkIGJ1aWxkIG1ldGFkYXRhXG4vLyBpZGVudGlmaWVycy5cblxudG9rKCdCVUlMRCcpXG5zcmNbdC5CVUlMRF0gPSAnKD86XFxcXCsoJyArIHNyY1t0LkJVSUxESURFTlRJRklFUl0gK1xuICAgICAgICAgICAgICcoPzpcXFxcLicgKyBzcmNbdC5CVUlMRElERU5USUZJRVJdICsgJykqKSknXG5cbi8vICMjIEZ1bGwgVmVyc2lvbiBTdHJpbmdcbi8vIEEgbWFpbiB2ZXJzaW9uLCBmb2xsb3dlZCBvcHRpb25hbGx5IGJ5IGEgcHJlLXJlbGVhc2UgdmVyc2lvbiBhbmRcbi8vIGJ1aWxkIG1ldGFkYXRhLlxuXG4vLyBOb3RlIHRoYXQgdGhlIG9ubHkgbWFqb3IsIG1pbm9yLCBwYXRjaCwgYW5kIHByZS1yZWxlYXNlIHNlY3Rpb25zIG9mXG4vLyB0aGUgdmVyc2lvbiBzdHJpbmcgYXJlIGNhcHR1cmluZyBncm91cHMuICBUaGUgYnVpbGQgbWV0YWRhdGEgaXMgbm90IGFcbi8vIGNhcHR1cmluZyBncm91cCwgYmVjYXVzZSBpdCBzaG91bGQgbm90IGV2ZXIgYmUgdXNlZCBpbiB2ZXJzaW9uXG4vLyBjb21wYXJpc29uLlxuXG50b2soJ0ZVTEwnKVxudG9rKCdGVUxMUExBSU4nKVxuc3JjW3QuRlVMTFBMQUlOXSA9ICd2PycgKyBzcmNbdC5NQUlOVkVSU0lPTl0gK1xuICAgICAgICAgICAgICAgICAgc3JjW3QuUFJFUkVMRUFTRV0gKyAnPycgK1xuICAgICAgICAgICAgICAgICAgc3JjW3QuQlVJTERdICsgJz8nXG5cbnNyY1t0LkZVTExdID0gJ14nICsgc3JjW3QuRlVMTFBMQUlOXSArICckJ1xuXG4vLyBsaWtlIGZ1bGwsIGJ1dCBhbGxvd3MgdjEuMi4zIGFuZCA9MS4yLjMsIHdoaWNoIHBlb3BsZSBkbyBzb21ldGltZXMuXG4vLyBhbHNvLCAxLjAuMGFscGhhMSAocHJlcmVsZWFzZSB3aXRob3V0IHRoZSBoeXBoZW4pIHdoaWNoIGlzIHByZXR0eVxuLy8gY29tbW9uIGluIHRoZSBucG0gcmVnaXN0cnkuXG50b2soJ0xPT1NFUExBSU4nKVxuc3JjW3QuTE9PU0VQTEFJTl0gPSAnW3Y9XFxcXHNdKicgKyBzcmNbdC5NQUlOVkVSU0lPTkxPT1NFXSArXG4gICAgICAgICAgICAgICAgICBzcmNbdC5QUkVSRUxFQVNFTE9PU0VdICsgJz8nICtcbiAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXSArICc/J1xuXG50b2soJ0xPT1NFJylcbnNyY1t0LkxPT1NFXSA9ICdeJyArIHNyY1t0LkxPT1NFUExBSU5dICsgJyQnXG5cbnRvaygnR1RMVCcpXG5zcmNbdC5HVExUXSA9ICcoKD86PHw+KT89PyknXG5cbi8vIFNvbWV0aGluZyBsaWtlIFwiMi4qXCIgb3IgXCIxLjIueFwiLlxuLy8gTm90ZSB0aGF0IFwieC54XCIgaXMgYSB2YWxpZCB4UmFuZ2UgaWRlbnRpZmVyLCBtZWFuaW5nIFwiYW55IHZlcnNpb25cIlxuLy8gT25seSB0aGUgZmlyc3QgaXRlbSBpcyBzdHJpY3RseSByZXF1aXJlZC5cbnRvaygnWFJBTkdFSURFTlRJRklFUkxPT1NFJylcbnNyY1t0LlhSQU5HRUlERU5USUZJRVJMT09TRV0gPSBzcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXSArICd8eHxYfFxcXFwqJ1xudG9rKCdYUkFOR0VJREVOVElGSUVSJylcbnNyY1t0LlhSQU5HRUlERU5USUZJRVJdID0gc3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdICsgJ3x4fFh8XFxcXConXG5cbnRvaygnWFJBTkdFUExBSU4nKVxuc3JjW3QuWFJBTkdFUExBSU5dID0gJ1t2PVxcXFxzXSooJyArIHNyY1t0LlhSQU5HRUlERU5USUZJRVJdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAnKD86XFxcXC4oJyArIHNyY1t0LlhSQU5HRUlERU5USUZJRVJdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAnKD86XFxcXC4oJyArIHNyY1t0LlhSQU5HRUlERU5USUZJRVJdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAnKD86JyArIHNyY1t0LlBSRVJFTEVBU0VdICsgJyk/JyArXG4gICAgICAgICAgICAgICAgICAgc3JjW3QuQlVJTERdICsgJz8nICtcbiAgICAgICAgICAgICAgICAgICAnKT8pPydcblxudG9rKCdYUkFOR0VQTEFJTkxPT1NFJylcbnNyY1t0LlhSQU5HRVBMQUlOTE9PU0VdID0gJ1t2PVxcXFxzXSooJyArIHNyY1t0LlhSQU5HRUlERU5USUZJRVJMT09TRV0gKyAnKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyg/OlxcXFwuKCcgKyBzcmNbdC5YUkFOR0VJREVOVElGSUVSTE9PU0VdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcoPzpcXFxcLignICsgc3JjW3QuWFJBTkdFSURFTlRJRklFUkxPT1NFXSArICcpJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKD86JyArIHNyY1t0LlBSRVJFTEVBU0VMT09TRV0gKyAnKT8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXSArICc/JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKT8pPydcblxudG9rKCdYUkFOR0UnKVxuc3JjW3QuWFJBTkdFXSA9ICdeJyArIHNyY1t0LkdUTFRdICsgJ1xcXFxzKicgKyBzcmNbdC5YUkFOR0VQTEFJTl0gKyAnJCdcbnRvaygnWFJBTkdFTE9PU0UnKVxuc3JjW3QuWFJBTkdFTE9PU0VdID0gJ14nICsgc3JjW3QuR1RMVF0gKyAnXFxcXHMqJyArIHNyY1t0LlhSQU5HRVBMQUlOTE9PU0VdICsgJyQnXG5cbi8vIENvZXJjaW9uLlxuLy8gRXh0cmFjdCBhbnl0aGluZyB0aGF0IGNvdWxkIGNvbmNlaXZhYmx5IGJlIGEgcGFydCBvZiBhIHZhbGlkIHNlbXZlclxudG9rKCdDT0VSQ0UnKVxuc3JjW3QuQ09FUkNFXSA9ICcoXnxbXlxcXFxkXSknICtcbiAgICAgICAgICAgICAgJyhcXFxcZHsxLCcgKyBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIICsgJ30pJyArXG4gICAgICAgICAgICAgICcoPzpcXFxcLihcXFxcZHsxLCcgKyBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIICsgJ30pKT8nICtcbiAgICAgICAgICAgICAgJyg/OlxcXFwuKFxcXFxkezEsJyArIE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEggKyAnfSkpPycgK1xuICAgICAgICAgICAgICAnKD86JHxbXlxcXFxkXSknXG50b2soJ0NPRVJDRVJUTCcpXG5yZVt0LkNPRVJDRVJUTF0gPSBuZXcgUmVnRXhwKHNyY1t0LkNPRVJDRV0sICdnJylcbnNhZmVSZVt0LkNPRVJDRVJUTF0gPSBuZXcgUmVnRXhwKG1ha2VTYWZlUmUoc3JjW3QuQ09FUkNFXSksICdnJylcblxuLy8gVGlsZGUgcmFuZ2VzLlxuLy8gTWVhbmluZyBpcyBcInJlYXNvbmFibHkgYXQgb3IgZ3JlYXRlciB0aGFuXCJcbnRvaygnTE9ORVRJTERFJylcbnNyY1t0LkxPTkVUSUxERV0gPSAnKD86fj4/KSdcblxudG9rKCdUSUxERVRSSU0nKVxuc3JjW3QuVElMREVUUklNXSA9ICcoXFxcXHMqKScgKyBzcmNbdC5MT05FVElMREVdICsgJ1xcXFxzKydcbnJlW3QuVElMREVUUklNXSA9IG5ldyBSZWdFeHAoc3JjW3QuVElMREVUUklNXSwgJ2cnKVxuc2FmZVJlW3QuVElMREVUUklNXSA9IG5ldyBSZWdFeHAobWFrZVNhZmVSZShzcmNbdC5USUxERVRSSU1dKSwgJ2cnKVxudmFyIHRpbGRlVHJpbVJlcGxhY2UgPSAnJDF+J1xuXG50b2soJ1RJTERFJylcbnNyY1t0LlRJTERFXSA9ICdeJyArIHNyY1t0LkxPTkVUSUxERV0gKyBzcmNbdC5YUkFOR0VQTEFJTl0gKyAnJCdcbnRvaygnVElMREVMT09TRScpXG5zcmNbdC5USUxERUxPT1NFXSA9ICdeJyArIHNyY1t0LkxPTkVUSUxERV0gKyBzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXSArICckJ1xuXG4vLyBDYXJldCByYW5nZXMuXG4vLyBNZWFuaW5nIGlzIFwiYXQgbGVhc3QgYW5kIGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGhcIlxudG9rKCdMT05FQ0FSRVQnKVxuc3JjW3QuTE9ORUNBUkVUXSA9ICcoPzpcXFxcXiknXG5cbnRvaygnQ0FSRVRUUklNJylcbnNyY1t0LkNBUkVUVFJJTV0gPSAnKFxcXFxzKiknICsgc3JjW3QuTE9ORUNBUkVUXSArICdcXFxccysnXG5yZVt0LkNBUkVUVFJJTV0gPSBuZXcgUmVnRXhwKHNyY1t0LkNBUkVUVFJJTV0sICdnJylcbnNhZmVSZVt0LkNBUkVUVFJJTV0gPSBuZXcgUmVnRXhwKG1ha2VTYWZlUmUoc3JjW3QuQ0FSRVRUUklNXSksICdnJylcbnZhciBjYXJldFRyaW1SZXBsYWNlID0gJyQxXidcblxudG9rKCdDQVJFVCcpXG5zcmNbdC5DQVJFVF0gPSAnXicgKyBzcmNbdC5MT05FQ0FSRVRdICsgc3JjW3QuWFJBTkdFUExBSU5dICsgJyQnXG50b2soJ0NBUkVUTE9PU0UnKVxuc3JjW3QuQ0FSRVRMT09TRV0gPSAnXicgKyBzcmNbdC5MT05FQ0FSRVRdICsgc3JjW3QuWFJBTkdFUExBSU5MT09TRV0gKyAnJCdcblxuLy8gQSBzaW1wbGUgZ3QvbHQvZXEgdGhpbmcsIG9yIGp1c3QgXCJcIiB0byBpbmRpY2F0ZSBcImFueSB2ZXJzaW9uXCJcbnRvaygnQ09NUEFSQVRPUkxPT1NFJylcbnNyY1t0LkNPTVBBUkFUT1JMT09TRV0gPSAnXicgKyBzcmNbdC5HVExUXSArICdcXFxccyooJyArIHNyY1t0LkxPT1NFUExBSU5dICsgJykkfF4kJ1xudG9rKCdDT01QQVJBVE9SJylcbnNyY1t0LkNPTVBBUkFUT1JdID0gJ14nICsgc3JjW3QuR1RMVF0gKyAnXFxcXHMqKCcgKyBzcmNbdC5GVUxMUExBSU5dICsgJykkfF4kJ1xuXG4vLyBBbiBleHByZXNzaW9uIHRvIHN0cmlwIGFueSB3aGl0ZXNwYWNlIGJldHdlZW4gdGhlIGd0bHQgYW5kIHRoZSB0aGluZ1xuLy8gaXQgbW9kaWZpZXMsIHNvIHRoYXQgYD4gMS4yLjNgID09PiBgPjEuMi4zYFxudG9rKCdDT01QQVJBVE9SVFJJTScpXG5zcmNbdC5DT01QQVJBVE9SVFJJTV0gPSAnKFxcXFxzKiknICsgc3JjW3QuR1RMVF0gK1xuICAgICAgICAgICAgICAgICAgICAgICdcXFxccyooJyArIHNyY1t0LkxPT1NFUExBSU5dICsgJ3wnICsgc3JjW3QuWFJBTkdFUExBSU5dICsgJyknXG5cbi8vIHRoaXMgb25lIGhhcyB0byB1c2UgdGhlIC9nIGZsYWdcbnJlW3QuQ09NUEFSQVRPUlRSSU1dID0gbmV3IFJlZ0V4cChzcmNbdC5DT01QQVJBVE9SVFJJTV0sICdnJylcbnNhZmVSZVt0LkNPTVBBUkFUT1JUUklNXSA9IG5ldyBSZWdFeHAobWFrZVNhZmVSZShzcmNbdC5DT01QQVJBVE9SVFJJTV0pLCAnZycpXG52YXIgY29tcGFyYXRvclRyaW1SZXBsYWNlID0gJyQxJDIkMydcblxuLy8gU29tZXRoaW5nIGxpa2UgYDEuMi4zIC0gMS4yLjRgXG4vLyBOb3RlIHRoYXQgdGhlc2UgYWxsIHVzZSB0aGUgbG9vc2UgZm9ybSwgYmVjYXVzZSB0aGV5J2xsIGJlXG4vLyBjaGVja2VkIGFnYWluc3QgZWl0aGVyIHRoZSBzdHJpY3Qgb3IgbG9vc2UgY29tcGFyYXRvciBmb3JtXG4vLyBsYXRlci5cbnRvaygnSFlQSEVOUkFOR0UnKVxuc3JjW3QuSFlQSEVOUkFOR0VdID0gJ15cXFxccyooJyArIHNyY1t0LlhSQU5HRVBMQUlOXSArICcpJyArXG4gICAgICAgICAgICAgICAgICAgJ1xcXFxzKy1cXFxccysnICtcbiAgICAgICAgICAgICAgICAgICAnKCcgKyBzcmNbdC5YUkFOR0VQTEFJTl0gKyAnKScgK1xuICAgICAgICAgICAgICAgICAgICdcXFxccyokJ1xuXG50b2soJ0hZUEhFTlJBTkdFTE9PU0UnKVxuc3JjW3QuSFlQSEVOUkFOR0VMT09TRV0gPSAnXlxcXFxzKignICsgc3JjW3QuWFJBTkdFUExBSU5MT09TRV0gKyAnKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xcXFxzKy1cXFxccysnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcoJyArIHNyY1t0LlhSQU5HRVBMQUlOTE9PU0VdICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXFxccyokJ1xuXG4vLyBTdGFyIHJhbmdlcyBiYXNpY2FsbHkganVzdCBhbGxvdyBhbnl0aGluZyBhdCBhbGwuXG50b2soJ1NUQVInKVxuc3JjW3QuU1RBUl0gPSAnKDx8Pik/PT9cXFxccypcXFxcKidcblxuLy8gQ29tcGlsZSB0byBhY3R1YWwgcmVnZXhwIG9iamVjdHMuXG4vLyBBbGwgYXJlIGZsYWctZnJlZSwgdW5sZXNzIHRoZXkgd2VyZSBjcmVhdGVkIGFib3ZlIHdpdGggYSBmbGFnLlxuZm9yICh2YXIgaSA9IDA7IGkgPCBSOyBpKyspIHtcbiAgZGVidWcoaSwgc3JjW2ldKVxuICBpZiAoIXJlW2ldKSB7XG4gICAgcmVbaV0gPSBuZXcgUmVnRXhwKHNyY1tpXSlcblxuICAgIC8vIFJlcGxhY2UgYWxsIGdyZWVkeSB3aGl0ZXNwYWNlIHRvIHByZXZlbnQgcmVnZXggZG9zIGlzc3Vlcy4gVGhlc2UgcmVnZXggYXJlXG4gICAgLy8gdXNlZCBpbnRlcm5hbGx5IHZpYSB0aGUgc2FmZVJlIG9iamVjdCBzaW5jZSBhbGwgaW5wdXRzIGluIHRoaXMgbGlicmFyeSBnZXRcbiAgICAvLyBub3JtYWxpemVkIGZpcnN0IHRvIHRyaW0gYW5kIGNvbGxhcHNlIGFsbCBleHRyYSB3aGl0ZXNwYWNlLiBUaGUgb3JpZ2luYWxcbiAgICAvLyByZWdleGVzIGFyZSBleHBvcnRlZCBmb3IgdXNlcmxhbmQgY29uc3VtcHRpb24gYW5kIGxvd2VyIGxldmVsIHVzYWdlLiBBXG4gICAgLy8gZnV0dXJlIGJyZWFraW5nIGNoYW5nZSBjb3VsZCBleHBvcnQgdGhlIHNhZmVyIHJlZ2V4IG9ubHkgd2l0aCBhIG5vdGUgdGhhdFxuICAgIC8vIGFsbCBpbnB1dCBzaG91bGQgaGF2ZSBleHRyYSB3aGl0ZXNwYWNlIHJlbW92ZWQuXG4gICAgc2FmZVJlW2ldID0gbmV3IFJlZ0V4cChtYWtlU2FmZVJlKHNyY1tpXSkpXG4gIH1cbn1cblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5mdW5jdGlvbiBwYXJzZSAodmVyc2lvbiwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGxvb3NlOiAhIW9wdGlvbnMsXG4gICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIHJldHVybiB2ZXJzaW9uXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGlmICh2ZXJzaW9uLmxlbmd0aCA+IE1BWF9MRU5HVEgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdmFyIHIgPSBvcHRpb25zLmxvb3NlID8gc2FmZVJlW3QuTE9PU0VdIDogc2FmZVJlW3QuRlVMTF1cbiAgaWYgKCFyLnRlc3QodmVyc2lvbikpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFNlbVZlcih2ZXJzaW9uLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZXhwb3J0cy52YWxpZCA9IHZhbGlkXG5mdW5jdGlvbiB2YWxpZCAodmVyc2lvbiwgb3B0aW9ucykge1xuICB2YXIgdiA9IHBhcnNlKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJldHVybiB2ID8gdi52ZXJzaW9uIDogbnVsbFxufVxuXG5leHBvcnRzLmNsZWFuID0gY2xlYW5cbmZ1bmN0aW9uIGNsZWFuICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gIHZhciBzID0gcGFyc2UodmVyc2lvbi50cmltKCkucmVwbGFjZSgvXls9dl0rLywgJycpLCBvcHRpb25zKVxuICByZXR1cm4gcyA/IHMudmVyc2lvbiA6IG51bGxcbn1cblxuZXhwb3J0cy5TZW1WZXIgPSBTZW1WZXJcblxuZnVuY3Rpb24gU2VtVmVyICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgbG9vc2U6ICEhb3B0aW9ucyxcbiAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiBmYWxzZVxuICAgIH1cbiAgfVxuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIGlmICh2ZXJzaW9uLmxvb3NlID09PSBvcHRpb25zLmxvb3NlKSB7XG4gICAgICByZXR1cm4gdmVyc2lvblxuICAgIH0gZWxzZSB7XG4gICAgICB2ZXJzaW9uID0gdmVyc2lvbi52ZXJzaW9uXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgVmVyc2lvbjogJyArIHZlcnNpb24pXG4gIH1cblxuICBpZiAodmVyc2lvbi5sZW5ndGggPiBNQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmVyc2lvbiBpcyBsb25nZXIgdGhhbiAnICsgTUFYX0xFTkdUSCArICcgY2hhcmFjdGVycycpXG4gIH1cblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIH1cblxuICBkZWJ1ZygnU2VtVmVyJywgdmVyc2lvbiwgb3B0aW9ucylcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICB0aGlzLmxvb3NlID0gISFvcHRpb25zLmxvb3NlXG5cbiAgdmFyIG0gPSB2ZXJzaW9uLnRyaW0oKS5tYXRjaChvcHRpb25zLmxvb3NlID8gc2FmZVJlW3QuTE9PU0VdIDogc2FmZVJlW3QuRlVMTF0pXG5cbiAgaWYgKCFtKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBWZXJzaW9uOiAnICsgdmVyc2lvbilcbiAgfVxuXG4gIHRoaXMucmF3ID0gdmVyc2lvblxuXG4gIC8vIHRoZXNlIGFyZSBhY3R1YWxseSBudW1iZXJzXG4gIHRoaXMubWFqb3IgPSArbVsxXVxuICB0aGlzLm1pbm9yID0gK21bMl1cbiAgdGhpcy5wYXRjaCA9ICttWzNdXG5cbiAgaWYgKHRoaXMubWFqb3IgPiBNQVhfU0FGRV9JTlRFR0VSIHx8IHRoaXMubWFqb3IgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtYWpvciB2ZXJzaW9uJylcbiAgfVxuXG4gIGlmICh0aGlzLm1pbm9yID4gTUFYX1NBRkVfSU5URUdFUiB8fCB0aGlzLm1pbm9yIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbWlub3IgdmVyc2lvbicpXG4gIH1cblxuICBpZiAodGhpcy5wYXRjaCA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgdGhpcy5wYXRjaCA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHBhdGNoIHZlcnNpb24nKVxuICB9XG5cbiAgLy8gbnVtYmVyaWZ5IGFueSBwcmVyZWxlYXNlIG51bWVyaWMgaWRzXG4gIGlmICghbVs0XSkge1xuICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wcmVyZWxlYXNlID0gbVs0XS5zcGxpdCgnLicpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGlmICgvXlswLTldKyQvLnRlc3QoaWQpKSB7XG4gICAgICAgIHZhciBudW0gPSAraWRcbiAgICAgICAgaWYgKG51bSA+PSAwICYmIG51bSA8IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICByZXR1cm4gbnVtXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpZFxuICAgIH0pXG4gIH1cblxuICB0aGlzLmJ1aWxkID0gbVs1XSA/IG1bNV0uc3BsaXQoJy4nKSA6IFtdXG4gIHRoaXMuZm9ybWF0KClcbn1cblxuU2VtVmVyLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudmVyc2lvbiA9IHRoaXMubWFqb3IgKyAnLicgKyB0aGlzLm1pbm9yICsgJy4nICsgdGhpcy5wYXRjaFxuICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgIHRoaXMudmVyc2lvbiArPSAnLScgKyB0aGlzLnByZXJlbGVhc2Uuam9pbignLicpXG4gIH1cbiAgcmV0dXJuIHRoaXMudmVyc2lvblxufVxuXG5TZW1WZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy52ZXJzaW9uXG59XG5cblNlbVZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBkZWJ1ZygnU2VtVmVyLmNvbXBhcmUnLCB0aGlzLnZlcnNpb24sIHRoaXMub3B0aW9ucywgb3RoZXIpXG4gIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHRoaXMuY29tcGFyZU1haW4ob3RoZXIpIHx8IHRoaXMuY29tcGFyZVByZShvdGhlcilcbn1cblxuU2VtVmVyLnByb3RvdHlwZS5jb21wYXJlTWFpbiA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBjb21wYXJlSWRlbnRpZmllcnModGhpcy5tYWpvciwgb3RoZXIubWFqb3IpIHx8XG4gICAgICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5taW5vciwgb3RoZXIubWlub3IpIHx8XG4gICAgICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5wYXRjaCwgb3RoZXIucGF0Y2gpXG59XG5cblNlbVZlci5wcm90b3R5cGUuY29tcGFyZVByZSA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgfVxuXG4gIC8vIE5PVCBoYXZpbmcgYSBwcmVyZWxlYXNlIGlzID4gaGF2aW5nIG9uZVxuICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCAmJiAhb3RoZXIucHJlcmVsZWFzZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gLTFcbiAgfSBlbHNlIGlmICghdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCAmJiBvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgIHJldHVybiAxXG4gIH0gZWxzZSBpZiAoIXRoaXMucHJlcmVsZWFzZS5sZW5ndGggJiYgIW90aGVyLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIHZhciBpID0gMFxuICBkbyB7XG4gICAgdmFyIGEgPSB0aGlzLnByZXJlbGVhc2VbaV1cbiAgICB2YXIgYiA9IG90aGVyLnByZXJlbGVhc2VbaV1cbiAgICBkZWJ1ZygncHJlcmVsZWFzZSBjb21wYXJlJywgaSwgYSwgYilcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2UgaWYgKGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICBjb250aW51ZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgfVxuICB9IHdoaWxlICgrK2kpXG59XG5cblNlbVZlci5wcm90b3R5cGUuY29tcGFyZUJ1aWxkID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIGRvIHtcbiAgICB2YXIgYSA9IHRoaXMuYnVpbGRbaV1cbiAgICB2YXIgYiA9IG90aGVyLmJ1aWxkW2ldXG4gICAgZGVidWcoJ3ByZXJlbGVhc2UgY29tcGFyZScsIGksIGEsIGIpXG4gICAgaWYgKGEgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAwXG4gICAgfSBlbHNlIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAxXG4gICAgfSBlbHNlIGlmIChhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH0gZWxzZSBpZiAoYSA9PT0gYikge1xuICAgICAgY29udGludWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbXBhcmVJZGVudGlmaWVycyhhLCBiKVxuICAgIH1cbiAgfSB3aGlsZSAoKytpKVxufVxuXG4vLyBwcmVtaW5vciB3aWxsIGJ1bXAgdGhlIHZlcnNpb24gdXAgdG8gdGhlIG5leHQgbWlub3IgcmVsZWFzZSwgYW5kIGltbWVkaWF0ZWx5XG4vLyBkb3duIHRvIHByZS1yZWxlYXNlLiBwcmVtYWpvciBhbmQgcHJlcGF0Y2ggd29yayB0aGUgc2FtZSB3YXkuXG5TZW1WZXIucHJvdG90eXBlLmluYyA9IGZ1bmN0aW9uIChyZWxlYXNlLCBpZGVudGlmaWVyKSB7XG4gIHN3aXRjaCAocmVsZWFzZSkge1xuICAgIGNhc2UgJ3ByZW1ham9yJzpcbiAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPSAwXG4gICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgdGhpcy5taW5vciA9IDBcbiAgICAgIHRoaXMubWFqb3IrK1xuICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3ByZW1pbm9yJzpcbiAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPSAwXG4gICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgdGhpcy5taW5vcisrXG4gICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAncHJlcGF0Y2gnOlxuICAgICAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IGEgcHJlcmVsZWFzZSwgaXQgd2lsbCBidW1wIHRvIHRoZSBuZXh0IHZlcnNpb25cbiAgICAgIC8vIGRyb3AgYW55IHByZXJlbGVhc2VzIHRoYXQgbWlnaHQgYWxyZWFkeSBleGlzdCwgc2luY2UgdGhleSBhcmUgbm90XG4gICAgICAvLyByZWxldmFudCBhdCB0aGlzIHBvaW50LlxuICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9IDBcbiAgICAgIHRoaXMuaW5jKCdwYXRjaCcsIGlkZW50aWZpZXIpXG4gICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgIGJyZWFrXG4gICAgLy8gSWYgdGhlIGlucHV0IGlzIGEgbm9uLXByZXJlbGVhc2UgdmVyc2lvbiwgdGhpcyBhY3RzIHRoZSBzYW1lIGFzXG4gICAgLy8gcHJlcGF0Y2guXG4gICAgY2FzZSAncHJlcmVsZWFzZSc6XG4gICAgICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLmluYygncGF0Y2gnLCBpZGVudGlmaWVyKVxuICAgICAgfVxuICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICBicmVha1xuXG4gICAgY2FzZSAnbWFqb3InOlxuICAgICAgLy8gSWYgdGhpcyBpcyBhIHByZS1tYWpvciB2ZXJzaW9uLCBidW1wIHVwIHRvIHRoZSBzYW1lIG1ham9yIHZlcnNpb24uXG4gICAgICAvLyBPdGhlcndpc2UgaW5jcmVtZW50IG1ham9yLlxuICAgICAgLy8gMS4wLjAtNSBidW1wcyB0byAxLjAuMFxuICAgICAgLy8gMS4xLjAgYnVtcHMgdG8gMi4wLjBcbiAgICAgIGlmICh0aGlzLm1pbm9yICE9PSAwIHx8XG4gICAgICAgICAgdGhpcy5wYXRjaCAhPT0gMCB8fFxuICAgICAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5tYWpvcisrXG4gICAgICB9XG4gICAgICB0aGlzLm1pbm9yID0gMFxuICAgICAgdGhpcy5wYXRjaCA9IDBcbiAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICBicmVha1xuICAgIGNhc2UgJ21pbm9yJzpcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBwcmUtbWlub3IgdmVyc2lvbiwgYnVtcCB1cCB0byB0aGUgc2FtZSBtaW5vciB2ZXJzaW9uLlxuICAgICAgLy8gT3RoZXJ3aXNlIGluY3JlbWVudCBtaW5vci5cbiAgICAgIC8vIDEuMi4wLTUgYnVtcHMgdG8gMS4yLjBcbiAgICAgIC8vIDEuMi4xIGJ1bXBzIHRvIDEuMy4wXG4gICAgICBpZiAodGhpcy5wYXRjaCAhPT0gMCB8fCB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMubWlub3IrK1xuICAgICAgfVxuICAgICAgdGhpcy5wYXRjaCA9IDBcbiAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICBicmVha1xuICAgIGNhc2UgJ3BhdGNoJzpcbiAgICAgIC8vIElmIHRoaXMgaXMgbm90IGEgcHJlLXJlbGVhc2UgdmVyc2lvbiwgaXQgd2lsbCBpbmNyZW1lbnQgdGhlIHBhdGNoLlxuICAgICAgLy8gSWYgaXQgaXMgYSBwcmUtcmVsZWFzZSBpdCB3aWxsIGJ1bXAgdXAgdG8gdGhlIHNhbWUgcGF0Y2ggdmVyc2lvbi5cbiAgICAgIC8vIDEuMi4wLTUgcGF0Y2hlcyB0byAxLjIuMFxuICAgICAgLy8gMS4yLjAgcGF0Y2hlcyB0byAxLjIuMVxuICAgICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5wYXRjaCsrXG4gICAgICB9XG4gICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgICAgYnJlYWtcbiAgICAvLyBUaGlzIHByb2JhYmx5IHNob3VsZG4ndCBiZSB1c2VkIHB1YmxpY2x5LlxuICAgIC8vIDEuMC4wIFwicHJlXCIgd291bGQgYmVjb21lIDEuMC4wLTAgd2hpY2ggaXMgdGhlIHdyb25nIGRpcmVjdGlvbi5cbiAgICBjYXNlICdwcmUnOlxuICAgICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5wcmVyZWxlYXNlID0gWzBdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IHRoaXMucHJlcmVsZWFzZS5sZW5ndGhcbiAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZXJlbGVhc2VbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLnByZXJlbGVhc2VbaV0rK1xuICAgICAgICAgICAgaSA9IC0yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgIC8vIGRpZG4ndCBpbmNyZW1lbnQgYW55dGhpbmdcbiAgICAgICAgICB0aGlzLnByZXJlbGVhc2UucHVzaCgwKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAvLyAxLjIuMC1iZXRhLjEgYnVtcHMgdG8gMS4yLjAtYmV0YS4yLFxuICAgICAgICAvLyAxLjIuMC1iZXRhLmZvb2JseiBvciAxLjIuMC1iZXRhIGJ1bXBzIHRvIDEuMi4wLWJldGEuMFxuICAgICAgICBpZiAodGhpcy5wcmVyZWxlYXNlWzBdID09PSBpZGVudGlmaWVyKSB7XG4gICAgICAgICAgaWYgKGlzTmFOKHRoaXMucHJlcmVsZWFzZVsxXSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtpZGVudGlmaWVyLCAwXVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbaWRlbnRpZmllciwgMF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5jcmVtZW50IGFyZ3VtZW50OiAnICsgcmVsZWFzZSlcbiAgfVxuICB0aGlzLmZvcm1hdCgpXG4gIHRoaXMucmF3ID0gdGhpcy52ZXJzaW9uXG4gIHJldHVybiB0aGlzXG59XG5cbmV4cG9ydHMuaW5jID0gaW5jXG5mdW5jdGlvbiBpbmMgKHZlcnNpb24sIHJlbGVhc2UsIGxvb3NlLCBpZGVudGlmaWVyKSB7XG4gIGlmICh0eXBlb2YgKGxvb3NlKSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZGVudGlmaWVyID0gbG9vc2VcbiAgICBsb29zZSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFNlbVZlcih2ZXJzaW9uLCBsb29zZSkuaW5jKHJlbGVhc2UsIGlkZW50aWZpZXIpLnZlcnNpb25cbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydHMuZGlmZiA9IGRpZmZcbmZ1bmN0aW9uIGRpZmYgKHZlcnNpb24xLCB2ZXJzaW9uMikge1xuICBpZiAoZXEodmVyc2lvbjEsIHZlcnNpb24yKSkge1xuICAgIHJldHVybiBudWxsXG4gIH0gZWxzZSB7XG4gICAgdmFyIHYxID0gcGFyc2UodmVyc2lvbjEpXG4gICAgdmFyIHYyID0gcGFyc2UodmVyc2lvbjIpXG4gICAgdmFyIHByZWZpeCA9ICcnXG4gICAgaWYgKHYxLnByZXJlbGVhc2UubGVuZ3RoIHx8IHYyLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgICBwcmVmaXggPSAncHJlJ1xuICAgICAgdmFyIGRlZmF1bHRSZXN1bHQgPSAncHJlcmVsZWFzZSdcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHYxKSB7XG4gICAgICBpZiAoa2V5ID09PSAnbWFqb3InIHx8IGtleSA9PT0gJ21pbm9yJyB8fCBrZXkgPT09ICdwYXRjaCcpIHtcbiAgICAgICAgaWYgKHYxW2tleV0gIT09IHYyW2tleV0pIHtcbiAgICAgICAgICByZXR1cm4gcHJlZml4ICsga2V5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRSZXN1bHQgLy8gbWF5IGJlIHVuZGVmaW5lZFxuICB9XG59XG5cbmV4cG9ydHMuY29tcGFyZUlkZW50aWZpZXJzID0gY29tcGFyZUlkZW50aWZpZXJzXG5cbnZhciBudW1lcmljID0gL15bMC05XSskL1xuZnVuY3Rpb24gY29tcGFyZUlkZW50aWZpZXJzIChhLCBiKSB7XG4gIHZhciBhbnVtID0gbnVtZXJpYy50ZXN0KGEpXG4gIHZhciBibnVtID0gbnVtZXJpYy50ZXN0KGIpXG5cbiAgaWYgKGFudW0gJiYgYm51bSkge1xuICAgIGEgPSArYVxuICAgIGIgPSArYlxuICB9XG5cbiAgcmV0dXJuIGEgPT09IGIgPyAwXG4gICAgOiAoYW51bSAmJiAhYm51bSkgPyAtMVxuICAgIDogKGJudW0gJiYgIWFudW0pID8gMVxuICAgIDogYSA8IGIgPyAtMVxuICAgIDogMVxufVxuXG5leHBvcnRzLnJjb21wYXJlSWRlbnRpZmllcnMgPSByY29tcGFyZUlkZW50aWZpZXJzXG5mdW5jdGlvbiByY29tcGFyZUlkZW50aWZpZXJzIChhLCBiKSB7XG4gIHJldHVybiBjb21wYXJlSWRlbnRpZmllcnMoYiwgYSlcbn1cblxuZXhwb3J0cy5tYWpvciA9IG1ham9yXG5mdW5jdGlvbiBtYWpvciAoYSwgbG9vc2UpIHtcbiAgcmV0dXJuIG5ldyBTZW1WZXIoYSwgbG9vc2UpLm1ham9yXG59XG5cbmV4cG9ydHMubWlub3IgPSBtaW5vclxuZnVuY3Rpb24gbWlub3IgKGEsIGxvb3NlKSB7XG4gIHJldHVybiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5taW5vclxufVxuXG5leHBvcnRzLnBhdGNoID0gcGF0Y2hcbmZ1bmN0aW9uIHBhdGNoIChhLCBsb29zZSkge1xuICByZXR1cm4gbmV3IFNlbVZlcihhLCBsb29zZSkucGF0Y2hcbn1cblxuZXhwb3J0cy5jb21wYXJlID0gY29tcGFyZVxuZnVuY3Rpb24gY29tcGFyZSAoYSwgYiwgbG9vc2UpIHtcbiAgcmV0dXJuIG5ldyBTZW1WZXIoYSwgbG9vc2UpLmNvbXBhcmUobmV3IFNlbVZlcihiLCBsb29zZSkpXG59XG5cbmV4cG9ydHMuY29tcGFyZUxvb3NlID0gY29tcGFyZUxvb3NlXG5mdW5jdGlvbiBjb21wYXJlTG9vc2UgKGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmUoYSwgYiwgdHJ1ZSlcbn1cblxuZXhwb3J0cy5jb21wYXJlQnVpbGQgPSBjb21wYXJlQnVpbGRcbmZ1bmN0aW9uIGNvbXBhcmVCdWlsZCAoYSwgYiwgbG9vc2UpIHtcbiAgdmFyIHZlcnNpb25BID0gbmV3IFNlbVZlcihhLCBsb29zZSlcbiAgdmFyIHZlcnNpb25CID0gbmV3IFNlbVZlcihiLCBsb29zZSlcbiAgcmV0dXJuIHZlcnNpb25BLmNvbXBhcmUodmVyc2lvbkIpIHx8IHZlcnNpb25BLmNvbXBhcmVCdWlsZCh2ZXJzaW9uQilcbn1cblxuZXhwb3J0cy5yY29tcGFyZSA9IHJjb21wYXJlXG5mdW5jdGlvbiByY29tcGFyZSAoYSwgYiwgbG9vc2UpIHtcbiAgcmV0dXJuIGNvbXBhcmUoYiwgYSwgbG9vc2UpXG59XG5cbmV4cG9ydHMuc29ydCA9IHNvcnRcbmZ1bmN0aW9uIHNvcnQgKGxpc3QsIGxvb3NlKSB7XG4gIHJldHVybiBsaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5jb21wYXJlQnVpbGQoYSwgYiwgbG9vc2UpXG4gIH0pXG59XG5cbmV4cG9ydHMucnNvcnQgPSByc29ydFxuZnVuY3Rpb24gcnNvcnQgKGxpc3QsIGxvb3NlKSB7XG4gIHJldHVybiBsaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5jb21wYXJlQnVpbGQoYiwgYSwgbG9vc2UpXG4gIH0pXG59XG5cbmV4cG9ydHMuZ3QgPSBndFxuZnVuY3Rpb24gZ3QgKGEsIGIsIGxvb3NlKSB7XG4gIHJldHVybiBjb21wYXJlKGEsIGIsIGxvb3NlKSA+IDBcbn1cblxuZXhwb3J0cy5sdCA9IGx0XG5mdW5jdGlvbiBsdCAoYSwgYiwgbG9vc2UpIHtcbiAgcmV0dXJuIGNvbXBhcmUoYSwgYiwgbG9vc2UpIDwgMFxufVxuXG5leHBvcnRzLmVxID0gZXFcbmZ1bmN0aW9uIGVxIChhLCBiLCBsb29zZSkge1xuICByZXR1cm4gY29tcGFyZShhLCBiLCBsb29zZSkgPT09IDBcbn1cblxuZXhwb3J0cy5uZXEgPSBuZXFcbmZ1bmN0aW9uIG5lcSAoYSwgYiwgbG9vc2UpIHtcbiAgcmV0dXJuIGNvbXBhcmUoYSwgYiwgbG9vc2UpICE9PSAwXG59XG5cbmV4cG9ydHMuZ3RlID0gZ3RlXG5mdW5jdGlvbiBndGUgKGEsIGIsIGxvb3NlKSB7XG4gIHJldHVybiBjb21wYXJlKGEsIGIsIGxvb3NlKSA+PSAwXG59XG5cbmV4cG9ydHMubHRlID0gbHRlXG5mdW5jdGlvbiBsdGUgKGEsIGIsIGxvb3NlKSB7XG4gIHJldHVybiBjb21wYXJlKGEsIGIsIGxvb3NlKSA8PSAwXG59XG5cbmV4cG9ydHMuY21wID0gY21wXG5mdW5jdGlvbiBjbXAgKGEsIG9wLCBiLCBsb29zZSkge1xuICBzd2l0Y2ggKG9wKSB7XG4gICAgY2FzZSAnPT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpXG4gICAgICAgIGEgPSBhLnZlcnNpb25cbiAgICAgIGlmICh0eXBlb2YgYiA9PT0gJ29iamVjdCcpXG4gICAgICAgIGIgPSBiLnZlcnNpb25cbiAgICAgIHJldHVybiBhID09PSBiXG5cbiAgICBjYXNlICchPT0nOlxuICAgICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JylcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JylcbiAgICAgICAgYiA9IGIudmVyc2lvblxuICAgICAgcmV0dXJuIGEgIT09IGJcblxuICAgIGNhc2UgJyc6XG4gICAgY2FzZSAnPSc6XG4gICAgY2FzZSAnPT0nOlxuICAgICAgcmV0dXJuIGVxKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnIT0nOlxuICAgICAgcmV0dXJuIG5lcShhLCBiLCBsb29zZSlcblxuICAgIGNhc2UgJz4nOlxuICAgICAgcmV0dXJuIGd0KGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPj0nOlxuICAgICAgcmV0dXJuIGd0ZShhLCBiLCBsb29zZSlcblxuICAgIGNhc2UgJzwnOlxuICAgICAgcmV0dXJuIGx0KGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPD0nOlxuICAgICAgcmV0dXJuIGx0ZShhLCBiLCBsb29zZSlcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG9wZXJhdG9yOiAnICsgb3ApXG4gIH1cbn1cblxuZXhwb3J0cy5Db21wYXJhdG9yID0gQ29tcGFyYXRvclxuZnVuY3Rpb24gQ29tcGFyYXRvciAoY29tcCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGxvb3NlOiAhIW9wdGlvbnMsXG4gICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAoY29tcCBpbnN0YW5jZW9mIENvbXBhcmF0b3IpIHtcbiAgICBpZiAoY29tcC5sb29zZSA9PT0gISFvcHRpb25zLmxvb3NlKSB7XG4gICAgICByZXR1cm4gY29tcFxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wID0gY29tcC52YWx1ZVxuICAgIH1cbiAgfVxuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb21wYXJhdG9yKSkge1xuICAgIHJldHVybiBuZXcgQ29tcGFyYXRvcihjb21wLCBvcHRpb25zKVxuICB9XG5cbiAgY29tcCA9IGNvbXAudHJpbSgpLnNwbGl0KC9cXHMrLykuam9pbignICcpXG4gIGRlYnVnKCdjb21wYXJhdG9yJywgY29tcCwgb3B0aW9ucylcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICB0aGlzLmxvb3NlID0gISFvcHRpb25zLmxvb3NlXG4gIHRoaXMucGFyc2UoY29tcClcblxuICBpZiAodGhpcy5zZW12ZXIgPT09IEFOWSkge1xuICAgIHRoaXMudmFsdWUgPSAnJ1xuICB9IGVsc2Uge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLm9wZXJhdG9yICsgdGhpcy5zZW12ZXIudmVyc2lvblxuICB9XG5cbiAgZGVidWcoJ2NvbXAnLCB0aGlzKVxufVxuXG52YXIgQU5ZID0ge31cbkNvbXBhcmF0b3IucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKGNvbXApIHtcbiAgdmFyIHIgPSB0aGlzLm9wdGlvbnMubG9vc2UgPyBzYWZlUmVbdC5DT01QQVJBVE9STE9PU0VdIDogc2FmZVJlW3QuQ09NUEFSQVRPUl1cbiAgdmFyIG0gPSBjb21wLm1hdGNoKHIpXG5cbiAgaWYgKCFtKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjb21wYXJhdG9yOiAnICsgY29tcClcbiAgfVxuXG4gIHRoaXMub3BlcmF0b3IgPSBtWzFdICE9PSB1bmRlZmluZWQgPyBtWzFdIDogJydcbiAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICc9Jykge1xuICAgIHRoaXMub3BlcmF0b3IgPSAnJ1xuICB9XG5cbiAgLy8gaWYgaXQgbGl0ZXJhbGx5IGlzIGp1c3QgJz4nIG9yICcnIHRoZW4gYWxsb3cgYW55dGhpbmcuXG4gIGlmICghbVsyXSkge1xuICAgIHRoaXMuc2VtdmVyID0gQU5ZXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zZW12ZXIgPSBuZXcgU2VtVmVyKG1bMl0sIHRoaXMub3B0aW9ucy5sb29zZSlcbiAgfVxufVxuXG5Db21wYXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMudmFsdWVcbn1cblxuQ29tcGFyYXRvci5wcm90b3R5cGUudGVzdCA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gIGRlYnVnKCdDb21wYXJhdG9yLnRlc3QnLCB2ZXJzaW9uLCB0aGlzLm9wdGlvbnMubG9vc2UpXG5cbiAgaWYgKHRoaXMuc2VtdmVyID09PSBBTlkgfHwgdmVyc2lvbiA9PT0gQU5ZKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgdmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbiwgdGhpcy5vcHRpb25zKVxuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY21wKHZlcnNpb24sIHRoaXMub3BlcmF0b3IsIHRoaXMuc2VtdmVyLCB0aGlzLm9wdGlvbnMpXG59XG5cbkNvbXBhcmF0b3IucHJvdG90eXBlLmludGVyc2VjdHMgPSBmdW5jdGlvbiAoY29tcCwgb3B0aW9ucykge1xuICBpZiAoIShjb21wIGluc3RhbmNlb2YgQ29tcGFyYXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhIENvbXBhcmF0b3IgaXMgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBsb29zZTogISFvcHRpb25zLFxuICAgICAgaW5jbHVkZVByZXJlbGVhc2U6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgdmFyIHJhbmdlVG1wXG5cbiAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICcnKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByYW5nZVRtcCA9IG5ldyBSYW5nZShjb21wLnZhbHVlLCBvcHRpb25zKVxuICAgIHJldHVybiBzYXRpc2ZpZXModGhpcy52YWx1ZSwgcmFuZ2VUbXAsIG9wdGlvbnMpXG4gIH0gZWxzZSBpZiAoY29tcC5vcGVyYXRvciA9PT0gJycpIHtcbiAgICBpZiAoY29tcC52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJhbmdlVG1wID0gbmV3IFJhbmdlKHRoaXMudmFsdWUsIG9wdGlvbnMpXG4gICAgcmV0dXJuIHNhdGlzZmllcyhjb21wLnNlbXZlciwgcmFuZ2VUbXAsIG9wdGlvbnMpXG4gIH1cblxuICB2YXIgc2FtZURpcmVjdGlvbkluY3JlYXNpbmcgPVxuICAgICh0aGlzLm9wZXJhdG9yID09PSAnPj0nIHx8IHRoaXMub3BlcmF0b3IgPT09ICc+JykgJiZcbiAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpXG4gIHZhciBzYW1lRGlyZWN0aW9uRGVjcmVhc2luZyA9XG4gICAgKHRoaXMub3BlcmF0b3IgPT09ICc8PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzwnKSAmJlxuICAgIChjb21wLm9wZXJhdG9yID09PSAnPD0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8JylcbiAgdmFyIHNhbWVTZW1WZXIgPSB0aGlzLnNlbXZlci52ZXJzaW9uID09PSBjb21wLnNlbXZlci52ZXJzaW9uXG4gIHZhciBkaWZmZXJlbnREaXJlY3Rpb25zSW5jbHVzaXZlID1cbiAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPD0nKSAmJlxuICAgIChjb21wLm9wZXJhdG9yID09PSAnPj0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8PScpXG4gIHZhciBvcHBvc2l0ZURpcmVjdGlvbnNMZXNzVGhhbiA9XG4gICAgY21wKHRoaXMuc2VtdmVyLCAnPCcsIGNvbXAuc2VtdmVyLCBvcHRpb25zKSAmJlxuICAgICgodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPicpICYmXG4gICAgKGNvbXAub3BlcmF0b3IgPT09ICc8PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJzwnKSlcbiAgdmFyIG9wcG9zaXRlRGlyZWN0aW9uc0dyZWF0ZXJUaGFuID1cbiAgICBjbXAodGhpcy5zZW12ZXIsICc+JywgY29tcC5zZW12ZXIsIG9wdGlvbnMpICYmXG4gICAgKCh0aGlzLm9wZXJhdG9yID09PSAnPD0nIHx8IHRoaXMub3BlcmF0b3IgPT09ICc8JykgJiZcbiAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpKVxuXG4gIHJldHVybiBzYW1lRGlyZWN0aW9uSW5jcmVhc2luZyB8fCBzYW1lRGlyZWN0aW9uRGVjcmVhc2luZyB8fFxuICAgIChzYW1lU2VtVmVyICYmIGRpZmZlcmVudERpcmVjdGlvbnNJbmNsdXNpdmUpIHx8XG4gICAgb3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4gfHwgb3Bwb3NpdGVEaXJlY3Rpb25zR3JlYXRlclRoYW5cbn1cblxuZXhwb3J0cy5SYW5nZSA9IFJhbmdlXG5mdW5jdGlvbiBSYW5nZSAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBsb29zZTogISFvcHRpb25zLFxuICAgICAgaW5jbHVkZVByZXJlbGVhc2U6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgUmFuZ2UpIHtcbiAgICBpZiAocmFuZ2UubG9vc2UgPT09ICEhb3B0aW9ucy5sb29zZSAmJlxuICAgICAgICByYW5nZS5pbmNsdWRlUHJlcmVsZWFzZSA9PT0gISFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlKSB7XG4gICAgICByZXR1cm4gcmFuZ2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5yYXcsIG9wdGlvbnMpXG4gICAgfVxuICB9XG5cbiAgaWYgKHJhbmdlIGluc3RhbmNlb2YgQ29tcGFyYXRvcikge1xuICAgIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UudmFsdWUsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmFuZ2UpKSB7XG4gICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfVxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICB0aGlzLmluY2x1ZGVQcmVyZWxlYXNlID0gISFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlXG5cbiAgLy8gRmlyc3QgcmVkdWNlIGFsbCB3aGl0ZXNwYWNlIGFzIG11Y2ggYXMgcG9zc2libGUgc28gd2UgZG8gbm90IGhhdmUgdG8gcmVseVxuICAvLyBvbiBwb3RlbnRpYWxseSBzbG93IHJlZ2V4ZXMgbGlrZSBcXHMqLiBUaGlzIGlzIHRoZW4gc3RvcmVkIGFuZCB1c2VkIGZvclxuICAvLyBmdXR1cmUgZXJyb3IgbWVzc2FnZXMgYXMgd2VsbC5cbiAgdGhpcy5yYXcgPSByYW5nZVxuICAgIC50cmltKClcbiAgICAuc3BsaXQoL1xccysvKVxuICAgIC5qb2luKCcgJylcblxuICAvLyBGaXJzdCwgc3BsaXQgYmFzZWQgb24gYm9vbGVhbiBvciB8fFxuICB0aGlzLnNldCA9IHRoaXMucmF3LnNwbGl0KCd8fCcpLm1hcChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVJhbmdlKHJhbmdlLnRyaW0oKSlcbiAgfSwgdGhpcykuZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgLy8gdGhyb3cgb3V0IGFueSB0aGF0IGFyZSBub3QgcmVsZXZhbnQgZm9yIHdoYXRldmVyIHJlYXNvblxuICAgIHJldHVybiBjLmxlbmd0aFxuICB9KVxuXG4gIGlmICghdGhpcy5zZXQubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBTZW1WZXIgUmFuZ2U6ICcgKyB0aGlzLnJhdylcbiAgfVxuXG4gIHRoaXMuZm9ybWF0KClcbn1cblxuUmFuZ2UucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yYW5nZSA9IHRoaXMuc2V0Lm1hcChmdW5jdGlvbiAoY29tcHMpIHtcbiAgICByZXR1cm4gY29tcHMuam9pbignICcpLnRyaW0oKVxuICB9KS5qb2luKCd8fCcpLnRyaW0oKVxuICByZXR1cm4gdGhpcy5yYW5nZVxufVxuXG5SYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJhbmdlXG59XG5cblJhbmdlLnByb3RvdHlwZS5wYXJzZVJhbmdlID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gIHZhciBsb29zZSA9IHRoaXMub3B0aW9ucy5sb29zZVxuICAvLyBgMS4yLjMgLSAxLjIuNGAgPT4gYD49MS4yLjMgPD0xLjIuNGBcbiAgdmFyIGhyID0gbG9vc2UgPyBzYWZlUmVbdC5IWVBIRU5SQU5HRUxPT1NFXSA6IHNhZmVSZVt0LkhZUEhFTlJBTkdFXVxuICByYW5nZSA9IHJhbmdlLnJlcGxhY2UoaHIsIGh5cGhlblJlcGxhY2UpXG4gIGRlYnVnKCdoeXBoZW4gcmVwbGFjZScsIHJhbmdlKVxuICAvLyBgPiAxLjIuMyA8IDEuMi41YCA9PiBgPjEuMi4zIDwxLjIuNWBcbiAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHNhZmVSZVt0LkNPTVBBUkFUT1JUUklNXSwgY29tcGFyYXRvclRyaW1SZXBsYWNlKVxuICBkZWJ1ZygnY29tcGFyYXRvciB0cmltJywgcmFuZ2UsIHNhZmVSZVt0LkNPTVBBUkFUT1JUUklNXSlcblxuICAvLyBgfiAxLjIuM2AgPT4gYH4xLjIuM2BcbiAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHNhZmVSZVt0LlRJTERFVFJJTV0sIHRpbGRlVHJpbVJlcGxhY2UpXG5cbiAgLy8gYF4gMS4yLjNgID0+IGBeMS4yLjNgXG4gIHJhbmdlID0gcmFuZ2UucmVwbGFjZShzYWZlUmVbdC5DQVJFVFRSSU1dLCBjYXJldFRyaW1SZXBsYWNlKVxuXG4gIC8vIG5vcm1hbGl6ZSBzcGFjZXNcbiAgcmFuZ2UgPSByYW5nZS5zcGxpdCgvXFxzKy8pLmpvaW4oJyAnKVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQsIHRoZSByYW5nZSBpcyBjb21wbGV0ZWx5IHRyaW1tZWQgYW5kXG4gIC8vIHJlYWR5IHRvIGJlIHNwbGl0IGludG8gY29tcGFyYXRvcnMuXG5cbiAgdmFyIGNvbXBSZSA9IGxvb3NlID8gc2FmZVJlW3QuQ09NUEFSQVRPUkxPT1NFXSA6IHNhZmVSZVt0LkNPTVBBUkFUT1JdXG4gIHZhciBzZXQgPSByYW5nZS5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAoY29tcCkge1xuICAgIHJldHVybiBwYXJzZUNvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKVxuICB9LCB0aGlzKS5qb2luKCcgJykuc3BsaXQoL1xccysvKVxuICBpZiAodGhpcy5vcHRpb25zLmxvb3NlKSB7XG4gICAgLy8gaW4gbG9vc2UgbW9kZSwgdGhyb3cgb3V0IGFueSB0aGF0IGFyZSBub3QgdmFsaWQgY29tcGFyYXRvcnNcbiAgICBzZXQgPSBzZXQuZmlsdGVyKGZ1bmN0aW9uIChjb21wKSB7XG4gICAgICByZXR1cm4gISFjb21wLm1hdGNoKGNvbXBSZSlcbiAgICB9KVxuICB9XG4gIHNldCA9IHNldC5tYXAoZnVuY3Rpb24gKGNvbXApIHtcbiAgICByZXR1cm4gbmV3IENvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKVxuICB9LCB0aGlzKVxuXG4gIHJldHVybiBzZXRcbn1cblxuUmFuZ2UucHJvdG90eXBlLmludGVyc2VjdHMgPSBmdW5jdGlvbiAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgaWYgKCEocmFuZ2UgaW5zdGFuY2VvZiBSYW5nZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhIFJhbmdlIGlzIHJlcXVpcmVkJylcbiAgfVxuXG4gIHJldHVybiB0aGlzLnNldC5zb21lKGZ1bmN0aW9uICh0aGlzQ29tcGFyYXRvcnMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgaXNTYXRpc2ZpYWJsZSh0aGlzQ29tcGFyYXRvcnMsIG9wdGlvbnMpICYmXG4gICAgICByYW5nZS5zZXQuc29tZShmdW5jdGlvbiAocmFuZ2VDb21wYXJhdG9ycykge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGlzU2F0aXNmaWFibGUocmFuZ2VDb21wYXJhdG9ycywgb3B0aW9ucykgJiZcbiAgICAgICAgICB0aGlzQ29tcGFyYXRvcnMuZXZlcnkoZnVuY3Rpb24gKHRoaXNDb21wYXJhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VDb21wYXJhdG9ycy5ldmVyeShmdW5jdGlvbiAocmFuZ2VDb21wYXJhdG9yKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzQ29tcGFyYXRvci5pbnRlcnNlY3RzKHJhbmdlQ29tcGFyYXRvciwgb3B0aW9ucylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICApXG4gIH0pXG59XG5cbi8vIHRha2UgYSBzZXQgb2YgY29tcGFyYXRvcnMgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoZXJlXG4vLyBleGlzdHMgYSB2ZXJzaW9uIHdoaWNoIGNhbiBzYXRpc2Z5IGl0XG5mdW5jdGlvbiBpc1NhdGlzZmlhYmxlIChjb21wYXJhdG9ycywgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0ID0gdHJ1ZVxuICB2YXIgcmVtYWluaW5nQ29tcGFyYXRvcnMgPSBjb21wYXJhdG9ycy5zbGljZSgpXG4gIHZhciB0ZXN0Q29tcGFyYXRvciA9IHJlbWFpbmluZ0NvbXBhcmF0b3JzLnBvcCgpXG5cbiAgd2hpbGUgKHJlc3VsdCAmJiByZW1haW5pbmdDb21wYXJhdG9ycy5sZW5ndGgpIHtcbiAgICByZXN1bHQgPSByZW1haW5pbmdDb21wYXJhdG9ycy5ldmVyeShmdW5jdGlvbiAob3RoZXJDb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gdGVzdENvbXBhcmF0b3IuaW50ZXJzZWN0cyhvdGhlckNvbXBhcmF0b3IsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIHRlc3RDb21wYXJhdG9yID0gcmVtYWluaW5nQ29tcGFyYXRvcnMucG9wKClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLy8gTW9zdGx5IGp1c3QgZm9yIHRlc3RpbmcgYW5kIGxlZ2FjeSBBUEkgcmVhc29uc1xuZXhwb3J0cy50b0NvbXBhcmF0b3JzID0gdG9Db21wYXJhdG9yc1xuZnVuY3Rpb24gdG9Db21wYXJhdG9ycyAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucykuc2V0Lm1hcChmdW5jdGlvbiAoY29tcCkge1xuICAgIHJldHVybiBjb21wLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMudmFsdWVcbiAgICB9KS5qb2luKCcgJykudHJpbSgpLnNwbGl0KCcgJylcbiAgfSlcbn1cblxuLy8gY29tcHJpc2VkIG9mIHhyYW5nZXMsIHRpbGRlcywgc3RhcnMsIGFuZCBndGx0J3MgYXQgdGhpcyBwb2ludC5cbi8vIGFscmVhZHkgcmVwbGFjZWQgdGhlIGh5cGhlbiByYW5nZXNcbi8vIHR1cm4gaW50byBhIHNldCBvZiBKVVNUIGNvbXBhcmF0b3JzLlxuZnVuY3Rpb24gcGFyc2VDb21wYXJhdG9yIChjb21wLCBvcHRpb25zKSB7XG4gIGRlYnVnKCdjb21wJywgY29tcCwgb3B0aW9ucylcbiAgY29tcCA9IHJlcGxhY2VDYXJldHMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ2NhcmV0JywgY29tcClcbiAgY29tcCA9IHJlcGxhY2VUaWxkZXMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ3RpbGRlcycsIGNvbXApXG4gIGNvbXAgPSByZXBsYWNlWFJhbmdlcyhjb21wLCBvcHRpb25zKVxuICBkZWJ1ZygneHJhbmdlJywgY29tcClcbiAgY29tcCA9IHJlcGxhY2VTdGFycyhjb21wLCBvcHRpb25zKVxuICBkZWJ1Zygnc3RhcnMnLCBjb21wKVxuICByZXR1cm4gY29tcFxufVxuXG5mdW5jdGlvbiBpc1ggKGlkKSB7XG4gIHJldHVybiAhaWQgfHwgaWQudG9Mb3dlckNhc2UoKSA9PT0gJ3gnIHx8IGlkID09PSAnKidcbn1cblxuLy8gfiwgfj4gLS0+ICogKGFueSwga2luZGEgc2lsbHkpXG4vLyB+MiwgfjIueCwgfjIueC54LCB+PjIsIH4+Mi54IH4+Mi54LnggLS0+ID49Mi4wLjAgPDMuMC4wXG4vLyB+Mi4wLCB+Mi4wLngsIH4+Mi4wLCB+PjIuMC54IC0tPiA+PTIuMC4wIDwyLjEuMFxuLy8gfjEuMiwgfjEuMi54LCB+PjEuMiwgfj4xLjIueCAtLT4gPj0xLjIuMCA8MS4zLjBcbi8vIH4xLjIuMywgfj4xLjIuMyAtLT4gPj0xLjIuMyA8MS4zLjBcbi8vIH4xLjIuMCwgfj4xLjIuMCAtLT4gPj0xLjIuMCA8MS4zLjBcbmZ1bmN0aW9uIHJlcGxhY2VUaWxkZXMgKGNvbXAsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGNvbXAudHJpbSgpLnNwbGl0KC9cXHMrLykubWFwKGZ1bmN0aW9uIChjb21wKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VUaWxkZShjb21wLCBvcHRpb25zKVxuICB9KS5qb2luKCcgJylcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVRpbGRlIChjb21wLCBvcHRpb25zKSB7XG4gIHZhciByID0gb3B0aW9ucy5sb29zZSA/IHNhZmVSZVt0LlRJTERFTE9PU0VdIDogc2FmZVJlW3QuVElMREVdXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgZnVuY3Rpb24gKF8sIE0sIG0sIHAsIHByKSB7XG4gICAgZGVidWcoJ3RpbGRlJywgY29tcCwgXywgTSwgbSwgcCwgcHIpXG4gICAgdmFyIHJldFxuXG4gICAgaWYgKGlzWChNKSkge1xuICAgICAgcmV0ID0gJydcbiAgICB9IGVsc2UgaWYgKGlzWChtKSkge1xuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLjAuMCA8JyArICgrTSArIDEpICsgJy4wLjAnXG4gICAgfSBlbHNlIGlmIChpc1gocCkpIHtcbiAgICAgIC8vIH4xLjIgPT0gPj0xLjIuMCA8MS4zLjBcbiAgICAgIHJldCA9ICc+PScgKyBNICsgJy4nICsgbSArICcuMCA8JyArIE0gKyAnLicgKyAoK20gKyAxKSArICcuMCdcbiAgICB9IGVsc2UgaWYgKHByKSB7XG4gICAgICBkZWJ1ZygncmVwbGFjZVRpbGRlIHByJywgcHIpXG4gICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLicgKyBwICsgJy0nICsgcHIgK1xuICAgICAgICAgICAgJyA8JyArIE0gKyAnLicgKyAoK20gKyAxKSArICcuMCdcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gfjEuMi4zID09ID49MS4yLjMgPDEuMy4wXG4gICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLicgKyBwICtcbiAgICAgICAgICAgICcgPCcgKyBNICsgJy4nICsgKCttICsgMSkgKyAnLjAnXG4gICAgfVxuXG4gICAgZGVidWcoJ3RpbGRlIHJldHVybicsIHJldClcbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbi8vIF4gLS0+ICogKGFueSwga2luZGEgc2lsbHkpXG4vLyBeMiwgXjIueCwgXjIueC54IC0tPiA+PTIuMC4wIDwzLjAuMFxuLy8gXjIuMCwgXjIuMC54IC0tPiA+PTIuMC4wIDwzLjAuMFxuLy8gXjEuMiwgXjEuMi54IC0tPiA+PTEuMi4wIDwyLjAuMFxuLy8gXjEuMi4zIC0tPiA+PTEuMi4zIDwyLjAuMFxuLy8gXjEuMi4wIC0tPiA+PTEuMi4wIDwyLjAuMFxuZnVuY3Rpb24gcmVwbGFjZUNhcmV0cyAoY29tcCwgb3B0aW9ucykge1xuICByZXR1cm4gY29tcC50cmltKCkuc3BsaXQoL1xccysvKS5tYXAoZnVuY3Rpb24gKGNvbXApIHtcbiAgICByZXR1cm4gcmVwbGFjZUNhcmV0KGNvbXAsIG9wdGlvbnMpXG4gIH0pLmpvaW4oJyAnKVxufVxuXG5mdW5jdGlvbiByZXBsYWNlQ2FyZXQgKGNvbXAsIG9wdGlvbnMpIHtcbiAgZGVidWcoJ2NhcmV0JywgY29tcCwgb3B0aW9ucylcbiAgdmFyIHIgPSBvcHRpb25zLmxvb3NlID8gc2FmZVJlW3QuQ0FSRVRMT09TRV0gOiBzYWZlUmVbdC5DQVJFVF1cbiAgcmV0dXJuIGNvbXAucmVwbGFjZShyLCBmdW5jdGlvbiAoXywgTSwgbSwgcCwgcHIpIHtcbiAgICBkZWJ1ZygnY2FyZXQnLCBjb21wLCBfLCBNLCBtLCBwLCBwcilcbiAgICB2YXIgcmV0XG5cbiAgICBpZiAoaXNYKE0pKSB7XG4gICAgICByZXQgPSAnJ1xuICAgIH0gZWxzZSBpZiAoaXNYKG0pKSB7XG4gICAgICByZXQgPSAnPj0nICsgTSArICcuMC4wIDwnICsgKCtNICsgMSkgKyAnLjAuMCdcbiAgICB9IGVsc2UgaWYgKGlzWChwKSkge1xuICAgICAgaWYgKE0gPT09ICcwJykge1xuICAgICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLjAgPCcgKyBNICsgJy4nICsgKCttICsgMSkgKyAnLjAnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLjAgPCcgKyAoK00gKyAxKSArICcuMC4wJ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHIpIHtcbiAgICAgIGRlYnVnKCdyZXBsYWNlQ2FyZXQgcHInLCBwcilcbiAgICAgIGlmIChNID09PSAnMCcpIHtcbiAgICAgICAgaWYgKG0gPT09ICcwJykge1xuICAgICAgICAgIHJldCA9ICc+PScgKyBNICsgJy4nICsgbSArICcuJyArIHAgKyAnLScgKyBwciArXG4gICAgICAgICAgICAgICAgJyA8JyArIE0gKyAnLicgKyBtICsgJy4nICsgKCtwICsgMSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLicgKyBwICsgJy0nICsgcHIgK1xuICAgICAgICAgICAgICAgICcgPCcgKyBNICsgJy4nICsgKCttICsgMSkgKyAnLjAnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9ICc+PScgKyBNICsgJy4nICsgbSArICcuJyArIHAgKyAnLScgKyBwciArXG4gICAgICAgICAgICAgICcgPCcgKyAoK00gKyAxKSArICcuMC4wJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Zygnbm8gcHInKVxuICAgICAgaWYgKE0gPT09ICcwJykge1xuICAgICAgICBpZiAobSA9PT0gJzAnKSB7XG4gICAgICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4nICsgcCArXG4gICAgICAgICAgICAgICAgJyA8JyArIE0gKyAnLicgKyBtICsgJy4nICsgKCtwICsgMSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLicgKyBwICtcbiAgICAgICAgICAgICAgICAnIDwnICsgTSArICcuJyArICgrbSArIDEpICsgJy4wJ1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSAnPj0nICsgTSArICcuJyArIG0gKyAnLicgKyBwICtcbiAgICAgICAgICAgICAgJyA8JyArICgrTSArIDEpICsgJy4wLjAnXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVidWcoJ2NhcmV0IHJldHVybicsIHJldClcbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VYUmFuZ2VzIChjb21wLCBvcHRpb25zKSB7XG4gIGRlYnVnKCdyZXBsYWNlWFJhbmdlcycsIGNvbXAsIG9wdGlvbnMpXG4gIHJldHVybiBjb21wLnNwbGl0KC9cXHMrLykubWFwKGZ1bmN0aW9uIChjb21wKSB7XG4gICAgcmV0dXJuIHJlcGxhY2VYUmFuZ2UoY29tcCwgb3B0aW9ucylcbiAgfSkuam9pbignICcpXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VYUmFuZ2UgKGNvbXAsIG9wdGlvbnMpIHtcbiAgY29tcCA9IGNvbXAudHJpbSgpXG4gIHZhciByID0gb3B0aW9ucy5sb29zZSA/IHNhZmVSZVt0LlhSQU5HRUxPT1NFXSA6IHNhZmVSZVt0LlhSQU5HRV1cbiAgcmV0dXJuIGNvbXAucmVwbGFjZShyLCBmdW5jdGlvbiAocmV0LCBndGx0LCBNLCBtLCBwLCBwcikge1xuICAgIGRlYnVnKCd4UmFuZ2UnLCBjb21wLCByZXQsIGd0bHQsIE0sIG0sIHAsIHByKVxuICAgIHZhciB4TSA9IGlzWChNKVxuICAgIHZhciB4bSA9IHhNIHx8IGlzWChtKVxuICAgIHZhciB4cCA9IHhtIHx8IGlzWChwKVxuICAgIHZhciBhbnlYID0geHBcblxuICAgIGlmIChndGx0ID09PSAnPScgJiYgYW55WCkge1xuICAgICAgZ3RsdCA9ICcnXG4gICAgfVxuXG4gICAgLy8gaWYgd2UncmUgaW5jbHVkaW5nIHByZXJlbGVhc2VzIGluIHRoZSBtYXRjaCwgdGhlbiB3ZSBuZWVkXG4gICAgLy8gdG8gZml4IHRoaXMgdG8gLTAsIHRoZSBsb3dlc3QgcG9zc2libGUgcHJlcmVsZWFzZSB2YWx1ZVxuICAgIHByID0gb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSA/ICctMCcgOiAnJ1xuXG4gICAgaWYgKHhNKSB7XG4gICAgICBpZiAoZ3RsdCA9PT0gJz4nIHx8IGd0bHQgPT09ICc8Jykge1xuICAgICAgICAvLyBub3RoaW5nIGlzIGFsbG93ZWRcbiAgICAgICAgcmV0ID0gJzwwLjAuMC0wJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm90aGluZyBpcyBmb3JiaWRkZW5cbiAgICAgICAgcmV0ID0gJyonXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChndGx0ICYmIGFueVgpIHtcbiAgICAgIC8vIHdlIGtub3cgcGF0Y2ggaXMgYW4geCwgYmVjYXVzZSB3ZSBoYXZlIGFueSB4IGF0IGFsbC5cbiAgICAgIC8vIHJlcGxhY2UgWCB3aXRoIDBcbiAgICAgIGlmICh4bSkge1xuICAgICAgICBtID0gMFxuICAgICAgfVxuICAgICAgcCA9IDBcblxuICAgICAgaWYgKGd0bHQgPT09ICc+Jykge1xuICAgICAgICAvLyA+MSA9PiA+PTIuMC4wXG4gICAgICAgIC8vID4xLjIgPT4gPj0xLjMuMFxuICAgICAgICAvLyA+MS4yLjMgPT4gPj0gMS4yLjRcbiAgICAgICAgZ3RsdCA9ICc+PSdcbiAgICAgICAgaWYgKHhtKSB7XG4gICAgICAgICAgTSA9ICtNICsgMVxuICAgICAgICAgIG0gPSAwXG4gICAgICAgICAgcCA9IDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtID0gK20gKyAxXG4gICAgICAgICAgcCA9IDBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChndGx0ID09PSAnPD0nKSB7XG4gICAgICAgIC8vIDw9MC43LnggaXMgYWN0dWFsbHkgPDAuOC4wLCBzaW5jZSBhbnkgMC43Lnggc2hvdWxkXG4gICAgICAgIC8vIHBhc3MuICBTaW1pbGFybHksIDw9Ny54IGlzIGFjdHVhbGx5IDw4LjAuMCwgZXRjLlxuICAgICAgICBndGx0ID0gJzwnXG4gICAgICAgIGlmICh4bSkge1xuICAgICAgICAgIE0gPSArTSArIDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtID0gK20gKyAxXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gZ3RsdCArIE0gKyAnLicgKyBtICsgJy4nICsgcCArIHByXG4gICAgfSBlbHNlIGlmICh4bSkge1xuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLjAuMCcgKyBwciArICcgPCcgKyAoK00gKyAxKSArICcuMC4wJyArIHByXG4gICAgfSBlbHNlIGlmICh4cCkge1xuICAgICAgcmV0ID0gJz49JyArIE0gKyAnLicgKyBtICsgJy4wJyArIHByICtcbiAgICAgICAgJyA8JyArIE0gKyAnLicgKyAoK20gKyAxKSArICcuMCcgKyBwclxuICAgIH1cblxuICAgIGRlYnVnKCd4UmFuZ2UgcmV0dXJuJywgcmV0KVxuXG4gICAgcmV0dXJuIHJldFxuICB9KVxufVxuXG4vLyBCZWNhdXNlICogaXMgQU5ELWVkIHdpdGggZXZlcnl0aGluZyBlbHNlIGluIHRoZSBjb21wYXJhdG9yLFxuLy8gYW5kICcnIG1lYW5zIFwiYW55IHZlcnNpb25cIiwganVzdCByZW1vdmUgdGhlICpzIGVudGlyZWx5LlxuZnVuY3Rpb24gcmVwbGFjZVN0YXJzIChjb21wLCBvcHRpb25zKSB7XG4gIGRlYnVnKCdyZXBsYWNlU3RhcnMnLCBjb21wLCBvcHRpb25zKVxuICAvLyBMb29zZW5lc3MgaXMgaWdub3JlZCBoZXJlLiAgc3RhciBpcyBhbHdheXMgYXMgbG9vc2UgYXMgaXQgZ2V0cyFcbiAgcmV0dXJuIGNvbXAudHJpbSgpLnJlcGxhY2Uoc2FmZVJlW3QuU1RBUl0sICcnKVxufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHBhc3NlZCB0byBzdHJpbmcucmVwbGFjZShyZVt0LkhZUEhFTlJBTkdFXSlcbi8vIE0sIG0sIHBhdGNoLCBwcmVyZWxlYXNlLCBidWlsZFxuLy8gMS4yIC0gMy40LjUgPT4gPj0xLjIuMCA8PTMuNC41XG4vLyAxLjIuMyAtIDMuNCA9PiA+PTEuMi4wIDwzLjUuMCBBbnkgMy40Lnggd2lsbCBkb1xuLy8gMS4yIC0gMy40ID0+ID49MS4yLjAgPDMuNS4wXG5mdW5jdGlvbiBoeXBoZW5SZXBsYWNlICgkMCxcbiAgZnJvbSwgZk0sIGZtLCBmcCwgZnByLCBmYixcbiAgdG8sIHRNLCB0bSwgdHAsIHRwciwgdGIpIHtcbiAgaWYgKGlzWChmTSkpIHtcbiAgICBmcm9tID0gJydcbiAgfSBlbHNlIGlmIChpc1goZm0pKSB7XG4gICAgZnJvbSA9ICc+PScgKyBmTSArICcuMC4wJ1xuICB9IGVsc2UgaWYgKGlzWChmcCkpIHtcbiAgICBmcm9tID0gJz49JyArIGZNICsgJy4nICsgZm0gKyAnLjAnXG4gIH0gZWxzZSB7XG4gICAgZnJvbSA9ICc+PScgKyBmcm9tXG4gIH1cblxuICBpZiAoaXNYKHRNKSkge1xuICAgIHRvID0gJydcbiAgfSBlbHNlIGlmIChpc1godG0pKSB7XG4gICAgdG8gPSAnPCcgKyAoK3RNICsgMSkgKyAnLjAuMCdcbiAgfSBlbHNlIGlmIChpc1godHApKSB7XG4gICAgdG8gPSAnPCcgKyB0TSArICcuJyArICgrdG0gKyAxKSArICcuMCdcbiAgfSBlbHNlIGlmICh0cHIpIHtcbiAgICB0byA9ICc8PScgKyB0TSArICcuJyArIHRtICsgJy4nICsgdHAgKyAnLScgKyB0cHJcbiAgfSBlbHNlIHtcbiAgICB0byA9ICc8PScgKyB0b1xuICB9XG5cbiAgcmV0dXJuIChmcm9tICsgJyAnICsgdG8pLnRyaW0oKVxufVxuXG4vLyBpZiBBTlkgb2YgdGhlIHNldHMgbWF0Y2ggQUxMIG9mIGl0cyBjb21wYXJhdG9ycywgdGhlbiBwYXNzXG5SYW5nZS5wcm90b3R5cGUudGVzdCA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gIGlmICghdmVyc2lvbikge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICB2ZXJzaW9uID0gbmV3IFNlbVZlcih2ZXJzaW9uLCB0aGlzLm9wdGlvbnMpXG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zZXQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGVzdFNldCh0aGlzLnNldFtpXSwgdmVyc2lvbiwgdGhpcy5vcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHRlc3RTZXQgKHNldCwgdmVyc2lvbiwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgIGlmICghc2V0W2ldLnRlc3QodmVyc2lvbikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGlmICh2ZXJzaW9uLnByZXJlbGVhc2UubGVuZ3RoICYmICFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlKSB7XG4gICAgLy8gRmluZCB0aGUgc2V0IG9mIHZlcnNpb25zIHRoYXQgYXJlIGFsbG93ZWQgdG8gaGF2ZSBwcmVyZWxlYXNlc1xuICAgIC8vIEZvciBleGFtcGxlLCBeMS4yLjMtcHIuMSBkZXN1Z2FycyB0byA+PTEuMi4zLXByLjEgPDIuMC4wXG4gICAgLy8gVGhhdCBzaG91bGQgYWxsb3cgYDEuMi4zLXByLjJgIHRvIHBhc3MuXG4gICAgLy8gSG93ZXZlciwgYDEuMi40LWFscGhhLm5vdHJlYWR5YCBzaG91bGQgTk9UIGJlIGFsbG93ZWQsXG4gICAgLy8gZXZlbiB0aG91Z2ggaXQncyB3aXRoaW4gdGhlIHJhbmdlIHNldCBieSB0aGUgY29tcGFyYXRvcnMuXG4gICAgZm9yIChpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgICAgZGVidWcoc2V0W2ldLnNlbXZlcilcbiAgICAgIGlmIChzZXRbaV0uc2VtdmVyID09PSBBTlkpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKHNldFtpXS5zZW12ZXIucHJlcmVsZWFzZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBhbGxvd2VkID0gc2V0W2ldLnNlbXZlclxuICAgICAgICBpZiAoYWxsb3dlZC5tYWpvciA9PT0gdmVyc2lvbi5tYWpvciAmJlxuICAgICAgICAgICAgYWxsb3dlZC5taW5vciA9PT0gdmVyc2lvbi5taW5vciAmJlxuICAgICAgICAgICAgYWxsb3dlZC5wYXRjaCA9PT0gdmVyc2lvbi5wYXRjaCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWZXJzaW9uIGhhcyBhIC1wcmUsIGJ1dCBpdCdzIG5vdCBvbmUgb2YgdGhlIG9uZXMgd2UgbGlrZS5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydHMuc2F0aXNmaWVzID0gc2F0aXNmaWVzXG5mdW5jdGlvbiBzYXRpc2ZpZXMgKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSB7XG4gIHRyeSB7XG4gICAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHJhbmdlLnRlc3QodmVyc2lvbilcbn1cblxuZXhwb3J0cy5tYXhTYXRpc2Z5aW5nID0gbWF4U2F0aXNmeWluZ1xuZnVuY3Rpb24gbWF4U2F0aXNmeWluZyAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSB7XG4gIHZhciBtYXggPSBudWxsXG4gIHZhciBtYXhTViA9IG51bGxcbiAgdHJ5IHtcbiAgICB2YXIgcmFuZ2VPYmogPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB2ZXJzaW9ucy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgaWYgKHJhbmdlT2JqLnRlc3QodikpIHtcbiAgICAgIC8vIHNhdGlzZmllcyh2LCByYW5nZSwgb3B0aW9ucylcbiAgICAgIGlmICghbWF4IHx8IG1heFNWLmNvbXBhcmUodikgPT09IC0xKSB7XG4gICAgICAgIC8vIGNvbXBhcmUobWF4LCB2LCB0cnVlKVxuICAgICAgICBtYXggPSB2XG4gICAgICAgIG1heFNWID0gbmV3IFNlbVZlcihtYXgsIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWF4XG59XG5cbmV4cG9ydHMubWluU2F0aXNmeWluZyA9IG1pblNhdGlzZnlpbmdcbmZ1bmN0aW9uIG1pblNhdGlzZnlpbmcgKHZlcnNpb25zLCByYW5nZSwgb3B0aW9ucykge1xuICB2YXIgbWluID0gbnVsbFxuICB2YXIgbWluU1YgPSBudWxsXG4gIHRyeSB7XG4gICAgdmFyIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1pbiB8fCBtaW5TVi5jb21wYXJlKHYpID09PSAxKSB7XG4gICAgICAgIC8vIGNvbXBhcmUobWluLCB2LCB0cnVlKVxuICAgICAgICBtaW4gPSB2XG4gICAgICAgIG1pblNWID0gbmV3IFNlbVZlcihtaW4sIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWluXG59XG5cbmV4cG9ydHMubWluVmVyc2lvbiA9IG1pblZlcnNpb25cbmZ1bmN0aW9uIG1pblZlcnNpb24gKHJhbmdlLCBsb29zZSkge1xuICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgbG9vc2UpXG5cbiAgdmFyIG1pbnZlciA9IG5ldyBTZW1WZXIoJzAuMC4wJylcbiAgaWYgKHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIG1pbnZlciA9IG5ldyBTZW1WZXIoJzAuMC4wLTAnKVxuICBpZiAocmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgbWludmVyID0gbnVsbFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlLnNldC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBjb21wYXJhdG9ycyA9IHJhbmdlLnNldFtpXVxuXG4gICAgY29tcGFyYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAoY29tcGFyYXRvcikge1xuICAgICAgLy8gQ2xvbmUgdG8gYXZvaWQgbWFuaXB1bGF0aW5nIHRoZSBjb21wYXJhdG9yJ3Mgc2VtdmVyIG9iamVjdC5cbiAgICAgIHZhciBjb21wdmVyID0gbmV3IFNlbVZlcihjb21wYXJhdG9yLnNlbXZlci52ZXJzaW9uKVxuICAgICAgc3dpdGNoIChjb21wYXJhdG9yLm9wZXJhdG9yKSB7XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgIGlmIChjb21wdmVyLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb21wdmVyLnBhdGNoKytcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcHZlci5wcmVyZWxlYXNlLnB1c2goMClcbiAgICAgICAgICB9XG4gICAgICAgICAgY29tcHZlci5yYXcgPSBjb21wdmVyLmZvcm1hdCgpXG4gICAgICAgICAgLyogZmFsbHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgY2FzZSAnPj0nOlxuICAgICAgICAgIGlmICghbWludmVyIHx8IGd0KG1pbnZlciwgY29tcHZlcikpIHtcbiAgICAgICAgICAgIG1pbnZlciA9IGNvbXB2ZXJcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgICAvKiBJZ25vcmUgbWF4aW11bSB2ZXJzaW9ucyAqL1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIG9wZXJhdGlvbjogJyArIGNvbXBhcmF0b3Iub3BlcmF0b3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlmIChtaW52ZXIgJiYgcmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0cy52YWxpZFJhbmdlID0gdmFsaWRSYW5nZVxuZnVuY3Rpb24gdmFsaWRSYW5nZSAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICAvLyBSZXR1cm4gJyonIGluc3RlYWQgb2YgJycgc28gdGhhdCB0cnV0aGluZXNzIHdvcmtzLlxuICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBpZiBpdCdzIGludmFsaWQgYW55d2F5XG4gICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucykucmFuZ2UgfHwgJyonXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vLyBEZXRlcm1pbmUgaWYgdmVyc2lvbiBpcyBsZXNzIHRoYW4gYWxsIHRoZSB2ZXJzaW9ucyBwb3NzaWJsZSBpbiB0aGUgcmFuZ2VcbmV4cG9ydHMubHRyID0gbHRyXG5mdW5jdGlvbiBsdHIgKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvdXRzaWRlKHZlcnNpb24sIHJhbmdlLCAnPCcsIG9wdGlvbnMpXG59XG5cbi8vIERldGVybWluZSBpZiB2ZXJzaW9uIGlzIGdyZWF0ZXIgdGhhbiBhbGwgdGhlIHZlcnNpb25zIHBvc3NpYmxlIGluIHRoZSByYW5nZS5cbmV4cG9ydHMuZ3RyID0gZ3RyXG5mdW5jdGlvbiBndHIgKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvdXRzaWRlKHZlcnNpb24sIHJhbmdlLCAnPicsIG9wdGlvbnMpXG59XG5cbmV4cG9ydHMub3V0c2lkZSA9IG91dHNpZGVcbmZ1bmN0aW9uIG91dHNpZGUgKHZlcnNpb24sIHJhbmdlLCBoaWxvLCBvcHRpb25zKSB7XG4gIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuXG4gIHZhciBndGZuLCBsdGVmbiwgbHRmbiwgY29tcCwgZWNvbXBcbiAgc3dpdGNoIChoaWxvKSB7XG4gICAgY2FzZSAnPic6XG4gICAgICBndGZuID0gZ3RcbiAgICAgIGx0ZWZuID0gbHRlXG4gICAgICBsdGZuID0gbHRcbiAgICAgIGNvbXAgPSAnPidcbiAgICAgIGVjb21wID0gJz49J1xuICAgICAgYnJlYWtcbiAgICBjYXNlICc8JzpcbiAgICAgIGd0Zm4gPSBsdFxuICAgICAgbHRlZm4gPSBndGVcbiAgICAgIGx0Zm4gPSBndFxuICAgICAgY29tcCA9ICc8J1xuICAgICAgZWNvbXAgPSAnPD0nXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNdXN0IHByb3ZpZGUgYSBoaWxvIHZhbCBvZiBcIjxcIiBvciBcIj5cIicpXG4gIH1cblxuICAvLyBJZiBpdCBzYXRpc2lmZXMgdGhlIHJhbmdlIGl0IGlzIG5vdCBvdXRzaWRlXG4gIGlmIChzYXRpc2ZpZXModmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBGcm9tIG5vdyBvbiwgdmFyaWFibGUgdGVybXMgYXJlIGFzIGlmIHdlJ3JlIGluIFwiZ3RyXCIgbW9kZS5cbiAgLy8gYnV0IG5vdGUgdGhhdCBldmVyeXRoaW5nIGlzIGZsaXBwZWQgZm9yIHRoZSBcImx0clwiIGZ1bmN0aW9uLlxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2Uuc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGNvbXBhcmF0b3JzID0gcmFuZ2Uuc2V0W2ldXG5cbiAgICB2YXIgaGlnaCA9IG51bGxcbiAgICB2YXIgbG93ID0gbnVsbFxuXG4gICAgY29tcGFyYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAoY29tcGFyYXRvcikge1xuICAgICAgaWYgKGNvbXBhcmF0b3Iuc2VtdmVyID09PSBBTlkpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IG5ldyBDb21wYXJhdG9yKCc+PTAuMC4wJylcbiAgICAgIH1cbiAgICAgIGhpZ2ggPSBoaWdoIHx8IGNvbXBhcmF0b3JcbiAgICAgIGxvdyA9IGxvdyB8fCBjb21wYXJhdG9yXG4gICAgICBpZiAoZ3Rmbihjb21wYXJhdG9yLnNlbXZlciwgaGlnaC5zZW12ZXIsIG9wdGlvbnMpKSB7XG4gICAgICAgIGhpZ2ggPSBjb21wYXJhdG9yXG4gICAgICB9IGVsc2UgaWYgKGx0Zm4oY29tcGFyYXRvci5zZW12ZXIsIGxvdy5zZW12ZXIsIG9wdGlvbnMpKSB7XG4gICAgICAgIGxvdyA9IGNvbXBhcmF0b3JcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gSWYgdGhlIGVkZ2UgdmVyc2lvbiBjb21wYXJhdG9yIGhhcyBhIG9wZXJhdG9yIHRoZW4gb3VyIHZlcnNpb25cbiAgICAvLyBpc24ndCBvdXRzaWRlIGl0XG4gICAgaWYgKGhpZ2gub3BlcmF0b3IgPT09IGNvbXAgfHwgaGlnaC5vcGVyYXRvciA9PT0gZWNvbXApIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIElmIHRoZSBsb3dlc3QgdmVyc2lvbiBjb21wYXJhdG9yIGhhcyBhbiBvcGVyYXRvciBhbmQgb3VyIHZlcnNpb25cbiAgICAvLyBpcyBsZXNzIHRoYW4gaXQgdGhlbiBpdCBpc24ndCBoaWdoZXIgdGhhbiB0aGUgcmFuZ2VcbiAgICBpZiAoKCFsb3cub3BlcmF0b3IgfHwgbG93Lm9wZXJhdG9yID09PSBjb21wKSAmJlxuICAgICAgICBsdGVmbih2ZXJzaW9uLCBsb3cuc2VtdmVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmIChsb3cub3BlcmF0b3IgPT09IGVjb21wICYmIGx0Zm4odmVyc2lvbiwgbG93LnNlbXZlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnRzLnByZXJlbGVhc2UgPSBwcmVyZWxlYXNlXG5mdW5jdGlvbiBwcmVyZWxlYXNlICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gIHZhciBwYXJzZWQgPSBwYXJzZSh2ZXJzaW9uLCBvcHRpb25zKVxuICByZXR1cm4gKHBhcnNlZCAmJiBwYXJzZWQucHJlcmVsZWFzZS5sZW5ndGgpID8gcGFyc2VkLnByZXJlbGVhc2UgOiBudWxsXG59XG5cbmV4cG9ydHMuaW50ZXJzZWN0cyA9IGludGVyc2VjdHNcbmZ1bmN0aW9uIGludGVyc2VjdHMgKHIxLCByMiwgb3B0aW9ucykge1xuICByMSA9IG5ldyBSYW5nZShyMSwgb3B0aW9ucylcbiAgcjIgPSBuZXcgUmFuZ2UocjIsIG9wdGlvbnMpXG4gIHJldHVybiByMS5pbnRlcnNlY3RzKHIyKVxufVxuXG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZVxuZnVuY3Rpb24gY29lcmNlICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gIGlmICh2ZXJzaW9uIGluc3RhbmNlb2YgU2VtVmVyKSB7XG4gICAgcmV0dXJuIHZlcnNpb25cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ251bWJlcicpIHtcbiAgICB2ZXJzaW9uID0gU3RyaW5nKHZlcnNpb24pXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIG1hdGNoID0gbnVsbFxuICBpZiAoIW9wdGlvbnMucnRsKSB7XG4gICAgbWF0Y2ggPSB2ZXJzaW9uLm1hdGNoKHNhZmVSZVt0LkNPRVJDRV0pXG4gIH0gZWxzZSB7XG4gICAgLy8gRmluZCB0aGUgcmlnaHQtbW9zdCBjb2VyY2libGUgc3RyaW5nIHRoYXQgZG9lcyBub3Qgc2hhcmVcbiAgICAvLyBhIHRlcm1pbnVzIHdpdGggYSBtb3JlIGxlZnQtd2FyZCBjb2VyY2libGUgc3RyaW5nLlxuICAgIC8vIEVnLCAnMS4yLjMuNCcgd2FudHMgdG8gY29lcmNlICcyLjMuNCcsIG5vdCAnMy40JyBvciAnNCdcbiAgICAvL1xuICAgIC8vIFdhbGsgdGhyb3VnaCB0aGUgc3RyaW5nIGNoZWNraW5nIHdpdGggYSAvZyByZWdleHBcbiAgICAvLyBNYW51YWxseSBzZXQgdGhlIGluZGV4IHNvIGFzIHRvIHBpY2sgdXAgb3ZlcmxhcHBpbmcgbWF0Y2hlcy5cbiAgICAvLyBTdG9wIHdoZW4gd2UgZ2V0IGEgbWF0Y2ggdGhhdCBlbmRzIGF0IHRoZSBzdHJpbmcgZW5kLCBzaW5jZSBub1xuICAgIC8vIGNvZXJjaWJsZSBzdHJpbmcgY2FuIGJlIG1vcmUgcmlnaHQtd2FyZCB3aXRob3V0IHRoZSBzYW1lIHRlcm1pbnVzLlxuICAgIHZhciBuZXh0XG4gICAgd2hpbGUgKChuZXh0ID0gc2FmZVJlW3QuQ09FUkNFUlRMXS5leGVjKHZlcnNpb24pKSAmJlxuICAgICAgKCFtYXRjaCB8fCBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCAhPT0gdmVyc2lvbi5sZW5ndGgpXG4gICAgKSB7XG4gICAgICBpZiAoIW1hdGNoIHx8XG4gICAgICAgICAgbmV4dC5pbmRleCArIG5leHRbMF0ubGVuZ3RoICE9PSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCkge1xuICAgICAgICBtYXRjaCA9IG5leHRcbiAgICAgIH1cbiAgICAgIHNhZmVSZVt0LkNPRVJDRVJUTF0ubGFzdEluZGV4ID0gbmV4dC5pbmRleCArIG5leHRbMV0ubGVuZ3RoICsgbmV4dFsyXS5sZW5ndGhcbiAgICB9XG4gICAgLy8gbGVhdmUgaXQgaW4gYSBjbGVhbiBzdGF0ZVxuICAgIHNhZmVSZVt0LkNPRVJDRVJUTF0ubGFzdEluZGV4ID0gLTFcbiAgfVxuXG4gIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4gcGFyc2UobWF0Y2hbMl0gK1xuICAgICcuJyArIChtYXRjaFszXSB8fCAnMCcpICtcbiAgICAnLicgKyAobWF0Y2hbNF0gfHwgJzAnKSwgb3B0aW9ucylcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/node_modules/semver/semver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/plugins.js":
/*!*****************************************!*\
  !*** ./node_modules/hardhat/plugins.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HARDHAT_NETWORK_NAME = exports.lazyFunction = exports.lazyObject = exports.NomicLabsHardhatPluginError = exports.HardhatPluginError = exports.ProviderWrapper = void 0;\nvar wrapper_1 = __webpack_require__(/*! ./internal/core/providers/wrapper */ \"(ssr)/./node_modules/hardhat/internal/core/providers/wrapper.js\");\nObject.defineProperty(exports, \"ProviderWrapper\", ({ enumerable: true, get: function () { return wrapper_1.ProviderWrapper; } }));\nvar errors_1 = __webpack_require__(/*! ./internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nObject.defineProperty(exports, \"HardhatPluginError\", ({ enumerable: true, get: function () { return errors_1.HardhatPluginError; } }));\nObject.defineProperty(exports, \"NomicLabsHardhatPluginError\", ({ enumerable: true, get: function () { return errors_1.NomicLabsHardhatPluginError; } }));\nvar lazy_1 = __webpack_require__(/*! ./internal/util/lazy */ \"(ssr)/./node_modules/hardhat/internal/util/lazy.js\");\nObject.defineProperty(exports, \"lazyObject\", ({ enumerable: true, get: function () { return lazy_1.lazyObject; } }));\nObject.defineProperty(exports, \"lazyFunction\", ({ enumerable: true, get: function () { return lazy_1.lazyFunction; } }));\nvar constants_1 = __webpack_require__(/*! ./internal/constants */ \"(ssr)/./node_modules/hardhat/internal/constants.js\");\nObject.defineProperty(exports, \"HARDHAT_NETWORK_NAME\", ({ enumerable: true, get: function () { return constants_1.HARDHAT_NETWORK_NAME; } }));\n//# sourceMappingURL=plugins.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9wbHVnaW5zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLG1DQUFtQyxHQUFHLDBCQUEwQixHQUFHLHVCQUF1QjtBQUNySyxnQkFBZ0IsbUJBQU8sQ0FBQywwR0FBbUM7QUFDM0QsbURBQWtELEVBQUUscUNBQXFDLHFDQUFxQyxFQUFDO0FBQy9ILGVBQWUsbUJBQU8sQ0FBQyxvRkFBd0I7QUFDL0Msc0RBQXFELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQ3BJLCtEQUE4RCxFQUFFLHFDQUFxQyxnREFBZ0QsRUFBQztBQUN0SixhQUFhLG1CQUFPLENBQUMsZ0ZBQXNCO0FBQzNDLDhDQUE2QyxFQUFFLHFDQUFxQyw2QkFBNkIsRUFBQztBQUNsSCxnREFBK0MsRUFBRSxxQ0FBcUMsK0JBQStCLEVBQUM7QUFDdEgsa0JBQWtCLG1CQUFPLENBQUMsZ0ZBQXNCO0FBQ2hELHdEQUF1RCxFQUFFLHFDQUFxQyw0Q0FBNEMsRUFBQztBQUMzSSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC9wbHVnaW5zLmpzP2VlM2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhBUkRIQVRfTkVUV09SS19OQU1FID0gZXhwb3J0cy5sYXp5RnVuY3Rpb24gPSBleHBvcnRzLmxhenlPYmplY3QgPSBleHBvcnRzLk5vbWljTGFic0hhcmRoYXRQbHVnaW5FcnJvciA9IGV4cG9ydHMuSGFyZGhhdFBsdWdpbkVycm9yID0gZXhwb3J0cy5Qcm92aWRlcldyYXBwZXIgPSB2b2lkIDA7XG52YXIgd3JhcHBlcl8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvY29yZS9wcm92aWRlcnMvd3JhcHBlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByb3ZpZGVyV3JhcHBlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd3JhcHBlcl8xLlByb3ZpZGVyV3JhcHBlcjsgfSB9KTtcbnZhciBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2NvcmUvZXJyb3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSGFyZGhhdFBsdWdpbkVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvcnNfMS5IYXJkaGF0UGx1Z2luRXJyb3I7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb21pY0xhYnNIYXJkaGF0UGx1Z2luRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yc18xLk5vbWljTGFic0hhcmRoYXRQbHVnaW5FcnJvcjsgfSB9KTtcbnZhciBsYXp5XzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC91dGlsL2xhenlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsYXp5T2JqZWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYXp5XzEubGF6eU9iamVjdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxhenlGdW5jdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGF6eV8xLmxhenlGdW5jdGlvbjsgfSB9KTtcbnZhciBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2NvbnN0YW50c1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkhBUkRIQVRfTkVUV09SS19OQU1FXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25zdGFudHNfMS5IQVJESEFUX05FVFdPUktfTkFNRTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWdpbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/plugins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/types/builtin-tasks/compile.js":
/*!*************************************************************!*\
  !*** ./node_modules/hardhat/types/builtin-tasks/compile.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CompilationJobCreationErrorReason = void 0;\nvar CompilationJobCreationErrorReason;\n(function (CompilationJobCreationErrorReason) {\n    CompilationJobCreationErrorReason[\"OTHER_ERROR\"] = \"other\";\n    CompilationJobCreationErrorReason[\"NO_COMPATIBLE_SOLC_VERSION_FOUND\"] = \"no-compatible-solc-version-found\";\n    CompilationJobCreationErrorReason[\"INCOMPATIBLE_OVERRIDEN_SOLC_VERSION\"] = \"incompatible-overriden-solc-version\";\n    CompilationJobCreationErrorReason[\"DIRECTLY_IMPORTS_INCOMPATIBLE_FILE\"] = \"directly-imports-incompatible-file\";\n    CompilationJobCreationErrorReason[\"INDIRECTLY_IMPORTS_INCOMPATIBLE_FILE\"] = \"indirectly-imports-incompatible-file\";\n})(CompilationJobCreationErrorReason = exports.CompilationJobCreationErrorReason || (exports.CompilationJobCreationErrorReason = {}));\n//# sourceMappingURL=compile.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC90eXBlcy9idWlsdGluLXRhc2tzL2NvbXBpbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvRkFBb0YseUNBQXlDLEtBQUs7QUFDbkkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvdHlwZXMvYnVpbHRpbi10YXNrcy9jb21waWxlLmpzP2ZmNmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBpbGF0aW9uSm9iQ3JlYXRpb25FcnJvclJlYXNvbiA9IHZvaWQgMDtcbnZhciBDb21waWxhdGlvbkpvYkNyZWF0aW9uRXJyb3JSZWFzb247XG4oZnVuY3Rpb24gKENvbXBpbGF0aW9uSm9iQ3JlYXRpb25FcnJvclJlYXNvbikge1xuICAgIENvbXBpbGF0aW9uSm9iQ3JlYXRpb25FcnJvclJlYXNvbltcIk9USEVSX0VSUk9SXCJdID0gXCJvdGhlclwiO1xuICAgIENvbXBpbGF0aW9uSm9iQ3JlYXRpb25FcnJvclJlYXNvbltcIk5PX0NPTVBBVElCTEVfU09MQ19WRVJTSU9OX0ZPVU5EXCJdID0gXCJuby1jb21wYXRpYmxlLXNvbGMtdmVyc2lvbi1mb3VuZFwiO1xuICAgIENvbXBpbGF0aW9uSm9iQ3JlYXRpb25FcnJvclJlYXNvbltcIklOQ09NUEFUSUJMRV9PVkVSUklERU5fU09MQ19WRVJTSU9OXCJdID0gXCJpbmNvbXBhdGlibGUtb3ZlcnJpZGVuLXNvbGMtdmVyc2lvblwiO1xuICAgIENvbXBpbGF0aW9uSm9iQ3JlYXRpb25FcnJvclJlYXNvbltcIkRJUkVDVExZX0lNUE9SVFNfSU5DT01QQVRJQkxFX0ZJTEVcIl0gPSBcImRpcmVjdGx5LWltcG9ydHMtaW5jb21wYXRpYmxlLWZpbGVcIjtcbiAgICBDb21waWxhdGlvbkpvYkNyZWF0aW9uRXJyb3JSZWFzb25bXCJJTkRJUkVDVExZX0lNUE9SVFNfSU5DT01QQVRJQkxFX0ZJTEVcIl0gPSBcImluZGlyZWN0bHktaW1wb3J0cy1pbmNvbXBhdGlibGUtZmlsZVwiO1xufSkoQ29tcGlsYXRpb25Kb2JDcmVhdGlvbkVycm9yUmVhc29uID0gZXhwb3J0cy5Db21waWxhdGlvbkpvYkNyZWF0aW9uRXJyb3JSZWFzb24gfHwgKGV4cG9ydHMuQ29tcGlsYXRpb25Kb2JDcmVhdGlvbkVycm9yUmVhc29uID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBpbGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/types/builtin-tasks/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/types/builtin-tasks/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/hardhat/types/builtin-tasks/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./compile */ \"(ssr)/./node_modules/hardhat/types/builtin-tasks/compile.js\"), exports);\n__exportStar(__webpack_require__(/*! ./node */ \"(ssr)/./node_modules/hardhat/types/builtin-tasks/node.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC90eXBlcy9idWlsdGluLXRhc2tzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyw4RUFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsd0VBQVE7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvdHlwZXMvYnVpbHRpbi10YXNrcy9pbmRleC5qcz9hYzllIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29tcGlsZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbm9kZVwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/types/builtin-tasks/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/types/builtin-tasks/node.js":
/*!**********************************************************!*\
  !*** ./node_modules/hardhat/types/builtin-tasks/node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC90eXBlcy9idWlsdGluLXRhc2tzL25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvdHlwZXMvYnVpbHRpbi10YXNrcy9ub2RlLmpzPzBiNGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/types/builtin-tasks/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/types/config.js":
/*!**********************************************!*\
  !*** ./node_modules/hardhat/types/config.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// This file defines the different config types.\n//\n// For each possible kind of config value, we have two types:\n//\n// One that ends with UserConfig, which represent the config as\n// written in the user's config file.\n//\n// The other one, with the same name except without the User part, represents\n// the resolved value as used during the hardhat execution.\n//\n// Note that while many declarations are repeated here (i.e. network types'\n// fields), we don't use `extends` as that can interfere with plugin authors\n// trying to augment the config types.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC90eXBlcy9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC90eXBlcy9jb25maWcuanM/ZjRhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIFRoaXMgZmlsZSBkZWZpbmVzIHRoZSBkaWZmZXJlbnQgY29uZmlnIHR5cGVzLlxuLy9cbi8vIEZvciBlYWNoIHBvc3NpYmxlIGtpbmQgb2YgY29uZmlnIHZhbHVlLCB3ZSBoYXZlIHR3byB0eXBlczpcbi8vXG4vLyBPbmUgdGhhdCBlbmRzIHdpdGggVXNlckNvbmZpZywgd2hpY2ggcmVwcmVzZW50IHRoZSBjb25maWcgYXNcbi8vIHdyaXR0ZW4gaW4gdGhlIHVzZXIncyBjb25maWcgZmlsZS5cbi8vXG4vLyBUaGUgb3RoZXIgb25lLCB3aXRoIHRoZSBzYW1lIG5hbWUgZXhjZXB0IHdpdGhvdXQgdGhlIFVzZXIgcGFydCwgcmVwcmVzZW50c1xuLy8gdGhlIHJlc29sdmVkIHZhbHVlIGFzIHVzZWQgZHVyaW5nIHRoZSBoYXJkaGF0IGV4ZWN1dGlvbi5cbi8vXG4vLyBOb3RlIHRoYXQgd2hpbGUgbWFueSBkZWNsYXJhdGlvbnMgYXJlIHJlcGVhdGVkIGhlcmUgKGkuZS4gbmV0d29yayB0eXBlcydcbi8vIGZpZWxkcyksIHdlIGRvbid0IHVzZSBgZXh0ZW5kc2AgYXMgdGhhdCBjYW4gaW50ZXJmZXJlIHdpdGggcGx1Z2luIGF1dGhvcnNcbi8vIHRyeWluZyB0byBhdWdtZW50IHRoZSBjb25maWcgdHlwZXMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/types/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/types/runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/hardhat/types/runtime.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=runtime.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC90eXBlcy9ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L3R5cGVzL3J1bnRpbWUuanM/YTNiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bnRpbWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/types/runtime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/utils/contract-names.js":
/*!******************************************************!*\
  !*** ./node_modules/hardhat/utils/contract-names.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.findDistance = exports.parseName = exports.parseFullyQualifiedName = exports.isFullyQualifiedName = exports.getFullyQualifiedName = void 0;\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\n/**\n * Returns a fully qualified name from a sourceName and contractName.\n */\nfunction getFullyQualifiedName(sourceName, contractName) {\n    return `${sourceName}:${contractName}`;\n}\nexports.getFullyQualifiedName = getFullyQualifiedName;\n/**\n * Returns true if a name is fully qualified, and not just a bare contract name.\n */\nfunction isFullyQualifiedName(name) {\n    return name.includes(\":\");\n}\nexports.isFullyQualifiedName = isFullyQualifiedName;\n/**\n * Parses a fully qualified name.\n *\n * @param fullyQualifiedName It MUST be a fully qualified name.\n * @throws {HardhatError} If the name is not fully qualified.\n */\nfunction parseFullyQualifiedName(fullyQualifiedName) {\n    const { sourceName, contractName } = parseName(fullyQualifiedName);\n    if (sourceName === undefined) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.CONTRACT_NAMES.INVALID_FULLY_QUALIFIED_NAME, {\n            name: fullyQualifiedName,\n        });\n    }\n    return { sourceName, contractName };\n}\nexports.parseFullyQualifiedName = parseFullyQualifiedName;\n/**\n * Parses a name, which can be a bare contract name, or a fully qualified name.\n */\nfunction parseName(name) {\n    const parts = name.split(\":\");\n    if (parts.length === 1) {\n        return { contractName: parts[0] };\n    }\n    const contractName = parts[parts.length - 1];\n    const sourceName = parts.slice(0, parts.length - 1).join(\":\");\n    return { sourceName, contractName };\n}\nexports.parseName = parseName;\n/**\n * Returns the edit-distance between two given strings using Levenshtein distance.\n *\n * @param a First string being compared\n * @param b Second string being compared\n * @returns distance between the two strings (lower number == more similar)\n * @see https://github.com/gustf/js-levenshtein\n * @license MIT - https://github.com/gustf/js-levenshtein/blob/master/LICENSE\n */\nfunction findDistance(a, b) {\n    function _min(_d0, _d1, _d2, _bx, _ay) {\n        return _d0 < _d1 || _d2 < _d1\n            ? _d0 > _d2\n                ? _d2 + 1\n                : _d0 + 1\n            : _bx === _ay\n                ? _d1\n                : _d1 + 1;\n    }\n    if (a === b) {\n        return 0;\n    }\n    if (a.length > b.length) {\n        [a, b] = [b, a];\n    }\n    let la = a.length;\n    let lb = b.length;\n    while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {\n        la--;\n        lb--;\n    }\n    let offset = 0;\n    while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {\n        offset++;\n    }\n    la -= offset;\n    lb -= offset;\n    if (la === 0 || lb < 3) {\n        return lb;\n    }\n    let x = 0;\n    let y;\n    let d0;\n    let d1;\n    let d2;\n    let d3;\n    let dd = 0; // typescript gets angry if we don't assign here\n    let dy;\n    let ay;\n    let bx0;\n    let bx1;\n    let bx2;\n    let bx3;\n    const vector = [];\n    for (y = 0; y < la; y++) {\n        vector.push(y + 1);\n        vector.push(a.charCodeAt(offset + y));\n    }\n    const len = vector.length - 1;\n    for (; x < lb - 3;) {\n        bx0 = b.charCodeAt(offset + (d0 = x));\n        bx1 = b.charCodeAt(offset + (d1 = x + 1));\n        bx2 = b.charCodeAt(offset + (d2 = x + 2));\n        bx3 = b.charCodeAt(offset + (d3 = x + 3));\n        dd = x += 4;\n        for (y = 0; y < len; y += 2) {\n            dy = vector[y];\n            ay = vector[y + 1];\n            d0 = _min(dy, d0, d1, bx0, ay);\n            d1 = _min(d0, d1, d2, bx1, ay);\n            d2 = _min(d1, d2, d3, bx2, ay);\n            dd = _min(d2, d3, dd, bx3, ay);\n            vector[y] = dd;\n            d3 = d2;\n            d2 = d1;\n            d1 = d0;\n            d0 = dy;\n        }\n    }\n    for (; x < lb;) {\n        bx0 = b.charCodeAt(offset + (d0 = x));\n        dd = ++x;\n        for (y = 0; y < len; y += 2) {\n            dy = vector[y];\n            vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);\n            d0 = dy;\n        }\n    }\n    return dd;\n}\nexports.findDistance = findDistance;\n//# sourceMappingURL=contract-names.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC91dGlscy9jb250cmFjdC1uYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyxpQkFBaUIsR0FBRywrQkFBK0IsR0FBRyw0QkFBNEIsR0FBRyw2QkFBNkI7QUFDekksaUJBQWlCLG1CQUFPLENBQUMscUZBQXlCO0FBQ2xELHNCQUFzQixtQkFBTyxDQUFDLCtGQUE4QjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVyxHQUFHLGFBQWE7QUFDekM7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQSxZQUFZLDJCQUEyQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxhQUFhO0FBQ2I7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2hhcmRoYXQvdXRpbHMvY29udHJhY3QtbmFtZXMuanM/YmFlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmluZERpc3RhbmNlID0gZXhwb3J0cy5wYXJzZU5hbWUgPSBleHBvcnRzLnBhcnNlRnVsbHlRdWFsaWZpZWROYW1lID0gZXhwb3J0cy5pc0Z1bGx5UXVhbGlmaWVkTmFtZSA9IGV4cG9ydHMuZ2V0RnVsbHlRdWFsaWZpZWROYW1lID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvY29yZS9lcnJvcnNcIik7XG5jb25zdCBlcnJvcnNfbGlzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL2NvcmUvZXJyb3JzLWxpc3RcIik7XG4vKipcbiAqIFJldHVybnMgYSBmdWxseSBxdWFsaWZpZWQgbmFtZSBmcm9tIGEgc291cmNlTmFtZSBhbmQgY29udHJhY3ROYW1lLlxuICovXG5mdW5jdGlvbiBnZXRGdWxseVF1YWxpZmllZE5hbWUoc291cmNlTmFtZSwgY29udHJhY3ROYW1lKSB7XG4gICAgcmV0dXJuIGAke3NvdXJjZU5hbWV9OiR7Y29udHJhY3ROYW1lfWA7XG59XG5leHBvcnRzLmdldEZ1bGx5UXVhbGlmaWVkTmFtZSA9IGdldEZ1bGx5UXVhbGlmaWVkTmFtZTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgbmFtZSBpcyBmdWxseSBxdWFsaWZpZWQsIGFuZCBub3QganVzdCBhIGJhcmUgY29udHJhY3QgbmFtZS5cbiAqL1xuZnVuY3Rpb24gaXNGdWxseVF1YWxpZmllZE5hbWUobmFtZSkge1xuICAgIHJldHVybiBuYW1lLmluY2x1ZGVzKFwiOlwiKTtcbn1cbmV4cG9ydHMuaXNGdWxseVF1YWxpZmllZE5hbWUgPSBpc0Z1bGx5UXVhbGlmaWVkTmFtZTtcbi8qKlxuICogUGFyc2VzIGEgZnVsbHkgcXVhbGlmaWVkIG5hbWUuXG4gKlxuICogQHBhcmFtIGZ1bGx5UXVhbGlmaWVkTmFtZSBJdCBNVVNUIGJlIGEgZnVsbHkgcXVhbGlmaWVkIG5hbWUuXG4gKiBAdGhyb3dzIHtIYXJkaGF0RXJyb3J9IElmIHRoZSBuYW1lIGlzIG5vdCBmdWxseSBxdWFsaWZpZWQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRnVsbHlRdWFsaWZpZWROYW1lKGZ1bGx5UXVhbGlmaWVkTmFtZSkge1xuICAgIGNvbnN0IHsgc291cmNlTmFtZSwgY29udHJhY3ROYW1lIH0gPSBwYXJzZU5hbWUoZnVsbHlRdWFsaWZpZWROYW1lKTtcbiAgICBpZiAoc291cmNlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5IYXJkaGF0RXJyb3IoZXJyb3JzX2xpc3RfMS5FUlJPUlMuQ09OVFJBQ1RfTkFNRVMuSU5WQUxJRF9GVUxMWV9RVUFMSUZJRURfTkFNRSwge1xuICAgICAgICAgICAgbmFtZTogZnVsbHlRdWFsaWZpZWROYW1lLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc291cmNlTmFtZSwgY29udHJhY3ROYW1lIH07XG59XG5leHBvcnRzLnBhcnNlRnVsbHlRdWFsaWZpZWROYW1lID0gcGFyc2VGdWxseVF1YWxpZmllZE5hbWU7XG4vKipcbiAqIFBhcnNlcyBhIG5hbWUsIHdoaWNoIGNhbiBiZSBhIGJhcmUgY29udHJhY3QgbmFtZSwgb3IgYSBmdWxseSBxdWFsaWZpZWQgbmFtZS5cbiAqL1xuZnVuY3Rpb24gcGFyc2VOYW1lKG5hbWUpIHtcbiAgICBjb25zdCBwYXJ0cyA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHsgY29udHJhY3ROYW1lOiBwYXJ0c1swXSB9O1xuICAgIH1cbiAgICBjb25zdCBjb250cmFjdE5hbWUgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBzb3VyY2VOYW1lID0gcGFydHMuc2xpY2UoMCwgcGFydHMubGVuZ3RoIC0gMSkuam9pbihcIjpcIik7XG4gICAgcmV0dXJuIHsgc291cmNlTmFtZSwgY29udHJhY3ROYW1lIH07XG59XG5leHBvcnRzLnBhcnNlTmFtZSA9IHBhcnNlTmFtZTtcbi8qKlxuICogUmV0dXJucyB0aGUgZWRpdC1kaXN0YW5jZSBiZXR3ZWVuIHR3byBnaXZlbiBzdHJpbmdzIHVzaW5nIExldmVuc2h0ZWluIGRpc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBhIEZpcnN0IHN0cmluZyBiZWluZyBjb21wYXJlZFxuICogQHBhcmFtIGIgU2Vjb25kIHN0cmluZyBiZWluZyBjb21wYXJlZFxuICogQHJldHVybnMgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHN0cmluZ3MgKGxvd2VyIG51bWJlciA9PSBtb3JlIHNpbWlsYXIpXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ndXN0Zi9qcy1sZXZlbnNodGVpblxuICogQGxpY2Vuc2UgTUlUIC0gaHR0cHM6Ly9naXRodWIuY29tL2d1c3RmL2pzLWxldmVuc2h0ZWluL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuZnVuY3Rpb24gZmluZERpc3RhbmNlKGEsIGIpIHtcbiAgICBmdW5jdGlvbiBfbWluKF9kMCwgX2QxLCBfZDIsIF9ieCwgX2F5KSB7XG4gICAgICAgIHJldHVybiBfZDAgPCBfZDEgfHwgX2QyIDwgX2QxXG4gICAgICAgICAgICA/IF9kMCA+IF9kMlxuICAgICAgICAgICAgICAgID8gX2QyICsgMVxuICAgICAgICAgICAgICAgIDogX2QwICsgMVxuICAgICAgICAgICAgOiBfYnggPT09IF9heVxuICAgICAgICAgICAgICAgID8gX2QxXG4gICAgICAgICAgICAgICAgOiBfZDEgKyAxO1xuICAgIH1cbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKGEubGVuZ3RoID4gYi5sZW5ndGgpIHtcbiAgICAgICAgW2EsIGJdID0gW2IsIGFdO1xuICAgIH1cbiAgICBsZXQgbGEgPSBhLmxlbmd0aDtcbiAgICBsZXQgbGIgPSBiLmxlbmd0aDtcbiAgICB3aGlsZSAobGEgPiAwICYmIGEuY2hhckNvZGVBdChsYSAtIDEpID09PSBiLmNoYXJDb2RlQXQobGIgLSAxKSkge1xuICAgICAgICBsYS0tO1xuICAgICAgICBsYi0tO1xuICAgIH1cbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAob2Zmc2V0IDwgbGEgJiYgYS5jaGFyQ29kZUF0KG9mZnNldCkgPT09IGIuY2hhckNvZGVBdChvZmZzZXQpKSB7XG4gICAgICAgIG9mZnNldCsrO1xuICAgIH1cbiAgICBsYSAtPSBvZmZzZXQ7XG4gICAgbGIgLT0gb2Zmc2V0O1xuICAgIGlmIChsYSA9PT0gMCB8fCBsYiA8IDMpIHtcbiAgICAgICAgcmV0dXJuIGxiO1xuICAgIH1cbiAgICBsZXQgeCA9IDA7XG4gICAgbGV0IHk7XG4gICAgbGV0IGQwO1xuICAgIGxldCBkMTtcbiAgICBsZXQgZDI7XG4gICAgbGV0IGQzO1xuICAgIGxldCBkZCA9IDA7IC8vIHR5cGVzY3JpcHQgZ2V0cyBhbmdyeSBpZiB3ZSBkb24ndCBhc3NpZ24gaGVyZVxuICAgIGxldCBkeTtcbiAgICBsZXQgYXk7XG4gICAgbGV0IGJ4MDtcbiAgICBsZXQgYngxO1xuICAgIGxldCBieDI7XG4gICAgbGV0IGJ4MztcbiAgICBjb25zdCB2ZWN0b3IgPSBbXTtcbiAgICBmb3IgKHkgPSAwOyB5IDwgbGE7IHkrKykge1xuICAgICAgICB2ZWN0b3IucHVzaCh5ICsgMSk7XG4gICAgICAgIHZlY3Rvci5wdXNoKGEuY2hhckNvZGVBdChvZmZzZXQgKyB5KSk7XG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IHZlY3Rvci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyB4IDwgbGIgLSAzOykge1xuICAgICAgICBieDAgPSBiLmNoYXJDb2RlQXQob2Zmc2V0ICsgKGQwID0geCkpO1xuICAgICAgICBieDEgPSBiLmNoYXJDb2RlQXQob2Zmc2V0ICsgKGQxID0geCArIDEpKTtcbiAgICAgICAgYngyID0gYi5jaGFyQ29kZUF0KG9mZnNldCArIChkMiA9IHggKyAyKSk7XG4gICAgICAgIGJ4MyA9IGIuY2hhckNvZGVBdChvZmZzZXQgKyAoZDMgPSB4ICsgMykpO1xuICAgICAgICBkZCA9IHggKz0gNDtcbiAgICAgICAgZm9yICh5ID0gMDsgeSA8IGxlbjsgeSArPSAyKSB7XG4gICAgICAgICAgICBkeSA9IHZlY3Rvclt5XTtcbiAgICAgICAgICAgIGF5ID0gdmVjdG9yW3kgKyAxXTtcbiAgICAgICAgICAgIGQwID0gX21pbihkeSwgZDAsIGQxLCBieDAsIGF5KTtcbiAgICAgICAgICAgIGQxID0gX21pbihkMCwgZDEsIGQyLCBieDEsIGF5KTtcbiAgICAgICAgICAgIGQyID0gX21pbihkMSwgZDIsIGQzLCBieDIsIGF5KTtcbiAgICAgICAgICAgIGRkID0gX21pbihkMiwgZDMsIGRkLCBieDMsIGF5KTtcbiAgICAgICAgICAgIHZlY3Rvclt5XSA9IGRkO1xuICAgICAgICAgICAgZDMgPSBkMjtcbiAgICAgICAgICAgIGQyID0gZDE7XG4gICAgICAgICAgICBkMSA9IGQwO1xuICAgICAgICAgICAgZDAgPSBkeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDsgeCA8IGxiOykge1xuICAgICAgICBieDAgPSBiLmNoYXJDb2RlQXQob2Zmc2V0ICsgKGQwID0geCkpO1xuICAgICAgICBkZCA9ICsreDtcbiAgICAgICAgZm9yICh5ID0gMDsgeSA8IGxlbjsgeSArPSAyKSB7XG4gICAgICAgICAgICBkeSA9IHZlY3Rvclt5XTtcbiAgICAgICAgICAgIHZlY3Rvclt5XSA9IGRkID0gX21pbihkeSwgZDAsIGRkLCBieDAsIHZlY3Rvclt5ICsgMV0pO1xuICAgICAgICAgICAgZDAgPSBkeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGQ7XG59XG5leHBvcnRzLmZpbmREaXN0YW5jZSA9IGZpbmREaXN0YW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyYWN0LW5hbWVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/utils/contract-names.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/utils/remappings.js":
/*!**************************************************!*\
  !*** ./node_modules/hardhat/utils/remappings.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.applyRemappings = void 0;\nfunction applyRemappings(remappings, sourceName) {\n    const selectedRemapping = { from: \"\", to: \"\" };\n    for (const [from, to] of Object.entries(remappings)) {\n        if (sourceName.startsWith(from) &&\n            from.length >= selectedRemapping.from.length) {\n            [selectedRemapping.from, selectedRemapping.to] = [from, to];\n        }\n    }\n    return sourceName.replace(selectedRemapping.from, selectedRemapping.to);\n}\nexports.applyRemappings = applyRemappings;\n//# sourceMappingURL=remappings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC91dGlscy9yZW1hcHBpbmdzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0L3V0aWxzL3JlbWFwcGluZ3MuanM/OWEwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXBwbHlSZW1hcHBpbmdzID0gdm9pZCAwO1xuZnVuY3Rpb24gYXBwbHlSZW1hcHBpbmdzKHJlbWFwcGluZ3MsIHNvdXJjZU5hbWUpIHtcbiAgICBjb25zdCBzZWxlY3RlZFJlbWFwcGluZyA9IHsgZnJvbTogXCJcIiwgdG86IFwiXCIgfTtcbiAgICBmb3IgKGNvbnN0IFtmcm9tLCB0b10gb2YgT2JqZWN0LmVudHJpZXMocmVtYXBwaW5ncykpIHtcbiAgICAgICAgaWYgKHNvdXJjZU5hbWUuc3RhcnRzV2l0aChmcm9tKSAmJlxuICAgICAgICAgICAgZnJvbS5sZW5ndGggPj0gc2VsZWN0ZWRSZW1hcHBpbmcuZnJvbS5sZW5ndGgpIHtcbiAgICAgICAgICAgIFtzZWxlY3RlZFJlbWFwcGluZy5mcm9tLCBzZWxlY3RlZFJlbWFwcGluZy50b10gPSBbZnJvbSwgdG9dO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VOYW1lLnJlcGxhY2Uoc2VsZWN0ZWRSZW1hcHBpbmcuZnJvbSwgc2VsZWN0ZWRSZW1hcHBpbmcudG8pO1xufVxuZXhwb3J0cy5hcHBseVJlbWFwcGluZ3MgPSBhcHBseVJlbWFwcGluZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1hcHBpbmdzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/utils/remappings.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/utils/source-names.js":
/*!****************************************************!*\
  !*** ./node_modules/hardhat/utils/source-names.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.includesOwnPackageName = exports.replaceBackslashes = exports.isAbsolutePathSourceName = exports.normalizeSourceName = exports.localSourceNameToPath = exports.localPathToSourceName = exports.validateSourceNameExistenceAndCasing = exports.isLocalSourceName = exports.validateSourceNameFormat = void 0;\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst errors_1 = __webpack_require__(/*! ../internal/core/errors */ \"(ssr)/./node_modules/hardhat/internal/core/errors.js\");\nconst errors_list_1 = __webpack_require__(/*! ../internal/core/errors-list */ \"(ssr)/./node_modules/hardhat/internal/core/errors-list.js\");\nconst fs_utils_1 = __webpack_require__(/*! ../internal/util/fs-utils */ \"(ssr)/./node_modules/hardhat/internal/util/fs-utils.js\");\nconst packageInfo_1 = __webpack_require__(/*! ../internal/util/packageInfo */ \"(ssr)/./node_modules/hardhat/internal/util/packageInfo.js\");\nconst NODE_MODULES = \"node_modules\";\n/**\n * This function validates the source name's format.\n *\n * It throws if the format is invalid.\n * If it doesn't throw all you know is that the format is valid.\n */\nfunction validateSourceNameFormat(sourceName) {\n    if (isAbsolutePathSourceName(sourceName)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.INVALID_SOURCE_NAME_ABSOLUTE_PATH, {\n            name: sourceName,\n        });\n    }\n    if (isExplicitRelativePath(sourceName)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.INVALID_SOURCE_NAME_RELATIVE_PATH, {\n            name: sourceName,\n        });\n    }\n    // We check this before normalizing so we are sure that the difference\n    // comes from slash vs backslash\n    if (replaceBackslashes(sourceName) !== sourceName) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.INVALID_SOURCE_NAME_BACKSLASHES, {\n            name: sourceName,\n        });\n    }\n    if (normalizeSourceName(sourceName) !== sourceName) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.INVALID_SOURCE_NOT_NORMALIZED, {\n            name: sourceName,\n        });\n    }\n}\nexports.validateSourceNameFormat = validateSourceNameFormat;\n/**\n * This function returns true if the sourceName is, potentially, from a local\n * file. It doesn't validate that the file actually exists.\n *\n * The source name must be in a valid format.\n */\nasync function isLocalSourceName(projectRoot, sourceName) {\n    // Note that we consider \"hardhat/console.sol\" as a special case here.\n    // This lets someone have a \"hardhat\" directory within their project without\n    // it impacting their use of `console.log`.\n    // See issue https://github.com/nomiclabs/hardhat/issues/998\n    if (sourceName.includes(NODE_MODULES) ||\n        sourceName === \"hardhat/console.sol\") {\n        return false;\n    }\n    const slashIndex = sourceName.indexOf(\"/\");\n    const firstDirOrFileName = slashIndex !== -1 ? sourceName.substring(0, slashIndex) : sourceName;\n    try {\n        await (0, fs_utils_1.getFileTrueCase)(projectRoot, firstDirOrFileName);\n    }\n    catch (error) {\n        if (error instanceof fs_utils_1.FileNotFoundError) {\n            return false;\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n    }\n    return true;\n}\nexports.isLocalSourceName = isLocalSourceName;\n/**\n * Validates that a source name exists, starting from `fromDir`, and has the\n * right casing.\n *\n * The source name must be in a valid format.\n */\nasync function validateSourceNameExistenceAndCasing(fromDir, sourceName) {\n    const trueCaseSourceName = await getSourceNameTrueCase(fromDir, sourceName);\n    if (trueCaseSourceName !== sourceName) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.WRONG_CASING, {\n            incorrect: sourceName,\n            correct: trueCaseSourceName,\n        });\n    }\n}\nexports.validateSourceNameExistenceAndCasing = validateSourceNameExistenceAndCasing;\n/**\n * Returns the source name of an existing local file's absolute path.\n *\n * Throws is the file doesn't exist, it's not inside the project, or belongs\n * to a library.\n */\nasync function localPathToSourceName(projectRoot, localFileAbsolutePath) {\n    const relativePath = path_1.default.relative(projectRoot, localFileAbsolutePath);\n    const normalized = normalizeSourceName(relativePath);\n    if (normalized.startsWith(\"..\")) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.EXTERNAL_AS_LOCAL, {\n            path: localFileAbsolutePath,\n        });\n    }\n    if (normalized.includes(NODE_MODULES)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.NODE_MODULES_AS_LOCAL, {\n            path: localFileAbsolutePath,\n        });\n    }\n    return getSourceNameTrueCase(projectRoot, relativePath);\n}\nexports.localPathToSourceName = localPathToSourceName;\n/**\n * This function takes a valid local source name and returns its path. The\n * source name doesn't need to point to an existing file.\n */\nfunction localSourceNameToPath(projectRoot, sourceName) {\n    return path_1.default.join(projectRoot, sourceName);\n}\nexports.localSourceNameToPath = localSourceNameToPath;\n/**\n * Normalizes the source name, for example, by replacing `a/./b` with `a/b`.\n *\n * The sourceName param doesn't have to be a valid source name. It can,\n * for example, be denormalized.\n */\nfunction normalizeSourceName(sourceName) {\n    return replaceBackslashes(path_1.default.normalize(sourceName));\n}\nexports.normalizeSourceName = normalizeSourceName;\n/**\n * This function returns true if the sourceName is a unix absolute path or a\n * platform-dependent one.\n *\n * This function is used instead of just `path.isAbsolute` to ensure that\n * source names never start with `/`, even on Windows.\n */\nfunction isAbsolutePathSourceName(sourceName) {\n    return path_1.default.isAbsolute(sourceName) || sourceName.startsWith(\"/\");\n}\nexports.isAbsolutePathSourceName = isAbsolutePathSourceName;\n/**\n * This function returns true if the sourceName is a unix path that is based on\n * the current directory `./`.\n */\nfunction isExplicitRelativePath(sourceName) {\n    const [base] = sourceName.split(\"/\", 1);\n    return base === \".\" || base === \"..\";\n}\n/**\n * This function replaces backslashes (\\\\) with slashes (/).\n *\n * Note that a source name must not contain backslashes.\n */\nfunction replaceBackslashes(str) {\n    // Based in the npm module slash\n    const isExtendedLengthPath = /^\\\\\\\\\\?\\\\/.test(str);\n    const hasNonAscii = /[^\\u0000-\\u0080]+/.test(str);\n    if (isExtendedLengthPath || hasNonAscii) {\n        return str;\n    }\n    return str.replace(/\\\\/g, \"/\");\n}\nexports.replaceBackslashes = replaceBackslashes;\nfunction slashesToPathSeparator(str) {\n    if (path_1.default.sep === \"/\") {\n        return str;\n    }\n    return str.replace(/\\//g, path_1.default.sep);\n}\n/**\n * Returns the true casing of `p` as a relative path from `fromDir`. Throws if\n * `p` doesn't exist. `p` MUST be in source name format.\n */\nasync function getSourceNameTrueCase(fromDir, p) {\n    try {\n        const realCase = await (0, fs_utils_1.getFileTrueCase)(fromDir, slashesToPathSeparator(p));\n        return normalizeSourceName(realCase);\n    }\n    catch (error) {\n        if (error instanceof fs_utils_1.FileNotFoundError) {\n            throw new errors_1.HardhatError(errors_list_1.ERRORS.SOURCE_NAMES.FILE_NOT_FOUND, {\n                name: p,\n            }, error);\n        }\n        // eslint-disable-next-line @nomicfoundation/hardhat-internal-rules/only-hardhat-error\n        throw error;\n    }\n}\n/**\n * This function returns true if the sourceName contains the current package's name\n * as a substring\n */\nasync function includesOwnPackageName(sourceName) {\n    const packageName = await (0, packageInfo_1.getPackageName)(sourceName);\n    if (packageName !== \"\") {\n        return sourceName.startsWith(`${packageName}/`);\n    }\n    return false;\n}\nexports.includesOwnPackageName = includesOwnPackageName;\n//# sourceMappingURL=source-names.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat/utils/source-names.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/node_modules/resolve/lib/core.json":
/*!*****************************************************************!*\
  !*** ./node_modules/hardhat/node_modules/resolve/lib/core.json ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"assert":true,"async_hooks":">= 8","buffer_ieee754":"< 0.9.7","buffer":true,"child_process":true,"cluster":true,"console":true,"constants":true,"crypto":true,"_debug_agent":">= 1 && < 8","_debugger":"< 8","dgram":true,"dns":true,"domain":true,"events":true,"freelist":"< 6","fs":true,"fs/promises":[">= 10 && < 10.1",">= 14"],"_http_agent":">= 0.11.1","_http_client":">= 0.11.1","_http_common":">= 0.11.1","_http_incoming":">= 0.11.1","_http_outgoing":">= 0.11.1","_http_server":">= 0.11.1","http":true,"http2":">= 8.8","https":true,"inspector":">= 8.0.0","_linklist":"< 8","module":true,"net":true,"node-inspect/lib/_inspect":">= 7.6.0 && < 12","node-inspect/lib/internal/inspect_client":">= 7.6.0 && < 12","node-inspect/lib/internal/inspect_repl":">= 7.6.0 && < 12","os":true,"path":true,"perf_hooks":">= 8.5","process":">= 1","punycode":true,"querystring":true,"readline":true,"repl":true,"smalloc":">= 0.11.5 && < 3","_stream_duplex":">= 0.9.4","_stream_transform":">= 0.9.4","_stream_wrap":">= 1.4.1","_stream_passthrough":">= 0.9.4","_stream_readable":">= 0.9.4","_stream_writable":">= 0.9.4","stream":true,"string_decoder":true,"sys":true,"timers":true,"_tls_common":">= 0.11.13","_tls_legacy":">= 0.11.3 && < 10","_tls_wrap":">= 0.11.3","tls":true,"trace_events":">= 10","tty":true,"url":true,"util":true,"v8/tools/arguments":">= 10 && < 12","v8/tools/codemap":[">= 4.4.0 && < 5",">= 5.2.0 && < 12"],"v8/tools/consarray":[">= 4.4.0 && < 5",">= 5.2.0 && < 12"],"v8/tools/csvparser":[">= 4.4.0 && < 5",">= 5.2.0 && < 12"],"v8/tools/logreader":[">= 4.4.0 && < 5",">= 5.2.0 && < 12"],"v8/tools/profile_view":[">= 4.4.0 && < 5",">= 5.2.0 && < 12"],"v8/tools/splaytree":[">= 4.4.0 && < 5",">= 5.2.0 && < 12"],"v8":">= 1","vm":true,"wasi":">= 13.4 && < 13.5","worker_threads":">= 11.7","zlib":true}');

/***/ }),

/***/ "(ssr)/./node_modules/hardhat/package.json":
/*!*******************************************!*\
  !*** ./node_modules/hardhat/package.json ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"hardhat","version":"2.22.18","author":"Nomic Labs LLC","license":"MIT","homepage":"https://hardhat.org","repository":"github:nomiclabs/hardhat","main":"internal/lib/hardhat-lib.js","types":"internal/lib/hardhat-lib.d.ts","description":"Hardhat is an extensible developer tool that helps smart contract developers increase productivity by reliably bringing together the tools they want.","keywords":["ethereum","smart-contracts","hardhat","blockchain","dapps","javascript","tooling","task-runner","solidity"],"bin":{"hardhat":"internal/cli/bootstrap.js"},"files":["builtin-tasks/","common/","internal/","sample-projects/","src/","types/","utils/","*.d.ts","*.d.ts.map","*.js","*.js.map","LICENSE","README.md","recommended-gitignore.txt","console.sol"],"devDependencies":{"@nomicfoundation/ethereumjs-block":"5.0.4","@types/async-eventemitter":"^0.2.1","@types/bn.js":"^5.1.0","@types/chai":"^4.2.0","@types/chai-as-promised":"^7.1.3","@types/ci-info":"^2.0.0","@types/debug":"^4.1.4","@types/fs-extra":"^5.1.0","@types/keccak":"^3.0.1","@types/lodash":"^4.14.123","@types/mocha":">=9.1.0","@types/node":"^18.0.0","@types/resolve":"^1.17.1","@types/semver":"^6.0.2","@types/sinon":"^9.0.8","@types/uuid":"^8.3.1","@types/ws":"^7.2.1","@typescript-eslint/eslint-plugin":"5.61.0","@typescript-eslint/parser":"5.61.0","bignumber.js":"^9.0.2","bn.js":"^5.1.0","chai":"^4.2.0","chai-as-promised":"^7.1.1","eslint":"^8.44.0","eslint-config-prettier":"8.3.0","eslint-plugin-import":"2.27.5","eslint-plugin-mocha":"10.4.1","eslint-plugin-prettier":"3.4.0","ethers":"^6.1.0","ethers-v5":"npm:ethers@5","mocha":"^10.0.0","prettier":"2.4.1","rimraf":"^3.0.2","sinon":"^9.0.0","time-require":"^0.1.2","ts-node":"^10.8.0","typescript":"~5.0.0","@nomicfoundation/eslint-plugin-hardhat-internal-rules":"^1.0.2","@nomicfoundation/eslint-plugin-slow-imports":"^1.0.0"},"dependencies":{"@ethersproject/abi":"^5.1.2","@metamask/eth-sig-util":"^4.0.0","@nomicfoundation/edr":"^0.7.0","@nomicfoundation/ethereumjs-common":"4.0.4","@nomicfoundation/ethereumjs-tx":"5.0.4","@nomicfoundation/ethereumjs-util":"9.0.4","@nomicfoundation/solidity-analyzer":"^0.1.0","@sentry/node":"^5.18.1","@types/bn.js":"^5.1.0","@types/lru-cache":"^5.1.0","adm-zip":"^0.4.16","aggregate-error":"^3.0.0","ansi-escapes":"^4.3.0","boxen":"^5.1.2","chokidar":"^4.0.0","ci-info":"^2.0.0","debug":"^4.1.1","enquirer":"^2.3.0","env-paths":"^2.2.0","ethereum-cryptography":"^1.0.3","ethereumjs-abi":"^0.6.8","find-up":"^5.0.0","fp-ts":"1.19.3","fs-extra":"^7.0.1","immutable":"^4.0.0-rc.12","io-ts":"1.10.4","json-stream-stringify":"^3.1.4","keccak":"^3.0.2","lodash":"^4.17.11","mnemonist":"^0.38.0","mocha":"^10.0.0","p-map":"^4.0.0","picocolors":"^1.1.0","raw-body":"^2.4.1","resolve":"1.17.0","semver":"^6.3.0","solc":"0.8.26","source-map-support":"^0.5.13","stacktrace-parser":"^0.1.10","tinyglobby":"^0.2.6","tsort":"0.0.1","undici":"^5.14.0","uuid":"^8.3.2","ws":"^7.4.6"},"peerDependencies":{"ts-node":"*","typescript":"*"},"peerDependenciesMeta":{"ts-node":{"optional":true},"typescript":{"optional":true}},"nyc":{"extension":[".ts"],"exclude":["**/*.d.ts","dev-build","sample-projects","test","coverage",".nyc_output","*.ts","*.js","internal","builtin-tasks","build-test"],"reporter":["text","lcovonly"],"all":true},"scripts":{"lint":"pnpm prettier --check && pnpm eslint","lint:fix":"pnpm prettier --write && pnpm eslint --fix","eslint":"eslint \'src/**/*.ts\' \'test/**/*.ts\'","prettier":"prettier \\"**/*.{js,md,json}\\"","pretest":"cd ../.. && pnpm build","test":"mocha --recursive \\"test/**/*.ts\\"","test:except-provider":"mocha --recursive \\"test/**/*.ts\\" --exclude \\"test/internal/hardhat-network/provider/**/*.ts\\"","test:except-tracing":"mocha --recursive \\"test/**/*.ts\\" --exclude \\"test/internal/hardhat-network/stack-traces/**/*.ts\\"","test:provider":"mocha --recursive \\"test/internal/hardhat-network/provider/**/*.ts\\"","test:tracing":"mocha --recursive \\"test/internal/hardhat-network/stack-traces/**/*.ts\\"","postbuild":"cp src/internal/solidity/compiler/solcjs-runner.js internal/solidity/compiler/solcjs-runner.js","build":"tsc --build --force --incremental .","build:tracing":"tsc --build --force --incremental .","clean":"rimraf builtin-tasks internal types utils *.d.ts *.map *.js build-test tsconfig.tsbuildinfo test/internal/hardhat-network/stack-traces/test-files/artifacts"}}');

/***/ })

};
;