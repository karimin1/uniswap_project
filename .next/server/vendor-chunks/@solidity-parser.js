/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@solidity-parser";
exports.ids = ["vendor-chunks/@solidity-parser"];
exports.modules = {

/***/ "(ssr)/./node_modules/@solidity-parser/parser/dist/index.cjs.js":
/*!****************************************************************!*\
  !*** ./node_modules/@solidity-parser/parser/dist/index.cjs.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const _importMetaUrl=(__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename)\n\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ParserError: () => ParserError,\n  default: () => src_default,\n  parse: () => parse,\n  tokenize: () => tokenize,\n  visit: () => visit\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// node_modules/antlr4/dist/antlr4.node.mjs\nvar import_module = __webpack_require__(/*! module */ \"module\");\nvar e = { d: (t2, n2) => {\n  for (var s2 in n2)\n    e.o(n2, s2) && !e.o(t2, s2) && Object.defineProperty(t2, s2, { enumerable: true, get: n2[s2] });\n}, o: (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2) };\nvar n = {};\ne.d(n, { dx: () => X, q2: () => Ot, FO: () => Ne, xf: () => ke, Gy: () => ve, s4: () => bt, c7: () => De, _7: () => he, tx: () => Ce, gp: () => Ee, cK: () => Rt, zs: () => Se, Rh: () => Re, AV: () => ke, Xp: () => E, VS: () => _, ul: () => $, hW: () => Bt, x1: () => Jt, z5: () => ne, oN: () => pe, TB: () => ge, u1: () => fe, _b: () => Me, $F: () => ie, _T: () => Ve, db: () => re, Zx: () => ee, _x: () => Mt, r8: () => U, JI: () => P, TP: () => b, WU: () => s, Nj: () => u, ZP: () => $e });\nvar s = class {\n  constructor() {\n    this.source = null, this.type = null, this.channel = null, this.start = null, this.stop = null, this.tokenIndex = null, this.line = null, this.column = null, this._text = null;\n  }\n  getTokenSource() {\n    return this.source[0];\n  }\n  getInputStream() {\n    return this.source[1];\n  }\n  get text() {\n    return this._text;\n  }\n  set text(t2) {\n    this._text = t2;\n  }\n};\nfunction i(t2, e2) {\n  if (!Array.isArray(t2) || !Array.isArray(e2))\n    return false;\n  if (t2 === e2)\n    return true;\n  if (t2.length !== e2.length)\n    return false;\n  for (let n2 = 0; n2 < t2.length; n2++)\n    if (!(t2[n2] === e2[n2] || t2[n2].equals && t2[n2].equals(e2[n2])))\n      return false;\n  return true;\n}\ns.INVALID_TYPE = 0, s.EPSILON = -2, s.MIN_USER_TOKEN_TYPE = 1, s.EOF = -1, s.DEFAULT_CHANNEL = 0, s.HIDDEN_CHANNEL = 1;\nvar r = Math.round(Math.random() * Math.pow(2, 32));\nfunction o(t2) {\n  if (!t2)\n    return 0;\n  const e2 = typeof t2, n2 = \"string\" === e2 ? t2 : !(\"object\" !== e2 || !t2.toString) && t2.toString();\n  if (!n2)\n    return 0;\n  let s2, i2;\n  const o2 = 3 & n2.length, a2 = n2.length - o2;\n  let l2 = r;\n  const h2 = 3432918353, c2 = 461845907;\n  let u2 = 0;\n  for (; u2 < a2; )\n    i2 = 255 & n2.charCodeAt(u2) | (255 & n2.charCodeAt(++u2)) << 8 | (255 & n2.charCodeAt(++u2)) << 16 | (255 & n2.charCodeAt(++u2)) << 24, ++u2, i2 = (65535 & i2) * h2 + (((i2 >>> 16) * h2 & 65535) << 16) & 4294967295, i2 = i2 << 15 | i2 >>> 17, i2 = (65535 & i2) * c2 + (((i2 >>> 16) * c2 & 65535) << 16) & 4294967295, l2 ^= i2, l2 = l2 << 13 | l2 >>> 19, s2 = 5 * (65535 & l2) + ((5 * (l2 >>> 16) & 65535) << 16) & 4294967295, l2 = 27492 + (65535 & s2) + ((58964 + (s2 >>> 16) & 65535) << 16);\n  switch (i2 = 0, o2) {\n    case 3:\n      i2 ^= (255 & n2.charCodeAt(u2 + 2)) << 16;\n    case 2:\n      i2 ^= (255 & n2.charCodeAt(u2 + 1)) << 8;\n    case 1:\n      i2 ^= 255 & n2.charCodeAt(u2), i2 = (65535 & i2) * h2 + (((i2 >>> 16) * h2 & 65535) << 16) & 4294967295, i2 = i2 << 15 | i2 >>> 17, i2 = (65535 & i2) * c2 + (((i2 >>> 16) * c2 & 65535) << 16) & 4294967295, l2 ^= i2;\n  }\n  return l2 ^= n2.length, l2 ^= l2 >>> 16, l2 = 2246822507 * (65535 & l2) + ((2246822507 * (l2 >>> 16) & 65535) << 16) & 4294967295, l2 ^= l2 >>> 13, l2 = 3266489909 * (65535 & l2) + ((3266489909 * (l2 >>> 16) & 65535) << 16) & 4294967295, l2 ^= l2 >>> 16, l2 >>> 0;\n}\nvar a = class _a {\n  constructor() {\n    this.count = 0, this.hash = 0;\n  }\n  update() {\n    for (let t2 = 0; t2 < arguments.length; t2++) {\n      const e2 = arguments[t2];\n      if (null != e2)\n        if (Array.isArray(e2))\n          this.update.apply(this, e2);\n        else {\n          let t3 = 0;\n          switch (typeof e2) {\n            case \"undefined\":\n            case \"function\":\n              continue;\n            case \"number\":\n            case \"boolean\":\n              t3 = e2;\n              break;\n            case \"string\":\n              t3 = o(e2);\n              break;\n            default:\n              e2.updateHashCode ? e2.updateHashCode(this) : console.log(\"No updateHashCode for \" + e2.toString());\n              continue;\n          }\n          t3 *= 3432918353, t3 = t3 << 15 | t3 >>> 17, t3 *= 461845907, this.count = this.count + 1;\n          let n2 = this.hash ^ t3;\n          n2 = n2 << 13 | n2 >>> 19, n2 = 5 * n2 + 3864292196, this.hash = n2;\n        }\n    }\n  }\n  finish() {\n    let t2 = this.hash ^ 4 * this.count;\n    return t2 ^= t2 >>> 16, t2 *= 2246822507, t2 ^= t2 >>> 13, t2 *= 3266489909, t2 ^= t2 >>> 16, t2;\n  }\n  static hashStuff() {\n    const t2 = new _a();\n    return t2.update.apply(t2, arguments), t2.finish();\n  }\n};\nfunction l(t2) {\n  return t2 ? \"string\" == typeof t2 ? o(t2) : t2.hashCode() : -1;\n}\nfunction h(t2, e2) {\n  return t2 ? t2.equals(e2) : t2 === e2;\n}\nfunction c(t2) {\n  return null === t2 ? \"null\" : t2;\n}\nfunction u(t2) {\n  return Array.isArray(t2) ? \"[\" + t2.map(c).join(\", \") + \"]\" : \"null\";\n}\nvar d = \"h-\";\nvar p = class {\n  constructor(t2, e2) {\n    this.data = {}, this.hashFunction = t2 || l, this.equalsFunction = e2 || h;\n  }\n  add(t2) {\n    const e2 = d + this.hashFunction(t2);\n    if (e2 in this.data) {\n      const n2 = this.data[e2];\n      for (let e3 = 0; e3 < n2.length; e3++)\n        if (this.equalsFunction(t2, n2[e3]))\n          return n2[e3];\n      return n2.push(t2), t2;\n    }\n    return this.data[e2] = [t2], t2;\n  }\n  has(t2) {\n    return null != this.get(t2);\n  }\n  get(t2) {\n    const e2 = d + this.hashFunction(t2);\n    if (e2 in this.data) {\n      const n2 = this.data[e2];\n      for (let e3 = 0; e3 < n2.length; e3++)\n        if (this.equalsFunction(t2, n2[e3]))\n          return n2[e3];\n    }\n    return null;\n  }\n  values() {\n    return Object.keys(this.data).filter((t2) => t2.startsWith(d)).flatMap((t2) => this.data[t2], this);\n  }\n  toString() {\n    return u(this.values());\n  }\n  get length() {\n    return Object.keys(this.data).filter((t2) => t2.startsWith(d)).map((t2) => this.data[t2].length, this).reduce((t2, e2) => t2 + e2, 0);\n  }\n};\nvar g = class _g {\n  hashCode() {\n    const t2 = new a();\n    return this.updateHashCode(t2), t2.finish();\n  }\n  evaluate(t2, e2) {\n  }\n  evalPrecedence(t2, e2) {\n    return this;\n  }\n  static andContext(t2, e2) {\n    if (null === t2 || t2 === _g.NONE)\n      return e2;\n    if (null === e2 || e2 === _g.NONE)\n      return t2;\n    const n2 = new f(t2, e2);\n    return 1 === n2.opnds.length ? n2.opnds[0] : n2;\n  }\n  static orContext(t2, e2) {\n    if (null === t2)\n      return e2;\n    if (null === e2)\n      return t2;\n    if (t2 === _g.NONE || e2 === _g.NONE)\n      return _g.NONE;\n    const n2 = new x(t2, e2);\n    return 1 === n2.opnds.length ? n2.opnds[0] : n2;\n  }\n};\nvar f = class _f extends g {\n  constructor(t2, e2) {\n    super();\n    const n2 = new p();\n    t2 instanceof _f ? t2.opnds.map(function(t3) {\n      n2.add(t3);\n    }) : n2.add(t2), e2 instanceof _f ? e2.opnds.map(function(t3) {\n      n2.add(t3);\n    }) : n2.add(e2);\n    const s2 = T(n2);\n    if (s2.length > 0) {\n      let t3 = null;\n      s2.map(function(e3) {\n        (null === t3 || e3.precedence < t3.precedence) && (t3 = e3);\n      }), n2.add(t3);\n    }\n    this.opnds = Array.from(n2.values());\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _f && i(this.opnds, t2.opnds);\n  }\n  updateHashCode(t2) {\n    t2.update(this.opnds, \"AND\");\n  }\n  evaluate(t2, e2) {\n    for (let n2 = 0; n2 < this.opnds.length; n2++)\n      if (!this.opnds[n2].evaluate(t2, e2))\n        return false;\n    return true;\n  }\n  evalPrecedence(t2, e2) {\n    let n2 = false;\n    const s2 = [];\n    for (let i3 = 0; i3 < this.opnds.length; i3++) {\n      const r2 = this.opnds[i3], o2 = r2.evalPrecedence(t2, e2);\n      if (n2 |= o2 !== r2, null === o2)\n        return null;\n      o2 !== g.NONE && s2.push(o2);\n    }\n    if (!n2)\n      return this;\n    if (0 === s2.length)\n      return g.NONE;\n    let i2 = null;\n    return s2.map(function(t3) {\n      i2 = null === i2 ? t3 : g.andContext(i2, t3);\n    }), i2;\n  }\n  toString() {\n    const t2 = this.opnds.map((t3) => t3.toString());\n    return (t2.length > 3 ? t2.slice(3) : t2).join(\"&&\");\n  }\n};\nvar x = class _x extends g {\n  constructor(t2, e2) {\n    super();\n    const n2 = new p();\n    t2 instanceof _x ? t2.opnds.map(function(t3) {\n      n2.add(t3);\n    }) : n2.add(t2), e2 instanceof _x ? e2.opnds.map(function(t3) {\n      n2.add(t3);\n    }) : n2.add(e2);\n    const s2 = T(n2);\n    if (s2.length > 0) {\n      const t3 = s2.sort(function(t4, e4) {\n        return t4.compareTo(e4);\n      }), e3 = t3[t3.length - 1];\n      n2.add(e3);\n    }\n    this.opnds = Array.from(n2.values());\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _x && i(this.opnds, t2.opnds);\n  }\n  updateHashCode(t2) {\n    t2.update(this.opnds, \"OR\");\n  }\n  evaluate(t2, e2) {\n    for (let n2 = 0; n2 < this.opnds.length; n2++)\n      if (this.opnds[n2].evaluate(t2, e2))\n        return true;\n    return false;\n  }\n  evalPrecedence(t2, e2) {\n    let n2 = false;\n    const s2 = [];\n    for (let i2 = 0; i2 < this.opnds.length; i2++) {\n      const r2 = this.opnds[i2], o2 = r2.evalPrecedence(t2, e2);\n      if (n2 |= o2 !== r2, o2 === g.NONE)\n        return g.NONE;\n      null !== o2 && s2.push(o2);\n    }\n    if (!n2)\n      return this;\n    if (0 === s2.length)\n      return null;\n    return s2.map(function(t3) {\n      return t3;\n    }), null;\n  }\n  toString() {\n    const t2 = this.opnds.map((t3) => t3.toString());\n    return (t2.length > 3 ? t2.slice(3) : t2).join(\"||\");\n  }\n};\nfunction T(t2) {\n  const e2 = [];\n  return t2.values().map(function(t3) {\n    t3 instanceof g.PrecedencePredicate && e2.push(t3);\n  }), e2;\n}\nfunction S(t2, e2) {\n  if (null === t2) {\n    const t3 = { state: null, alt: null, context: null, semanticContext: null };\n    return e2 && (t3.reachesIntoOuterContext = 0), t3;\n  }\n  {\n    const n2 = {};\n    return n2.state = t2.state || null, n2.alt = void 0 === t2.alt ? null : t2.alt, n2.context = t2.context || null, n2.semanticContext = t2.semanticContext || null, e2 && (n2.reachesIntoOuterContext = t2.reachesIntoOuterContext || 0, n2.precedenceFilterSuppressed = t2.precedenceFilterSuppressed || false), n2;\n  }\n}\nvar m = class _m {\n  constructor(t2, e2) {\n    this.checkContext(t2, e2), t2 = S(t2), e2 = S(e2, true), this.state = null !== t2.state ? t2.state : e2.state, this.alt = null !== t2.alt ? t2.alt : e2.alt, this.context = null !== t2.context ? t2.context : e2.context, this.semanticContext = null !== t2.semanticContext ? t2.semanticContext : null !== e2.semanticContext ? e2.semanticContext : g.NONE, this.reachesIntoOuterContext = e2.reachesIntoOuterContext, this.precedenceFilterSuppressed = e2.precedenceFilterSuppressed;\n  }\n  checkContext(t2, e2) {\n    null !== t2.context && void 0 !== t2.context || null !== e2 && null !== e2.context && void 0 !== e2.context || (this.context = null);\n  }\n  hashCode() {\n    const t2 = new a();\n    return this.updateHashCode(t2), t2.finish();\n  }\n  updateHashCode(t2) {\n    t2.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _m && this.state.stateNumber === t2.state.stateNumber && this.alt === t2.alt && (null === this.context ? null === t2.context : this.context.equals(t2.context)) && this.semanticContext.equals(t2.semanticContext) && this.precedenceFilterSuppressed === t2.precedenceFilterSuppressed;\n  }\n  hashCodeForConfigSet() {\n    const t2 = new a();\n    return t2.update(this.state.stateNumber, this.alt, this.semanticContext), t2.finish();\n  }\n  equalsForConfigSet(t2) {\n    return this === t2 || t2 instanceof _m && this.state.stateNumber === t2.state.stateNumber && this.alt === t2.alt && this.semanticContext.equals(t2.semanticContext);\n  }\n  toString() {\n    return \"(\" + this.state + \",\" + this.alt + (null !== this.context ? \",[\" + this.context.toString() + \"]\" : \"\") + (this.semanticContext !== g.NONE ? \",\" + this.semanticContext.toString() : \"\") + (this.reachesIntoOuterContext > 0 ? \",up=\" + this.reachesIntoOuterContext : \"\") + \")\";\n  }\n};\nvar E = class _E {\n  constructor(t2, e2) {\n    this.start = t2, this.stop = e2;\n  }\n  clone() {\n    return new _E(this.start, this.stop);\n  }\n  contains(t2) {\n    return t2 >= this.start && t2 < this.stop;\n  }\n  toString() {\n    return this.start === this.stop - 1 ? this.start.toString() : this.start.toString() + \"..\" + (this.stop - 1).toString();\n  }\n  get length() {\n    return this.stop - this.start;\n  }\n};\nE.INVALID_INTERVAL = new E(-1, -2);\nvar _ = class __ {\n  constructor() {\n    this.intervals = null, this.readOnly = false;\n  }\n  first(t2) {\n    return null === this.intervals || 0 === this.intervals.length ? s.INVALID_TYPE : this.intervals[0].start;\n  }\n  addOne(t2) {\n    this.addInterval(new E(t2, t2 + 1));\n  }\n  addRange(t2, e2) {\n    this.addInterval(new E(t2, e2 + 1));\n  }\n  addInterval(t2) {\n    if (null === this.intervals)\n      this.intervals = [], this.intervals.push(t2.clone());\n    else {\n      for (let e2 = 0; e2 < this.intervals.length; e2++) {\n        const n2 = this.intervals[e2];\n        if (t2.stop < n2.start)\n          return void this.intervals.splice(e2, 0, t2);\n        if (t2.stop === n2.start)\n          return void (this.intervals[e2] = new E(t2.start, n2.stop));\n        if (t2.start <= n2.stop)\n          return this.intervals[e2] = new E(Math.min(n2.start, t2.start), Math.max(n2.stop, t2.stop)), void this.reduce(e2);\n      }\n      this.intervals.push(t2.clone());\n    }\n  }\n  addSet(t2) {\n    return null !== t2.intervals && t2.intervals.forEach((t3) => this.addInterval(t3), this), this;\n  }\n  reduce(t2) {\n    if (t2 < this.intervals.length - 1) {\n      const e2 = this.intervals[t2], n2 = this.intervals[t2 + 1];\n      e2.stop >= n2.stop ? (this.intervals.splice(t2 + 1, 1), this.reduce(t2)) : e2.stop >= n2.start && (this.intervals[t2] = new E(e2.start, n2.stop), this.intervals.splice(t2 + 1, 1));\n    }\n  }\n  complement(t2, e2) {\n    const n2 = new __();\n    return n2.addInterval(new E(t2, e2 + 1)), null !== this.intervals && this.intervals.forEach((t3) => n2.removeRange(t3)), n2;\n  }\n  contains(t2) {\n    if (null === this.intervals)\n      return false;\n    for (let e2 = 0; e2 < this.intervals.length; e2++)\n      if (this.intervals[e2].contains(t2))\n        return true;\n    return false;\n  }\n  removeRange(t2) {\n    if (t2.start === t2.stop - 1)\n      this.removeOne(t2.start);\n    else if (null !== this.intervals) {\n      let e2 = 0;\n      for (let n2 = 0; n2 < this.intervals.length; n2++) {\n        const n3 = this.intervals[e2];\n        if (t2.stop <= n3.start)\n          return;\n        if (t2.start > n3.start && t2.stop < n3.stop) {\n          this.intervals[e2] = new E(n3.start, t2.start);\n          const s2 = new E(t2.stop, n3.stop);\n          return void this.intervals.splice(e2, 0, s2);\n        }\n        t2.start <= n3.start && t2.stop >= n3.stop ? (this.intervals.splice(e2, 1), e2 -= 1) : t2.start < n3.stop ? this.intervals[e2] = new E(n3.start, t2.start) : t2.stop < n3.stop && (this.intervals[e2] = new E(t2.stop, n3.stop)), e2 += 1;\n      }\n    }\n  }\n  removeOne(t2) {\n    if (null !== this.intervals)\n      for (let e2 = 0; e2 < this.intervals.length; e2++) {\n        const n2 = this.intervals[e2];\n        if (t2 < n2.start)\n          return;\n        if (t2 === n2.start && t2 === n2.stop - 1)\n          return void this.intervals.splice(e2, 1);\n        if (t2 === n2.start)\n          return void (this.intervals[e2] = new E(n2.start + 1, n2.stop));\n        if (t2 === n2.stop - 1)\n          return void (this.intervals[e2] = new E(n2.start, n2.stop - 1));\n        if (t2 < n2.stop - 1) {\n          const s2 = new E(n2.start, t2);\n          return n2.start = t2 + 1, void this.intervals.splice(e2, 0, s2);\n        }\n      }\n  }\n  toString(t2, e2, n2) {\n    return t2 = t2 || null, e2 = e2 || null, n2 = n2 || false, null === this.intervals ? \"{}\" : null !== t2 || null !== e2 ? this.toTokenString(t2, e2) : n2 ? this.toCharString() : this.toIndexString();\n  }\n  toCharString() {\n    const t2 = [];\n    for (let e2 = 0; e2 < this.intervals.length; e2++) {\n      const n2 = this.intervals[e2];\n      n2.stop === n2.start + 1 ? n2.start === s.EOF ? t2.push(\"<EOF>\") : t2.push(\"'\" + String.fromCharCode(n2.start) + \"'\") : t2.push(\"'\" + String.fromCharCode(n2.start) + \"'..'\" + String.fromCharCode(n2.stop - 1) + \"'\");\n    }\n    return t2.length > 1 ? \"{\" + t2.join(\", \") + \"}\" : t2[0];\n  }\n  toIndexString() {\n    const t2 = [];\n    for (let e2 = 0; e2 < this.intervals.length; e2++) {\n      const n2 = this.intervals[e2];\n      n2.stop === n2.start + 1 ? n2.start === s.EOF ? t2.push(\"<EOF>\") : t2.push(n2.start.toString()) : t2.push(n2.start.toString() + \"..\" + (n2.stop - 1).toString());\n    }\n    return t2.length > 1 ? \"{\" + t2.join(\", \") + \"}\" : t2[0];\n  }\n  toTokenString(t2, e2) {\n    const n2 = [];\n    for (let s2 = 0; s2 < this.intervals.length; s2++) {\n      const i2 = this.intervals[s2];\n      for (let s3 = i2.start; s3 < i2.stop; s3++)\n        n2.push(this.elementName(t2, e2, s3));\n    }\n    return n2.length > 1 ? \"{\" + n2.join(\", \") + \"}\" : n2[0];\n  }\n  elementName(t2, e2, n2) {\n    return n2 === s.EOF ? \"<EOF>\" : n2 === s.EPSILON ? \"<EPSILON>\" : t2[n2] || e2[n2];\n  }\n  get length() {\n    return this.intervals.map((t2) => t2.length).reduce((t2, e2) => t2 + e2);\n  }\n};\nvar A = class _A {\n  constructor() {\n    this.atn = null, this.stateNumber = _A.INVALID_STATE_NUMBER, this.stateType = null, this.ruleIndex = 0, this.epsilonOnlyTransitions = false, this.transitions = [], this.nextTokenWithinRule = null;\n  }\n  toString() {\n    return this.stateNumber;\n  }\n  equals(t2) {\n    return t2 instanceof _A && this.stateNumber === t2.stateNumber;\n  }\n  isNonGreedyExitState() {\n    return false;\n  }\n  addTransition(t2, e2) {\n    void 0 === e2 && (e2 = -1), 0 === this.transitions.length ? this.epsilonOnlyTransitions = t2.isEpsilon : this.epsilonOnlyTransitions !== t2.isEpsilon && (this.epsilonOnlyTransitions = false), -1 === e2 ? this.transitions.push(t2) : this.transitions.splice(e2, 1, t2);\n  }\n};\nA.INVALID_TYPE = 0, A.BASIC = 1, A.RULE_START = 2, A.BLOCK_START = 3, A.PLUS_BLOCK_START = 4, A.STAR_BLOCK_START = 5, A.TOKEN_START = 6, A.RULE_STOP = 7, A.BLOCK_END = 8, A.STAR_LOOP_BACK = 9, A.STAR_LOOP_ENTRY = 10, A.PLUS_LOOP_BACK = 11, A.LOOP_END = 12, A.serializationNames = [\"INVALID\", \"BASIC\", \"RULE_START\", \"BLOCK_START\", \"PLUS_BLOCK_START\", \"STAR_BLOCK_START\", \"TOKEN_START\", \"RULE_STOP\", \"BLOCK_END\", \"STAR_LOOP_BACK\", \"STAR_LOOP_ENTRY\", \"PLUS_LOOP_BACK\", \"LOOP_END\"], A.INVALID_STATE_NUMBER = -1;\nvar C = class extends A {\n  constructor() {\n    return super(), this.stateType = A.RULE_STOP, this;\n  }\n};\nvar N = class {\n  constructor(t2) {\n    if (null == t2)\n      throw \"target cannot be null.\";\n    this.target = t2, this.isEpsilon = false, this.label = null;\n  }\n};\nN.EPSILON = 1, N.RANGE = 2, N.RULE = 3, N.PREDICATE = 4, N.ATOM = 5, N.ACTION = 6, N.SET = 7, N.NOT_SET = 8, N.WILDCARD = 9, N.PRECEDENCE = 10, N.serializationNames = [\"INVALID\", \"EPSILON\", \"RANGE\", \"RULE\", \"PREDICATE\", \"ATOM\", \"ACTION\", \"SET\", \"NOT_SET\", \"WILDCARD\", \"PRECEDENCE\"], N.serializationTypes = { EpsilonTransition: N.EPSILON, RangeTransition: N.RANGE, RuleTransition: N.RULE, PredicateTransition: N.PREDICATE, AtomTransition: N.ATOM, ActionTransition: N.ACTION, SetTransition: N.SET, NotSetTransition: N.NOT_SET, WildcardTransition: N.WILDCARD, PrecedencePredicateTransition: N.PRECEDENCE };\nvar y = class extends N {\n  constructor(t2, e2, n2, s2) {\n    super(t2), this.ruleIndex = e2, this.precedence = n2, this.followState = s2, this.serializationType = N.RULE, this.isEpsilon = true;\n  }\n  matches(t2, e2, n2) {\n    return false;\n  }\n};\nvar I = class extends N {\n  constructor(t2, e2) {\n    super(t2), this.serializationType = N.SET, null != e2 ? this.label = e2 : (this.label = new _(), this.label.addOne(s.INVALID_TYPE));\n  }\n  matches(t2, e2, n2) {\n    return this.label.contains(t2);\n  }\n  toString() {\n    return this.label.toString();\n  }\n};\nvar k = class extends I {\n  constructor(t2, e2) {\n    super(t2, e2), this.serializationType = N.NOT_SET;\n  }\n  matches(t2, e2, n2) {\n    return t2 >= e2 && t2 <= n2 && !super.matches(t2, e2, n2);\n  }\n  toString() {\n    return \"~\" + super.toString();\n  }\n};\nvar L = class extends N {\n  constructor(t2) {\n    super(t2), this.serializationType = N.WILDCARD;\n  }\n  matches(t2, e2, n2) {\n    return t2 >= e2 && t2 <= n2;\n  }\n  toString() {\n    return \".\";\n  }\n};\nvar O = class extends N {\n  constructor(t2) {\n    super(t2);\n  }\n};\nvar R = class {\n};\nvar v = class extends R {\n};\nvar w = class extends v {\n};\nvar P = class extends w {\n  get ruleContext() {\n    throw new Error(\"missing interface implementation\");\n  }\n};\nvar b = class extends w {\n};\nvar D = class extends b {\n};\nvar F = { toStringTree: function(t2, e2, n2) {\n  e2 = e2 || null, null !== (n2 = n2 || null) && (e2 = n2.ruleNames);\n  let s2 = F.getNodeText(t2, e2);\n  s2 = function(t3, e3) {\n    return t3 = t3.replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n  }(s2);\n  const i2 = t2.getChildCount();\n  if (0 === i2)\n    return s2;\n  let r2 = \"(\" + s2 + \" \";\n  i2 > 0 && (s2 = F.toStringTree(t2.getChild(0), e2), r2 = r2.concat(s2));\n  for (let n3 = 1; n3 < i2; n3++)\n    s2 = F.toStringTree(t2.getChild(n3), e2), r2 = r2.concat(\" \" + s2);\n  return r2 = r2.concat(\")\"), r2;\n}, getNodeText: function(t2, e2, n2) {\n  if (e2 = e2 || null, null !== (n2 = n2 || null) && (e2 = n2.ruleNames), null !== e2) {\n    if (t2 instanceof P) {\n      const n3 = t2.ruleContext.getAltNumber();\n      return 0 != n3 ? e2[t2.ruleIndex] + \":\" + n3 : e2[t2.ruleIndex];\n    }\n    if (t2 instanceof D)\n      return t2.toString();\n    if (t2 instanceof b && null !== t2.symbol)\n      return t2.symbol.text;\n  }\n  const i2 = t2.getPayload();\n  return i2 instanceof s ? i2.text : t2.getPayload().toString();\n}, getChildren: function(t2) {\n  const e2 = [];\n  for (let n2 = 0; n2 < t2.getChildCount(); n2++)\n    e2.push(t2.getChild(n2));\n  return e2;\n}, getAncestors: function(t2) {\n  let e2 = [];\n  for (t2 = t2.getParent(); null !== t2; )\n    e2 = [t2].concat(e2), t2 = t2.getParent();\n  return e2;\n}, findAllTokenNodes: function(t2, e2) {\n  return F.findAllNodes(t2, e2, true);\n}, findAllRuleNodes: function(t2, e2) {\n  return F.findAllNodes(t2, e2, false);\n}, findAllNodes: function(t2, e2, n2) {\n  const s2 = [];\n  return F._findAllNodes(t2, e2, n2, s2), s2;\n}, _findAllNodes: function(t2, e2, n2, s2) {\n  n2 && t2 instanceof b ? t2.symbol.type === e2 && s2.push(t2) : !n2 && t2 instanceof P && t2.ruleIndex === e2 && s2.push(t2);\n  for (let i2 = 0; i2 < t2.getChildCount(); i2++)\n    F._findAllNodes(t2.getChild(i2), e2, n2, s2);\n}, descendants: function(t2) {\n  let e2 = [t2];\n  for (let n2 = 0; n2 < t2.getChildCount(); n2++)\n    e2 = e2.concat(F.descendants(t2.getChild(n2)));\n  return e2;\n} };\nvar M = F;\nvar U = class extends P {\n  constructor(t2, e2) {\n    super(), this.parentCtx = t2 || null, this.invokingState = e2 || -1;\n  }\n  depth() {\n    let t2 = 0, e2 = this;\n    for (; null !== e2; )\n      e2 = e2.parentCtx, t2 += 1;\n    return t2;\n  }\n  isEmpty() {\n    return -1 === this.invokingState;\n  }\n  getSourceInterval() {\n    return E.INVALID_INTERVAL;\n  }\n  get ruleContext() {\n    return this;\n  }\n  getPayload() {\n    return this;\n  }\n  getText() {\n    return 0 === this.getChildCount() ? \"\" : this.children.map(function(t2) {\n      return t2.getText();\n    }).join(\"\");\n  }\n  getAltNumber() {\n    return 0;\n  }\n  setAltNumber(t2) {\n  }\n  getChild(t2) {\n    return null;\n  }\n  getChildCount() {\n    return 0;\n  }\n  accept(t2) {\n    return t2.visitChildren(this);\n  }\n  toStringTree(t2, e2) {\n    return M.toStringTree(this, t2, e2);\n  }\n  toString(t2, e2) {\n    t2 = t2 || null, e2 = e2 || null;\n    let n2 = this, s2 = \"[\";\n    for (; null !== n2 && n2 !== e2; ) {\n      if (null === t2)\n        n2.isEmpty() || (s2 += n2.invokingState);\n      else {\n        const e3 = n2.ruleIndex;\n        s2 += e3 >= 0 && e3 < t2.length ? t2[e3] : \"\" + e3;\n      }\n      null === n2.parentCtx || null === t2 && n2.parentCtx.isEmpty() || (s2 += \" \"), n2 = n2.parentCtx;\n    }\n    return s2 += \"]\", s2;\n  }\n};\nvar B = class _B {\n  constructor(t2) {\n    this.cachedHashCode = t2;\n  }\n  isEmpty() {\n    return this === _B.EMPTY;\n  }\n  hasEmptyPath() {\n    return this.getReturnState(this.length - 1) === _B.EMPTY_RETURN_STATE;\n  }\n  hashCode() {\n    return this.cachedHashCode;\n  }\n  updateHashCode(t2) {\n    t2.update(this.cachedHashCode);\n  }\n};\nB.EMPTY = null, B.EMPTY_RETURN_STATE = 2147483647, B.globalNodeCount = 1, B.id = B.globalNodeCount, B.trace_atn_sim = false;\nvar V = class _V extends B {\n  constructor(t2, e2) {\n    const n2 = new a();\n    return n2.update(t2, e2), super(n2.finish()), this.parents = t2, this.returnStates = e2, this;\n  }\n  isEmpty() {\n    return this.returnStates[0] === B.EMPTY_RETURN_STATE;\n  }\n  getParent(t2) {\n    return this.parents[t2];\n  }\n  getReturnState(t2) {\n    return this.returnStates[t2];\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _V && this.hashCode() === t2.hashCode() && i(this.returnStates, t2.returnStates) && i(this.parents, t2.parents);\n  }\n  toString() {\n    if (this.isEmpty())\n      return \"[]\";\n    {\n      let t2 = \"[\";\n      for (let e2 = 0; e2 < this.returnStates.length; e2++)\n        e2 > 0 && (t2 += \", \"), this.returnStates[e2] !== B.EMPTY_RETURN_STATE ? (t2 += this.returnStates[e2], null !== this.parents[e2] ? t2 = t2 + \" \" + this.parents[e2] : t2 += \"null\") : t2 += \"$\";\n      return t2 + \"]\";\n    }\n  }\n  get length() {\n    return this.returnStates.length;\n  }\n};\nvar z = class _z extends B {\n  constructor(t2, e2) {\n    let n2 = 0;\n    const s2 = new a();\n    null !== t2 ? s2.update(t2, e2) : s2.update(1), n2 = s2.finish(), super(n2), this.parentCtx = t2, this.returnState = e2;\n  }\n  getParent(t2) {\n    return this.parentCtx;\n  }\n  getReturnState(t2) {\n    return this.returnState;\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _z && this.hashCode() === t2.hashCode() && this.returnState === t2.returnState && (null == this.parentCtx ? null == t2.parentCtx : this.parentCtx.equals(t2.parentCtx));\n  }\n  toString() {\n    const t2 = null === this.parentCtx ? \"\" : this.parentCtx.toString();\n    return 0 === t2.length ? this.returnState === B.EMPTY_RETURN_STATE ? \"$\" : \"\" + this.returnState : this.returnState + \" \" + t2;\n  }\n  get length() {\n    return 1;\n  }\n  static create(t2, e2) {\n    return e2 === B.EMPTY_RETURN_STATE && null === t2 ? B.EMPTY : new _z(t2, e2);\n  }\n};\nvar q = class extends z {\n  constructor() {\n    super(null, B.EMPTY_RETURN_STATE);\n  }\n  isEmpty() {\n    return true;\n  }\n  getParent(t2) {\n    return null;\n  }\n  getReturnState(t2) {\n    return this.returnState;\n  }\n  equals(t2) {\n    return this === t2;\n  }\n  toString() {\n    return \"$\";\n  }\n};\nB.EMPTY = new q();\nvar H = \"h-\";\nvar K = class {\n  constructor(t2, e2) {\n    this.data = {}, this.hashFunction = t2 || l, this.equalsFunction = e2 || h;\n  }\n  set(t2, e2) {\n    const n2 = H + this.hashFunction(t2);\n    if (n2 in this.data) {\n      const s2 = this.data[n2];\n      for (let n3 = 0; n3 < s2.length; n3++) {\n        const i2 = s2[n3];\n        if (this.equalsFunction(t2, i2.key)) {\n          const t3 = i2.value;\n          return i2.value = e2, t3;\n        }\n      }\n      return s2.push({ key: t2, value: e2 }), e2;\n    }\n    return this.data[n2] = [{ key: t2, value: e2 }], e2;\n  }\n  containsKey(t2) {\n    const e2 = H + this.hashFunction(t2);\n    if (e2 in this.data) {\n      const n2 = this.data[e2];\n      for (let e3 = 0; e3 < n2.length; e3++) {\n        const s2 = n2[e3];\n        if (this.equalsFunction(t2, s2.key))\n          return true;\n      }\n    }\n    return false;\n  }\n  get(t2) {\n    const e2 = H + this.hashFunction(t2);\n    if (e2 in this.data) {\n      const n2 = this.data[e2];\n      for (let e3 = 0; e3 < n2.length; e3++) {\n        const s2 = n2[e3];\n        if (this.equalsFunction(t2, s2.key))\n          return s2.value;\n      }\n    }\n    return null;\n  }\n  entries() {\n    return Object.keys(this.data).filter((t2) => t2.startsWith(H)).flatMap((t2) => this.data[t2], this);\n  }\n  getKeys() {\n    return this.entries().map((t2) => t2.key);\n  }\n  getValues() {\n    return this.entries().map((t2) => t2.value);\n  }\n  toString() {\n    return \"[\" + this.entries().map((t2) => \"{\" + t2.key + \":\" + t2.value + \"}\").join(\", \") + \"]\";\n  }\n  get length() {\n    return Object.keys(this.data).filter((t2) => t2.startsWith(H)).map((t2) => this.data[t2].length, this).reduce((t2, e2) => t2 + e2, 0);\n  }\n};\nfunction Y(t2, e2) {\n  if (null == e2 && (e2 = U.EMPTY), null === e2.parentCtx || e2 === U.EMPTY)\n    return B.EMPTY;\n  const n2 = Y(t2, e2.parentCtx), s2 = t2.states[e2.invokingState].transitions[0];\n  return z.create(n2, s2.followState.stateNumber);\n}\nfunction G(t2, e2, n2) {\n  if (t2.isEmpty())\n    return t2;\n  let s2 = n2.get(t2) || null;\n  if (null !== s2)\n    return s2;\n  if (s2 = e2.get(t2), null !== s2)\n    return n2.set(t2, s2), s2;\n  let i2 = false, r2 = [];\n  for (let s3 = 0; s3 < r2.length; s3++) {\n    const o3 = G(t2.getParent(s3), e2, n2);\n    if (i2 || o3 !== t2.getParent(s3)) {\n      if (!i2) {\n        r2 = [];\n        for (let e3 = 0; e3 < t2.length; e3++)\n          r2[e3] = t2.getParent(e3);\n        i2 = true;\n      }\n      r2[s3] = o3;\n    }\n  }\n  if (!i2)\n    return e2.add(t2), n2.set(t2, t2), t2;\n  let o2 = null;\n  return o2 = 0 === r2.length ? B.EMPTY : 1 === r2.length ? z.create(r2[0], t2.getReturnState(0)) : new V(r2, t2.returnStates), e2.add(o2), n2.set(o2, o2), n2.set(t2, o2), o2;\n}\nfunction j(t2, e2, n2, s2) {\n  if (t2 === e2)\n    return t2;\n  if (t2 instanceof z && e2 instanceof z)\n    return function(t3, e3, n3, s3) {\n      if (null !== s3) {\n        let n4 = s3.get(t3, e3);\n        if (null !== n4)\n          return n4;\n        if (n4 = s3.get(e3, t3), null !== n4)\n          return n4;\n      }\n      const i2 = function(t4, e4, n4) {\n        if (n4) {\n          if (t4 === B.EMPTY)\n            return B.EMPTY;\n          if (e4 === B.EMPTY)\n            return B.EMPTY;\n        } else {\n          if (t4 === B.EMPTY && e4 === B.EMPTY)\n            return B.EMPTY;\n          if (t4 === B.EMPTY) {\n            const t5 = [e4.returnState, B.EMPTY_RETURN_STATE], n5 = [e4.parentCtx, null];\n            return new V(n5, t5);\n          }\n          if (e4 === B.EMPTY) {\n            const e5 = [t4.returnState, B.EMPTY_RETURN_STATE], n5 = [t4.parentCtx, null];\n            return new V(n5, e5);\n          }\n        }\n        return null;\n      }(t3, e3, n3);\n      if (null !== i2)\n        return null !== s3 && s3.set(t3, e3, i2), i2;\n      if (t3.returnState === e3.returnState) {\n        const i3 = j(t3.parentCtx, e3.parentCtx, n3, s3);\n        if (i3 === t3.parentCtx)\n          return t3;\n        if (i3 === e3.parentCtx)\n          return e3;\n        const r2 = z.create(i3, t3.returnState);\n        return null !== s3 && s3.set(t3, e3, r2), r2;\n      }\n      {\n        let n4 = null;\n        if ((t3 === e3 || null !== t3.parentCtx && t3.parentCtx === e3.parentCtx) && (n4 = t3.parentCtx), null !== n4) {\n          const i4 = [t3.returnState, e3.returnState];\n          t3.returnState > e3.returnState && (i4[0] = e3.returnState, i4[1] = t3.returnState);\n          const r3 = new V([n4, n4], i4);\n          return null !== s3 && s3.set(t3, e3, r3), r3;\n        }\n        const i3 = [t3.returnState, e3.returnState];\n        let r2 = [t3.parentCtx, e3.parentCtx];\n        t3.returnState > e3.returnState && (i3[0] = e3.returnState, i3[1] = t3.returnState, r2 = [e3.parentCtx, t3.parentCtx]);\n        const o2 = new V(r2, i3);\n        return null !== s3 && s3.set(t3, e3, o2), o2;\n      }\n    }(t2, e2, n2, s2);\n  if (n2) {\n    if (t2 instanceof q)\n      return t2;\n    if (e2 instanceof q)\n      return e2;\n  }\n  return t2 instanceof z && (t2 = new V([t2.getParent()], [t2.returnState])), e2 instanceof z && (e2 = new V([e2.getParent()], [e2.returnState])), function(t3, e3, n3, s3) {\n    if (null !== s3) {\n      let n4 = s3.get(t3, e3);\n      if (null !== n4)\n        return B.trace_atn_sim && console.log(\"mergeArrays a=\" + t3 + \",b=\" + e3 + \" -> previous\"), n4;\n      if (n4 = s3.get(e3, t3), null !== n4)\n        return B.trace_atn_sim && console.log(\"mergeArrays a=\" + t3 + \",b=\" + e3 + \" -> previous\"), n4;\n    }\n    let i2 = 0, r2 = 0, o2 = 0, a2 = new Array(t3.returnStates.length + e3.returnStates.length).fill(0), l2 = new Array(t3.returnStates.length + e3.returnStates.length).fill(null);\n    for (; i2 < t3.returnStates.length && r2 < e3.returnStates.length; ) {\n      const h3 = t3.parents[i2], c2 = e3.parents[r2];\n      if (t3.returnStates[i2] === e3.returnStates[r2]) {\n        const e4 = t3.returnStates[i2];\n        e4 === B.EMPTY_RETURN_STATE && null === h3 && null === c2 || null !== h3 && null !== c2 && h3 === c2 ? (l2[o2] = h3, a2[o2] = e4) : (l2[o2] = j(h3, c2, n3, s3), a2[o2] = e4), i2 += 1, r2 += 1;\n      } else\n        t3.returnStates[i2] < e3.returnStates[r2] ? (l2[o2] = h3, a2[o2] = t3.returnStates[i2], i2 += 1) : (l2[o2] = c2, a2[o2] = e3.returnStates[r2], r2 += 1);\n      o2 += 1;\n    }\n    if (i2 < t3.returnStates.length)\n      for (let e4 = i2; e4 < t3.returnStates.length; e4++)\n        l2[o2] = t3.parents[e4], a2[o2] = t3.returnStates[e4], o2 += 1;\n    else\n      for (let t4 = r2; t4 < e3.returnStates.length; t4++)\n        l2[o2] = e3.parents[t4], a2[o2] = e3.returnStates[t4], o2 += 1;\n    if (o2 < l2.length) {\n      if (1 === o2) {\n        const n4 = z.create(l2[0], a2[0]);\n        return null !== s3 && s3.set(t3, e3, n4), n4;\n      }\n      l2 = l2.slice(0, o2), a2 = a2.slice(0, o2);\n    }\n    const h2 = new V(l2, a2);\n    return h2.equals(t3) ? (null !== s3 && s3.set(t3, e3, t3), B.trace_atn_sim && console.log(\"mergeArrays a=\" + t3 + \",b=\" + e3 + \" -> a\"), t3) : h2.equals(e3) ? (null !== s3 && s3.set(t3, e3, e3), B.trace_atn_sim && console.log(\"mergeArrays a=\" + t3 + \",b=\" + e3 + \" -> b\"), e3) : (function(t4) {\n      const e4 = new K();\n      for (let n4 = 0; n4 < t4.length; n4++) {\n        const s4 = t4[n4];\n        e4.containsKey(s4) || e4.set(s4, s4);\n      }\n      for (let n4 = 0; n4 < t4.length; n4++)\n        t4[n4] = e4.get(t4[n4]);\n    }(l2), null !== s3 && s3.set(t3, e3, h2), B.trace_atn_sim && console.log(\"mergeArrays a=\" + t3 + \",b=\" + e3 + \" -> \" + h2), h2);\n  }(t2, e2, n2, s2);\n}\nvar W = class _W {\n  constructor() {\n    this.data = [];\n  }\n  add(t2) {\n    this.data[t2] = true;\n  }\n  or(t2) {\n    Object.keys(t2.data).map((t3) => this.add(t3), this);\n  }\n  remove(t2) {\n    delete this.data[t2];\n  }\n  has(t2) {\n    return true === this.data[t2];\n  }\n  values() {\n    return Object.keys(this.data);\n  }\n  minValue() {\n    return Math.min.apply(null, this.values());\n  }\n  hashCode() {\n    return a.hashStuff(this.values());\n  }\n  equals(t2) {\n    return t2 instanceof _W && i(this.data, t2.data);\n  }\n  toString() {\n    return \"{\" + this.values().join(\", \") + \"}\";\n  }\n  get length() {\n    return this.values().length;\n  }\n};\nvar $ = class _$ {\n  constructor(t2) {\n    this.atn = t2;\n  }\n  getDecisionLookahead(t2) {\n    if (null === t2)\n      return null;\n    const e2 = t2.transitions.length, n2 = [];\n    for (let s2 = 0; s2 < e2; s2++) {\n      n2[s2] = new _();\n      const e3 = new p(), i2 = false;\n      this._LOOK(t2.transition(s2).target, null, B.EMPTY, n2[s2], e3, new W(), i2, false), (0 === n2[s2].length || n2[s2].contains(_$.HIT_PRED)) && (n2[s2] = null);\n    }\n    return n2;\n  }\n  LOOK(t2, e2, n2) {\n    const s2 = new _(), i2 = null !== (n2 = n2 || null) ? Y(t2.atn, n2) : null;\n    return this._LOOK(t2, e2, i2, s2, new p(), new W(), true, true), s2;\n  }\n  _LOOK(t2, e2, n2, i2, r2, o2, a2, l2) {\n    const h2 = new m({ state: t2, alt: 0, context: n2 }, null);\n    if (!r2.has(h2)) {\n      if (r2.add(h2), t2 === e2) {\n        if (null === n2)\n          return void i2.addOne(s.EPSILON);\n        if (n2.isEmpty() && l2)\n          return void i2.addOne(s.EOF);\n      }\n      if (t2 instanceof C) {\n        if (null === n2)\n          return void i2.addOne(s.EPSILON);\n        if (n2.isEmpty() && l2)\n          return void i2.addOne(s.EOF);\n        if (n2 !== B.EMPTY) {\n          const s2 = o2.has(t2.ruleIndex);\n          try {\n            o2.remove(t2.ruleIndex);\n            for (let t3 = 0; t3 < n2.length; t3++) {\n              const s3 = this.atn.states[n2.getReturnState(t3)];\n              this._LOOK(s3, e2, n2.getParent(t3), i2, r2, o2, a2, l2);\n            }\n          } finally {\n            s2 && o2.add(t2.ruleIndex);\n          }\n          return;\n        }\n      }\n      for (let h3 = 0; h3 < t2.transitions.length; h3++) {\n        const c2 = t2.transitions[h3];\n        if (c2.constructor === y) {\n          if (o2.has(c2.target.ruleIndex))\n            continue;\n          const t3 = z.create(n2, c2.followState.stateNumber);\n          try {\n            o2.add(c2.target.ruleIndex), this._LOOK(c2.target, e2, t3, i2, r2, o2, a2, l2);\n          } finally {\n            o2.remove(c2.target.ruleIndex);\n          }\n        } else if (c2 instanceof O)\n          a2 ? this._LOOK(c2.target, e2, n2, i2, r2, o2, a2, l2) : i2.addOne(_$.HIT_PRED);\n        else if (c2.isEpsilon)\n          this._LOOK(c2.target, e2, n2, i2, r2, o2, a2, l2);\n        else if (c2.constructor === L)\n          i2.addRange(s.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n        else {\n          let t3 = c2.label;\n          null !== t3 && (c2 instanceof k && (t3 = t3.complement(s.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType)), i2.addSet(t3));\n        }\n      }\n    }\n  }\n};\n$.HIT_PRED = s.INVALID_TYPE;\nvar X = class {\n  constructor(t2, e2) {\n    this.grammarType = t2, this.maxTokenType = e2, this.states = [], this.decisionToState = [], this.ruleToStartState = [], this.ruleToStopState = null, this.modeNameToStartState = {}, this.ruleToTokenType = null, this.lexerActions = null, this.modeToStartState = [];\n  }\n  nextTokensInContext(t2, e2) {\n    return new $(this).LOOK(t2, null, e2);\n  }\n  nextTokensNoContext(t2) {\n    return null !== t2.nextTokenWithinRule || (t2.nextTokenWithinRule = this.nextTokensInContext(t2, null), t2.nextTokenWithinRule.readOnly = true), t2.nextTokenWithinRule;\n  }\n  nextTokens(t2, e2) {\n    return void 0 === e2 ? this.nextTokensNoContext(t2) : this.nextTokensInContext(t2, e2);\n  }\n  addState(t2) {\n    null !== t2 && (t2.atn = this, t2.stateNumber = this.states.length), this.states.push(t2);\n  }\n  removeState(t2) {\n    this.states[t2.stateNumber] = null;\n  }\n  defineDecisionState(t2) {\n    return this.decisionToState.push(t2), t2.decision = this.decisionToState.length - 1, t2.decision;\n  }\n  getDecisionState(t2) {\n    return 0 === this.decisionToState.length ? null : this.decisionToState[t2];\n  }\n  getExpectedTokens(t2, e2) {\n    if (t2 < 0 || t2 >= this.states.length)\n      throw \"Invalid state number.\";\n    const n2 = this.states[t2];\n    let i2 = this.nextTokens(n2);\n    if (!i2.contains(s.EPSILON))\n      return i2;\n    const r2 = new _();\n    for (r2.addSet(i2), r2.removeOne(s.EPSILON); null !== e2 && e2.invokingState >= 0 && i2.contains(s.EPSILON); ) {\n      const t3 = this.states[e2.invokingState].transitions[0];\n      i2 = this.nextTokens(t3.followState), r2.addSet(i2), r2.removeOne(s.EPSILON), e2 = e2.parentCtx;\n    }\n    return i2.contains(s.EPSILON) && r2.addOne(s.EOF), r2;\n  }\n};\nX.INVALID_ALT_NUMBER = 0;\nvar J = class extends A {\n  constructor() {\n    super(), this.stateType = A.BASIC;\n  }\n};\nvar Z = class extends A {\n  constructor() {\n    return super(), this.decision = -1, this.nonGreedy = false, this;\n  }\n};\nvar Q = class extends Z {\n  constructor() {\n    return super(), this.endState = null, this;\n  }\n};\nvar tt = class extends A {\n  constructor() {\n    return super(), this.stateType = A.BLOCK_END, this.startState = null, this;\n  }\n};\nvar et = class extends A {\n  constructor() {\n    return super(), this.stateType = A.LOOP_END, this.loopBackState = null, this;\n  }\n};\nvar nt = class extends A {\n  constructor() {\n    return super(), this.stateType = A.RULE_START, this.stopState = null, this.isPrecedenceRule = false, this;\n  }\n};\nvar st = class extends Z {\n  constructor() {\n    return super(), this.stateType = A.TOKEN_START, this;\n  }\n};\nvar it = class extends Z {\n  constructor() {\n    return super(), this.stateType = A.PLUS_LOOP_BACK, this;\n  }\n};\nvar rt = class extends A {\n  constructor() {\n    return super(), this.stateType = A.STAR_LOOP_BACK, this;\n  }\n};\nvar ot = class extends Z {\n  constructor() {\n    return super(), this.stateType = A.STAR_LOOP_ENTRY, this.loopBackState = null, this.isPrecedenceDecision = null, this;\n  }\n};\nvar at = class extends Q {\n  constructor() {\n    return super(), this.stateType = A.PLUS_BLOCK_START, this.loopBackState = null, this;\n  }\n};\nvar lt = class extends Q {\n  constructor() {\n    return super(), this.stateType = A.STAR_BLOCK_START, this;\n  }\n};\nvar ht = class extends Q {\n  constructor() {\n    return super(), this.stateType = A.BLOCK_START, this;\n  }\n};\nvar ct = class extends N {\n  constructor(t2, e2) {\n    super(t2), this.label_ = e2, this.label = this.makeLabel(), this.serializationType = N.ATOM;\n  }\n  makeLabel() {\n    const t2 = new _();\n    return t2.addOne(this.label_), t2;\n  }\n  matches(t2, e2, n2) {\n    return this.label_ === t2;\n  }\n  toString() {\n    return this.label_;\n  }\n};\nvar ut = class extends N {\n  constructor(t2, e2, n2) {\n    super(t2), this.serializationType = N.RANGE, this.start = e2, this.stop = n2, this.label = this.makeLabel();\n  }\n  makeLabel() {\n    const t2 = new _();\n    return t2.addRange(this.start, this.stop), t2;\n  }\n  matches(t2, e2, n2) {\n    return t2 >= this.start && t2 <= this.stop;\n  }\n  toString() {\n    return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n  }\n};\nvar dt = class extends N {\n  constructor(t2, e2, n2, s2) {\n    super(t2), this.serializationType = N.ACTION, this.ruleIndex = e2, this.actionIndex = void 0 === n2 ? -1 : n2, this.isCtxDependent = void 0 !== s2 && s2, this.isEpsilon = true;\n  }\n  matches(t2, e2, n2) {\n    return false;\n  }\n  toString() {\n    return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n  }\n};\nvar pt = class extends N {\n  constructor(t2, e2) {\n    super(t2), this.serializationType = N.EPSILON, this.isEpsilon = true, this.outermostPrecedenceReturn = e2;\n  }\n  matches(t2, e2, n2) {\n    return false;\n  }\n  toString() {\n    return \"epsilon\";\n  }\n};\nvar gt = class _gt extends g {\n  constructor(t2, e2, n2) {\n    super(), this.ruleIndex = void 0 === t2 ? -1 : t2, this.predIndex = void 0 === e2 ? -1 : e2, this.isCtxDependent = void 0 !== n2 && n2;\n  }\n  evaluate(t2, e2) {\n    const n2 = this.isCtxDependent ? e2 : null;\n    return t2.sempred(n2, this.ruleIndex, this.predIndex);\n  }\n  updateHashCode(t2) {\n    t2.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _gt && this.ruleIndex === t2.ruleIndex && this.predIndex === t2.predIndex && this.isCtxDependent === t2.isCtxDependent;\n  }\n  toString() {\n    return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n  }\n};\ng.NONE = new gt();\nvar ft = class extends O {\n  constructor(t2, e2, n2, s2) {\n    super(t2), this.serializationType = N.PREDICATE, this.ruleIndex = e2, this.predIndex = n2, this.isCtxDependent = s2, this.isEpsilon = true;\n  }\n  matches(t2, e2, n2) {\n    return false;\n  }\n  getPredicate() {\n    return new gt(this.ruleIndex, this.predIndex, this.isCtxDependent);\n  }\n  toString() {\n    return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n  }\n};\nvar xt = class _xt extends g {\n  constructor(t2) {\n    super(), this.precedence = void 0 === t2 ? 0 : t2;\n  }\n  evaluate(t2, e2) {\n    return t2.precpred(e2, this.precedence);\n  }\n  evalPrecedence(t2, e2) {\n    return t2.precpred(e2, this.precedence) ? g.NONE : null;\n  }\n  compareTo(t2) {\n    return this.precedence - t2.precedence;\n  }\n  updateHashCode(t2) {\n    t2.update(this.precedence);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _xt && this.precedence === t2.precedence;\n  }\n  toString() {\n    return \"{\" + this.precedence + \">=prec}?\";\n  }\n};\ng.PrecedencePredicate = xt;\nvar Tt = class extends O {\n  constructor(t2, e2) {\n    super(t2), this.serializationType = N.PRECEDENCE, this.precedence = e2, this.isEpsilon = true;\n  }\n  matches(t2, e2, n2) {\n    return false;\n  }\n  getPredicate() {\n    return new xt(this.precedence);\n  }\n  toString() {\n    return this.precedence + \" >= _p\";\n  }\n};\nvar St = class {\n  constructor(t2) {\n    void 0 === t2 && (t2 = null), this.readOnly = false, this.verifyATN = null === t2 || t2.verifyATN, this.generateRuleBypassTransitions = null !== t2 && t2.generateRuleBypassTransitions;\n  }\n};\nSt.defaultOptions = new St(), St.defaultOptions.readOnly = true;\nvar mt = class {\n  constructor(t2) {\n    this.actionType = t2, this.isPositionDependent = false;\n  }\n  hashCode() {\n    const t2 = new a();\n    return this.updateHashCode(t2), t2.finish();\n  }\n  updateHashCode(t2) {\n    t2.update(this.actionType);\n  }\n  equals(t2) {\n    return this === t2;\n  }\n};\nvar Et = class extends mt {\n  constructor() {\n    super(6);\n  }\n  execute(t2) {\n    t2.skip();\n  }\n  toString() {\n    return \"skip\";\n  }\n};\nEt.INSTANCE = new Et();\nvar _t = class __t extends mt {\n  constructor(t2) {\n    super(0), this.channel = t2;\n  }\n  execute(t2) {\n    t2._channel = this.channel;\n  }\n  updateHashCode(t2) {\n    t2.update(this.actionType, this.channel);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof __t && this.channel === t2.channel;\n  }\n  toString() {\n    return \"channel(\" + this.channel + \")\";\n  }\n};\nvar At = class _At extends mt {\n  constructor(t2, e2) {\n    super(1), this.ruleIndex = t2, this.actionIndex = e2, this.isPositionDependent = true;\n  }\n  execute(t2) {\n    t2.action(null, this.ruleIndex, this.actionIndex);\n  }\n  updateHashCode(t2) {\n    t2.update(this.actionType, this.ruleIndex, this.actionIndex);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _At && this.ruleIndex === t2.ruleIndex && this.actionIndex === t2.actionIndex;\n  }\n};\nvar Ct = class extends mt {\n  constructor() {\n    super(3);\n  }\n  execute(t2) {\n    t2.more();\n  }\n  toString() {\n    return \"more\";\n  }\n};\nCt.INSTANCE = new Ct();\nvar Nt = class _Nt extends mt {\n  constructor(t2) {\n    super(7), this.type = t2;\n  }\n  execute(t2) {\n    t2.type = this.type;\n  }\n  updateHashCode(t2) {\n    t2.update(this.actionType, this.type);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _Nt && this.type === t2.type;\n  }\n  toString() {\n    return \"type(\" + this.type + \")\";\n  }\n};\nvar yt = class _yt extends mt {\n  constructor(t2) {\n    super(5), this.mode = t2;\n  }\n  execute(t2) {\n    t2.pushMode(this.mode);\n  }\n  updateHashCode(t2) {\n    t2.update(this.actionType, this.mode);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _yt && this.mode === t2.mode;\n  }\n  toString() {\n    return \"pushMode(\" + this.mode + \")\";\n  }\n};\nvar It = class extends mt {\n  constructor() {\n    super(4);\n  }\n  execute(t2) {\n    t2.popMode();\n  }\n  toString() {\n    return \"popMode\";\n  }\n};\nIt.INSTANCE = new It();\nvar kt = class _kt extends mt {\n  constructor(t2) {\n    super(2), this.mode = t2;\n  }\n  execute(t2) {\n    t2.mode(this.mode);\n  }\n  updateHashCode(t2) {\n    t2.update(this.actionType, this.mode);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _kt && this.mode === t2.mode;\n  }\n  toString() {\n    return \"mode(\" + this.mode + \")\";\n  }\n};\nfunction Lt(t2, e2) {\n  const n2 = [];\n  return n2[t2 - 1] = e2, n2.map(function(t3) {\n    return e2;\n  });\n}\nvar Ot = class {\n  constructor(t2) {\n    null == t2 && (t2 = St.defaultOptions), this.deserializationOptions = t2, this.stateFactories = null, this.actionFactories = null;\n  }\n  deserialize(t2) {\n    const e2 = this.reset(t2);\n    this.checkVersion(e2), e2 && this.skipUUID();\n    const n2 = this.readATN();\n    this.readStates(n2, e2), this.readRules(n2, e2), this.readModes(n2);\n    const s2 = [];\n    return this.readSets(n2, s2, this.readInt.bind(this)), e2 && this.readSets(n2, s2, this.readInt32.bind(this)), this.readEdges(n2, s2), this.readDecisions(n2), this.readLexerActions(n2, e2), this.markPrecedenceDecisions(n2), this.verifyATN(n2), this.deserializationOptions.generateRuleBypassTransitions && 1 === n2.grammarType && (this.generateRuleBypassTransitions(n2), this.verifyATN(n2)), n2;\n  }\n  reset(t2) {\n    if (3 === (t2.charCodeAt ? t2.charCodeAt(0) : t2[0])) {\n      const e2 = function(t3) {\n        const e3 = t3.charCodeAt(0);\n        return e3 > 1 ? e3 - 2 : e3 + 65534;\n      }, n2 = t2.split(\"\").map(e2);\n      return n2[0] = t2.charCodeAt(0), this.data = n2, this.pos = 0, true;\n    }\n    return this.data = t2, this.pos = 0, false;\n  }\n  skipUUID() {\n    let t2 = 0;\n    for (; t2++ < 8; )\n      this.readInt();\n  }\n  checkVersion(t2) {\n    const e2 = this.readInt();\n    if (!t2 && 4 !== e2)\n      throw \"Could not deserialize ATN with version \" + e2 + \" (expected 4).\";\n  }\n  readATN() {\n    const t2 = this.readInt(), e2 = this.readInt();\n    return new X(t2, e2);\n  }\n  readStates(t2, e2) {\n    let n2, s2, i2;\n    const r2 = [], o2 = [], a2 = this.readInt();\n    for (let n3 = 0; n3 < a2; n3++) {\n      const n4 = this.readInt();\n      if (n4 === A.INVALID_TYPE) {\n        t2.addState(null);\n        continue;\n      }\n      let s3 = this.readInt();\n      e2 && 65535 === s3 && (s3 = -1);\n      const i3 = this.stateFactory(n4, s3);\n      if (n4 === A.LOOP_END) {\n        const t3 = this.readInt();\n        r2.push([i3, t3]);\n      } else if (i3 instanceof Q) {\n        const t3 = this.readInt();\n        o2.push([i3, t3]);\n      }\n      t2.addState(i3);\n    }\n    for (n2 = 0; n2 < r2.length; n2++)\n      s2 = r2[n2], s2[0].loopBackState = t2.states[s2[1]];\n    for (n2 = 0; n2 < o2.length; n2++)\n      s2 = o2[n2], s2[0].endState = t2.states[s2[1]];\n    let l2 = this.readInt();\n    for (n2 = 0; n2 < l2; n2++)\n      i2 = this.readInt(), t2.states[i2].nonGreedy = true;\n    let h2 = this.readInt();\n    for (n2 = 0; n2 < h2; n2++)\n      i2 = this.readInt(), t2.states[i2].isPrecedenceRule = true;\n  }\n  readRules(t2, e2) {\n    let n2;\n    const i2 = this.readInt();\n    for (0 === t2.grammarType && (t2.ruleToTokenType = Lt(i2, 0)), t2.ruleToStartState = Lt(i2, 0), n2 = 0; n2 < i2; n2++) {\n      const i3 = this.readInt();\n      if (t2.ruleToStartState[n2] = t2.states[i3], 0 === t2.grammarType) {\n        let i4 = this.readInt();\n        e2 && 65535 === i4 && (i4 = s.EOF), t2.ruleToTokenType[n2] = i4;\n      }\n    }\n    for (t2.ruleToStopState = Lt(i2, 0), n2 = 0; n2 < t2.states.length; n2++) {\n      const e3 = t2.states[n2];\n      e3 instanceof C && (t2.ruleToStopState[e3.ruleIndex] = e3, t2.ruleToStartState[e3.ruleIndex].stopState = e3);\n    }\n  }\n  readModes(t2) {\n    const e2 = this.readInt();\n    for (let n2 = 0; n2 < e2; n2++) {\n      let e3 = this.readInt();\n      t2.modeToStartState.push(t2.states[e3]);\n    }\n  }\n  readSets(t2, e2, n2) {\n    const s2 = this.readInt();\n    for (let t3 = 0; t3 < s2; t3++) {\n      const t4 = new _();\n      e2.push(t4);\n      const s3 = this.readInt();\n      0 !== this.readInt() && t4.addOne(-1);\n      for (let e3 = 0; e3 < s3; e3++) {\n        const e4 = n2(), s4 = n2();\n        t4.addRange(e4, s4);\n      }\n    }\n  }\n  readEdges(t2, e2) {\n    let n2, s2, i2, r2, o2;\n    const a2 = this.readInt();\n    for (n2 = 0; n2 < a2; n2++) {\n      const n3 = this.readInt(), s3 = this.readInt(), i3 = this.readInt(), o3 = this.readInt(), a3 = this.readInt(), l2 = this.readInt();\n      r2 = this.edgeFactory(t2, i3, n3, s3, o3, a3, l2, e2), t2.states[n3].addTransition(r2);\n    }\n    for (n2 = 0; n2 < t2.states.length; n2++)\n      for (i2 = t2.states[n2], s2 = 0; s2 < i2.transitions.length; s2++) {\n        const e3 = i2.transitions[s2];\n        if (!(e3 instanceof y))\n          continue;\n        let n3 = -1;\n        t2.ruleToStartState[e3.target.ruleIndex].isPrecedenceRule && 0 === e3.precedence && (n3 = e3.target.ruleIndex), r2 = new pt(e3.followState, n3), t2.ruleToStopState[e3.target.ruleIndex].addTransition(r2);\n      }\n    for (n2 = 0; n2 < t2.states.length; n2++) {\n      if (i2 = t2.states[n2], i2 instanceof Q) {\n        if (null === i2.endState)\n          throw \"IllegalState\";\n        if (null !== i2.endState.startState)\n          throw \"IllegalState\";\n        i2.endState.startState = i2;\n      }\n      if (i2 instanceof it)\n        for (s2 = 0; s2 < i2.transitions.length; s2++)\n          o2 = i2.transitions[s2].target, o2 instanceof at && (o2.loopBackState = i2);\n      else if (i2 instanceof rt)\n        for (s2 = 0; s2 < i2.transitions.length; s2++)\n          o2 = i2.transitions[s2].target, o2 instanceof ot && (o2.loopBackState = i2);\n    }\n  }\n  readDecisions(t2) {\n    const e2 = this.readInt();\n    for (let n2 = 0; n2 < e2; n2++) {\n      const e3 = this.readInt(), s2 = t2.states[e3];\n      t2.decisionToState.push(s2), s2.decision = n2;\n    }\n  }\n  readLexerActions(t2, e2) {\n    if (0 === t2.grammarType) {\n      const n2 = this.readInt();\n      t2.lexerActions = Lt(n2, null);\n      for (let s2 = 0; s2 < n2; s2++) {\n        const n3 = this.readInt();\n        let i2 = this.readInt();\n        e2 && 65535 === i2 && (i2 = -1);\n        let r2 = this.readInt();\n        e2 && 65535 === r2 && (r2 = -1), t2.lexerActions[s2] = this.lexerActionFactory(n3, i2, r2);\n      }\n    }\n  }\n  generateRuleBypassTransitions(t2) {\n    let e2;\n    const n2 = t2.ruleToStartState.length;\n    for (e2 = 0; e2 < n2; e2++)\n      t2.ruleToTokenType[e2] = t2.maxTokenType + e2 + 1;\n    for (e2 = 0; e2 < n2; e2++)\n      this.generateRuleBypassTransition(t2, e2);\n  }\n  generateRuleBypassTransition(t2, e2) {\n    let n2, s2;\n    const i2 = new ht();\n    i2.ruleIndex = e2, t2.addState(i2);\n    const r2 = new tt();\n    r2.ruleIndex = e2, t2.addState(r2), i2.endState = r2, t2.defineDecisionState(i2), r2.startState = i2;\n    let o2 = null, a2 = null;\n    if (t2.ruleToStartState[e2].isPrecedenceRule) {\n      for (a2 = null, n2 = 0; n2 < t2.states.length; n2++)\n        if (s2 = t2.states[n2], this.stateIsEndStateFor(s2, e2)) {\n          a2 = s2, o2 = s2.loopBackState.transitions[0];\n          break;\n        }\n      if (null === o2)\n        throw \"Couldn't identify final state of the precedence rule prefix section.\";\n    } else\n      a2 = t2.ruleToStopState[e2];\n    for (n2 = 0; n2 < t2.states.length; n2++) {\n      s2 = t2.states[n2];\n      for (let t3 = 0; t3 < s2.transitions.length; t3++) {\n        const e3 = s2.transitions[t3];\n        e3 !== o2 && e3.target === a2 && (e3.target = r2);\n      }\n    }\n    const l2 = t2.ruleToStartState[e2], h2 = l2.transitions.length;\n    for (; h2 > 0; )\n      i2.addTransition(l2.transitions[h2 - 1]), l2.transitions = l2.transitions.slice(-1);\n    t2.ruleToStartState[e2].addTransition(new pt(i2)), r2.addTransition(new pt(a2));\n    const c2 = new J();\n    t2.addState(c2), c2.addTransition(new ct(r2, t2.ruleToTokenType[e2])), i2.addTransition(new pt(c2));\n  }\n  stateIsEndStateFor(t2, e2) {\n    if (t2.ruleIndex !== e2)\n      return null;\n    if (!(t2 instanceof ot))\n      return null;\n    const n2 = t2.transitions[t2.transitions.length - 1].target;\n    return n2 instanceof et && n2.epsilonOnlyTransitions && n2.transitions[0].target instanceof C ? t2 : null;\n  }\n  markPrecedenceDecisions(t2) {\n    for (let e2 = 0; e2 < t2.states.length; e2++) {\n      const n2 = t2.states[e2];\n      if (n2 instanceof ot && t2.ruleToStartState[n2.ruleIndex].isPrecedenceRule) {\n        const t3 = n2.transitions[n2.transitions.length - 1].target;\n        t3 instanceof et && t3.epsilonOnlyTransitions && t3.transitions[0].target instanceof C && (n2.isPrecedenceDecision = true);\n      }\n    }\n  }\n  verifyATN(t2) {\n    if (this.deserializationOptions.verifyATN)\n      for (let e2 = 0; e2 < t2.states.length; e2++) {\n        const n2 = t2.states[e2];\n        if (null !== n2)\n          if (this.checkCondition(n2.epsilonOnlyTransitions || n2.transitions.length <= 1), n2 instanceof at)\n            this.checkCondition(null !== n2.loopBackState);\n          else if (n2 instanceof ot)\n            if (this.checkCondition(null !== n2.loopBackState), this.checkCondition(2 === n2.transitions.length), n2.transitions[0].target instanceof lt)\n              this.checkCondition(n2.transitions[1].target instanceof et), this.checkCondition(!n2.nonGreedy);\n            else {\n              if (!(n2.transitions[0].target instanceof et))\n                throw \"IllegalState\";\n              this.checkCondition(n2.transitions[1].target instanceof lt), this.checkCondition(n2.nonGreedy);\n            }\n          else\n            n2 instanceof rt ? (this.checkCondition(1 === n2.transitions.length), this.checkCondition(n2.transitions[0].target instanceof ot)) : n2 instanceof et ? this.checkCondition(null !== n2.loopBackState) : n2 instanceof nt ? this.checkCondition(null !== n2.stopState) : n2 instanceof Q ? this.checkCondition(null !== n2.endState) : n2 instanceof tt ? this.checkCondition(null !== n2.startState) : n2 instanceof Z ? this.checkCondition(n2.transitions.length <= 1 || n2.decision >= 0) : this.checkCondition(n2.transitions.length <= 1 || n2 instanceof C);\n      }\n  }\n  checkCondition(t2, e2) {\n    if (!t2)\n      throw null == e2 && (e2 = \"IllegalState\"), e2;\n  }\n  readInt() {\n    return this.data[this.pos++];\n  }\n  readInt32() {\n    return this.readInt() | this.readInt() << 16;\n  }\n  edgeFactory(t2, e2, n2, i2, r2, o2, a2, l2) {\n    const h2 = t2.states[i2];\n    switch (e2) {\n      case N.EPSILON:\n        return new pt(h2);\n      case N.RANGE:\n        return new ut(h2, 0 !== a2 ? s.EOF : r2, o2);\n      case N.RULE:\n        return new y(t2.states[r2], o2, a2, h2);\n      case N.PREDICATE:\n        return new ft(h2, r2, o2, 0 !== a2);\n      case N.PRECEDENCE:\n        return new Tt(h2, r2);\n      case N.ATOM:\n        return new ct(h2, 0 !== a2 ? s.EOF : r2);\n      case N.ACTION:\n        return new dt(h2, r2, o2, 0 !== a2);\n      case N.SET:\n        return new I(h2, l2[r2]);\n      case N.NOT_SET:\n        return new k(h2, l2[r2]);\n      case N.WILDCARD:\n        return new L(h2);\n      default:\n        throw \"The specified transition type: \" + e2 + \" is not valid.\";\n    }\n  }\n  stateFactory(t2, e2) {\n    if (null === this.stateFactories) {\n      const t3 = [];\n      t3[A.INVALID_TYPE] = null, t3[A.BASIC] = () => new J(), t3[A.RULE_START] = () => new nt(), t3[A.BLOCK_START] = () => new ht(), t3[A.PLUS_BLOCK_START] = () => new at(), t3[A.STAR_BLOCK_START] = () => new lt(), t3[A.TOKEN_START] = () => new st(), t3[A.RULE_STOP] = () => new C(), t3[A.BLOCK_END] = () => new tt(), t3[A.STAR_LOOP_BACK] = () => new rt(), t3[A.STAR_LOOP_ENTRY] = () => new ot(), t3[A.PLUS_LOOP_BACK] = () => new it(), t3[A.LOOP_END] = () => new et(), this.stateFactories = t3;\n    }\n    if (t2 > this.stateFactories.length || null === this.stateFactories[t2])\n      throw \"The specified state type \" + t2 + \" is not valid.\";\n    {\n      const n2 = this.stateFactories[t2]();\n      if (null !== n2)\n        return n2.ruleIndex = e2, n2;\n    }\n  }\n  lexerActionFactory(t2, e2, n2) {\n    if (null === this.actionFactories) {\n      const t3 = [];\n      t3[0] = (t4, e3) => new _t(t4), t3[1] = (t4, e3) => new At(t4, e3), t3[2] = (t4, e3) => new kt(t4), t3[3] = (t4, e3) => Ct.INSTANCE, t3[4] = (t4, e3) => It.INSTANCE, t3[5] = (t4, e3) => new yt(t4), t3[6] = (t4, e3) => Et.INSTANCE, t3[7] = (t4, e3) => new Nt(t4), this.actionFactories = t3;\n    }\n    if (t2 > this.actionFactories.length || null === this.actionFactories[t2])\n      throw \"The specified lexer action type \" + t2 + \" is not valid.\";\n    return this.actionFactories[t2](e2, n2);\n  }\n};\nvar Rt = class {\n  syntaxError(t2, e2, n2, s2, i2, r2) {\n  }\n  reportAmbiguity(t2, e2, n2, s2, i2, r2, o2) {\n  }\n  reportAttemptingFullContext(t2, e2, n2, s2, i2, r2) {\n  }\n  reportContextSensitivity(t2, e2, n2, s2, i2, r2) {\n  }\n};\nvar vt = class extends Rt {\n  constructor() {\n    super();\n  }\n  syntaxError(t2, e2, n2, s2, i2, r2) {\n    console.error(\"line \" + n2 + \":\" + s2 + \" \" + i2);\n  }\n};\nvt.INSTANCE = new vt();\nvar wt = class extends Rt {\n  constructor(t2) {\n    if (super(), null === t2)\n      throw \"delegates\";\n    return this.delegates = t2, this;\n  }\n  syntaxError(t2, e2, n2, s2, i2, r2) {\n    this.delegates.map((o2) => o2.syntaxError(t2, e2, n2, s2, i2, r2));\n  }\n  reportAmbiguity(t2, e2, n2, s2, i2, r2, o2) {\n    this.delegates.map((a2) => a2.reportAmbiguity(t2, e2, n2, s2, i2, r2, o2));\n  }\n  reportAttemptingFullContext(t2, e2, n2, s2, i2, r2) {\n    this.delegates.map((o2) => o2.reportAttemptingFullContext(t2, e2, n2, s2, i2, r2));\n  }\n  reportContextSensitivity(t2, e2, n2, s2, i2, r2) {\n    this.delegates.map((o2) => o2.reportContextSensitivity(t2, e2, n2, s2, i2, r2));\n  }\n};\nvar Pt = class {\n  constructor() {\n    this._listeners = [vt.INSTANCE], this._interp = null, this._stateNumber = -1;\n  }\n  checkVersion(t2) {\n    const e2 = \"4.13.1\";\n    e2 !== t2 && console.log(\"ANTLR runtime and generated code versions disagree: \" + e2 + \"!=\" + t2);\n  }\n  addErrorListener(t2) {\n    this._listeners.push(t2);\n  }\n  removeErrorListeners() {\n    this._listeners = [];\n  }\n  getLiteralNames() {\n    return Object.getPrototypeOf(this).constructor.literalNames || [];\n  }\n  getSymbolicNames() {\n    return Object.getPrototypeOf(this).constructor.symbolicNames || [];\n  }\n  getTokenNames() {\n    if (!this.tokenNames) {\n      const t2 = this.getLiteralNames(), e2 = this.getSymbolicNames(), n2 = t2.length > e2.length ? t2.length : e2.length;\n      this.tokenNames = [];\n      for (let s2 = 0; s2 < n2; s2++)\n        this.tokenNames[s2] = t2[s2] || e2[s2] || \"<INVALID\";\n    }\n    return this.tokenNames;\n  }\n  getTokenTypeMap() {\n    const t2 = this.getTokenNames();\n    if (null === t2)\n      throw \"The current recognizer does not provide a list of token names.\";\n    let e2 = this.tokenTypeMapCache[t2];\n    return void 0 === e2 && (e2 = t2.reduce(function(t3, e3, n2) {\n      t3[e3] = n2;\n    }), e2.EOF = s.EOF, this.tokenTypeMapCache[t2] = e2), e2;\n  }\n  getRuleIndexMap() {\n    const t2 = this.ruleNames;\n    if (null === t2)\n      throw \"The current recognizer does not provide a list of rule names.\";\n    let e2 = this.ruleIndexMapCache[t2];\n    return void 0 === e2 && (e2 = t2.reduce(function(t3, e3, n2) {\n      t3[e3] = n2;\n    }), this.ruleIndexMapCache[t2] = e2), e2;\n  }\n  getTokenType(t2) {\n    const e2 = this.getTokenTypeMap()[t2];\n    return void 0 !== e2 ? e2 : s.INVALID_TYPE;\n  }\n  getErrorHeader(t2) {\n    return \"line \" + t2.getOffendingToken().line + \":\" + t2.getOffendingToken().column;\n  }\n  getTokenErrorDisplay(t2) {\n    if (null === t2)\n      return \"<no token>\";\n    let e2 = t2.text;\n    return null === e2 && (e2 = t2.type === s.EOF ? \"<EOF>\" : \"<\" + t2.type + \">\"), e2 = e2.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\t\", \"\\\\t\"), \"'\" + e2 + \"'\";\n  }\n  getErrorListenerDispatch() {\n    return new wt(this._listeners);\n  }\n  sempred(t2, e2, n2) {\n    return true;\n  }\n  precpred(t2, e2) {\n    return true;\n  }\n  get atn() {\n    return this._interp.atn;\n  }\n  get state() {\n    return this._stateNumber;\n  }\n  set state(t2) {\n    this._stateNumber = t2;\n  }\n};\nPt.tokenTypeMapCache = {}, Pt.ruleIndexMapCache = {};\nvar bt = class _bt extends s {\n  constructor(t2, e2, n2, i2, r2) {\n    super(), this.source = void 0 !== t2 ? t2 : _bt.EMPTY_SOURCE, this.type = void 0 !== e2 ? e2 : null, this.channel = void 0 !== n2 ? n2 : s.DEFAULT_CHANNEL, this.start = void 0 !== i2 ? i2 : -1, this.stop = void 0 !== r2 ? r2 : -1, this.tokenIndex = -1, null !== this.source[0] ? (this.line = t2[0].line, this.column = t2[0].column) : this.column = -1;\n  }\n  clone() {\n    const t2 = new _bt(this.source, this.type, this.channel, this.start, this.stop);\n    return t2.tokenIndex = this.tokenIndex, t2.line = this.line, t2.column = this.column, t2.text = this.text, t2;\n  }\n  cloneWithType(t2) {\n    const e2 = new _bt(this.source, t2, this.channel, this.start, this.stop);\n    return e2.tokenIndex = this.tokenIndex, e2.line = this.line, e2.column = this.column, t2 === s.EOF && (e2.text = \"\"), e2;\n  }\n  toString() {\n    let t2 = this.text;\n    return t2 = null !== t2 ? t2.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\") : \"<no text>\", \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + t2 + \"',<\" + this.type + \">\" + (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" + this.line + \":\" + this.column + \"]\";\n  }\n  get text() {\n    if (null !== this._text)\n      return this._text;\n    const t2 = this.getInputStream();\n    if (null === t2)\n      return null;\n    const e2 = t2.size;\n    return this.start < e2 && this.stop < e2 ? t2.getText(this.start, this.stop) : \"<EOF>\";\n  }\n  set text(t2) {\n    this._text = t2;\n  }\n};\nbt.EMPTY_SOURCE = [null, null];\nvar Dt = class {\n};\nvar Ft = class extends Dt {\n  constructor(t2) {\n    super(), this.copyText = void 0 !== t2 && t2;\n  }\n  create(t2, e2, n2, s2, i2, r2, o2, a2) {\n    const l2 = new bt(t2, e2, s2, i2, r2);\n    return l2.line = o2, l2.column = a2, null !== n2 ? l2.text = n2 : this.copyText && null !== t2[1] && (l2.text = t2[1].getText(i2, r2)), l2;\n  }\n  createThin(t2, e2) {\n    const n2 = new bt(null, t2);\n    return n2.text = e2, n2;\n  }\n};\nFt.DEFAULT = new Ft();\nvar Mt = class _Mt extends Error {\n  constructor(t2) {\n    super(t2.message), Error.captureStackTrace && Error.captureStackTrace(this, _Mt), this.message = t2.message, this.recognizer = t2.recognizer, this.input = t2.input, this.ctx = t2.ctx, this.offendingToken = null, this.offendingState = -1, null !== this.recognizer && (this.offendingState = this.recognizer.state);\n  }\n  getExpectedTokens() {\n    return null !== this.recognizer ? this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx) : null;\n  }\n  toString() {\n    return this.message;\n  }\n};\nvar Ut = class extends Mt {\n  constructor(t2, e2, n2, s2) {\n    super({ message: \"\", recognizer: t2, input: e2, ctx: null }), this.startIndex = n2, this.deadEndConfigs = s2;\n  }\n  toString() {\n    let t2 = \"\";\n    return this.startIndex >= 0 && this.startIndex < this.input.size && (t2 = this.input.getText(new E(this.startIndex, this.startIndex))), \"LexerNoViableAltException\" + t2;\n  }\n};\nvar Bt = class _Bt extends Pt {\n  constructor(t2) {\n    super(), this._input = t2, this._factory = Ft.DEFAULT, this._tokenFactorySourcePair = [this, t2], this._interp = null, this._token = null, this._tokenStartCharIndex = -1, this._tokenStartLine = -1, this._tokenStartColumn = -1, this._hitEOF = false, this._channel = s.DEFAULT_CHANNEL, this._type = s.INVALID_TYPE, this._modeStack = [], this._mode = _Bt.DEFAULT_MODE, this._text = null;\n  }\n  reset() {\n    null !== this._input && this._input.seek(0), this._token = null, this._type = s.INVALID_TYPE, this._channel = s.DEFAULT_CHANNEL, this._tokenStartCharIndex = -1, this._tokenStartColumn = -1, this._tokenStartLine = -1, this._text = null, this._hitEOF = false, this._mode = _Bt.DEFAULT_MODE, this._modeStack = [], this._interp.reset();\n  }\n  nextToken() {\n    if (null === this._input)\n      throw \"nextToken requires a non-null input stream.\";\n    const t2 = this._input.mark();\n    try {\n      for (; ; ) {\n        if (this._hitEOF)\n          return this.emitEOF(), this._token;\n        this._token = null, this._channel = s.DEFAULT_CHANNEL, this._tokenStartCharIndex = this._input.index, this._tokenStartColumn = this._interp.column, this._tokenStartLine = this._interp.line, this._text = null;\n        let t3 = false;\n        for (; ; ) {\n          this._type = s.INVALID_TYPE;\n          let e2 = _Bt.SKIP;\n          try {\n            e2 = this._interp.match(this._input, this._mode);\n          } catch (t4) {\n            if (!(t4 instanceof Mt))\n              throw console.log(t4.stack), t4;\n            this.notifyListeners(t4), this.recover(t4);\n          }\n          if (this._input.LA(1) === s.EOF && (this._hitEOF = true), this._type === s.INVALID_TYPE && (this._type = e2), this._type === _Bt.SKIP) {\n            t3 = true;\n            break;\n          }\n          if (this._type !== _Bt.MORE)\n            break;\n        }\n        if (!t3)\n          return null === this._token && this.emit(), this._token;\n      }\n    } finally {\n      this._input.release(t2);\n    }\n  }\n  skip() {\n    this._type = _Bt.SKIP;\n  }\n  more() {\n    this._type = _Bt.MORE;\n  }\n  mode(t2) {\n    this._mode = t2;\n  }\n  pushMode(t2) {\n    this._interp.debug && console.log(\"pushMode \" + t2), this._modeStack.push(this._mode), this.mode(t2);\n  }\n  popMode() {\n    if (0 === this._modeStack.length)\n      throw \"Empty Stack\";\n    return this._interp.debug && console.log(\"popMode back to \" + this._modeStack.slice(0, -1)), this.mode(this._modeStack.pop()), this._mode;\n  }\n  emitToken(t2) {\n    this._token = t2;\n  }\n  emit() {\n    const t2 = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);\n    return this.emitToken(t2), t2;\n  }\n  emitEOF() {\n    const t2 = this.column, e2 = this.line, n2 = this._factory.create(this._tokenFactorySourcePair, s.EOF, null, s.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, e2, t2);\n    return this.emitToken(n2), n2;\n  }\n  getCharIndex() {\n    return this._input.index;\n  }\n  getAllTokens() {\n    const t2 = [];\n    let e2 = this.nextToken();\n    for (; e2.type !== s.EOF; )\n      t2.push(e2), e2 = this.nextToken();\n    return t2;\n  }\n  notifyListeners(t2) {\n    const e2 = this._tokenStartCharIndex, n2 = this._input.index, s2 = this._input.getText(e2, n2), i2 = \"token recognition error at: '\" + this.getErrorDisplay(s2) + \"'\";\n    this.getErrorListenerDispatch().syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, i2, t2);\n  }\n  getErrorDisplay(t2) {\n    const e2 = [];\n    for (let n2 = 0; n2 < t2.length; n2++)\n      e2.push(t2[n2]);\n    return e2.join(\"\");\n  }\n  getErrorDisplayForChar(t2) {\n    return t2.charCodeAt(0) === s.EOF ? \"<EOF>\" : \"\\n\" === t2 ? \"\\\\n\" : \"\t\" === t2 ? \"\\\\t\" : \"\\r\" === t2 ? \"\\\\r\" : t2;\n  }\n  getCharErrorDisplay(t2) {\n    return \"'\" + this.getErrorDisplayForChar(t2) + \"'\";\n  }\n  recover(t2) {\n    this._input.LA(1) !== s.EOF && (t2 instanceof Ut ? this._interp.consume(this._input) : this._input.consume());\n  }\n  get inputStream() {\n    return this._input;\n  }\n  set inputStream(t2) {\n    this._input = null, this._tokenFactorySourcePair = [this, this._input], this.reset(), this._input = t2, this._tokenFactorySourcePair = [this, this._input];\n  }\n  get sourceName() {\n    return this._input.sourceName;\n  }\n  get type() {\n    return this._type;\n  }\n  set type(t2) {\n    this._type = t2;\n  }\n  get line() {\n    return this._interp.line;\n  }\n  set line(t2) {\n    this._interp.line = t2;\n  }\n  get column() {\n    return this._interp.column;\n  }\n  set column(t2) {\n    this._interp.column = t2;\n  }\n  get text() {\n    return null !== this._text ? this._text : this._interp.getText(this._input);\n  }\n  set text(t2) {\n    this._text = t2;\n  }\n};\nfunction Vt(t2) {\n  return t2.hashCodeForConfigSet();\n}\nfunction zt(t2, e2) {\n  return t2 === e2 || null !== t2 && null !== e2 && t2.equalsForConfigSet(e2);\n}\nBt.DEFAULT_MODE = 0, Bt.MORE = -2, Bt.SKIP = -3, Bt.DEFAULT_TOKEN_CHANNEL = s.DEFAULT_CHANNEL, Bt.HIDDEN = s.HIDDEN_CHANNEL, Bt.MIN_CHAR_VALUE = 0, Bt.MAX_CHAR_VALUE = 1114111;\nvar qt = class _qt {\n  constructor(t2) {\n    this.configLookup = new p(Vt, zt), this.fullCtx = void 0 === t2 || t2, this.readOnly = false, this.configs = [], this.uniqueAlt = 0, this.conflictingAlts = null, this.hasSemanticContext = false, this.dipsIntoOuterContext = false, this.cachedHashCode = -1;\n  }\n  add(t2, e2) {\n    if (void 0 === e2 && (e2 = null), this.readOnly)\n      throw \"This set is readonly\";\n    t2.semanticContext !== g.NONE && (this.hasSemanticContext = true), t2.reachesIntoOuterContext > 0 && (this.dipsIntoOuterContext = true);\n    const n2 = this.configLookup.add(t2);\n    if (n2 === t2)\n      return this.cachedHashCode = -1, this.configs.push(t2), true;\n    const s2 = !this.fullCtx, i2 = j(n2.context, t2.context, s2, e2);\n    return n2.reachesIntoOuterContext = Math.max(n2.reachesIntoOuterContext, t2.reachesIntoOuterContext), t2.precedenceFilterSuppressed && (n2.precedenceFilterSuppressed = true), n2.context = i2, true;\n  }\n  getStates() {\n    const t2 = new p();\n    for (let e2 = 0; e2 < this.configs.length; e2++)\n      t2.add(this.configs[e2].state);\n    return t2;\n  }\n  getPredicates() {\n    const t2 = [];\n    for (let e2 = 0; e2 < this.configs.length; e2++) {\n      const n2 = this.configs[e2].semanticContext;\n      n2 !== g.NONE && t2.push(n2.semanticContext);\n    }\n    return t2;\n  }\n  optimizeConfigs(t2) {\n    if (this.readOnly)\n      throw \"This set is readonly\";\n    if (0 !== this.configLookup.length)\n      for (let e2 = 0; e2 < this.configs.length; e2++) {\n        const n2 = this.configs[e2];\n        n2.context = t2.getCachedContext(n2.context);\n      }\n  }\n  addAll(t2) {\n    for (let e2 = 0; e2 < t2.length; e2++)\n      this.add(t2[e2]);\n    return false;\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _qt && i(this.configs, t2.configs) && this.fullCtx === t2.fullCtx && this.uniqueAlt === t2.uniqueAlt && this.conflictingAlts === t2.conflictingAlts && this.hasSemanticContext === t2.hasSemanticContext && this.dipsIntoOuterContext === t2.dipsIntoOuterContext;\n  }\n  hashCode() {\n    const t2 = new a();\n    return t2.update(this.configs), t2.finish();\n  }\n  updateHashCode(t2) {\n    this.readOnly ? (-1 === this.cachedHashCode && (this.cachedHashCode = this.hashCode()), t2.update(this.cachedHashCode)) : t2.update(this.hashCode());\n  }\n  isEmpty() {\n    return 0 === this.configs.length;\n  }\n  contains(t2) {\n    if (null === this.configLookup)\n      throw \"This method is not implemented for readonly sets.\";\n    return this.configLookup.contains(t2);\n  }\n  containsFast(t2) {\n    if (null === this.configLookup)\n      throw \"This method is not implemented for readonly sets.\";\n    return this.configLookup.containsFast(t2);\n  }\n  clear() {\n    if (this.readOnly)\n      throw \"This set is readonly\";\n    this.configs = [], this.cachedHashCode = -1, this.configLookup = new p();\n  }\n  setReadonly(t2) {\n    this.readOnly = t2, t2 && (this.configLookup = null);\n  }\n  toString() {\n    return u(this.configs) + (this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") + (this.uniqueAlt !== X.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") + (null !== this.conflictingAlts ? \",conflictingAlts=\" + this.conflictingAlts : \"\") + (this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n  }\n  get items() {\n    return this.configs;\n  }\n  get length() {\n    return this.configs.length;\n  }\n};\nvar Ht = class _Ht {\n  constructor(t2, e2) {\n    return null === t2 && (t2 = -1), null === e2 && (e2 = new qt()), this.stateNumber = t2, this.configs = e2, this.edges = null, this.isAcceptState = false, this.prediction = 0, this.lexerActionExecutor = null, this.requiresFullContext = false, this.predicates = null, this;\n  }\n  getAltSet() {\n    const t2 = new p();\n    if (null !== this.configs)\n      for (let e2 = 0; e2 < this.configs.length; e2++) {\n        const n2 = this.configs[e2];\n        t2.add(n2.alt);\n      }\n    return 0 === t2.length ? null : t2;\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _Ht && this.configs.equals(t2.configs);\n  }\n  toString() {\n    let t2 = this.stateNumber + \":\" + this.configs;\n    return this.isAcceptState && (t2 += \"=>\", null !== this.predicates ? t2 += this.predicates : t2 += this.prediction), t2;\n  }\n  hashCode() {\n    const t2 = new a();\n    return t2.update(this.configs), t2.finish();\n  }\n};\nvar Kt = class {\n  constructor(t2, e2) {\n    return this.atn = t2, this.sharedContextCache = e2, this;\n  }\n  getCachedContext(t2) {\n    if (null === this.sharedContextCache)\n      return t2;\n    const e2 = new K();\n    return G(t2, this.sharedContextCache, e2);\n  }\n};\nKt.ERROR = new Ht(2147483647, new qt());\nvar Yt = class extends qt {\n  constructor() {\n    super(), this.configLookup = new p();\n  }\n};\nvar Gt = class _Gt extends m {\n  constructor(t2, e2) {\n    super(t2, e2);\n    const n2 = t2.lexerActionExecutor || null;\n    return this.lexerActionExecutor = n2 || (null !== e2 ? e2.lexerActionExecutor : null), this.passedThroughNonGreedyDecision = null !== e2 && this.checkNonGreedyDecision(e2, this.state), this.hashCodeForConfigSet = _Gt.prototype.hashCode, this.equalsForConfigSet = _Gt.prototype.equals, this;\n  }\n  updateHashCode(t2) {\n    t2.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _Gt && this.passedThroughNonGreedyDecision === t2.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(t2.lexerActionExecutor) : !t2.lexerActionExecutor) && super.equals(t2);\n  }\n  checkNonGreedyDecision(t2, e2) {\n    return t2.passedThroughNonGreedyDecision || e2 instanceof Z && e2.nonGreedy;\n  }\n};\nvar jt = class _jt extends mt {\n  constructor(t2, e2) {\n    super(e2.actionType), this.offset = t2, this.action = e2, this.isPositionDependent = true;\n  }\n  execute(t2) {\n    this.action.execute(t2);\n  }\n  updateHashCode(t2) {\n    t2.update(this.actionType, this.offset, this.action);\n  }\n  equals(t2) {\n    return this === t2 || t2 instanceof _jt && this.offset === t2.offset && this.action === t2.action;\n  }\n};\nvar Wt = class _Wt {\n  constructor(t2) {\n    return this.lexerActions = null === t2 ? [] : t2, this.cachedHashCode = a.hashStuff(t2), this;\n  }\n  fixOffsetBeforeMatch(t2) {\n    let e2 = null;\n    for (let n2 = 0; n2 < this.lexerActions.length; n2++)\n      !this.lexerActions[n2].isPositionDependent || this.lexerActions[n2] instanceof jt || (null === e2 && (e2 = this.lexerActions.concat([])), e2[n2] = new jt(t2, this.lexerActions[n2]));\n    return null === e2 ? this : new _Wt(e2);\n  }\n  execute(t2, e2, n2) {\n    let s2 = false;\n    const i2 = e2.index;\n    try {\n      for (let r2 = 0; r2 < this.lexerActions.length; r2++) {\n        let o2 = this.lexerActions[r2];\n        if (o2 instanceof jt) {\n          const t3 = o2.offset;\n          e2.seek(n2 + t3), o2 = o2.action, s2 = n2 + t3 !== i2;\n        } else\n          o2.isPositionDependent && (e2.seek(i2), s2 = false);\n        o2.execute(t2);\n      }\n    } finally {\n      s2 && e2.seek(i2);\n    }\n  }\n  hashCode() {\n    return this.cachedHashCode;\n  }\n  updateHashCode(t2) {\n    t2.update(this.cachedHashCode);\n  }\n  equals(t2) {\n    if (this === t2)\n      return true;\n    if (t2 instanceof _Wt) {\n      if (this.cachedHashCode != t2.cachedHashCode)\n        return false;\n      if (this.lexerActions.length != t2.lexerActions.length)\n        return false;\n      {\n        const e2 = this.lexerActions.length;\n        for (let n2 = 0; n2 < e2; ++n2)\n          if (!this.lexerActions[n2].equals(t2.lexerActions[n2]))\n            return false;\n        return true;\n      }\n    }\n    return false;\n  }\n  static append(t2, e2) {\n    if (null === t2)\n      return new _Wt([e2]);\n    const n2 = t2.lexerActions.concat([e2]);\n    return new _Wt(n2);\n  }\n};\nfunction $t(t2) {\n  t2.index = -1, t2.line = 0, t2.column = -1, t2.dfaState = null;\n}\nvar Xt = class {\n  constructor() {\n    $t(this);\n  }\n  reset() {\n    $t(this);\n  }\n};\nvar Jt = class _Jt extends Kt {\n  constructor(t2, e2, n2, s2) {\n    super(e2, s2), this.decisionToDFA = n2, this.recog = t2, this.startIndex = -1, this.line = 1, this.column = 0, this.mode = Bt.DEFAULT_MODE, this.prevAccept = new Xt();\n  }\n  copyState(t2) {\n    this.column = t2.column, this.line = t2.line, this.mode = t2.mode, this.startIndex = t2.startIndex;\n  }\n  match(t2, e2) {\n    this.mode = e2;\n    const n2 = t2.mark();\n    try {\n      this.startIndex = t2.index, this.prevAccept.reset();\n      const n3 = this.decisionToDFA[e2];\n      return null === n3.s0 ? this.matchATN(t2) : this.execATN(t2, n3.s0);\n    } finally {\n      t2.release(n2);\n    }\n  }\n  reset() {\n    this.prevAccept.reset(), this.startIndex = -1, this.line = 1, this.column = 0, this.mode = Bt.DEFAULT_MODE;\n  }\n  matchATN(t2) {\n    const e2 = this.atn.modeToStartState[this.mode];\n    _Jt.debug && console.log(\"matchATN mode \" + this.mode + \" start: \" + e2);\n    const n2 = this.mode, s2 = this.computeStartState(t2, e2), i2 = s2.hasSemanticContext;\n    s2.hasSemanticContext = false;\n    const r2 = this.addDFAState(s2);\n    i2 || (this.decisionToDFA[this.mode].s0 = r2);\n    const o2 = this.execATN(t2, r2);\n    return _Jt.debug && console.log(\"DFA after matchATN: \" + this.decisionToDFA[n2].toLexerString()), o2;\n  }\n  execATN(t2, e2) {\n    _Jt.debug && console.log(\"start state closure=\" + e2.configs), e2.isAcceptState && this.captureSimState(this.prevAccept, t2, e2);\n    let n2 = t2.LA(1), i2 = e2;\n    for (; ; ) {\n      _Jt.debug && console.log(\"execATN loop starting closure: \" + i2.configs);\n      let e3 = this.getExistingTargetState(i2, n2);\n      if (null === e3 && (e3 = this.computeTargetState(t2, i2, n2)), e3 === Kt.ERROR)\n        break;\n      if (n2 !== s.EOF && this.consume(t2), e3.isAcceptState && (this.captureSimState(this.prevAccept, t2, e3), n2 === s.EOF))\n        break;\n      n2 = t2.LA(1), i2 = e3;\n    }\n    return this.failOrAccept(this.prevAccept, t2, i2.configs, n2);\n  }\n  getExistingTargetState(t2, e2) {\n    if (null === t2.edges || e2 < _Jt.MIN_DFA_EDGE || e2 > _Jt.MAX_DFA_EDGE)\n      return null;\n    let n2 = t2.edges[e2 - _Jt.MIN_DFA_EDGE];\n    return void 0 === n2 && (n2 = null), _Jt.debug && null !== n2 && console.log(\"reuse state \" + t2.stateNumber + \" edge to \" + n2.stateNumber), n2;\n  }\n  computeTargetState(t2, e2, n2) {\n    const s2 = new Yt();\n    return this.getReachableConfigSet(t2, e2.configs, s2, n2), 0 === s2.items.length ? (s2.hasSemanticContext || this.addDFAEdge(e2, n2, Kt.ERROR), Kt.ERROR) : this.addDFAEdge(e2, n2, null, s2);\n  }\n  failOrAccept(t2, e2, n2, i2) {\n    if (null !== this.prevAccept.dfaState) {\n      const n3 = t2.dfaState.lexerActionExecutor;\n      return this.accept(e2, n3, this.startIndex, t2.index, t2.line, t2.column), t2.dfaState.prediction;\n    }\n    if (i2 === s.EOF && e2.index === this.startIndex)\n      return s.EOF;\n    throw new Ut(this.recog, e2, this.startIndex, n2);\n  }\n  getReachableConfigSet(t2, e2, n2, i2) {\n    let r2 = X.INVALID_ALT_NUMBER;\n    for (let o2 = 0; o2 < e2.items.length; o2++) {\n      const a2 = e2.items[o2], l2 = a2.alt === r2;\n      if (!l2 || !a2.passedThroughNonGreedyDecision) {\n        _Jt.debug && console.log(\"testing %s at %s\\n\", this.getTokenName(i2), a2.toString(this.recog, true));\n        for (let e3 = 0; e3 < a2.state.transitions.length; e3++) {\n          const o3 = a2.state.transitions[e3], h2 = this.getReachableTarget(o3, i2);\n          if (null !== h2) {\n            let e4 = a2.lexerActionExecutor;\n            null !== e4 && (e4 = e4.fixOffsetBeforeMatch(t2.index - this.startIndex));\n            const o4 = i2 === s.EOF, c2 = new Gt({ state: h2, lexerActionExecutor: e4 }, a2);\n            this.closure(t2, c2, n2, l2, true, o4) && (r2 = a2.alt);\n          }\n        }\n      }\n    }\n  }\n  accept(t2, e2, n2, s2, i2, r2) {\n    _Jt.debug && console.log(\"ACTION %s\\n\", e2), t2.seek(s2), this.line = i2, this.column = r2, null !== e2 && null !== this.recog && e2.execute(this.recog, t2, n2);\n  }\n  getReachableTarget(t2, e2) {\n    return t2.matches(e2, 0, Bt.MAX_CHAR_VALUE) ? t2.target : null;\n  }\n  computeStartState(t2, e2) {\n    const n2 = B.EMPTY, s2 = new Yt();\n    for (let i2 = 0; i2 < e2.transitions.length; i2++) {\n      const r2 = e2.transitions[i2].target, o2 = new Gt({ state: r2, alt: i2 + 1, context: n2 }, null);\n      this.closure(t2, o2, s2, false, false, false);\n    }\n    return s2;\n  }\n  closure(t2, e2, n2, s2, i2, r2) {\n    let o2 = null;\n    if (_Jt.debug && console.log(\"closure(\" + e2.toString(this.recog, true) + \")\"), e2.state instanceof C) {\n      if (_Jt.debug && (null !== this.recog ? console.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[e2.state.ruleIndex], e2) : console.log(\"closure at rule stop %s\\n\", e2)), null === e2.context || e2.context.hasEmptyPath()) {\n        if (null === e2.context || e2.context.isEmpty())\n          return n2.add(e2), true;\n        n2.add(new Gt({ state: e2.state, context: B.EMPTY }, e2)), s2 = true;\n      }\n      if (null !== e2.context && !e2.context.isEmpty()) {\n        for (let a2 = 0; a2 < e2.context.length; a2++)\n          if (e2.context.getReturnState(a2) !== B.EMPTY_RETURN_STATE) {\n            const l2 = e2.context.getParent(a2), h2 = this.atn.states[e2.context.getReturnState(a2)];\n            o2 = new Gt({ state: h2, context: l2 }, e2), s2 = this.closure(t2, o2, n2, s2, i2, r2);\n          }\n      }\n      return s2;\n    }\n    e2.state.epsilonOnlyTransitions || s2 && e2.passedThroughNonGreedyDecision || n2.add(e2);\n    for (let a2 = 0; a2 < e2.state.transitions.length; a2++) {\n      const l2 = e2.state.transitions[a2];\n      o2 = this.getEpsilonTarget(t2, e2, l2, n2, i2, r2), null !== o2 && (s2 = this.closure(t2, o2, n2, s2, i2, r2));\n    }\n    return s2;\n  }\n  getEpsilonTarget(t2, e2, n2, i2, r2, o2) {\n    let a2 = null;\n    if (n2.serializationType === N.RULE) {\n      const t3 = z.create(e2.context, n2.followState.stateNumber);\n      a2 = new Gt({ state: n2.target, context: t3 }, e2);\n    } else {\n      if (n2.serializationType === N.PRECEDENCE)\n        throw \"Precedence predicates are not supported in lexers.\";\n      if (n2.serializationType === N.PREDICATE)\n        _Jt.debug && console.log(\"EVAL rule \" + n2.ruleIndex + \":\" + n2.predIndex), i2.hasSemanticContext = true, this.evaluatePredicate(t2, n2.ruleIndex, n2.predIndex, r2) && (a2 = new Gt({ state: n2.target }, e2));\n      else if (n2.serializationType === N.ACTION)\n        if (null === e2.context || e2.context.hasEmptyPath()) {\n          const t3 = Wt.append(e2.lexerActionExecutor, this.atn.lexerActions[n2.actionIndex]);\n          a2 = new Gt({ state: n2.target, lexerActionExecutor: t3 }, e2);\n        } else\n          a2 = new Gt({ state: n2.target }, e2);\n      else\n        n2.serializationType === N.EPSILON ? a2 = new Gt({ state: n2.target }, e2) : n2.serializationType !== N.ATOM && n2.serializationType !== N.RANGE && n2.serializationType !== N.SET || o2 && n2.matches(s.EOF, 0, Bt.MAX_CHAR_VALUE) && (a2 = new Gt({ state: n2.target }, e2));\n    }\n    return a2;\n  }\n  evaluatePredicate(t2, e2, n2, s2) {\n    if (null === this.recog)\n      return true;\n    if (!s2)\n      return this.recog.sempred(null, e2, n2);\n    const i2 = this.column, r2 = this.line, o2 = t2.index, a2 = t2.mark();\n    try {\n      return this.consume(t2), this.recog.sempred(null, e2, n2);\n    } finally {\n      this.column = i2, this.line = r2, t2.seek(o2), t2.release(a2);\n    }\n  }\n  captureSimState(t2, e2, n2) {\n    t2.index = e2.index, t2.line = this.line, t2.column = this.column, t2.dfaState = n2;\n  }\n  addDFAEdge(t2, e2, n2, s2) {\n    if (void 0 === n2 && (n2 = null), void 0 === s2 && (s2 = null), null === n2 && null !== s2) {\n      const t3 = s2.hasSemanticContext;\n      if (s2.hasSemanticContext = false, n2 = this.addDFAState(s2), t3)\n        return n2;\n    }\n    return e2 < _Jt.MIN_DFA_EDGE || e2 > _Jt.MAX_DFA_EDGE || (_Jt.debug && console.log(\"EDGE \" + t2 + \" -> \" + n2 + \" upon \" + e2), null === t2.edges && (t2.edges = []), t2.edges[e2 - _Jt.MIN_DFA_EDGE] = n2), n2;\n  }\n  addDFAState(t2) {\n    const e2 = new Ht(null, t2);\n    let n2 = null;\n    for (let e3 = 0; e3 < t2.items.length; e3++) {\n      const s3 = t2.items[e3];\n      if (s3.state instanceof C) {\n        n2 = s3;\n        break;\n      }\n    }\n    null !== n2 && (e2.isAcceptState = true, e2.lexerActionExecutor = n2.lexerActionExecutor, e2.prediction = this.atn.ruleToTokenType[n2.state.ruleIndex]);\n    const s2 = this.decisionToDFA[this.mode], i2 = s2.states.get(e2);\n    if (null !== i2)\n      return i2;\n    const r2 = e2;\n    return r2.stateNumber = s2.states.length, t2.setReadonly(true), r2.configs = t2, s2.states.add(r2), r2;\n  }\n  getDFA(t2) {\n    return this.decisionToDFA[t2];\n  }\n  getText(t2) {\n    return t2.getText(this.startIndex, t2.index - 1);\n  }\n  consume(t2) {\n    t2.LA(1) === \"\\n\".charCodeAt(0) ? (this.line += 1, this.column = 0) : this.column += 1, t2.consume();\n  }\n  getTokenName(t2) {\n    return -1 === t2 ? \"EOF\" : \"'\" + String.fromCharCode(t2) + \"'\";\n  }\n};\nJt.debug = false, Jt.dfa_debug = false, Jt.MIN_DFA_EDGE = 0, Jt.MAX_DFA_EDGE = 127;\nvar Zt = class {\n  constructor(t2, e2) {\n    this.alt = e2, this.pred = t2;\n  }\n  toString() {\n    return \"(\" + this.pred + \", \" + this.alt + \")\";\n  }\n};\nvar Qt = class {\n  constructor() {\n    this.data = {};\n  }\n  get(t2) {\n    return this.data[\"k-\" + t2] || null;\n  }\n  set(t2, e2) {\n    this.data[\"k-\" + t2] = e2;\n  }\n  values() {\n    return Object.keys(this.data).filter((t2) => t2.startsWith(\"k-\")).map((t2) => this.data[t2], this);\n  }\n};\nvar te = { SLL: 0, LL: 1, LL_EXACT_AMBIG_DETECTION: 2, hasSLLConflictTerminatingPrediction: function(t2, e2) {\n  if (te.allConfigsInRuleStopStates(e2))\n    return true;\n  if (t2 === te.SLL && e2.hasSemanticContext) {\n    const t3 = new qt();\n    for (let n3 = 0; n3 < e2.items.length; n3++) {\n      let s2 = e2.items[n3];\n      s2 = new m({ semanticContext: g.NONE }, s2), t3.add(s2);\n    }\n    e2 = t3;\n  }\n  const n2 = te.getConflictingAltSubsets(e2);\n  return te.hasConflictingAltSet(n2) && !te.hasStateAssociatedWithOneAlt(e2);\n}, hasConfigInRuleStopState: function(t2) {\n  for (let e2 = 0; e2 < t2.items.length; e2++)\n    if (t2.items[e2].state instanceof C)\n      return true;\n  return false;\n}, allConfigsInRuleStopStates: function(t2) {\n  for (let e2 = 0; e2 < t2.items.length; e2++)\n    if (!(t2.items[e2].state instanceof C))\n      return false;\n  return true;\n}, resolvesToJustOneViableAlt: function(t2) {\n  return te.getSingleViableAlt(t2);\n}, allSubsetsConflict: function(t2) {\n  return !te.hasNonConflictingAltSet(t2);\n}, hasNonConflictingAltSet: function(t2) {\n  for (let e2 = 0; e2 < t2.length; e2++)\n    if (1 === t2[e2].length)\n      return true;\n  return false;\n}, hasConflictingAltSet: function(t2) {\n  for (let e2 = 0; e2 < t2.length; e2++)\n    if (t2[e2].length > 1)\n      return true;\n  return false;\n}, allSubsetsEqual: function(t2) {\n  let e2 = null;\n  for (let n2 = 0; n2 < t2.length; n2++) {\n    const s2 = t2[n2];\n    if (null === e2)\n      e2 = s2;\n    else if (s2 !== e2)\n      return false;\n  }\n  return true;\n}, getUniqueAlt: function(t2) {\n  const e2 = te.getAlts(t2);\n  return 1 === e2.length ? e2.minValue() : X.INVALID_ALT_NUMBER;\n}, getAlts: function(t2) {\n  const e2 = new W();\n  return t2.map(function(t3) {\n    e2.or(t3);\n  }), e2;\n}, getConflictingAltSubsets: function(t2) {\n  const e2 = new K();\n  return e2.hashFunction = function(t3) {\n    a.hashStuff(t3.state.stateNumber, t3.context);\n  }, e2.equalsFunction = function(t3, e3) {\n    return t3.state.stateNumber === e3.state.stateNumber && t3.context.equals(e3.context);\n  }, t2.items.map(function(t3) {\n    let n2 = e2.get(t3);\n    null === n2 && (n2 = new W(), e2.set(t3, n2)), n2.add(t3.alt);\n  }), e2.getValues();\n}, getStateToAltMap: function(t2) {\n  const e2 = new Qt();\n  return t2.items.map(function(t3) {\n    let n2 = e2.get(t3.state);\n    null === n2 && (n2 = new W(), e2.set(t3.state, n2)), n2.add(t3.alt);\n  }), e2;\n}, hasStateAssociatedWithOneAlt: function(t2) {\n  const e2 = te.getStateToAltMap(t2).values();\n  for (let t3 = 0; t3 < e2.length; t3++)\n    if (1 === e2[t3].length)\n      return true;\n  return false;\n}, getSingleViableAlt: function(t2) {\n  let e2 = null;\n  for (let n2 = 0; n2 < t2.length; n2++) {\n    const s2 = t2[n2].minValue();\n    if (null === e2)\n      e2 = s2;\n    else if (e2 !== s2)\n      return X.INVALID_ALT_NUMBER;\n  }\n  return e2;\n} };\nvar ee = te;\nvar ne = class extends Mt {\n  constructor(t2, e2, n2, s2, i2, r2) {\n    r2 = r2 || t2._ctx, s2 = s2 || t2.getCurrentToken(), n2 = n2 || t2.getCurrentToken(), e2 = e2 || t2.getInputStream(), super({ message: \"\", recognizer: t2, input: e2, ctx: r2 }), this.deadEndConfigs = i2, this.startToken = n2, this.offendingToken = s2;\n  }\n};\nvar se = class {\n  constructor(t2) {\n    this.defaultMapCtor = t2 || K, this.cacheMap = new this.defaultMapCtor();\n  }\n  get(t2, e2) {\n    const n2 = this.cacheMap.get(t2) || null;\n    return null === n2 ? null : n2.get(e2) || null;\n  }\n  set(t2, e2, n2) {\n    let s2 = this.cacheMap.get(t2) || null;\n    null === s2 && (s2 = new this.defaultMapCtor(), this.cacheMap.set(t2, s2)), s2.set(e2, n2);\n  }\n};\nvar ie = class extends Kt {\n  constructor(t2, e2, n2, s2) {\n    super(e2, s2), this.parser = t2, this.decisionToDFA = n2, this.predictionMode = ee.LL, this._input = null, this._startIndex = 0, this._outerContext = null, this._dfa = null, this.mergeCache = null, this.debug = false, this.debug_closure = false, this.debug_add = false, this.trace_atn_sim = false, this.dfa_debug = false, this.retry_debug = false;\n  }\n  reset() {\n  }\n  adaptivePredict(t2, e2, n2) {\n    (this.debug || this.trace_atn_sim) && console.log(\"adaptivePredict decision \" + e2 + \" exec LA(1)==\" + this.getLookaheadName(t2) + \" line \" + t2.LT(1).line + \":\" + t2.LT(1).column), this._input = t2, this._startIndex = t2.index, this._outerContext = n2;\n    const s2 = this.decisionToDFA[e2];\n    this._dfa = s2;\n    const i2 = t2.mark(), r2 = t2.index;\n    try {\n      let e3;\n      if (e3 = s2.precedenceDfa ? s2.getPrecedenceStartState(this.parser.getPrecedence()) : s2.s0, null === e3) {\n        null === n2 && (n2 = U.EMPTY), this.debug && console.log(\"predictATN decision \" + s2.decision + \" exec LA(1)==\" + this.getLookaheadName(t2) + \", outerContext=\" + n2.toString(this.parser.ruleNames));\n        const i4 = false;\n        let r3 = this.computeStartState(s2.atnStartState, U.EMPTY, i4);\n        s2.precedenceDfa ? (s2.s0.configs = r3, r3 = this.applyPrecedenceFilter(r3), e3 = this.addDFAState(s2, new Ht(null, r3)), s2.setPrecedenceStartState(this.parser.getPrecedence(), e3)) : (e3 = this.addDFAState(s2, new Ht(null, r3)), s2.s0 = e3);\n      }\n      const i3 = this.execATN(s2, e3, t2, r2, n2);\n      return this.debug && console.log(\"DFA after predictATN: \" + s2.toString(this.parser.literalNames, this.parser.symbolicNames)), i3;\n    } finally {\n      this._dfa = null, this.mergeCache = null, t2.seek(r2), t2.release(i2);\n    }\n  }\n  execATN(t2, e2, n2, i2, r2) {\n    let o2;\n    (this.debug || this.trace_atn_sim) && console.log(\"execATN decision \" + t2.decision + \", DFA state \" + e2 + \", LA(1)==\" + this.getLookaheadName(n2) + \" line \" + n2.LT(1).line + \":\" + n2.LT(1).column);\n    let a2 = e2;\n    this.debug && console.log(\"s0 = \" + e2);\n    let l2 = n2.LA(1);\n    for (; ; ) {\n      let e3 = this.getExistingTargetState(a2, l2);\n      if (null === e3 && (e3 = this.computeTargetState(t2, a2, l2)), e3 === Kt.ERROR) {\n        const t3 = this.noViableAlt(n2, r2, a2.configs, i2);\n        if (n2.seek(i2), o2 = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(a2.configs, r2), o2 !== X.INVALID_ALT_NUMBER)\n          return o2;\n        throw t3;\n      }\n      if (e3.requiresFullContext && this.predictionMode !== ee.SLL) {\n        let s2 = null;\n        if (null !== e3.predicates) {\n          this.debug && console.log(\"DFA state has preds in DFA sim LL failover\");\n          const t3 = n2.index;\n          if (t3 !== i2 && n2.seek(i2), s2 = this.evalSemanticContext(e3.predicates, r2, true), 1 === s2.length)\n            return this.debug && console.log(\"Full LL avoided\"), s2.minValue();\n          t3 !== i2 && n2.seek(t3);\n        }\n        this.dfa_debug && console.log(\"ctx sensitive state \" + r2 + \" in \" + e3);\n        const a3 = true, l3 = this.computeStartState(t2.atnStartState, r2, a3);\n        return this.reportAttemptingFullContext(t2, s2, e3.configs, i2, n2.index), o2 = this.execATNWithFullContext(t2, e3, l3, n2, i2, r2), o2;\n      }\n      if (e3.isAcceptState) {\n        if (null === e3.predicates)\n          return e3.prediction;\n        const s2 = n2.index;\n        n2.seek(i2);\n        const o3 = this.evalSemanticContext(e3.predicates, r2, true);\n        if (0 === o3.length)\n          throw this.noViableAlt(n2, r2, e3.configs, i2);\n        return 1 === o3.length || this.reportAmbiguity(t2, e3, i2, s2, false, o3, e3.configs), o3.minValue();\n      }\n      a2 = e3, l2 !== s.EOF && (n2.consume(), l2 = n2.LA(1));\n    }\n  }\n  getExistingTargetState(t2, e2) {\n    const n2 = t2.edges;\n    return null === n2 ? null : n2[e2 + 1] || null;\n  }\n  computeTargetState(t2, e2, n2) {\n    const s2 = this.computeReachSet(e2.configs, n2, false);\n    if (null === s2)\n      return this.addDFAEdge(t2, e2, n2, Kt.ERROR), Kt.ERROR;\n    let i2 = new Ht(null, s2);\n    const r2 = this.getUniqueAlt(s2);\n    if (this.debug) {\n      const t3 = ee.getConflictingAltSubsets(s2);\n      console.log(\"SLL altSubSets=\" + u(t3) + \", configs=\" + s2 + \", predict=\" + r2 + \", allSubsetsConflict=\" + ee.allSubsetsConflict(t3) + \", conflictingAlts=\" + this.getConflictingAlts(s2));\n    }\n    return r2 !== X.INVALID_ALT_NUMBER ? (i2.isAcceptState = true, i2.configs.uniqueAlt = r2, i2.prediction = r2) : ee.hasSLLConflictTerminatingPrediction(this.predictionMode, s2) && (i2.configs.conflictingAlts = this.getConflictingAlts(s2), i2.requiresFullContext = true, i2.isAcceptState = true, i2.prediction = i2.configs.conflictingAlts.minValue()), i2.isAcceptState && i2.configs.hasSemanticContext && (this.predicateDFAState(i2, this.atn.getDecisionState(t2.decision)), null !== i2.predicates && (i2.prediction = X.INVALID_ALT_NUMBER)), i2 = this.addDFAEdge(t2, e2, n2, i2), i2;\n  }\n  predicateDFAState(t2, e2) {\n    const n2 = e2.transitions.length, s2 = this.getConflictingAltsOrUniqueAlt(t2.configs), i2 = this.getPredsForAmbigAlts(s2, t2.configs, n2);\n    null !== i2 ? (t2.predicates = this.getPredicatePredictions(s2, i2), t2.prediction = X.INVALID_ALT_NUMBER) : t2.prediction = s2.minValue();\n  }\n  execATNWithFullContext(t2, e2, n2, i2, r2, o2) {\n    (this.debug || this.trace_atn_sim) && console.log(\"execATNWithFullContext \" + n2);\n    let a2, l2 = false, h2 = n2;\n    i2.seek(r2);\n    let c2 = i2.LA(1), u2 = -1;\n    for (; ; ) {\n      if (a2 = this.computeReachSet(h2, c2, true), null === a2) {\n        const t4 = this.noViableAlt(i2, o2, h2, r2);\n        i2.seek(r2);\n        const e3 = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(h2, o2);\n        if (e3 !== X.INVALID_ALT_NUMBER)\n          return e3;\n        throw t4;\n      }\n      const t3 = ee.getConflictingAltSubsets(a2);\n      if (this.debug && console.log(\"LL altSubSets=\" + t3 + \", predict=\" + ee.getUniqueAlt(t3) + \", resolvesToJustOneViableAlt=\" + ee.resolvesToJustOneViableAlt(t3)), a2.uniqueAlt = this.getUniqueAlt(a2), a2.uniqueAlt !== X.INVALID_ALT_NUMBER) {\n        u2 = a2.uniqueAlt;\n        break;\n      }\n      if (this.predictionMode !== ee.LL_EXACT_AMBIG_DETECTION) {\n        if (u2 = ee.resolvesToJustOneViableAlt(t3), u2 !== X.INVALID_ALT_NUMBER)\n          break;\n      } else if (ee.allSubsetsConflict(t3) && ee.allSubsetsEqual(t3)) {\n        l2 = true, u2 = ee.getSingleViableAlt(t3);\n        break;\n      }\n      h2 = a2, c2 !== s.EOF && (i2.consume(), c2 = i2.LA(1));\n    }\n    return a2.uniqueAlt !== X.INVALID_ALT_NUMBER ? (this.reportContextSensitivity(t2, u2, a2, r2, i2.index), u2) : (this.reportAmbiguity(t2, e2, r2, i2.index, l2, null, a2), u2);\n  }\n  computeReachSet(t2, e2, n2) {\n    this.debug && console.log(\"in computeReachSet, starting closure: \" + t2), null === this.mergeCache && (this.mergeCache = new se());\n    const i2 = new qt(n2);\n    let r2 = null;\n    for (let o3 = 0; o3 < t2.items.length; o3++) {\n      const a2 = t2.items[o3];\n      if (this.debug && console.log(\"testing \" + this.getTokenName(e2) + \" at \" + a2), a2.state instanceof C)\n        (n2 || e2 === s.EOF) && (null === r2 && (r2 = []), r2.push(a2), this.debug_add && console.log(\"added \" + a2 + \" to skippedStopStates\"));\n      else\n        for (let t3 = 0; t3 < a2.state.transitions.length; t3++) {\n          const n3 = a2.state.transitions[t3], s2 = this.getReachableTarget(n3, e2);\n          if (null !== s2) {\n            const t4 = new m({ state: s2 }, a2);\n            i2.add(t4, this.mergeCache), this.debug_add && console.log(\"added \" + t4 + \" to intermediate\");\n          }\n        }\n    }\n    let o2 = null;\n    if (null === r2 && e2 !== s.EOF && (1 === i2.items.length || this.getUniqueAlt(i2) !== X.INVALID_ALT_NUMBER) && (o2 = i2), null === o2) {\n      o2 = new qt(n2);\n      const t3 = new p(), r3 = e2 === s.EOF;\n      for (let e3 = 0; e3 < i2.items.length; e3++)\n        this.closure(i2.items[e3], o2, t3, false, n2, r3);\n    }\n    if (e2 === s.EOF && (o2 = this.removeAllConfigsNotInRuleStopState(o2, o2 === i2)), !(null === r2 || n2 && ee.hasConfigInRuleStopState(o2)))\n      for (let t3 = 0; t3 < r2.length; t3++)\n        o2.add(r2[t3], this.mergeCache);\n    return this.trace_atn_sim && console.log(\"computeReachSet \" + t2 + \" -> \" + o2), 0 === o2.items.length ? null : o2;\n  }\n  removeAllConfigsNotInRuleStopState(t2, e2) {\n    if (ee.allConfigsInRuleStopStates(t2))\n      return t2;\n    const n2 = new qt(t2.fullCtx);\n    for (let i2 = 0; i2 < t2.items.length; i2++) {\n      const r2 = t2.items[i2];\n      if (r2.state instanceof C)\n        n2.add(r2, this.mergeCache);\n      else if (e2 && r2.state.epsilonOnlyTransitions && this.atn.nextTokens(r2.state).contains(s.EPSILON)) {\n        const t3 = this.atn.ruleToStopState[r2.state.ruleIndex];\n        n2.add(new m({ state: t3 }, r2), this.mergeCache);\n      }\n    }\n    return n2;\n  }\n  computeStartState(t2, e2, n2) {\n    const s2 = Y(this.atn, e2), i2 = new qt(n2);\n    this.trace_atn_sim && console.log(\"computeStartState from ATN state \" + t2 + \" initialContext=\" + s2.toString(this.parser));\n    for (let e3 = 0; e3 < t2.transitions.length; e3++) {\n      const r2 = t2.transitions[e3].target, o2 = new m({ state: r2, alt: e3 + 1, context: s2 }, null), a2 = new p();\n      this.closure(o2, i2, a2, true, n2, false);\n    }\n    return i2;\n  }\n  applyPrecedenceFilter(t2) {\n    let e2;\n    const n2 = [], s2 = new qt(t2.fullCtx);\n    for (let i2 = 0; i2 < t2.items.length; i2++) {\n      if (e2 = t2.items[i2], 1 !== e2.alt)\n        continue;\n      const r2 = e2.semanticContext.evalPrecedence(this.parser, this._outerContext);\n      null !== r2 && (n2[e2.state.stateNumber] = e2.context, r2 !== e2.semanticContext ? s2.add(new m({ semanticContext: r2 }, e2), this.mergeCache) : s2.add(e2, this.mergeCache));\n    }\n    for (let i2 = 0; i2 < t2.items.length; i2++)\n      if (e2 = t2.items[i2], 1 !== e2.alt) {\n        if (!e2.precedenceFilterSuppressed) {\n          const t3 = n2[e2.state.stateNumber] || null;\n          if (null !== t3 && t3.equals(e2.context))\n            continue;\n        }\n        s2.add(e2, this.mergeCache);\n      }\n    return s2;\n  }\n  getReachableTarget(t2, e2) {\n    return t2.matches(e2, 0, this.atn.maxTokenType) ? t2.target : null;\n  }\n  getPredsForAmbigAlts(t2, e2, n2) {\n    let s2 = [];\n    for (let n3 = 0; n3 < e2.items.length; n3++) {\n      const i3 = e2.items[n3];\n      t2.has(i3.alt) && (s2[i3.alt] = g.orContext(s2[i3.alt] || null, i3.semanticContext));\n    }\n    let i2 = 0;\n    for (let t3 = 1; t3 < n2 + 1; t3++) {\n      const e3 = s2[t3] || null;\n      null === e3 ? s2[t3] = g.NONE : e3 !== g.NONE && (i2 += 1);\n    }\n    return 0 === i2 && (s2 = null), this.debug && console.log(\"getPredsForAmbigAlts result \" + u(s2)), s2;\n  }\n  getPredicatePredictions(t2, e2) {\n    const n2 = [];\n    let s2 = false;\n    for (let i2 = 1; i2 < e2.length; i2++) {\n      const r2 = e2[i2];\n      null !== t2 && t2.has(i2) && n2.push(new Zt(r2, i2)), r2 !== g.NONE && (s2 = true);\n    }\n    return s2 ? n2 : null;\n  }\n  getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(t2, e2) {\n    const n2 = this.splitAccordingToSemanticValidity(t2, e2), s2 = n2[0], i2 = n2[1];\n    let r2 = this.getAltThatFinishedDecisionEntryRule(s2);\n    return r2 !== X.INVALID_ALT_NUMBER || i2.items.length > 0 && (r2 = this.getAltThatFinishedDecisionEntryRule(i2), r2 !== X.INVALID_ALT_NUMBER) ? r2 : X.INVALID_ALT_NUMBER;\n  }\n  getAltThatFinishedDecisionEntryRule(t2) {\n    const e2 = [];\n    for (let n2 = 0; n2 < t2.items.length; n2++) {\n      const s2 = t2.items[n2];\n      (s2.reachesIntoOuterContext > 0 || s2.state instanceof C && s2.context.hasEmptyPath()) && e2.indexOf(s2.alt) < 0 && e2.push(s2.alt);\n    }\n    return 0 === e2.length ? X.INVALID_ALT_NUMBER : Math.min.apply(null, e2);\n  }\n  splitAccordingToSemanticValidity(t2, e2) {\n    const n2 = new qt(t2.fullCtx), s2 = new qt(t2.fullCtx);\n    for (let i2 = 0; i2 < t2.items.length; i2++) {\n      const r2 = t2.items[i2];\n      r2.semanticContext !== g.NONE ? r2.semanticContext.evaluate(this.parser, e2) ? n2.add(r2) : s2.add(r2) : n2.add(r2);\n    }\n    return [n2, s2];\n  }\n  evalSemanticContext(t2, e2, n2) {\n    const s2 = new W();\n    for (let i2 = 0; i2 < t2.length; i2++) {\n      const r2 = t2[i2];\n      if (r2.pred === g.NONE) {\n        if (s2.add(r2.alt), !n2)\n          break;\n        continue;\n      }\n      const o2 = r2.pred.evaluate(this.parser, e2);\n      if ((this.debug || this.dfa_debug) && console.log(\"eval pred \" + r2 + \"=\" + o2), o2 && ((this.debug || this.dfa_debug) && console.log(\"PREDICT \" + r2.alt), s2.add(r2.alt), !n2))\n        break;\n    }\n    return s2;\n  }\n  closure(t2, e2, n2, s2, i2, r2) {\n    this.closureCheckingStopState(t2, e2, n2, s2, i2, 0, r2);\n  }\n  closureCheckingStopState(t2, e2, n2, s2, i2, r2, o2) {\n    if ((this.trace_atn_sim || this.debug_closure) && console.log(\"closure(\" + t2.toString(this.parser, true) + \")\"), t2.state instanceof C) {\n      if (!t2.context.isEmpty()) {\n        for (let a2 = 0; a2 < t2.context.length; a2++) {\n          if (t2.context.getReturnState(a2) === B.EMPTY_RETURN_STATE) {\n            if (i2) {\n              e2.add(new m({ state: t2.state, context: B.EMPTY }, t2), this.mergeCache);\n              continue;\n            }\n            this.debug && console.log(\"FALLING off rule \" + this.getRuleName(t2.state.ruleIndex)), this.closure_(t2, e2, n2, s2, i2, r2, o2);\n            continue;\n          }\n          const l2 = this.atn.states[t2.context.getReturnState(a2)], h2 = t2.context.getParent(a2), c2 = { state: l2, alt: t2.alt, context: h2, semanticContext: t2.semanticContext }, u2 = new m(c2, null);\n          u2.reachesIntoOuterContext = t2.reachesIntoOuterContext, this.closureCheckingStopState(u2, e2, n2, s2, i2, r2 - 1, o2);\n        }\n        return;\n      }\n      if (i2)\n        return void e2.add(t2, this.mergeCache);\n      this.debug && console.log(\"FALLING off rule \" + this.getRuleName(t2.state.ruleIndex));\n    }\n    this.closure_(t2, e2, n2, s2, i2, r2, o2);\n  }\n  closure_(t2, e2, n2, s2, i2, r2, o2) {\n    const a2 = t2.state;\n    a2.epsilonOnlyTransitions || e2.add(t2, this.mergeCache);\n    for (let l2 = 0; l2 < a2.transitions.length; l2++) {\n      if (0 === l2 && this.canDropLoopEntryEdgeInLeftRecursiveRule(t2))\n        continue;\n      const h2 = a2.transitions[l2], c2 = s2 && !(h2 instanceof dt), u2 = this.getEpsilonTarget(t2, h2, c2, 0 === r2, i2, o2);\n      if (null !== u2) {\n        let s3 = r2;\n        if (t2.state instanceof C) {\n          if (null !== this._dfa && this._dfa.precedenceDfa && h2.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex && (u2.precedenceFilterSuppressed = true), u2.reachesIntoOuterContext += 1, n2.add(u2) !== u2)\n            continue;\n          e2.dipsIntoOuterContext = true, s3 -= 1, this.debug && console.log(\"dips into outer ctx: \" + u2);\n        } else {\n          if (!h2.isEpsilon && n2.add(u2) !== u2)\n            continue;\n          h2 instanceof y && s3 >= 0 && (s3 += 1);\n        }\n        this.closureCheckingStopState(u2, e2, n2, c2, i2, s3, o2);\n      }\n    }\n  }\n  canDropLoopEntryEdgeInLeftRecursiveRule(t2) {\n    const e2 = t2.state;\n    if (e2.stateType !== A.STAR_LOOP_ENTRY)\n      return false;\n    if (e2.stateType !== A.STAR_LOOP_ENTRY || !e2.isPrecedenceDecision || t2.context.isEmpty() || t2.context.hasEmptyPath())\n      return false;\n    const n2 = t2.context.length;\n    for (let s3 = 0; s3 < n2; s3++)\n      if (this.atn.states[t2.context.getReturnState(s3)].ruleIndex !== e2.ruleIndex)\n        return false;\n    const s2 = e2.transitions[0].target.endState.stateNumber, i2 = this.atn.states[s2];\n    for (let s3 = 0; s3 < n2; s3++) {\n      const n3 = t2.context.getReturnState(s3), r2 = this.atn.states[n3];\n      if (1 !== r2.transitions.length || !r2.transitions[0].isEpsilon)\n        return false;\n      const o2 = r2.transitions[0].target;\n      if (!(r2.stateType === A.BLOCK_END && o2 === e2 || r2 === i2 || o2 === i2 || o2.stateType === A.BLOCK_END && 1 === o2.transitions.length && o2.transitions[0].isEpsilon && o2.transitions[0].target === e2))\n        return false;\n    }\n    return true;\n  }\n  getRuleName(t2) {\n    return null !== this.parser && t2 >= 0 ? this.parser.ruleNames[t2] : \"<rule \" + t2 + \">\";\n  }\n  getEpsilonTarget(t2, e2, n2, i2, r2, o2) {\n    switch (e2.serializationType) {\n      case N.RULE:\n        return this.ruleTransition(t2, e2);\n      case N.PRECEDENCE:\n        return this.precedenceTransition(t2, e2, n2, i2, r2);\n      case N.PREDICATE:\n        return this.predTransition(t2, e2, n2, i2, r2);\n      case N.ACTION:\n        return this.actionTransition(t2, e2);\n      case N.EPSILON:\n        return new m({ state: e2.target }, t2);\n      case N.ATOM:\n      case N.RANGE:\n      case N.SET:\n        return o2 && e2.matches(s.EOF, 0, 1) ? new m({ state: e2.target }, t2) : null;\n      default:\n        return null;\n    }\n  }\n  actionTransition(t2, e2) {\n    if (this.debug) {\n      const t3 = -1 === e2.actionIndex ? 65535 : e2.actionIndex;\n      console.log(\"ACTION edge \" + e2.ruleIndex + \":\" + t3);\n    }\n    return new m({ state: e2.target }, t2);\n  }\n  precedenceTransition(t2, e2, n2, s2, i2) {\n    this.debug && (console.log(\"PRED (collectPredicates=\" + n2 + \") \" + e2.precedence + \">=_p, ctx dependent=true\"), null !== this.parser && console.log(\"context surrounding pred is \" + u(this.parser.getRuleInvocationStack())));\n    let r2 = null;\n    if (n2 && s2)\n      if (i2) {\n        const n3 = this._input.index;\n        this._input.seek(this._startIndex);\n        const s3 = e2.getPredicate().evaluate(this.parser, this._outerContext);\n        this._input.seek(n3), s3 && (r2 = new m({ state: e2.target }, t2));\n      } else {\n        const n3 = g.andContext(t2.semanticContext, e2.getPredicate());\n        r2 = new m({ state: e2.target, semanticContext: n3 }, t2);\n      }\n    else\n      r2 = new m({ state: e2.target }, t2);\n    return this.debug && console.log(\"config from pred transition=\" + r2), r2;\n  }\n  predTransition(t2, e2, n2, s2, i2) {\n    this.debug && (console.log(\"PRED (collectPredicates=\" + n2 + \") \" + e2.ruleIndex + \":\" + e2.predIndex + \", ctx dependent=\" + e2.isCtxDependent), null !== this.parser && console.log(\"context surrounding pred is \" + u(this.parser.getRuleInvocationStack())));\n    let r2 = null;\n    if (n2 && (e2.isCtxDependent && s2 || !e2.isCtxDependent))\n      if (i2) {\n        const n3 = this._input.index;\n        this._input.seek(this._startIndex);\n        const s3 = e2.getPredicate().evaluate(this.parser, this._outerContext);\n        this._input.seek(n3), s3 && (r2 = new m({ state: e2.target }, t2));\n      } else {\n        const n3 = g.andContext(t2.semanticContext, e2.getPredicate());\n        r2 = new m({ state: e2.target, semanticContext: n3 }, t2);\n      }\n    else\n      r2 = new m({ state: e2.target }, t2);\n    return this.debug && console.log(\"config from pred transition=\" + r2), r2;\n  }\n  ruleTransition(t2, e2) {\n    this.debug && console.log(\"CALL rule \" + this.getRuleName(e2.target.ruleIndex) + \", ctx=\" + t2.context);\n    const n2 = e2.followState, s2 = z.create(t2.context, n2.stateNumber);\n    return new m({ state: e2.target, context: s2 }, t2);\n  }\n  getConflictingAlts(t2) {\n    const e2 = ee.getConflictingAltSubsets(t2);\n    return ee.getAlts(e2);\n  }\n  getConflictingAltsOrUniqueAlt(t2) {\n    let e2 = null;\n    return t2.uniqueAlt !== X.INVALID_ALT_NUMBER ? (e2 = new W(), e2.add(t2.uniqueAlt)) : e2 = t2.conflictingAlts, e2;\n  }\n  getTokenName(t2) {\n    if (t2 === s.EOF)\n      return \"EOF\";\n    if (null !== this.parser && null !== this.parser.literalNames) {\n      if (!(t2 >= this.parser.literalNames.length && t2 >= this.parser.symbolicNames.length))\n        return (this.parser.literalNames[t2] || this.parser.symbolicNames[t2]) + \"<\" + t2 + \">\";\n      console.log(t2 + \" ttype out of range: \" + this.parser.literalNames), console.log(\"\" + this.parser.getInputStream().getTokens());\n    }\n    return \"\" + t2;\n  }\n  getLookaheadName(t2) {\n    return this.getTokenName(t2.LA(1));\n  }\n  dumpDeadEndConfigs(t2) {\n    console.log(\"dead end configs: \");\n    const e2 = t2.getDeadEndConfigs();\n    for (let t3 = 0; t3 < e2.length; t3++) {\n      const n2 = e2[t3];\n      let s2 = \"no edges\";\n      if (n2.state.transitions.length > 0) {\n        const t4 = n2.state.transitions[0];\n        t4 instanceof ct ? s2 = \"Atom \" + this.getTokenName(t4.label) : t4 instanceof I && (s2 = (t4 instanceof k ? \"~\" : \"\") + \"Set \" + t4.set);\n      }\n      console.error(n2.toString(this.parser, true) + \":\" + s2);\n    }\n  }\n  noViableAlt(t2, e2, n2, s2) {\n    return new ne(this.parser, t2, t2.get(s2), t2.LT(1), n2, e2);\n  }\n  getUniqueAlt(t2) {\n    let e2 = X.INVALID_ALT_NUMBER;\n    for (let n2 = 0; n2 < t2.items.length; n2++) {\n      const s2 = t2.items[n2];\n      if (e2 === X.INVALID_ALT_NUMBER)\n        e2 = s2.alt;\n      else if (s2.alt !== e2)\n        return X.INVALID_ALT_NUMBER;\n    }\n    return e2;\n  }\n  addDFAEdge(t2, e2, n2, s2) {\n    if (this.debug && console.log(\"EDGE \" + e2 + \" -> \" + s2 + \" upon \" + this.getTokenName(n2)), null === s2)\n      return null;\n    if (s2 = this.addDFAState(t2, s2), null === e2 || n2 < -1 || n2 > this.atn.maxTokenType)\n      return s2;\n    if (null === e2.edges && (e2.edges = []), e2.edges[n2 + 1] = s2, this.debug) {\n      const e3 = null === this.parser ? null : this.parser.literalNames, n3 = null === this.parser ? null : this.parser.symbolicNames;\n      console.log(\"DFA=\\n\" + t2.toString(e3, n3));\n    }\n    return s2;\n  }\n  addDFAState(t2, e2) {\n    if (e2 === Kt.ERROR)\n      return e2;\n    const n2 = t2.states.get(e2);\n    return null !== n2 ? (this.trace_atn_sim && console.log(\"addDFAState \" + e2 + \" exists\"), n2) : (e2.stateNumber = t2.states.length, e2.configs.readOnly || (e2.configs.optimizeConfigs(this), e2.configs.setReadonly(true)), this.trace_atn_sim && console.log(\"addDFAState new \" + e2), t2.states.add(e2), this.debug && console.log(\"adding new DFA state: \" + e2), e2);\n  }\n  reportAttemptingFullContext(t2, e2, n2, s2, i2) {\n    if (this.debug || this.retry_debug) {\n      const e3 = new E(s2, i2 + 1);\n      console.log(\"reportAttemptingFullContext decision=\" + t2.decision + \":\" + n2 + \", input=\" + this.parser.getTokenStream().getText(e3));\n    }\n    null !== this.parser && this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, t2, s2, i2, e2, n2);\n  }\n  reportContextSensitivity(t2, e2, n2, s2, i2) {\n    if (this.debug || this.retry_debug) {\n      const e3 = new E(s2, i2 + 1);\n      console.log(\"reportContextSensitivity decision=\" + t2.decision + \":\" + n2 + \", input=\" + this.parser.getTokenStream().getText(e3));\n    }\n    null !== this.parser && this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, t2, s2, i2, e2, n2);\n  }\n  reportAmbiguity(t2, e2, n2, s2, i2, r2, o2) {\n    if (this.debug || this.retry_debug) {\n      const t3 = new E(n2, s2 + 1);\n      console.log(\"reportAmbiguity \" + r2 + \":\" + o2 + \", input=\" + this.parser.getTokenStream().getText(t3));\n    }\n    null !== this.parser && this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, t2, n2, s2, i2, r2, o2);\n  }\n};\nvar re = class {\n  constructor() {\n    this.cache = new K();\n  }\n  add(t2) {\n    if (t2 === B.EMPTY)\n      return B.EMPTY;\n    const e2 = this.cache.get(t2) || null;\n    return null !== e2 ? e2 : (this.cache.set(t2, t2), t2);\n  }\n  get(t2) {\n    return this.cache.get(t2) || null;\n  }\n  get length() {\n    return this.cache.length;\n  }\n};\nvar oe = { ATN: X, ATNDeserializer: Ot, LexerATNSimulator: Jt, ParserATNSimulator: ie, PredictionMode: ee, PredictionContextCache: re };\nvar ae = class {\n  constructor(t2, e2, n2) {\n    this.dfa = t2, this.literalNames = e2 || [], this.symbolicNames = n2 || [];\n  }\n  toString() {\n    if (null === this.dfa.s0)\n      return null;\n    let t2 = \"\";\n    const e2 = this.dfa.sortedStates();\n    for (let n2 = 0; n2 < e2.length; n2++) {\n      const s2 = e2[n2];\n      if (null !== s2.edges) {\n        const e3 = s2.edges.length;\n        for (let n3 = 0; n3 < e3; n3++) {\n          const e4 = s2.edges[n3] || null;\n          null !== e4 && 2147483647 !== e4.stateNumber && (t2 = t2.concat(this.getStateString(s2)), t2 = t2.concat(\"-\"), t2 = t2.concat(this.getEdgeLabel(n3)), t2 = t2.concat(\"->\"), t2 = t2.concat(this.getStateString(e4)), t2 = t2.concat(\"\\n\"));\n        }\n      }\n    }\n    return 0 === t2.length ? null : t2;\n  }\n  getEdgeLabel(t2) {\n    return 0 === t2 ? \"EOF\" : null !== this.literalNames || null !== this.symbolicNames ? this.literalNames[t2 - 1] || this.symbolicNames[t2 - 1] : String.fromCharCode(t2 - 1);\n  }\n  getStateString(t2) {\n    const e2 = (t2.isAcceptState ? \":\" : \"\") + \"s\" + t2.stateNumber + (t2.requiresFullContext ? \"^\" : \"\");\n    return t2.isAcceptState ? null !== t2.predicates ? e2 + \"=>\" + u(t2.predicates) : e2 + \"=>\" + t2.prediction.toString() : e2;\n  }\n};\nvar le = class extends ae {\n  constructor(t2) {\n    super(t2, null);\n  }\n  getEdgeLabel(t2) {\n    return \"'\" + String.fromCharCode(t2) + \"'\";\n  }\n};\nvar he = class {\n  constructor(t2, e2) {\n    if (void 0 === e2 && (e2 = 0), this.atnStartState = t2, this.decision = e2, this._states = new p(), this.s0 = null, this.precedenceDfa = false, t2 instanceof ot && t2.isPrecedenceDecision) {\n      this.precedenceDfa = true;\n      const t3 = new Ht(null, new qt());\n      t3.edges = [], t3.isAcceptState = false, t3.requiresFullContext = false, this.s0 = t3;\n    }\n  }\n  getPrecedenceStartState(t2) {\n    if (!this.precedenceDfa)\n      throw \"Only precedence DFAs may contain a precedence start state.\";\n    return t2 < 0 || t2 >= this.s0.edges.length ? null : this.s0.edges[t2] || null;\n  }\n  setPrecedenceStartState(t2, e2) {\n    if (!this.precedenceDfa)\n      throw \"Only precedence DFAs may contain a precedence start state.\";\n    t2 < 0 || (this.s0.edges[t2] = e2);\n  }\n  setPrecedenceDfa(t2) {\n    if (this.precedenceDfa !== t2) {\n      if (this._states = new p(), t2) {\n        const t3 = new Ht(null, new qt());\n        t3.edges = [], t3.isAcceptState = false, t3.requiresFullContext = false, this.s0 = t3;\n      } else\n        this.s0 = null;\n      this.precedenceDfa = t2;\n    }\n  }\n  sortedStates() {\n    return this._states.values().sort(function(t2, e2) {\n      return t2.stateNumber - e2.stateNumber;\n    });\n  }\n  toString(t2, e2) {\n    return t2 = t2 || null, e2 = e2 || null, null === this.s0 ? \"\" : new ae(this, t2, e2).toString();\n  }\n  toLexerString() {\n    return null === this.s0 ? \"\" : new le(this).toString();\n  }\n  get states() {\n    return this._states;\n  }\n};\nvar ce = { DFA: he, DFASerializer: ae, LexerDFASerializer: le, PredPrediction: Zt };\nvar ue = { PredictionContext: B };\nvar de = { Interval: E, IntervalSet: _ };\nvar pe = class {\n  visitTerminal(t2) {\n  }\n  visitErrorNode(t2) {\n  }\n  enterEveryRule(t2) {\n  }\n  exitEveryRule(t2) {\n  }\n};\nvar ge = class {\n  visit(t2) {\n    return Array.isArray(t2) ? t2.map(function(t3) {\n      return t3.accept(this);\n    }, this) : t2.accept(this);\n  }\n  visitChildren(t2) {\n    return t2.children ? this.visit(t2.children) : null;\n  }\n  visitTerminal(t2) {\n  }\n  visitErrorNode(t2) {\n  }\n};\nvar fe = class {\n  walk(t2, e2) {\n    if (e2 instanceof D || void 0 !== e2.isErrorNode && e2.isErrorNode())\n      t2.visitErrorNode(e2);\n    else if (e2 instanceof b)\n      t2.visitTerminal(e2);\n    else {\n      this.enterRule(t2, e2);\n      for (let n2 = 0; n2 < e2.getChildCount(); n2++) {\n        const s2 = e2.getChild(n2);\n        this.walk(t2, s2);\n      }\n      this.exitRule(t2, e2);\n    }\n  }\n  enterRule(t2, e2) {\n    const n2 = e2.ruleContext;\n    t2.enterEveryRule(n2), n2.enterRule(t2);\n  }\n  exitRule(t2, e2) {\n    const n2 = e2.ruleContext;\n    n2.exitRule(t2), t2.exitEveryRule(n2);\n  }\n};\nfe.DEFAULT = new fe();\nvar xe = { Trees: M, RuleNode: P, ErrorNode: D, TerminalNode: b, ParseTreeListener: pe, ParseTreeVisitor: ge, ParseTreeWalker: fe };\nvar Te = class extends Mt {\n  constructor(t2) {\n    super({ message: \"\", recognizer: t2, input: t2.getInputStream(), ctx: t2._ctx }), this.offendingToken = t2.getCurrentToken();\n  }\n};\nvar Se = class extends Mt {\n  constructor(t2, e2, n2) {\n    super({ message: me(e2, n2 || null), recognizer: t2, input: t2.getInputStream(), ctx: t2._ctx });\n    const s2 = t2._interp.atn.states[t2.state].transitions[0];\n    s2 instanceof ft ? (this.ruleIndex = s2.ruleIndex, this.predicateIndex = s2.predIndex) : (this.ruleIndex = 0, this.predicateIndex = 0), this.predicate = e2, this.offendingToken = t2.getCurrentToken();\n  }\n};\nfunction me(t2, e2) {\n  return null !== e2 ? e2 : \"failed predicate: {\" + t2 + \"}?\";\n}\nvar Ee = class extends Rt {\n  constructor(t2) {\n    super(), t2 = t2 || true, this.exactOnly = t2;\n  }\n  reportAmbiguity(t2, e2, n2, s2, i2, r2, o2) {\n    if (this.exactOnly && !i2)\n      return;\n    const a2 = \"reportAmbiguity d=\" + this.getDecisionDescription(t2, e2) + \": ambigAlts=\" + this.getConflictingAlts(r2, o2) + \", input='\" + t2.getTokenStream().getText(new E(n2, s2)) + \"'\";\n    t2.notifyErrorListeners(a2);\n  }\n  reportAttemptingFullContext(t2, e2, n2, s2, i2, r2) {\n    const o2 = \"reportAttemptingFullContext d=\" + this.getDecisionDescription(t2, e2) + \", input='\" + t2.getTokenStream().getText(new E(n2, s2)) + \"'\";\n    t2.notifyErrorListeners(o2);\n  }\n  reportContextSensitivity(t2, e2, n2, s2, i2, r2) {\n    const o2 = \"reportContextSensitivity d=\" + this.getDecisionDescription(t2, e2) + \", input='\" + t2.getTokenStream().getText(new E(n2, s2)) + \"'\";\n    t2.notifyErrorListeners(o2);\n  }\n  getDecisionDescription(t2, e2) {\n    const n2 = e2.decision, s2 = e2.atnStartState.ruleIndex, i2 = t2.ruleNames;\n    if (s2 < 0 || s2 >= i2.length)\n      return \"\" + n2;\n    const r2 = i2[s2] || null;\n    return null === r2 || 0 === r2.length ? \"\" + n2 : `${n2} (${r2})`;\n  }\n  getConflictingAlts(t2, e2) {\n    if (null !== t2)\n      return t2;\n    const n2 = new W();\n    for (let t3 = 0; t3 < e2.items.length; t3++)\n      n2.add(e2.items[t3].alt);\n    return `{${n2.values().join(\", \")}}`;\n  }\n};\nvar _e = class __e extends Error {\n  constructor() {\n    super(), Error.captureStackTrace(this, __e);\n  }\n};\nvar Ae = class {\n  reset(t2) {\n  }\n  recoverInline(t2) {\n  }\n  recover(t2, e2) {\n  }\n  sync(t2) {\n  }\n  inErrorRecoveryMode(t2) {\n  }\n  reportError(t2) {\n  }\n};\nvar Ce = class extends Ae {\n  constructor() {\n    super(), this.errorRecoveryMode = false, this.lastErrorIndex = -1, this.lastErrorStates = null, this.nextTokensContext = null, this.nextTokenState = 0;\n  }\n  reset(t2) {\n    this.endErrorCondition(t2);\n  }\n  beginErrorCondition(t2) {\n    this.errorRecoveryMode = true;\n  }\n  inErrorRecoveryMode(t2) {\n    return this.errorRecoveryMode;\n  }\n  endErrorCondition(t2) {\n    this.errorRecoveryMode = false, this.lastErrorStates = null, this.lastErrorIndex = -1;\n  }\n  reportMatch(t2) {\n    this.endErrorCondition(t2);\n  }\n  reportError(t2, e2) {\n    this.inErrorRecoveryMode(t2) || (this.beginErrorCondition(t2), e2 instanceof ne ? this.reportNoViableAlternative(t2, e2) : e2 instanceof Te ? this.reportInputMismatch(t2, e2) : e2 instanceof Se ? this.reportFailedPredicate(t2, e2) : (console.log(\"unknown recognition error type: \" + e2.constructor.name), console.log(e2.stack), t2.notifyErrorListeners(e2.getOffendingToken(), e2.getMessage(), e2)));\n  }\n  recover(t2, e2) {\n    this.lastErrorIndex === t2.getInputStream().index && null !== this.lastErrorStates && this.lastErrorStates.indexOf(t2.state) >= 0 && t2.consume(), this.lastErrorIndex = t2._input.index, null === this.lastErrorStates && (this.lastErrorStates = []), this.lastErrorStates.push(t2.state);\n    const n2 = this.getErrorRecoverySet(t2);\n    this.consumeUntil(t2, n2);\n  }\n  sync(t2) {\n    if (this.inErrorRecoveryMode(t2))\n      return;\n    const e2 = t2._interp.atn.states[t2.state], n2 = t2.getTokenStream().LA(1), i2 = t2.atn.nextTokens(e2);\n    if (i2.contains(n2))\n      return this.nextTokensContext = null, void (this.nextTokenState = A.INVALID_STATE_NUMBER);\n    if (i2.contains(s.EPSILON))\n      null === this.nextTokensContext && (this.nextTokensContext = t2._ctx, this.nextTokensState = t2._stateNumber);\n    else\n      switch (e2.stateType) {\n        case A.BLOCK_START:\n        case A.STAR_BLOCK_START:\n        case A.PLUS_BLOCK_START:\n        case A.STAR_LOOP_ENTRY:\n          if (null !== this.singleTokenDeletion(t2))\n            return;\n          throw new Te(t2);\n        case A.PLUS_LOOP_BACK:\n        case A.STAR_LOOP_BACK: {\n          this.reportUnwantedToken(t2);\n          const e3 = new _();\n          e3.addSet(t2.getExpectedTokens());\n          const n3 = e3.addSet(this.getErrorRecoverySet(t2));\n          this.consumeUntil(t2, n3);\n        }\n      }\n  }\n  reportNoViableAlternative(t2, e2) {\n    const n2 = t2.getTokenStream();\n    let i2;\n    i2 = null !== n2 ? e2.startToken.type === s.EOF ? \"<EOF>\" : n2.getText(new E(e2.startToken.tokenIndex, e2.offendingToken.tokenIndex)) : \"<unknown input>\";\n    const r2 = \"no viable alternative at input \" + this.escapeWSAndQuote(i2);\n    t2.notifyErrorListeners(r2, e2.offendingToken, e2);\n  }\n  reportInputMismatch(t2, e2) {\n    const n2 = \"mismatched input \" + this.getTokenErrorDisplay(e2.offendingToken) + \" expecting \" + e2.getExpectedTokens().toString(t2.literalNames, t2.symbolicNames);\n    t2.notifyErrorListeners(n2, e2.offendingToken, e2);\n  }\n  reportFailedPredicate(t2, e2) {\n    const n2 = \"rule \" + t2.ruleNames[t2._ctx.ruleIndex] + \" \" + e2.message;\n    t2.notifyErrorListeners(n2, e2.offendingToken, e2);\n  }\n  reportUnwantedToken(t2) {\n    if (this.inErrorRecoveryMode(t2))\n      return;\n    this.beginErrorCondition(t2);\n    const e2 = t2.getCurrentToken(), n2 = \"extraneous input \" + this.getTokenErrorDisplay(e2) + \" expecting \" + this.getExpectedTokens(t2).toString(t2.literalNames, t2.symbolicNames);\n    t2.notifyErrorListeners(n2, e2, null);\n  }\n  reportMissingToken(t2) {\n    if (this.inErrorRecoveryMode(t2))\n      return;\n    this.beginErrorCondition(t2);\n    const e2 = t2.getCurrentToken(), n2 = \"missing \" + this.getExpectedTokens(t2).toString(t2.literalNames, t2.symbolicNames) + \" at \" + this.getTokenErrorDisplay(e2);\n    t2.notifyErrorListeners(n2, e2, null);\n  }\n  recoverInline(t2) {\n    const e2 = this.singleTokenDeletion(t2);\n    if (null !== e2)\n      return t2.consume(), e2;\n    if (this.singleTokenInsertion(t2))\n      return this.getMissingSymbol(t2);\n    throw new Te(t2);\n  }\n  singleTokenInsertion(t2) {\n    const e2 = t2.getTokenStream().LA(1), n2 = t2._interp.atn, s2 = n2.states[t2.state].transitions[0].target;\n    return !!n2.nextTokens(s2, t2._ctx).contains(e2) && (this.reportMissingToken(t2), true);\n  }\n  singleTokenDeletion(t2) {\n    const e2 = t2.getTokenStream().LA(2);\n    if (this.getExpectedTokens(t2).contains(e2)) {\n      this.reportUnwantedToken(t2), t2.consume();\n      const e3 = t2.getCurrentToken();\n      return this.reportMatch(t2), e3;\n    }\n    return null;\n  }\n  getMissingSymbol(t2) {\n    const e2 = t2.getCurrentToken(), n2 = this.getExpectedTokens(t2).first();\n    let i2;\n    i2 = n2 === s.EOF ? \"<missing EOF>\" : \"<missing \" + t2.literalNames[n2] + \">\";\n    let r2 = e2;\n    const o2 = t2.getTokenStream().LT(-1);\n    return r2.type === s.EOF && null !== o2 && (r2 = o2), t2.getTokenFactory().create(r2.source, n2, i2, s.DEFAULT_CHANNEL, -1, -1, r2.line, r2.column);\n  }\n  getExpectedTokens(t2) {\n    return t2.getExpectedTokens();\n  }\n  getTokenErrorDisplay(t2) {\n    if (null === t2)\n      return \"<no token>\";\n    let e2 = t2.text;\n    return null === e2 && (e2 = t2.type === s.EOF ? \"<EOF>\" : \"<\" + t2.type + \">\"), this.escapeWSAndQuote(e2);\n  }\n  escapeWSAndQuote(t2) {\n    return \"'\" + (t2 = (t2 = (t2 = t2.replace(/\\n/g, \"\\\\n\")).replace(/\\r/g, \"\\\\r\")).replace(/\\t/g, \"\\\\t\")) + \"'\";\n  }\n  getErrorRecoverySet(t2) {\n    const e2 = t2._interp.atn;\n    let n2 = t2._ctx;\n    const i2 = new _();\n    for (; null !== n2 && n2.invokingState >= 0; ) {\n      const t3 = e2.states[n2.invokingState].transitions[0], s2 = e2.nextTokens(t3.followState);\n      i2.addSet(s2), n2 = n2.parentCtx;\n    }\n    return i2.removeOne(s.EPSILON), i2;\n  }\n  consumeUntil(t2, e2) {\n    let n2 = t2.getTokenStream().LA(1);\n    for (; n2 !== s.EOF && !e2.contains(n2); )\n      t2.consume(), n2 = t2.getTokenStream().LA(1);\n  }\n};\nvar Ne = class extends Ce {\n  constructor() {\n    super();\n  }\n  recover(t2, e2) {\n    let n2 = t2._ctx;\n    for (; null !== n2; )\n      n2.exception = e2, n2 = n2.parentCtx;\n    throw new _e(e2);\n  }\n  recoverInline(t2) {\n    this.recover(t2, new Te(t2));\n  }\n  sync(t2) {\n  }\n};\nvar ye = { RecognitionException: Mt, NoViableAltException: ne, LexerNoViableAltException: Ut, InputMismatchException: Te, FailedPredicateException: Se, DiagnosticErrorListener: Ee, BailErrorStrategy: Ne, DefaultErrorStrategy: Ce, ErrorListener: Rt };\nvar Ie = class {\n  constructor(t2, e2) {\n    if (this.name = \"<empty>\", this.strdata = t2, this.decodeToUnicodeCodePoints = e2 || false, this._index = 0, this.data = [], this.decodeToUnicodeCodePoints)\n      for (let t3 = 0; t3 < this.strdata.length; ) {\n        const e3 = this.strdata.codePointAt(t3);\n        this.data.push(e3), t3 += e3 <= 65535 ? 1 : 2;\n      }\n    else {\n      this.data = new Array(this.strdata.length);\n      for (let t3 = 0; t3 < this.strdata.length; t3++)\n        this.data[t3] = this.strdata.charCodeAt(t3);\n    }\n    this._size = this.data.length;\n  }\n  reset() {\n    this._index = 0;\n  }\n  consume() {\n    if (this._index >= this._size)\n      throw \"cannot consume EOF\";\n    this._index += 1;\n  }\n  LA(t2) {\n    if (0 === t2)\n      return 0;\n    t2 < 0 && (t2 += 1);\n    const e2 = this._index + t2 - 1;\n    return e2 < 0 || e2 >= this._size ? s.EOF : this.data[e2];\n  }\n  LT(t2) {\n    return this.LA(t2);\n  }\n  mark() {\n    return -1;\n  }\n  release(t2) {\n  }\n  seek(t2) {\n    t2 <= this._index ? this._index = t2 : this._index = Math.min(t2, this._size);\n  }\n  getText(t2, e2) {\n    if (e2 >= this._size && (e2 = this._size - 1), t2 >= this._size)\n      return \"\";\n    if (this.decodeToUnicodeCodePoints) {\n      let n2 = \"\";\n      for (let s2 = t2; s2 <= e2; s2++)\n        n2 += String.fromCodePoint(this.data[s2]);\n      return n2;\n    }\n    return this.strdata.slice(t2, e2 + 1);\n  }\n  toString() {\n    return this.strdata;\n  }\n  get index() {\n    return this._index;\n  }\n  get size() {\n    return this._size;\n  }\n};\nvar ke = class extends Ie {\n  constructor(t2, e2) {\n    super(t2, e2);\n  }\n};\nvar Le = (0, import_module.createRequire)(_importMetaUrl)(\"fs\");\nvar Oe = \"undefined\" != typeof process && null != process.versions && null != process.versions.node;\nvar Re = class extends ke {\n  static fromPath(t2, e2, n2) {\n    if (!Oe)\n      throw new Error(\"FileStream is only available when running in Node!\");\n    Le.readFile(t2, e2, function(t3, e3) {\n      let s2 = null;\n      null !== e3 && (s2 = new Ie(e3, true)), n2(t3, s2);\n    });\n  }\n  constructor(t2, e2, n2) {\n    if (!Oe)\n      throw new Error(\"FileStream is only available when running in Node!\");\n    super(Le.readFileSync(t2, e2 || \"utf-8\"), n2), this.fileName = t2;\n  }\n};\nvar ve = { fromString: function(t2) {\n  return new Ie(t2, true);\n}, fromBlob: function(t2, e2, n2, s2) {\n  const i2 = new window.FileReader();\n  i2.onload = function(t3) {\n    const e3 = new Ie(t3.target.result, true);\n    n2(e3);\n  }, i2.onerror = s2, i2.readAsText(t2, e2);\n}, fromBuffer: function(t2, e2) {\n  return new Ie(t2.toString(e2), true);\n}, fromPath: function(t2, e2, n2) {\n  Re.fromPath(t2, e2, n2);\n}, fromPathSync: function(t2, e2) {\n  return new Re(t2, e2);\n} };\nvar we = { arrayToString: u, stringToCharArray: function(t2) {\n  let e2 = new Uint16Array(t2.length);\n  for (let n2 = 0; n2 < t2.length; n2++)\n    e2[n2] = t2.charCodeAt(n2);\n  return e2;\n} };\nvar Pe = class {\n};\nvar be = class extends Pe {\n  constructor(t2) {\n    super(), this.tokenSource = t2, this.tokens = [], this.index = -1, this.fetchedEOF = false;\n  }\n  mark() {\n    return 0;\n  }\n  release(t2) {\n  }\n  reset() {\n    this.seek(0);\n  }\n  seek(t2) {\n    this.lazyInit(), this.index = this.adjustSeekIndex(t2);\n  }\n  get size() {\n    return this.tokens.length;\n  }\n  get(t2) {\n    return this.lazyInit(), this.tokens[t2];\n  }\n  consume() {\n    let t2 = false;\n    if (t2 = this.index >= 0 && (this.fetchedEOF ? this.index < this.tokens.length - 1 : this.index < this.tokens.length), !t2 && this.LA(1) === s.EOF)\n      throw \"cannot consume EOF\";\n    this.sync(this.index + 1) && (this.index = this.adjustSeekIndex(this.index + 1));\n  }\n  sync(t2) {\n    const e2 = t2 - this.tokens.length + 1;\n    return !(e2 > 0) || this.fetch(e2) >= e2;\n  }\n  fetch(t2) {\n    if (this.fetchedEOF)\n      return 0;\n    for (let e2 = 0; e2 < t2; e2++) {\n      const t3 = this.tokenSource.nextToken();\n      if (t3.tokenIndex = this.tokens.length, this.tokens.push(t3), t3.type === s.EOF)\n        return this.fetchedEOF = true, e2 + 1;\n    }\n    return t2;\n  }\n  getTokens(t2, e2, n2) {\n    if (void 0 === n2 && (n2 = null), t2 < 0 || e2 < 0)\n      return null;\n    this.lazyInit();\n    const i2 = [];\n    e2 >= this.tokens.length && (e2 = this.tokens.length - 1);\n    for (let r2 = t2; r2 < e2; r2++) {\n      const t3 = this.tokens[r2];\n      if (t3.type === s.EOF)\n        break;\n      (null === n2 || n2.contains(t3.type)) && i2.push(t3);\n    }\n    return i2;\n  }\n  LA(t2) {\n    return this.LT(t2).type;\n  }\n  LB(t2) {\n    return this.index - t2 < 0 ? null : this.tokens[this.index - t2];\n  }\n  LT(t2) {\n    if (this.lazyInit(), 0 === t2)\n      return null;\n    if (t2 < 0)\n      return this.LB(-t2);\n    const e2 = this.index + t2 - 1;\n    return this.sync(e2), e2 >= this.tokens.length ? this.tokens[this.tokens.length - 1] : this.tokens[e2];\n  }\n  adjustSeekIndex(t2) {\n    return t2;\n  }\n  lazyInit() {\n    -1 === this.index && this.setup();\n  }\n  setup() {\n    this.sync(0), this.index = this.adjustSeekIndex(0);\n  }\n  setTokenSource(t2) {\n    this.tokenSource = t2, this.tokens = [], this.index = -1, this.fetchedEOF = false;\n  }\n  nextTokenOnChannel(t2, e2) {\n    if (this.sync(t2), t2 >= this.tokens.length)\n      return -1;\n    let n2 = this.tokens[t2];\n    for (; n2.channel !== this.channel; ) {\n      if (n2.type === s.EOF)\n        return -1;\n      t2 += 1, this.sync(t2), n2 = this.tokens[t2];\n    }\n    return t2;\n  }\n  previousTokenOnChannel(t2, e2) {\n    for (; t2 >= 0 && this.tokens[t2].channel !== e2; )\n      t2 -= 1;\n    return t2;\n  }\n  getHiddenTokensToRight(t2, e2) {\n    if (void 0 === e2 && (e2 = -1), this.lazyInit(), t2 < 0 || t2 >= this.tokens.length)\n      throw t2 + \" not in 0..\" + this.tokens.length - 1;\n    const n2 = this.nextTokenOnChannel(t2 + 1, Bt.DEFAULT_TOKEN_CHANNEL), s2 = t2 + 1, i2 = -1 === n2 ? this.tokens.length - 1 : n2;\n    return this.filterForChannel(s2, i2, e2);\n  }\n  getHiddenTokensToLeft(t2, e2) {\n    if (void 0 === e2 && (e2 = -1), this.lazyInit(), t2 < 0 || t2 >= this.tokens.length)\n      throw t2 + \" not in 0..\" + this.tokens.length - 1;\n    const n2 = this.previousTokenOnChannel(t2 - 1, Bt.DEFAULT_TOKEN_CHANNEL);\n    if (n2 === t2 - 1)\n      return null;\n    const s2 = n2 + 1, i2 = t2 - 1;\n    return this.filterForChannel(s2, i2, e2);\n  }\n  filterForChannel(t2, e2, n2) {\n    const s2 = [];\n    for (let i2 = t2; i2 < e2 + 1; i2++) {\n      const t3 = this.tokens[i2];\n      -1 === n2 ? t3.channel !== Bt.DEFAULT_TOKEN_CHANNEL && s2.push(t3) : t3.channel === n2 && s2.push(t3);\n    }\n    return 0 === s2.length ? null : s2;\n  }\n  getSourceName() {\n    return this.tokenSource.getSourceName();\n  }\n  getText(t2) {\n    this.lazyInit(), this.fill(), t2 || (t2 = new E(0, this.tokens.length - 1));\n    let e2 = t2.start;\n    e2 instanceof s && (e2 = e2.tokenIndex);\n    let n2 = t2.stop;\n    if (n2 instanceof s && (n2 = n2.tokenIndex), null === e2 || null === n2 || e2 < 0 || n2 < 0)\n      return \"\";\n    n2 >= this.tokens.length && (n2 = this.tokens.length - 1);\n    let i2 = \"\";\n    for (let t3 = e2; t3 < n2 + 1; t3++) {\n      const e3 = this.tokens[t3];\n      if (e3.type === s.EOF)\n        break;\n      i2 += e3.text;\n    }\n    return i2;\n  }\n  fill() {\n    for (this.lazyInit(); 1e3 === this.fetch(1e3); )\n      ;\n  }\n};\nObject.defineProperty(be, \"size\", { get: function() {\n  return this.tokens.length;\n} });\nvar De = class extends be {\n  constructor(t2, e2) {\n    super(t2), this.channel = void 0 === e2 ? s.DEFAULT_CHANNEL : e2;\n  }\n  adjustSeekIndex(t2) {\n    return this.nextTokenOnChannel(t2, this.channel);\n  }\n  LB(t2) {\n    if (0 === t2 || this.index - t2 < 0)\n      return null;\n    let e2 = this.index, n2 = 1;\n    for (; n2 <= t2; )\n      e2 = this.previousTokenOnChannel(e2 - 1, this.channel), n2 += 1;\n    return e2 < 0 ? null : this.tokens[e2];\n  }\n  LT(t2) {\n    if (this.lazyInit(), 0 === t2)\n      return null;\n    if (t2 < 0)\n      return this.LB(-t2);\n    let e2 = this.index, n2 = 1;\n    for (; n2 < t2; )\n      this.sync(e2 + 1) && (e2 = this.nextTokenOnChannel(e2 + 1, this.channel)), n2 += 1;\n    return this.tokens[e2];\n  }\n  getNumberOfOnChannelTokens() {\n    let t2 = 0;\n    this.fill();\n    for (let e2 = 0; e2 < this.tokens.length; e2++) {\n      const n2 = this.tokens[e2];\n      if (n2.channel === this.channel && (t2 += 1), n2.type === s.EOF)\n        break;\n    }\n    return t2;\n  }\n};\nvar Fe = class extends pe {\n  constructor(t2) {\n    super(), this.parser = t2;\n  }\n  enterEveryRule(t2) {\n    console.log(\"enter   \" + this.parser.ruleNames[t2.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n  }\n  visitTerminal(t2) {\n    console.log(\"consume \" + t2.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n  }\n  exitEveryRule(t2) {\n    console.log(\"exit    \" + this.parser.ruleNames[t2.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n  }\n};\nvar Me = class extends Pt {\n  constructor(t2) {\n    super(), this._input = null, this._errHandler = new Ce(), this._precedenceStack = [], this._precedenceStack.push(0), this._ctx = null, this.buildParseTrees = true, this._tracer = null, this._parseListeners = null, this._syntaxErrors = 0, this.setInputStream(t2);\n  }\n  reset() {\n    null !== this._input && this._input.seek(0), this._errHandler.reset(this), this._ctx = null, this._syntaxErrors = 0, this.setTrace(false), this._precedenceStack = [], this._precedenceStack.push(0), null !== this._interp && this._interp.reset();\n  }\n  match(t2) {\n    let e2 = this.getCurrentToken();\n    return e2.type === t2 ? (this._errHandler.reportMatch(this), this.consume()) : (e2 = this._errHandler.recoverInline(this), this.buildParseTrees && -1 === e2.tokenIndex && this._ctx.addErrorNode(e2)), e2;\n  }\n  matchWildcard() {\n    let t2 = this.getCurrentToken();\n    return t2.type > 0 ? (this._errHandler.reportMatch(this), this.consume()) : (t2 = this._errHandler.recoverInline(this), this.buildParseTrees && -1 === t2.tokenIndex && this._ctx.addErrorNode(t2)), t2;\n  }\n  getParseListeners() {\n    return this._parseListeners || [];\n  }\n  addParseListener(t2) {\n    if (null === t2)\n      throw \"listener\";\n    null === this._parseListeners && (this._parseListeners = []), this._parseListeners.push(t2);\n  }\n  removeParseListener(t2) {\n    if (null !== this._parseListeners) {\n      const e2 = this._parseListeners.indexOf(t2);\n      e2 >= 0 && this._parseListeners.splice(e2, 1), 0 === this._parseListeners.length && (this._parseListeners = null);\n    }\n  }\n  removeParseListeners() {\n    this._parseListeners = null;\n  }\n  triggerEnterRuleEvent() {\n    if (null !== this._parseListeners) {\n      const t2 = this._ctx;\n      this._parseListeners.forEach(function(e2) {\n        e2.enterEveryRule(t2), t2.enterRule(e2);\n      });\n    }\n  }\n  triggerExitRuleEvent() {\n    if (null !== this._parseListeners) {\n      const t2 = this._ctx;\n      this._parseListeners.slice(0).reverse().forEach(function(e2) {\n        t2.exitRule(e2), e2.exitEveryRule(t2);\n      });\n    }\n  }\n  getTokenFactory() {\n    return this._input.tokenSource._factory;\n  }\n  setTokenFactory(t2) {\n    this._input.tokenSource._factory = t2;\n  }\n  getATNWithBypassAlts() {\n    const t2 = this.getSerializedATN();\n    if (null === t2)\n      throw \"The current parser does not support an ATN with bypass alternatives.\";\n    let e2 = this.bypassAltsAtnCache[t2];\n    if (null === e2) {\n      const n2 = new St();\n      n2.generateRuleBypassTransitions = true, e2 = new Ot(n2).deserialize(t2), this.bypassAltsAtnCache[t2] = e2;\n    }\n    return e2;\n  }\n  getInputStream() {\n    return this.getTokenStream();\n  }\n  setInputStream(t2) {\n    this.setTokenStream(t2);\n  }\n  getTokenStream() {\n    return this._input;\n  }\n  setTokenStream(t2) {\n    this._input = null, this.reset(), this._input = t2;\n  }\n  get syntaxErrorsCount() {\n    return this._syntaxErrors;\n  }\n  getCurrentToken() {\n    return this._input.LT(1);\n  }\n  notifyErrorListeners(t2, e2, n2) {\n    n2 = n2 || null, null === (e2 = e2 || null) && (e2 = this.getCurrentToken()), this._syntaxErrors += 1;\n    const s2 = e2.line, i2 = e2.column;\n    this.getErrorListenerDispatch().syntaxError(this, e2, s2, i2, t2, n2);\n  }\n  consume() {\n    const t2 = this.getCurrentToken();\n    t2.type !== s.EOF && this.getInputStream().consume();\n    const e2 = null !== this._parseListeners && this._parseListeners.length > 0;\n    if (this.buildParseTrees || e2) {\n      let n2;\n      n2 = this._errHandler.inErrorRecoveryMode(this) ? this._ctx.addErrorNode(t2) : this._ctx.addTokenNode(t2), n2.invokingState = this.state, e2 && this._parseListeners.forEach(function(t3) {\n        n2 instanceof D || void 0 !== n2.isErrorNode && n2.isErrorNode() ? t3.visitErrorNode(n2) : n2 instanceof b && t3.visitTerminal(n2);\n      });\n    }\n    return t2;\n  }\n  addContextToParseTree() {\n    null !== this._ctx.parentCtx && this._ctx.parentCtx.addChild(this._ctx);\n  }\n  enterRule(t2, e2, n2) {\n    this.state = e2, this._ctx = t2, this._ctx.start = this._input.LT(1), this.buildParseTrees && this.addContextToParseTree(), this.triggerEnterRuleEvent();\n  }\n  exitRule() {\n    this._ctx.stop = this._input.LT(-1), this.triggerExitRuleEvent(), this.state = this._ctx.invokingState, this._ctx = this._ctx.parentCtx;\n  }\n  enterOuterAlt(t2, e2) {\n    t2.setAltNumber(e2), this.buildParseTrees && this._ctx !== t2 && null !== this._ctx.parentCtx && (this._ctx.parentCtx.removeLastChild(), this._ctx.parentCtx.addChild(t2)), this._ctx = t2;\n  }\n  getPrecedence() {\n    return 0 === this._precedenceStack.length ? -1 : this._precedenceStack[this._precedenceStack.length - 1];\n  }\n  enterRecursionRule(t2, e2, n2, s2) {\n    this.state = e2, this._precedenceStack.push(s2), this._ctx = t2, this._ctx.start = this._input.LT(1), this.triggerEnterRuleEvent();\n  }\n  pushNewRecursionContext(t2, e2, n2) {\n    const s2 = this._ctx;\n    s2.parentCtx = t2, s2.invokingState = e2, s2.stop = this._input.LT(-1), this._ctx = t2, this._ctx.start = s2.start, this.buildParseTrees && this._ctx.addChild(s2), this.triggerEnterRuleEvent();\n  }\n  unrollRecursionContexts(t2) {\n    this._precedenceStack.pop(), this._ctx.stop = this._input.LT(-1);\n    const e2 = this._ctx, n2 = this.getParseListeners();\n    if (null !== n2 && n2.length > 0)\n      for (; this._ctx !== t2; )\n        this.triggerExitRuleEvent(), this._ctx = this._ctx.parentCtx;\n    else\n      this._ctx = t2;\n    e2.parentCtx = t2, this.buildParseTrees && null !== t2 && t2.addChild(e2);\n  }\n  getInvokingContext(t2) {\n    let e2 = this._ctx;\n    for (; null !== e2; ) {\n      if (e2.ruleIndex === t2)\n        return e2;\n      e2 = e2.parentCtx;\n    }\n    return null;\n  }\n  precpred(t2, e2) {\n    return e2 >= this._precedenceStack[this._precedenceStack.length - 1];\n  }\n  inContext(t2) {\n    return false;\n  }\n  isExpectedToken(t2) {\n    const e2 = this._interp.atn;\n    let n2 = this._ctx;\n    const i2 = e2.states[this.state];\n    let r2 = e2.nextTokens(i2);\n    if (r2.contains(t2))\n      return true;\n    if (!r2.contains(s.EPSILON))\n      return false;\n    for (; null !== n2 && n2.invokingState >= 0 && r2.contains(s.EPSILON); ) {\n      const s2 = e2.states[n2.invokingState].transitions[0];\n      if (r2 = e2.nextTokens(s2.followState), r2.contains(t2))\n        return true;\n      n2 = n2.parentCtx;\n    }\n    return !(!r2.contains(s.EPSILON) || t2 !== s.EOF);\n  }\n  getExpectedTokens() {\n    return this._interp.atn.getExpectedTokens(this.state, this._ctx);\n  }\n  getExpectedTokensWithinCurrentRule() {\n    const t2 = this._interp.atn, e2 = t2.states[this.state];\n    return t2.nextTokens(e2);\n  }\n  getRuleIndex(t2) {\n    const e2 = this.getRuleIndexMap()[t2];\n    return null !== e2 ? e2 : -1;\n  }\n  getRuleInvocationStack(t2) {\n    null === (t2 = t2 || null) && (t2 = this._ctx);\n    const e2 = [];\n    for (; null !== t2; ) {\n      const n2 = t2.ruleIndex;\n      n2 < 0 ? e2.push(\"n/a\") : e2.push(this.ruleNames[n2]), t2 = t2.parentCtx;\n    }\n    return e2;\n  }\n  getDFAStrings() {\n    return this._interp.decisionToDFA.toString();\n  }\n  dumpDFA() {\n    let t2 = false;\n    for (let e2 = 0; e2 < this._interp.decisionToDFA.length; e2++) {\n      const n2 = this._interp.decisionToDFA[e2];\n      n2.states.length > 0 && (t2 && console.log(), this.printer.println(\"Decision \" + n2.decision + \":\"), this.printer.print(n2.toString(this.literalNames, this.symbolicNames)), t2 = true);\n    }\n  }\n  getSourceName() {\n    return this._input.sourceName;\n  }\n  setTrace(t2) {\n    t2 ? (null !== this._tracer && this.removeParseListener(this._tracer), this._tracer = new Fe(this), this.addParseListener(this._tracer)) : (this.removeParseListener(this._tracer), this._tracer = null);\n  }\n};\nMe.bypassAltsAtnCache = {};\nvar Ue = class extends b {\n  constructor(t2) {\n    super(), this.parentCtx = null, this.symbol = t2;\n  }\n  getChild(t2) {\n    return null;\n  }\n  getSymbol() {\n    return this.symbol;\n  }\n  getParent() {\n    return this.parentCtx;\n  }\n  getPayload() {\n    return this.symbol;\n  }\n  getSourceInterval() {\n    if (null === this.symbol)\n      return E.INVALID_INTERVAL;\n    const t2 = this.symbol.tokenIndex;\n    return new E(t2, t2);\n  }\n  getChildCount() {\n    return 0;\n  }\n  accept(t2) {\n    return t2.visitTerminal(this);\n  }\n  getText() {\n    return this.symbol.text;\n  }\n  toString() {\n    return this.symbol.type === s.EOF ? \"<EOF>\" : this.symbol.text;\n  }\n};\nvar Be = class extends Ue {\n  constructor(t2) {\n    super(t2);\n  }\n  isErrorNode() {\n    return true;\n  }\n  accept(t2) {\n    return t2.visitErrorNode(this);\n  }\n};\nvar Ve = class extends U {\n  constructor(t2, e2) {\n    super(t2, e2), this.children = null, this.start = null, this.stop = null, this.exception = null;\n  }\n  copyFrom(t2) {\n    this.parentCtx = t2.parentCtx, this.invokingState = t2.invokingState, this.children = null, this.start = t2.start, this.stop = t2.stop, t2.children && (this.children = [], t2.children.map(function(t3) {\n      t3 instanceof Be && (this.children.push(t3), t3.parentCtx = this);\n    }, this));\n  }\n  enterRule(t2) {\n  }\n  exitRule(t2) {\n  }\n  addChild(t2) {\n    return null === this.children && (this.children = []), this.children.push(t2), t2;\n  }\n  removeLastChild() {\n    null !== this.children && this.children.pop();\n  }\n  addTokenNode(t2) {\n    const e2 = new Ue(t2);\n    return this.addChild(e2), e2.parentCtx = this, e2;\n  }\n  addErrorNode(t2) {\n    const e2 = new Be(t2);\n    return this.addChild(e2), e2.parentCtx = this, e2;\n  }\n  getChild(t2, e2) {\n    if (e2 = e2 || null, null === this.children || t2 < 0 || t2 >= this.children.length)\n      return null;\n    if (null === e2)\n      return this.children[t2];\n    for (let n2 = 0; n2 < this.children.length; n2++) {\n      const s2 = this.children[n2];\n      if (s2 instanceof e2) {\n        if (0 === t2)\n          return s2;\n        t2 -= 1;\n      }\n    }\n    return null;\n  }\n  getToken(t2, e2) {\n    if (null === this.children || e2 < 0 || e2 >= this.children.length)\n      return null;\n    for (let n2 = 0; n2 < this.children.length; n2++) {\n      const s2 = this.children[n2];\n      if (s2 instanceof b && s2.symbol.type === t2) {\n        if (0 === e2)\n          return s2;\n        e2 -= 1;\n      }\n    }\n    return null;\n  }\n  getTokens(t2) {\n    if (null === this.children)\n      return [];\n    {\n      const e2 = [];\n      for (let n2 = 0; n2 < this.children.length; n2++) {\n        const s2 = this.children[n2];\n        s2 instanceof b && s2.symbol.type === t2 && e2.push(s2);\n      }\n      return e2;\n    }\n  }\n  getTypedRuleContext(t2, e2) {\n    return this.getChild(e2, t2);\n  }\n  getTypedRuleContexts(t2) {\n    if (null === this.children)\n      return [];\n    {\n      const e2 = [];\n      for (let n2 = 0; n2 < this.children.length; n2++) {\n        const s2 = this.children[n2];\n        s2 instanceof t2 && e2.push(s2);\n      }\n      return e2;\n    }\n  }\n  getChildCount() {\n    return null === this.children ? 0 : this.children.length;\n  }\n  getSourceInterval() {\n    return null === this.start || null === this.stop ? E.INVALID_INTERVAL : new E(this.start.tokenIndex, this.stop.tokenIndex);\n  }\n};\nU.EMPTY = new Ve();\nvar ze = class _ze {\n  constructor(t2) {\n    this.tokens = t2, this.programs = /* @__PURE__ */ new Map();\n  }\n  getTokenStream() {\n    return this.tokens;\n  }\n  insertAfter(t2, e2) {\n    let n2, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;\n    n2 = \"number\" == typeof t2 ? t2 : t2.tokenIndex;\n    let i2 = this.getProgram(s2), r2 = new je(this.tokens, n2, i2.length, e2);\n    i2.push(r2);\n  }\n  insertBefore(t2, e2) {\n    let n2, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;\n    n2 = \"number\" == typeof t2 ? t2 : t2.tokenIndex;\n    const i2 = this.getProgram(s2), r2 = new Ge(this.tokens, n2, i2.length, e2);\n    i2.push(r2);\n  }\n  replaceSingle(t2, e2) {\n    let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;\n    this.replace(t2, t2, e2, n2);\n  }\n  replace(t2, e2, n2) {\n    let s2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : _ze.DEFAULT_PROGRAM_NAME;\n    if (\"number\" != typeof t2 && (t2 = t2.tokenIndex), \"number\" != typeof e2 && (e2 = e2.tokenIndex), t2 > e2 || t2 < 0 || e2 < 0 || e2 >= this.tokens.size)\n      throw new RangeError(`replace: range invalid: ${t2}..${e2}(size=${this.tokens.size})`);\n    let i2 = this.getProgram(s2), r2 = new We(this.tokens, t2, e2, i2.length, n2);\n    i2.push(r2);\n  }\n  delete(t2, e2) {\n    let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : _ze.DEFAULT_PROGRAM_NAME;\n    void 0 === e2 && (e2 = t2), this.replace(t2, e2, null, n2);\n  }\n  getProgram(t2) {\n    let e2 = this.programs.get(t2);\n    return null == e2 && (e2 = this.initializeProgram(t2)), e2;\n  }\n  initializeProgram(t2) {\n    const e2 = [];\n    return this.programs.set(t2, e2), e2;\n  }\n  getText(t2) {\n    let e2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : _ze.DEFAULT_PROGRAM_NAME;\n    e2 = t2 instanceof E ? t2 : new E(0, this.tokens.size - 1), \"string\" == typeof t2 && (n2 = t2);\n    const i2 = this.programs.get(n2);\n    let r2 = e2.start, o2 = e2.stop;\n    if (o2 > this.tokens.size - 1 && (o2 = this.tokens.size - 1), r2 < 0 && (r2 = 0), null == i2 || 0 === i2.length)\n      return this.tokens.getText(new E(r2, o2));\n    let a2 = [], l2 = this.reduceToSingleOperationPerIndex(i2), h2 = r2;\n    for (; h2 <= o2 && h2 < this.tokens.size; ) {\n      let t3 = l2.get(h2);\n      l2.delete(h2);\n      let e3 = this.tokens.get(h2);\n      null == t3 ? (e3.type !== s.EOF && a2.push(String(e3.text)), h2++) : h2 = t3.execute(a2);\n    }\n    if (o2 === this.tokens.size - 1)\n      for (const t3 of l2.values())\n        t3.index >= this.tokens.size - 1 && a2.push(t3.text.toString());\n    return a2.join(\"\");\n  }\n  reduceToSingleOperationPerIndex(t2) {\n    for (let e3 = 0; e3 < t2.length; e3++) {\n      let n2 = t2[e3];\n      if (null == n2)\n        continue;\n      if (!(n2 instanceof We))\n        continue;\n      let s2 = n2, i2 = this.getKindOfOps(t2, Ge, e3);\n      for (let e4 of i2)\n        e4.index === s2.index ? (t2[e4.instructionIndex] = void 0, s2.text = e4.text.toString() + (null != s2.text ? s2.text.toString() : \"\")) : e4.index > s2.index && e4.index <= s2.lastIndex && (t2[e4.instructionIndex] = void 0);\n      let r2 = this.getKindOfOps(t2, We, e3);\n      for (let e4 of r2) {\n        if (e4.index >= s2.index && e4.lastIndex <= s2.lastIndex) {\n          t2[e4.instructionIndex] = void 0;\n          continue;\n        }\n        let n3 = e4.lastIndex < s2.index || e4.index > s2.lastIndex;\n        if (null != e4.text || null != s2.text || n3) {\n          if (!n3)\n            throw new Error(`replace op boundaries of ${s2} overlap with previous ${e4}`);\n        } else\n          t2[e4.instructionIndex] = void 0, s2.index = Math.min(e4.index, s2.index), s2.lastIndex = Math.max(e4.lastIndex, s2.lastIndex);\n      }\n    }\n    for (let e3 = 0; e3 < t2.length; e3++) {\n      let n2 = t2[e3];\n      if (null == n2)\n        continue;\n      if (!(n2 instanceof Ge))\n        continue;\n      let s2 = n2, i2 = this.getKindOfOps(t2, Ge, e3);\n      for (let e4 of i2)\n        e4.index === s2.index && (e4 instanceof je ? (s2.text = this.catOpText(e4.text, s2.text), t2[e4.instructionIndex] = void 0) : e4 instanceof Ge && (s2.text = this.catOpText(s2.text, e4.text), t2[e4.instructionIndex] = void 0));\n      let r2 = this.getKindOfOps(t2, We, e3);\n      for (let n3 of r2)\n        if (s2.index !== n3.index) {\n          if (s2.index >= n3.index && s2.index <= n3.lastIndex)\n            throw new Error(`insert op ${s2} within boundaries of previous ${n3}`);\n        } else\n          n3.text = this.catOpText(s2.text, n3.text), t2[e3] = void 0;\n    }\n    let e2 = /* @__PURE__ */ new Map();\n    for (let n2 of t2)\n      if (null != n2) {\n        if (null != e2.get(n2.index))\n          throw new Error(\"should only be one op per index\");\n        e2.set(n2.index, n2);\n      }\n    return e2;\n  }\n  catOpText(t2, e2) {\n    let n2 = \"\", s2 = \"\";\n    return null != t2 && (n2 = t2.toString()), null != e2 && (s2 = e2.toString()), n2 + s2;\n  }\n  getKindOfOps(t2, e2, n2) {\n    return t2.slice(0, n2).filter((t3) => t3 && t3 instanceof e2);\n  }\n};\nvar qe;\nvar He;\nvar Ke;\nqe = ze, Ke = \"default\", (He = function(t2) {\n  var e2 = function(t3, e3) {\n    if (\"object\" != typeof t3 || null === t3)\n      return t3;\n    var n2 = t3[Symbol.toPrimitive];\n    if (void 0 !== n2) {\n      var s2 = n2.call(t3, \"string\");\n      if (\"object\" != typeof s2)\n        return s2;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return String(t3);\n  }(t2);\n  return \"symbol\" == typeof e2 ? e2 : String(e2);\n}(He = \"DEFAULT_PROGRAM_NAME\")) in qe ? Object.defineProperty(qe, He, { value: Ke, enumerable: true, configurable: true, writable: true }) : qe[He] = Ke;\nvar Ye = class {\n  constructor(t2, e2, n2, s2) {\n    this.tokens = t2, this.instructionIndex = n2, this.index = e2, this.text = void 0 === s2 ? \"\" : s2;\n  }\n  toString() {\n    let t2 = this.constructor.name;\n    const e2 = t2.indexOf(\"$\");\n    return t2 = t2.substring(e2 + 1, t2.length), \"<\" + t2 + \"@\" + this.tokens.get(this.index) + ':\"' + this.text + '\">';\n  }\n};\nvar Ge = class extends Ye {\n  constructor(t2, e2, n2, s2) {\n    super(t2, e2, n2, s2);\n  }\n  execute(t2) {\n    return this.text && t2.push(this.text.toString()), this.tokens.get(this.index).type !== s.EOF && t2.push(String(this.tokens.get(this.index).text)), this.index + 1;\n  }\n};\nvar je = class extends Ge {\n  constructor(t2, e2, n2, s2) {\n    super(t2, e2 + 1, n2, s2);\n  }\n};\nvar We = class extends Ye {\n  constructor(t2, e2, n2, s2, i2) {\n    super(t2, e2, s2, i2), this.lastIndex = n2;\n  }\n  execute(t2) {\n    return this.text && t2.push(this.text.toString()), this.lastIndex + 1;\n  }\n  toString() {\n    return null == this.text ? \"<DeleteOp@\" + this.tokens.get(this.index) + \"..\" + this.tokens.get(this.lastIndex) + \">\" : \"<ReplaceOp@\" + this.tokens.get(this.index) + \"..\" + this.tokens.get(this.lastIndex) + ':\"' + this.text + '\">';\n  }\n};\nvar $e = { atn: oe, dfa: ce, context: ue, misc: de, tree: xe, error: ye, Token: s, CommonToken: bt, CharStreams: ve, CharStream: ke, InputStream: ke, FileStream: Re, CommonTokenStream: De, Lexer: Bt, Parser: Me, ParserRuleContext: Ve, Interval: E, IntervalSet: _, LL1Analyzer: $, Utils: we, TokenStreamRewriter: ze };\nvar Xe = n.dx;\nvar Je = n.q2;\nvar Ze = n.FO;\nvar Qe = n.xf;\nvar tn = n.Gy;\nvar en = n.s4;\nvar nn = n.c7;\nvar sn = n._7;\nvar rn = n.tx;\nvar on = n.gp;\nvar an = n.cK;\nvar ln = n.zs;\nvar hn = n.Rh;\nvar cn = n.AV;\nvar un = n.Xp;\nvar dn = n.VS;\nvar pn = n.ul;\nvar gn = n.hW;\nvar fn = n.x1;\nvar xn = n.z5;\nvar Tn = n.oN;\nvar Sn = n.TB;\nvar mn = n.u1;\nvar En = n._b;\nvar _n = n.$F;\nvar An = n._T;\nvar Cn = n.db;\nvar Nn = n.Zx;\nvar yn = n._x;\nvar In = n.r8;\nvar kn = n.JI;\nvar Ln = n.TP;\nvar On = n.WU;\nvar Rn = n.Nj;\nvar vn = n.ZP;\n\n// src/antlr/SolidityLexer.ts\nvar _SolidityLexer = class _SolidityLexer extends gn {\n  constructor(input) {\n    super(input);\n    this._interp = new fn(this, _SolidityLexer._ATN, _SolidityLexer.DecisionsToDFA, new Cn());\n  }\n  get grammarFileName() {\n    return \"Solidity.g4\";\n  }\n  get literalNames() {\n    return _SolidityLexer.literalNames;\n  }\n  get symbolicNames() {\n    return _SolidityLexer.symbolicNames;\n  }\n  get ruleNames() {\n    return _SolidityLexer.ruleNames;\n  }\n  get serializedATN() {\n    return _SolidityLexer._serializedATN;\n  }\n  get channelNames() {\n    return _SolidityLexer.channelNames;\n  }\n  get modeNames() {\n    return _SolidityLexer.modeNames;\n  }\n  static get _ATN() {\n    if (!_SolidityLexer.__ATN) {\n      _SolidityLexer.__ATN = new Je().deserialize(_SolidityLexer._serializedATN);\n    }\n    return _SolidityLexer.__ATN;\n  }\n};\n_SolidityLexer.T__0 = 1;\n_SolidityLexer.T__1 = 2;\n_SolidityLexer.T__2 = 3;\n_SolidityLexer.T__3 = 4;\n_SolidityLexer.T__4 = 5;\n_SolidityLexer.T__5 = 6;\n_SolidityLexer.T__6 = 7;\n_SolidityLexer.T__7 = 8;\n_SolidityLexer.T__8 = 9;\n_SolidityLexer.T__9 = 10;\n_SolidityLexer.T__10 = 11;\n_SolidityLexer.T__11 = 12;\n_SolidityLexer.T__12 = 13;\n_SolidityLexer.T__13 = 14;\n_SolidityLexer.T__14 = 15;\n_SolidityLexer.T__15 = 16;\n_SolidityLexer.T__16 = 17;\n_SolidityLexer.T__17 = 18;\n_SolidityLexer.T__18 = 19;\n_SolidityLexer.T__19 = 20;\n_SolidityLexer.T__20 = 21;\n_SolidityLexer.T__21 = 22;\n_SolidityLexer.T__22 = 23;\n_SolidityLexer.T__23 = 24;\n_SolidityLexer.T__24 = 25;\n_SolidityLexer.T__25 = 26;\n_SolidityLexer.T__26 = 27;\n_SolidityLexer.T__27 = 28;\n_SolidityLexer.T__28 = 29;\n_SolidityLexer.T__29 = 30;\n_SolidityLexer.T__30 = 31;\n_SolidityLexer.T__31 = 32;\n_SolidityLexer.T__32 = 33;\n_SolidityLexer.T__33 = 34;\n_SolidityLexer.T__34 = 35;\n_SolidityLexer.T__35 = 36;\n_SolidityLexer.T__36 = 37;\n_SolidityLexer.T__37 = 38;\n_SolidityLexer.T__38 = 39;\n_SolidityLexer.T__39 = 40;\n_SolidityLexer.T__40 = 41;\n_SolidityLexer.T__41 = 42;\n_SolidityLexer.T__42 = 43;\n_SolidityLexer.T__43 = 44;\n_SolidityLexer.T__44 = 45;\n_SolidityLexer.T__45 = 46;\n_SolidityLexer.T__46 = 47;\n_SolidityLexer.T__47 = 48;\n_SolidityLexer.T__48 = 49;\n_SolidityLexer.T__49 = 50;\n_SolidityLexer.T__50 = 51;\n_SolidityLexer.T__51 = 52;\n_SolidityLexer.T__52 = 53;\n_SolidityLexer.T__53 = 54;\n_SolidityLexer.T__54 = 55;\n_SolidityLexer.T__55 = 56;\n_SolidityLexer.T__56 = 57;\n_SolidityLexer.T__57 = 58;\n_SolidityLexer.T__58 = 59;\n_SolidityLexer.T__59 = 60;\n_SolidityLexer.T__60 = 61;\n_SolidityLexer.T__61 = 62;\n_SolidityLexer.T__62 = 63;\n_SolidityLexer.T__63 = 64;\n_SolidityLexer.T__64 = 65;\n_SolidityLexer.T__65 = 66;\n_SolidityLexer.T__66 = 67;\n_SolidityLexer.T__67 = 68;\n_SolidityLexer.T__68 = 69;\n_SolidityLexer.T__69 = 70;\n_SolidityLexer.T__70 = 71;\n_SolidityLexer.T__71 = 72;\n_SolidityLexer.T__72 = 73;\n_SolidityLexer.T__73 = 74;\n_SolidityLexer.T__74 = 75;\n_SolidityLexer.T__75 = 76;\n_SolidityLexer.T__76 = 77;\n_SolidityLexer.T__77 = 78;\n_SolidityLexer.T__78 = 79;\n_SolidityLexer.T__79 = 80;\n_SolidityLexer.T__80 = 81;\n_SolidityLexer.T__81 = 82;\n_SolidityLexer.T__82 = 83;\n_SolidityLexer.T__83 = 84;\n_SolidityLexer.T__84 = 85;\n_SolidityLexer.T__85 = 86;\n_SolidityLexer.T__86 = 87;\n_SolidityLexer.T__87 = 88;\n_SolidityLexer.T__88 = 89;\n_SolidityLexer.T__89 = 90;\n_SolidityLexer.T__90 = 91;\n_SolidityLexer.T__91 = 92;\n_SolidityLexer.T__92 = 93;\n_SolidityLexer.T__93 = 94;\n_SolidityLexer.T__94 = 95;\n_SolidityLexer.T__95 = 96;\n_SolidityLexer.Int = 97;\n_SolidityLexer.Uint = 98;\n_SolidityLexer.Byte = 99;\n_SolidityLexer.Fixed = 100;\n_SolidityLexer.Ufixed = 101;\n_SolidityLexer.BooleanLiteral = 102;\n_SolidityLexer.DecimalNumber = 103;\n_SolidityLexer.HexNumber = 104;\n_SolidityLexer.NumberUnit = 105;\n_SolidityLexer.HexLiteralFragment = 106;\n_SolidityLexer.ReservedKeyword = 107;\n_SolidityLexer.AnonymousKeyword = 108;\n_SolidityLexer.BreakKeyword = 109;\n_SolidityLexer.ConstantKeyword = 110;\n_SolidityLexer.TransientKeyword = 111;\n_SolidityLexer.ImmutableKeyword = 112;\n_SolidityLexer.ContinueKeyword = 113;\n_SolidityLexer.LeaveKeyword = 114;\n_SolidityLexer.ExternalKeyword = 115;\n_SolidityLexer.IndexedKeyword = 116;\n_SolidityLexer.InternalKeyword = 117;\n_SolidityLexer.PayableKeyword = 118;\n_SolidityLexer.PrivateKeyword = 119;\n_SolidityLexer.PublicKeyword = 120;\n_SolidityLexer.VirtualKeyword = 121;\n_SolidityLexer.PureKeyword = 122;\n_SolidityLexer.TypeKeyword = 123;\n_SolidityLexer.ViewKeyword = 124;\n_SolidityLexer.GlobalKeyword = 125;\n_SolidityLexer.ConstructorKeyword = 126;\n_SolidityLexer.FallbackKeyword = 127;\n_SolidityLexer.ReceiveKeyword = 128;\n_SolidityLexer.Identifier = 129;\n_SolidityLexer.StringLiteralFragment = 130;\n_SolidityLexer.VersionLiteral = 131;\n_SolidityLexer.WS = 132;\n_SolidityLexer.COMMENT = 133;\n_SolidityLexer.LINE_COMMENT = 134;\n_SolidityLexer.EOF = On.EOF;\n_SolidityLexer.channelNames = [\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"];\n_SolidityLexer.literalNames = [\n  null,\n  \"'pragma'\",\n  \"';'\",\n  \"'*'\",\n  \"'||'\",\n  \"'^'\",\n  \"'~'\",\n  \"'>='\",\n  \"'>'\",\n  \"'<'\",\n  \"'<='\",\n  \"'='\",\n  \"'as'\",\n  \"'import'\",\n  \"'from'\",\n  \"'{'\",\n  \"','\",\n  \"'}'\",\n  \"'abstract'\",\n  \"'contract'\",\n  \"'interface'\",\n  \"'library'\",\n  \"'is'\",\n  \"'('\",\n  \"')'\",\n  \"'error'\",\n  \"'using'\",\n  \"'for'\",\n  \"'|'\",\n  \"'&'\",\n  \"'+'\",\n  \"'-'\",\n  \"'/'\",\n  \"'%'\",\n  \"'=='\",\n  \"'!='\",\n  \"'struct'\",\n  \"'modifier'\",\n  \"'function'\",\n  \"'returns'\",\n  \"'event'\",\n  \"'enum'\",\n  \"'['\",\n  \"']'\",\n  \"'address'\",\n  \"'.'\",\n  \"'mapping'\",\n  \"'=>'\",\n  \"'memory'\",\n  \"'storage'\",\n  \"'calldata'\",\n  \"'if'\",\n  \"'else'\",\n  \"'try'\",\n  \"'catch'\",\n  \"'while'\",\n  \"'unchecked'\",\n  \"'assembly'\",\n  \"'do'\",\n  \"'return'\",\n  \"'throw'\",\n  \"'emit'\",\n  \"'revert'\",\n  \"'var'\",\n  \"'bool'\",\n  \"'string'\",\n  \"'byte'\",\n  \"'++'\",\n  \"'--'\",\n  \"'new'\",\n  \"':'\",\n  \"'delete'\",\n  \"'!'\",\n  \"'**'\",\n  \"'<<'\",\n  \"'>>'\",\n  \"'&&'\",\n  \"'?'\",\n  \"'|='\",\n  \"'^='\",\n  \"'&='\",\n  \"'<<='\",\n  \"'>>='\",\n  \"'+='\",\n  \"'-='\",\n  \"'*='\",\n  \"'/='\",\n  \"'%='\",\n  \"'let'\",\n  \"':='\",\n  \"'=:'\",\n  \"'switch'\",\n  \"'case'\",\n  \"'default'\",\n  \"'->'\",\n  \"'callback'\",\n  \"'override'\",\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  \"'anonymous'\",\n  \"'break'\",\n  \"'constant'\",\n  \"'transient'\",\n  \"'immutable'\",\n  \"'continue'\",\n  \"'leave'\",\n  \"'external'\",\n  \"'indexed'\",\n  \"'internal'\",\n  \"'payable'\",\n  \"'private'\",\n  \"'public'\",\n  \"'virtual'\",\n  \"'pure'\",\n  \"'type'\",\n  \"'view'\",\n  \"'global'\",\n  \"'constructor'\",\n  \"'fallback'\",\n  \"'receive'\"\n];\n_SolidityLexer.symbolicNames = [\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"Ufixed\",\n  \"BooleanLiteral\",\n  \"DecimalNumber\",\n  \"HexNumber\",\n  \"NumberUnit\",\n  \"HexLiteralFragment\",\n  \"ReservedKeyword\",\n  \"AnonymousKeyword\",\n  \"BreakKeyword\",\n  \"ConstantKeyword\",\n  \"TransientKeyword\",\n  \"ImmutableKeyword\",\n  \"ContinueKeyword\",\n  \"LeaveKeyword\",\n  \"ExternalKeyword\",\n  \"IndexedKeyword\",\n  \"InternalKeyword\",\n  \"PayableKeyword\",\n  \"PrivateKeyword\",\n  \"PublicKeyword\",\n  \"VirtualKeyword\",\n  \"PureKeyword\",\n  \"TypeKeyword\",\n  \"ViewKeyword\",\n  \"GlobalKeyword\",\n  \"ConstructorKeyword\",\n  \"FallbackKeyword\",\n  \"ReceiveKeyword\",\n  \"Identifier\",\n  \"StringLiteralFragment\",\n  \"VersionLiteral\",\n  \"WS\",\n  \"COMMENT\",\n  \"LINE_COMMENT\"\n];\n_SolidityLexer.modeNames = [\"DEFAULT_MODE\"];\n_SolidityLexer.ruleNames = [\n  \"T__0\",\n  \"T__1\",\n  \"T__2\",\n  \"T__3\",\n  \"T__4\",\n  \"T__5\",\n  \"T__6\",\n  \"T__7\",\n  \"T__8\",\n  \"T__9\",\n  \"T__10\",\n  \"T__11\",\n  \"T__12\",\n  \"T__13\",\n  \"T__14\",\n  \"T__15\",\n  \"T__16\",\n  \"T__17\",\n  \"T__18\",\n  \"T__19\",\n  \"T__20\",\n  \"T__21\",\n  \"T__22\",\n  \"T__23\",\n  \"T__24\",\n  \"T__25\",\n  \"T__26\",\n  \"T__27\",\n  \"T__28\",\n  \"T__29\",\n  \"T__30\",\n  \"T__31\",\n  \"T__32\",\n  \"T__33\",\n  \"T__34\",\n  \"T__35\",\n  \"T__36\",\n  \"T__37\",\n  \"T__38\",\n  \"T__39\",\n  \"T__40\",\n  \"T__41\",\n  \"T__42\",\n  \"T__43\",\n  \"T__44\",\n  \"T__45\",\n  \"T__46\",\n  \"T__47\",\n  \"T__48\",\n  \"T__49\",\n  \"T__50\",\n  \"T__51\",\n  \"T__52\",\n  \"T__53\",\n  \"T__54\",\n  \"T__55\",\n  \"T__56\",\n  \"T__57\",\n  \"T__58\",\n  \"T__59\",\n  \"T__60\",\n  \"T__61\",\n  \"T__62\",\n  \"T__63\",\n  \"T__64\",\n  \"T__65\",\n  \"T__66\",\n  \"T__67\",\n  \"T__68\",\n  \"T__69\",\n  \"T__70\",\n  \"T__71\",\n  \"T__72\",\n  \"T__73\",\n  \"T__74\",\n  \"T__75\",\n  \"T__76\",\n  \"T__77\",\n  \"T__78\",\n  \"T__79\",\n  \"T__80\",\n  \"T__81\",\n  \"T__82\",\n  \"T__83\",\n  \"T__84\",\n  \"T__85\",\n  \"T__86\",\n  \"T__87\",\n  \"T__88\",\n  \"T__89\",\n  \"T__90\",\n  \"T__91\",\n  \"T__92\",\n  \"T__93\",\n  \"T__94\",\n  \"T__95\",\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"Ufixed\",\n  \"NumberOfBits\",\n  \"NumberOfBytes\",\n  \"BooleanLiteral\",\n  \"DecimalNumber\",\n  \"DecimalDigits\",\n  \"HexNumber\",\n  \"HexDigits\",\n  \"NumberUnit\",\n  \"HexLiteralFragment\",\n  \"HexCharacter\",\n  \"ReservedKeyword\",\n  \"AnonymousKeyword\",\n  \"BreakKeyword\",\n  \"ConstantKeyword\",\n  \"TransientKeyword\",\n  \"ImmutableKeyword\",\n  \"ContinueKeyword\",\n  \"LeaveKeyword\",\n  \"ExternalKeyword\",\n  \"IndexedKeyword\",\n  \"InternalKeyword\",\n  \"PayableKeyword\",\n  \"PrivateKeyword\",\n  \"PublicKeyword\",\n  \"VirtualKeyword\",\n  \"PureKeyword\",\n  \"TypeKeyword\",\n  \"ViewKeyword\",\n  \"GlobalKeyword\",\n  \"ConstructorKeyword\",\n  \"FallbackKeyword\",\n  \"ReceiveKeyword\",\n  \"Identifier\",\n  \"IdentifierStart\",\n  \"IdentifierPart\",\n  \"StringLiteralFragment\",\n  \"DoubleQuotedStringCharacter\",\n  \"SingleQuotedStringCharacter\",\n  \"VersionLiteral\",\n  \"WS\",\n  \"COMMENT\",\n  \"LINE_COMMENT\"\n];\n_SolidityLexer._serializedATN = [\n  4,\n  0,\n  134,\n  1348,\n  6,\n  -1,\n  2,\n  0,\n  7,\n  0,\n  2,\n  1,\n  7,\n  1,\n  2,\n  2,\n  7,\n  2,\n  2,\n  3,\n  7,\n  3,\n  2,\n  4,\n  7,\n  4,\n  2,\n  5,\n  7,\n  5,\n  2,\n  6,\n  7,\n  6,\n  2,\n  7,\n  7,\n  7,\n  2,\n  8,\n  7,\n  8,\n  2,\n  9,\n  7,\n  9,\n  2,\n  10,\n  7,\n  10,\n  2,\n  11,\n  7,\n  11,\n  2,\n  12,\n  7,\n  12,\n  2,\n  13,\n  7,\n  13,\n  2,\n  14,\n  7,\n  14,\n  2,\n  15,\n  7,\n  15,\n  2,\n  16,\n  7,\n  16,\n  2,\n  17,\n  7,\n  17,\n  2,\n  18,\n  7,\n  18,\n  2,\n  19,\n  7,\n  19,\n  2,\n  20,\n  7,\n  20,\n  2,\n  21,\n  7,\n  21,\n  2,\n  22,\n  7,\n  22,\n  2,\n  23,\n  7,\n  23,\n  2,\n  24,\n  7,\n  24,\n  2,\n  25,\n  7,\n  25,\n  2,\n  26,\n  7,\n  26,\n  2,\n  27,\n  7,\n  27,\n  2,\n  28,\n  7,\n  28,\n  2,\n  29,\n  7,\n  29,\n  2,\n  30,\n  7,\n  30,\n  2,\n  31,\n  7,\n  31,\n  2,\n  32,\n  7,\n  32,\n  2,\n  33,\n  7,\n  33,\n  2,\n  34,\n  7,\n  34,\n  2,\n  35,\n  7,\n  35,\n  2,\n  36,\n  7,\n  36,\n  2,\n  37,\n  7,\n  37,\n  2,\n  38,\n  7,\n  38,\n  2,\n  39,\n  7,\n  39,\n  2,\n  40,\n  7,\n  40,\n  2,\n  41,\n  7,\n  41,\n  2,\n  42,\n  7,\n  42,\n  2,\n  43,\n  7,\n  43,\n  2,\n  44,\n  7,\n  44,\n  2,\n  45,\n  7,\n  45,\n  2,\n  46,\n  7,\n  46,\n  2,\n  47,\n  7,\n  47,\n  2,\n  48,\n  7,\n  48,\n  2,\n  49,\n  7,\n  49,\n  2,\n  50,\n  7,\n  50,\n  2,\n  51,\n  7,\n  51,\n  2,\n  52,\n  7,\n  52,\n  2,\n  53,\n  7,\n  53,\n  2,\n  54,\n  7,\n  54,\n  2,\n  55,\n  7,\n  55,\n  2,\n  56,\n  7,\n  56,\n  2,\n  57,\n  7,\n  57,\n  2,\n  58,\n  7,\n  58,\n  2,\n  59,\n  7,\n  59,\n  2,\n  60,\n  7,\n  60,\n  2,\n  61,\n  7,\n  61,\n  2,\n  62,\n  7,\n  62,\n  2,\n  63,\n  7,\n  63,\n  2,\n  64,\n  7,\n  64,\n  2,\n  65,\n  7,\n  65,\n  2,\n  66,\n  7,\n  66,\n  2,\n  67,\n  7,\n  67,\n  2,\n  68,\n  7,\n  68,\n  2,\n  69,\n  7,\n  69,\n  2,\n  70,\n  7,\n  70,\n  2,\n  71,\n  7,\n  71,\n  2,\n  72,\n  7,\n  72,\n  2,\n  73,\n  7,\n  73,\n  2,\n  74,\n  7,\n  74,\n  2,\n  75,\n  7,\n  75,\n  2,\n  76,\n  7,\n  76,\n  2,\n  77,\n  7,\n  77,\n  2,\n  78,\n  7,\n  78,\n  2,\n  79,\n  7,\n  79,\n  2,\n  80,\n  7,\n  80,\n  2,\n  81,\n  7,\n  81,\n  2,\n  82,\n  7,\n  82,\n  2,\n  83,\n  7,\n  83,\n  2,\n  84,\n  7,\n  84,\n  2,\n  85,\n  7,\n  85,\n  2,\n  86,\n  7,\n  86,\n  2,\n  87,\n  7,\n  87,\n  2,\n  88,\n  7,\n  88,\n  2,\n  89,\n  7,\n  89,\n  2,\n  90,\n  7,\n  90,\n  2,\n  91,\n  7,\n  91,\n  2,\n  92,\n  7,\n  92,\n  2,\n  93,\n  7,\n  93,\n  2,\n  94,\n  7,\n  94,\n  2,\n  95,\n  7,\n  95,\n  2,\n  96,\n  7,\n  96,\n  2,\n  97,\n  7,\n  97,\n  2,\n  98,\n  7,\n  98,\n  2,\n  99,\n  7,\n  99,\n  2,\n  100,\n  7,\n  100,\n  2,\n  101,\n  7,\n  101,\n  2,\n  102,\n  7,\n  102,\n  2,\n  103,\n  7,\n  103,\n  2,\n  104,\n  7,\n  104,\n  2,\n  105,\n  7,\n  105,\n  2,\n  106,\n  7,\n  106,\n  2,\n  107,\n  7,\n  107,\n  2,\n  108,\n  7,\n  108,\n  2,\n  109,\n  7,\n  109,\n  2,\n  110,\n  7,\n  110,\n  2,\n  111,\n  7,\n  111,\n  2,\n  112,\n  7,\n  112,\n  2,\n  113,\n  7,\n  113,\n  2,\n  114,\n  7,\n  114,\n  2,\n  115,\n  7,\n  115,\n  2,\n  116,\n  7,\n  116,\n  2,\n  117,\n  7,\n  117,\n  2,\n  118,\n  7,\n  118,\n  2,\n  119,\n  7,\n  119,\n  2,\n  120,\n  7,\n  120,\n  2,\n  121,\n  7,\n  121,\n  2,\n  122,\n  7,\n  122,\n  2,\n  123,\n  7,\n  123,\n  2,\n  124,\n  7,\n  124,\n  2,\n  125,\n  7,\n  125,\n  2,\n  126,\n  7,\n  126,\n  2,\n  127,\n  7,\n  127,\n  2,\n  128,\n  7,\n  128,\n  2,\n  129,\n  7,\n  129,\n  2,\n  130,\n  7,\n  130,\n  2,\n  131,\n  7,\n  131,\n  2,\n  132,\n  7,\n  132,\n  2,\n  133,\n  7,\n  133,\n  2,\n  134,\n  7,\n  134,\n  2,\n  135,\n  7,\n  135,\n  2,\n  136,\n  7,\n  136,\n  2,\n  137,\n  7,\n  137,\n  2,\n  138,\n  7,\n  138,\n  2,\n  139,\n  7,\n  139,\n  2,\n  140,\n  7,\n  140,\n  2,\n  141,\n  7,\n  141,\n  2,\n  142,\n  7,\n  142,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  1,\n  1,\n  2,\n  1,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  3,\n  1,\n  4,\n  1,\n  4,\n  1,\n  5,\n  1,\n  5,\n  1,\n  6,\n  1,\n  6,\n  1,\n  6,\n  1,\n  7,\n  1,\n  7,\n  1,\n  8,\n  1,\n  8,\n  1,\n  9,\n  1,\n  9,\n  1,\n  9,\n  1,\n  10,\n  1,\n  10,\n  1,\n  11,\n  1,\n  11,\n  1,\n  11,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  14,\n  1,\n  14,\n  1,\n  15,\n  1,\n  15,\n  1,\n  16,\n  1,\n  16,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  1,\n  20,\n  1,\n  20,\n  1,\n  20,\n  1,\n  20,\n  1,\n  20,\n  1,\n  20,\n  1,\n  20,\n  1,\n  20,\n  1,\n  21,\n  1,\n  21,\n  1,\n  21,\n  1,\n  22,\n  1,\n  22,\n  1,\n  23,\n  1,\n  23,\n  1,\n  24,\n  1,\n  24,\n  1,\n  24,\n  1,\n  24,\n  1,\n  24,\n  1,\n  24,\n  1,\n  25,\n  1,\n  25,\n  1,\n  25,\n  1,\n  25,\n  1,\n  25,\n  1,\n  25,\n  1,\n  26,\n  1,\n  26,\n  1,\n  26,\n  1,\n  26,\n  1,\n  27,\n  1,\n  27,\n  1,\n  28,\n  1,\n  28,\n  1,\n  29,\n  1,\n  29,\n  1,\n  30,\n  1,\n  30,\n  1,\n  31,\n  1,\n  31,\n  1,\n  32,\n  1,\n  32,\n  1,\n  33,\n  1,\n  33,\n  1,\n  33,\n  1,\n  34,\n  1,\n  34,\n  1,\n  34,\n  1,\n  35,\n  1,\n  35,\n  1,\n  35,\n  1,\n  35,\n  1,\n  35,\n  1,\n  35,\n  1,\n  35,\n  1,\n  36,\n  1,\n  36,\n  1,\n  36,\n  1,\n  36,\n  1,\n  36,\n  1,\n  36,\n  1,\n  36,\n  1,\n  36,\n  1,\n  36,\n  1,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  39,\n  1,\n  39,\n  1,\n  39,\n  1,\n  39,\n  1,\n  39,\n  1,\n  39,\n  1,\n  40,\n  1,\n  40,\n  1,\n  40,\n  1,\n  40,\n  1,\n  40,\n  1,\n  41,\n  1,\n  41,\n  1,\n  42,\n  1,\n  42,\n  1,\n  43,\n  1,\n  43,\n  1,\n  43,\n  1,\n  43,\n  1,\n  43,\n  1,\n  43,\n  1,\n  43,\n  1,\n  43,\n  1,\n  44,\n  1,\n  44,\n  1,\n  45,\n  1,\n  45,\n  1,\n  45,\n  1,\n  45,\n  1,\n  45,\n  1,\n  45,\n  1,\n  45,\n  1,\n  45,\n  1,\n  46,\n  1,\n  46,\n  1,\n  46,\n  1,\n  47,\n  1,\n  47,\n  1,\n  47,\n  1,\n  47,\n  1,\n  47,\n  1,\n  47,\n  1,\n  47,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  50,\n  1,\n  50,\n  1,\n  50,\n  1,\n  51,\n  1,\n  51,\n  1,\n  51,\n  1,\n  51,\n  1,\n  51,\n  1,\n  52,\n  1,\n  52,\n  1,\n  52,\n  1,\n  52,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  54,\n  1,\n  54,\n  1,\n  54,\n  1,\n  54,\n  1,\n  54,\n  1,\n  54,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  57,\n  1,\n  57,\n  1,\n  57,\n  1,\n  58,\n  1,\n  58,\n  1,\n  58,\n  1,\n  58,\n  1,\n  58,\n  1,\n  58,\n  1,\n  58,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  60,\n  1,\n  60,\n  1,\n  60,\n  1,\n  60,\n  1,\n  60,\n  1,\n  61,\n  1,\n  61,\n  1,\n  61,\n  1,\n  61,\n  1,\n  61,\n  1,\n  61,\n  1,\n  61,\n  1,\n  62,\n  1,\n  62,\n  1,\n  62,\n  1,\n  62,\n  1,\n  63,\n  1,\n  63,\n  1,\n  63,\n  1,\n  63,\n  1,\n  63,\n  1,\n  64,\n  1,\n  64,\n  1,\n  64,\n  1,\n  64,\n  1,\n  64,\n  1,\n  64,\n  1,\n  64,\n  1,\n  65,\n  1,\n  65,\n  1,\n  65,\n  1,\n  65,\n  1,\n  65,\n  1,\n  66,\n  1,\n  66,\n  1,\n  66,\n  1,\n  67,\n  1,\n  67,\n  1,\n  67,\n  1,\n  68,\n  1,\n  68,\n  1,\n  68,\n  1,\n  68,\n  1,\n  69,\n  1,\n  69,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  71,\n  1,\n  71,\n  1,\n  72,\n  1,\n  72,\n  1,\n  72,\n  1,\n  73,\n  1,\n  73,\n  1,\n  73,\n  1,\n  74,\n  1,\n  74,\n  1,\n  74,\n  1,\n  75,\n  1,\n  75,\n  1,\n  75,\n  1,\n  76,\n  1,\n  76,\n  1,\n  77,\n  1,\n  77,\n  1,\n  77,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  79,\n  1,\n  79,\n  1,\n  79,\n  1,\n  80,\n  1,\n  80,\n  1,\n  80,\n  1,\n  80,\n  1,\n  81,\n  1,\n  81,\n  1,\n  81,\n  1,\n  81,\n  1,\n  82,\n  1,\n  82,\n  1,\n  82,\n  1,\n  83,\n  1,\n  83,\n  1,\n  83,\n  1,\n  84,\n  1,\n  84,\n  1,\n  84,\n  1,\n  85,\n  1,\n  85,\n  1,\n  85,\n  1,\n  86,\n  1,\n  86,\n  1,\n  86,\n  1,\n  87,\n  1,\n  87,\n  1,\n  87,\n  1,\n  87,\n  1,\n  88,\n  1,\n  88,\n  1,\n  88,\n  1,\n  89,\n  1,\n  89,\n  1,\n  89,\n  1,\n  90,\n  1,\n  90,\n  1,\n  90,\n  1,\n  90,\n  1,\n  90,\n  1,\n  90,\n  1,\n  90,\n  1,\n  91,\n  1,\n  91,\n  1,\n  91,\n  1,\n  91,\n  1,\n  91,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  93,\n  1,\n  93,\n  1,\n  93,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  96,\n  1,\n  96,\n  1,\n  96,\n  1,\n  96,\n  1,\n  96,\n  3,\n  96,\n  724,\n  8,\n  96,\n  1,\n  97,\n  1,\n  97,\n  1,\n  97,\n  1,\n  97,\n  1,\n  97,\n  1,\n  97,\n  3,\n  97,\n  732,\n  8,\n  97,\n  1,\n  98,\n  1,\n  98,\n  1,\n  98,\n  1,\n  98,\n  1,\n  98,\n  1,\n  98,\n  1,\n  98,\n  3,\n  98,\n  741,\n  8,\n  98,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  4,\n  99,\n  752,\n  8,\n  99,\n  11,\n  99,\n  12,\n  99,\n  753,\n  3,\n  99,\n  756,\n  8,\n  99,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  1,\n  100,\n  4,\n  100,\n  768,\n  8,\n  100,\n  11,\n  100,\n  12,\n  100,\n  769,\n  3,\n  100,\n  772,\n  8,\n  100,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  1,\n  101,\n  3,\n  101,\n  857,\n  8,\n  101,\n  1,\n  102,\n  1,\n  102,\n  1,\n  102,\n  1,\n  102,\n  1,\n  102,\n  3,\n  102,\n  864,\n  8,\n  102,\n  1,\n  103,\n  1,\n  103,\n  1,\n  103,\n  1,\n  103,\n  1,\n  103,\n  1,\n  103,\n  1,\n  103,\n  1,\n  103,\n  1,\n  103,\n  3,\n  103,\n  875,\n  8,\n  103,\n  1,\n  104,\n  1,\n  104,\n  3,\n  104,\n  879,\n  8,\n  104,\n  1,\n  104,\n  1,\n  104,\n  3,\n  104,\n  883,\n  8,\n  104,\n  1,\n  104,\n  1,\n  104,\n  3,\n  104,\n  887,\n  8,\n  104,\n  1,\n  104,\n  3,\n  104,\n  890,\n  8,\n  104,\n  1,\n  105,\n  1,\n  105,\n  3,\n  105,\n  894,\n  8,\n  105,\n  1,\n  105,\n  5,\n  105,\n  897,\n  8,\n  105,\n  10,\n  105,\n  12,\n  105,\n  900,\n  9,\n  105,\n  1,\n  106,\n  1,\n  106,\n  1,\n  106,\n  1,\n  106,\n  1,\n  107,\n  1,\n  107,\n  3,\n  107,\n  908,\n  8,\n  107,\n  1,\n  107,\n  5,\n  107,\n  911,\n  8,\n  107,\n  10,\n  107,\n  12,\n  107,\n  914,\n  9,\n  107,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  1,\n  108,\n  3,\n  108,\n  972,\n  8,\n  108,\n  1,\n  109,\n  1,\n  109,\n  1,\n  109,\n  1,\n  109,\n  1,\n  109,\n  1,\n  109,\n  3,\n  109,\n  980,\n  8,\n  109,\n  1,\n  109,\n  1,\n  109,\n  1,\n  109,\n  3,\n  109,\n  985,\n  8,\n  109,\n  1,\n  109,\n  3,\n  109,\n  988,\n  8,\n  109,\n  1,\n  110,\n  1,\n  110,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  1,\n  111,\n  3,\n  111,\n  1080,\n  8,\n  111,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  112,\n  1,\n  113,\n  1,\n  113,\n  1,\n  113,\n  1,\n  113,\n  1,\n  113,\n  1,\n  113,\n  1,\n  114,\n  1,\n  114,\n  1,\n  114,\n  1,\n  114,\n  1,\n  114,\n  1,\n  114,\n  1,\n  114,\n  1,\n  114,\n  1,\n  114,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  115,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  116,\n  1,\n  117,\n  1,\n  117,\n  1,\n  117,\n  1,\n  117,\n  1,\n  117,\n  1,\n  117,\n  1,\n  117,\n  1,\n  117,\n  1,\n  117,\n  1,\n  118,\n  1,\n  118,\n  1,\n  118,\n  1,\n  118,\n  1,\n  118,\n  1,\n  118,\n  1,\n  119,\n  1,\n  119,\n  1,\n  119,\n  1,\n  119,\n  1,\n  119,\n  1,\n  119,\n  1,\n  119,\n  1,\n  119,\n  1,\n  119,\n  1,\n  120,\n  1,\n  120,\n  1,\n  120,\n  1,\n  120,\n  1,\n  120,\n  1,\n  120,\n  1,\n  120,\n  1,\n  120,\n  1,\n  121,\n  1,\n  121,\n  1,\n  121,\n  1,\n  121,\n  1,\n  121,\n  1,\n  121,\n  1,\n  121,\n  1,\n  121,\n  1,\n  121,\n  1,\n  122,\n  1,\n  122,\n  1,\n  122,\n  1,\n  122,\n  1,\n  122,\n  1,\n  122,\n  1,\n  122,\n  1,\n  122,\n  1,\n  123,\n  1,\n  123,\n  1,\n  123,\n  1,\n  123,\n  1,\n  123,\n  1,\n  123,\n  1,\n  123,\n  1,\n  123,\n  1,\n  124,\n  1,\n  124,\n  1,\n  124,\n  1,\n  124,\n  1,\n  124,\n  1,\n  124,\n  1,\n  124,\n  1,\n  125,\n  1,\n  125,\n  1,\n  125,\n  1,\n  125,\n  1,\n  125,\n  1,\n  125,\n  1,\n  125,\n  1,\n  125,\n  1,\n  126,\n  1,\n  126,\n  1,\n  126,\n  1,\n  126,\n  1,\n  126,\n  1,\n  127,\n  1,\n  127,\n  1,\n  127,\n  1,\n  127,\n  1,\n  127,\n  1,\n  128,\n  1,\n  128,\n  1,\n  128,\n  1,\n  128,\n  1,\n  128,\n  1,\n  129,\n  1,\n  129,\n  1,\n  129,\n  1,\n  129,\n  1,\n  129,\n  1,\n  129,\n  1,\n  129,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  130,\n  1,\n  131,\n  1,\n  131,\n  1,\n  131,\n  1,\n  131,\n  1,\n  131,\n  1,\n  131,\n  1,\n  131,\n  1,\n  131,\n  1,\n  131,\n  1,\n  132,\n  1,\n  132,\n  1,\n  132,\n  1,\n  132,\n  1,\n  132,\n  1,\n  132,\n  1,\n  132,\n  1,\n  132,\n  1,\n  133,\n  1,\n  133,\n  5,\n  133,\n  1252,\n  8,\n  133,\n  10,\n  133,\n  12,\n  133,\n  1255,\n  9,\n  133,\n  1,\n  134,\n  1,\n  134,\n  1,\n  135,\n  1,\n  135,\n  1,\n  136,\n  1,\n  136,\n  1,\n  136,\n  1,\n  136,\n  1,\n  136,\n  1,\n  136,\n  1,\n  136,\n  3,\n  136,\n  1268,\n  8,\n  136,\n  1,\n  136,\n  1,\n  136,\n  5,\n  136,\n  1272,\n  8,\n  136,\n  10,\n  136,\n  12,\n  136,\n  1275,\n  9,\n  136,\n  1,\n  136,\n  1,\n  136,\n  1,\n  136,\n  5,\n  136,\n  1280,\n  8,\n  136,\n  10,\n  136,\n  12,\n  136,\n  1283,\n  9,\n  136,\n  1,\n  136,\n  3,\n  136,\n  1286,\n  8,\n  136,\n  1,\n  137,\n  1,\n  137,\n  1,\n  137,\n  3,\n  137,\n  1291,\n  8,\n  137,\n  1,\n  138,\n  1,\n  138,\n  1,\n  138,\n  3,\n  138,\n  1296,\n  8,\n  138,\n  1,\n  139,\n  4,\n  139,\n  1299,\n  8,\n  139,\n  11,\n  139,\n  12,\n  139,\n  1300,\n  1,\n  139,\n  1,\n  139,\n  4,\n  139,\n  1305,\n  8,\n  139,\n  11,\n  139,\n  12,\n  139,\n  1306,\n  1,\n  139,\n  1,\n  139,\n  4,\n  139,\n  1311,\n  8,\n  139,\n  11,\n  139,\n  12,\n  139,\n  1312,\n  3,\n  139,\n  1315,\n  8,\n  139,\n  1,\n  140,\n  4,\n  140,\n  1318,\n  8,\n  140,\n  11,\n  140,\n  12,\n  140,\n  1319,\n  1,\n  140,\n  1,\n  140,\n  1,\n  141,\n  1,\n  141,\n  1,\n  141,\n  1,\n  141,\n  5,\n  141,\n  1328,\n  8,\n  141,\n  10,\n  141,\n  12,\n  141,\n  1331,\n  9,\n  141,\n  1,\n  141,\n  1,\n  141,\n  1,\n  141,\n  1,\n  141,\n  1,\n  141,\n  1,\n  142,\n  1,\n  142,\n  1,\n  142,\n  1,\n  142,\n  5,\n  142,\n  1342,\n  8,\n  142,\n  10,\n  142,\n  12,\n  142,\n  1345,\n  9,\n  142,\n  1,\n  142,\n  1,\n  142,\n  1,\n  1329,\n  0,\n  143,\n  1,\n  1,\n  3,\n  2,\n  5,\n  3,\n  7,\n  4,\n  9,\n  5,\n  11,\n  6,\n  13,\n  7,\n  15,\n  8,\n  17,\n  9,\n  19,\n  10,\n  21,\n  11,\n  23,\n  12,\n  25,\n  13,\n  27,\n  14,\n  29,\n  15,\n  31,\n  16,\n  33,\n  17,\n  35,\n  18,\n  37,\n  19,\n  39,\n  20,\n  41,\n  21,\n  43,\n  22,\n  45,\n  23,\n  47,\n  24,\n  49,\n  25,\n  51,\n  26,\n  53,\n  27,\n  55,\n  28,\n  57,\n  29,\n  59,\n  30,\n  61,\n  31,\n  63,\n  32,\n  65,\n  33,\n  67,\n  34,\n  69,\n  35,\n  71,\n  36,\n  73,\n  37,\n  75,\n  38,\n  77,\n  39,\n  79,\n  40,\n  81,\n  41,\n  83,\n  42,\n  85,\n  43,\n  87,\n  44,\n  89,\n  45,\n  91,\n  46,\n  93,\n  47,\n  95,\n  48,\n  97,\n  49,\n  99,\n  50,\n  101,\n  51,\n  103,\n  52,\n  105,\n  53,\n  107,\n  54,\n  109,\n  55,\n  111,\n  56,\n  113,\n  57,\n  115,\n  58,\n  117,\n  59,\n  119,\n  60,\n  121,\n  61,\n  123,\n  62,\n  125,\n  63,\n  127,\n  64,\n  129,\n  65,\n  131,\n  66,\n  133,\n  67,\n  135,\n  68,\n  137,\n  69,\n  139,\n  70,\n  141,\n  71,\n  143,\n  72,\n  145,\n  73,\n  147,\n  74,\n  149,\n  75,\n  151,\n  76,\n  153,\n  77,\n  155,\n  78,\n  157,\n  79,\n  159,\n  80,\n  161,\n  81,\n  163,\n  82,\n  165,\n  83,\n  167,\n  84,\n  169,\n  85,\n  171,\n  86,\n  173,\n  87,\n  175,\n  88,\n  177,\n  89,\n  179,\n  90,\n  181,\n  91,\n  183,\n  92,\n  185,\n  93,\n  187,\n  94,\n  189,\n  95,\n  191,\n  96,\n  193,\n  97,\n  195,\n  98,\n  197,\n  99,\n  199,\n  100,\n  201,\n  101,\n  203,\n  0,\n  205,\n  0,\n  207,\n  102,\n  209,\n  103,\n  211,\n  0,\n  213,\n  104,\n  215,\n  0,\n  217,\n  105,\n  219,\n  106,\n  221,\n  0,\n  223,\n  107,\n  225,\n  108,\n  227,\n  109,\n  229,\n  110,\n  231,\n  111,\n  233,\n  112,\n  235,\n  113,\n  237,\n  114,\n  239,\n  115,\n  241,\n  116,\n  243,\n  117,\n  245,\n  118,\n  247,\n  119,\n  249,\n  120,\n  251,\n  121,\n  253,\n  122,\n  255,\n  123,\n  257,\n  124,\n  259,\n  125,\n  261,\n  126,\n  263,\n  127,\n  265,\n  128,\n  267,\n  129,\n  269,\n  0,\n  271,\n  0,\n  273,\n  130,\n  275,\n  0,\n  277,\n  0,\n  279,\n  131,\n  281,\n  132,\n  283,\n  133,\n  285,\n  134,\n  1,\n  0,\n  13,\n  1,\n  0,\n  48,\n  57,\n  1,\n  0,\n  49,\n  57,\n  1,\n  0,\n  49,\n  50,\n  1,\n  0,\n  48,\n  50,\n  2,\n  0,\n  69,\n  69,\n  101,\n  101,\n  2,\n  0,\n  88,\n  88,\n  120,\n  120,\n  3,\n  0,\n  48,\n  57,\n  65,\n  70,\n  97,\n  102,\n  4,\n  0,\n  36,\n  36,\n  65,\n  90,\n  95,\n  95,\n  97,\n  122,\n  5,\n  0,\n  36,\n  36,\n  48,\n  57,\n  65,\n  90,\n  95,\n  95,\n  97,\n  122,\n  4,\n  0,\n  10,\n  10,\n  13,\n  13,\n  34,\n  34,\n  92,\n  92,\n  4,\n  0,\n  10,\n  10,\n  13,\n  13,\n  39,\n  39,\n  92,\n  92,\n  3,\n  0,\n  9,\n  10,\n  12,\n  13,\n  32,\n  32,\n  2,\n  0,\n  10,\n  10,\n  13,\n  13,\n  1430,\n  0,\n  1,\n  1,\n  0,\n  0,\n  0,\n  0,\n  3,\n  1,\n  0,\n  0,\n  0,\n  0,\n  5,\n  1,\n  0,\n  0,\n  0,\n  0,\n  7,\n  1,\n  0,\n  0,\n  0,\n  0,\n  9,\n  1,\n  0,\n  0,\n  0,\n  0,\n  11,\n  1,\n  0,\n  0,\n  0,\n  0,\n  13,\n  1,\n  0,\n  0,\n  0,\n  0,\n  15,\n  1,\n  0,\n  0,\n  0,\n  0,\n  17,\n  1,\n  0,\n  0,\n  0,\n  0,\n  19,\n  1,\n  0,\n  0,\n  0,\n  0,\n  21,\n  1,\n  0,\n  0,\n  0,\n  0,\n  23,\n  1,\n  0,\n  0,\n  0,\n  0,\n  25,\n  1,\n  0,\n  0,\n  0,\n  0,\n  27,\n  1,\n  0,\n  0,\n  0,\n  0,\n  29,\n  1,\n  0,\n  0,\n  0,\n  0,\n  31,\n  1,\n  0,\n  0,\n  0,\n  0,\n  33,\n  1,\n  0,\n  0,\n  0,\n  0,\n  35,\n  1,\n  0,\n  0,\n  0,\n  0,\n  37,\n  1,\n  0,\n  0,\n  0,\n  0,\n  39,\n  1,\n  0,\n  0,\n  0,\n  0,\n  41,\n  1,\n  0,\n  0,\n  0,\n  0,\n  43,\n  1,\n  0,\n  0,\n  0,\n  0,\n  45,\n  1,\n  0,\n  0,\n  0,\n  0,\n  47,\n  1,\n  0,\n  0,\n  0,\n  0,\n  49,\n  1,\n  0,\n  0,\n  0,\n  0,\n  51,\n  1,\n  0,\n  0,\n  0,\n  0,\n  53,\n  1,\n  0,\n  0,\n  0,\n  0,\n  55,\n  1,\n  0,\n  0,\n  0,\n  0,\n  57,\n  1,\n  0,\n  0,\n  0,\n  0,\n  59,\n  1,\n  0,\n  0,\n  0,\n  0,\n  61,\n  1,\n  0,\n  0,\n  0,\n  0,\n  63,\n  1,\n  0,\n  0,\n  0,\n  0,\n  65,\n  1,\n  0,\n  0,\n  0,\n  0,\n  67,\n  1,\n  0,\n  0,\n  0,\n  0,\n  69,\n  1,\n  0,\n  0,\n  0,\n  0,\n  71,\n  1,\n  0,\n  0,\n  0,\n  0,\n  73,\n  1,\n  0,\n  0,\n  0,\n  0,\n  75,\n  1,\n  0,\n  0,\n  0,\n  0,\n  77,\n  1,\n  0,\n  0,\n  0,\n  0,\n  79,\n  1,\n  0,\n  0,\n  0,\n  0,\n  81,\n  1,\n  0,\n  0,\n  0,\n  0,\n  83,\n  1,\n  0,\n  0,\n  0,\n  0,\n  85,\n  1,\n  0,\n  0,\n  0,\n  0,\n  87,\n  1,\n  0,\n  0,\n  0,\n  0,\n  89,\n  1,\n  0,\n  0,\n  0,\n  0,\n  91,\n  1,\n  0,\n  0,\n  0,\n  0,\n  93,\n  1,\n  0,\n  0,\n  0,\n  0,\n  95,\n  1,\n  0,\n  0,\n  0,\n  0,\n  97,\n  1,\n  0,\n  0,\n  0,\n  0,\n  99,\n  1,\n  0,\n  0,\n  0,\n  0,\n  101,\n  1,\n  0,\n  0,\n  0,\n  0,\n  103,\n  1,\n  0,\n  0,\n  0,\n  0,\n  105,\n  1,\n  0,\n  0,\n  0,\n  0,\n  107,\n  1,\n  0,\n  0,\n  0,\n  0,\n  109,\n  1,\n  0,\n  0,\n  0,\n  0,\n  111,\n  1,\n  0,\n  0,\n  0,\n  0,\n  113,\n  1,\n  0,\n  0,\n  0,\n  0,\n  115,\n  1,\n  0,\n  0,\n  0,\n  0,\n  117,\n  1,\n  0,\n  0,\n  0,\n  0,\n  119,\n  1,\n  0,\n  0,\n  0,\n  0,\n  121,\n  1,\n  0,\n  0,\n  0,\n  0,\n  123,\n  1,\n  0,\n  0,\n  0,\n  0,\n  125,\n  1,\n  0,\n  0,\n  0,\n  0,\n  127,\n  1,\n  0,\n  0,\n  0,\n  0,\n  129,\n  1,\n  0,\n  0,\n  0,\n  0,\n  131,\n  1,\n  0,\n  0,\n  0,\n  0,\n  133,\n  1,\n  0,\n  0,\n  0,\n  0,\n  135,\n  1,\n  0,\n  0,\n  0,\n  0,\n  137,\n  1,\n  0,\n  0,\n  0,\n  0,\n  139,\n  1,\n  0,\n  0,\n  0,\n  0,\n  141,\n  1,\n  0,\n  0,\n  0,\n  0,\n  143,\n  1,\n  0,\n  0,\n  0,\n  0,\n  145,\n  1,\n  0,\n  0,\n  0,\n  0,\n  147,\n  1,\n  0,\n  0,\n  0,\n  0,\n  149,\n  1,\n  0,\n  0,\n  0,\n  0,\n  151,\n  1,\n  0,\n  0,\n  0,\n  0,\n  153,\n  1,\n  0,\n  0,\n  0,\n  0,\n  155,\n  1,\n  0,\n  0,\n  0,\n  0,\n  157,\n  1,\n  0,\n  0,\n  0,\n  0,\n  159,\n  1,\n  0,\n  0,\n  0,\n  0,\n  161,\n  1,\n  0,\n  0,\n  0,\n  0,\n  163,\n  1,\n  0,\n  0,\n  0,\n  0,\n  165,\n  1,\n  0,\n  0,\n  0,\n  0,\n  167,\n  1,\n  0,\n  0,\n  0,\n  0,\n  169,\n  1,\n  0,\n  0,\n  0,\n  0,\n  171,\n  1,\n  0,\n  0,\n  0,\n  0,\n  173,\n  1,\n  0,\n  0,\n  0,\n  0,\n  175,\n  1,\n  0,\n  0,\n  0,\n  0,\n  177,\n  1,\n  0,\n  0,\n  0,\n  0,\n  179,\n  1,\n  0,\n  0,\n  0,\n  0,\n  181,\n  1,\n  0,\n  0,\n  0,\n  0,\n  183,\n  1,\n  0,\n  0,\n  0,\n  0,\n  185,\n  1,\n  0,\n  0,\n  0,\n  0,\n  187,\n  1,\n  0,\n  0,\n  0,\n  0,\n  189,\n  1,\n  0,\n  0,\n  0,\n  0,\n  191,\n  1,\n  0,\n  0,\n  0,\n  0,\n  193,\n  1,\n  0,\n  0,\n  0,\n  0,\n  195,\n  1,\n  0,\n  0,\n  0,\n  0,\n  197,\n  1,\n  0,\n  0,\n  0,\n  0,\n  199,\n  1,\n  0,\n  0,\n  0,\n  0,\n  201,\n  1,\n  0,\n  0,\n  0,\n  0,\n  207,\n  1,\n  0,\n  0,\n  0,\n  0,\n  209,\n  1,\n  0,\n  0,\n  0,\n  0,\n  213,\n  1,\n  0,\n  0,\n  0,\n  0,\n  217,\n  1,\n  0,\n  0,\n  0,\n  0,\n  219,\n  1,\n  0,\n  0,\n  0,\n  0,\n  223,\n  1,\n  0,\n  0,\n  0,\n  0,\n  225,\n  1,\n  0,\n  0,\n  0,\n  0,\n  227,\n  1,\n  0,\n  0,\n  0,\n  0,\n  229,\n  1,\n  0,\n  0,\n  0,\n  0,\n  231,\n  1,\n  0,\n  0,\n  0,\n  0,\n  233,\n  1,\n  0,\n  0,\n  0,\n  0,\n  235,\n  1,\n  0,\n  0,\n  0,\n  0,\n  237,\n  1,\n  0,\n  0,\n  0,\n  0,\n  239,\n  1,\n  0,\n  0,\n  0,\n  0,\n  241,\n  1,\n  0,\n  0,\n  0,\n  0,\n  243,\n  1,\n  0,\n  0,\n  0,\n  0,\n  245,\n  1,\n  0,\n  0,\n  0,\n  0,\n  247,\n  1,\n  0,\n  0,\n  0,\n  0,\n  249,\n  1,\n  0,\n  0,\n  0,\n  0,\n  251,\n  1,\n  0,\n  0,\n  0,\n  0,\n  253,\n  1,\n  0,\n  0,\n  0,\n  0,\n  255,\n  1,\n  0,\n  0,\n  0,\n  0,\n  257,\n  1,\n  0,\n  0,\n  0,\n  0,\n  259,\n  1,\n  0,\n  0,\n  0,\n  0,\n  261,\n  1,\n  0,\n  0,\n  0,\n  0,\n  263,\n  1,\n  0,\n  0,\n  0,\n  0,\n  265,\n  1,\n  0,\n  0,\n  0,\n  0,\n  267,\n  1,\n  0,\n  0,\n  0,\n  0,\n  273,\n  1,\n  0,\n  0,\n  0,\n  0,\n  279,\n  1,\n  0,\n  0,\n  0,\n  0,\n  281,\n  1,\n  0,\n  0,\n  0,\n  0,\n  283,\n  1,\n  0,\n  0,\n  0,\n  0,\n  285,\n  1,\n  0,\n  0,\n  0,\n  1,\n  287,\n  1,\n  0,\n  0,\n  0,\n  3,\n  294,\n  1,\n  0,\n  0,\n  0,\n  5,\n  296,\n  1,\n  0,\n  0,\n  0,\n  7,\n  298,\n  1,\n  0,\n  0,\n  0,\n  9,\n  301,\n  1,\n  0,\n  0,\n  0,\n  11,\n  303,\n  1,\n  0,\n  0,\n  0,\n  13,\n  305,\n  1,\n  0,\n  0,\n  0,\n  15,\n  308,\n  1,\n  0,\n  0,\n  0,\n  17,\n  310,\n  1,\n  0,\n  0,\n  0,\n  19,\n  312,\n  1,\n  0,\n  0,\n  0,\n  21,\n  315,\n  1,\n  0,\n  0,\n  0,\n  23,\n  317,\n  1,\n  0,\n  0,\n  0,\n  25,\n  320,\n  1,\n  0,\n  0,\n  0,\n  27,\n  327,\n  1,\n  0,\n  0,\n  0,\n  29,\n  332,\n  1,\n  0,\n  0,\n  0,\n  31,\n  334,\n  1,\n  0,\n  0,\n  0,\n  33,\n  336,\n  1,\n  0,\n  0,\n  0,\n  35,\n  338,\n  1,\n  0,\n  0,\n  0,\n  37,\n  347,\n  1,\n  0,\n  0,\n  0,\n  39,\n  356,\n  1,\n  0,\n  0,\n  0,\n  41,\n  366,\n  1,\n  0,\n  0,\n  0,\n  43,\n  374,\n  1,\n  0,\n  0,\n  0,\n  45,\n  377,\n  1,\n  0,\n  0,\n  0,\n  47,\n  379,\n  1,\n  0,\n  0,\n  0,\n  49,\n  381,\n  1,\n  0,\n  0,\n  0,\n  51,\n  387,\n  1,\n  0,\n  0,\n  0,\n  53,\n  393,\n  1,\n  0,\n  0,\n  0,\n  55,\n  397,\n  1,\n  0,\n  0,\n  0,\n  57,\n  399,\n  1,\n  0,\n  0,\n  0,\n  59,\n  401,\n  1,\n  0,\n  0,\n  0,\n  61,\n  403,\n  1,\n  0,\n  0,\n  0,\n  63,\n  405,\n  1,\n  0,\n  0,\n  0,\n  65,\n  407,\n  1,\n  0,\n  0,\n  0,\n  67,\n  409,\n  1,\n  0,\n  0,\n  0,\n  69,\n  412,\n  1,\n  0,\n  0,\n  0,\n  71,\n  415,\n  1,\n  0,\n  0,\n  0,\n  73,\n  422,\n  1,\n  0,\n  0,\n  0,\n  75,\n  431,\n  1,\n  0,\n  0,\n  0,\n  77,\n  440,\n  1,\n  0,\n  0,\n  0,\n  79,\n  448,\n  1,\n  0,\n  0,\n  0,\n  81,\n  454,\n  1,\n  0,\n  0,\n  0,\n  83,\n  459,\n  1,\n  0,\n  0,\n  0,\n  85,\n  461,\n  1,\n  0,\n  0,\n  0,\n  87,\n  463,\n  1,\n  0,\n  0,\n  0,\n  89,\n  471,\n  1,\n  0,\n  0,\n  0,\n  91,\n  473,\n  1,\n  0,\n  0,\n  0,\n  93,\n  481,\n  1,\n  0,\n  0,\n  0,\n  95,\n  484,\n  1,\n  0,\n  0,\n  0,\n  97,\n  491,\n  1,\n  0,\n  0,\n  0,\n  99,\n  499,\n  1,\n  0,\n  0,\n  0,\n  101,\n  508,\n  1,\n  0,\n  0,\n  0,\n  103,\n  511,\n  1,\n  0,\n  0,\n  0,\n  105,\n  516,\n  1,\n  0,\n  0,\n  0,\n  107,\n  520,\n  1,\n  0,\n  0,\n  0,\n  109,\n  526,\n  1,\n  0,\n  0,\n  0,\n  111,\n  532,\n  1,\n  0,\n  0,\n  0,\n  113,\n  542,\n  1,\n  0,\n  0,\n  0,\n  115,\n  551,\n  1,\n  0,\n  0,\n  0,\n  117,\n  554,\n  1,\n  0,\n  0,\n  0,\n  119,\n  561,\n  1,\n  0,\n  0,\n  0,\n  121,\n  567,\n  1,\n  0,\n  0,\n  0,\n  123,\n  572,\n  1,\n  0,\n  0,\n  0,\n  125,\n  579,\n  1,\n  0,\n  0,\n  0,\n  127,\n  583,\n  1,\n  0,\n  0,\n  0,\n  129,\n  588,\n  1,\n  0,\n  0,\n  0,\n  131,\n  595,\n  1,\n  0,\n  0,\n  0,\n  133,\n  600,\n  1,\n  0,\n  0,\n  0,\n  135,\n  603,\n  1,\n  0,\n  0,\n  0,\n  137,\n  606,\n  1,\n  0,\n  0,\n  0,\n  139,\n  610,\n  1,\n  0,\n  0,\n  0,\n  141,\n  612,\n  1,\n  0,\n  0,\n  0,\n  143,\n  619,\n  1,\n  0,\n  0,\n  0,\n  145,\n  621,\n  1,\n  0,\n  0,\n  0,\n  147,\n  624,\n  1,\n  0,\n  0,\n  0,\n  149,\n  627,\n  1,\n  0,\n  0,\n  0,\n  151,\n  630,\n  1,\n  0,\n  0,\n  0,\n  153,\n  633,\n  1,\n  0,\n  0,\n  0,\n  155,\n  635,\n  1,\n  0,\n  0,\n  0,\n  157,\n  638,\n  1,\n  0,\n  0,\n  0,\n  159,\n  641,\n  1,\n  0,\n  0,\n  0,\n  161,\n  644,\n  1,\n  0,\n  0,\n  0,\n  163,\n  648,\n  1,\n  0,\n  0,\n  0,\n  165,\n  652,\n  1,\n  0,\n  0,\n  0,\n  167,\n  655,\n  1,\n  0,\n  0,\n  0,\n  169,\n  658,\n  1,\n  0,\n  0,\n  0,\n  171,\n  661,\n  1,\n  0,\n  0,\n  0,\n  173,\n  664,\n  1,\n  0,\n  0,\n  0,\n  175,\n  667,\n  1,\n  0,\n  0,\n  0,\n  177,\n  671,\n  1,\n  0,\n  0,\n  0,\n  179,\n  674,\n  1,\n  0,\n  0,\n  0,\n  181,\n  677,\n  1,\n  0,\n  0,\n  0,\n  183,\n  684,\n  1,\n  0,\n  0,\n  0,\n  185,\n  689,\n  1,\n  0,\n  0,\n  0,\n  187,\n  697,\n  1,\n  0,\n  0,\n  0,\n  189,\n  700,\n  1,\n  0,\n  0,\n  0,\n  191,\n  709,\n  1,\n  0,\n  0,\n  0,\n  193,\n  718,\n  1,\n  0,\n  0,\n  0,\n  195,\n  725,\n  1,\n  0,\n  0,\n  0,\n  197,\n  733,\n  1,\n  0,\n  0,\n  0,\n  199,\n  742,\n  1,\n  0,\n  0,\n  0,\n  201,\n  757,\n  1,\n  0,\n  0,\n  0,\n  203,\n  856,\n  1,\n  0,\n  0,\n  0,\n  205,\n  863,\n  1,\n  0,\n  0,\n  0,\n  207,\n  874,\n  1,\n  0,\n  0,\n  0,\n  209,\n  882,\n  1,\n  0,\n  0,\n  0,\n  211,\n  891,\n  1,\n  0,\n  0,\n  0,\n  213,\n  901,\n  1,\n  0,\n  0,\n  0,\n  215,\n  905,\n  1,\n  0,\n  0,\n  0,\n  217,\n  971,\n  1,\n  0,\n  0,\n  0,\n  219,\n  973,\n  1,\n  0,\n  0,\n  0,\n  221,\n  989,\n  1,\n  0,\n  0,\n  0,\n  223,\n  1079,\n  1,\n  0,\n  0,\n  0,\n  225,\n  1081,\n  1,\n  0,\n  0,\n  0,\n  227,\n  1091,\n  1,\n  0,\n  0,\n  0,\n  229,\n  1097,\n  1,\n  0,\n  0,\n  0,\n  231,\n  1106,\n  1,\n  0,\n  0,\n  0,\n  233,\n  1116,\n  1,\n  0,\n  0,\n  0,\n  235,\n  1126,\n  1,\n  0,\n  0,\n  0,\n  237,\n  1135,\n  1,\n  0,\n  0,\n  0,\n  239,\n  1141,\n  1,\n  0,\n  0,\n  0,\n  241,\n  1150,\n  1,\n  0,\n  0,\n  0,\n  243,\n  1158,\n  1,\n  0,\n  0,\n  0,\n  245,\n  1167,\n  1,\n  0,\n  0,\n  0,\n  247,\n  1175,\n  1,\n  0,\n  0,\n  0,\n  249,\n  1183,\n  1,\n  0,\n  0,\n  0,\n  251,\n  1190,\n  1,\n  0,\n  0,\n  0,\n  253,\n  1198,\n  1,\n  0,\n  0,\n  0,\n  255,\n  1203,\n  1,\n  0,\n  0,\n  0,\n  257,\n  1208,\n  1,\n  0,\n  0,\n  0,\n  259,\n  1213,\n  1,\n  0,\n  0,\n  0,\n  261,\n  1220,\n  1,\n  0,\n  0,\n  0,\n  263,\n  1232,\n  1,\n  0,\n  0,\n  0,\n  265,\n  1241,\n  1,\n  0,\n  0,\n  0,\n  267,\n  1249,\n  1,\n  0,\n  0,\n  0,\n  269,\n  1256,\n  1,\n  0,\n  0,\n  0,\n  271,\n  1258,\n  1,\n  0,\n  0,\n  0,\n  273,\n  1267,\n  1,\n  0,\n  0,\n  0,\n  275,\n  1290,\n  1,\n  0,\n  0,\n  0,\n  277,\n  1295,\n  1,\n  0,\n  0,\n  0,\n  279,\n  1298,\n  1,\n  0,\n  0,\n  0,\n  281,\n  1317,\n  1,\n  0,\n  0,\n  0,\n  283,\n  1323,\n  1,\n  0,\n  0,\n  0,\n  285,\n  1337,\n  1,\n  0,\n  0,\n  0,\n  287,\n  288,\n  5,\n  112,\n  0,\n  0,\n  288,\n  289,\n  5,\n  114,\n  0,\n  0,\n  289,\n  290,\n  5,\n  97,\n  0,\n  0,\n  290,\n  291,\n  5,\n  103,\n  0,\n  0,\n  291,\n  292,\n  5,\n  109,\n  0,\n  0,\n  292,\n  293,\n  5,\n  97,\n  0,\n  0,\n  293,\n  2,\n  1,\n  0,\n  0,\n  0,\n  294,\n  295,\n  5,\n  59,\n  0,\n  0,\n  295,\n  4,\n  1,\n  0,\n  0,\n  0,\n  296,\n  297,\n  5,\n  42,\n  0,\n  0,\n  297,\n  6,\n  1,\n  0,\n  0,\n  0,\n  298,\n  299,\n  5,\n  124,\n  0,\n  0,\n  299,\n  300,\n  5,\n  124,\n  0,\n  0,\n  300,\n  8,\n  1,\n  0,\n  0,\n  0,\n  301,\n  302,\n  5,\n  94,\n  0,\n  0,\n  302,\n  10,\n  1,\n  0,\n  0,\n  0,\n  303,\n  304,\n  5,\n  126,\n  0,\n  0,\n  304,\n  12,\n  1,\n  0,\n  0,\n  0,\n  305,\n  306,\n  5,\n  62,\n  0,\n  0,\n  306,\n  307,\n  5,\n  61,\n  0,\n  0,\n  307,\n  14,\n  1,\n  0,\n  0,\n  0,\n  308,\n  309,\n  5,\n  62,\n  0,\n  0,\n  309,\n  16,\n  1,\n  0,\n  0,\n  0,\n  310,\n  311,\n  5,\n  60,\n  0,\n  0,\n  311,\n  18,\n  1,\n  0,\n  0,\n  0,\n  312,\n  313,\n  5,\n  60,\n  0,\n  0,\n  313,\n  314,\n  5,\n  61,\n  0,\n  0,\n  314,\n  20,\n  1,\n  0,\n  0,\n  0,\n  315,\n  316,\n  5,\n  61,\n  0,\n  0,\n  316,\n  22,\n  1,\n  0,\n  0,\n  0,\n  317,\n  318,\n  5,\n  97,\n  0,\n  0,\n  318,\n  319,\n  5,\n  115,\n  0,\n  0,\n  319,\n  24,\n  1,\n  0,\n  0,\n  0,\n  320,\n  321,\n  5,\n  105,\n  0,\n  0,\n  321,\n  322,\n  5,\n  109,\n  0,\n  0,\n  322,\n  323,\n  5,\n  112,\n  0,\n  0,\n  323,\n  324,\n  5,\n  111,\n  0,\n  0,\n  324,\n  325,\n  5,\n  114,\n  0,\n  0,\n  325,\n  326,\n  5,\n  116,\n  0,\n  0,\n  326,\n  26,\n  1,\n  0,\n  0,\n  0,\n  327,\n  328,\n  5,\n  102,\n  0,\n  0,\n  328,\n  329,\n  5,\n  114,\n  0,\n  0,\n  329,\n  330,\n  5,\n  111,\n  0,\n  0,\n  330,\n  331,\n  5,\n  109,\n  0,\n  0,\n  331,\n  28,\n  1,\n  0,\n  0,\n  0,\n  332,\n  333,\n  5,\n  123,\n  0,\n  0,\n  333,\n  30,\n  1,\n  0,\n  0,\n  0,\n  334,\n  335,\n  5,\n  44,\n  0,\n  0,\n  335,\n  32,\n  1,\n  0,\n  0,\n  0,\n  336,\n  337,\n  5,\n  125,\n  0,\n  0,\n  337,\n  34,\n  1,\n  0,\n  0,\n  0,\n  338,\n  339,\n  5,\n  97,\n  0,\n  0,\n  339,\n  340,\n  5,\n  98,\n  0,\n  0,\n  340,\n  341,\n  5,\n  115,\n  0,\n  0,\n  341,\n  342,\n  5,\n  116,\n  0,\n  0,\n  342,\n  343,\n  5,\n  114,\n  0,\n  0,\n  343,\n  344,\n  5,\n  97,\n  0,\n  0,\n  344,\n  345,\n  5,\n  99,\n  0,\n  0,\n  345,\n  346,\n  5,\n  116,\n  0,\n  0,\n  346,\n  36,\n  1,\n  0,\n  0,\n  0,\n  347,\n  348,\n  5,\n  99,\n  0,\n  0,\n  348,\n  349,\n  5,\n  111,\n  0,\n  0,\n  349,\n  350,\n  5,\n  110,\n  0,\n  0,\n  350,\n  351,\n  5,\n  116,\n  0,\n  0,\n  351,\n  352,\n  5,\n  114,\n  0,\n  0,\n  352,\n  353,\n  5,\n  97,\n  0,\n  0,\n  353,\n  354,\n  5,\n  99,\n  0,\n  0,\n  354,\n  355,\n  5,\n  116,\n  0,\n  0,\n  355,\n  38,\n  1,\n  0,\n  0,\n  0,\n  356,\n  357,\n  5,\n  105,\n  0,\n  0,\n  357,\n  358,\n  5,\n  110,\n  0,\n  0,\n  358,\n  359,\n  5,\n  116,\n  0,\n  0,\n  359,\n  360,\n  5,\n  101,\n  0,\n  0,\n  360,\n  361,\n  5,\n  114,\n  0,\n  0,\n  361,\n  362,\n  5,\n  102,\n  0,\n  0,\n  362,\n  363,\n  5,\n  97,\n  0,\n  0,\n  363,\n  364,\n  5,\n  99,\n  0,\n  0,\n  364,\n  365,\n  5,\n  101,\n  0,\n  0,\n  365,\n  40,\n  1,\n  0,\n  0,\n  0,\n  366,\n  367,\n  5,\n  108,\n  0,\n  0,\n  367,\n  368,\n  5,\n  105,\n  0,\n  0,\n  368,\n  369,\n  5,\n  98,\n  0,\n  0,\n  369,\n  370,\n  5,\n  114,\n  0,\n  0,\n  370,\n  371,\n  5,\n  97,\n  0,\n  0,\n  371,\n  372,\n  5,\n  114,\n  0,\n  0,\n  372,\n  373,\n  5,\n  121,\n  0,\n  0,\n  373,\n  42,\n  1,\n  0,\n  0,\n  0,\n  374,\n  375,\n  5,\n  105,\n  0,\n  0,\n  375,\n  376,\n  5,\n  115,\n  0,\n  0,\n  376,\n  44,\n  1,\n  0,\n  0,\n  0,\n  377,\n  378,\n  5,\n  40,\n  0,\n  0,\n  378,\n  46,\n  1,\n  0,\n  0,\n  0,\n  379,\n  380,\n  5,\n  41,\n  0,\n  0,\n  380,\n  48,\n  1,\n  0,\n  0,\n  0,\n  381,\n  382,\n  5,\n  101,\n  0,\n  0,\n  382,\n  383,\n  5,\n  114,\n  0,\n  0,\n  383,\n  384,\n  5,\n  114,\n  0,\n  0,\n  384,\n  385,\n  5,\n  111,\n  0,\n  0,\n  385,\n  386,\n  5,\n  114,\n  0,\n  0,\n  386,\n  50,\n  1,\n  0,\n  0,\n  0,\n  387,\n  388,\n  5,\n  117,\n  0,\n  0,\n  388,\n  389,\n  5,\n  115,\n  0,\n  0,\n  389,\n  390,\n  5,\n  105,\n  0,\n  0,\n  390,\n  391,\n  5,\n  110,\n  0,\n  0,\n  391,\n  392,\n  5,\n  103,\n  0,\n  0,\n  392,\n  52,\n  1,\n  0,\n  0,\n  0,\n  393,\n  394,\n  5,\n  102,\n  0,\n  0,\n  394,\n  395,\n  5,\n  111,\n  0,\n  0,\n  395,\n  396,\n  5,\n  114,\n  0,\n  0,\n  396,\n  54,\n  1,\n  0,\n  0,\n  0,\n  397,\n  398,\n  5,\n  124,\n  0,\n  0,\n  398,\n  56,\n  1,\n  0,\n  0,\n  0,\n  399,\n  400,\n  5,\n  38,\n  0,\n  0,\n  400,\n  58,\n  1,\n  0,\n  0,\n  0,\n  401,\n  402,\n  5,\n  43,\n  0,\n  0,\n  402,\n  60,\n  1,\n  0,\n  0,\n  0,\n  403,\n  404,\n  5,\n  45,\n  0,\n  0,\n  404,\n  62,\n  1,\n  0,\n  0,\n  0,\n  405,\n  406,\n  5,\n  47,\n  0,\n  0,\n  406,\n  64,\n  1,\n  0,\n  0,\n  0,\n  407,\n  408,\n  5,\n  37,\n  0,\n  0,\n  408,\n  66,\n  1,\n  0,\n  0,\n  0,\n  409,\n  410,\n  5,\n  61,\n  0,\n  0,\n  410,\n  411,\n  5,\n  61,\n  0,\n  0,\n  411,\n  68,\n  1,\n  0,\n  0,\n  0,\n  412,\n  413,\n  5,\n  33,\n  0,\n  0,\n  413,\n  414,\n  5,\n  61,\n  0,\n  0,\n  414,\n  70,\n  1,\n  0,\n  0,\n  0,\n  415,\n  416,\n  5,\n  115,\n  0,\n  0,\n  416,\n  417,\n  5,\n  116,\n  0,\n  0,\n  417,\n  418,\n  5,\n  114,\n  0,\n  0,\n  418,\n  419,\n  5,\n  117,\n  0,\n  0,\n  419,\n  420,\n  5,\n  99,\n  0,\n  0,\n  420,\n  421,\n  5,\n  116,\n  0,\n  0,\n  421,\n  72,\n  1,\n  0,\n  0,\n  0,\n  422,\n  423,\n  5,\n  109,\n  0,\n  0,\n  423,\n  424,\n  5,\n  111,\n  0,\n  0,\n  424,\n  425,\n  5,\n  100,\n  0,\n  0,\n  425,\n  426,\n  5,\n  105,\n  0,\n  0,\n  426,\n  427,\n  5,\n  102,\n  0,\n  0,\n  427,\n  428,\n  5,\n  105,\n  0,\n  0,\n  428,\n  429,\n  5,\n  101,\n  0,\n  0,\n  429,\n  430,\n  5,\n  114,\n  0,\n  0,\n  430,\n  74,\n  1,\n  0,\n  0,\n  0,\n  431,\n  432,\n  5,\n  102,\n  0,\n  0,\n  432,\n  433,\n  5,\n  117,\n  0,\n  0,\n  433,\n  434,\n  5,\n  110,\n  0,\n  0,\n  434,\n  435,\n  5,\n  99,\n  0,\n  0,\n  435,\n  436,\n  5,\n  116,\n  0,\n  0,\n  436,\n  437,\n  5,\n  105,\n  0,\n  0,\n  437,\n  438,\n  5,\n  111,\n  0,\n  0,\n  438,\n  439,\n  5,\n  110,\n  0,\n  0,\n  439,\n  76,\n  1,\n  0,\n  0,\n  0,\n  440,\n  441,\n  5,\n  114,\n  0,\n  0,\n  441,\n  442,\n  5,\n  101,\n  0,\n  0,\n  442,\n  443,\n  5,\n  116,\n  0,\n  0,\n  443,\n  444,\n  5,\n  117,\n  0,\n  0,\n  444,\n  445,\n  5,\n  114,\n  0,\n  0,\n  445,\n  446,\n  5,\n  110,\n  0,\n  0,\n  446,\n  447,\n  5,\n  115,\n  0,\n  0,\n  447,\n  78,\n  1,\n  0,\n  0,\n  0,\n  448,\n  449,\n  5,\n  101,\n  0,\n  0,\n  449,\n  450,\n  5,\n  118,\n  0,\n  0,\n  450,\n  451,\n  5,\n  101,\n  0,\n  0,\n  451,\n  452,\n  5,\n  110,\n  0,\n  0,\n  452,\n  453,\n  5,\n  116,\n  0,\n  0,\n  453,\n  80,\n  1,\n  0,\n  0,\n  0,\n  454,\n  455,\n  5,\n  101,\n  0,\n  0,\n  455,\n  456,\n  5,\n  110,\n  0,\n  0,\n  456,\n  457,\n  5,\n  117,\n  0,\n  0,\n  457,\n  458,\n  5,\n  109,\n  0,\n  0,\n  458,\n  82,\n  1,\n  0,\n  0,\n  0,\n  459,\n  460,\n  5,\n  91,\n  0,\n  0,\n  460,\n  84,\n  1,\n  0,\n  0,\n  0,\n  461,\n  462,\n  5,\n  93,\n  0,\n  0,\n  462,\n  86,\n  1,\n  0,\n  0,\n  0,\n  463,\n  464,\n  5,\n  97,\n  0,\n  0,\n  464,\n  465,\n  5,\n  100,\n  0,\n  0,\n  465,\n  466,\n  5,\n  100,\n  0,\n  0,\n  466,\n  467,\n  5,\n  114,\n  0,\n  0,\n  467,\n  468,\n  5,\n  101,\n  0,\n  0,\n  468,\n  469,\n  5,\n  115,\n  0,\n  0,\n  469,\n  470,\n  5,\n  115,\n  0,\n  0,\n  470,\n  88,\n  1,\n  0,\n  0,\n  0,\n  471,\n  472,\n  5,\n  46,\n  0,\n  0,\n  472,\n  90,\n  1,\n  0,\n  0,\n  0,\n  473,\n  474,\n  5,\n  109,\n  0,\n  0,\n  474,\n  475,\n  5,\n  97,\n  0,\n  0,\n  475,\n  476,\n  5,\n  112,\n  0,\n  0,\n  476,\n  477,\n  5,\n  112,\n  0,\n  0,\n  477,\n  478,\n  5,\n  105,\n  0,\n  0,\n  478,\n  479,\n  5,\n  110,\n  0,\n  0,\n  479,\n  480,\n  5,\n  103,\n  0,\n  0,\n  480,\n  92,\n  1,\n  0,\n  0,\n  0,\n  481,\n  482,\n  5,\n  61,\n  0,\n  0,\n  482,\n  483,\n  5,\n  62,\n  0,\n  0,\n  483,\n  94,\n  1,\n  0,\n  0,\n  0,\n  484,\n  485,\n  5,\n  109,\n  0,\n  0,\n  485,\n  486,\n  5,\n  101,\n  0,\n  0,\n  486,\n  487,\n  5,\n  109,\n  0,\n  0,\n  487,\n  488,\n  5,\n  111,\n  0,\n  0,\n  488,\n  489,\n  5,\n  114,\n  0,\n  0,\n  489,\n  490,\n  5,\n  121,\n  0,\n  0,\n  490,\n  96,\n  1,\n  0,\n  0,\n  0,\n  491,\n  492,\n  5,\n  115,\n  0,\n  0,\n  492,\n  493,\n  5,\n  116,\n  0,\n  0,\n  493,\n  494,\n  5,\n  111,\n  0,\n  0,\n  494,\n  495,\n  5,\n  114,\n  0,\n  0,\n  495,\n  496,\n  5,\n  97,\n  0,\n  0,\n  496,\n  497,\n  5,\n  103,\n  0,\n  0,\n  497,\n  498,\n  5,\n  101,\n  0,\n  0,\n  498,\n  98,\n  1,\n  0,\n  0,\n  0,\n  499,\n  500,\n  5,\n  99,\n  0,\n  0,\n  500,\n  501,\n  5,\n  97,\n  0,\n  0,\n  501,\n  502,\n  5,\n  108,\n  0,\n  0,\n  502,\n  503,\n  5,\n  108,\n  0,\n  0,\n  503,\n  504,\n  5,\n  100,\n  0,\n  0,\n  504,\n  505,\n  5,\n  97,\n  0,\n  0,\n  505,\n  506,\n  5,\n  116,\n  0,\n  0,\n  506,\n  507,\n  5,\n  97,\n  0,\n  0,\n  507,\n  100,\n  1,\n  0,\n  0,\n  0,\n  508,\n  509,\n  5,\n  105,\n  0,\n  0,\n  509,\n  510,\n  5,\n  102,\n  0,\n  0,\n  510,\n  102,\n  1,\n  0,\n  0,\n  0,\n  511,\n  512,\n  5,\n  101,\n  0,\n  0,\n  512,\n  513,\n  5,\n  108,\n  0,\n  0,\n  513,\n  514,\n  5,\n  115,\n  0,\n  0,\n  514,\n  515,\n  5,\n  101,\n  0,\n  0,\n  515,\n  104,\n  1,\n  0,\n  0,\n  0,\n  516,\n  517,\n  5,\n  116,\n  0,\n  0,\n  517,\n  518,\n  5,\n  114,\n  0,\n  0,\n  518,\n  519,\n  5,\n  121,\n  0,\n  0,\n  519,\n  106,\n  1,\n  0,\n  0,\n  0,\n  520,\n  521,\n  5,\n  99,\n  0,\n  0,\n  521,\n  522,\n  5,\n  97,\n  0,\n  0,\n  522,\n  523,\n  5,\n  116,\n  0,\n  0,\n  523,\n  524,\n  5,\n  99,\n  0,\n  0,\n  524,\n  525,\n  5,\n  104,\n  0,\n  0,\n  525,\n  108,\n  1,\n  0,\n  0,\n  0,\n  526,\n  527,\n  5,\n  119,\n  0,\n  0,\n  527,\n  528,\n  5,\n  104,\n  0,\n  0,\n  528,\n  529,\n  5,\n  105,\n  0,\n  0,\n  529,\n  530,\n  5,\n  108,\n  0,\n  0,\n  530,\n  531,\n  5,\n  101,\n  0,\n  0,\n  531,\n  110,\n  1,\n  0,\n  0,\n  0,\n  532,\n  533,\n  5,\n  117,\n  0,\n  0,\n  533,\n  534,\n  5,\n  110,\n  0,\n  0,\n  534,\n  535,\n  5,\n  99,\n  0,\n  0,\n  535,\n  536,\n  5,\n  104,\n  0,\n  0,\n  536,\n  537,\n  5,\n  101,\n  0,\n  0,\n  537,\n  538,\n  5,\n  99,\n  0,\n  0,\n  538,\n  539,\n  5,\n  107,\n  0,\n  0,\n  539,\n  540,\n  5,\n  101,\n  0,\n  0,\n  540,\n  541,\n  5,\n  100,\n  0,\n  0,\n  541,\n  112,\n  1,\n  0,\n  0,\n  0,\n  542,\n  543,\n  5,\n  97,\n  0,\n  0,\n  543,\n  544,\n  5,\n  115,\n  0,\n  0,\n  544,\n  545,\n  5,\n  115,\n  0,\n  0,\n  545,\n  546,\n  5,\n  101,\n  0,\n  0,\n  546,\n  547,\n  5,\n  109,\n  0,\n  0,\n  547,\n  548,\n  5,\n  98,\n  0,\n  0,\n  548,\n  549,\n  5,\n  108,\n  0,\n  0,\n  549,\n  550,\n  5,\n  121,\n  0,\n  0,\n  550,\n  114,\n  1,\n  0,\n  0,\n  0,\n  551,\n  552,\n  5,\n  100,\n  0,\n  0,\n  552,\n  553,\n  5,\n  111,\n  0,\n  0,\n  553,\n  116,\n  1,\n  0,\n  0,\n  0,\n  554,\n  555,\n  5,\n  114,\n  0,\n  0,\n  555,\n  556,\n  5,\n  101,\n  0,\n  0,\n  556,\n  557,\n  5,\n  116,\n  0,\n  0,\n  557,\n  558,\n  5,\n  117,\n  0,\n  0,\n  558,\n  559,\n  5,\n  114,\n  0,\n  0,\n  559,\n  560,\n  5,\n  110,\n  0,\n  0,\n  560,\n  118,\n  1,\n  0,\n  0,\n  0,\n  561,\n  562,\n  5,\n  116,\n  0,\n  0,\n  562,\n  563,\n  5,\n  104,\n  0,\n  0,\n  563,\n  564,\n  5,\n  114,\n  0,\n  0,\n  564,\n  565,\n  5,\n  111,\n  0,\n  0,\n  565,\n  566,\n  5,\n  119,\n  0,\n  0,\n  566,\n  120,\n  1,\n  0,\n  0,\n  0,\n  567,\n  568,\n  5,\n  101,\n  0,\n  0,\n  568,\n  569,\n  5,\n  109,\n  0,\n  0,\n  569,\n  570,\n  5,\n  105,\n  0,\n  0,\n  570,\n  571,\n  5,\n  116,\n  0,\n  0,\n  571,\n  122,\n  1,\n  0,\n  0,\n  0,\n  572,\n  573,\n  5,\n  114,\n  0,\n  0,\n  573,\n  574,\n  5,\n  101,\n  0,\n  0,\n  574,\n  575,\n  5,\n  118,\n  0,\n  0,\n  575,\n  576,\n  5,\n  101,\n  0,\n  0,\n  576,\n  577,\n  5,\n  114,\n  0,\n  0,\n  577,\n  578,\n  5,\n  116,\n  0,\n  0,\n  578,\n  124,\n  1,\n  0,\n  0,\n  0,\n  579,\n  580,\n  5,\n  118,\n  0,\n  0,\n  580,\n  581,\n  5,\n  97,\n  0,\n  0,\n  581,\n  582,\n  5,\n  114,\n  0,\n  0,\n  582,\n  126,\n  1,\n  0,\n  0,\n  0,\n  583,\n  584,\n  5,\n  98,\n  0,\n  0,\n  584,\n  585,\n  5,\n  111,\n  0,\n  0,\n  585,\n  586,\n  5,\n  111,\n  0,\n  0,\n  586,\n  587,\n  5,\n  108,\n  0,\n  0,\n  587,\n  128,\n  1,\n  0,\n  0,\n  0,\n  588,\n  589,\n  5,\n  115,\n  0,\n  0,\n  589,\n  590,\n  5,\n  116,\n  0,\n  0,\n  590,\n  591,\n  5,\n  114,\n  0,\n  0,\n  591,\n  592,\n  5,\n  105,\n  0,\n  0,\n  592,\n  593,\n  5,\n  110,\n  0,\n  0,\n  593,\n  594,\n  5,\n  103,\n  0,\n  0,\n  594,\n  130,\n  1,\n  0,\n  0,\n  0,\n  595,\n  596,\n  5,\n  98,\n  0,\n  0,\n  596,\n  597,\n  5,\n  121,\n  0,\n  0,\n  597,\n  598,\n  5,\n  116,\n  0,\n  0,\n  598,\n  599,\n  5,\n  101,\n  0,\n  0,\n  599,\n  132,\n  1,\n  0,\n  0,\n  0,\n  600,\n  601,\n  5,\n  43,\n  0,\n  0,\n  601,\n  602,\n  5,\n  43,\n  0,\n  0,\n  602,\n  134,\n  1,\n  0,\n  0,\n  0,\n  603,\n  604,\n  5,\n  45,\n  0,\n  0,\n  604,\n  605,\n  5,\n  45,\n  0,\n  0,\n  605,\n  136,\n  1,\n  0,\n  0,\n  0,\n  606,\n  607,\n  5,\n  110,\n  0,\n  0,\n  607,\n  608,\n  5,\n  101,\n  0,\n  0,\n  608,\n  609,\n  5,\n  119,\n  0,\n  0,\n  609,\n  138,\n  1,\n  0,\n  0,\n  0,\n  610,\n  611,\n  5,\n  58,\n  0,\n  0,\n  611,\n  140,\n  1,\n  0,\n  0,\n  0,\n  612,\n  613,\n  5,\n  100,\n  0,\n  0,\n  613,\n  614,\n  5,\n  101,\n  0,\n  0,\n  614,\n  615,\n  5,\n  108,\n  0,\n  0,\n  615,\n  616,\n  5,\n  101,\n  0,\n  0,\n  616,\n  617,\n  5,\n  116,\n  0,\n  0,\n  617,\n  618,\n  5,\n  101,\n  0,\n  0,\n  618,\n  142,\n  1,\n  0,\n  0,\n  0,\n  619,\n  620,\n  5,\n  33,\n  0,\n  0,\n  620,\n  144,\n  1,\n  0,\n  0,\n  0,\n  621,\n  622,\n  5,\n  42,\n  0,\n  0,\n  622,\n  623,\n  5,\n  42,\n  0,\n  0,\n  623,\n  146,\n  1,\n  0,\n  0,\n  0,\n  624,\n  625,\n  5,\n  60,\n  0,\n  0,\n  625,\n  626,\n  5,\n  60,\n  0,\n  0,\n  626,\n  148,\n  1,\n  0,\n  0,\n  0,\n  627,\n  628,\n  5,\n  62,\n  0,\n  0,\n  628,\n  629,\n  5,\n  62,\n  0,\n  0,\n  629,\n  150,\n  1,\n  0,\n  0,\n  0,\n  630,\n  631,\n  5,\n  38,\n  0,\n  0,\n  631,\n  632,\n  5,\n  38,\n  0,\n  0,\n  632,\n  152,\n  1,\n  0,\n  0,\n  0,\n  633,\n  634,\n  5,\n  63,\n  0,\n  0,\n  634,\n  154,\n  1,\n  0,\n  0,\n  0,\n  635,\n  636,\n  5,\n  124,\n  0,\n  0,\n  636,\n  637,\n  5,\n  61,\n  0,\n  0,\n  637,\n  156,\n  1,\n  0,\n  0,\n  0,\n  638,\n  639,\n  5,\n  94,\n  0,\n  0,\n  639,\n  640,\n  5,\n  61,\n  0,\n  0,\n  640,\n  158,\n  1,\n  0,\n  0,\n  0,\n  641,\n  642,\n  5,\n  38,\n  0,\n  0,\n  642,\n  643,\n  5,\n  61,\n  0,\n  0,\n  643,\n  160,\n  1,\n  0,\n  0,\n  0,\n  644,\n  645,\n  5,\n  60,\n  0,\n  0,\n  645,\n  646,\n  5,\n  60,\n  0,\n  0,\n  646,\n  647,\n  5,\n  61,\n  0,\n  0,\n  647,\n  162,\n  1,\n  0,\n  0,\n  0,\n  648,\n  649,\n  5,\n  62,\n  0,\n  0,\n  649,\n  650,\n  5,\n  62,\n  0,\n  0,\n  650,\n  651,\n  5,\n  61,\n  0,\n  0,\n  651,\n  164,\n  1,\n  0,\n  0,\n  0,\n  652,\n  653,\n  5,\n  43,\n  0,\n  0,\n  653,\n  654,\n  5,\n  61,\n  0,\n  0,\n  654,\n  166,\n  1,\n  0,\n  0,\n  0,\n  655,\n  656,\n  5,\n  45,\n  0,\n  0,\n  656,\n  657,\n  5,\n  61,\n  0,\n  0,\n  657,\n  168,\n  1,\n  0,\n  0,\n  0,\n  658,\n  659,\n  5,\n  42,\n  0,\n  0,\n  659,\n  660,\n  5,\n  61,\n  0,\n  0,\n  660,\n  170,\n  1,\n  0,\n  0,\n  0,\n  661,\n  662,\n  5,\n  47,\n  0,\n  0,\n  662,\n  663,\n  5,\n  61,\n  0,\n  0,\n  663,\n  172,\n  1,\n  0,\n  0,\n  0,\n  664,\n  665,\n  5,\n  37,\n  0,\n  0,\n  665,\n  666,\n  5,\n  61,\n  0,\n  0,\n  666,\n  174,\n  1,\n  0,\n  0,\n  0,\n  667,\n  668,\n  5,\n  108,\n  0,\n  0,\n  668,\n  669,\n  5,\n  101,\n  0,\n  0,\n  669,\n  670,\n  5,\n  116,\n  0,\n  0,\n  670,\n  176,\n  1,\n  0,\n  0,\n  0,\n  671,\n  672,\n  5,\n  58,\n  0,\n  0,\n  672,\n  673,\n  5,\n  61,\n  0,\n  0,\n  673,\n  178,\n  1,\n  0,\n  0,\n  0,\n  674,\n  675,\n  5,\n  61,\n  0,\n  0,\n  675,\n  676,\n  5,\n  58,\n  0,\n  0,\n  676,\n  180,\n  1,\n  0,\n  0,\n  0,\n  677,\n  678,\n  5,\n  115,\n  0,\n  0,\n  678,\n  679,\n  5,\n  119,\n  0,\n  0,\n  679,\n  680,\n  5,\n  105,\n  0,\n  0,\n  680,\n  681,\n  5,\n  116,\n  0,\n  0,\n  681,\n  682,\n  5,\n  99,\n  0,\n  0,\n  682,\n  683,\n  5,\n  104,\n  0,\n  0,\n  683,\n  182,\n  1,\n  0,\n  0,\n  0,\n  684,\n  685,\n  5,\n  99,\n  0,\n  0,\n  685,\n  686,\n  5,\n  97,\n  0,\n  0,\n  686,\n  687,\n  5,\n  115,\n  0,\n  0,\n  687,\n  688,\n  5,\n  101,\n  0,\n  0,\n  688,\n  184,\n  1,\n  0,\n  0,\n  0,\n  689,\n  690,\n  5,\n  100,\n  0,\n  0,\n  690,\n  691,\n  5,\n  101,\n  0,\n  0,\n  691,\n  692,\n  5,\n  102,\n  0,\n  0,\n  692,\n  693,\n  5,\n  97,\n  0,\n  0,\n  693,\n  694,\n  5,\n  117,\n  0,\n  0,\n  694,\n  695,\n  5,\n  108,\n  0,\n  0,\n  695,\n  696,\n  5,\n  116,\n  0,\n  0,\n  696,\n  186,\n  1,\n  0,\n  0,\n  0,\n  697,\n  698,\n  5,\n  45,\n  0,\n  0,\n  698,\n  699,\n  5,\n  62,\n  0,\n  0,\n  699,\n  188,\n  1,\n  0,\n  0,\n  0,\n  700,\n  701,\n  5,\n  99,\n  0,\n  0,\n  701,\n  702,\n  5,\n  97,\n  0,\n  0,\n  702,\n  703,\n  5,\n  108,\n  0,\n  0,\n  703,\n  704,\n  5,\n  108,\n  0,\n  0,\n  704,\n  705,\n  5,\n  98,\n  0,\n  0,\n  705,\n  706,\n  5,\n  97,\n  0,\n  0,\n  706,\n  707,\n  5,\n  99,\n  0,\n  0,\n  707,\n  708,\n  5,\n  107,\n  0,\n  0,\n  708,\n  190,\n  1,\n  0,\n  0,\n  0,\n  709,\n  710,\n  5,\n  111,\n  0,\n  0,\n  710,\n  711,\n  5,\n  118,\n  0,\n  0,\n  711,\n  712,\n  5,\n  101,\n  0,\n  0,\n  712,\n  713,\n  5,\n  114,\n  0,\n  0,\n  713,\n  714,\n  5,\n  114,\n  0,\n  0,\n  714,\n  715,\n  5,\n  105,\n  0,\n  0,\n  715,\n  716,\n  5,\n  100,\n  0,\n  0,\n  716,\n  717,\n  5,\n  101,\n  0,\n  0,\n  717,\n  192,\n  1,\n  0,\n  0,\n  0,\n  718,\n  719,\n  5,\n  105,\n  0,\n  0,\n  719,\n  720,\n  5,\n  110,\n  0,\n  0,\n  720,\n  721,\n  5,\n  116,\n  0,\n  0,\n  721,\n  723,\n  1,\n  0,\n  0,\n  0,\n  722,\n  724,\n  3,\n  203,\n  101,\n  0,\n  723,\n  722,\n  1,\n  0,\n  0,\n  0,\n  723,\n  724,\n  1,\n  0,\n  0,\n  0,\n  724,\n  194,\n  1,\n  0,\n  0,\n  0,\n  725,\n  726,\n  5,\n  117,\n  0,\n  0,\n  726,\n  727,\n  5,\n  105,\n  0,\n  0,\n  727,\n  728,\n  5,\n  110,\n  0,\n  0,\n  728,\n  729,\n  5,\n  116,\n  0,\n  0,\n  729,\n  731,\n  1,\n  0,\n  0,\n  0,\n  730,\n  732,\n  3,\n  203,\n  101,\n  0,\n  731,\n  730,\n  1,\n  0,\n  0,\n  0,\n  731,\n  732,\n  1,\n  0,\n  0,\n  0,\n  732,\n  196,\n  1,\n  0,\n  0,\n  0,\n  733,\n  734,\n  5,\n  98,\n  0,\n  0,\n  734,\n  735,\n  5,\n  121,\n  0,\n  0,\n  735,\n  736,\n  5,\n  116,\n  0,\n  0,\n  736,\n  737,\n  5,\n  101,\n  0,\n  0,\n  737,\n  738,\n  5,\n  115,\n  0,\n  0,\n  738,\n  740,\n  1,\n  0,\n  0,\n  0,\n  739,\n  741,\n  3,\n  205,\n  102,\n  0,\n  740,\n  739,\n  1,\n  0,\n  0,\n  0,\n  740,\n  741,\n  1,\n  0,\n  0,\n  0,\n  741,\n  198,\n  1,\n  0,\n  0,\n  0,\n  742,\n  743,\n  5,\n  102,\n  0,\n  0,\n  743,\n  744,\n  5,\n  105,\n  0,\n  0,\n  744,\n  745,\n  5,\n  120,\n  0,\n  0,\n  745,\n  746,\n  5,\n  101,\n  0,\n  0,\n  746,\n  747,\n  5,\n  100,\n  0,\n  0,\n  747,\n  755,\n  1,\n  0,\n  0,\n  0,\n  748,\n  749,\n  3,\n  203,\n  101,\n  0,\n  749,\n  751,\n  5,\n  120,\n  0,\n  0,\n  750,\n  752,\n  7,\n  0,\n  0,\n  0,\n  751,\n  750,\n  1,\n  0,\n  0,\n  0,\n  752,\n  753,\n  1,\n  0,\n  0,\n  0,\n  753,\n  751,\n  1,\n  0,\n  0,\n  0,\n  753,\n  754,\n  1,\n  0,\n  0,\n  0,\n  754,\n  756,\n  1,\n  0,\n  0,\n  0,\n  755,\n  748,\n  1,\n  0,\n  0,\n  0,\n  755,\n  756,\n  1,\n  0,\n  0,\n  0,\n  756,\n  200,\n  1,\n  0,\n  0,\n  0,\n  757,\n  758,\n  5,\n  117,\n  0,\n  0,\n  758,\n  759,\n  5,\n  102,\n  0,\n  0,\n  759,\n  760,\n  5,\n  105,\n  0,\n  0,\n  760,\n  761,\n  5,\n  120,\n  0,\n  0,\n  761,\n  762,\n  5,\n  101,\n  0,\n  0,\n  762,\n  763,\n  5,\n  100,\n  0,\n  0,\n  763,\n  771,\n  1,\n  0,\n  0,\n  0,\n  764,\n  765,\n  3,\n  203,\n  101,\n  0,\n  765,\n  767,\n  5,\n  120,\n  0,\n  0,\n  766,\n  768,\n  7,\n  0,\n  0,\n  0,\n  767,\n  766,\n  1,\n  0,\n  0,\n  0,\n  768,\n  769,\n  1,\n  0,\n  0,\n  0,\n  769,\n  767,\n  1,\n  0,\n  0,\n  0,\n  769,\n  770,\n  1,\n  0,\n  0,\n  0,\n  770,\n  772,\n  1,\n  0,\n  0,\n  0,\n  771,\n  764,\n  1,\n  0,\n  0,\n  0,\n  771,\n  772,\n  1,\n  0,\n  0,\n  0,\n  772,\n  202,\n  1,\n  0,\n  0,\n  0,\n  773,\n  857,\n  5,\n  56,\n  0,\n  0,\n  774,\n  775,\n  5,\n  49,\n  0,\n  0,\n  775,\n  857,\n  5,\n  54,\n  0,\n  0,\n  776,\n  777,\n  5,\n  50,\n  0,\n  0,\n  777,\n  857,\n  5,\n  52,\n  0,\n  0,\n  778,\n  779,\n  5,\n  51,\n  0,\n  0,\n  779,\n  857,\n  5,\n  50,\n  0,\n  0,\n  780,\n  781,\n  5,\n  52,\n  0,\n  0,\n  781,\n  857,\n  5,\n  48,\n  0,\n  0,\n  782,\n  783,\n  5,\n  52,\n  0,\n  0,\n  783,\n  857,\n  5,\n  56,\n  0,\n  0,\n  784,\n  785,\n  5,\n  53,\n  0,\n  0,\n  785,\n  857,\n  5,\n  54,\n  0,\n  0,\n  786,\n  787,\n  5,\n  54,\n  0,\n  0,\n  787,\n  857,\n  5,\n  52,\n  0,\n  0,\n  788,\n  789,\n  5,\n  55,\n  0,\n  0,\n  789,\n  857,\n  5,\n  50,\n  0,\n  0,\n  790,\n  791,\n  5,\n  56,\n  0,\n  0,\n  791,\n  857,\n  5,\n  48,\n  0,\n  0,\n  792,\n  793,\n  5,\n  56,\n  0,\n  0,\n  793,\n  857,\n  5,\n  56,\n  0,\n  0,\n  794,\n  795,\n  5,\n  57,\n  0,\n  0,\n  795,\n  857,\n  5,\n  54,\n  0,\n  0,\n  796,\n  797,\n  5,\n  49,\n  0,\n  0,\n  797,\n  798,\n  5,\n  48,\n  0,\n  0,\n  798,\n  857,\n  5,\n  52,\n  0,\n  0,\n  799,\n  800,\n  5,\n  49,\n  0,\n  0,\n  800,\n  801,\n  5,\n  49,\n  0,\n  0,\n  801,\n  857,\n  5,\n  50,\n  0,\n  0,\n  802,\n  803,\n  5,\n  49,\n  0,\n  0,\n  803,\n  804,\n  5,\n  50,\n  0,\n  0,\n  804,\n  857,\n  5,\n  48,\n  0,\n  0,\n  805,\n  806,\n  5,\n  49,\n  0,\n  0,\n  806,\n  807,\n  5,\n  50,\n  0,\n  0,\n  807,\n  857,\n  5,\n  56,\n  0,\n  0,\n  808,\n  809,\n  5,\n  49,\n  0,\n  0,\n  809,\n  810,\n  5,\n  51,\n  0,\n  0,\n  810,\n  857,\n  5,\n  54,\n  0,\n  0,\n  811,\n  812,\n  5,\n  49,\n  0,\n  0,\n  812,\n  813,\n  5,\n  52,\n  0,\n  0,\n  813,\n  857,\n  5,\n  52,\n  0,\n  0,\n  814,\n  815,\n  5,\n  49,\n  0,\n  0,\n  815,\n  816,\n  5,\n  53,\n  0,\n  0,\n  816,\n  857,\n  5,\n  50,\n  0,\n  0,\n  817,\n  818,\n  5,\n  49,\n  0,\n  0,\n  818,\n  819,\n  5,\n  54,\n  0,\n  0,\n  819,\n  857,\n  5,\n  48,\n  0,\n  0,\n  820,\n  821,\n  5,\n  49,\n  0,\n  0,\n  821,\n  822,\n  5,\n  54,\n  0,\n  0,\n  822,\n  857,\n  5,\n  56,\n  0,\n  0,\n  823,\n  824,\n  5,\n  49,\n  0,\n  0,\n  824,\n  825,\n  5,\n  55,\n  0,\n  0,\n  825,\n  857,\n  5,\n  54,\n  0,\n  0,\n  826,\n  827,\n  5,\n  49,\n  0,\n  0,\n  827,\n  828,\n  5,\n  56,\n  0,\n  0,\n  828,\n  857,\n  5,\n  52,\n  0,\n  0,\n  829,\n  830,\n  5,\n  49,\n  0,\n  0,\n  830,\n  831,\n  5,\n  57,\n  0,\n  0,\n  831,\n  857,\n  5,\n  50,\n  0,\n  0,\n  832,\n  833,\n  5,\n  50,\n  0,\n  0,\n  833,\n  834,\n  5,\n  48,\n  0,\n  0,\n  834,\n  857,\n  5,\n  48,\n  0,\n  0,\n  835,\n  836,\n  5,\n  50,\n  0,\n  0,\n  836,\n  837,\n  5,\n  48,\n  0,\n  0,\n  837,\n  857,\n  5,\n  56,\n  0,\n  0,\n  838,\n  839,\n  5,\n  50,\n  0,\n  0,\n  839,\n  840,\n  5,\n  49,\n  0,\n  0,\n  840,\n  857,\n  5,\n  54,\n  0,\n  0,\n  841,\n  842,\n  5,\n  50,\n  0,\n  0,\n  842,\n  843,\n  5,\n  50,\n  0,\n  0,\n  843,\n  857,\n  5,\n  52,\n  0,\n  0,\n  844,\n  845,\n  5,\n  50,\n  0,\n  0,\n  845,\n  846,\n  5,\n  51,\n  0,\n  0,\n  846,\n  857,\n  5,\n  50,\n  0,\n  0,\n  847,\n  848,\n  5,\n  50,\n  0,\n  0,\n  848,\n  849,\n  5,\n  52,\n  0,\n  0,\n  849,\n  857,\n  5,\n  48,\n  0,\n  0,\n  850,\n  851,\n  5,\n  50,\n  0,\n  0,\n  851,\n  852,\n  5,\n  52,\n  0,\n  0,\n  852,\n  857,\n  5,\n  56,\n  0,\n  0,\n  853,\n  854,\n  5,\n  50,\n  0,\n  0,\n  854,\n  855,\n  5,\n  53,\n  0,\n  0,\n  855,\n  857,\n  5,\n  54,\n  0,\n  0,\n  856,\n  773,\n  1,\n  0,\n  0,\n  0,\n  856,\n  774,\n  1,\n  0,\n  0,\n  0,\n  856,\n  776,\n  1,\n  0,\n  0,\n  0,\n  856,\n  778,\n  1,\n  0,\n  0,\n  0,\n  856,\n  780,\n  1,\n  0,\n  0,\n  0,\n  856,\n  782,\n  1,\n  0,\n  0,\n  0,\n  856,\n  784,\n  1,\n  0,\n  0,\n  0,\n  856,\n  786,\n  1,\n  0,\n  0,\n  0,\n  856,\n  788,\n  1,\n  0,\n  0,\n  0,\n  856,\n  790,\n  1,\n  0,\n  0,\n  0,\n  856,\n  792,\n  1,\n  0,\n  0,\n  0,\n  856,\n  794,\n  1,\n  0,\n  0,\n  0,\n  856,\n  796,\n  1,\n  0,\n  0,\n  0,\n  856,\n  799,\n  1,\n  0,\n  0,\n  0,\n  856,\n  802,\n  1,\n  0,\n  0,\n  0,\n  856,\n  805,\n  1,\n  0,\n  0,\n  0,\n  856,\n  808,\n  1,\n  0,\n  0,\n  0,\n  856,\n  811,\n  1,\n  0,\n  0,\n  0,\n  856,\n  814,\n  1,\n  0,\n  0,\n  0,\n  856,\n  817,\n  1,\n  0,\n  0,\n  0,\n  856,\n  820,\n  1,\n  0,\n  0,\n  0,\n  856,\n  823,\n  1,\n  0,\n  0,\n  0,\n  856,\n  826,\n  1,\n  0,\n  0,\n  0,\n  856,\n  829,\n  1,\n  0,\n  0,\n  0,\n  856,\n  832,\n  1,\n  0,\n  0,\n  0,\n  856,\n  835,\n  1,\n  0,\n  0,\n  0,\n  856,\n  838,\n  1,\n  0,\n  0,\n  0,\n  856,\n  841,\n  1,\n  0,\n  0,\n  0,\n  856,\n  844,\n  1,\n  0,\n  0,\n  0,\n  856,\n  847,\n  1,\n  0,\n  0,\n  0,\n  856,\n  850,\n  1,\n  0,\n  0,\n  0,\n  856,\n  853,\n  1,\n  0,\n  0,\n  0,\n  857,\n  204,\n  1,\n  0,\n  0,\n  0,\n  858,\n  864,\n  7,\n  1,\n  0,\n  0,\n  859,\n  860,\n  7,\n  2,\n  0,\n  0,\n  860,\n  864,\n  7,\n  0,\n  0,\n  0,\n  861,\n  862,\n  5,\n  51,\n  0,\n  0,\n  862,\n  864,\n  7,\n  3,\n  0,\n  0,\n  863,\n  858,\n  1,\n  0,\n  0,\n  0,\n  863,\n  859,\n  1,\n  0,\n  0,\n  0,\n  863,\n  861,\n  1,\n  0,\n  0,\n  0,\n  864,\n  206,\n  1,\n  0,\n  0,\n  0,\n  865,\n  866,\n  5,\n  116,\n  0,\n  0,\n  866,\n  867,\n  5,\n  114,\n  0,\n  0,\n  867,\n  868,\n  5,\n  117,\n  0,\n  0,\n  868,\n  875,\n  5,\n  101,\n  0,\n  0,\n  869,\n  870,\n  5,\n  102,\n  0,\n  0,\n  870,\n  871,\n  5,\n  97,\n  0,\n  0,\n  871,\n  872,\n  5,\n  108,\n  0,\n  0,\n  872,\n  873,\n  5,\n  115,\n  0,\n  0,\n  873,\n  875,\n  5,\n  101,\n  0,\n  0,\n  874,\n  865,\n  1,\n  0,\n  0,\n  0,\n  874,\n  869,\n  1,\n  0,\n  0,\n  0,\n  875,\n  208,\n  1,\n  0,\n  0,\n  0,\n  876,\n  883,\n  3,\n  211,\n  105,\n  0,\n  877,\n  879,\n  3,\n  211,\n  105,\n  0,\n  878,\n  877,\n  1,\n  0,\n  0,\n  0,\n  878,\n  879,\n  1,\n  0,\n  0,\n  0,\n  879,\n  880,\n  1,\n  0,\n  0,\n  0,\n  880,\n  881,\n  5,\n  46,\n  0,\n  0,\n  881,\n  883,\n  3,\n  211,\n  105,\n  0,\n  882,\n  876,\n  1,\n  0,\n  0,\n  0,\n  882,\n  878,\n  1,\n  0,\n  0,\n  0,\n  883,\n  889,\n  1,\n  0,\n  0,\n  0,\n  884,\n  886,\n  7,\n  4,\n  0,\n  0,\n  885,\n  887,\n  5,\n  45,\n  0,\n  0,\n  886,\n  885,\n  1,\n  0,\n  0,\n  0,\n  886,\n  887,\n  1,\n  0,\n  0,\n  0,\n  887,\n  888,\n  1,\n  0,\n  0,\n  0,\n  888,\n  890,\n  3,\n  211,\n  105,\n  0,\n  889,\n  884,\n  1,\n  0,\n  0,\n  0,\n  889,\n  890,\n  1,\n  0,\n  0,\n  0,\n  890,\n  210,\n  1,\n  0,\n  0,\n  0,\n  891,\n  898,\n  7,\n  0,\n  0,\n  0,\n  892,\n  894,\n  5,\n  95,\n  0,\n  0,\n  893,\n  892,\n  1,\n  0,\n  0,\n  0,\n  893,\n  894,\n  1,\n  0,\n  0,\n  0,\n  894,\n  895,\n  1,\n  0,\n  0,\n  0,\n  895,\n  897,\n  7,\n  0,\n  0,\n  0,\n  896,\n  893,\n  1,\n  0,\n  0,\n  0,\n  897,\n  900,\n  1,\n  0,\n  0,\n  0,\n  898,\n  896,\n  1,\n  0,\n  0,\n  0,\n  898,\n  899,\n  1,\n  0,\n  0,\n  0,\n  899,\n  212,\n  1,\n  0,\n  0,\n  0,\n  900,\n  898,\n  1,\n  0,\n  0,\n  0,\n  901,\n  902,\n  5,\n  48,\n  0,\n  0,\n  902,\n  903,\n  7,\n  5,\n  0,\n  0,\n  903,\n  904,\n  3,\n  215,\n  107,\n  0,\n  904,\n  214,\n  1,\n  0,\n  0,\n  0,\n  905,\n  912,\n  3,\n  221,\n  110,\n  0,\n  906,\n  908,\n  5,\n  95,\n  0,\n  0,\n  907,\n  906,\n  1,\n  0,\n  0,\n  0,\n  907,\n  908,\n  1,\n  0,\n  0,\n  0,\n  908,\n  909,\n  1,\n  0,\n  0,\n  0,\n  909,\n  911,\n  3,\n  221,\n  110,\n  0,\n  910,\n  907,\n  1,\n  0,\n  0,\n  0,\n  911,\n  914,\n  1,\n  0,\n  0,\n  0,\n  912,\n  910,\n  1,\n  0,\n  0,\n  0,\n  912,\n  913,\n  1,\n  0,\n  0,\n  0,\n  913,\n  216,\n  1,\n  0,\n  0,\n  0,\n  914,\n  912,\n  1,\n  0,\n  0,\n  0,\n  915,\n  916,\n  5,\n  119,\n  0,\n  0,\n  916,\n  917,\n  5,\n  101,\n  0,\n  0,\n  917,\n  972,\n  5,\n  105,\n  0,\n  0,\n  918,\n  919,\n  5,\n  103,\n  0,\n  0,\n  919,\n  920,\n  5,\n  119,\n  0,\n  0,\n  920,\n  921,\n  5,\n  101,\n  0,\n  0,\n  921,\n  972,\n  5,\n  105,\n  0,\n  0,\n  922,\n  923,\n  5,\n  115,\n  0,\n  0,\n  923,\n  924,\n  5,\n  122,\n  0,\n  0,\n  924,\n  925,\n  5,\n  97,\n  0,\n  0,\n  925,\n  926,\n  5,\n  98,\n  0,\n  0,\n  926,\n  972,\n  5,\n  111,\n  0,\n  0,\n  927,\n  928,\n  5,\n  102,\n  0,\n  0,\n  928,\n  929,\n  5,\n  105,\n  0,\n  0,\n  929,\n  930,\n  5,\n  110,\n  0,\n  0,\n  930,\n  931,\n  5,\n  110,\n  0,\n  0,\n  931,\n  932,\n  5,\n  101,\n  0,\n  0,\n  932,\n  972,\n  5,\n  121,\n  0,\n  0,\n  933,\n  934,\n  5,\n  101,\n  0,\n  0,\n  934,\n  935,\n  5,\n  116,\n  0,\n  0,\n  935,\n  936,\n  5,\n  104,\n  0,\n  0,\n  936,\n  937,\n  5,\n  101,\n  0,\n  0,\n  937,\n  972,\n  5,\n  114,\n  0,\n  0,\n  938,\n  939,\n  5,\n  115,\n  0,\n  0,\n  939,\n  940,\n  5,\n  101,\n  0,\n  0,\n  940,\n  941,\n  5,\n  99,\n  0,\n  0,\n  941,\n  942,\n  5,\n  111,\n  0,\n  0,\n  942,\n  943,\n  5,\n  110,\n  0,\n  0,\n  943,\n  944,\n  5,\n  100,\n  0,\n  0,\n  944,\n  972,\n  5,\n  115,\n  0,\n  0,\n  945,\n  946,\n  5,\n  109,\n  0,\n  0,\n  946,\n  947,\n  5,\n  105,\n  0,\n  0,\n  947,\n  948,\n  5,\n  110,\n  0,\n  0,\n  948,\n  949,\n  5,\n  117,\n  0,\n  0,\n  949,\n  950,\n  5,\n  116,\n  0,\n  0,\n  950,\n  951,\n  5,\n  101,\n  0,\n  0,\n  951,\n  972,\n  5,\n  115,\n  0,\n  0,\n  952,\n  953,\n  5,\n  104,\n  0,\n  0,\n  953,\n  954,\n  5,\n  111,\n  0,\n  0,\n  954,\n  955,\n  5,\n  117,\n  0,\n  0,\n  955,\n  956,\n  5,\n  114,\n  0,\n  0,\n  956,\n  972,\n  5,\n  115,\n  0,\n  0,\n  957,\n  958,\n  5,\n  100,\n  0,\n  0,\n  958,\n  959,\n  5,\n  97,\n  0,\n  0,\n  959,\n  960,\n  5,\n  121,\n  0,\n  0,\n  960,\n  972,\n  5,\n  115,\n  0,\n  0,\n  961,\n  962,\n  5,\n  119,\n  0,\n  0,\n  962,\n  963,\n  5,\n  101,\n  0,\n  0,\n  963,\n  964,\n  5,\n  101,\n  0,\n  0,\n  964,\n  965,\n  5,\n  107,\n  0,\n  0,\n  965,\n  972,\n  5,\n  115,\n  0,\n  0,\n  966,\n  967,\n  5,\n  121,\n  0,\n  0,\n  967,\n  968,\n  5,\n  101,\n  0,\n  0,\n  968,\n  969,\n  5,\n  97,\n  0,\n  0,\n  969,\n  970,\n  5,\n  114,\n  0,\n  0,\n  970,\n  972,\n  5,\n  115,\n  0,\n  0,\n  971,\n  915,\n  1,\n  0,\n  0,\n  0,\n  971,\n  918,\n  1,\n  0,\n  0,\n  0,\n  971,\n  922,\n  1,\n  0,\n  0,\n  0,\n  971,\n  927,\n  1,\n  0,\n  0,\n  0,\n  971,\n  933,\n  1,\n  0,\n  0,\n  0,\n  971,\n  938,\n  1,\n  0,\n  0,\n  0,\n  971,\n  945,\n  1,\n  0,\n  0,\n  0,\n  971,\n  952,\n  1,\n  0,\n  0,\n  0,\n  971,\n  957,\n  1,\n  0,\n  0,\n  0,\n  971,\n  961,\n  1,\n  0,\n  0,\n  0,\n  971,\n  966,\n  1,\n  0,\n  0,\n  0,\n  972,\n  218,\n  1,\n  0,\n  0,\n  0,\n  973,\n  974,\n  5,\n  104,\n  0,\n  0,\n  974,\n  975,\n  5,\n  101,\n  0,\n  0,\n  975,\n  976,\n  5,\n  120,\n  0,\n  0,\n  976,\n  987,\n  1,\n  0,\n  0,\n  0,\n  977,\n  979,\n  5,\n  34,\n  0,\n  0,\n  978,\n  980,\n  3,\n  215,\n  107,\n  0,\n  979,\n  978,\n  1,\n  0,\n  0,\n  0,\n  979,\n  980,\n  1,\n  0,\n  0,\n  0,\n  980,\n  981,\n  1,\n  0,\n  0,\n  0,\n  981,\n  988,\n  5,\n  34,\n  0,\n  0,\n  982,\n  984,\n  5,\n  39,\n  0,\n  0,\n  983,\n  985,\n  3,\n  215,\n  107,\n  0,\n  984,\n  983,\n  1,\n  0,\n  0,\n  0,\n  984,\n  985,\n  1,\n  0,\n  0,\n  0,\n  985,\n  986,\n  1,\n  0,\n  0,\n  0,\n  986,\n  988,\n  5,\n  39,\n  0,\n  0,\n  987,\n  977,\n  1,\n  0,\n  0,\n  0,\n  987,\n  982,\n  1,\n  0,\n  0,\n  0,\n  988,\n  220,\n  1,\n  0,\n  0,\n  0,\n  989,\n  990,\n  7,\n  6,\n  0,\n  0,\n  990,\n  222,\n  1,\n  0,\n  0,\n  0,\n  991,\n  992,\n  5,\n  97,\n  0,\n  0,\n  992,\n  993,\n  5,\n  98,\n  0,\n  0,\n  993,\n  994,\n  5,\n  115,\n  0,\n  0,\n  994,\n  995,\n  5,\n  116,\n  0,\n  0,\n  995,\n  996,\n  5,\n  114,\n  0,\n  0,\n  996,\n  997,\n  5,\n  97,\n  0,\n  0,\n  997,\n  998,\n  5,\n  99,\n  0,\n  0,\n  998,\n  1080,\n  5,\n  116,\n  0,\n  0,\n  999,\n  1e3,\n  5,\n  97,\n  0,\n  0,\n  1e3,\n  1001,\n  5,\n  102,\n  0,\n  0,\n  1001,\n  1002,\n  5,\n  116,\n  0,\n  0,\n  1002,\n  1003,\n  5,\n  101,\n  0,\n  0,\n  1003,\n  1080,\n  5,\n  114,\n  0,\n  0,\n  1004,\n  1005,\n  5,\n  99,\n  0,\n  0,\n  1005,\n  1006,\n  5,\n  97,\n  0,\n  0,\n  1006,\n  1007,\n  5,\n  115,\n  0,\n  0,\n  1007,\n  1080,\n  5,\n  101,\n  0,\n  0,\n  1008,\n  1009,\n  5,\n  99,\n  0,\n  0,\n  1009,\n  1010,\n  5,\n  97,\n  0,\n  0,\n  1010,\n  1011,\n  5,\n  116,\n  0,\n  0,\n  1011,\n  1012,\n  5,\n  99,\n  0,\n  0,\n  1012,\n  1080,\n  5,\n  104,\n  0,\n  0,\n  1013,\n  1014,\n  5,\n  100,\n  0,\n  0,\n  1014,\n  1015,\n  5,\n  101,\n  0,\n  0,\n  1015,\n  1016,\n  5,\n  102,\n  0,\n  0,\n  1016,\n  1017,\n  5,\n  97,\n  0,\n  0,\n  1017,\n  1018,\n  5,\n  117,\n  0,\n  0,\n  1018,\n  1019,\n  5,\n  108,\n  0,\n  0,\n  1019,\n  1080,\n  5,\n  116,\n  0,\n  0,\n  1020,\n  1021,\n  5,\n  102,\n  0,\n  0,\n  1021,\n  1022,\n  5,\n  105,\n  0,\n  0,\n  1022,\n  1023,\n  5,\n  110,\n  0,\n  0,\n  1023,\n  1024,\n  5,\n  97,\n  0,\n  0,\n  1024,\n  1080,\n  5,\n  108,\n  0,\n  0,\n  1025,\n  1026,\n  5,\n  105,\n  0,\n  0,\n  1026,\n  1080,\n  5,\n  110,\n  0,\n  0,\n  1027,\n  1028,\n  5,\n  105,\n  0,\n  0,\n  1028,\n  1029,\n  5,\n  110,\n  0,\n  0,\n  1029,\n  1030,\n  5,\n  108,\n  0,\n  0,\n  1030,\n  1031,\n  5,\n  105,\n  0,\n  0,\n  1031,\n  1032,\n  5,\n  110,\n  0,\n  0,\n  1032,\n  1080,\n  5,\n  101,\n  0,\n  0,\n  1033,\n  1034,\n  5,\n  108,\n  0,\n  0,\n  1034,\n  1035,\n  5,\n  101,\n  0,\n  0,\n  1035,\n  1080,\n  5,\n  116,\n  0,\n  0,\n  1036,\n  1037,\n  5,\n  109,\n  0,\n  0,\n  1037,\n  1038,\n  5,\n  97,\n  0,\n  0,\n  1038,\n  1039,\n  5,\n  116,\n  0,\n  0,\n  1039,\n  1040,\n  5,\n  99,\n  0,\n  0,\n  1040,\n  1080,\n  5,\n  104,\n  0,\n  0,\n  1041,\n  1042,\n  5,\n  110,\n  0,\n  0,\n  1042,\n  1043,\n  5,\n  117,\n  0,\n  0,\n  1043,\n  1044,\n  5,\n  108,\n  0,\n  0,\n  1044,\n  1080,\n  5,\n  108,\n  0,\n  0,\n  1045,\n  1046,\n  5,\n  111,\n  0,\n  0,\n  1046,\n  1080,\n  5,\n  102,\n  0,\n  0,\n  1047,\n  1048,\n  5,\n  114,\n  0,\n  0,\n  1048,\n  1049,\n  5,\n  101,\n  0,\n  0,\n  1049,\n  1050,\n  5,\n  108,\n  0,\n  0,\n  1050,\n  1051,\n  5,\n  111,\n  0,\n  0,\n  1051,\n  1052,\n  5,\n  99,\n  0,\n  0,\n  1052,\n  1053,\n  5,\n  97,\n  0,\n  0,\n  1053,\n  1054,\n  5,\n  116,\n  0,\n  0,\n  1054,\n  1055,\n  5,\n  97,\n  0,\n  0,\n  1055,\n  1056,\n  5,\n  98,\n  0,\n  0,\n  1056,\n  1057,\n  5,\n  108,\n  0,\n  0,\n  1057,\n  1080,\n  5,\n  101,\n  0,\n  0,\n  1058,\n  1059,\n  5,\n  115,\n  0,\n  0,\n  1059,\n  1060,\n  5,\n  116,\n  0,\n  0,\n  1060,\n  1061,\n  5,\n  97,\n  0,\n  0,\n  1061,\n  1062,\n  5,\n  116,\n  0,\n  0,\n  1062,\n  1063,\n  5,\n  105,\n  0,\n  0,\n  1063,\n  1080,\n  5,\n  99,\n  0,\n  0,\n  1064,\n  1065,\n  5,\n  115,\n  0,\n  0,\n  1065,\n  1066,\n  5,\n  119,\n  0,\n  0,\n  1066,\n  1067,\n  5,\n  105,\n  0,\n  0,\n  1067,\n  1068,\n  5,\n  116,\n  0,\n  0,\n  1068,\n  1069,\n  5,\n  99,\n  0,\n  0,\n  1069,\n  1080,\n  5,\n  104,\n  0,\n  0,\n  1070,\n  1071,\n  5,\n  116,\n  0,\n  0,\n  1071,\n  1072,\n  5,\n  114,\n  0,\n  0,\n  1072,\n  1080,\n  5,\n  121,\n  0,\n  0,\n  1073,\n  1074,\n  5,\n  116,\n  0,\n  0,\n  1074,\n  1075,\n  5,\n  121,\n  0,\n  0,\n  1075,\n  1076,\n  5,\n  112,\n  0,\n  0,\n  1076,\n  1077,\n  5,\n  101,\n  0,\n  0,\n  1077,\n  1078,\n  5,\n  111,\n  0,\n  0,\n  1078,\n  1080,\n  5,\n  102,\n  0,\n  0,\n  1079,\n  991,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  999,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1004,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1008,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1013,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1020,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1025,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1027,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1033,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1036,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1041,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1045,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1047,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1058,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1064,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1070,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1073,\n  1,\n  0,\n  0,\n  0,\n  1080,\n  224,\n  1,\n  0,\n  0,\n  0,\n  1081,\n  1082,\n  5,\n  97,\n  0,\n  0,\n  1082,\n  1083,\n  5,\n  110,\n  0,\n  0,\n  1083,\n  1084,\n  5,\n  111,\n  0,\n  0,\n  1084,\n  1085,\n  5,\n  110,\n  0,\n  0,\n  1085,\n  1086,\n  5,\n  121,\n  0,\n  0,\n  1086,\n  1087,\n  5,\n  109,\n  0,\n  0,\n  1087,\n  1088,\n  5,\n  111,\n  0,\n  0,\n  1088,\n  1089,\n  5,\n  117,\n  0,\n  0,\n  1089,\n  1090,\n  5,\n  115,\n  0,\n  0,\n  1090,\n  226,\n  1,\n  0,\n  0,\n  0,\n  1091,\n  1092,\n  5,\n  98,\n  0,\n  0,\n  1092,\n  1093,\n  5,\n  114,\n  0,\n  0,\n  1093,\n  1094,\n  5,\n  101,\n  0,\n  0,\n  1094,\n  1095,\n  5,\n  97,\n  0,\n  0,\n  1095,\n  1096,\n  5,\n  107,\n  0,\n  0,\n  1096,\n  228,\n  1,\n  0,\n  0,\n  0,\n  1097,\n  1098,\n  5,\n  99,\n  0,\n  0,\n  1098,\n  1099,\n  5,\n  111,\n  0,\n  0,\n  1099,\n  1100,\n  5,\n  110,\n  0,\n  0,\n  1100,\n  1101,\n  5,\n  115,\n  0,\n  0,\n  1101,\n  1102,\n  5,\n  116,\n  0,\n  0,\n  1102,\n  1103,\n  5,\n  97,\n  0,\n  0,\n  1103,\n  1104,\n  5,\n  110,\n  0,\n  0,\n  1104,\n  1105,\n  5,\n  116,\n  0,\n  0,\n  1105,\n  230,\n  1,\n  0,\n  0,\n  0,\n  1106,\n  1107,\n  5,\n  116,\n  0,\n  0,\n  1107,\n  1108,\n  5,\n  114,\n  0,\n  0,\n  1108,\n  1109,\n  5,\n  97,\n  0,\n  0,\n  1109,\n  1110,\n  5,\n  110,\n  0,\n  0,\n  1110,\n  1111,\n  5,\n  115,\n  0,\n  0,\n  1111,\n  1112,\n  5,\n  105,\n  0,\n  0,\n  1112,\n  1113,\n  5,\n  101,\n  0,\n  0,\n  1113,\n  1114,\n  5,\n  110,\n  0,\n  0,\n  1114,\n  1115,\n  5,\n  116,\n  0,\n  0,\n  1115,\n  232,\n  1,\n  0,\n  0,\n  0,\n  1116,\n  1117,\n  5,\n  105,\n  0,\n  0,\n  1117,\n  1118,\n  5,\n  109,\n  0,\n  0,\n  1118,\n  1119,\n  5,\n  109,\n  0,\n  0,\n  1119,\n  1120,\n  5,\n  117,\n  0,\n  0,\n  1120,\n  1121,\n  5,\n  116,\n  0,\n  0,\n  1121,\n  1122,\n  5,\n  97,\n  0,\n  0,\n  1122,\n  1123,\n  5,\n  98,\n  0,\n  0,\n  1123,\n  1124,\n  5,\n  108,\n  0,\n  0,\n  1124,\n  1125,\n  5,\n  101,\n  0,\n  0,\n  1125,\n  234,\n  1,\n  0,\n  0,\n  0,\n  1126,\n  1127,\n  5,\n  99,\n  0,\n  0,\n  1127,\n  1128,\n  5,\n  111,\n  0,\n  0,\n  1128,\n  1129,\n  5,\n  110,\n  0,\n  0,\n  1129,\n  1130,\n  5,\n  116,\n  0,\n  0,\n  1130,\n  1131,\n  5,\n  105,\n  0,\n  0,\n  1131,\n  1132,\n  5,\n  110,\n  0,\n  0,\n  1132,\n  1133,\n  5,\n  117,\n  0,\n  0,\n  1133,\n  1134,\n  5,\n  101,\n  0,\n  0,\n  1134,\n  236,\n  1,\n  0,\n  0,\n  0,\n  1135,\n  1136,\n  5,\n  108,\n  0,\n  0,\n  1136,\n  1137,\n  5,\n  101,\n  0,\n  0,\n  1137,\n  1138,\n  5,\n  97,\n  0,\n  0,\n  1138,\n  1139,\n  5,\n  118,\n  0,\n  0,\n  1139,\n  1140,\n  5,\n  101,\n  0,\n  0,\n  1140,\n  238,\n  1,\n  0,\n  0,\n  0,\n  1141,\n  1142,\n  5,\n  101,\n  0,\n  0,\n  1142,\n  1143,\n  5,\n  120,\n  0,\n  0,\n  1143,\n  1144,\n  5,\n  116,\n  0,\n  0,\n  1144,\n  1145,\n  5,\n  101,\n  0,\n  0,\n  1145,\n  1146,\n  5,\n  114,\n  0,\n  0,\n  1146,\n  1147,\n  5,\n  110,\n  0,\n  0,\n  1147,\n  1148,\n  5,\n  97,\n  0,\n  0,\n  1148,\n  1149,\n  5,\n  108,\n  0,\n  0,\n  1149,\n  240,\n  1,\n  0,\n  0,\n  0,\n  1150,\n  1151,\n  5,\n  105,\n  0,\n  0,\n  1151,\n  1152,\n  5,\n  110,\n  0,\n  0,\n  1152,\n  1153,\n  5,\n  100,\n  0,\n  0,\n  1153,\n  1154,\n  5,\n  101,\n  0,\n  0,\n  1154,\n  1155,\n  5,\n  120,\n  0,\n  0,\n  1155,\n  1156,\n  5,\n  101,\n  0,\n  0,\n  1156,\n  1157,\n  5,\n  100,\n  0,\n  0,\n  1157,\n  242,\n  1,\n  0,\n  0,\n  0,\n  1158,\n  1159,\n  5,\n  105,\n  0,\n  0,\n  1159,\n  1160,\n  5,\n  110,\n  0,\n  0,\n  1160,\n  1161,\n  5,\n  116,\n  0,\n  0,\n  1161,\n  1162,\n  5,\n  101,\n  0,\n  0,\n  1162,\n  1163,\n  5,\n  114,\n  0,\n  0,\n  1163,\n  1164,\n  5,\n  110,\n  0,\n  0,\n  1164,\n  1165,\n  5,\n  97,\n  0,\n  0,\n  1165,\n  1166,\n  5,\n  108,\n  0,\n  0,\n  1166,\n  244,\n  1,\n  0,\n  0,\n  0,\n  1167,\n  1168,\n  5,\n  112,\n  0,\n  0,\n  1168,\n  1169,\n  5,\n  97,\n  0,\n  0,\n  1169,\n  1170,\n  5,\n  121,\n  0,\n  0,\n  1170,\n  1171,\n  5,\n  97,\n  0,\n  0,\n  1171,\n  1172,\n  5,\n  98,\n  0,\n  0,\n  1172,\n  1173,\n  5,\n  108,\n  0,\n  0,\n  1173,\n  1174,\n  5,\n  101,\n  0,\n  0,\n  1174,\n  246,\n  1,\n  0,\n  0,\n  0,\n  1175,\n  1176,\n  5,\n  112,\n  0,\n  0,\n  1176,\n  1177,\n  5,\n  114,\n  0,\n  0,\n  1177,\n  1178,\n  5,\n  105,\n  0,\n  0,\n  1178,\n  1179,\n  5,\n  118,\n  0,\n  0,\n  1179,\n  1180,\n  5,\n  97,\n  0,\n  0,\n  1180,\n  1181,\n  5,\n  116,\n  0,\n  0,\n  1181,\n  1182,\n  5,\n  101,\n  0,\n  0,\n  1182,\n  248,\n  1,\n  0,\n  0,\n  0,\n  1183,\n  1184,\n  5,\n  112,\n  0,\n  0,\n  1184,\n  1185,\n  5,\n  117,\n  0,\n  0,\n  1185,\n  1186,\n  5,\n  98,\n  0,\n  0,\n  1186,\n  1187,\n  5,\n  108,\n  0,\n  0,\n  1187,\n  1188,\n  5,\n  105,\n  0,\n  0,\n  1188,\n  1189,\n  5,\n  99,\n  0,\n  0,\n  1189,\n  250,\n  1,\n  0,\n  0,\n  0,\n  1190,\n  1191,\n  5,\n  118,\n  0,\n  0,\n  1191,\n  1192,\n  5,\n  105,\n  0,\n  0,\n  1192,\n  1193,\n  5,\n  114,\n  0,\n  0,\n  1193,\n  1194,\n  5,\n  116,\n  0,\n  0,\n  1194,\n  1195,\n  5,\n  117,\n  0,\n  0,\n  1195,\n  1196,\n  5,\n  97,\n  0,\n  0,\n  1196,\n  1197,\n  5,\n  108,\n  0,\n  0,\n  1197,\n  252,\n  1,\n  0,\n  0,\n  0,\n  1198,\n  1199,\n  5,\n  112,\n  0,\n  0,\n  1199,\n  1200,\n  5,\n  117,\n  0,\n  0,\n  1200,\n  1201,\n  5,\n  114,\n  0,\n  0,\n  1201,\n  1202,\n  5,\n  101,\n  0,\n  0,\n  1202,\n  254,\n  1,\n  0,\n  0,\n  0,\n  1203,\n  1204,\n  5,\n  116,\n  0,\n  0,\n  1204,\n  1205,\n  5,\n  121,\n  0,\n  0,\n  1205,\n  1206,\n  5,\n  112,\n  0,\n  0,\n  1206,\n  1207,\n  5,\n  101,\n  0,\n  0,\n  1207,\n  256,\n  1,\n  0,\n  0,\n  0,\n  1208,\n  1209,\n  5,\n  118,\n  0,\n  0,\n  1209,\n  1210,\n  5,\n  105,\n  0,\n  0,\n  1210,\n  1211,\n  5,\n  101,\n  0,\n  0,\n  1211,\n  1212,\n  5,\n  119,\n  0,\n  0,\n  1212,\n  258,\n  1,\n  0,\n  0,\n  0,\n  1213,\n  1214,\n  5,\n  103,\n  0,\n  0,\n  1214,\n  1215,\n  5,\n  108,\n  0,\n  0,\n  1215,\n  1216,\n  5,\n  111,\n  0,\n  0,\n  1216,\n  1217,\n  5,\n  98,\n  0,\n  0,\n  1217,\n  1218,\n  5,\n  97,\n  0,\n  0,\n  1218,\n  1219,\n  5,\n  108,\n  0,\n  0,\n  1219,\n  260,\n  1,\n  0,\n  0,\n  0,\n  1220,\n  1221,\n  5,\n  99,\n  0,\n  0,\n  1221,\n  1222,\n  5,\n  111,\n  0,\n  0,\n  1222,\n  1223,\n  5,\n  110,\n  0,\n  0,\n  1223,\n  1224,\n  5,\n  115,\n  0,\n  0,\n  1224,\n  1225,\n  5,\n  116,\n  0,\n  0,\n  1225,\n  1226,\n  5,\n  114,\n  0,\n  0,\n  1226,\n  1227,\n  5,\n  117,\n  0,\n  0,\n  1227,\n  1228,\n  5,\n  99,\n  0,\n  0,\n  1228,\n  1229,\n  5,\n  116,\n  0,\n  0,\n  1229,\n  1230,\n  5,\n  111,\n  0,\n  0,\n  1230,\n  1231,\n  5,\n  114,\n  0,\n  0,\n  1231,\n  262,\n  1,\n  0,\n  0,\n  0,\n  1232,\n  1233,\n  5,\n  102,\n  0,\n  0,\n  1233,\n  1234,\n  5,\n  97,\n  0,\n  0,\n  1234,\n  1235,\n  5,\n  108,\n  0,\n  0,\n  1235,\n  1236,\n  5,\n  108,\n  0,\n  0,\n  1236,\n  1237,\n  5,\n  98,\n  0,\n  0,\n  1237,\n  1238,\n  5,\n  97,\n  0,\n  0,\n  1238,\n  1239,\n  5,\n  99,\n  0,\n  0,\n  1239,\n  1240,\n  5,\n  107,\n  0,\n  0,\n  1240,\n  264,\n  1,\n  0,\n  0,\n  0,\n  1241,\n  1242,\n  5,\n  114,\n  0,\n  0,\n  1242,\n  1243,\n  5,\n  101,\n  0,\n  0,\n  1243,\n  1244,\n  5,\n  99,\n  0,\n  0,\n  1244,\n  1245,\n  5,\n  101,\n  0,\n  0,\n  1245,\n  1246,\n  5,\n  105,\n  0,\n  0,\n  1246,\n  1247,\n  5,\n  118,\n  0,\n  0,\n  1247,\n  1248,\n  5,\n  101,\n  0,\n  0,\n  1248,\n  266,\n  1,\n  0,\n  0,\n  0,\n  1249,\n  1253,\n  3,\n  269,\n  134,\n  0,\n  1250,\n  1252,\n  3,\n  271,\n  135,\n  0,\n  1251,\n  1250,\n  1,\n  0,\n  0,\n  0,\n  1252,\n  1255,\n  1,\n  0,\n  0,\n  0,\n  1253,\n  1251,\n  1,\n  0,\n  0,\n  0,\n  1253,\n  1254,\n  1,\n  0,\n  0,\n  0,\n  1254,\n  268,\n  1,\n  0,\n  0,\n  0,\n  1255,\n  1253,\n  1,\n  0,\n  0,\n  0,\n  1256,\n  1257,\n  7,\n  7,\n  0,\n  0,\n  1257,\n  270,\n  1,\n  0,\n  0,\n  0,\n  1258,\n  1259,\n  7,\n  8,\n  0,\n  0,\n  1259,\n  272,\n  1,\n  0,\n  0,\n  0,\n  1260,\n  1261,\n  5,\n  117,\n  0,\n  0,\n  1261,\n  1262,\n  5,\n  110,\n  0,\n  0,\n  1262,\n  1263,\n  5,\n  105,\n  0,\n  0,\n  1263,\n  1264,\n  5,\n  99,\n  0,\n  0,\n  1264,\n  1265,\n  5,\n  111,\n  0,\n  0,\n  1265,\n  1266,\n  5,\n  100,\n  0,\n  0,\n  1266,\n  1268,\n  5,\n  101,\n  0,\n  0,\n  1267,\n  1260,\n  1,\n  0,\n  0,\n  0,\n  1267,\n  1268,\n  1,\n  0,\n  0,\n  0,\n  1268,\n  1285,\n  1,\n  0,\n  0,\n  0,\n  1269,\n  1273,\n  5,\n  34,\n  0,\n  0,\n  1270,\n  1272,\n  3,\n  275,\n  137,\n  0,\n  1271,\n  1270,\n  1,\n  0,\n  0,\n  0,\n  1272,\n  1275,\n  1,\n  0,\n  0,\n  0,\n  1273,\n  1271,\n  1,\n  0,\n  0,\n  0,\n  1273,\n  1274,\n  1,\n  0,\n  0,\n  0,\n  1274,\n  1276,\n  1,\n  0,\n  0,\n  0,\n  1275,\n  1273,\n  1,\n  0,\n  0,\n  0,\n  1276,\n  1286,\n  5,\n  34,\n  0,\n  0,\n  1277,\n  1281,\n  5,\n  39,\n  0,\n  0,\n  1278,\n  1280,\n  3,\n  277,\n  138,\n  0,\n  1279,\n  1278,\n  1,\n  0,\n  0,\n  0,\n  1280,\n  1283,\n  1,\n  0,\n  0,\n  0,\n  1281,\n  1279,\n  1,\n  0,\n  0,\n  0,\n  1281,\n  1282,\n  1,\n  0,\n  0,\n  0,\n  1282,\n  1284,\n  1,\n  0,\n  0,\n  0,\n  1283,\n  1281,\n  1,\n  0,\n  0,\n  0,\n  1284,\n  1286,\n  5,\n  39,\n  0,\n  0,\n  1285,\n  1269,\n  1,\n  0,\n  0,\n  0,\n  1285,\n  1277,\n  1,\n  0,\n  0,\n  0,\n  1286,\n  274,\n  1,\n  0,\n  0,\n  0,\n  1287,\n  1291,\n  8,\n  9,\n  0,\n  0,\n  1288,\n  1289,\n  5,\n  92,\n  0,\n  0,\n  1289,\n  1291,\n  9,\n  0,\n  0,\n  0,\n  1290,\n  1287,\n  1,\n  0,\n  0,\n  0,\n  1290,\n  1288,\n  1,\n  0,\n  0,\n  0,\n  1291,\n  276,\n  1,\n  0,\n  0,\n  0,\n  1292,\n  1296,\n  8,\n  10,\n  0,\n  0,\n  1293,\n  1294,\n  5,\n  92,\n  0,\n  0,\n  1294,\n  1296,\n  9,\n  0,\n  0,\n  0,\n  1295,\n  1292,\n  1,\n  0,\n  0,\n  0,\n  1295,\n  1293,\n  1,\n  0,\n  0,\n  0,\n  1296,\n  278,\n  1,\n  0,\n  0,\n  0,\n  1297,\n  1299,\n  7,\n  0,\n  0,\n  0,\n  1298,\n  1297,\n  1,\n  0,\n  0,\n  0,\n  1299,\n  1300,\n  1,\n  0,\n  0,\n  0,\n  1300,\n  1298,\n  1,\n  0,\n  0,\n  0,\n  1300,\n  1301,\n  1,\n  0,\n  0,\n  0,\n  1301,\n  1302,\n  1,\n  0,\n  0,\n  0,\n  1302,\n  1304,\n  5,\n  46,\n  0,\n  0,\n  1303,\n  1305,\n  7,\n  0,\n  0,\n  0,\n  1304,\n  1303,\n  1,\n  0,\n  0,\n  0,\n  1305,\n  1306,\n  1,\n  0,\n  0,\n  0,\n  1306,\n  1304,\n  1,\n  0,\n  0,\n  0,\n  1306,\n  1307,\n  1,\n  0,\n  0,\n  0,\n  1307,\n  1314,\n  1,\n  0,\n  0,\n  0,\n  1308,\n  1310,\n  5,\n  46,\n  0,\n  0,\n  1309,\n  1311,\n  7,\n  0,\n  0,\n  0,\n  1310,\n  1309,\n  1,\n  0,\n  0,\n  0,\n  1311,\n  1312,\n  1,\n  0,\n  0,\n  0,\n  1312,\n  1310,\n  1,\n  0,\n  0,\n  0,\n  1312,\n  1313,\n  1,\n  0,\n  0,\n  0,\n  1313,\n  1315,\n  1,\n  0,\n  0,\n  0,\n  1314,\n  1308,\n  1,\n  0,\n  0,\n  0,\n  1314,\n  1315,\n  1,\n  0,\n  0,\n  0,\n  1315,\n  280,\n  1,\n  0,\n  0,\n  0,\n  1316,\n  1318,\n  7,\n  11,\n  0,\n  0,\n  1317,\n  1316,\n  1,\n  0,\n  0,\n  0,\n  1318,\n  1319,\n  1,\n  0,\n  0,\n  0,\n  1319,\n  1317,\n  1,\n  0,\n  0,\n  0,\n  1319,\n  1320,\n  1,\n  0,\n  0,\n  0,\n  1320,\n  1321,\n  1,\n  0,\n  0,\n  0,\n  1321,\n  1322,\n  6,\n  140,\n  0,\n  0,\n  1322,\n  282,\n  1,\n  0,\n  0,\n  0,\n  1323,\n  1324,\n  5,\n  47,\n  0,\n  0,\n  1324,\n  1325,\n  5,\n  42,\n  0,\n  0,\n  1325,\n  1329,\n  1,\n  0,\n  0,\n  0,\n  1326,\n  1328,\n  9,\n  0,\n  0,\n  0,\n  1327,\n  1326,\n  1,\n  0,\n  0,\n  0,\n  1328,\n  1331,\n  1,\n  0,\n  0,\n  0,\n  1329,\n  1330,\n  1,\n  0,\n  0,\n  0,\n  1329,\n  1327,\n  1,\n  0,\n  0,\n  0,\n  1330,\n  1332,\n  1,\n  0,\n  0,\n  0,\n  1331,\n  1329,\n  1,\n  0,\n  0,\n  0,\n  1332,\n  1333,\n  5,\n  42,\n  0,\n  0,\n  1333,\n  1334,\n  5,\n  47,\n  0,\n  0,\n  1334,\n  1335,\n  1,\n  0,\n  0,\n  0,\n  1335,\n  1336,\n  6,\n  141,\n  1,\n  0,\n  1336,\n  284,\n  1,\n  0,\n  0,\n  0,\n  1337,\n  1338,\n  5,\n  47,\n  0,\n  0,\n  1338,\n  1339,\n  5,\n  47,\n  0,\n  0,\n  1339,\n  1343,\n  1,\n  0,\n  0,\n  0,\n  1340,\n  1342,\n  8,\n  12,\n  0,\n  0,\n  1341,\n  1340,\n  1,\n  0,\n  0,\n  0,\n  1342,\n  1345,\n  1,\n  0,\n  0,\n  0,\n  1343,\n  1341,\n  1,\n  0,\n  0,\n  0,\n  1343,\n  1344,\n  1,\n  0,\n  0,\n  0,\n  1344,\n  1346,\n  1,\n  0,\n  0,\n  0,\n  1345,\n  1343,\n  1,\n  0,\n  0,\n  0,\n  1346,\n  1347,\n  6,\n  142,\n  1,\n  0,\n  1347,\n  286,\n  1,\n  0,\n  0,\n  0,\n  38,\n  0,\n  723,\n  731,\n  740,\n  753,\n  755,\n  769,\n  771,\n  856,\n  863,\n  874,\n  878,\n  882,\n  886,\n  889,\n  893,\n  898,\n  907,\n  912,\n  971,\n  979,\n  984,\n  987,\n  1079,\n  1253,\n  1267,\n  1273,\n  1281,\n  1285,\n  1290,\n  1295,\n  1300,\n  1306,\n  1312,\n  1314,\n  1319,\n  1329,\n  1343,\n  2,\n  6,\n  0,\n  0,\n  0,\n  1,\n  0\n];\n_SolidityLexer.DecisionsToDFA = _SolidityLexer._ATN.decisionToState.map((ds, index) => new sn(ds, index));\nvar SolidityLexer = _SolidityLexer;\n\n// src/antlr/SolidityParser.ts\nvar _SolidityParser = class _SolidityParser extends En {\n  get grammarFileName() {\n    return \"Solidity.g4\";\n  }\n  get literalNames() {\n    return _SolidityParser.literalNames;\n  }\n  get symbolicNames() {\n    return _SolidityParser.symbolicNames;\n  }\n  get ruleNames() {\n    return _SolidityParser.ruleNames;\n  }\n  get serializedATN() {\n    return _SolidityParser._serializedATN;\n  }\n  createFailedPredicateException(predicate, message) {\n    return new ln(this, predicate, message);\n  }\n  constructor(input) {\n    super(input);\n    this._interp = new _n(this, _SolidityParser._ATN, _SolidityParser.DecisionsToDFA, new Cn());\n  }\n  // @RuleVersion(0)\n  sourceUnit() {\n    let localctx = new SourceUnitContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 0, _SolidityParser.RULE_sourceUnit);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 215;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & 104620034) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & 2080392501) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3498573949) !== 0 || (_la - 127 & ~31) === 0 && (1 << _la - 127 & 7) !== 0) {\n          {\n            this.state = 213;\n            this._errHandler.sync(this);\n            switch (this._interp.adaptivePredict(this._input, 0, this._ctx)) {\n              case 1:\n                {\n                  this.state = 202;\n                  this.pragmaDirective();\n                }\n                break;\n              case 2:\n                {\n                  this.state = 203;\n                  this.importDirective();\n                }\n                break;\n              case 3:\n                {\n                  this.state = 204;\n                  this.contractDefinition();\n                }\n                break;\n              case 4:\n                {\n                  this.state = 205;\n                  this.enumDefinition();\n                }\n                break;\n              case 5:\n                {\n                  this.state = 206;\n                  this.eventDefinition();\n                }\n                break;\n              case 6:\n                {\n                  this.state = 207;\n                  this.structDefinition();\n                }\n                break;\n              case 7:\n                {\n                  this.state = 208;\n                  this.functionDefinition();\n                }\n                break;\n              case 8:\n                {\n                  this.state = 209;\n                  this.fileLevelConstant();\n                }\n                break;\n              case 9:\n                {\n                  this.state = 210;\n                  this.customErrorDefinition();\n                }\n                break;\n              case 10:\n                {\n                  this.state = 211;\n                  this.typeDefinition();\n                }\n                break;\n              case 11:\n                {\n                  this.state = 212;\n                  this.usingForDeclaration();\n                }\n                break;\n            }\n          }\n          this.state = 217;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 218;\n        this.match(_SolidityParser.EOF);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  pragmaDirective() {\n    let localctx = new PragmaDirectiveContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 2, _SolidityParser.RULE_pragmaDirective);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 220;\n        this.match(_SolidityParser.T__0);\n        this.state = 221;\n        this.pragmaName();\n        this.state = 222;\n        this.pragmaValue();\n        this.state = 223;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  pragmaName() {\n    let localctx = new PragmaNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 4, _SolidityParser.RULE_pragmaName);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 225;\n        this.identifier();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  pragmaValue() {\n    let localctx = new PragmaValueContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 6, _SolidityParser.RULE_pragmaValue);\n    try {\n      this.state = 230;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 2, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 227;\n            this.match(_SolidityParser.T__2);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 228;\n            this.version();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 229;\n            this.expression(0);\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  version() {\n    let localctx = new VersionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 8, _SolidityParser.RULE_version);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 232;\n        this.versionConstraint();\n        this.state = 239;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & 4080) !== 0 || _la === 103 || _la === 131) {\n          {\n            {\n              this.state = 234;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if (_la === 4) {\n                {\n                  this.state = 233;\n                  this.match(_SolidityParser.T__3);\n                }\n              }\n              this.state = 236;\n              this.versionConstraint();\n            }\n          }\n          this.state = 241;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  versionOperator() {\n    let localctx = new VersionOperatorContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 10, _SolidityParser.RULE_versionOperator);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 242;\n        _la = this._input.LA(1);\n        if (!((_la & ~31) === 0 && (1 << _la & 4064) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  versionConstraint() {\n    let localctx = new VersionConstraintContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 12, _SolidityParser.RULE_versionConstraint);\n    let _la;\n    try {\n      this.state = 252;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 7, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 245;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & 4064) !== 0) {\n              {\n                this.state = 244;\n                this.versionOperator();\n              }\n            }\n            this.state = 247;\n            this.match(_SolidityParser.VersionLiteral);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 249;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & 4064) !== 0) {\n              {\n                this.state = 248;\n                this.versionOperator();\n              }\n            }\n            this.state = 251;\n            this.match(_SolidityParser.DecimalNumber);\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  importDeclaration() {\n    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 14, _SolidityParser.RULE_importDeclaration);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 254;\n        this.identifier();\n        this.state = 257;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 12) {\n          {\n            this.state = 255;\n            this.match(_SolidityParser.T__11);\n            this.state = 256;\n            this.identifier();\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  importDirective() {\n    let localctx = new ImportDirectiveContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 16, _SolidityParser.RULE_importDirective);\n    let _la;\n    try {\n      this.state = 295;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 13, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 259;\n            this.match(_SolidityParser.T__12);\n            this.state = 260;\n            this.importPath();\n            this.state = 263;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 12) {\n              {\n                this.state = 261;\n                this.match(_SolidityParser.T__11);\n                this.state = 262;\n                this.identifier();\n              }\n            }\n            this.state = 265;\n            this.match(_SolidityParser.T__1);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 267;\n            this.match(_SolidityParser.T__12);\n            this.state = 270;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n              case 3:\n                {\n                  this.state = 268;\n                  this.match(_SolidityParser.T__2);\n                }\n                break;\n              case 14:\n              case 25:\n              case 44:\n              case 50:\n              case 62:\n              case 95:\n              case 114:\n              case 118:\n              case 125:\n              case 126:\n              case 128:\n              case 129:\n                {\n                  this.state = 269;\n                  this.identifier();\n                }\n                break;\n              default:\n                throw new xn(this);\n            }\n            this.state = 274;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 12) {\n              {\n                this.state = 272;\n                this.match(_SolidityParser.T__11);\n                this.state = 273;\n                this.identifier();\n              }\n            }\n            this.state = 276;\n            this.match(_SolidityParser.T__13);\n            this.state = 277;\n            this.importPath();\n            this.state = 278;\n            this.match(_SolidityParser.T__1);\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 280;\n            this.match(_SolidityParser.T__12);\n            this.state = 281;\n            this.match(_SolidityParser.T__14);\n            this.state = 282;\n            this.importDeclaration();\n            this.state = 287;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 16) {\n              {\n                {\n                  this.state = 283;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 284;\n                  this.importDeclaration();\n                }\n              }\n              this.state = 289;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n            this.state = 290;\n            this.match(_SolidityParser.T__16);\n            this.state = 291;\n            this.match(_SolidityParser.T__13);\n            this.state = 292;\n            this.importPath();\n            this.state = 293;\n            this.match(_SolidityParser.T__1);\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  importPath() {\n    let localctx = new ImportPathContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 18, _SolidityParser.RULE_importPath);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 297;\n        this.match(_SolidityParser.StringLiteralFragment);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  contractDefinition() {\n    let localctx = new ContractDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 20, _SolidityParser.RULE_contractDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 300;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 18) {\n          {\n            this.state = 299;\n            this.match(_SolidityParser.T__17);\n          }\n        }\n        this.state = 302;\n        _la = this._input.LA(1);\n        if (!((_la & ~31) === 0 && (1 << _la & 3670016) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n        this.state = 303;\n        this.identifier();\n        this.state = 313;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 22) {\n          {\n            this.state = 304;\n            this.match(_SolidityParser.T__21);\n            this.state = 305;\n            this.inheritanceSpecifier();\n            this.state = 310;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 16) {\n              {\n                {\n                  this.state = 306;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 307;\n                  this.inheritanceSpecifier();\n                }\n              }\n              this.state = 312;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 315;\n        this.match(_SolidityParser.T__14);\n        this.state = 319;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & 100679680) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & 2080392503) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3498573949) !== 0 || (_la - 127 & ~31) === 0 && (1 << _la - 127 & 7) !== 0) {\n          {\n            {\n              this.state = 316;\n              this.contractPart();\n            }\n          }\n          this.state = 321;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 322;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  inheritanceSpecifier() {\n    let localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 22, _SolidityParser.RULE_inheritanceSpecifier);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 324;\n        this.userDefinedTypeName();\n        this.state = 330;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 23) {\n          {\n            this.state = 325;\n            this.match(_SolidityParser.T__22);\n            this.state = 327;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n              {\n                this.state = 326;\n                this.expressionList();\n              }\n            }\n            this.state = 329;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  contractPart() {\n    let localctx = new ContractPartContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 24, _SolidityParser.RULE_contractPart);\n    try {\n      this.state = 341;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 20, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 332;\n            this.stateVariableDeclaration();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 333;\n            this.usingForDeclaration();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 334;\n            this.structDefinition();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(localctx, 4);\n          {\n            this.state = 335;\n            this.modifierDefinition();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(localctx, 5);\n          {\n            this.state = 336;\n            this.functionDefinition();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(localctx, 6);\n          {\n            this.state = 337;\n            this.eventDefinition();\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(localctx, 7);\n          {\n            this.state = 338;\n            this.enumDefinition();\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(localctx, 8);\n          {\n            this.state = 339;\n            this.customErrorDefinition();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(localctx, 9);\n          {\n            this.state = 340;\n            this.typeDefinition();\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  stateVariableDeclaration() {\n    let localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 26, _SolidityParser.RULE_stateVariableDeclaration);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 343;\n        this.typeName(0);\n        this.state = 353;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la - 96 & ~31) === 0 && (1 << _la - 96 & 27377665) !== 0) {\n          {\n            this.state = 351;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n              case 120:\n                {\n                  this.state = 344;\n                  this.match(_SolidityParser.PublicKeyword);\n                }\n                break;\n              case 117:\n                {\n                  this.state = 345;\n                  this.match(_SolidityParser.InternalKeyword);\n                }\n                break;\n              case 119:\n                {\n                  this.state = 346;\n                  this.match(_SolidityParser.PrivateKeyword);\n                }\n                break;\n              case 110:\n                {\n                  this.state = 347;\n                  this.match(_SolidityParser.ConstantKeyword);\n                }\n                break;\n              case 111:\n                {\n                  this.state = 348;\n                  this.match(_SolidityParser.TransientKeyword);\n                }\n                break;\n              case 112:\n                {\n                  this.state = 349;\n                  this.match(_SolidityParser.ImmutableKeyword);\n                }\n                break;\n              case 96:\n                {\n                  this.state = 350;\n                  this.overrideSpecifier();\n                }\n                break;\n              default:\n                throw new xn(this);\n            }\n          }\n          this.state = 355;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 356;\n        this.identifier();\n        this.state = 359;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 11) {\n          {\n            this.state = 357;\n            this.match(_SolidityParser.T__10);\n            this.state = 358;\n            this.expression(0);\n          }\n        }\n        this.state = 361;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  fileLevelConstant() {\n    let localctx = new FileLevelConstantContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 28, _SolidityParser.RULE_fileLevelConstant);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 363;\n        this.typeName(0);\n        this.state = 364;\n        this.match(_SolidityParser.ConstantKeyword);\n        this.state = 365;\n        this.identifier();\n        this.state = 366;\n        this.match(_SolidityParser.T__10);\n        this.state = 367;\n        this.expression(0);\n        this.state = 368;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  customErrorDefinition() {\n    let localctx = new CustomErrorDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 30, _SolidityParser.RULE_customErrorDefinition);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 370;\n        this.match(_SolidityParser.T__24);\n        this.state = 371;\n        this.identifier();\n        this.state = 372;\n        this.parameterList();\n        this.state = 373;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  typeDefinition() {\n    let localctx = new TypeDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 32, _SolidityParser.RULE_typeDefinition);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 375;\n        this.match(_SolidityParser.TypeKeyword);\n        this.state = 376;\n        this.identifier();\n        this.state = 377;\n        this.match(_SolidityParser.T__21);\n        this.state = 378;\n        this.elementaryTypeName();\n        this.state = 379;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  usingForDeclaration() {\n    let localctx = new UsingForDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 34, _SolidityParser.RULE_usingForDeclaration);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 381;\n        this.match(_SolidityParser.T__25);\n        this.state = 382;\n        this.usingForObject();\n        this.state = 383;\n        this.match(_SolidityParser.T__26);\n        this.state = 386;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 3:\n            {\n              this.state = 384;\n              this.match(_SolidityParser.T__2);\n            }\n            break;\n          case 14:\n          case 25:\n          case 38:\n          case 44:\n          case 46:\n          case 50:\n          case 62:\n          case 63:\n          case 64:\n          case 65:\n          case 66:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 114:\n          case 118:\n          case 125:\n          case 126:\n          case 128:\n          case 129:\n            {\n              this.state = 385;\n              this.typeName(0);\n            }\n            break;\n          default:\n            throw new xn(this);\n        }\n        this.state = 389;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 125) {\n          {\n            this.state = 388;\n            this.match(_SolidityParser.GlobalKeyword);\n          }\n        }\n        this.state = 391;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  usingForObject() {\n    let localctx = new UsingForObjectContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 36, _SolidityParser.RULE_usingForObject);\n    let _la;\n    try {\n      this.state = 405;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case 14:\n        case 25:\n        case 44:\n        case 50:\n        case 62:\n        case 95:\n        case 114:\n        case 118:\n        case 125:\n        case 126:\n        case 128:\n        case 129:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 393;\n            this.userDefinedTypeName();\n          }\n          break;\n        case 15:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 394;\n            this.match(_SolidityParser.T__14);\n            this.state = 395;\n            this.usingForObjectDirective();\n            this.state = 400;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 16) {\n              {\n                {\n                  this.state = 396;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 397;\n                  this.usingForObjectDirective();\n                }\n              }\n              this.state = 402;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n            this.state = 403;\n            this.match(_SolidityParser.T__16);\n          }\n          break;\n        default:\n          throw new xn(this);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  usingForObjectDirective() {\n    let localctx = new UsingForObjectDirectiveContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 38, _SolidityParser.RULE_usingForObjectDirective);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 407;\n        this.userDefinedTypeName();\n        this.state = 410;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 12) {\n          {\n            this.state = 408;\n            this.match(_SolidityParser.T__11);\n            this.state = 409;\n            this.userDefinableOperators();\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  userDefinableOperators() {\n    let localctx = new UserDefinableOperatorsContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 40, _SolidityParser.RULE_userDefinableOperators);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 412;\n        _la = this._input.LA(1);\n        if (!((_la & ~31) === 0 && (1 << _la & 4026533864) !== 0 || (_la - 32 & ~31) === 0 && (1 << _la - 32 & 15) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  structDefinition() {\n    let localctx = new StructDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 42, _SolidityParser.RULE_structDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 414;\n        this.match(_SolidityParser.T__35);\n        this.state = 415;\n        this.identifier();\n        this.state = 416;\n        this.match(_SolidityParser.T__14);\n        this.state = 427;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 520098113) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138493) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 417;\n            this.variableDeclaration();\n            this.state = 418;\n            this.match(_SolidityParser.T__1);\n            this.state = 424;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 14 || _la === 25 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 520098113) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138493) !== 0 || _la === 128 || _la === 129) {\n              {\n                {\n                  this.state = 419;\n                  this.variableDeclaration();\n                  this.state = 420;\n                  this.match(_SolidityParser.T__1);\n                }\n              }\n              this.state = 426;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 429;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  modifierDefinition() {\n    let localctx = new ModifierDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 44, _SolidityParser.RULE_modifierDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 431;\n        this.match(_SolidityParser.T__36);\n        this.state = 432;\n        this.identifier();\n        this.state = 434;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 23) {\n          {\n            this.state = 433;\n            this.parameterList();\n          }\n        }\n        this.state = 440;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 96 || _la === 121) {\n          {\n            this.state = 438;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n              case 121:\n                {\n                  this.state = 436;\n                  this.match(_SolidityParser.VirtualKeyword);\n                }\n                break;\n              case 96:\n                {\n                  this.state = 437;\n                  this.overrideSpecifier();\n                }\n                break;\n              default:\n                throw new xn(this);\n            }\n          }\n          this.state = 442;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 445;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 2:\n            {\n              this.state = 443;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          case 15:\n            {\n              this.state = 444;\n              this.block();\n            }\n            break;\n          default:\n            throw new xn(this);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  modifierInvocation() {\n    let localctx = new ModifierInvocationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 46, _SolidityParser.RULE_modifierInvocation);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 447;\n        this.identifier();\n        this.state = 453;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 23) {\n          {\n            this.state = 448;\n            this.match(_SolidityParser.T__22);\n            this.state = 450;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n              {\n                this.state = 449;\n                this.expressionList();\n              }\n            }\n            this.state = 452;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  functionDefinition() {\n    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 48, _SolidityParser.RULE_functionDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 455;\n        this.functionDescriptor();\n        this.state = 456;\n        this.parameterList();\n        this.state = 457;\n        this.modifierList();\n        this.state = 459;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 39) {\n          {\n            this.state = 458;\n            this.returnParameters();\n          }\n        }\n        this.state = 463;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 2:\n            {\n              this.state = 461;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          case 15:\n            {\n              this.state = 462;\n              this.block();\n            }\n            break;\n          default:\n            throw new xn(this);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  functionDescriptor() {\n    let localctx = new FunctionDescriptorContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 50, _SolidityParser.RULE_functionDescriptor);\n    let _la;\n    try {\n      this.state = 472;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case 38:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 465;\n            this.match(_SolidityParser.T__37);\n            this.state = 467;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n              {\n                this.state = 466;\n                this.identifier();\n              }\n            }\n          }\n          break;\n        case 126:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 469;\n            this.match(_SolidityParser.ConstructorKeyword);\n          }\n          break;\n        case 127:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 470;\n            this.match(_SolidityParser.FallbackKeyword);\n          }\n          break;\n        case 128:\n          this.enterOuterAlt(localctx, 4);\n          {\n            this.state = 471;\n            this.match(_SolidityParser.ReceiveKeyword);\n          }\n          break;\n        default:\n          throw new xn(this);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  returnParameters() {\n    let localctx = new ReturnParametersContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 52, _SolidityParser.RULE_returnParameters);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 474;\n        this.match(_SolidityParser.T__38);\n        this.state = 475;\n        this.parameterList();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  modifierList() {\n    let localctx = new ModifierListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 54, _SolidityParser.RULE_modifierList);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 487;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 4023943171) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 485;\n            this._errHandler.sync(this);\n            switch (this._interp.adaptivePredict(this._input, 41, this._ctx)) {\n              case 1:\n                {\n                  this.state = 477;\n                  this.match(_SolidityParser.ExternalKeyword);\n                }\n                break;\n              case 2:\n                {\n                  this.state = 478;\n                  this.match(_SolidityParser.PublicKeyword);\n                }\n                break;\n              case 3:\n                {\n                  this.state = 479;\n                  this.match(_SolidityParser.InternalKeyword);\n                }\n                break;\n              case 4:\n                {\n                  this.state = 480;\n                  this.match(_SolidityParser.PrivateKeyword);\n                }\n                break;\n              case 5:\n                {\n                  this.state = 481;\n                  this.match(_SolidityParser.VirtualKeyword);\n                }\n                break;\n              case 6:\n                {\n                  this.state = 482;\n                  this.stateMutability();\n                }\n                break;\n              case 7:\n                {\n                  this.state = 483;\n                  this.modifierInvocation();\n                }\n                break;\n              case 8:\n                {\n                  this.state = 484;\n                  this.overrideSpecifier();\n                }\n                break;\n            }\n          }\n          this.state = 489;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  eventDefinition() {\n    let localctx = new EventDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 56, _SolidityParser.RULE_eventDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 490;\n        this.match(_SolidityParser.T__39);\n        this.state = 491;\n        this.identifier();\n        this.state = 492;\n        this.eventParameterList();\n        this.state = 494;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 108) {\n          {\n            this.state = 493;\n            this.match(_SolidityParser.AnonymousKeyword);\n          }\n        }\n        this.state = 496;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  enumValue() {\n    let localctx = new EnumValueContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 58, _SolidityParser.RULE_enumValue);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 498;\n        this.identifier();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  enumDefinition() {\n    let localctx = new EnumDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 60, _SolidityParser.RULE_enumDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 500;\n        this.match(_SolidityParser.T__40);\n        this.state = 501;\n        this.identifier();\n        this.state = 502;\n        this.match(_SolidityParser.T__14);\n        this.state = 504;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 503;\n            this.enumValue();\n          }\n        }\n        this.state = 510;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 16) {\n          {\n            {\n              this.state = 506;\n              this.match(_SolidityParser.T__15);\n              this.state = 507;\n              this.enumValue();\n            }\n          }\n          this.state = 512;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 513;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  parameterList() {\n    let localctx = new ParameterListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 62, _SolidityParser.RULE_parameterList);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 515;\n        this.match(_SolidityParser.T__22);\n        this.state = 524;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 520098113) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138493) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 516;\n            this.parameter();\n            this.state = 521;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 16) {\n              {\n                {\n                  this.state = 517;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 518;\n                  this.parameter();\n                }\n              }\n              this.state = 523;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 526;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  parameter() {\n    let localctx = new ParameterContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 64, _SolidityParser.RULE_parameter);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 528;\n        this.typeName(0);\n        this.state = 530;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 48, this._ctx)) {\n          case 1:\n            {\n              this.state = 529;\n              this.storageLocation();\n            }\n            break;\n        }\n        this.state = 533;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 532;\n            this.identifier();\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  eventParameterList() {\n    let localctx = new EventParameterListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 66, _SolidityParser.RULE_eventParameterList);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 535;\n        this.match(_SolidityParser.T__22);\n        this.state = 544;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 520098113) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138493) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 536;\n            this.eventParameter();\n            this.state = 541;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 16) {\n              {\n                {\n                  this.state = 537;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 538;\n                  this.eventParameter();\n                }\n              }\n              this.state = 543;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 546;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  eventParameter() {\n    let localctx = new EventParameterContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 68, _SolidityParser.RULE_eventParameter);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 548;\n        this.typeName(0);\n        this.state = 550;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 116) {\n          {\n            this.state = 549;\n            this.match(_SolidityParser.IndexedKeyword);\n          }\n        }\n        this.state = 553;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 552;\n            this.identifier();\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  functionTypeParameterList() {\n    let localctx = new FunctionTypeParameterListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 70, _SolidityParser.RULE_functionTypeParameterList);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 555;\n        this.match(_SolidityParser.T__22);\n        this.state = 564;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 520098113) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138493) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 556;\n            this.functionTypeParameter();\n            this.state = 561;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 16) {\n              {\n                {\n                  this.state = 557;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 558;\n                  this.functionTypeParameter();\n                }\n              }\n              this.state = 563;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 566;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  functionTypeParameter() {\n    let localctx = new FunctionTypeParameterContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 72, _SolidityParser.RULE_functionTypeParameter);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 568;\n        this.typeName(0);\n        this.state = 570;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la - 48 & ~31) === 0 && (1 << _la - 48 & 7) !== 0) {\n          {\n            this.state = 569;\n            this.storageLocation();\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  variableDeclaration() {\n    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 74, _SolidityParser.RULE_variableDeclaration);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 572;\n        this.typeName(0);\n        this.state = 574;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 57, this._ctx)) {\n          case 1:\n            {\n              this.state = 573;\n              this.storageLocation();\n            }\n            break;\n        }\n        this.state = 576;\n        this.identifier();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  typeName(_p) {\n    if (_p === void 0) {\n      _p = 0;\n    }\n    let _parentctx = this._ctx;\n    let _parentState = this.state;\n    let localctx = new TypeNameContext(this, this._ctx, _parentState);\n    let _prevctx = localctx;\n    let _startState = 76;\n    this.enterRecursionRule(localctx, 76, _SolidityParser.RULE_typeName, _p);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 585;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 58, this._ctx)) {\n          case 1:\n            {\n              this.state = 579;\n              this.elementaryTypeName();\n            }\n            break;\n          case 2:\n            {\n              this.state = 580;\n              this.userDefinedTypeName();\n            }\n            break;\n          case 3:\n            {\n              this.state = 581;\n              this.mapping();\n            }\n            break;\n          case 4:\n            {\n              this.state = 582;\n              this.functionTypeName();\n            }\n            break;\n          case 5:\n            {\n              this.state = 583;\n              this.match(_SolidityParser.T__43);\n              this.state = 584;\n              this.match(_SolidityParser.PayableKeyword);\n            }\n            break;\n        }\n        this._ctx.stop = this._input.LT(-1);\n        this.state = 595;\n        this._errHandler.sync(this);\n        _alt = this._interp.adaptivePredict(this._input, 60, this._ctx);\n        while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            if (this._parseListeners != null) {\n              this.triggerExitRuleEvent();\n            }\n            _prevctx = localctx;\n            {\n              {\n                localctx = new TypeNameContext(this, _parentctx, _parentState);\n                this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_typeName);\n                this.state = 587;\n                if (!this.precpred(this._ctx, 3)) {\n                  throw this.createFailedPredicateException(\"this.precpred(this._ctx, 3)\");\n                }\n                this.state = 588;\n                this.match(_SolidityParser.T__41);\n                this.state = 590;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n                  {\n                    this.state = 589;\n                    this.expression(0);\n                  }\n                }\n                this.state = 592;\n                this.match(_SolidityParser.T__42);\n              }\n            }\n          }\n          this.state = 597;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 60, this._ctx);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.unrollRecursionContexts(_parentctx);\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  userDefinedTypeName() {\n    let localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 78, _SolidityParser.RULE_userDefinedTypeName);\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 598;\n        this.identifier();\n        this.state = 603;\n        this._errHandler.sync(this);\n        _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);\n        while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              {\n                this.state = 599;\n                this.match(_SolidityParser.T__44);\n                this.state = 600;\n                this.identifier();\n              }\n            }\n          }\n          this.state = 605;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 61, this._ctx);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  mappingKey() {\n    let localctx = new MappingKeyContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 80, _SolidityParser.RULE_mappingKey);\n    try {\n      this.state = 608;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 62, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 606;\n            this.elementaryTypeName();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 607;\n            this.userDefinedTypeName();\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  mapping() {\n    let localctx = new MappingContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 82, _SolidityParser.RULE_mapping);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 610;\n        this.match(_SolidityParser.T__45);\n        this.state = 611;\n        this.match(_SolidityParser.T__22);\n        this.state = 612;\n        this.mappingKey();\n        this.state = 614;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 613;\n            this.mappingKeyName();\n          }\n        }\n        this.state = 616;\n        this.match(_SolidityParser.T__46);\n        this.state = 617;\n        this.typeName(0);\n        this.state = 619;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 618;\n            this.mappingValueName();\n          }\n        }\n        this.state = 621;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  mappingKeyName() {\n    let localctx = new MappingKeyNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 84, _SolidityParser.RULE_mappingKeyName);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 623;\n        this.identifier();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  mappingValueName() {\n    let localctx = new MappingValueNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 86, _SolidityParser.RULE_mappingValueName);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 625;\n        this.identifier();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  functionTypeName() {\n    let localctx = new FunctionTypeNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 88, _SolidityParser.RULE_functionTypeName);\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 627;\n        this.match(_SolidityParser.T__37);\n        this.state = 628;\n        this.functionTypeParameterList();\n        this.state = 634;\n        this._errHandler.sync(this);\n        _alt = this._interp.adaptivePredict(this._input, 66, this._ctx);\n        while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              this.state = 632;\n              this._errHandler.sync(this);\n              switch (this._input.LA(1)) {\n                case 117:\n                  {\n                    this.state = 629;\n                    this.match(_SolidityParser.InternalKeyword);\n                  }\n                  break;\n                case 115:\n                  {\n                    this.state = 630;\n                    this.match(_SolidityParser.ExternalKeyword);\n                  }\n                  break;\n                case 110:\n                case 118:\n                case 122:\n                case 124:\n                  {\n                    this.state = 631;\n                    this.stateMutability();\n                  }\n                  break;\n                default:\n                  throw new xn(this);\n              }\n            }\n          }\n          this.state = 636;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 66, this._ctx);\n        }\n        this.state = 639;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 67, this._ctx)) {\n          case 1:\n            {\n              this.state = 637;\n              this.match(_SolidityParser.T__38);\n              this.state = 638;\n              this.functionTypeParameterList();\n            }\n            break;\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  storageLocation() {\n    let localctx = new StorageLocationContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 90, _SolidityParser.RULE_storageLocation);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 641;\n        _la = this._input.LA(1);\n        if (!((_la - 48 & ~31) === 0 && (1 << _la - 48 & 7) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  stateMutability() {\n    let localctx = new StateMutabilityContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 92, _SolidityParser.RULE_stateMutability);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 643;\n        _la = this._input.LA(1);\n        if (!((_la - 110 & ~31) === 0 && (1 << _la - 110 & 20737) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  block() {\n    let localctx = new BlockContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 94, _SolidityParser.RULE_block);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 645;\n        this.match(_SolidityParser.T__14);\n        this.state = 649;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & 3397435456) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4294881617) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248548427) !== 0) {\n          {\n            {\n              this.state = 646;\n              this.statement();\n            }\n          }\n          this.state = 651;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 652;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  statement() {\n    let localctx = new StatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 96, _SolidityParser.RULE_statement);\n    try {\n      this.state = 669;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 69, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 654;\n            this.ifStatement();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 655;\n            this.tryStatement();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 656;\n            this.whileStatement();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(localctx, 4);\n          {\n            this.state = 657;\n            this.forStatement();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(localctx, 5);\n          {\n            this.state = 658;\n            this.block();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(localctx, 6);\n          {\n            this.state = 659;\n            this.inlineAssemblyStatement();\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(localctx, 7);\n          {\n            this.state = 660;\n            this.doWhileStatement();\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(localctx, 8);\n          {\n            this.state = 661;\n            this.continueStatement();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(localctx, 9);\n          {\n            this.state = 662;\n            this.breakStatement();\n          }\n          break;\n        case 10:\n          this.enterOuterAlt(localctx, 10);\n          {\n            this.state = 663;\n            this.returnStatement();\n          }\n          break;\n        case 11:\n          this.enterOuterAlt(localctx, 11);\n          {\n            this.state = 664;\n            this.throwStatement();\n          }\n          break;\n        case 12:\n          this.enterOuterAlt(localctx, 12);\n          {\n            this.state = 665;\n            this.emitStatement();\n          }\n          break;\n        case 13:\n          this.enterOuterAlt(localctx, 13);\n          {\n            this.state = 666;\n            this.simpleStatement();\n          }\n          break;\n        case 14:\n          this.enterOuterAlt(localctx, 14);\n          {\n            this.state = 667;\n            this.uncheckedStatement();\n          }\n          break;\n        case 15:\n          this.enterOuterAlt(localctx, 15);\n          {\n            this.state = 668;\n            this.revertStatement();\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  expressionStatement() {\n    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 98, _SolidityParser.RULE_expressionStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 671;\n        this.expression(0);\n        this.state = 672;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  ifStatement() {\n    let localctx = new IfStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 100, _SolidityParser.RULE_ifStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 674;\n        this.match(_SolidityParser.T__50);\n        this.state = 675;\n        this.match(_SolidityParser.T__22);\n        this.state = 676;\n        this.expression(0);\n        this.state = 677;\n        this.match(_SolidityParser.T__23);\n        this.state = 678;\n        this.statement();\n        this.state = 681;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 70, this._ctx)) {\n          case 1:\n            {\n              this.state = 679;\n              this.match(_SolidityParser.T__51);\n              this.state = 680;\n              this.statement();\n            }\n            break;\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  tryStatement() {\n    let localctx = new TryStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 102, _SolidityParser.RULE_tryStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 683;\n        this.match(_SolidityParser.T__52);\n        this.state = 684;\n        this.expression(0);\n        this.state = 686;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 39) {\n          {\n            this.state = 685;\n            this.returnParameters();\n          }\n        }\n        this.state = 688;\n        this.block();\n        this.state = 690;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        do {\n          {\n            {\n              this.state = 689;\n              this.catchClause();\n            }\n          }\n          this.state = 692;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        } while (_la === 54);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  catchClause() {\n    let localctx = new CatchClauseContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 104, _SolidityParser.RULE_catchClause);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 694;\n        this.match(_SolidityParser.T__53);\n        this.state = 699;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & 41959424) !== 0 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 696;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n              {\n                this.state = 695;\n                this.identifier();\n              }\n            }\n            this.state = 698;\n            this.parameterList();\n          }\n        }\n        this.state = 701;\n        this.block();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  whileStatement() {\n    let localctx = new WhileStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 106, _SolidityParser.RULE_whileStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 703;\n        this.match(_SolidityParser.T__54);\n        this.state = 704;\n        this.match(_SolidityParser.T__22);\n        this.state = 705;\n        this.expression(0);\n        this.state = 706;\n        this.match(_SolidityParser.T__23);\n        this.state = 707;\n        this.statement();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  simpleStatement() {\n    let localctx = new SimpleStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 108, _SolidityParser.RULE_simpleStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 711;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 75, this._ctx)) {\n          case 1:\n            {\n              this.state = 709;\n              this.variableDeclarationStatement();\n            }\n            break;\n          case 2:\n            {\n              this.state = 710;\n              this.expressionStatement();\n            }\n            break;\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  uncheckedStatement() {\n    let localctx = new UncheckedStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 110, _SolidityParser.RULE_uncheckedStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 713;\n        this.match(_SolidityParser.T__55);\n        this.state = 714;\n        this.block();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  forStatement() {\n    let localctx = new ForStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 112, _SolidityParser.RULE_forStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 716;\n        this.match(_SolidityParser.T__26);\n        this.state = 717;\n        this.match(_SolidityParser.T__22);\n        this.state = 720;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 6:\n          case 14:\n          case 23:\n          case 25:\n          case 30:\n          case 31:\n          case 38:\n          case 42:\n          case 44:\n          case 46:\n          case 50:\n          case 62:\n          case 63:\n          case 64:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 71:\n          case 72:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 106:\n          case 114:\n          case 118:\n          case 123:\n          case 125:\n          case 126:\n          case 128:\n          case 129:\n          case 130:\n            {\n              this.state = 718;\n              this.simpleStatement();\n            }\n            break;\n          case 2:\n            {\n              this.state = 719;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          default:\n            throw new xn(this);\n        }\n        this.state = 724;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 6:\n          case 14:\n          case 23:\n          case 25:\n          case 30:\n          case 31:\n          case 38:\n          case 42:\n          case 44:\n          case 46:\n          case 50:\n          case 62:\n          case 63:\n          case 64:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 71:\n          case 72:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 106:\n          case 114:\n          case 118:\n          case 123:\n          case 125:\n          case 126:\n          case 128:\n          case 129:\n          case 130:\n            {\n              this.state = 722;\n              this.expressionStatement();\n            }\n            break;\n          case 2:\n            {\n              this.state = 723;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          default:\n            throw new xn(this);\n        }\n        this.state = 727;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n          {\n            this.state = 726;\n            this.expression(0);\n          }\n        }\n        this.state = 729;\n        this.match(_SolidityParser.T__23);\n        this.state = 730;\n        this.statement();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  inlineAssemblyStatement() {\n    let localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 114, _SolidityParser.RULE_inlineAssemblyStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 732;\n        this.match(_SolidityParser.T__56);\n        this.state = 734;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 130) {\n          {\n            this.state = 733;\n            this.match(_SolidityParser.StringLiteralFragment);\n          }\n        }\n        this.state = 740;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 23) {\n          {\n            this.state = 736;\n            this.match(_SolidityParser.T__22);\n            this.state = 737;\n            this.inlineAssemblyStatementFlag();\n            this.state = 738;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n        this.state = 742;\n        this.assemblyBlock();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  inlineAssemblyStatementFlag() {\n    let localctx = new InlineAssemblyStatementFlagContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 116, _SolidityParser.RULE_inlineAssemblyStatementFlag);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 744;\n        this.stringLiteral();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  doWhileStatement() {\n    let localctx = new DoWhileStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 118, _SolidityParser.RULE_doWhileStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 746;\n        this.match(_SolidityParser.T__57);\n        this.state = 747;\n        this.statement();\n        this.state = 748;\n        this.match(_SolidityParser.T__54);\n        this.state = 749;\n        this.match(_SolidityParser.T__22);\n        this.state = 750;\n        this.expression(0);\n        this.state = 751;\n        this.match(_SolidityParser.T__23);\n        this.state = 752;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  continueStatement() {\n    let localctx = new ContinueStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 120, _SolidityParser.RULE_continueStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 754;\n        this.match(_SolidityParser.ContinueKeyword);\n        this.state = 755;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  breakStatement() {\n    let localctx = new BreakStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 122, _SolidityParser.RULE_breakStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 757;\n        this.match(_SolidityParser.BreakKeyword);\n        this.state = 758;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  returnStatement() {\n    let localctx = new ReturnStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 124, _SolidityParser.RULE_returnStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 760;\n        this.match(_SolidityParser.T__58);\n        this.state = 762;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n          {\n            this.state = 761;\n            this.expression(0);\n          }\n        }\n        this.state = 764;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  throwStatement() {\n    let localctx = new ThrowStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 126, _SolidityParser.RULE_throwStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 766;\n        this.match(_SolidityParser.T__59);\n        this.state = 767;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  emitStatement() {\n    let localctx = new EmitStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 128, _SolidityParser.RULE_emitStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 769;\n        this.match(_SolidityParser.T__60);\n        this.state = 770;\n        this.functionCall();\n        this.state = 771;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  revertStatement() {\n    let localctx = new RevertStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 130, _SolidityParser.RULE_revertStatement);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 773;\n        this.match(_SolidityParser.T__61);\n        this.state = 774;\n        this.functionCall();\n        this.state = 775;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  variableDeclarationStatement() {\n    let localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 132, _SolidityParser.RULE_variableDeclarationStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 784;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 82, this._ctx)) {\n          case 1:\n            {\n              this.state = 777;\n              this.match(_SolidityParser.T__62);\n              this.state = 778;\n              this.identifierList();\n            }\n            break;\n          case 2:\n            {\n              this.state = 779;\n              this.variableDeclaration();\n            }\n            break;\n          case 3:\n            {\n              this.state = 780;\n              this.match(_SolidityParser.T__22);\n              this.state = 781;\n              this.variableDeclarationList();\n              this.state = 782;\n              this.match(_SolidityParser.T__23);\n            }\n            break;\n        }\n        this.state = 788;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 11) {\n          {\n            this.state = 786;\n            this.match(_SolidityParser.T__10);\n            this.state = 787;\n            this.expression(0);\n          }\n        }\n        this.state = 790;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  variableDeclarationList() {\n    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 134, _SolidityParser.RULE_variableDeclarationList);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 793;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 520098113) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138493) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 792;\n            this.variableDeclaration();\n          }\n        }\n        this.state = 801;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 16) {\n          {\n            {\n              this.state = 795;\n              this.match(_SolidityParser.T__15);\n              this.state = 797;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if (_la === 14 || _la === 25 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 520098113) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138493) !== 0 || _la === 128 || _la === 129) {\n                {\n                  this.state = 796;\n                  this.variableDeclaration();\n                }\n              }\n            }\n          }\n          this.state = 803;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  identifierList() {\n    let localctx = new IdentifierListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 136, _SolidityParser.RULE_identifierList);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 804;\n        this.match(_SolidityParser.T__22);\n        this.state = 811;\n        this._errHandler.sync(this);\n        _alt = this._interp.adaptivePredict(this._input, 88, this._ctx);\n        while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              {\n                this.state = 806;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n                  {\n                    this.state = 805;\n                    this.identifier();\n                  }\n                }\n                this.state = 808;\n                this.match(_SolidityParser.T__15);\n              }\n            }\n          }\n          this.state = 813;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 88, this._ctx);\n        }\n        this.state = 815;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 814;\n            this.identifier();\n          }\n        }\n        this.state = 817;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  elementaryTypeName() {\n    let localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 138, _SolidityParser.RULE_elementaryTypeName);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 819;\n        _la = this._input.LA(1);\n        if (!((_la - 44 & ~31) === 0 && (1 << _la - 44 & 7864321) !== 0 || (_la - 97 & ~31) === 0 && (1 << _la - 97 & 31) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  expression(_p) {\n    if (_p === void 0) {\n      _p = 0;\n    }\n    let _parentctx = this._ctx;\n    let _parentState = this.state;\n    let localctx = new ExpressionContext(this, this._ctx, _parentState);\n    let _prevctx = localctx;\n    let _startState = 140;\n    this.enterRecursionRule(localctx, 140, _SolidityParser.RULE_expression, _p);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 839;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 90, this._ctx)) {\n          case 1:\n            {\n              this.state = 822;\n              this.match(_SolidityParser.T__68);\n              this.state = 823;\n              this.typeName(0);\n            }\n            break;\n          case 2:\n            {\n              this.state = 824;\n              this.match(_SolidityParser.T__22);\n              this.state = 825;\n              this.expression(0);\n              this.state = 826;\n              this.match(_SolidityParser.T__23);\n            }\n            break;\n          case 3:\n            {\n              this.state = 828;\n              _la = this._input.LA(1);\n              if (!(_la === 67 || _la === 68)) {\n                this._errHandler.recoverInline(this);\n              } else {\n                this._errHandler.reportMatch(this);\n                this.consume();\n              }\n              this.state = 829;\n              this.expression(19);\n            }\n            break;\n          case 4:\n            {\n              this.state = 830;\n              _la = this._input.LA(1);\n              if (!(_la === 30 || _la === 31)) {\n                this._errHandler.recoverInline(this);\n              } else {\n                this._errHandler.reportMatch(this);\n                this.consume();\n              }\n              this.state = 831;\n              this.expression(18);\n            }\n            break;\n          case 5:\n            {\n              this.state = 832;\n              this.match(_SolidityParser.T__70);\n              this.state = 833;\n              this.expression(17);\n            }\n            break;\n          case 6:\n            {\n              this.state = 834;\n              this.match(_SolidityParser.T__71);\n              this.state = 835;\n              this.expression(16);\n            }\n            break;\n          case 7:\n            {\n              this.state = 836;\n              this.match(_SolidityParser.T__5);\n              this.state = 837;\n              this.expression(15);\n            }\n            break;\n          case 8:\n            {\n              this.state = 838;\n              this.primaryExpression();\n            }\n            break;\n        }\n        this._ctx.stop = this._input.LT(-1);\n        this.state = 915;\n        this._errHandler.sync(this);\n        _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);\n        while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            if (this._parseListeners != null) {\n              this.triggerExitRuleEvent();\n            }\n            _prevctx = localctx;\n            {\n              this.state = 913;\n              this._errHandler.sync(this);\n              switch (this._interp.adaptivePredict(this._input, 93, this._ctx)) {\n                case 1:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 841;\n                    if (!this.precpred(this._ctx, 14)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 14)\");\n                    }\n                    this.state = 842;\n                    this.match(_SolidityParser.T__72);\n                    this.state = 843;\n                    this.expression(14);\n                  }\n                  break;\n                case 2:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 844;\n                    if (!this.precpred(this._ctx, 13)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 13)\");\n                    }\n                    this.state = 845;\n                    _la = this._input.LA(1);\n                    if (!((_la - 3 & ~31) === 0 && (1 << _la - 3 & 1610612737) !== 0)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 846;\n                    this.expression(14);\n                  }\n                  break;\n                case 3:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 847;\n                    if (!this.precpred(this._ctx, 12)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 12)\");\n                    }\n                    this.state = 848;\n                    _la = this._input.LA(1);\n                    if (!(_la === 30 || _la === 31)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 849;\n                    this.expression(13);\n                  }\n                  break;\n                case 4:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 850;\n                    if (!this.precpred(this._ctx, 11)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 11)\");\n                    }\n                    this.state = 851;\n                    _la = this._input.LA(1);\n                    if (!(_la === 74 || _la === 75)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 852;\n                    this.expression(12);\n                  }\n                  break;\n                case 5:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 853;\n                    if (!this.precpred(this._ctx, 10)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 10)\");\n                    }\n                    this.state = 854;\n                    this.match(_SolidityParser.T__28);\n                    this.state = 855;\n                    this.expression(11);\n                  }\n                  break;\n                case 6:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 856;\n                    if (!this.precpred(this._ctx, 9)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 9)\");\n                    }\n                    this.state = 857;\n                    this.match(_SolidityParser.T__4);\n                    this.state = 858;\n                    this.expression(10);\n                  }\n                  break;\n                case 7:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 859;\n                    if (!this.precpred(this._ctx, 8)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 8)\");\n                    }\n                    this.state = 860;\n                    this.match(_SolidityParser.T__27);\n                    this.state = 861;\n                    this.expression(9);\n                  }\n                  break;\n                case 8:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 862;\n                    if (!this.precpred(this._ctx, 7)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 7)\");\n                    }\n                    this.state = 863;\n                    _la = this._input.LA(1);\n                    if (!((_la & ~31) === 0 && (1 << _la & 1920) !== 0)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 864;\n                    this.expression(8);\n                  }\n                  break;\n                case 9:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 865;\n                    if (!this.precpred(this._ctx, 6)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 6)\");\n                    }\n                    this.state = 866;\n                    _la = this._input.LA(1);\n                    if (!(_la === 34 || _la === 35)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 867;\n                    this.expression(7);\n                  }\n                  break;\n                case 10:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 868;\n                    if (!this.precpred(this._ctx, 5)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 5)\");\n                    }\n                    this.state = 869;\n                    this.match(_SolidityParser.T__75);\n                    this.state = 870;\n                    this.expression(6);\n                  }\n                  break;\n                case 11:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 871;\n                    if (!this.precpred(this._ctx, 4)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 4)\");\n                    }\n                    this.state = 872;\n                    this.match(_SolidityParser.T__3);\n                    this.state = 873;\n                    this.expression(5);\n                  }\n                  break;\n                case 12:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 874;\n                    if (!this.precpred(this._ctx, 3)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 3)\");\n                    }\n                    this.state = 875;\n                    this.match(_SolidityParser.T__76);\n                    this.state = 876;\n                    this.expression(0);\n                    this.state = 877;\n                    this.match(_SolidityParser.T__69);\n                    this.state = 878;\n                    this.expression(3);\n                  }\n                  break;\n                case 13:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 880;\n                    if (!this.precpred(this._ctx, 2)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 2)\");\n                    }\n                    this.state = 881;\n                    _la = this._input.LA(1);\n                    if (!(_la === 11 || (_la - 78 & ~31) === 0 && (1 << _la - 78 & 1023) !== 0)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 882;\n                    this.expression(3);\n                  }\n                  break;\n                case 14:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 883;\n                    if (!this.precpred(this._ctx, 27)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 27)\");\n                    }\n                    this.state = 884;\n                    _la = this._input.LA(1);\n                    if (!(_la === 67 || _la === 68)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                  }\n                  break;\n                case 15:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 885;\n                    if (!this.precpred(this._ctx, 25)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 25)\");\n                    }\n                    this.state = 886;\n                    this.match(_SolidityParser.T__41);\n                    this.state = 887;\n                    this.expression(0);\n                    this.state = 888;\n                    this.match(_SolidityParser.T__42);\n                  }\n                  break;\n                case 16:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 890;\n                    if (!this.precpred(this._ctx, 24)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 24)\");\n                    }\n                    this.state = 891;\n                    this.match(_SolidityParser.T__41);\n                    this.state = 893;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n                      {\n                        this.state = 892;\n                        this.expression(0);\n                      }\n                    }\n                    this.state = 895;\n                    this.match(_SolidityParser.T__69);\n                    this.state = 897;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n                      {\n                        this.state = 896;\n                        this.expression(0);\n                      }\n                    }\n                    this.state = 899;\n                    this.match(_SolidityParser.T__42);\n                  }\n                  break;\n                case 17:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 900;\n                    if (!this.precpred(this._ctx, 23)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 23)\");\n                    }\n                    this.state = 901;\n                    this.match(_SolidityParser.T__44);\n                    this.state = 902;\n                    this.identifier();\n                  }\n                  break;\n                case 18:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 903;\n                    if (!this.precpred(this._ctx, 22)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 22)\");\n                    }\n                    this.state = 904;\n                    this.match(_SolidityParser.T__14);\n                    this.state = 905;\n                    this.nameValueList();\n                    this.state = 906;\n                    this.match(_SolidityParser.T__16);\n                  }\n                  break;\n                case 19:\n                  {\n                    localctx = new ExpressionContext(this, _parentctx, _parentState);\n                    this.pushNewRecursionContext(localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 908;\n                    if (!this.precpred(this._ctx, 21)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 21)\");\n                    }\n                    this.state = 909;\n                    this.match(_SolidityParser.T__22);\n                    this.state = 910;\n                    this.functionCallArguments();\n                    this.state = 911;\n                    this.match(_SolidityParser.T__23);\n                  }\n                  break;\n              }\n            }\n          }\n          this.state = 917;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.unrollRecursionContexts(_parentctx);\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  primaryExpression() {\n    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 142, _SolidityParser.RULE_primaryExpression);\n    try {\n      this.state = 927;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 95, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 918;\n            this.match(_SolidityParser.BooleanLiteral);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 919;\n            this.numberLiteral();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 920;\n            this.hexLiteral();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(localctx, 4);\n          {\n            this.state = 921;\n            this.stringLiteral();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(localctx, 5);\n          {\n            this.state = 922;\n            this.identifier();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(localctx, 6);\n          {\n            this.state = 923;\n            this.match(_SolidityParser.TypeKeyword);\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(localctx, 7);\n          {\n            this.state = 924;\n            this.match(_SolidityParser.PayableKeyword);\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(localctx, 8);\n          {\n            this.state = 925;\n            this.tupleExpression();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(localctx, 9);\n          {\n            this.state = 926;\n            this.typeName(0);\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  expressionList() {\n    let localctx = new ExpressionListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 144, _SolidityParser.RULE_expressionList);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 929;\n        this.expression(0);\n        this.state = 934;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 16) {\n          {\n            {\n              this.state = 930;\n              this.match(_SolidityParser.T__15);\n              this.state = 931;\n              this.expression(0);\n            }\n          }\n          this.state = 936;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  nameValueList() {\n    let localctx = new NameValueListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 146, _SolidityParser.RULE_nameValueList);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 937;\n        this.nameValue();\n        this.state = 942;\n        this._errHandler.sync(this);\n        _alt = this._interp.adaptivePredict(this._input, 97, this._ctx);\n        while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              {\n                this.state = 938;\n                this.match(_SolidityParser.T__15);\n                this.state = 939;\n                this.nameValue();\n              }\n            }\n          }\n          this.state = 944;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 97, this._ctx);\n        }\n        this.state = 946;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 16) {\n          {\n            this.state = 945;\n            this.match(_SolidityParser.T__15);\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  nameValue() {\n    let localctx = new NameValueContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 148, _SolidityParser.RULE_nameValue);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 948;\n        this.identifier();\n        this.state = 949;\n        this.match(_SolidityParser.T__69);\n        this.state = 950;\n        this.expression(0);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  functionCallArguments() {\n    let localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 150, _SolidityParser.RULE_functionCallArguments);\n    let _la;\n    try {\n      this.state = 960;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case 15:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 952;\n            this.match(_SolidityParser.T__14);\n            this.state = 954;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n              {\n                this.state = 953;\n                this.nameValueList();\n              }\n            }\n            this.state = 956;\n            this.match(_SolidityParser.T__16);\n          }\n          break;\n        case 6:\n        case 14:\n        case 23:\n        case 24:\n        case 25:\n        case 30:\n        case 31:\n        case 38:\n        case 42:\n        case 44:\n        case 46:\n        case 50:\n        case 62:\n        case 63:\n        case 64:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 71:\n        case 72:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 106:\n        case 114:\n        case 118:\n        case 123:\n        case 125:\n        case 126:\n        case 128:\n        case 129:\n        case 130:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 958;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n              {\n                this.state = 957;\n                this.expressionList();\n              }\n            }\n          }\n          break;\n        default:\n          throw new xn(this);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  functionCall() {\n    let localctx = new FunctionCallContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 152, _SolidityParser.RULE_functionCall);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 962;\n        this.expression(0);\n        this.state = 963;\n        this.match(_SolidityParser.T__22);\n        this.state = 964;\n        this.functionCallArguments();\n        this.state = 965;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyBlock() {\n    let localctx = new AssemblyBlockContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 154, _SolidityParser.RULE_assemblyBlock);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 967;\n        this.match(_SolidityParser.T__14);\n        this.state = 971;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & 176209920) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 287322177) !== 0 || (_la - 88 & ~31) === 0 && (1 << _la - 88 & 1176879241) !== 0 || (_la - 125 & ~31) === 0 && (1 << _la - 125 & 59) !== 0) {\n          {\n            {\n              this.state = 968;\n              this.assemblyItem();\n            }\n          }\n          this.state = 973;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 974;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyItem() {\n    let localctx = new AssemblyItemContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 156, _SolidityParser.RULE_assemblyItem);\n    try {\n      this.state = 993;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 103, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 976;\n            this.identifier();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 977;\n            this.assemblyBlock();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 978;\n            this.assemblyExpression();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(localctx, 4);\n          {\n            this.state = 979;\n            this.assemblyLocalDefinition();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(localctx, 5);\n          {\n            this.state = 980;\n            this.assemblyAssignment();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(localctx, 6);\n          {\n            this.state = 981;\n            this.assemblyStackAssignment();\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(localctx, 7);\n          {\n            this.state = 982;\n            this.labelDefinition();\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(localctx, 8);\n          {\n            this.state = 983;\n            this.assemblySwitch();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(localctx, 9);\n          {\n            this.state = 984;\n            this.assemblyFunctionDefinition();\n          }\n          break;\n        case 10:\n          this.enterOuterAlt(localctx, 10);\n          {\n            this.state = 985;\n            this.assemblyFor();\n          }\n          break;\n        case 11:\n          this.enterOuterAlt(localctx, 11);\n          {\n            this.state = 986;\n            this.assemblyIf();\n          }\n          break;\n        case 12:\n          this.enterOuterAlt(localctx, 12);\n          {\n            this.state = 987;\n            this.match(_SolidityParser.BreakKeyword);\n          }\n          break;\n        case 13:\n          this.enterOuterAlt(localctx, 13);\n          {\n            this.state = 988;\n            this.match(_SolidityParser.ContinueKeyword);\n          }\n          break;\n        case 14:\n          this.enterOuterAlt(localctx, 14);\n          {\n            this.state = 989;\n            this.match(_SolidityParser.LeaveKeyword);\n          }\n          break;\n        case 15:\n          this.enterOuterAlt(localctx, 15);\n          {\n            this.state = 990;\n            this.numberLiteral();\n          }\n          break;\n        case 16:\n          this.enterOuterAlt(localctx, 16);\n          {\n            this.state = 991;\n            this.stringLiteral();\n          }\n          break;\n        case 17:\n          this.enterOuterAlt(localctx, 17);\n          {\n            this.state = 992;\n            this.hexLiteral();\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyExpression() {\n    let localctx = new AssemblyExpressionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 158, _SolidityParser.RULE_assemblyExpression);\n    try {\n      this.state = 998;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 104, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 995;\n            this.assemblyCall();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 996;\n            this.assemblyLiteral();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 997;\n            this.assemblyMember();\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyMember() {\n    let localctx = new AssemblyMemberContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 160, _SolidityParser.RULE_assemblyMember);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1e3;\n        this.identifier();\n        this.state = 1001;\n        this.match(_SolidityParser.T__44);\n        this.state = 1002;\n        this.identifier();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyCall() {\n    let localctx = new AssemblyCallContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 162, _SolidityParser.RULE_assemblyCall);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1008;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 105, this._ctx)) {\n          case 1:\n            {\n              this.state = 1004;\n              this.match(_SolidityParser.T__58);\n            }\n            break;\n          case 2:\n            {\n              this.state = 1005;\n              this.match(_SolidityParser.T__43);\n            }\n            break;\n          case 3:\n            {\n              this.state = 1006;\n              this.match(_SolidityParser.T__65);\n            }\n            break;\n          case 4:\n            {\n              this.state = 1007;\n              this.identifier();\n            }\n            break;\n        }\n        this.state = 1022;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 108, this._ctx)) {\n          case 1:\n            {\n              this.state = 1010;\n              this.match(_SolidityParser.T__22);\n              this.state = 1012;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 4489281) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230141313) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & 7) !== 0) {\n                {\n                  this.state = 1011;\n                  this.assemblyExpression();\n                }\n              }\n              this.state = 1018;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              while (_la === 16) {\n                {\n                  {\n                    this.state = 1014;\n                    this.match(_SolidityParser.T__15);\n                    this.state = 1015;\n                    this.assemblyExpression();\n                  }\n                }\n                this.state = 1020;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n              }\n              this.state = 1021;\n              this.match(_SolidityParser.T__23);\n            }\n            break;\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyLocalDefinition() {\n    let localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 164, _SolidityParser.RULE_assemblyLocalDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1024;\n        this.match(_SolidityParser.T__87);\n        this.state = 1025;\n        this.assemblyIdentifierOrList();\n        this.state = 1028;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 89) {\n          {\n            this.state = 1026;\n            this.match(_SolidityParser.T__88);\n            this.state = 1027;\n            this.assemblyExpression();\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyAssignment() {\n    let localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 166, _SolidityParser.RULE_assemblyAssignment);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1030;\n        this.assemblyIdentifierOrList();\n        this.state = 1031;\n        this.match(_SolidityParser.T__88);\n        this.state = 1032;\n        this.assemblyExpression();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyIdentifierOrList() {\n    let localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 168, _SolidityParser.RULE_assemblyIdentifierOrList);\n    try {\n      this.state = 1041;\n      this._errHandler.sync(this);\n      switch (this._interp.adaptivePredict(this._input, 110, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 1034;\n            this.identifier();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 1035;\n            this.assemblyMember();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 1036;\n            this.assemblyIdentifierList();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(localctx, 4);\n          {\n            this.state = 1037;\n            this.match(_SolidityParser.T__22);\n            this.state = 1038;\n            this.assemblyIdentifierList();\n            this.state = 1039;\n            this.match(_SolidityParser.T__23);\n          }\n          break;\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyIdentifierList() {\n    let localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 170, _SolidityParser.RULE_assemblyIdentifierList);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1043;\n        this.identifier();\n        this.state = 1048;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 16) {\n          {\n            {\n              this.state = 1044;\n              this.match(_SolidityParser.T__15);\n              this.state = 1045;\n              this.identifier();\n            }\n          }\n          this.state = 1050;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyStackAssignment() {\n    let localctx = new AssemblyStackAssignmentContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 172, _SolidityParser.RULE_assemblyStackAssignment);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1051;\n        this.assemblyExpression();\n        this.state = 1052;\n        this.match(_SolidityParser.T__89);\n        this.state = 1053;\n        this.identifier();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  labelDefinition() {\n    let localctx = new LabelDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 174, _SolidityParser.RULE_labelDefinition);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1055;\n        this.identifier();\n        this.state = 1056;\n        this.match(_SolidityParser.T__69);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblySwitch() {\n    let localctx = new AssemblySwitchContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 176, _SolidityParser.RULE_assemblySwitch);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1058;\n        this.match(_SolidityParser.T__90);\n        this.state = 1059;\n        this.assemblyExpression();\n        this.state = 1063;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 92 || _la === 93) {\n          {\n            {\n              this.state = 1060;\n              this.assemblyCase();\n            }\n          }\n          this.state = 1065;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyCase() {\n    let localctx = new AssemblyCaseContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 178, _SolidityParser.RULE_assemblyCase);\n    try {\n      this.state = 1072;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case 92:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 1066;\n            this.match(_SolidityParser.T__91);\n            this.state = 1067;\n            this.assemblyLiteral();\n            this.state = 1068;\n            this.assemblyBlock();\n          }\n          break;\n        case 93:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 1070;\n            this.match(_SolidityParser.T__92);\n            this.state = 1071;\n            this.assemblyBlock();\n          }\n          break;\n        default:\n          throw new xn(this);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyFunctionDefinition() {\n    let localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 180, _SolidityParser.RULE_assemblyFunctionDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1074;\n        this.match(_SolidityParser.T__37);\n        this.state = 1075;\n        this.identifier();\n        this.state = 1076;\n        this.match(_SolidityParser.T__22);\n        this.state = 1078;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129) {\n          {\n            this.state = 1077;\n            this.assemblyIdentifierList();\n          }\n        }\n        this.state = 1080;\n        this.match(_SolidityParser.T__23);\n        this.state = 1082;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 94) {\n          {\n            this.state = 1081;\n            this.assemblyFunctionReturns();\n          }\n        }\n        this.state = 1084;\n        this.assemblyBlock();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyFunctionReturns() {\n    let localctx = new AssemblyFunctionReturnsContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 182, _SolidityParser.RULE_assemblyFunctionReturns);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        {\n          this.state = 1086;\n          this.match(_SolidityParser.T__93);\n          this.state = 1087;\n          this.assemblyIdentifierList();\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyFor() {\n    let localctx = new AssemblyForContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 184, _SolidityParser.RULE_assemblyFor);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1089;\n        this.match(_SolidityParser.T__26);\n        this.state = 1092;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 15:\n            {\n              this.state = 1090;\n              this.assemblyBlock();\n            }\n            break;\n          case 14:\n          case 25:\n          case 44:\n          case 50:\n          case 59:\n          case 62:\n          case 66:\n          case 95:\n          case 102:\n          case 103:\n          case 104:\n          case 106:\n          case 114:\n          case 118:\n          case 125:\n          case 126:\n          case 128:\n          case 129:\n          case 130:\n            {\n              this.state = 1091;\n              this.assemblyExpression();\n            }\n            break;\n          default:\n            throw new xn(this);\n        }\n        this.state = 1094;\n        this.assemblyExpression();\n        this.state = 1097;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 15:\n            {\n              this.state = 1095;\n              this.assemblyBlock();\n            }\n            break;\n          case 14:\n          case 25:\n          case 44:\n          case 50:\n          case 59:\n          case 62:\n          case 66:\n          case 95:\n          case 102:\n          case 103:\n          case 104:\n          case 106:\n          case 114:\n          case 118:\n          case 125:\n          case 126:\n          case 128:\n          case 129:\n          case 130:\n            {\n              this.state = 1096;\n              this.assemblyExpression();\n            }\n            break;\n          default:\n            throw new xn(this);\n        }\n        this.state = 1099;\n        this.assemblyBlock();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyIf() {\n    let localctx = new AssemblyIfContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 186, _SolidityParser.RULE_assemblyIf);\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1101;\n        this.match(_SolidityParser.T__50);\n        this.state = 1102;\n        this.assemblyExpression();\n        this.state = 1103;\n        this.assemblyBlock();\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  assemblyLiteral() {\n    let localctx = new AssemblyLiteralContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 188, _SolidityParser.RULE_assemblyLiteral);\n    try {\n      this.state = 1110;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case 130:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 1105;\n            this.stringLiteral();\n          }\n          break;\n        case 103:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 1106;\n            this.match(_SolidityParser.DecimalNumber);\n          }\n          break;\n        case 104:\n          this.enterOuterAlt(localctx, 3);\n          {\n            this.state = 1107;\n            this.match(_SolidityParser.HexNumber);\n          }\n          break;\n        case 106:\n          this.enterOuterAlt(localctx, 4);\n          {\n            this.state = 1108;\n            this.hexLiteral();\n          }\n          break;\n        case 102:\n          this.enterOuterAlt(localctx, 5);\n          {\n            this.state = 1109;\n            this.match(_SolidityParser.BooleanLiteral);\n          }\n          break;\n        default:\n          throw new xn(this);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  tupleExpression() {\n    let localctx = new TupleExpressionContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 190, _SolidityParser.RULE_tupleExpression);\n    let _la;\n    try {\n      this.state = 1138;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case 23:\n          this.enterOuterAlt(localctx, 1);\n          {\n            this.state = 1112;\n            this.match(_SolidityParser.T__22);\n            {\n              this.state = 1114;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n                {\n                  this.state = 1113;\n                  this.expression(0);\n                }\n              }\n              this.state = 1122;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              while (_la === 16) {\n                {\n                  {\n                    this.state = 1116;\n                    this.match(_SolidityParser.T__15);\n                    this.state = 1118;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n                      {\n                        this.state = 1117;\n                        this.expression(0);\n                      }\n                    }\n                  }\n                }\n                this.state = 1124;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n              }\n            }\n            this.state = 1125;\n            this.match(_SolidityParser.T__23);\n          }\n          break;\n        case 42:\n          this.enterOuterAlt(localctx, 2);\n          {\n            this.state = 1126;\n            this.match(_SolidityParser.T__41);\n            this.state = 1135;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & 3263184960) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & 4278194513) !== 0 || (_la - 71 & ~31) === 0 && (1 << _la - 71 & 4244635651) !== 0 || (_la - 103 & ~31) === 0 && (1 << _la - 103 & 248547339) !== 0) {\n              {\n                this.state = 1127;\n                this.expression(0);\n                this.state = 1132;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                while (_la === 16) {\n                  {\n                    {\n                      this.state = 1128;\n                      this.match(_SolidityParser.T__15);\n                      this.state = 1129;\n                      this.expression(0);\n                    }\n                  }\n                  this.state = 1134;\n                  this._errHandler.sync(this);\n                  _la = this._input.LA(1);\n                }\n              }\n            }\n            this.state = 1137;\n            this.match(_SolidityParser.T__42);\n          }\n          break;\n        default:\n          throw new xn(this);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  numberLiteral() {\n    let localctx = new NumberLiteralContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 192, _SolidityParser.RULE_numberLiteral);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1140;\n        _la = this._input.LA(1);\n        if (!(_la === 103 || _la === 104)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n        this.state = 1142;\n        this._errHandler.sync(this);\n        switch (this._interp.adaptivePredict(this._input, 125, this._ctx)) {\n          case 1:\n            {\n              this.state = 1141;\n              this.match(_SolidityParser.NumberUnit);\n            }\n            break;\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  identifier() {\n    let localctx = new IdentifierContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 194, _SolidityParser.RULE_identifier);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1144;\n        _la = this._input.LA(1);\n        if (!(_la === 14 || _la === 25 || (_la - 44 & ~31) === 0 && (1 << _la - 44 & 262209) !== 0 || (_la - 95 & ~31) === 0 && (1 << _la - 95 & 3230138369) !== 0 || _la === 128 || _la === 129)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  hexLiteral() {\n    let localctx = new HexLiteralContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 196, _SolidityParser.RULE_hexLiteral);\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1147;\n        this._errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n            case 1:\n              {\n                {\n                  this.state = 1146;\n                  this.match(_SolidityParser.HexLiteralFragment);\n                }\n              }\n              break;\n            default:\n              throw new xn(this);\n          }\n          this.state = 1149;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 126, this._ctx);\n        } while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  overrideSpecifier() {\n    let localctx = new OverrideSpecifierContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 198, _SolidityParser.RULE_overrideSpecifier);\n    let _la;\n    try {\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1151;\n        this.match(_SolidityParser.T__95);\n        this.state = 1163;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 23) {\n          {\n            this.state = 1152;\n            this.match(_SolidityParser.T__22);\n            this.state = 1153;\n            this.userDefinedTypeName();\n            this.state = 1158;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === 16) {\n              {\n                {\n                  this.state = 1154;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 1155;\n                  this.userDefinedTypeName();\n                }\n              }\n              this.state = 1160;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n            this.state = 1161;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  // @RuleVersion(0)\n  stringLiteral() {\n    let localctx = new StringLiteralContext(this, this._ctx, this.state);\n    this.enterRule(localctx, 200, _SolidityParser.RULE_stringLiteral);\n    try {\n      let _alt;\n      this.enterOuterAlt(localctx, 1);\n      {\n        this.state = 1166;\n        this._errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n            case 1:\n              {\n                {\n                  this.state = 1165;\n                  this.match(_SolidityParser.StringLiteralFragment);\n                }\n              }\n              break;\n            default:\n              throw new xn(this);\n          }\n          this.state = 1168;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 129, this._ctx);\n        } while (_alt !== 2 && _alt !== Xe.INVALID_ALT_NUMBER);\n      }\n    } catch (re2) {\n      if (re2 instanceof yn) {\n        localctx.exception = re2;\n        this._errHandler.reportError(this, re2);\n        this._errHandler.recover(this, re2);\n      } else {\n        throw re2;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return localctx;\n  }\n  sempred(localctx, ruleIndex, predIndex) {\n    switch (ruleIndex) {\n      case 38:\n        return this.typeName_sempred(localctx, predIndex);\n      case 70:\n        return this.expression_sempred(localctx, predIndex);\n    }\n    return true;\n  }\n  typeName_sempred(localctx, predIndex) {\n    switch (predIndex) {\n      case 0:\n        return this.precpred(this._ctx, 3);\n    }\n    return true;\n  }\n  expression_sempred(localctx, predIndex) {\n    switch (predIndex) {\n      case 1:\n        return this.precpred(this._ctx, 14);\n      case 2:\n        return this.precpred(this._ctx, 13);\n      case 3:\n        return this.precpred(this._ctx, 12);\n      case 4:\n        return this.precpred(this._ctx, 11);\n      case 5:\n        return this.precpred(this._ctx, 10);\n      case 6:\n        return this.precpred(this._ctx, 9);\n      case 7:\n        return this.precpred(this._ctx, 8);\n      case 8:\n        return this.precpred(this._ctx, 7);\n      case 9:\n        return this.precpred(this._ctx, 6);\n      case 10:\n        return this.precpred(this._ctx, 5);\n      case 11:\n        return this.precpred(this._ctx, 4);\n      case 12:\n        return this.precpred(this._ctx, 3);\n      case 13:\n        return this.precpred(this._ctx, 2);\n      case 14:\n        return this.precpred(this._ctx, 27);\n      case 15:\n        return this.precpred(this._ctx, 25);\n      case 16:\n        return this.precpred(this._ctx, 24);\n      case 17:\n        return this.precpred(this._ctx, 23);\n      case 18:\n        return this.precpred(this._ctx, 22);\n      case 19:\n        return this.precpred(this._ctx, 21);\n    }\n    return true;\n  }\n  static get _ATN() {\n    if (!_SolidityParser.__ATN) {\n      _SolidityParser.__ATN = new Je().deserialize(_SolidityParser._serializedATN);\n    }\n    return _SolidityParser.__ATN;\n  }\n};\n_SolidityParser.T__0 = 1;\n_SolidityParser.T__1 = 2;\n_SolidityParser.T__2 = 3;\n_SolidityParser.T__3 = 4;\n_SolidityParser.T__4 = 5;\n_SolidityParser.T__5 = 6;\n_SolidityParser.T__6 = 7;\n_SolidityParser.T__7 = 8;\n_SolidityParser.T__8 = 9;\n_SolidityParser.T__9 = 10;\n_SolidityParser.T__10 = 11;\n_SolidityParser.T__11 = 12;\n_SolidityParser.T__12 = 13;\n_SolidityParser.T__13 = 14;\n_SolidityParser.T__14 = 15;\n_SolidityParser.T__15 = 16;\n_SolidityParser.T__16 = 17;\n_SolidityParser.T__17 = 18;\n_SolidityParser.T__18 = 19;\n_SolidityParser.T__19 = 20;\n_SolidityParser.T__20 = 21;\n_SolidityParser.T__21 = 22;\n_SolidityParser.T__22 = 23;\n_SolidityParser.T__23 = 24;\n_SolidityParser.T__24 = 25;\n_SolidityParser.T__25 = 26;\n_SolidityParser.T__26 = 27;\n_SolidityParser.T__27 = 28;\n_SolidityParser.T__28 = 29;\n_SolidityParser.T__29 = 30;\n_SolidityParser.T__30 = 31;\n_SolidityParser.T__31 = 32;\n_SolidityParser.T__32 = 33;\n_SolidityParser.T__33 = 34;\n_SolidityParser.T__34 = 35;\n_SolidityParser.T__35 = 36;\n_SolidityParser.T__36 = 37;\n_SolidityParser.T__37 = 38;\n_SolidityParser.T__38 = 39;\n_SolidityParser.T__39 = 40;\n_SolidityParser.T__40 = 41;\n_SolidityParser.T__41 = 42;\n_SolidityParser.T__42 = 43;\n_SolidityParser.T__43 = 44;\n_SolidityParser.T__44 = 45;\n_SolidityParser.T__45 = 46;\n_SolidityParser.T__46 = 47;\n_SolidityParser.T__47 = 48;\n_SolidityParser.T__48 = 49;\n_SolidityParser.T__49 = 50;\n_SolidityParser.T__50 = 51;\n_SolidityParser.T__51 = 52;\n_SolidityParser.T__52 = 53;\n_SolidityParser.T__53 = 54;\n_SolidityParser.T__54 = 55;\n_SolidityParser.T__55 = 56;\n_SolidityParser.T__56 = 57;\n_SolidityParser.T__57 = 58;\n_SolidityParser.T__58 = 59;\n_SolidityParser.T__59 = 60;\n_SolidityParser.T__60 = 61;\n_SolidityParser.T__61 = 62;\n_SolidityParser.T__62 = 63;\n_SolidityParser.T__63 = 64;\n_SolidityParser.T__64 = 65;\n_SolidityParser.T__65 = 66;\n_SolidityParser.T__66 = 67;\n_SolidityParser.T__67 = 68;\n_SolidityParser.T__68 = 69;\n_SolidityParser.T__69 = 70;\n_SolidityParser.T__70 = 71;\n_SolidityParser.T__71 = 72;\n_SolidityParser.T__72 = 73;\n_SolidityParser.T__73 = 74;\n_SolidityParser.T__74 = 75;\n_SolidityParser.T__75 = 76;\n_SolidityParser.T__76 = 77;\n_SolidityParser.T__77 = 78;\n_SolidityParser.T__78 = 79;\n_SolidityParser.T__79 = 80;\n_SolidityParser.T__80 = 81;\n_SolidityParser.T__81 = 82;\n_SolidityParser.T__82 = 83;\n_SolidityParser.T__83 = 84;\n_SolidityParser.T__84 = 85;\n_SolidityParser.T__85 = 86;\n_SolidityParser.T__86 = 87;\n_SolidityParser.T__87 = 88;\n_SolidityParser.T__88 = 89;\n_SolidityParser.T__89 = 90;\n_SolidityParser.T__90 = 91;\n_SolidityParser.T__91 = 92;\n_SolidityParser.T__92 = 93;\n_SolidityParser.T__93 = 94;\n_SolidityParser.T__94 = 95;\n_SolidityParser.T__95 = 96;\n_SolidityParser.Int = 97;\n_SolidityParser.Uint = 98;\n_SolidityParser.Byte = 99;\n_SolidityParser.Fixed = 100;\n_SolidityParser.Ufixed = 101;\n_SolidityParser.BooleanLiteral = 102;\n_SolidityParser.DecimalNumber = 103;\n_SolidityParser.HexNumber = 104;\n_SolidityParser.NumberUnit = 105;\n_SolidityParser.HexLiteralFragment = 106;\n_SolidityParser.ReservedKeyword = 107;\n_SolidityParser.AnonymousKeyword = 108;\n_SolidityParser.BreakKeyword = 109;\n_SolidityParser.ConstantKeyword = 110;\n_SolidityParser.TransientKeyword = 111;\n_SolidityParser.ImmutableKeyword = 112;\n_SolidityParser.ContinueKeyword = 113;\n_SolidityParser.LeaveKeyword = 114;\n_SolidityParser.ExternalKeyword = 115;\n_SolidityParser.IndexedKeyword = 116;\n_SolidityParser.InternalKeyword = 117;\n_SolidityParser.PayableKeyword = 118;\n_SolidityParser.PrivateKeyword = 119;\n_SolidityParser.PublicKeyword = 120;\n_SolidityParser.VirtualKeyword = 121;\n_SolidityParser.PureKeyword = 122;\n_SolidityParser.TypeKeyword = 123;\n_SolidityParser.ViewKeyword = 124;\n_SolidityParser.GlobalKeyword = 125;\n_SolidityParser.ConstructorKeyword = 126;\n_SolidityParser.FallbackKeyword = 127;\n_SolidityParser.ReceiveKeyword = 128;\n_SolidityParser.Identifier = 129;\n_SolidityParser.StringLiteralFragment = 130;\n_SolidityParser.VersionLiteral = 131;\n_SolidityParser.WS = 132;\n_SolidityParser.COMMENT = 133;\n_SolidityParser.LINE_COMMENT = 134;\n_SolidityParser.EOF = On.EOF;\n_SolidityParser.RULE_sourceUnit = 0;\n_SolidityParser.RULE_pragmaDirective = 1;\n_SolidityParser.RULE_pragmaName = 2;\n_SolidityParser.RULE_pragmaValue = 3;\n_SolidityParser.RULE_version = 4;\n_SolidityParser.RULE_versionOperator = 5;\n_SolidityParser.RULE_versionConstraint = 6;\n_SolidityParser.RULE_importDeclaration = 7;\n_SolidityParser.RULE_importDirective = 8;\n_SolidityParser.RULE_importPath = 9;\n_SolidityParser.RULE_contractDefinition = 10;\n_SolidityParser.RULE_inheritanceSpecifier = 11;\n_SolidityParser.RULE_contractPart = 12;\n_SolidityParser.RULE_stateVariableDeclaration = 13;\n_SolidityParser.RULE_fileLevelConstant = 14;\n_SolidityParser.RULE_customErrorDefinition = 15;\n_SolidityParser.RULE_typeDefinition = 16;\n_SolidityParser.RULE_usingForDeclaration = 17;\n_SolidityParser.RULE_usingForObject = 18;\n_SolidityParser.RULE_usingForObjectDirective = 19;\n_SolidityParser.RULE_userDefinableOperators = 20;\n_SolidityParser.RULE_structDefinition = 21;\n_SolidityParser.RULE_modifierDefinition = 22;\n_SolidityParser.RULE_modifierInvocation = 23;\n_SolidityParser.RULE_functionDefinition = 24;\n_SolidityParser.RULE_functionDescriptor = 25;\n_SolidityParser.RULE_returnParameters = 26;\n_SolidityParser.RULE_modifierList = 27;\n_SolidityParser.RULE_eventDefinition = 28;\n_SolidityParser.RULE_enumValue = 29;\n_SolidityParser.RULE_enumDefinition = 30;\n_SolidityParser.RULE_parameterList = 31;\n_SolidityParser.RULE_parameter = 32;\n_SolidityParser.RULE_eventParameterList = 33;\n_SolidityParser.RULE_eventParameter = 34;\n_SolidityParser.RULE_functionTypeParameterList = 35;\n_SolidityParser.RULE_functionTypeParameter = 36;\n_SolidityParser.RULE_variableDeclaration = 37;\n_SolidityParser.RULE_typeName = 38;\n_SolidityParser.RULE_userDefinedTypeName = 39;\n_SolidityParser.RULE_mappingKey = 40;\n_SolidityParser.RULE_mapping = 41;\n_SolidityParser.RULE_mappingKeyName = 42;\n_SolidityParser.RULE_mappingValueName = 43;\n_SolidityParser.RULE_functionTypeName = 44;\n_SolidityParser.RULE_storageLocation = 45;\n_SolidityParser.RULE_stateMutability = 46;\n_SolidityParser.RULE_block = 47;\n_SolidityParser.RULE_statement = 48;\n_SolidityParser.RULE_expressionStatement = 49;\n_SolidityParser.RULE_ifStatement = 50;\n_SolidityParser.RULE_tryStatement = 51;\n_SolidityParser.RULE_catchClause = 52;\n_SolidityParser.RULE_whileStatement = 53;\n_SolidityParser.RULE_simpleStatement = 54;\n_SolidityParser.RULE_uncheckedStatement = 55;\n_SolidityParser.RULE_forStatement = 56;\n_SolidityParser.RULE_inlineAssemblyStatement = 57;\n_SolidityParser.RULE_inlineAssemblyStatementFlag = 58;\n_SolidityParser.RULE_doWhileStatement = 59;\n_SolidityParser.RULE_continueStatement = 60;\n_SolidityParser.RULE_breakStatement = 61;\n_SolidityParser.RULE_returnStatement = 62;\n_SolidityParser.RULE_throwStatement = 63;\n_SolidityParser.RULE_emitStatement = 64;\n_SolidityParser.RULE_revertStatement = 65;\n_SolidityParser.RULE_variableDeclarationStatement = 66;\n_SolidityParser.RULE_variableDeclarationList = 67;\n_SolidityParser.RULE_identifierList = 68;\n_SolidityParser.RULE_elementaryTypeName = 69;\n_SolidityParser.RULE_expression = 70;\n_SolidityParser.RULE_primaryExpression = 71;\n_SolidityParser.RULE_expressionList = 72;\n_SolidityParser.RULE_nameValueList = 73;\n_SolidityParser.RULE_nameValue = 74;\n_SolidityParser.RULE_functionCallArguments = 75;\n_SolidityParser.RULE_functionCall = 76;\n_SolidityParser.RULE_assemblyBlock = 77;\n_SolidityParser.RULE_assemblyItem = 78;\n_SolidityParser.RULE_assemblyExpression = 79;\n_SolidityParser.RULE_assemblyMember = 80;\n_SolidityParser.RULE_assemblyCall = 81;\n_SolidityParser.RULE_assemblyLocalDefinition = 82;\n_SolidityParser.RULE_assemblyAssignment = 83;\n_SolidityParser.RULE_assemblyIdentifierOrList = 84;\n_SolidityParser.RULE_assemblyIdentifierList = 85;\n_SolidityParser.RULE_assemblyStackAssignment = 86;\n_SolidityParser.RULE_labelDefinition = 87;\n_SolidityParser.RULE_assemblySwitch = 88;\n_SolidityParser.RULE_assemblyCase = 89;\n_SolidityParser.RULE_assemblyFunctionDefinition = 90;\n_SolidityParser.RULE_assemblyFunctionReturns = 91;\n_SolidityParser.RULE_assemblyFor = 92;\n_SolidityParser.RULE_assemblyIf = 93;\n_SolidityParser.RULE_assemblyLiteral = 94;\n_SolidityParser.RULE_tupleExpression = 95;\n_SolidityParser.RULE_numberLiteral = 96;\n_SolidityParser.RULE_identifier = 97;\n_SolidityParser.RULE_hexLiteral = 98;\n_SolidityParser.RULE_overrideSpecifier = 99;\n_SolidityParser.RULE_stringLiteral = 100;\n_SolidityParser.literalNames = [\n  null,\n  \"'pragma'\",\n  \"';'\",\n  \"'*'\",\n  \"'||'\",\n  \"'^'\",\n  \"'~'\",\n  \"'>='\",\n  \"'>'\",\n  \"'<'\",\n  \"'<='\",\n  \"'='\",\n  \"'as'\",\n  \"'import'\",\n  \"'from'\",\n  \"'{'\",\n  \"','\",\n  \"'}'\",\n  \"'abstract'\",\n  \"'contract'\",\n  \"'interface'\",\n  \"'library'\",\n  \"'is'\",\n  \"'('\",\n  \"')'\",\n  \"'error'\",\n  \"'using'\",\n  \"'for'\",\n  \"'|'\",\n  \"'&'\",\n  \"'+'\",\n  \"'-'\",\n  \"'/'\",\n  \"'%'\",\n  \"'=='\",\n  \"'!='\",\n  \"'struct'\",\n  \"'modifier'\",\n  \"'function'\",\n  \"'returns'\",\n  \"'event'\",\n  \"'enum'\",\n  \"'['\",\n  \"']'\",\n  \"'address'\",\n  \"'.'\",\n  \"'mapping'\",\n  \"'=>'\",\n  \"'memory'\",\n  \"'storage'\",\n  \"'calldata'\",\n  \"'if'\",\n  \"'else'\",\n  \"'try'\",\n  \"'catch'\",\n  \"'while'\",\n  \"'unchecked'\",\n  \"'assembly'\",\n  \"'do'\",\n  \"'return'\",\n  \"'throw'\",\n  \"'emit'\",\n  \"'revert'\",\n  \"'var'\",\n  \"'bool'\",\n  \"'string'\",\n  \"'byte'\",\n  \"'++'\",\n  \"'--'\",\n  \"'new'\",\n  \"':'\",\n  \"'delete'\",\n  \"'!'\",\n  \"'**'\",\n  \"'<<'\",\n  \"'>>'\",\n  \"'&&'\",\n  \"'?'\",\n  \"'|='\",\n  \"'^='\",\n  \"'&='\",\n  \"'<<='\",\n  \"'>>='\",\n  \"'+='\",\n  \"'-='\",\n  \"'*='\",\n  \"'/='\",\n  \"'%='\",\n  \"'let'\",\n  \"':='\",\n  \"'=:'\",\n  \"'switch'\",\n  \"'case'\",\n  \"'default'\",\n  \"'->'\",\n  \"'callback'\",\n  \"'override'\",\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  \"'anonymous'\",\n  \"'break'\",\n  \"'constant'\",\n  \"'transient'\",\n  \"'immutable'\",\n  \"'continue'\",\n  \"'leave'\",\n  \"'external'\",\n  \"'indexed'\",\n  \"'internal'\",\n  \"'payable'\",\n  \"'private'\",\n  \"'public'\",\n  \"'virtual'\",\n  \"'pure'\",\n  \"'type'\",\n  \"'view'\",\n  \"'global'\",\n  \"'constructor'\",\n  \"'fallback'\",\n  \"'receive'\"\n];\n_SolidityParser.symbolicNames = [\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"Ufixed\",\n  \"BooleanLiteral\",\n  \"DecimalNumber\",\n  \"HexNumber\",\n  \"NumberUnit\",\n  \"HexLiteralFragment\",\n  \"ReservedKeyword\",\n  \"AnonymousKeyword\",\n  \"BreakKeyword\",\n  \"ConstantKeyword\",\n  \"TransientKeyword\",\n  \"ImmutableKeyword\",\n  \"ContinueKeyword\",\n  \"LeaveKeyword\",\n  \"ExternalKeyword\",\n  \"IndexedKeyword\",\n  \"InternalKeyword\",\n  \"PayableKeyword\",\n  \"PrivateKeyword\",\n  \"PublicKeyword\",\n  \"VirtualKeyword\",\n  \"PureKeyword\",\n  \"TypeKeyword\",\n  \"ViewKeyword\",\n  \"GlobalKeyword\",\n  \"ConstructorKeyword\",\n  \"FallbackKeyword\",\n  \"ReceiveKeyword\",\n  \"Identifier\",\n  \"StringLiteralFragment\",\n  \"VersionLiteral\",\n  \"WS\",\n  \"COMMENT\",\n  \"LINE_COMMENT\"\n];\n// tslint:disable:no-trailing-whitespace\n_SolidityParser.ruleNames = [\n  \"sourceUnit\",\n  \"pragmaDirective\",\n  \"pragmaName\",\n  \"pragmaValue\",\n  \"version\",\n  \"versionOperator\",\n  \"versionConstraint\",\n  \"importDeclaration\",\n  \"importDirective\",\n  \"importPath\",\n  \"contractDefinition\",\n  \"inheritanceSpecifier\",\n  \"contractPart\",\n  \"stateVariableDeclaration\",\n  \"fileLevelConstant\",\n  \"customErrorDefinition\",\n  \"typeDefinition\",\n  \"usingForDeclaration\",\n  \"usingForObject\",\n  \"usingForObjectDirective\",\n  \"userDefinableOperators\",\n  \"structDefinition\",\n  \"modifierDefinition\",\n  \"modifierInvocation\",\n  \"functionDefinition\",\n  \"functionDescriptor\",\n  \"returnParameters\",\n  \"modifierList\",\n  \"eventDefinition\",\n  \"enumValue\",\n  \"enumDefinition\",\n  \"parameterList\",\n  \"parameter\",\n  \"eventParameterList\",\n  \"eventParameter\",\n  \"functionTypeParameterList\",\n  \"functionTypeParameter\",\n  \"variableDeclaration\",\n  \"typeName\",\n  \"userDefinedTypeName\",\n  \"mappingKey\",\n  \"mapping\",\n  \"mappingKeyName\",\n  \"mappingValueName\",\n  \"functionTypeName\",\n  \"storageLocation\",\n  \"stateMutability\",\n  \"block\",\n  \"statement\",\n  \"expressionStatement\",\n  \"ifStatement\",\n  \"tryStatement\",\n  \"catchClause\",\n  \"whileStatement\",\n  \"simpleStatement\",\n  \"uncheckedStatement\",\n  \"forStatement\",\n  \"inlineAssemblyStatement\",\n  \"inlineAssemblyStatementFlag\",\n  \"doWhileStatement\",\n  \"continueStatement\",\n  \"breakStatement\",\n  \"returnStatement\",\n  \"throwStatement\",\n  \"emitStatement\",\n  \"revertStatement\",\n  \"variableDeclarationStatement\",\n  \"variableDeclarationList\",\n  \"identifierList\",\n  \"elementaryTypeName\",\n  \"expression\",\n  \"primaryExpression\",\n  \"expressionList\",\n  \"nameValueList\",\n  \"nameValue\",\n  \"functionCallArguments\",\n  \"functionCall\",\n  \"assemblyBlock\",\n  \"assemblyItem\",\n  \"assemblyExpression\",\n  \"assemblyMember\",\n  \"assemblyCall\",\n  \"assemblyLocalDefinition\",\n  \"assemblyAssignment\",\n  \"assemblyIdentifierOrList\",\n  \"assemblyIdentifierList\",\n  \"assemblyStackAssignment\",\n  \"labelDefinition\",\n  \"assemblySwitch\",\n  \"assemblyCase\",\n  \"assemblyFunctionDefinition\",\n  \"assemblyFunctionReturns\",\n  \"assemblyFor\",\n  \"assemblyIf\",\n  \"assemblyLiteral\",\n  \"tupleExpression\",\n  \"numberLiteral\",\n  \"identifier\",\n  \"hexLiteral\",\n  \"overrideSpecifier\",\n  \"stringLiteral\"\n];\n_SolidityParser._serializedATN = [\n  4,\n  1,\n  134,\n  1171,\n  2,\n  0,\n  7,\n  0,\n  2,\n  1,\n  7,\n  1,\n  2,\n  2,\n  7,\n  2,\n  2,\n  3,\n  7,\n  3,\n  2,\n  4,\n  7,\n  4,\n  2,\n  5,\n  7,\n  5,\n  2,\n  6,\n  7,\n  6,\n  2,\n  7,\n  7,\n  7,\n  2,\n  8,\n  7,\n  8,\n  2,\n  9,\n  7,\n  9,\n  2,\n  10,\n  7,\n  10,\n  2,\n  11,\n  7,\n  11,\n  2,\n  12,\n  7,\n  12,\n  2,\n  13,\n  7,\n  13,\n  2,\n  14,\n  7,\n  14,\n  2,\n  15,\n  7,\n  15,\n  2,\n  16,\n  7,\n  16,\n  2,\n  17,\n  7,\n  17,\n  2,\n  18,\n  7,\n  18,\n  2,\n  19,\n  7,\n  19,\n  2,\n  20,\n  7,\n  20,\n  2,\n  21,\n  7,\n  21,\n  2,\n  22,\n  7,\n  22,\n  2,\n  23,\n  7,\n  23,\n  2,\n  24,\n  7,\n  24,\n  2,\n  25,\n  7,\n  25,\n  2,\n  26,\n  7,\n  26,\n  2,\n  27,\n  7,\n  27,\n  2,\n  28,\n  7,\n  28,\n  2,\n  29,\n  7,\n  29,\n  2,\n  30,\n  7,\n  30,\n  2,\n  31,\n  7,\n  31,\n  2,\n  32,\n  7,\n  32,\n  2,\n  33,\n  7,\n  33,\n  2,\n  34,\n  7,\n  34,\n  2,\n  35,\n  7,\n  35,\n  2,\n  36,\n  7,\n  36,\n  2,\n  37,\n  7,\n  37,\n  2,\n  38,\n  7,\n  38,\n  2,\n  39,\n  7,\n  39,\n  2,\n  40,\n  7,\n  40,\n  2,\n  41,\n  7,\n  41,\n  2,\n  42,\n  7,\n  42,\n  2,\n  43,\n  7,\n  43,\n  2,\n  44,\n  7,\n  44,\n  2,\n  45,\n  7,\n  45,\n  2,\n  46,\n  7,\n  46,\n  2,\n  47,\n  7,\n  47,\n  2,\n  48,\n  7,\n  48,\n  2,\n  49,\n  7,\n  49,\n  2,\n  50,\n  7,\n  50,\n  2,\n  51,\n  7,\n  51,\n  2,\n  52,\n  7,\n  52,\n  2,\n  53,\n  7,\n  53,\n  2,\n  54,\n  7,\n  54,\n  2,\n  55,\n  7,\n  55,\n  2,\n  56,\n  7,\n  56,\n  2,\n  57,\n  7,\n  57,\n  2,\n  58,\n  7,\n  58,\n  2,\n  59,\n  7,\n  59,\n  2,\n  60,\n  7,\n  60,\n  2,\n  61,\n  7,\n  61,\n  2,\n  62,\n  7,\n  62,\n  2,\n  63,\n  7,\n  63,\n  2,\n  64,\n  7,\n  64,\n  2,\n  65,\n  7,\n  65,\n  2,\n  66,\n  7,\n  66,\n  2,\n  67,\n  7,\n  67,\n  2,\n  68,\n  7,\n  68,\n  2,\n  69,\n  7,\n  69,\n  2,\n  70,\n  7,\n  70,\n  2,\n  71,\n  7,\n  71,\n  2,\n  72,\n  7,\n  72,\n  2,\n  73,\n  7,\n  73,\n  2,\n  74,\n  7,\n  74,\n  2,\n  75,\n  7,\n  75,\n  2,\n  76,\n  7,\n  76,\n  2,\n  77,\n  7,\n  77,\n  2,\n  78,\n  7,\n  78,\n  2,\n  79,\n  7,\n  79,\n  2,\n  80,\n  7,\n  80,\n  2,\n  81,\n  7,\n  81,\n  2,\n  82,\n  7,\n  82,\n  2,\n  83,\n  7,\n  83,\n  2,\n  84,\n  7,\n  84,\n  2,\n  85,\n  7,\n  85,\n  2,\n  86,\n  7,\n  86,\n  2,\n  87,\n  7,\n  87,\n  2,\n  88,\n  7,\n  88,\n  2,\n  89,\n  7,\n  89,\n  2,\n  90,\n  7,\n  90,\n  2,\n  91,\n  7,\n  91,\n  2,\n  92,\n  7,\n  92,\n  2,\n  93,\n  7,\n  93,\n  2,\n  94,\n  7,\n  94,\n  2,\n  95,\n  7,\n  95,\n  2,\n  96,\n  7,\n  96,\n  2,\n  97,\n  7,\n  97,\n  2,\n  98,\n  7,\n  98,\n  2,\n  99,\n  7,\n  99,\n  2,\n  100,\n  7,\n  100,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  0,\n  5,\n  0,\n  214,\n  8,\n  0,\n  10,\n  0,\n  12,\n  0,\n  217,\n  9,\n  0,\n  1,\n  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  2,\n  1,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  3,\n  3,\n  3,\n  231,\n  8,\n  3,\n  1,\n  4,\n  1,\n  4,\n  3,\n  4,\n  235,\n  8,\n  4,\n  1,\n  4,\n  5,\n  4,\n  238,\n  8,\n  4,\n  10,\n  4,\n  12,\n  4,\n  241,\n  9,\n  4,\n  1,\n  5,\n  1,\n  5,\n  1,\n  6,\n  3,\n  6,\n  246,\n  8,\n  6,\n  1,\n  6,\n  1,\n  6,\n  3,\n  6,\n  250,\n  8,\n  6,\n  1,\n  6,\n  3,\n  6,\n  253,\n  8,\n  6,\n  1,\n  7,\n  1,\n  7,\n  1,\n  7,\n  3,\n  7,\n  258,\n  8,\n  7,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  3,\n  8,\n  264,\n  8,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  3,\n  8,\n  271,\n  8,\n  8,\n  1,\n  8,\n  1,\n  8,\n  3,\n  8,\n  275,\n  8,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  5,\n  8,\n  286,\n  8,\n  8,\n  10,\n  8,\n  12,\n  8,\n  289,\n  9,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  1,\n  8,\n  3,\n  8,\n  296,\n  8,\n  8,\n  1,\n  9,\n  1,\n  9,\n  1,\n  10,\n  3,\n  10,\n  301,\n  8,\n  10,\n  1,\n  10,\n  1,\n  10,\n  1,\n  10,\n  1,\n  10,\n  1,\n  10,\n  1,\n  10,\n  5,\n  10,\n  309,\n  8,\n  10,\n  10,\n  10,\n  12,\n  10,\n  312,\n  9,\n  10,\n  3,\n  10,\n  314,\n  8,\n  10,\n  1,\n  10,\n  1,\n  10,\n  5,\n  10,\n  318,\n  8,\n  10,\n  10,\n  10,\n  12,\n  10,\n  321,\n  9,\n  10,\n  1,\n  10,\n  1,\n  10,\n  1,\n  11,\n  1,\n  11,\n  1,\n  11,\n  3,\n  11,\n  328,\n  8,\n  11,\n  1,\n  11,\n  3,\n  11,\n  331,\n  8,\n  11,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  1,\n  12,\n  3,\n  12,\n  342,\n  8,\n  12,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  5,\n  13,\n  352,\n  8,\n  13,\n  10,\n  13,\n  12,\n  13,\n  355,\n  9,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  13,\n  3,\n  13,\n  360,\n  8,\n  13,\n  1,\n  13,\n  1,\n  13,\n  1,\n  14,\n  1,\n  14,\n  1,\n  14,\n  1,\n  14,\n  1,\n  14,\n  1,\n  14,\n  1,\n  14,\n  1,\n  15,\n  1,\n  15,\n  1,\n  15,\n  1,\n  15,\n  1,\n  15,\n  1,\n  16,\n  1,\n  16,\n  1,\n  16,\n  1,\n  16,\n  1,\n  16,\n  1,\n  16,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  17,\n  3,\n  17,\n  387,\n  8,\n  17,\n  1,\n  17,\n  3,\n  17,\n  390,\n  8,\n  17,\n  1,\n  17,\n  1,\n  17,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  1,\n  18,\n  5,\n  18,\n  399,\n  8,\n  18,\n  10,\n  18,\n  12,\n  18,\n  402,\n  9,\n  18,\n  1,\n  18,\n  1,\n  18,\n  3,\n  18,\n  406,\n  8,\n  18,\n  1,\n  19,\n  1,\n  19,\n  1,\n  19,\n  3,\n  19,\n  411,\n  8,\n  19,\n  1,\n  20,\n  1,\n  20,\n  1,\n  21,\n  1,\n  21,\n  1,\n  21,\n  1,\n  21,\n  1,\n  21,\n  1,\n  21,\n  1,\n  21,\n  1,\n  21,\n  5,\n  21,\n  423,\n  8,\n  21,\n  10,\n  21,\n  12,\n  21,\n  426,\n  9,\n  21,\n  3,\n  21,\n  428,\n  8,\n  21,\n  1,\n  21,\n  1,\n  21,\n  1,\n  22,\n  1,\n  22,\n  1,\n  22,\n  3,\n  22,\n  435,\n  8,\n  22,\n  1,\n  22,\n  1,\n  22,\n  5,\n  22,\n  439,\n  8,\n  22,\n  10,\n  22,\n  12,\n  22,\n  442,\n  9,\n  22,\n  1,\n  22,\n  1,\n  22,\n  3,\n  22,\n  446,\n  8,\n  22,\n  1,\n  23,\n  1,\n  23,\n  1,\n  23,\n  3,\n  23,\n  451,\n  8,\n  23,\n  1,\n  23,\n  3,\n  23,\n  454,\n  8,\n  23,\n  1,\n  24,\n  1,\n  24,\n  1,\n  24,\n  1,\n  24,\n  3,\n  24,\n  460,\n  8,\n  24,\n  1,\n  24,\n  1,\n  24,\n  3,\n  24,\n  464,\n  8,\n  24,\n  1,\n  25,\n  1,\n  25,\n  3,\n  25,\n  468,\n  8,\n  25,\n  1,\n  25,\n  1,\n  25,\n  1,\n  25,\n  3,\n  25,\n  473,\n  8,\n  25,\n  1,\n  26,\n  1,\n  26,\n  1,\n  26,\n  1,\n  27,\n  1,\n  27,\n  1,\n  27,\n  1,\n  27,\n  1,\n  27,\n  1,\n  27,\n  1,\n  27,\n  1,\n  27,\n  5,\n  27,\n  486,\n  8,\n  27,\n  10,\n  27,\n  12,\n  27,\n  489,\n  9,\n  27,\n  1,\n  28,\n  1,\n  28,\n  1,\n  28,\n  1,\n  28,\n  3,\n  28,\n  495,\n  8,\n  28,\n  1,\n  28,\n  1,\n  28,\n  1,\n  29,\n  1,\n  29,\n  1,\n  30,\n  1,\n  30,\n  1,\n  30,\n  1,\n  30,\n  3,\n  30,\n  505,\n  8,\n  30,\n  1,\n  30,\n  1,\n  30,\n  5,\n  30,\n  509,\n  8,\n  30,\n  10,\n  30,\n  12,\n  30,\n  512,\n  9,\n  30,\n  1,\n  30,\n  1,\n  30,\n  1,\n  31,\n  1,\n  31,\n  1,\n  31,\n  1,\n  31,\n  5,\n  31,\n  520,\n  8,\n  31,\n  10,\n  31,\n  12,\n  31,\n  523,\n  9,\n  31,\n  3,\n  31,\n  525,\n  8,\n  31,\n  1,\n  31,\n  1,\n  31,\n  1,\n  32,\n  1,\n  32,\n  3,\n  32,\n  531,\n  8,\n  32,\n  1,\n  32,\n  3,\n  32,\n  534,\n  8,\n  32,\n  1,\n  33,\n  1,\n  33,\n  1,\n  33,\n  1,\n  33,\n  5,\n  33,\n  540,\n  8,\n  33,\n  10,\n  33,\n  12,\n  33,\n  543,\n  9,\n  33,\n  3,\n  33,\n  545,\n  8,\n  33,\n  1,\n  33,\n  1,\n  33,\n  1,\n  34,\n  1,\n  34,\n  3,\n  34,\n  551,\n  8,\n  34,\n  1,\n  34,\n  3,\n  34,\n  554,\n  8,\n  34,\n  1,\n  35,\n  1,\n  35,\n  1,\n  35,\n  1,\n  35,\n  5,\n  35,\n  560,\n  8,\n  35,\n  10,\n  35,\n  12,\n  35,\n  563,\n  9,\n  35,\n  3,\n  35,\n  565,\n  8,\n  35,\n  1,\n  35,\n  1,\n  35,\n  1,\n  36,\n  1,\n  36,\n  3,\n  36,\n  571,\n  8,\n  36,\n  1,\n  37,\n  1,\n  37,\n  3,\n  37,\n  575,\n  8,\n  37,\n  1,\n  37,\n  1,\n  37,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  3,\n  38,\n  586,\n  8,\n  38,\n  1,\n  38,\n  1,\n  38,\n  1,\n  38,\n  3,\n  38,\n  591,\n  8,\n  38,\n  1,\n  38,\n  5,\n  38,\n  594,\n  8,\n  38,\n  10,\n  38,\n  12,\n  38,\n  597,\n  9,\n  38,\n  1,\n  39,\n  1,\n  39,\n  1,\n  39,\n  5,\n  39,\n  602,\n  8,\n  39,\n  10,\n  39,\n  12,\n  39,\n  605,\n  9,\n  39,\n  1,\n  40,\n  1,\n  40,\n  3,\n  40,\n  609,\n  8,\n  40,\n  1,\n  41,\n  1,\n  41,\n  1,\n  41,\n  1,\n  41,\n  3,\n  41,\n  615,\n  8,\n  41,\n  1,\n  41,\n  1,\n  41,\n  1,\n  41,\n  3,\n  41,\n  620,\n  8,\n  41,\n  1,\n  41,\n  1,\n  41,\n  1,\n  42,\n  1,\n  42,\n  1,\n  43,\n  1,\n  43,\n  1,\n  44,\n  1,\n  44,\n  1,\n  44,\n  1,\n  44,\n  1,\n  44,\n  5,\n  44,\n  633,\n  8,\n  44,\n  10,\n  44,\n  12,\n  44,\n  636,\n  9,\n  44,\n  1,\n  44,\n  1,\n  44,\n  3,\n  44,\n  640,\n  8,\n  44,\n  1,\n  45,\n  1,\n  45,\n  1,\n  46,\n  1,\n  46,\n  1,\n  47,\n  1,\n  47,\n  5,\n  47,\n  648,\n  8,\n  47,\n  10,\n  47,\n  12,\n  47,\n  651,\n  9,\n  47,\n  1,\n  47,\n  1,\n  47,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  1,\n  48,\n  3,\n  48,\n  670,\n  8,\n  48,\n  1,\n  49,\n  1,\n  49,\n  1,\n  49,\n  1,\n  50,\n  1,\n  50,\n  1,\n  50,\n  1,\n  50,\n  1,\n  50,\n  1,\n  50,\n  1,\n  50,\n  3,\n  50,\n  682,\n  8,\n  50,\n  1,\n  51,\n  1,\n  51,\n  1,\n  51,\n  3,\n  51,\n  687,\n  8,\n  51,\n  1,\n  51,\n  1,\n  51,\n  4,\n  51,\n  691,\n  8,\n  51,\n  11,\n  51,\n  12,\n  51,\n  692,\n  1,\n  52,\n  1,\n  52,\n  3,\n  52,\n  697,\n  8,\n  52,\n  1,\n  52,\n  3,\n  52,\n  700,\n  8,\n  52,\n  1,\n  52,\n  1,\n  52,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  53,\n  1,\n  54,\n  1,\n  54,\n  3,\n  54,\n  712,\n  8,\n  54,\n  1,\n  55,\n  1,\n  55,\n  1,\n  55,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  3,\n  56,\n  721,\n  8,\n  56,\n  1,\n  56,\n  1,\n  56,\n  3,\n  56,\n  725,\n  8,\n  56,\n  1,\n  56,\n  3,\n  56,\n  728,\n  8,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  56,\n  1,\n  57,\n  1,\n  57,\n  3,\n  57,\n  735,\n  8,\n  57,\n  1,\n  57,\n  1,\n  57,\n  1,\n  57,\n  1,\n  57,\n  3,\n  57,\n  741,\n  8,\n  57,\n  1,\n  57,\n  1,\n  57,\n  1,\n  58,\n  1,\n  58,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  59,\n  1,\n  60,\n  1,\n  60,\n  1,\n  60,\n  1,\n  61,\n  1,\n  61,\n  1,\n  61,\n  1,\n  62,\n  1,\n  62,\n  3,\n  62,\n  763,\n  8,\n  62,\n  1,\n  62,\n  1,\n  62,\n  1,\n  63,\n  1,\n  63,\n  1,\n  63,\n  1,\n  64,\n  1,\n  64,\n  1,\n  64,\n  1,\n  64,\n  1,\n  65,\n  1,\n  65,\n  1,\n  65,\n  1,\n  65,\n  1,\n  66,\n  1,\n  66,\n  1,\n  66,\n  1,\n  66,\n  1,\n  66,\n  1,\n  66,\n  1,\n  66,\n  3,\n  66,\n  785,\n  8,\n  66,\n  1,\n  66,\n  1,\n  66,\n  3,\n  66,\n  789,\n  8,\n  66,\n  1,\n  66,\n  1,\n  66,\n  1,\n  67,\n  3,\n  67,\n  794,\n  8,\n  67,\n  1,\n  67,\n  1,\n  67,\n  3,\n  67,\n  798,\n  8,\n  67,\n  5,\n  67,\n  800,\n  8,\n  67,\n  10,\n  67,\n  12,\n  67,\n  803,\n  9,\n  67,\n  1,\n  68,\n  1,\n  68,\n  3,\n  68,\n  807,\n  8,\n  68,\n  1,\n  68,\n  5,\n  68,\n  810,\n  8,\n  68,\n  10,\n  68,\n  12,\n  68,\n  813,\n  9,\n  68,\n  1,\n  68,\n  3,\n  68,\n  816,\n  8,\n  68,\n  1,\n  68,\n  1,\n  68,\n  1,\n  69,\n  1,\n  69,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  3,\n  70,\n  840,\n  8,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  3,\n  70,\n  894,\n  8,\n  70,\n  1,\n  70,\n  1,\n  70,\n  3,\n  70,\n  898,\n  8,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  1,\n  70,\n  5,\n  70,\n  914,\n  8,\n  70,\n  10,\n  70,\n  12,\n  70,\n  917,\n  9,\n  70,\n  1,\n  71,\n  1,\n  71,\n  1,\n  71,\n  1,\n  71,\n  1,\n  71,\n  1,\n  71,\n  1,\n  71,\n  1,\n  71,\n  1,\n  71,\n  3,\n  71,\n  928,\n  8,\n  71,\n  1,\n  72,\n  1,\n  72,\n  1,\n  72,\n  5,\n  72,\n  933,\n  8,\n  72,\n  10,\n  72,\n  12,\n  72,\n  936,\n  9,\n  72,\n  1,\n  73,\n  1,\n  73,\n  1,\n  73,\n  5,\n  73,\n  941,\n  8,\n  73,\n  10,\n  73,\n  12,\n  73,\n  944,\n  9,\n  73,\n  1,\n  73,\n  3,\n  73,\n  947,\n  8,\n  73,\n  1,\n  74,\n  1,\n  74,\n  1,\n  74,\n  1,\n  74,\n  1,\n  75,\n  1,\n  75,\n  3,\n  75,\n  955,\n  8,\n  75,\n  1,\n  75,\n  1,\n  75,\n  3,\n  75,\n  959,\n  8,\n  75,\n  3,\n  75,\n  961,\n  8,\n  75,\n  1,\n  76,\n  1,\n  76,\n  1,\n  76,\n  1,\n  76,\n  1,\n  76,\n  1,\n  77,\n  1,\n  77,\n  5,\n  77,\n  970,\n  8,\n  77,\n  10,\n  77,\n  12,\n  77,\n  973,\n  9,\n  77,\n  1,\n  77,\n  1,\n  77,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  1,\n  78,\n  3,\n  78,\n  994,\n  8,\n  78,\n  1,\n  79,\n  1,\n  79,\n  1,\n  79,\n  3,\n  79,\n  999,\n  8,\n  79,\n  1,\n  80,\n  1,\n  80,\n  1,\n  80,\n  1,\n  80,\n  1,\n  81,\n  1,\n  81,\n  1,\n  81,\n  1,\n  81,\n  3,\n  81,\n  1009,\n  8,\n  81,\n  1,\n  81,\n  1,\n  81,\n  3,\n  81,\n  1013,\n  8,\n  81,\n  1,\n  81,\n  1,\n  81,\n  5,\n  81,\n  1017,\n  8,\n  81,\n  10,\n  81,\n  12,\n  81,\n  1020,\n  9,\n  81,\n  1,\n  81,\n  3,\n  81,\n  1023,\n  8,\n  81,\n  1,\n  82,\n  1,\n  82,\n  1,\n  82,\n  1,\n  82,\n  3,\n  82,\n  1029,\n  8,\n  82,\n  1,\n  83,\n  1,\n  83,\n  1,\n  83,\n  1,\n  83,\n  1,\n  84,\n  1,\n  84,\n  1,\n  84,\n  1,\n  84,\n  1,\n  84,\n  1,\n  84,\n  1,\n  84,\n  3,\n  84,\n  1042,\n  8,\n  84,\n  1,\n  85,\n  1,\n  85,\n  1,\n  85,\n  5,\n  85,\n  1047,\n  8,\n  85,\n  10,\n  85,\n  12,\n  85,\n  1050,\n  9,\n  85,\n  1,\n  86,\n  1,\n  86,\n  1,\n  86,\n  1,\n  86,\n  1,\n  87,\n  1,\n  87,\n  1,\n  87,\n  1,\n  88,\n  1,\n  88,\n  1,\n  88,\n  5,\n  88,\n  1062,\n  8,\n  88,\n  10,\n  88,\n  12,\n  88,\n  1065,\n  9,\n  88,\n  1,\n  89,\n  1,\n  89,\n  1,\n  89,\n  1,\n  89,\n  1,\n  89,\n  1,\n  89,\n  3,\n  89,\n  1073,\n  8,\n  89,\n  1,\n  90,\n  1,\n  90,\n  1,\n  90,\n  1,\n  90,\n  3,\n  90,\n  1079,\n  8,\n  90,\n  1,\n  90,\n  1,\n  90,\n  3,\n  90,\n  1083,\n  8,\n  90,\n  1,\n  90,\n  1,\n  90,\n  1,\n  91,\n  1,\n  91,\n  1,\n  91,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  3,\n  92,\n  1093,\n  8,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  92,\n  3,\n  92,\n  1098,\n  8,\n  92,\n  1,\n  92,\n  1,\n  92,\n  1,\n  93,\n  1,\n  93,\n  1,\n  93,\n  1,\n  93,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  1,\n  94,\n  3,\n  94,\n  1111,\n  8,\n  94,\n  1,\n  95,\n  1,\n  95,\n  3,\n  95,\n  1115,\n  8,\n  95,\n  1,\n  95,\n  1,\n  95,\n  3,\n  95,\n  1119,\n  8,\n  95,\n  5,\n  95,\n  1121,\n  8,\n  95,\n  10,\n  95,\n  12,\n  95,\n  1124,\n  9,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  1,\n  95,\n  5,\n  95,\n  1131,\n  8,\n  95,\n  10,\n  95,\n  12,\n  95,\n  1134,\n  9,\n  95,\n  3,\n  95,\n  1136,\n  8,\n  95,\n  1,\n  95,\n  3,\n  95,\n  1139,\n  8,\n  95,\n  1,\n  96,\n  1,\n  96,\n  3,\n  96,\n  1143,\n  8,\n  96,\n  1,\n  97,\n  1,\n  97,\n  1,\n  98,\n  4,\n  98,\n  1148,\n  8,\n  98,\n  11,\n  98,\n  12,\n  98,\n  1149,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  1,\n  99,\n  5,\n  99,\n  1157,\n  8,\n  99,\n  10,\n  99,\n  12,\n  99,\n  1160,\n  9,\n  99,\n  1,\n  99,\n  1,\n  99,\n  3,\n  99,\n  1164,\n  8,\n  99,\n  1,\n  100,\n  4,\n  100,\n  1167,\n  8,\n  100,\n  11,\n  100,\n  12,\n  100,\n  1168,\n  1,\n  100,\n  0,\n  2,\n  76,\n  140,\n  101,\n  0,\n  2,\n  4,\n  6,\n  8,\n  10,\n  12,\n  14,\n  16,\n  18,\n  20,\n  22,\n  24,\n  26,\n  28,\n  30,\n  32,\n  34,\n  36,\n  38,\n  40,\n  42,\n  44,\n  46,\n  48,\n  50,\n  52,\n  54,\n  56,\n  58,\n  60,\n  62,\n  64,\n  66,\n  68,\n  70,\n  72,\n  74,\n  76,\n  78,\n  80,\n  82,\n  84,\n  86,\n  88,\n  90,\n  92,\n  94,\n  96,\n  98,\n  100,\n  102,\n  104,\n  106,\n  108,\n  110,\n  112,\n  114,\n  116,\n  118,\n  120,\n  122,\n  124,\n  126,\n  128,\n  130,\n  132,\n  134,\n  136,\n  138,\n  140,\n  142,\n  144,\n  146,\n  148,\n  150,\n  152,\n  154,\n  156,\n  158,\n  160,\n  162,\n  164,\n  166,\n  168,\n  170,\n  172,\n  174,\n  176,\n  178,\n  180,\n  182,\n  184,\n  186,\n  188,\n  190,\n  192,\n  194,\n  196,\n  198,\n  200,\n  0,\n  15,\n  1,\n  0,\n  5,\n  11,\n  1,\n  0,\n  19,\n  21,\n  3,\n  0,\n  3,\n  3,\n  5,\n  10,\n  28,\n  35,\n  1,\n  0,\n  48,\n  50,\n  4,\n  0,\n  110,\n  110,\n  118,\n  118,\n  122,\n  122,\n  124,\n  124,\n  3,\n  0,\n  44,\n  44,\n  63,\n  66,\n  97,\n  101,\n  1,\n  0,\n  67,\n  68,\n  1,\n  0,\n  30,\n  31,\n  2,\n  0,\n  3,\n  3,\n  32,\n  33,\n  1,\n  0,\n  74,\n  75,\n  1,\n  0,\n  7,\n  10,\n  1,\n  0,\n  34,\n  35,\n  2,\n  0,\n  11,\n  11,\n  78,\n  87,\n  1,\n  0,\n  103,\n  104,\n  10,\n  0,\n  14,\n  14,\n  25,\n  25,\n  44,\n  44,\n  50,\n  50,\n  62,\n  62,\n  95,\n  95,\n  114,\n  114,\n  118,\n  118,\n  125,\n  126,\n  128,\n  129,\n  1301,\n  0,\n  215,\n  1,\n  0,\n  0,\n  0,\n  2,\n  220,\n  1,\n  0,\n  0,\n  0,\n  4,\n  225,\n  1,\n  0,\n  0,\n  0,\n  6,\n  230,\n  1,\n  0,\n  0,\n  0,\n  8,\n  232,\n  1,\n  0,\n  0,\n  0,\n  10,\n  242,\n  1,\n  0,\n  0,\n  0,\n  12,\n  252,\n  1,\n  0,\n  0,\n  0,\n  14,\n  254,\n  1,\n  0,\n  0,\n  0,\n  16,\n  295,\n  1,\n  0,\n  0,\n  0,\n  18,\n  297,\n  1,\n  0,\n  0,\n  0,\n  20,\n  300,\n  1,\n  0,\n  0,\n  0,\n  22,\n  324,\n  1,\n  0,\n  0,\n  0,\n  24,\n  341,\n  1,\n  0,\n  0,\n  0,\n  26,\n  343,\n  1,\n  0,\n  0,\n  0,\n  28,\n  363,\n  1,\n  0,\n  0,\n  0,\n  30,\n  370,\n  1,\n  0,\n  0,\n  0,\n  32,\n  375,\n  1,\n  0,\n  0,\n  0,\n  34,\n  381,\n  1,\n  0,\n  0,\n  0,\n  36,\n  405,\n  1,\n  0,\n  0,\n  0,\n  38,\n  407,\n  1,\n  0,\n  0,\n  0,\n  40,\n  412,\n  1,\n  0,\n  0,\n  0,\n  42,\n  414,\n  1,\n  0,\n  0,\n  0,\n  44,\n  431,\n  1,\n  0,\n  0,\n  0,\n  46,\n  447,\n  1,\n  0,\n  0,\n  0,\n  48,\n  455,\n  1,\n  0,\n  0,\n  0,\n  50,\n  472,\n  1,\n  0,\n  0,\n  0,\n  52,\n  474,\n  1,\n  0,\n  0,\n  0,\n  54,\n  487,\n  1,\n  0,\n  0,\n  0,\n  56,\n  490,\n  1,\n  0,\n  0,\n  0,\n  58,\n  498,\n  1,\n  0,\n  0,\n  0,\n  60,\n  500,\n  1,\n  0,\n  0,\n  0,\n  62,\n  515,\n  1,\n  0,\n  0,\n  0,\n  64,\n  528,\n  1,\n  0,\n  0,\n  0,\n  66,\n  535,\n  1,\n  0,\n  0,\n  0,\n  68,\n  548,\n  1,\n  0,\n  0,\n  0,\n  70,\n  555,\n  1,\n  0,\n  0,\n  0,\n  72,\n  568,\n  1,\n  0,\n  0,\n  0,\n  74,\n  572,\n  1,\n  0,\n  0,\n  0,\n  76,\n  585,\n  1,\n  0,\n  0,\n  0,\n  78,\n  598,\n  1,\n  0,\n  0,\n  0,\n  80,\n  608,\n  1,\n  0,\n  0,\n  0,\n  82,\n  610,\n  1,\n  0,\n  0,\n  0,\n  84,\n  623,\n  1,\n  0,\n  0,\n  0,\n  86,\n  625,\n  1,\n  0,\n  0,\n  0,\n  88,\n  627,\n  1,\n  0,\n  0,\n  0,\n  90,\n  641,\n  1,\n  0,\n  0,\n  0,\n  92,\n  643,\n  1,\n  0,\n  0,\n  0,\n  94,\n  645,\n  1,\n  0,\n  0,\n  0,\n  96,\n  669,\n  1,\n  0,\n  0,\n  0,\n  98,\n  671,\n  1,\n  0,\n  0,\n  0,\n  100,\n  674,\n  1,\n  0,\n  0,\n  0,\n  102,\n  683,\n  1,\n  0,\n  0,\n  0,\n  104,\n  694,\n  1,\n  0,\n  0,\n  0,\n  106,\n  703,\n  1,\n  0,\n  0,\n  0,\n  108,\n  711,\n  1,\n  0,\n  0,\n  0,\n  110,\n  713,\n  1,\n  0,\n  0,\n  0,\n  112,\n  716,\n  1,\n  0,\n  0,\n  0,\n  114,\n  732,\n  1,\n  0,\n  0,\n  0,\n  116,\n  744,\n  1,\n  0,\n  0,\n  0,\n  118,\n  746,\n  1,\n  0,\n  0,\n  0,\n  120,\n  754,\n  1,\n  0,\n  0,\n  0,\n  122,\n  757,\n  1,\n  0,\n  0,\n  0,\n  124,\n  760,\n  1,\n  0,\n  0,\n  0,\n  126,\n  766,\n  1,\n  0,\n  0,\n  0,\n  128,\n  769,\n  1,\n  0,\n  0,\n  0,\n  130,\n  773,\n  1,\n  0,\n  0,\n  0,\n  132,\n  784,\n  1,\n  0,\n  0,\n  0,\n  134,\n  793,\n  1,\n  0,\n  0,\n  0,\n  136,\n  804,\n  1,\n  0,\n  0,\n  0,\n  138,\n  819,\n  1,\n  0,\n  0,\n  0,\n  140,\n  839,\n  1,\n  0,\n  0,\n  0,\n  142,\n  927,\n  1,\n  0,\n  0,\n  0,\n  144,\n  929,\n  1,\n  0,\n  0,\n  0,\n  146,\n  937,\n  1,\n  0,\n  0,\n  0,\n  148,\n  948,\n  1,\n  0,\n  0,\n  0,\n  150,\n  960,\n  1,\n  0,\n  0,\n  0,\n  152,\n  962,\n  1,\n  0,\n  0,\n  0,\n  154,\n  967,\n  1,\n  0,\n  0,\n  0,\n  156,\n  993,\n  1,\n  0,\n  0,\n  0,\n  158,\n  998,\n  1,\n  0,\n  0,\n  0,\n  160,\n  1e3,\n  1,\n  0,\n  0,\n  0,\n  162,\n  1008,\n  1,\n  0,\n  0,\n  0,\n  164,\n  1024,\n  1,\n  0,\n  0,\n  0,\n  166,\n  1030,\n  1,\n  0,\n  0,\n  0,\n  168,\n  1041,\n  1,\n  0,\n  0,\n  0,\n  170,\n  1043,\n  1,\n  0,\n  0,\n  0,\n  172,\n  1051,\n  1,\n  0,\n  0,\n  0,\n  174,\n  1055,\n  1,\n  0,\n  0,\n  0,\n  176,\n  1058,\n  1,\n  0,\n  0,\n  0,\n  178,\n  1072,\n  1,\n  0,\n  0,\n  0,\n  180,\n  1074,\n  1,\n  0,\n  0,\n  0,\n  182,\n  1086,\n  1,\n  0,\n  0,\n  0,\n  184,\n  1089,\n  1,\n  0,\n  0,\n  0,\n  186,\n  1101,\n  1,\n  0,\n  0,\n  0,\n  188,\n  1110,\n  1,\n  0,\n  0,\n  0,\n  190,\n  1138,\n  1,\n  0,\n  0,\n  0,\n  192,\n  1140,\n  1,\n  0,\n  0,\n  0,\n  194,\n  1144,\n  1,\n  0,\n  0,\n  0,\n  196,\n  1147,\n  1,\n  0,\n  0,\n  0,\n  198,\n  1151,\n  1,\n  0,\n  0,\n  0,\n  200,\n  1166,\n  1,\n  0,\n  0,\n  0,\n  202,\n  214,\n  3,\n  2,\n  1,\n  0,\n  203,\n  214,\n  3,\n  16,\n  8,\n  0,\n  204,\n  214,\n  3,\n  20,\n  10,\n  0,\n  205,\n  214,\n  3,\n  60,\n  30,\n  0,\n  206,\n  214,\n  3,\n  56,\n  28,\n  0,\n  207,\n  214,\n  3,\n  42,\n  21,\n  0,\n  208,\n  214,\n  3,\n  48,\n  24,\n  0,\n  209,\n  214,\n  3,\n  28,\n  14,\n  0,\n  210,\n  214,\n  3,\n  30,\n  15,\n  0,\n  211,\n  214,\n  3,\n  32,\n  16,\n  0,\n  212,\n  214,\n  3,\n  34,\n  17,\n  0,\n  213,\n  202,\n  1,\n  0,\n  0,\n  0,\n  213,\n  203,\n  1,\n  0,\n  0,\n  0,\n  213,\n  204,\n  1,\n  0,\n  0,\n  0,\n  213,\n  205,\n  1,\n  0,\n  0,\n  0,\n  213,\n  206,\n  1,\n  0,\n  0,\n  0,\n  213,\n  207,\n  1,\n  0,\n  0,\n  0,\n  213,\n  208,\n  1,\n  0,\n  0,\n  0,\n  213,\n  209,\n  1,\n  0,\n  0,\n  0,\n  213,\n  210,\n  1,\n  0,\n  0,\n  0,\n  213,\n  211,\n  1,\n  0,\n  0,\n  0,\n  213,\n  212,\n  1,\n  0,\n  0,\n  0,\n  214,\n  217,\n  1,\n  0,\n  0,\n  0,\n  215,\n  213,\n  1,\n  0,\n  0,\n  0,\n  215,\n  216,\n  1,\n  0,\n  0,\n  0,\n  216,\n  218,\n  1,\n  0,\n  0,\n  0,\n  217,\n  215,\n  1,\n  0,\n  0,\n  0,\n  218,\n  219,\n  5,\n  0,\n  0,\n  1,\n  219,\n  1,\n  1,\n  0,\n  0,\n  0,\n  220,\n  221,\n  5,\n  1,\n  0,\n  0,\n  221,\n  222,\n  3,\n  4,\n  2,\n  0,\n  222,\n  223,\n  3,\n  6,\n  3,\n  0,\n  223,\n  224,\n  5,\n  2,\n  0,\n  0,\n  224,\n  3,\n  1,\n  0,\n  0,\n  0,\n  225,\n  226,\n  3,\n  194,\n  97,\n  0,\n  226,\n  5,\n  1,\n  0,\n  0,\n  0,\n  227,\n  231,\n  5,\n  3,\n  0,\n  0,\n  228,\n  231,\n  3,\n  8,\n  4,\n  0,\n  229,\n  231,\n  3,\n  140,\n  70,\n  0,\n  230,\n  227,\n  1,\n  0,\n  0,\n  0,\n  230,\n  228,\n  1,\n  0,\n  0,\n  0,\n  230,\n  229,\n  1,\n  0,\n  0,\n  0,\n  231,\n  7,\n  1,\n  0,\n  0,\n  0,\n  232,\n  239,\n  3,\n  12,\n  6,\n  0,\n  233,\n  235,\n  5,\n  4,\n  0,\n  0,\n  234,\n  233,\n  1,\n  0,\n  0,\n  0,\n  234,\n  235,\n  1,\n  0,\n  0,\n  0,\n  235,\n  236,\n  1,\n  0,\n  0,\n  0,\n  236,\n  238,\n  3,\n  12,\n  6,\n  0,\n  237,\n  234,\n  1,\n  0,\n  0,\n  0,\n  238,\n  241,\n  1,\n  0,\n  0,\n  0,\n  239,\n  237,\n  1,\n  0,\n  0,\n  0,\n  239,\n  240,\n  1,\n  0,\n  0,\n  0,\n  240,\n  9,\n  1,\n  0,\n  0,\n  0,\n  241,\n  239,\n  1,\n  0,\n  0,\n  0,\n  242,\n  243,\n  7,\n  0,\n  0,\n  0,\n  243,\n  11,\n  1,\n  0,\n  0,\n  0,\n  244,\n  246,\n  3,\n  10,\n  5,\n  0,\n  245,\n  244,\n  1,\n  0,\n  0,\n  0,\n  245,\n  246,\n  1,\n  0,\n  0,\n  0,\n  246,\n  247,\n  1,\n  0,\n  0,\n  0,\n  247,\n  253,\n  5,\n  131,\n  0,\n  0,\n  248,\n  250,\n  3,\n  10,\n  5,\n  0,\n  249,\n  248,\n  1,\n  0,\n  0,\n  0,\n  249,\n  250,\n  1,\n  0,\n  0,\n  0,\n  250,\n  251,\n  1,\n  0,\n  0,\n  0,\n  251,\n  253,\n  5,\n  103,\n  0,\n  0,\n  252,\n  245,\n  1,\n  0,\n  0,\n  0,\n  252,\n  249,\n  1,\n  0,\n  0,\n  0,\n  253,\n  13,\n  1,\n  0,\n  0,\n  0,\n  254,\n  257,\n  3,\n  194,\n  97,\n  0,\n  255,\n  256,\n  5,\n  12,\n  0,\n  0,\n  256,\n  258,\n  3,\n  194,\n  97,\n  0,\n  257,\n  255,\n  1,\n  0,\n  0,\n  0,\n  257,\n  258,\n  1,\n  0,\n  0,\n  0,\n  258,\n  15,\n  1,\n  0,\n  0,\n  0,\n  259,\n  260,\n  5,\n  13,\n  0,\n  0,\n  260,\n  263,\n  3,\n  18,\n  9,\n  0,\n  261,\n  262,\n  5,\n  12,\n  0,\n  0,\n  262,\n  264,\n  3,\n  194,\n  97,\n  0,\n  263,\n  261,\n  1,\n  0,\n  0,\n  0,\n  263,\n  264,\n  1,\n  0,\n  0,\n  0,\n  264,\n  265,\n  1,\n  0,\n  0,\n  0,\n  265,\n  266,\n  5,\n  2,\n  0,\n  0,\n  266,\n  296,\n  1,\n  0,\n  0,\n  0,\n  267,\n  270,\n  5,\n  13,\n  0,\n  0,\n  268,\n  271,\n  5,\n  3,\n  0,\n  0,\n  269,\n  271,\n  3,\n  194,\n  97,\n  0,\n  270,\n  268,\n  1,\n  0,\n  0,\n  0,\n  270,\n  269,\n  1,\n  0,\n  0,\n  0,\n  271,\n  274,\n  1,\n  0,\n  0,\n  0,\n  272,\n  273,\n  5,\n  12,\n  0,\n  0,\n  273,\n  275,\n  3,\n  194,\n  97,\n  0,\n  274,\n  272,\n  1,\n  0,\n  0,\n  0,\n  274,\n  275,\n  1,\n  0,\n  0,\n  0,\n  275,\n  276,\n  1,\n  0,\n  0,\n  0,\n  276,\n  277,\n  5,\n  14,\n  0,\n  0,\n  277,\n  278,\n  3,\n  18,\n  9,\n  0,\n  278,\n  279,\n  5,\n  2,\n  0,\n  0,\n  279,\n  296,\n  1,\n  0,\n  0,\n  0,\n  280,\n  281,\n  5,\n  13,\n  0,\n  0,\n  281,\n  282,\n  5,\n  15,\n  0,\n  0,\n  282,\n  287,\n  3,\n  14,\n  7,\n  0,\n  283,\n  284,\n  5,\n  16,\n  0,\n  0,\n  284,\n  286,\n  3,\n  14,\n  7,\n  0,\n  285,\n  283,\n  1,\n  0,\n  0,\n  0,\n  286,\n  289,\n  1,\n  0,\n  0,\n  0,\n  287,\n  285,\n  1,\n  0,\n  0,\n  0,\n  287,\n  288,\n  1,\n  0,\n  0,\n  0,\n  288,\n  290,\n  1,\n  0,\n  0,\n  0,\n  289,\n  287,\n  1,\n  0,\n  0,\n  0,\n  290,\n  291,\n  5,\n  17,\n  0,\n  0,\n  291,\n  292,\n  5,\n  14,\n  0,\n  0,\n  292,\n  293,\n  3,\n  18,\n  9,\n  0,\n  293,\n  294,\n  5,\n  2,\n  0,\n  0,\n  294,\n  296,\n  1,\n  0,\n  0,\n  0,\n  295,\n  259,\n  1,\n  0,\n  0,\n  0,\n  295,\n  267,\n  1,\n  0,\n  0,\n  0,\n  295,\n  280,\n  1,\n  0,\n  0,\n  0,\n  296,\n  17,\n  1,\n  0,\n  0,\n  0,\n  297,\n  298,\n  5,\n  130,\n  0,\n  0,\n  298,\n  19,\n  1,\n  0,\n  0,\n  0,\n  299,\n  301,\n  5,\n  18,\n  0,\n  0,\n  300,\n  299,\n  1,\n  0,\n  0,\n  0,\n  300,\n  301,\n  1,\n  0,\n  0,\n  0,\n  301,\n  302,\n  1,\n  0,\n  0,\n  0,\n  302,\n  303,\n  7,\n  1,\n  0,\n  0,\n  303,\n  313,\n  3,\n  194,\n  97,\n  0,\n  304,\n  305,\n  5,\n  22,\n  0,\n  0,\n  305,\n  310,\n  3,\n  22,\n  11,\n  0,\n  306,\n  307,\n  5,\n  16,\n  0,\n  0,\n  307,\n  309,\n  3,\n  22,\n  11,\n  0,\n  308,\n  306,\n  1,\n  0,\n  0,\n  0,\n  309,\n  312,\n  1,\n  0,\n  0,\n  0,\n  310,\n  308,\n  1,\n  0,\n  0,\n  0,\n  310,\n  311,\n  1,\n  0,\n  0,\n  0,\n  311,\n  314,\n  1,\n  0,\n  0,\n  0,\n  312,\n  310,\n  1,\n  0,\n  0,\n  0,\n  313,\n  304,\n  1,\n  0,\n  0,\n  0,\n  313,\n  314,\n  1,\n  0,\n  0,\n  0,\n  314,\n  315,\n  1,\n  0,\n  0,\n  0,\n  315,\n  319,\n  5,\n  15,\n  0,\n  0,\n  316,\n  318,\n  3,\n  24,\n  12,\n  0,\n  317,\n  316,\n  1,\n  0,\n  0,\n  0,\n  318,\n  321,\n  1,\n  0,\n  0,\n  0,\n  319,\n  317,\n  1,\n  0,\n  0,\n  0,\n  319,\n  320,\n  1,\n  0,\n  0,\n  0,\n  320,\n  322,\n  1,\n  0,\n  0,\n  0,\n  321,\n  319,\n  1,\n  0,\n  0,\n  0,\n  322,\n  323,\n  5,\n  17,\n  0,\n  0,\n  323,\n  21,\n  1,\n  0,\n  0,\n  0,\n  324,\n  330,\n  3,\n  78,\n  39,\n  0,\n  325,\n  327,\n  5,\n  23,\n  0,\n  0,\n  326,\n  328,\n  3,\n  144,\n  72,\n  0,\n  327,\n  326,\n  1,\n  0,\n  0,\n  0,\n  327,\n  328,\n  1,\n  0,\n  0,\n  0,\n  328,\n  329,\n  1,\n  0,\n  0,\n  0,\n  329,\n  331,\n  5,\n  24,\n  0,\n  0,\n  330,\n  325,\n  1,\n  0,\n  0,\n  0,\n  330,\n  331,\n  1,\n  0,\n  0,\n  0,\n  331,\n  23,\n  1,\n  0,\n  0,\n  0,\n  332,\n  342,\n  3,\n  26,\n  13,\n  0,\n  333,\n  342,\n  3,\n  34,\n  17,\n  0,\n  334,\n  342,\n  3,\n  42,\n  21,\n  0,\n  335,\n  342,\n  3,\n  44,\n  22,\n  0,\n  336,\n  342,\n  3,\n  48,\n  24,\n  0,\n  337,\n  342,\n  3,\n  56,\n  28,\n  0,\n  338,\n  342,\n  3,\n  60,\n  30,\n  0,\n  339,\n  342,\n  3,\n  30,\n  15,\n  0,\n  340,\n  342,\n  3,\n  32,\n  16,\n  0,\n  341,\n  332,\n  1,\n  0,\n  0,\n  0,\n  341,\n  333,\n  1,\n  0,\n  0,\n  0,\n  341,\n  334,\n  1,\n  0,\n  0,\n  0,\n  341,\n  335,\n  1,\n  0,\n  0,\n  0,\n  341,\n  336,\n  1,\n  0,\n  0,\n  0,\n  341,\n  337,\n  1,\n  0,\n  0,\n  0,\n  341,\n  338,\n  1,\n  0,\n  0,\n  0,\n  341,\n  339,\n  1,\n  0,\n  0,\n  0,\n  341,\n  340,\n  1,\n  0,\n  0,\n  0,\n  342,\n  25,\n  1,\n  0,\n  0,\n  0,\n  343,\n  353,\n  3,\n  76,\n  38,\n  0,\n  344,\n  352,\n  5,\n  120,\n  0,\n  0,\n  345,\n  352,\n  5,\n  117,\n  0,\n  0,\n  346,\n  352,\n  5,\n  119,\n  0,\n  0,\n  347,\n  352,\n  5,\n  110,\n  0,\n  0,\n  348,\n  352,\n  5,\n  111,\n  0,\n  0,\n  349,\n  352,\n  5,\n  112,\n  0,\n  0,\n  350,\n  352,\n  3,\n  198,\n  99,\n  0,\n  351,\n  344,\n  1,\n  0,\n  0,\n  0,\n  351,\n  345,\n  1,\n  0,\n  0,\n  0,\n  351,\n  346,\n  1,\n  0,\n  0,\n  0,\n  351,\n  347,\n  1,\n  0,\n  0,\n  0,\n  351,\n  348,\n  1,\n  0,\n  0,\n  0,\n  351,\n  349,\n  1,\n  0,\n  0,\n  0,\n  351,\n  350,\n  1,\n  0,\n  0,\n  0,\n  352,\n  355,\n  1,\n  0,\n  0,\n  0,\n  353,\n  351,\n  1,\n  0,\n  0,\n  0,\n  353,\n  354,\n  1,\n  0,\n  0,\n  0,\n  354,\n  356,\n  1,\n  0,\n  0,\n  0,\n  355,\n  353,\n  1,\n  0,\n  0,\n  0,\n  356,\n  359,\n  3,\n  194,\n  97,\n  0,\n  357,\n  358,\n  5,\n  11,\n  0,\n  0,\n  358,\n  360,\n  3,\n  140,\n  70,\n  0,\n  359,\n  357,\n  1,\n  0,\n  0,\n  0,\n  359,\n  360,\n  1,\n  0,\n  0,\n  0,\n  360,\n  361,\n  1,\n  0,\n  0,\n  0,\n  361,\n  362,\n  5,\n  2,\n  0,\n  0,\n  362,\n  27,\n  1,\n  0,\n  0,\n  0,\n  363,\n  364,\n  3,\n  76,\n  38,\n  0,\n  364,\n  365,\n  5,\n  110,\n  0,\n  0,\n  365,\n  366,\n  3,\n  194,\n  97,\n  0,\n  366,\n  367,\n  5,\n  11,\n  0,\n  0,\n  367,\n  368,\n  3,\n  140,\n  70,\n  0,\n  368,\n  369,\n  5,\n  2,\n  0,\n  0,\n  369,\n  29,\n  1,\n  0,\n  0,\n  0,\n  370,\n  371,\n  5,\n  25,\n  0,\n  0,\n  371,\n  372,\n  3,\n  194,\n  97,\n  0,\n  372,\n  373,\n  3,\n  62,\n  31,\n  0,\n  373,\n  374,\n  5,\n  2,\n  0,\n  0,\n  374,\n  31,\n  1,\n  0,\n  0,\n  0,\n  375,\n  376,\n  5,\n  123,\n  0,\n  0,\n  376,\n  377,\n  3,\n  194,\n  97,\n  0,\n  377,\n  378,\n  5,\n  22,\n  0,\n  0,\n  378,\n  379,\n  3,\n  138,\n  69,\n  0,\n  379,\n  380,\n  5,\n  2,\n  0,\n  0,\n  380,\n  33,\n  1,\n  0,\n  0,\n  0,\n  381,\n  382,\n  5,\n  26,\n  0,\n  0,\n  382,\n  383,\n  3,\n  36,\n  18,\n  0,\n  383,\n  386,\n  5,\n  27,\n  0,\n  0,\n  384,\n  387,\n  5,\n  3,\n  0,\n  0,\n  385,\n  387,\n  3,\n  76,\n  38,\n  0,\n  386,\n  384,\n  1,\n  0,\n  0,\n  0,\n  386,\n  385,\n  1,\n  0,\n  0,\n  0,\n  387,\n  389,\n  1,\n  0,\n  0,\n  0,\n  388,\n  390,\n  5,\n  125,\n  0,\n  0,\n  389,\n  388,\n  1,\n  0,\n  0,\n  0,\n  389,\n  390,\n  1,\n  0,\n  0,\n  0,\n  390,\n  391,\n  1,\n  0,\n  0,\n  0,\n  391,\n  392,\n  5,\n  2,\n  0,\n  0,\n  392,\n  35,\n  1,\n  0,\n  0,\n  0,\n  393,\n  406,\n  3,\n  78,\n  39,\n  0,\n  394,\n  395,\n  5,\n  15,\n  0,\n  0,\n  395,\n  400,\n  3,\n  38,\n  19,\n  0,\n  396,\n  397,\n  5,\n  16,\n  0,\n  0,\n  397,\n  399,\n  3,\n  38,\n  19,\n  0,\n  398,\n  396,\n  1,\n  0,\n  0,\n  0,\n  399,\n  402,\n  1,\n  0,\n  0,\n  0,\n  400,\n  398,\n  1,\n  0,\n  0,\n  0,\n  400,\n  401,\n  1,\n  0,\n  0,\n  0,\n  401,\n  403,\n  1,\n  0,\n  0,\n  0,\n  402,\n  400,\n  1,\n  0,\n  0,\n  0,\n  403,\n  404,\n  5,\n  17,\n  0,\n  0,\n  404,\n  406,\n  1,\n  0,\n  0,\n  0,\n  405,\n  393,\n  1,\n  0,\n  0,\n  0,\n  405,\n  394,\n  1,\n  0,\n  0,\n  0,\n  406,\n  37,\n  1,\n  0,\n  0,\n  0,\n  407,\n  410,\n  3,\n  78,\n  39,\n  0,\n  408,\n  409,\n  5,\n  12,\n  0,\n  0,\n  409,\n  411,\n  3,\n  40,\n  20,\n  0,\n  410,\n  408,\n  1,\n  0,\n  0,\n  0,\n  410,\n  411,\n  1,\n  0,\n  0,\n  0,\n  411,\n  39,\n  1,\n  0,\n  0,\n  0,\n  412,\n  413,\n  7,\n  2,\n  0,\n  0,\n  413,\n  41,\n  1,\n  0,\n  0,\n  0,\n  414,\n  415,\n  5,\n  36,\n  0,\n  0,\n  415,\n  416,\n  3,\n  194,\n  97,\n  0,\n  416,\n  427,\n  5,\n  15,\n  0,\n  0,\n  417,\n  418,\n  3,\n  74,\n  37,\n  0,\n  418,\n  424,\n  5,\n  2,\n  0,\n  0,\n  419,\n  420,\n  3,\n  74,\n  37,\n  0,\n  420,\n  421,\n  5,\n  2,\n  0,\n  0,\n  421,\n  423,\n  1,\n  0,\n  0,\n  0,\n  422,\n  419,\n  1,\n  0,\n  0,\n  0,\n  423,\n  426,\n  1,\n  0,\n  0,\n  0,\n  424,\n  422,\n  1,\n  0,\n  0,\n  0,\n  424,\n  425,\n  1,\n  0,\n  0,\n  0,\n  425,\n  428,\n  1,\n  0,\n  0,\n  0,\n  426,\n  424,\n  1,\n  0,\n  0,\n  0,\n  427,\n  417,\n  1,\n  0,\n  0,\n  0,\n  427,\n  428,\n  1,\n  0,\n  0,\n  0,\n  428,\n  429,\n  1,\n  0,\n  0,\n  0,\n  429,\n  430,\n  5,\n  17,\n  0,\n  0,\n  430,\n  43,\n  1,\n  0,\n  0,\n  0,\n  431,\n  432,\n  5,\n  37,\n  0,\n  0,\n  432,\n  434,\n  3,\n  194,\n  97,\n  0,\n  433,\n  435,\n  3,\n  62,\n  31,\n  0,\n  434,\n  433,\n  1,\n  0,\n  0,\n  0,\n  434,\n  435,\n  1,\n  0,\n  0,\n  0,\n  435,\n  440,\n  1,\n  0,\n  0,\n  0,\n  436,\n  439,\n  5,\n  121,\n  0,\n  0,\n  437,\n  439,\n  3,\n  198,\n  99,\n  0,\n  438,\n  436,\n  1,\n  0,\n  0,\n  0,\n  438,\n  437,\n  1,\n  0,\n  0,\n  0,\n  439,\n  442,\n  1,\n  0,\n  0,\n  0,\n  440,\n  438,\n  1,\n  0,\n  0,\n  0,\n  440,\n  441,\n  1,\n  0,\n  0,\n  0,\n  441,\n  445,\n  1,\n  0,\n  0,\n  0,\n  442,\n  440,\n  1,\n  0,\n  0,\n  0,\n  443,\n  446,\n  5,\n  2,\n  0,\n  0,\n  444,\n  446,\n  3,\n  94,\n  47,\n  0,\n  445,\n  443,\n  1,\n  0,\n  0,\n  0,\n  445,\n  444,\n  1,\n  0,\n  0,\n  0,\n  446,\n  45,\n  1,\n  0,\n  0,\n  0,\n  447,\n  453,\n  3,\n  194,\n  97,\n  0,\n  448,\n  450,\n  5,\n  23,\n  0,\n  0,\n  449,\n  451,\n  3,\n  144,\n  72,\n  0,\n  450,\n  449,\n  1,\n  0,\n  0,\n  0,\n  450,\n  451,\n  1,\n  0,\n  0,\n  0,\n  451,\n  452,\n  1,\n  0,\n  0,\n  0,\n  452,\n  454,\n  5,\n  24,\n  0,\n  0,\n  453,\n  448,\n  1,\n  0,\n  0,\n  0,\n  453,\n  454,\n  1,\n  0,\n  0,\n  0,\n  454,\n  47,\n  1,\n  0,\n  0,\n  0,\n  455,\n  456,\n  3,\n  50,\n  25,\n  0,\n  456,\n  457,\n  3,\n  62,\n  31,\n  0,\n  457,\n  459,\n  3,\n  54,\n  27,\n  0,\n  458,\n  460,\n  3,\n  52,\n  26,\n  0,\n  459,\n  458,\n  1,\n  0,\n  0,\n  0,\n  459,\n  460,\n  1,\n  0,\n  0,\n  0,\n  460,\n  463,\n  1,\n  0,\n  0,\n  0,\n  461,\n  464,\n  5,\n  2,\n  0,\n  0,\n  462,\n  464,\n  3,\n  94,\n  47,\n  0,\n  463,\n  461,\n  1,\n  0,\n  0,\n  0,\n  463,\n  462,\n  1,\n  0,\n  0,\n  0,\n  464,\n  49,\n  1,\n  0,\n  0,\n  0,\n  465,\n  467,\n  5,\n  38,\n  0,\n  0,\n  466,\n  468,\n  3,\n  194,\n  97,\n  0,\n  467,\n  466,\n  1,\n  0,\n  0,\n  0,\n  467,\n  468,\n  1,\n  0,\n  0,\n  0,\n  468,\n  473,\n  1,\n  0,\n  0,\n  0,\n  469,\n  473,\n  5,\n  126,\n  0,\n  0,\n  470,\n  473,\n  5,\n  127,\n  0,\n  0,\n  471,\n  473,\n  5,\n  128,\n  0,\n  0,\n  472,\n  465,\n  1,\n  0,\n  0,\n  0,\n  472,\n  469,\n  1,\n  0,\n  0,\n  0,\n  472,\n  470,\n  1,\n  0,\n  0,\n  0,\n  472,\n  471,\n  1,\n  0,\n  0,\n  0,\n  473,\n  51,\n  1,\n  0,\n  0,\n  0,\n  474,\n  475,\n  5,\n  39,\n  0,\n  0,\n  475,\n  476,\n  3,\n  62,\n  31,\n  0,\n  476,\n  53,\n  1,\n  0,\n  0,\n  0,\n  477,\n  486,\n  5,\n  115,\n  0,\n  0,\n  478,\n  486,\n  5,\n  120,\n  0,\n  0,\n  479,\n  486,\n  5,\n  117,\n  0,\n  0,\n  480,\n  486,\n  5,\n  119,\n  0,\n  0,\n  481,\n  486,\n  5,\n  121,\n  0,\n  0,\n  482,\n  486,\n  3,\n  92,\n  46,\n  0,\n  483,\n  486,\n  3,\n  46,\n  23,\n  0,\n  484,\n  486,\n  3,\n  198,\n  99,\n  0,\n  485,\n  477,\n  1,\n  0,\n  0,\n  0,\n  485,\n  478,\n  1,\n  0,\n  0,\n  0,\n  485,\n  479,\n  1,\n  0,\n  0,\n  0,\n  485,\n  480,\n  1,\n  0,\n  0,\n  0,\n  485,\n  481,\n  1,\n  0,\n  0,\n  0,\n  485,\n  482,\n  1,\n  0,\n  0,\n  0,\n  485,\n  483,\n  1,\n  0,\n  0,\n  0,\n  485,\n  484,\n  1,\n  0,\n  0,\n  0,\n  486,\n  489,\n  1,\n  0,\n  0,\n  0,\n  487,\n  485,\n  1,\n  0,\n  0,\n  0,\n  487,\n  488,\n  1,\n  0,\n  0,\n  0,\n  488,\n  55,\n  1,\n  0,\n  0,\n  0,\n  489,\n  487,\n  1,\n  0,\n  0,\n  0,\n  490,\n  491,\n  5,\n  40,\n  0,\n  0,\n  491,\n  492,\n  3,\n  194,\n  97,\n  0,\n  492,\n  494,\n  3,\n  66,\n  33,\n  0,\n  493,\n  495,\n  5,\n  108,\n  0,\n  0,\n  494,\n  493,\n  1,\n  0,\n  0,\n  0,\n  494,\n  495,\n  1,\n  0,\n  0,\n  0,\n  495,\n  496,\n  1,\n  0,\n  0,\n  0,\n  496,\n  497,\n  5,\n  2,\n  0,\n  0,\n  497,\n  57,\n  1,\n  0,\n  0,\n  0,\n  498,\n  499,\n  3,\n  194,\n  97,\n  0,\n  499,\n  59,\n  1,\n  0,\n  0,\n  0,\n  500,\n  501,\n  5,\n  41,\n  0,\n  0,\n  501,\n  502,\n  3,\n  194,\n  97,\n  0,\n  502,\n  504,\n  5,\n  15,\n  0,\n  0,\n  503,\n  505,\n  3,\n  58,\n  29,\n  0,\n  504,\n  503,\n  1,\n  0,\n  0,\n  0,\n  504,\n  505,\n  1,\n  0,\n  0,\n  0,\n  505,\n  510,\n  1,\n  0,\n  0,\n  0,\n  506,\n  507,\n  5,\n  16,\n  0,\n  0,\n  507,\n  509,\n  3,\n  58,\n  29,\n  0,\n  508,\n  506,\n  1,\n  0,\n  0,\n  0,\n  509,\n  512,\n  1,\n  0,\n  0,\n  0,\n  510,\n  508,\n  1,\n  0,\n  0,\n  0,\n  510,\n  511,\n  1,\n  0,\n  0,\n  0,\n  511,\n  513,\n  1,\n  0,\n  0,\n  0,\n  512,\n  510,\n  1,\n  0,\n  0,\n  0,\n  513,\n  514,\n  5,\n  17,\n  0,\n  0,\n  514,\n  61,\n  1,\n  0,\n  0,\n  0,\n  515,\n  524,\n  5,\n  23,\n  0,\n  0,\n  516,\n  521,\n  3,\n  64,\n  32,\n  0,\n  517,\n  518,\n  5,\n  16,\n  0,\n  0,\n  518,\n  520,\n  3,\n  64,\n  32,\n  0,\n  519,\n  517,\n  1,\n  0,\n  0,\n  0,\n  520,\n  523,\n  1,\n  0,\n  0,\n  0,\n  521,\n  519,\n  1,\n  0,\n  0,\n  0,\n  521,\n  522,\n  1,\n  0,\n  0,\n  0,\n  522,\n  525,\n  1,\n  0,\n  0,\n  0,\n  523,\n  521,\n  1,\n  0,\n  0,\n  0,\n  524,\n  516,\n  1,\n  0,\n  0,\n  0,\n  524,\n  525,\n  1,\n  0,\n  0,\n  0,\n  525,\n  526,\n  1,\n  0,\n  0,\n  0,\n  526,\n  527,\n  5,\n  24,\n  0,\n  0,\n  527,\n  63,\n  1,\n  0,\n  0,\n  0,\n  528,\n  530,\n  3,\n  76,\n  38,\n  0,\n  529,\n  531,\n  3,\n  90,\n  45,\n  0,\n  530,\n  529,\n  1,\n  0,\n  0,\n  0,\n  530,\n  531,\n  1,\n  0,\n  0,\n  0,\n  531,\n  533,\n  1,\n  0,\n  0,\n  0,\n  532,\n  534,\n  3,\n  194,\n  97,\n  0,\n  533,\n  532,\n  1,\n  0,\n  0,\n  0,\n  533,\n  534,\n  1,\n  0,\n  0,\n  0,\n  534,\n  65,\n  1,\n  0,\n  0,\n  0,\n  535,\n  544,\n  5,\n  23,\n  0,\n  0,\n  536,\n  541,\n  3,\n  68,\n  34,\n  0,\n  537,\n  538,\n  5,\n  16,\n  0,\n  0,\n  538,\n  540,\n  3,\n  68,\n  34,\n  0,\n  539,\n  537,\n  1,\n  0,\n  0,\n  0,\n  540,\n  543,\n  1,\n  0,\n  0,\n  0,\n  541,\n  539,\n  1,\n  0,\n  0,\n  0,\n  541,\n  542,\n  1,\n  0,\n  0,\n  0,\n  542,\n  545,\n  1,\n  0,\n  0,\n  0,\n  543,\n  541,\n  1,\n  0,\n  0,\n  0,\n  544,\n  536,\n  1,\n  0,\n  0,\n  0,\n  544,\n  545,\n  1,\n  0,\n  0,\n  0,\n  545,\n  546,\n  1,\n  0,\n  0,\n  0,\n  546,\n  547,\n  5,\n  24,\n  0,\n  0,\n  547,\n  67,\n  1,\n  0,\n  0,\n  0,\n  548,\n  550,\n  3,\n  76,\n  38,\n  0,\n  549,\n  551,\n  5,\n  116,\n  0,\n  0,\n  550,\n  549,\n  1,\n  0,\n  0,\n  0,\n  550,\n  551,\n  1,\n  0,\n  0,\n  0,\n  551,\n  553,\n  1,\n  0,\n  0,\n  0,\n  552,\n  554,\n  3,\n  194,\n  97,\n  0,\n  553,\n  552,\n  1,\n  0,\n  0,\n  0,\n  553,\n  554,\n  1,\n  0,\n  0,\n  0,\n  554,\n  69,\n  1,\n  0,\n  0,\n  0,\n  555,\n  564,\n  5,\n  23,\n  0,\n  0,\n  556,\n  561,\n  3,\n  72,\n  36,\n  0,\n  557,\n  558,\n  5,\n  16,\n  0,\n  0,\n  558,\n  560,\n  3,\n  72,\n  36,\n  0,\n  559,\n  557,\n  1,\n  0,\n  0,\n  0,\n  560,\n  563,\n  1,\n  0,\n  0,\n  0,\n  561,\n  559,\n  1,\n  0,\n  0,\n  0,\n  561,\n  562,\n  1,\n  0,\n  0,\n  0,\n  562,\n  565,\n  1,\n  0,\n  0,\n  0,\n  563,\n  561,\n  1,\n  0,\n  0,\n  0,\n  564,\n  556,\n  1,\n  0,\n  0,\n  0,\n  564,\n  565,\n  1,\n  0,\n  0,\n  0,\n  565,\n  566,\n  1,\n  0,\n  0,\n  0,\n  566,\n  567,\n  5,\n  24,\n  0,\n  0,\n  567,\n  71,\n  1,\n  0,\n  0,\n  0,\n  568,\n  570,\n  3,\n  76,\n  38,\n  0,\n  569,\n  571,\n  3,\n  90,\n  45,\n  0,\n  570,\n  569,\n  1,\n  0,\n  0,\n  0,\n  570,\n  571,\n  1,\n  0,\n  0,\n  0,\n  571,\n  73,\n  1,\n  0,\n  0,\n  0,\n  572,\n  574,\n  3,\n  76,\n  38,\n  0,\n  573,\n  575,\n  3,\n  90,\n  45,\n  0,\n  574,\n  573,\n  1,\n  0,\n  0,\n  0,\n  574,\n  575,\n  1,\n  0,\n  0,\n  0,\n  575,\n  576,\n  1,\n  0,\n  0,\n  0,\n  576,\n  577,\n  3,\n  194,\n  97,\n  0,\n  577,\n  75,\n  1,\n  0,\n  0,\n  0,\n  578,\n  579,\n  6,\n  38,\n  -1,\n  0,\n  579,\n  586,\n  3,\n  138,\n  69,\n  0,\n  580,\n  586,\n  3,\n  78,\n  39,\n  0,\n  581,\n  586,\n  3,\n  82,\n  41,\n  0,\n  582,\n  586,\n  3,\n  88,\n  44,\n  0,\n  583,\n  584,\n  5,\n  44,\n  0,\n  0,\n  584,\n  586,\n  5,\n  118,\n  0,\n  0,\n  585,\n  578,\n  1,\n  0,\n  0,\n  0,\n  585,\n  580,\n  1,\n  0,\n  0,\n  0,\n  585,\n  581,\n  1,\n  0,\n  0,\n  0,\n  585,\n  582,\n  1,\n  0,\n  0,\n  0,\n  585,\n  583,\n  1,\n  0,\n  0,\n  0,\n  586,\n  595,\n  1,\n  0,\n  0,\n  0,\n  587,\n  588,\n  10,\n  3,\n  0,\n  0,\n  588,\n  590,\n  5,\n  42,\n  0,\n  0,\n  589,\n  591,\n  3,\n  140,\n  70,\n  0,\n  590,\n  589,\n  1,\n  0,\n  0,\n  0,\n  590,\n  591,\n  1,\n  0,\n  0,\n  0,\n  591,\n  592,\n  1,\n  0,\n  0,\n  0,\n  592,\n  594,\n  5,\n  43,\n  0,\n  0,\n  593,\n  587,\n  1,\n  0,\n  0,\n  0,\n  594,\n  597,\n  1,\n  0,\n  0,\n  0,\n  595,\n  593,\n  1,\n  0,\n  0,\n  0,\n  595,\n  596,\n  1,\n  0,\n  0,\n  0,\n  596,\n  77,\n  1,\n  0,\n  0,\n  0,\n  597,\n  595,\n  1,\n  0,\n  0,\n  0,\n  598,\n  603,\n  3,\n  194,\n  97,\n  0,\n  599,\n  600,\n  5,\n  45,\n  0,\n  0,\n  600,\n  602,\n  3,\n  194,\n  97,\n  0,\n  601,\n  599,\n  1,\n  0,\n  0,\n  0,\n  602,\n  605,\n  1,\n  0,\n  0,\n  0,\n  603,\n  601,\n  1,\n  0,\n  0,\n  0,\n  603,\n  604,\n  1,\n  0,\n  0,\n  0,\n  604,\n  79,\n  1,\n  0,\n  0,\n  0,\n  605,\n  603,\n  1,\n  0,\n  0,\n  0,\n  606,\n  609,\n  3,\n  138,\n  69,\n  0,\n  607,\n  609,\n  3,\n  78,\n  39,\n  0,\n  608,\n  606,\n  1,\n  0,\n  0,\n  0,\n  608,\n  607,\n  1,\n  0,\n  0,\n  0,\n  609,\n  81,\n  1,\n  0,\n  0,\n  0,\n  610,\n  611,\n  5,\n  46,\n  0,\n  0,\n  611,\n  612,\n  5,\n  23,\n  0,\n  0,\n  612,\n  614,\n  3,\n  80,\n  40,\n  0,\n  613,\n  615,\n  3,\n  84,\n  42,\n  0,\n  614,\n  613,\n  1,\n  0,\n  0,\n  0,\n  614,\n  615,\n  1,\n  0,\n  0,\n  0,\n  615,\n  616,\n  1,\n  0,\n  0,\n  0,\n  616,\n  617,\n  5,\n  47,\n  0,\n  0,\n  617,\n  619,\n  3,\n  76,\n  38,\n  0,\n  618,\n  620,\n  3,\n  86,\n  43,\n  0,\n  619,\n  618,\n  1,\n  0,\n  0,\n  0,\n  619,\n  620,\n  1,\n  0,\n  0,\n  0,\n  620,\n  621,\n  1,\n  0,\n  0,\n  0,\n  621,\n  622,\n  5,\n  24,\n  0,\n  0,\n  622,\n  83,\n  1,\n  0,\n  0,\n  0,\n  623,\n  624,\n  3,\n  194,\n  97,\n  0,\n  624,\n  85,\n  1,\n  0,\n  0,\n  0,\n  625,\n  626,\n  3,\n  194,\n  97,\n  0,\n  626,\n  87,\n  1,\n  0,\n  0,\n  0,\n  627,\n  628,\n  5,\n  38,\n  0,\n  0,\n  628,\n  634,\n  3,\n  70,\n  35,\n  0,\n  629,\n  633,\n  5,\n  117,\n  0,\n  0,\n  630,\n  633,\n  5,\n  115,\n  0,\n  0,\n  631,\n  633,\n  3,\n  92,\n  46,\n  0,\n  632,\n  629,\n  1,\n  0,\n  0,\n  0,\n  632,\n  630,\n  1,\n  0,\n  0,\n  0,\n  632,\n  631,\n  1,\n  0,\n  0,\n  0,\n  633,\n  636,\n  1,\n  0,\n  0,\n  0,\n  634,\n  632,\n  1,\n  0,\n  0,\n  0,\n  634,\n  635,\n  1,\n  0,\n  0,\n  0,\n  635,\n  639,\n  1,\n  0,\n  0,\n  0,\n  636,\n  634,\n  1,\n  0,\n  0,\n  0,\n  637,\n  638,\n  5,\n  39,\n  0,\n  0,\n  638,\n  640,\n  3,\n  70,\n  35,\n  0,\n  639,\n  637,\n  1,\n  0,\n  0,\n  0,\n  639,\n  640,\n  1,\n  0,\n  0,\n  0,\n  640,\n  89,\n  1,\n  0,\n  0,\n  0,\n  641,\n  642,\n  7,\n  3,\n  0,\n  0,\n  642,\n  91,\n  1,\n  0,\n  0,\n  0,\n  643,\n  644,\n  7,\n  4,\n  0,\n  0,\n  644,\n  93,\n  1,\n  0,\n  0,\n  0,\n  645,\n  649,\n  5,\n  15,\n  0,\n  0,\n  646,\n  648,\n  3,\n  96,\n  48,\n  0,\n  647,\n  646,\n  1,\n  0,\n  0,\n  0,\n  648,\n  651,\n  1,\n  0,\n  0,\n  0,\n  649,\n  647,\n  1,\n  0,\n  0,\n  0,\n  649,\n  650,\n  1,\n  0,\n  0,\n  0,\n  650,\n  652,\n  1,\n  0,\n  0,\n  0,\n  651,\n  649,\n  1,\n  0,\n  0,\n  0,\n  652,\n  653,\n  5,\n  17,\n  0,\n  0,\n  653,\n  95,\n  1,\n  0,\n  0,\n  0,\n  654,\n  670,\n  3,\n  100,\n  50,\n  0,\n  655,\n  670,\n  3,\n  102,\n  51,\n  0,\n  656,\n  670,\n  3,\n  106,\n  53,\n  0,\n  657,\n  670,\n  3,\n  112,\n  56,\n  0,\n  658,\n  670,\n  3,\n  94,\n  47,\n  0,\n  659,\n  670,\n  3,\n  114,\n  57,\n  0,\n  660,\n  670,\n  3,\n  118,\n  59,\n  0,\n  661,\n  670,\n  3,\n  120,\n  60,\n  0,\n  662,\n  670,\n  3,\n  122,\n  61,\n  0,\n  663,\n  670,\n  3,\n  124,\n  62,\n  0,\n  664,\n  670,\n  3,\n  126,\n  63,\n  0,\n  665,\n  670,\n  3,\n  128,\n  64,\n  0,\n  666,\n  670,\n  3,\n  108,\n  54,\n  0,\n  667,\n  670,\n  3,\n  110,\n  55,\n  0,\n  668,\n  670,\n  3,\n  130,\n  65,\n  0,\n  669,\n  654,\n  1,\n  0,\n  0,\n  0,\n  669,\n  655,\n  1,\n  0,\n  0,\n  0,\n  669,\n  656,\n  1,\n  0,\n  0,\n  0,\n  669,\n  657,\n  1,\n  0,\n  0,\n  0,\n  669,\n  658,\n  1,\n  0,\n  0,\n  0,\n  669,\n  659,\n  1,\n  0,\n  0,\n  0,\n  669,\n  660,\n  1,\n  0,\n  0,\n  0,\n  669,\n  661,\n  1,\n  0,\n  0,\n  0,\n  669,\n  662,\n  1,\n  0,\n  0,\n  0,\n  669,\n  663,\n  1,\n  0,\n  0,\n  0,\n  669,\n  664,\n  1,\n  0,\n  0,\n  0,\n  669,\n  665,\n  1,\n  0,\n  0,\n  0,\n  669,\n  666,\n  1,\n  0,\n  0,\n  0,\n  669,\n  667,\n  1,\n  0,\n  0,\n  0,\n  669,\n  668,\n  1,\n  0,\n  0,\n  0,\n  670,\n  97,\n  1,\n  0,\n  0,\n  0,\n  671,\n  672,\n  3,\n  140,\n  70,\n  0,\n  672,\n  673,\n  5,\n  2,\n  0,\n  0,\n  673,\n  99,\n  1,\n  0,\n  0,\n  0,\n  674,\n  675,\n  5,\n  51,\n  0,\n  0,\n  675,\n  676,\n  5,\n  23,\n  0,\n  0,\n  676,\n  677,\n  3,\n  140,\n  70,\n  0,\n  677,\n  678,\n  5,\n  24,\n  0,\n  0,\n  678,\n  681,\n  3,\n  96,\n  48,\n  0,\n  679,\n  680,\n  5,\n  52,\n  0,\n  0,\n  680,\n  682,\n  3,\n  96,\n  48,\n  0,\n  681,\n  679,\n  1,\n  0,\n  0,\n  0,\n  681,\n  682,\n  1,\n  0,\n  0,\n  0,\n  682,\n  101,\n  1,\n  0,\n  0,\n  0,\n  683,\n  684,\n  5,\n  53,\n  0,\n  0,\n  684,\n  686,\n  3,\n  140,\n  70,\n  0,\n  685,\n  687,\n  3,\n  52,\n  26,\n  0,\n  686,\n  685,\n  1,\n  0,\n  0,\n  0,\n  686,\n  687,\n  1,\n  0,\n  0,\n  0,\n  687,\n  688,\n  1,\n  0,\n  0,\n  0,\n  688,\n  690,\n  3,\n  94,\n  47,\n  0,\n  689,\n  691,\n  3,\n  104,\n  52,\n  0,\n  690,\n  689,\n  1,\n  0,\n  0,\n  0,\n  691,\n  692,\n  1,\n  0,\n  0,\n  0,\n  692,\n  690,\n  1,\n  0,\n  0,\n  0,\n  692,\n  693,\n  1,\n  0,\n  0,\n  0,\n  693,\n  103,\n  1,\n  0,\n  0,\n  0,\n  694,\n  699,\n  5,\n  54,\n  0,\n  0,\n  695,\n  697,\n  3,\n  194,\n  97,\n  0,\n  696,\n  695,\n  1,\n  0,\n  0,\n  0,\n  696,\n  697,\n  1,\n  0,\n  0,\n  0,\n  697,\n  698,\n  1,\n  0,\n  0,\n  0,\n  698,\n  700,\n  3,\n  62,\n  31,\n  0,\n  699,\n  696,\n  1,\n  0,\n  0,\n  0,\n  699,\n  700,\n  1,\n  0,\n  0,\n  0,\n  700,\n  701,\n  1,\n  0,\n  0,\n  0,\n  701,\n  702,\n  3,\n  94,\n  47,\n  0,\n  702,\n  105,\n  1,\n  0,\n  0,\n  0,\n  703,\n  704,\n  5,\n  55,\n  0,\n  0,\n  704,\n  705,\n  5,\n  23,\n  0,\n  0,\n  705,\n  706,\n  3,\n  140,\n  70,\n  0,\n  706,\n  707,\n  5,\n  24,\n  0,\n  0,\n  707,\n  708,\n  3,\n  96,\n  48,\n  0,\n  708,\n  107,\n  1,\n  0,\n  0,\n  0,\n  709,\n  712,\n  3,\n  132,\n  66,\n  0,\n  710,\n  712,\n  3,\n  98,\n  49,\n  0,\n  711,\n  709,\n  1,\n  0,\n  0,\n  0,\n  711,\n  710,\n  1,\n  0,\n  0,\n  0,\n  712,\n  109,\n  1,\n  0,\n  0,\n  0,\n  713,\n  714,\n  5,\n  56,\n  0,\n  0,\n  714,\n  715,\n  3,\n  94,\n  47,\n  0,\n  715,\n  111,\n  1,\n  0,\n  0,\n  0,\n  716,\n  717,\n  5,\n  27,\n  0,\n  0,\n  717,\n  720,\n  5,\n  23,\n  0,\n  0,\n  718,\n  721,\n  3,\n  108,\n  54,\n  0,\n  719,\n  721,\n  5,\n  2,\n  0,\n  0,\n  720,\n  718,\n  1,\n  0,\n  0,\n  0,\n  720,\n  719,\n  1,\n  0,\n  0,\n  0,\n  721,\n  724,\n  1,\n  0,\n  0,\n  0,\n  722,\n  725,\n  3,\n  98,\n  49,\n  0,\n  723,\n  725,\n  5,\n  2,\n  0,\n  0,\n  724,\n  722,\n  1,\n  0,\n  0,\n  0,\n  724,\n  723,\n  1,\n  0,\n  0,\n  0,\n  725,\n  727,\n  1,\n  0,\n  0,\n  0,\n  726,\n  728,\n  3,\n  140,\n  70,\n  0,\n  727,\n  726,\n  1,\n  0,\n  0,\n  0,\n  727,\n  728,\n  1,\n  0,\n  0,\n  0,\n  728,\n  729,\n  1,\n  0,\n  0,\n  0,\n  729,\n  730,\n  5,\n  24,\n  0,\n  0,\n  730,\n  731,\n  3,\n  96,\n  48,\n  0,\n  731,\n  113,\n  1,\n  0,\n  0,\n  0,\n  732,\n  734,\n  5,\n  57,\n  0,\n  0,\n  733,\n  735,\n  5,\n  130,\n  0,\n  0,\n  734,\n  733,\n  1,\n  0,\n  0,\n  0,\n  734,\n  735,\n  1,\n  0,\n  0,\n  0,\n  735,\n  740,\n  1,\n  0,\n  0,\n  0,\n  736,\n  737,\n  5,\n  23,\n  0,\n  0,\n  737,\n  738,\n  3,\n  116,\n  58,\n  0,\n  738,\n  739,\n  5,\n  24,\n  0,\n  0,\n  739,\n  741,\n  1,\n  0,\n  0,\n  0,\n  740,\n  736,\n  1,\n  0,\n  0,\n  0,\n  740,\n  741,\n  1,\n  0,\n  0,\n  0,\n  741,\n  742,\n  1,\n  0,\n  0,\n  0,\n  742,\n  743,\n  3,\n  154,\n  77,\n  0,\n  743,\n  115,\n  1,\n  0,\n  0,\n  0,\n  744,\n  745,\n  3,\n  200,\n  100,\n  0,\n  745,\n  117,\n  1,\n  0,\n  0,\n  0,\n  746,\n  747,\n  5,\n  58,\n  0,\n  0,\n  747,\n  748,\n  3,\n  96,\n  48,\n  0,\n  748,\n  749,\n  5,\n  55,\n  0,\n  0,\n  749,\n  750,\n  5,\n  23,\n  0,\n  0,\n  750,\n  751,\n  3,\n  140,\n  70,\n  0,\n  751,\n  752,\n  5,\n  24,\n  0,\n  0,\n  752,\n  753,\n  5,\n  2,\n  0,\n  0,\n  753,\n  119,\n  1,\n  0,\n  0,\n  0,\n  754,\n  755,\n  5,\n  113,\n  0,\n  0,\n  755,\n  756,\n  5,\n  2,\n  0,\n  0,\n  756,\n  121,\n  1,\n  0,\n  0,\n  0,\n  757,\n  758,\n  5,\n  109,\n  0,\n  0,\n  758,\n  759,\n  5,\n  2,\n  0,\n  0,\n  759,\n  123,\n  1,\n  0,\n  0,\n  0,\n  760,\n  762,\n  5,\n  59,\n  0,\n  0,\n  761,\n  763,\n  3,\n  140,\n  70,\n  0,\n  762,\n  761,\n  1,\n  0,\n  0,\n  0,\n  762,\n  763,\n  1,\n  0,\n  0,\n  0,\n  763,\n  764,\n  1,\n  0,\n  0,\n  0,\n  764,\n  765,\n  5,\n  2,\n  0,\n  0,\n  765,\n  125,\n  1,\n  0,\n  0,\n  0,\n  766,\n  767,\n  5,\n  60,\n  0,\n  0,\n  767,\n  768,\n  5,\n  2,\n  0,\n  0,\n  768,\n  127,\n  1,\n  0,\n  0,\n  0,\n  769,\n  770,\n  5,\n  61,\n  0,\n  0,\n  770,\n  771,\n  3,\n  152,\n  76,\n  0,\n  771,\n  772,\n  5,\n  2,\n  0,\n  0,\n  772,\n  129,\n  1,\n  0,\n  0,\n  0,\n  773,\n  774,\n  5,\n  62,\n  0,\n  0,\n  774,\n  775,\n  3,\n  152,\n  76,\n  0,\n  775,\n  776,\n  5,\n  2,\n  0,\n  0,\n  776,\n  131,\n  1,\n  0,\n  0,\n  0,\n  777,\n  778,\n  5,\n  63,\n  0,\n  0,\n  778,\n  785,\n  3,\n  136,\n  68,\n  0,\n  779,\n  785,\n  3,\n  74,\n  37,\n  0,\n  780,\n  781,\n  5,\n  23,\n  0,\n  0,\n  781,\n  782,\n  3,\n  134,\n  67,\n  0,\n  782,\n  783,\n  5,\n  24,\n  0,\n  0,\n  783,\n  785,\n  1,\n  0,\n  0,\n  0,\n  784,\n  777,\n  1,\n  0,\n  0,\n  0,\n  784,\n  779,\n  1,\n  0,\n  0,\n  0,\n  784,\n  780,\n  1,\n  0,\n  0,\n  0,\n  785,\n  788,\n  1,\n  0,\n  0,\n  0,\n  786,\n  787,\n  5,\n  11,\n  0,\n  0,\n  787,\n  789,\n  3,\n  140,\n  70,\n  0,\n  788,\n  786,\n  1,\n  0,\n  0,\n  0,\n  788,\n  789,\n  1,\n  0,\n  0,\n  0,\n  789,\n  790,\n  1,\n  0,\n  0,\n  0,\n  790,\n  791,\n  5,\n  2,\n  0,\n  0,\n  791,\n  133,\n  1,\n  0,\n  0,\n  0,\n  792,\n  794,\n  3,\n  74,\n  37,\n  0,\n  793,\n  792,\n  1,\n  0,\n  0,\n  0,\n  793,\n  794,\n  1,\n  0,\n  0,\n  0,\n  794,\n  801,\n  1,\n  0,\n  0,\n  0,\n  795,\n  797,\n  5,\n  16,\n  0,\n  0,\n  796,\n  798,\n  3,\n  74,\n  37,\n  0,\n  797,\n  796,\n  1,\n  0,\n  0,\n  0,\n  797,\n  798,\n  1,\n  0,\n  0,\n  0,\n  798,\n  800,\n  1,\n  0,\n  0,\n  0,\n  799,\n  795,\n  1,\n  0,\n  0,\n  0,\n  800,\n  803,\n  1,\n  0,\n  0,\n  0,\n  801,\n  799,\n  1,\n  0,\n  0,\n  0,\n  801,\n  802,\n  1,\n  0,\n  0,\n  0,\n  802,\n  135,\n  1,\n  0,\n  0,\n  0,\n  803,\n  801,\n  1,\n  0,\n  0,\n  0,\n  804,\n  811,\n  5,\n  23,\n  0,\n  0,\n  805,\n  807,\n  3,\n  194,\n  97,\n  0,\n  806,\n  805,\n  1,\n  0,\n  0,\n  0,\n  806,\n  807,\n  1,\n  0,\n  0,\n  0,\n  807,\n  808,\n  1,\n  0,\n  0,\n  0,\n  808,\n  810,\n  5,\n  16,\n  0,\n  0,\n  809,\n  806,\n  1,\n  0,\n  0,\n  0,\n  810,\n  813,\n  1,\n  0,\n  0,\n  0,\n  811,\n  809,\n  1,\n  0,\n  0,\n  0,\n  811,\n  812,\n  1,\n  0,\n  0,\n  0,\n  812,\n  815,\n  1,\n  0,\n  0,\n  0,\n  813,\n  811,\n  1,\n  0,\n  0,\n  0,\n  814,\n  816,\n  3,\n  194,\n  97,\n  0,\n  815,\n  814,\n  1,\n  0,\n  0,\n  0,\n  815,\n  816,\n  1,\n  0,\n  0,\n  0,\n  816,\n  817,\n  1,\n  0,\n  0,\n  0,\n  817,\n  818,\n  5,\n  24,\n  0,\n  0,\n  818,\n  137,\n  1,\n  0,\n  0,\n  0,\n  819,\n  820,\n  7,\n  5,\n  0,\n  0,\n  820,\n  139,\n  1,\n  0,\n  0,\n  0,\n  821,\n  822,\n  6,\n  70,\n  -1,\n  0,\n  822,\n  823,\n  5,\n  69,\n  0,\n  0,\n  823,\n  840,\n  3,\n  76,\n  38,\n  0,\n  824,\n  825,\n  5,\n  23,\n  0,\n  0,\n  825,\n  826,\n  3,\n  140,\n  70,\n  0,\n  826,\n  827,\n  5,\n  24,\n  0,\n  0,\n  827,\n  840,\n  1,\n  0,\n  0,\n  0,\n  828,\n  829,\n  7,\n  6,\n  0,\n  0,\n  829,\n  840,\n  3,\n  140,\n  70,\n  19,\n  830,\n  831,\n  7,\n  7,\n  0,\n  0,\n  831,\n  840,\n  3,\n  140,\n  70,\n  18,\n  832,\n  833,\n  5,\n  71,\n  0,\n  0,\n  833,\n  840,\n  3,\n  140,\n  70,\n  17,\n  834,\n  835,\n  5,\n  72,\n  0,\n  0,\n  835,\n  840,\n  3,\n  140,\n  70,\n  16,\n  836,\n  837,\n  5,\n  6,\n  0,\n  0,\n  837,\n  840,\n  3,\n  140,\n  70,\n  15,\n  838,\n  840,\n  3,\n  142,\n  71,\n  0,\n  839,\n  821,\n  1,\n  0,\n  0,\n  0,\n  839,\n  824,\n  1,\n  0,\n  0,\n  0,\n  839,\n  828,\n  1,\n  0,\n  0,\n  0,\n  839,\n  830,\n  1,\n  0,\n  0,\n  0,\n  839,\n  832,\n  1,\n  0,\n  0,\n  0,\n  839,\n  834,\n  1,\n  0,\n  0,\n  0,\n  839,\n  836,\n  1,\n  0,\n  0,\n  0,\n  839,\n  838,\n  1,\n  0,\n  0,\n  0,\n  840,\n  915,\n  1,\n  0,\n  0,\n  0,\n  841,\n  842,\n  10,\n  14,\n  0,\n  0,\n  842,\n  843,\n  5,\n  73,\n  0,\n  0,\n  843,\n  914,\n  3,\n  140,\n  70,\n  14,\n  844,\n  845,\n  10,\n  13,\n  0,\n  0,\n  845,\n  846,\n  7,\n  8,\n  0,\n  0,\n  846,\n  914,\n  3,\n  140,\n  70,\n  14,\n  847,\n  848,\n  10,\n  12,\n  0,\n  0,\n  848,\n  849,\n  7,\n  7,\n  0,\n  0,\n  849,\n  914,\n  3,\n  140,\n  70,\n  13,\n  850,\n  851,\n  10,\n  11,\n  0,\n  0,\n  851,\n  852,\n  7,\n  9,\n  0,\n  0,\n  852,\n  914,\n  3,\n  140,\n  70,\n  12,\n  853,\n  854,\n  10,\n  10,\n  0,\n  0,\n  854,\n  855,\n  5,\n  29,\n  0,\n  0,\n  855,\n  914,\n  3,\n  140,\n  70,\n  11,\n  856,\n  857,\n  10,\n  9,\n  0,\n  0,\n  857,\n  858,\n  5,\n  5,\n  0,\n  0,\n  858,\n  914,\n  3,\n  140,\n  70,\n  10,\n  859,\n  860,\n  10,\n  8,\n  0,\n  0,\n  860,\n  861,\n  5,\n  28,\n  0,\n  0,\n  861,\n  914,\n  3,\n  140,\n  70,\n  9,\n  862,\n  863,\n  10,\n  7,\n  0,\n  0,\n  863,\n  864,\n  7,\n  10,\n  0,\n  0,\n  864,\n  914,\n  3,\n  140,\n  70,\n  8,\n  865,\n  866,\n  10,\n  6,\n  0,\n  0,\n  866,\n  867,\n  7,\n  11,\n  0,\n  0,\n  867,\n  914,\n  3,\n  140,\n  70,\n  7,\n  868,\n  869,\n  10,\n  5,\n  0,\n  0,\n  869,\n  870,\n  5,\n  76,\n  0,\n  0,\n  870,\n  914,\n  3,\n  140,\n  70,\n  6,\n  871,\n  872,\n  10,\n  4,\n  0,\n  0,\n  872,\n  873,\n  5,\n  4,\n  0,\n  0,\n  873,\n  914,\n  3,\n  140,\n  70,\n  5,\n  874,\n  875,\n  10,\n  3,\n  0,\n  0,\n  875,\n  876,\n  5,\n  77,\n  0,\n  0,\n  876,\n  877,\n  3,\n  140,\n  70,\n  0,\n  877,\n  878,\n  5,\n  70,\n  0,\n  0,\n  878,\n  879,\n  3,\n  140,\n  70,\n  3,\n  879,\n  914,\n  1,\n  0,\n  0,\n  0,\n  880,\n  881,\n  10,\n  2,\n  0,\n  0,\n  881,\n  882,\n  7,\n  12,\n  0,\n  0,\n  882,\n  914,\n  3,\n  140,\n  70,\n  3,\n  883,\n  884,\n  10,\n  27,\n  0,\n  0,\n  884,\n  914,\n  7,\n  6,\n  0,\n  0,\n  885,\n  886,\n  10,\n  25,\n  0,\n  0,\n  886,\n  887,\n  5,\n  42,\n  0,\n  0,\n  887,\n  888,\n  3,\n  140,\n  70,\n  0,\n  888,\n  889,\n  5,\n  43,\n  0,\n  0,\n  889,\n  914,\n  1,\n  0,\n  0,\n  0,\n  890,\n  891,\n  10,\n  24,\n  0,\n  0,\n  891,\n  893,\n  5,\n  42,\n  0,\n  0,\n  892,\n  894,\n  3,\n  140,\n  70,\n  0,\n  893,\n  892,\n  1,\n  0,\n  0,\n  0,\n  893,\n  894,\n  1,\n  0,\n  0,\n  0,\n  894,\n  895,\n  1,\n  0,\n  0,\n  0,\n  895,\n  897,\n  5,\n  70,\n  0,\n  0,\n  896,\n  898,\n  3,\n  140,\n  70,\n  0,\n  897,\n  896,\n  1,\n  0,\n  0,\n  0,\n  897,\n  898,\n  1,\n  0,\n  0,\n  0,\n  898,\n  899,\n  1,\n  0,\n  0,\n  0,\n  899,\n  914,\n  5,\n  43,\n  0,\n  0,\n  900,\n  901,\n  10,\n  23,\n  0,\n  0,\n  901,\n  902,\n  5,\n  45,\n  0,\n  0,\n  902,\n  914,\n  3,\n  194,\n  97,\n  0,\n  903,\n  904,\n  10,\n  22,\n  0,\n  0,\n  904,\n  905,\n  5,\n  15,\n  0,\n  0,\n  905,\n  906,\n  3,\n  146,\n  73,\n  0,\n  906,\n  907,\n  5,\n  17,\n  0,\n  0,\n  907,\n  914,\n  1,\n  0,\n  0,\n  0,\n  908,\n  909,\n  10,\n  21,\n  0,\n  0,\n  909,\n  910,\n  5,\n  23,\n  0,\n  0,\n  910,\n  911,\n  3,\n  150,\n  75,\n  0,\n  911,\n  912,\n  5,\n  24,\n  0,\n  0,\n  912,\n  914,\n  1,\n  0,\n  0,\n  0,\n  913,\n  841,\n  1,\n  0,\n  0,\n  0,\n  913,\n  844,\n  1,\n  0,\n  0,\n  0,\n  913,\n  847,\n  1,\n  0,\n  0,\n  0,\n  913,\n  850,\n  1,\n  0,\n  0,\n  0,\n  913,\n  853,\n  1,\n  0,\n  0,\n  0,\n  913,\n  856,\n  1,\n  0,\n  0,\n  0,\n  913,\n  859,\n  1,\n  0,\n  0,\n  0,\n  913,\n  862,\n  1,\n  0,\n  0,\n  0,\n  913,\n  865,\n  1,\n  0,\n  0,\n  0,\n  913,\n  868,\n  1,\n  0,\n  0,\n  0,\n  913,\n  871,\n  1,\n  0,\n  0,\n  0,\n  913,\n  874,\n  1,\n  0,\n  0,\n  0,\n  913,\n  880,\n  1,\n  0,\n  0,\n  0,\n  913,\n  883,\n  1,\n  0,\n  0,\n  0,\n  913,\n  885,\n  1,\n  0,\n  0,\n  0,\n  913,\n  890,\n  1,\n  0,\n  0,\n  0,\n  913,\n  900,\n  1,\n  0,\n  0,\n  0,\n  913,\n  903,\n  1,\n  0,\n  0,\n  0,\n  913,\n  908,\n  1,\n  0,\n  0,\n  0,\n  914,\n  917,\n  1,\n  0,\n  0,\n  0,\n  915,\n  913,\n  1,\n  0,\n  0,\n  0,\n  915,\n  916,\n  1,\n  0,\n  0,\n  0,\n  916,\n  141,\n  1,\n  0,\n  0,\n  0,\n  917,\n  915,\n  1,\n  0,\n  0,\n  0,\n  918,\n  928,\n  5,\n  102,\n  0,\n  0,\n  919,\n  928,\n  3,\n  192,\n  96,\n  0,\n  920,\n  928,\n  3,\n  196,\n  98,\n  0,\n  921,\n  928,\n  3,\n  200,\n  100,\n  0,\n  922,\n  928,\n  3,\n  194,\n  97,\n  0,\n  923,\n  928,\n  5,\n  123,\n  0,\n  0,\n  924,\n  928,\n  5,\n  118,\n  0,\n  0,\n  925,\n  928,\n  3,\n  190,\n  95,\n  0,\n  926,\n  928,\n  3,\n  76,\n  38,\n  0,\n  927,\n  918,\n  1,\n  0,\n  0,\n  0,\n  927,\n  919,\n  1,\n  0,\n  0,\n  0,\n  927,\n  920,\n  1,\n  0,\n  0,\n  0,\n  927,\n  921,\n  1,\n  0,\n  0,\n  0,\n  927,\n  922,\n  1,\n  0,\n  0,\n  0,\n  927,\n  923,\n  1,\n  0,\n  0,\n  0,\n  927,\n  924,\n  1,\n  0,\n  0,\n  0,\n  927,\n  925,\n  1,\n  0,\n  0,\n  0,\n  927,\n  926,\n  1,\n  0,\n  0,\n  0,\n  928,\n  143,\n  1,\n  0,\n  0,\n  0,\n  929,\n  934,\n  3,\n  140,\n  70,\n  0,\n  930,\n  931,\n  5,\n  16,\n  0,\n  0,\n  931,\n  933,\n  3,\n  140,\n  70,\n  0,\n  932,\n  930,\n  1,\n  0,\n  0,\n  0,\n  933,\n  936,\n  1,\n  0,\n  0,\n  0,\n  934,\n  932,\n  1,\n  0,\n  0,\n  0,\n  934,\n  935,\n  1,\n  0,\n  0,\n  0,\n  935,\n  145,\n  1,\n  0,\n  0,\n  0,\n  936,\n  934,\n  1,\n  0,\n  0,\n  0,\n  937,\n  942,\n  3,\n  148,\n  74,\n  0,\n  938,\n  939,\n  5,\n  16,\n  0,\n  0,\n  939,\n  941,\n  3,\n  148,\n  74,\n  0,\n  940,\n  938,\n  1,\n  0,\n  0,\n  0,\n  941,\n  944,\n  1,\n  0,\n  0,\n  0,\n  942,\n  940,\n  1,\n  0,\n  0,\n  0,\n  942,\n  943,\n  1,\n  0,\n  0,\n  0,\n  943,\n  946,\n  1,\n  0,\n  0,\n  0,\n  944,\n  942,\n  1,\n  0,\n  0,\n  0,\n  945,\n  947,\n  5,\n  16,\n  0,\n  0,\n  946,\n  945,\n  1,\n  0,\n  0,\n  0,\n  946,\n  947,\n  1,\n  0,\n  0,\n  0,\n  947,\n  147,\n  1,\n  0,\n  0,\n  0,\n  948,\n  949,\n  3,\n  194,\n  97,\n  0,\n  949,\n  950,\n  5,\n  70,\n  0,\n  0,\n  950,\n  951,\n  3,\n  140,\n  70,\n  0,\n  951,\n  149,\n  1,\n  0,\n  0,\n  0,\n  952,\n  954,\n  5,\n  15,\n  0,\n  0,\n  953,\n  955,\n  3,\n  146,\n  73,\n  0,\n  954,\n  953,\n  1,\n  0,\n  0,\n  0,\n  954,\n  955,\n  1,\n  0,\n  0,\n  0,\n  955,\n  956,\n  1,\n  0,\n  0,\n  0,\n  956,\n  961,\n  5,\n  17,\n  0,\n  0,\n  957,\n  959,\n  3,\n  144,\n  72,\n  0,\n  958,\n  957,\n  1,\n  0,\n  0,\n  0,\n  958,\n  959,\n  1,\n  0,\n  0,\n  0,\n  959,\n  961,\n  1,\n  0,\n  0,\n  0,\n  960,\n  952,\n  1,\n  0,\n  0,\n  0,\n  960,\n  958,\n  1,\n  0,\n  0,\n  0,\n  961,\n  151,\n  1,\n  0,\n  0,\n  0,\n  962,\n  963,\n  3,\n  140,\n  70,\n  0,\n  963,\n  964,\n  5,\n  23,\n  0,\n  0,\n  964,\n  965,\n  3,\n  150,\n  75,\n  0,\n  965,\n  966,\n  5,\n  24,\n  0,\n  0,\n  966,\n  153,\n  1,\n  0,\n  0,\n  0,\n  967,\n  971,\n  5,\n  15,\n  0,\n  0,\n  968,\n  970,\n  3,\n  156,\n  78,\n  0,\n  969,\n  968,\n  1,\n  0,\n  0,\n  0,\n  970,\n  973,\n  1,\n  0,\n  0,\n  0,\n  971,\n  969,\n  1,\n  0,\n  0,\n  0,\n  971,\n  972,\n  1,\n  0,\n  0,\n  0,\n  972,\n  974,\n  1,\n  0,\n  0,\n  0,\n  973,\n  971,\n  1,\n  0,\n  0,\n  0,\n  974,\n  975,\n  5,\n  17,\n  0,\n  0,\n  975,\n  155,\n  1,\n  0,\n  0,\n  0,\n  976,\n  994,\n  3,\n  194,\n  97,\n  0,\n  977,\n  994,\n  3,\n  154,\n  77,\n  0,\n  978,\n  994,\n  3,\n  158,\n  79,\n  0,\n  979,\n  994,\n  3,\n  164,\n  82,\n  0,\n  980,\n  994,\n  3,\n  166,\n  83,\n  0,\n  981,\n  994,\n  3,\n  172,\n  86,\n  0,\n  982,\n  994,\n  3,\n  174,\n  87,\n  0,\n  983,\n  994,\n  3,\n  176,\n  88,\n  0,\n  984,\n  994,\n  3,\n  180,\n  90,\n  0,\n  985,\n  994,\n  3,\n  184,\n  92,\n  0,\n  986,\n  994,\n  3,\n  186,\n  93,\n  0,\n  987,\n  994,\n  5,\n  109,\n  0,\n  0,\n  988,\n  994,\n  5,\n  113,\n  0,\n  0,\n  989,\n  994,\n  5,\n  114,\n  0,\n  0,\n  990,\n  994,\n  3,\n  192,\n  96,\n  0,\n  991,\n  994,\n  3,\n  200,\n  100,\n  0,\n  992,\n  994,\n  3,\n  196,\n  98,\n  0,\n  993,\n  976,\n  1,\n  0,\n  0,\n  0,\n  993,\n  977,\n  1,\n  0,\n  0,\n  0,\n  993,\n  978,\n  1,\n  0,\n  0,\n  0,\n  993,\n  979,\n  1,\n  0,\n  0,\n  0,\n  993,\n  980,\n  1,\n  0,\n  0,\n  0,\n  993,\n  981,\n  1,\n  0,\n  0,\n  0,\n  993,\n  982,\n  1,\n  0,\n  0,\n  0,\n  993,\n  983,\n  1,\n  0,\n  0,\n  0,\n  993,\n  984,\n  1,\n  0,\n  0,\n  0,\n  993,\n  985,\n  1,\n  0,\n  0,\n  0,\n  993,\n  986,\n  1,\n  0,\n  0,\n  0,\n  993,\n  987,\n  1,\n  0,\n  0,\n  0,\n  993,\n  988,\n  1,\n  0,\n  0,\n  0,\n  993,\n  989,\n  1,\n  0,\n  0,\n  0,\n  993,\n  990,\n  1,\n  0,\n  0,\n  0,\n  993,\n  991,\n  1,\n  0,\n  0,\n  0,\n  993,\n  992,\n  1,\n  0,\n  0,\n  0,\n  994,\n  157,\n  1,\n  0,\n  0,\n  0,\n  995,\n  999,\n  3,\n  162,\n  81,\n  0,\n  996,\n  999,\n  3,\n  188,\n  94,\n  0,\n  997,\n  999,\n  3,\n  160,\n  80,\n  0,\n  998,\n  995,\n  1,\n  0,\n  0,\n  0,\n  998,\n  996,\n  1,\n  0,\n  0,\n  0,\n  998,\n  997,\n  1,\n  0,\n  0,\n  0,\n  999,\n  159,\n  1,\n  0,\n  0,\n  0,\n  1e3,\n  1001,\n  3,\n  194,\n  97,\n  0,\n  1001,\n  1002,\n  5,\n  45,\n  0,\n  0,\n  1002,\n  1003,\n  3,\n  194,\n  97,\n  0,\n  1003,\n  161,\n  1,\n  0,\n  0,\n  0,\n  1004,\n  1009,\n  5,\n  59,\n  0,\n  0,\n  1005,\n  1009,\n  5,\n  44,\n  0,\n  0,\n  1006,\n  1009,\n  5,\n  66,\n  0,\n  0,\n  1007,\n  1009,\n  3,\n  194,\n  97,\n  0,\n  1008,\n  1004,\n  1,\n  0,\n  0,\n  0,\n  1008,\n  1005,\n  1,\n  0,\n  0,\n  0,\n  1008,\n  1006,\n  1,\n  0,\n  0,\n  0,\n  1008,\n  1007,\n  1,\n  0,\n  0,\n  0,\n  1009,\n  1022,\n  1,\n  0,\n  0,\n  0,\n  1010,\n  1012,\n  5,\n  23,\n  0,\n  0,\n  1011,\n  1013,\n  3,\n  158,\n  79,\n  0,\n  1012,\n  1011,\n  1,\n  0,\n  0,\n  0,\n  1012,\n  1013,\n  1,\n  0,\n  0,\n  0,\n  1013,\n  1018,\n  1,\n  0,\n  0,\n  0,\n  1014,\n  1015,\n  5,\n  16,\n  0,\n  0,\n  1015,\n  1017,\n  3,\n  158,\n  79,\n  0,\n  1016,\n  1014,\n  1,\n  0,\n  0,\n  0,\n  1017,\n  1020,\n  1,\n  0,\n  0,\n  0,\n  1018,\n  1016,\n  1,\n  0,\n  0,\n  0,\n  1018,\n  1019,\n  1,\n  0,\n  0,\n  0,\n  1019,\n  1021,\n  1,\n  0,\n  0,\n  0,\n  1020,\n  1018,\n  1,\n  0,\n  0,\n  0,\n  1021,\n  1023,\n  5,\n  24,\n  0,\n  0,\n  1022,\n  1010,\n  1,\n  0,\n  0,\n  0,\n  1022,\n  1023,\n  1,\n  0,\n  0,\n  0,\n  1023,\n  163,\n  1,\n  0,\n  0,\n  0,\n  1024,\n  1025,\n  5,\n  88,\n  0,\n  0,\n  1025,\n  1028,\n  3,\n  168,\n  84,\n  0,\n  1026,\n  1027,\n  5,\n  89,\n  0,\n  0,\n  1027,\n  1029,\n  3,\n  158,\n  79,\n  0,\n  1028,\n  1026,\n  1,\n  0,\n  0,\n  0,\n  1028,\n  1029,\n  1,\n  0,\n  0,\n  0,\n  1029,\n  165,\n  1,\n  0,\n  0,\n  0,\n  1030,\n  1031,\n  3,\n  168,\n  84,\n  0,\n  1031,\n  1032,\n  5,\n  89,\n  0,\n  0,\n  1032,\n  1033,\n  3,\n  158,\n  79,\n  0,\n  1033,\n  167,\n  1,\n  0,\n  0,\n  0,\n  1034,\n  1042,\n  3,\n  194,\n  97,\n  0,\n  1035,\n  1042,\n  3,\n  160,\n  80,\n  0,\n  1036,\n  1042,\n  3,\n  170,\n  85,\n  0,\n  1037,\n  1038,\n  5,\n  23,\n  0,\n  0,\n  1038,\n  1039,\n  3,\n  170,\n  85,\n  0,\n  1039,\n  1040,\n  5,\n  24,\n  0,\n  0,\n  1040,\n  1042,\n  1,\n  0,\n  0,\n  0,\n  1041,\n  1034,\n  1,\n  0,\n  0,\n  0,\n  1041,\n  1035,\n  1,\n  0,\n  0,\n  0,\n  1041,\n  1036,\n  1,\n  0,\n  0,\n  0,\n  1041,\n  1037,\n  1,\n  0,\n  0,\n  0,\n  1042,\n  169,\n  1,\n  0,\n  0,\n  0,\n  1043,\n  1048,\n  3,\n  194,\n  97,\n  0,\n  1044,\n  1045,\n  5,\n  16,\n  0,\n  0,\n  1045,\n  1047,\n  3,\n  194,\n  97,\n  0,\n  1046,\n  1044,\n  1,\n  0,\n  0,\n  0,\n  1047,\n  1050,\n  1,\n  0,\n  0,\n  0,\n  1048,\n  1046,\n  1,\n  0,\n  0,\n  0,\n  1048,\n  1049,\n  1,\n  0,\n  0,\n  0,\n  1049,\n  171,\n  1,\n  0,\n  0,\n  0,\n  1050,\n  1048,\n  1,\n  0,\n  0,\n  0,\n  1051,\n  1052,\n  3,\n  158,\n  79,\n  0,\n  1052,\n  1053,\n  5,\n  90,\n  0,\n  0,\n  1053,\n  1054,\n  3,\n  194,\n  97,\n  0,\n  1054,\n  173,\n  1,\n  0,\n  0,\n  0,\n  1055,\n  1056,\n  3,\n  194,\n  97,\n  0,\n  1056,\n  1057,\n  5,\n  70,\n  0,\n  0,\n  1057,\n  175,\n  1,\n  0,\n  0,\n  0,\n  1058,\n  1059,\n  5,\n  91,\n  0,\n  0,\n  1059,\n  1063,\n  3,\n  158,\n  79,\n  0,\n  1060,\n  1062,\n  3,\n  178,\n  89,\n  0,\n  1061,\n  1060,\n  1,\n  0,\n  0,\n  0,\n  1062,\n  1065,\n  1,\n  0,\n  0,\n  0,\n  1063,\n  1061,\n  1,\n  0,\n  0,\n  0,\n  1063,\n  1064,\n  1,\n  0,\n  0,\n  0,\n  1064,\n  177,\n  1,\n  0,\n  0,\n  0,\n  1065,\n  1063,\n  1,\n  0,\n  0,\n  0,\n  1066,\n  1067,\n  5,\n  92,\n  0,\n  0,\n  1067,\n  1068,\n  3,\n  188,\n  94,\n  0,\n  1068,\n  1069,\n  3,\n  154,\n  77,\n  0,\n  1069,\n  1073,\n  1,\n  0,\n  0,\n  0,\n  1070,\n  1071,\n  5,\n  93,\n  0,\n  0,\n  1071,\n  1073,\n  3,\n  154,\n  77,\n  0,\n  1072,\n  1066,\n  1,\n  0,\n  0,\n  0,\n  1072,\n  1070,\n  1,\n  0,\n  0,\n  0,\n  1073,\n  179,\n  1,\n  0,\n  0,\n  0,\n  1074,\n  1075,\n  5,\n  38,\n  0,\n  0,\n  1075,\n  1076,\n  3,\n  194,\n  97,\n  0,\n  1076,\n  1078,\n  5,\n  23,\n  0,\n  0,\n  1077,\n  1079,\n  3,\n  170,\n  85,\n  0,\n  1078,\n  1077,\n  1,\n  0,\n  0,\n  0,\n  1078,\n  1079,\n  1,\n  0,\n  0,\n  0,\n  1079,\n  1080,\n  1,\n  0,\n  0,\n  0,\n  1080,\n  1082,\n  5,\n  24,\n  0,\n  0,\n  1081,\n  1083,\n  3,\n  182,\n  91,\n  0,\n  1082,\n  1081,\n  1,\n  0,\n  0,\n  0,\n  1082,\n  1083,\n  1,\n  0,\n  0,\n  0,\n  1083,\n  1084,\n  1,\n  0,\n  0,\n  0,\n  1084,\n  1085,\n  3,\n  154,\n  77,\n  0,\n  1085,\n  181,\n  1,\n  0,\n  0,\n  0,\n  1086,\n  1087,\n  5,\n  94,\n  0,\n  0,\n  1087,\n  1088,\n  3,\n  170,\n  85,\n  0,\n  1088,\n  183,\n  1,\n  0,\n  0,\n  0,\n  1089,\n  1092,\n  5,\n  27,\n  0,\n  0,\n  1090,\n  1093,\n  3,\n  154,\n  77,\n  0,\n  1091,\n  1093,\n  3,\n  158,\n  79,\n  0,\n  1092,\n  1090,\n  1,\n  0,\n  0,\n  0,\n  1092,\n  1091,\n  1,\n  0,\n  0,\n  0,\n  1093,\n  1094,\n  1,\n  0,\n  0,\n  0,\n  1094,\n  1097,\n  3,\n  158,\n  79,\n  0,\n  1095,\n  1098,\n  3,\n  154,\n  77,\n  0,\n  1096,\n  1098,\n  3,\n  158,\n  79,\n  0,\n  1097,\n  1095,\n  1,\n  0,\n  0,\n  0,\n  1097,\n  1096,\n  1,\n  0,\n  0,\n  0,\n  1098,\n  1099,\n  1,\n  0,\n  0,\n  0,\n  1099,\n  1100,\n  3,\n  154,\n  77,\n  0,\n  1100,\n  185,\n  1,\n  0,\n  0,\n  0,\n  1101,\n  1102,\n  5,\n  51,\n  0,\n  0,\n  1102,\n  1103,\n  3,\n  158,\n  79,\n  0,\n  1103,\n  1104,\n  3,\n  154,\n  77,\n  0,\n  1104,\n  187,\n  1,\n  0,\n  0,\n  0,\n  1105,\n  1111,\n  3,\n  200,\n  100,\n  0,\n  1106,\n  1111,\n  5,\n  103,\n  0,\n  0,\n  1107,\n  1111,\n  5,\n  104,\n  0,\n  0,\n  1108,\n  1111,\n  3,\n  196,\n  98,\n  0,\n  1109,\n  1111,\n  5,\n  102,\n  0,\n  0,\n  1110,\n  1105,\n  1,\n  0,\n  0,\n  0,\n  1110,\n  1106,\n  1,\n  0,\n  0,\n  0,\n  1110,\n  1107,\n  1,\n  0,\n  0,\n  0,\n  1110,\n  1108,\n  1,\n  0,\n  0,\n  0,\n  1110,\n  1109,\n  1,\n  0,\n  0,\n  0,\n  1111,\n  189,\n  1,\n  0,\n  0,\n  0,\n  1112,\n  1114,\n  5,\n  23,\n  0,\n  0,\n  1113,\n  1115,\n  3,\n  140,\n  70,\n  0,\n  1114,\n  1113,\n  1,\n  0,\n  0,\n  0,\n  1114,\n  1115,\n  1,\n  0,\n  0,\n  0,\n  1115,\n  1122,\n  1,\n  0,\n  0,\n  0,\n  1116,\n  1118,\n  5,\n  16,\n  0,\n  0,\n  1117,\n  1119,\n  3,\n  140,\n  70,\n  0,\n  1118,\n  1117,\n  1,\n  0,\n  0,\n  0,\n  1118,\n  1119,\n  1,\n  0,\n  0,\n  0,\n  1119,\n  1121,\n  1,\n  0,\n  0,\n  0,\n  1120,\n  1116,\n  1,\n  0,\n  0,\n  0,\n  1121,\n  1124,\n  1,\n  0,\n  0,\n  0,\n  1122,\n  1120,\n  1,\n  0,\n  0,\n  0,\n  1122,\n  1123,\n  1,\n  0,\n  0,\n  0,\n  1123,\n  1125,\n  1,\n  0,\n  0,\n  0,\n  1124,\n  1122,\n  1,\n  0,\n  0,\n  0,\n  1125,\n  1139,\n  5,\n  24,\n  0,\n  0,\n  1126,\n  1135,\n  5,\n  42,\n  0,\n  0,\n  1127,\n  1132,\n  3,\n  140,\n  70,\n  0,\n  1128,\n  1129,\n  5,\n  16,\n  0,\n  0,\n  1129,\n  1131,\n  3,\n  140,\n  70,\n  0,\n  1130,\n  1128,\n  1,\n  0,\n  0,\n  0,\n  1131,\n  1134,\n  1,\n  0,\n  0,\n  0,\n  1132,\n  1130,\n  1,\n  0,\n  0,\n  0,\n  1132,\n  1133,\n  1,\n  0,\n  0,\n  0,\n  1133,\n  1136,\n  1,\n  0,\n  0,\n  0,\n  1134,\n  1132,\n  1,\n  0,\n  0,\n  0,\n  1135,\n  1127,\n  1,\n  0,\n  0,\n  0,\n  1135,\n  1136,\n  1,\n  0,\n  0,\n  0,\n  1136,\n  1137,\n  1,\n  0,\n  0,\n  0,\n  1137,\n  1139,\n  5,\n  43,\n  0,\n  0,\n  1138,\n  1112,\n  1,\n  0,\n  0,\n  0,\n  1138,\n  1126,\n  1,\n  0,\n  0,\n  0,\n  1139,\n  191,\n  1,\n  0,\n  0,\n  0,\n  1140,\n  1142,\n  7,\n  13,\n  0,\n  0,\n  1141,\n  1143,\n  5,\n  105,\n  0,\n  0,\n  1142,\n  1141,\n  1,\n  0,\n  0,\n  0,\n  1142,\n  1143,\n  1,\n  0,\n  0,\n  0,\n  1143,\n  193,\n  1,\n  0,\n  0,\n  0,\n  1144,\n  1145,\n  7,\n  14,\n  0,\n  0,\n  1145,\n  195,\n  1,\n  0,\n  0,\n  0,\n  1146,\n  1148,\n  5,\n  106,\n  0,\n  0,\n  1147,\n  1146,\n  1,\n  0,\n  0,\n  0,\n  1148,\n  1149,\n  1,\n  0,\n  0,\n  0,\n  1149,\n  1147,\n  1,\n  0,\n  0,\n  0,\n  1149,\n  1150,\n  1,\n  0,\n  0,\n  0,\n  1150,\n  197,\n  1,\n  0,\n  0,\n  0,\n  1151,\n  1163,\n  5,\n  96,\n  0,\n  0,\n  1152,\n  1153,\n  5,\n  23,\n  0,\n  0,\n  1153,\n  1158,\n  3,\n  78,\n  39,\n  0,\n  1154,\n  1155,\n  5,\n  16,\n  0,\n  0,\n  1155,\n  1157,\n  3,\n  78,\n  39,\n  0,\n  1156,\n  1154,\n  1,\n  0,\n  0,\n  0,\n  1157,\n  1160,\n  1,\n  0,\n  0,\n  0,\n  1158,\n  1156,\n  1,\n  0,\n  0,\n  0,\n  1158,\n  1159,\n  1,\n  0,\n  0,\n  0,\n  1159,\n  1161,\n  1,\n  0,\n  0,\n  0,\n  1160,\n  1158,\n  1,\n  0,\n  0,\n  0,\n  1161,\n  1162,\n  5,\n  24,\n  0,\n  0,\n  1162,\n  1164,\n  1,\n  0,\n  0,\n  0,\n  1163,\n  1152,\n  1,\n  0,\n  0,\n  0,\n  1163,\n  1164,\n  1,\n  0,\n  0,\n  0,\n  1164,\n  199,\n  1,\n  0,\n  0,\n  0,\n  1165,\n  1167,\n  5,\n  130,\n  0,\n  0,\n  1166,\n  1165,\n  1,\n  0,\n  0,\n  0,\n  1167,\n  1168,\n  1,\n  0,\n  0,\n  0,\n  1168,\n  1166,\n  1,\n  0,\n  0,\n  0,\n  1168,\n  1169,\n  1,\n  0,\n  0,\n  0,\n  1169,\n  201,\n  1,\n  0,\n  0,\n  0,\n  130,\n  213,\n  215,\n  230,\n  234,\n  239,\n  245,\n  249,\n  252,\n  257,\n  263,\n  270,\n  274,\n  287,\n  295,\n  300,\n  310,\n  313,\n  319,\n  327,\n  330,\n  341,\n  351,\n  353,\n  359,\n  386,\n  389,\n  400,\n  405,\n  410,\n  424,\n  427,\n  434,\n  438,\n  440,\n  445,\n  450,\n  453,\n  459,\n  463,\n  467,\n  472,\n  485,\n  487,\n  494,\n  504,\n  510,\n  521,\n  524,\n  530,\n  533,\n  541,\n  544,\n  550,\n  553,\n  561,\n  564,\n  570,\n  574,\n  585,\n  590,\n  595,\n  603,\n  608,\n  614,\n  619,\n  632,\n  634,\n  639,\n  649,\n  669,\n  681,\n  686,\n  692,\n  696,\n  699,\n  711,\n  720,\n  724,\n  727,\n  734,\n  740,\n  762,\n  784,\n  788,\n  793,\n  797,\n  801,\n  806,\n  811,\n  815,\n  839,\n  893,\n  897,\n  913,\n  915,\n  927,\n  934,\n  942,\n  946,\n  954,\n  958,\n  960,\n  971,\n  993,\n  998,\n  1008,\n  1012,\n  1018,\n  1022,\n  1028,\n  1041,\n  1048,\n  1063,\n  1072,\n  1078,\n  1082,\n  1092,\n  1097,\n  1110,\n  1114,\n  1118,\n  1122,\n  1132,\n  1135,\n  1138,\n  1142,\n  1149,\n  1158,\n  1163,\n  1168\n];\n_SolidityParser.DecisionsToDFA = _SolidityParser._ATN.decisionToState.map((ds, index) => new sn(ds, index));\nvar SolidityParser = _SolidityParser;\nvar SourceUnitContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  EOF() {\n    return this.getToken(SolidityParser.EOF, 0);\n  }\n  pragmaDirective_list() {\n    return this.getTypedRuleContexts(PragmaDirectiveContext);\n  }\n  pragmaDirective(i2) {\n    return this.getTypedRuleContext(PragmaDirectiveContext, i2);\n  }\n  importDirective_list() {\n    return this.getTypedRuleContexts(ImportDirectiveContext);\n  }\n  importDirective(i2) {\n    return this.getTypedRuleContext(ImportDirectiveContext, i2);\n  }\n  contractDefinition_list() {\n    return this.getTypedRuleContexts(ContractDefinitionContext);\n  }\n  contractDefinition(i2) {\n    return this.getTypedRuleContext(ContractDefinitionContext, i2);\n  }\n  enumDefinition_list() {\n    return this.getTypedRuleContexts(EnumDefinitionContext);\n  }\n  enumDefinition(i2) {\n    return this.getTypedRuleContext(EnumDefinitionContext, i2);\n  }\n  eventDefinition_list() {\n    return this.getTypedRuleContexts(EventDefinitionContext);\n  }\n  eventDefinition(i2) {\n    return this.getTypedRuleContext(EventDefinitionContext, i2);\n  }\n  structDefinition_list() {\n    return this.getTypedRuleContexts(StructDefinitionContext);\n  }\n  structDefinition(i2) {\n    return this.getTypedRuleContext(StructDefinitionContext, i2);\n  }\n  functionDefinition_list() {\n    return this.getTypedRuleContexts(FunctionDefinitionContext);\n  }\n  functionDefinition(i2) {\n    return this.getTypedRuleContext(FunctionDefinitionContext, i2);\n  }\n  fileLevelConstant_list() {\n    return this.getTypedRuleContexts(FileLevelConstantContext);\n  }\n  fileLevelConstant(i2) {\n    return this.getTypedRuleContext(FileLevelConstantContext, i2);\n  }\n  customErrorDefinition_list() {\n    return this.getTypedRuleContexts(CustomErrorDefinitionContext);\n  }\n  customErrorDefinition(i2) {\n    return this.getTypedRuleContext(CustomErrorDefinitionContext, i2);\n  }\n  typeDefinition_list() {\n    return this.getTypedRuleContexts(TypeDefinitionContext);\n  }\n  typeDefinition(i2) {\n    return this.getTypedRuleContext(TypeDefinitionContext, i2);\n  }\n  usingForDeclaration_list() {\n    return this.getTypedRuleContexts(UsingForDeclarationContext);\n  }\n  usingForDeclaration(i2) {\n    return this.getTypedRuleContext(UsingForDeclarationContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_sourceUnit;\n  }\n  enterRule(listener) {\n    if (listener.enterSourceUnit) {\n      listener.enterSourceUnit(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitSourceUnit) {\n      listener.exitSourceUnit(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitSourceUnit) {\n      return visitor.visitSourceUnit(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PragmaDirectiveContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  pragmaName() {\n    return this.getTypedRuleContext(PragmaNameContext, 0);\n  }\n  pragmaValue() {\n    return this.getTypedRuleContext(PragmaValueContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_pragmaDirective;\n  }\n  enterRule(listener) {\n    if (listener.enterPragmaDirective) {\n      listener.enterPragmaDirective(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPragmaDirective) {\n      listener.exitPragmaDirective(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitPragmaDirective) {\n      return visitor.visitPragmaDirective(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PragmaNameContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_pragmaName;\n  }\n  enterRule(listener) {\n    if (listener.enterPragmaName) {\n      listener.enterPragmaName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPragmaName) {\n      listener.exitPragmaName(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitPragmaName) {\n      return visitor.visitPragmaName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PragmaValueContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  version() {\n    return this.getTypedRuleContext(VersionContext, 0);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_pragmaValue;\n  }\n  enterRule(listener) {\n    if (listener.enterPragmaValue) {\n      listener.enterPragmaValue(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPragmaValue) {\n      listener.exitPragmaValue(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitPragmaValue) {\n      return visitor.visitPragmaValue(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VersionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  versionConstraint_list() {\n    return this.getTypedRuleContexts(VersionConstraintContext);\n  }\n  versionConstraint(i2) {\n    return this.getTypedRuleContext(VersionConstraintContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_version;\n  }\n  enterRule(listener) {\n    if (listener.enterVersion) {\n      listener.enterVersion(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVersion) {\n      listener.exitVersion(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitVersion) {\n      return visitor.visitVersion(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VersionOperatorContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_versionOperator;\n  }\n  enterRule(listener) {\n    if (listener.enterVersionOperator) {\n      listener.enterVersionOperator(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVersionOperator) {\n      listener.exitVersionOperator(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitVersionOperator) {\n      return visitor.visitVersionOperator(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VersionConstraintContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  VersionLiteral() {\n    return this.getToken(SolidityParser.VersionLiteral, 0);\n  }\n  versionOperator() {\n    return this.getTypedRuleContext(VersionOperatorContext, 0);\n  }\n  DecimalNumber() {\n    return this.getToken(SolidityParser.DecimalNumber, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_versionConstraint;\n  }\n  enterRule(listener) {\n    if (listener.enterVersionConstraint) {\n      listener.enterVersionConstraint(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVersionConstraint) {\n      listener.exitVersionConstraint(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitVersionConstraint) {\n      return visitor.visitVersionConstraint(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ImportDeclarationContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier_list() {\n    return this.getTypedRuleContexts(IdentifierContext);\n  }\n  identifier(i2) {\n    return this.getTypedRuleContext(IdentifierContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_importDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterImportDeclaration) {\n      listener.enterImportDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitImportDeclaration) {\n      listener.exitImportDeclaration(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitImportDeclaration) {\n      return visitor.visitImportDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ImportDirectiveContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  importPath() {\n    return this.getTypedRuleContext(ImportPathContext, 0);\n  }\n  identifier_list() {\n    return this.getTypedRuleContexts(IdentifierContext);\n  }\n  identifier(i2) {\n    return this.getTypedRuleContext(IdentifierContext, i2);\n  }\n  importDeclaration_list() {\n    return this.getTypedRuleContexts(ImportDeclarationContext);\n  }\n  importDeclaration(i2) {\n    return this.getTypedRuleContext(ImportDeclarationContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_importDirective;\n  }\n  enterRule(listener) {\n    if (listener.enterImportDirective) {\n      listener.enterImportDirective(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitImportDirective) {\n      listener.exitImportDirective(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitImportDirective) {\n      return visitor.visitImportDirective(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ImportPathContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  StringLiteralFragment() {\n    return this.getToken(SolidityParser.StringLiteralFragment, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_importPath;\n  }\n  enterRule(listener) {\n    if (listener.enterImportPath) {\n      listener.enterImportPath(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitImportPath) {\n      listener.exitImportPath(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitImportPath) {\n      return visitor.visitImportPath(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ContractDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  inheritanceSpecifier_list() {\n    return this.getTypedRuleContexts(InheritanceSpecifierContext);\n  }\n  inheritanceSpecifier(i2) {\n    return this.getTypedRuleContext(InheritanceSpecifierContext, i2);\n  }\n  contractPart_list() {\n    return this.getTypedRuleContexts(ContractPartContext);\n  }\n  contractPart(i2) {\n    return this.getTypedRuleContext(ContractPartContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_contractDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterContractDefinition) {\n      listener.enterContractDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitContractDefinition) {\n      listener.exitContractDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitContractDefinition) {\n      return visitor.visitContractDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar InheritanceSpecifierContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  userDefinedTypeName() {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);\n  }\n  expressionList() {\n    return this.getTypedRuleContext(ExpressionListContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_inheritanceSpecifier;\n  }\n  enterRule(listener) {\n    if (listener.enterInheritanceSpecifier) {\n      listener.enterInheritanceSpecifier(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitInheritanceSpecifier) {\n      listener.exitInheritanceSpecifier(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitInheritanceSpecifier) {\n      return visitor.visitInheritanceSpecifier(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ContractPartContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  stateVariableDeclaration() {\n    return this.getTypedRuleContext(StateVariableDeclarationContext, 0);\n  }\n  usingForDeclaration() {\n    return this.getTypedRuleContext(UsingForDeclarationContext, 0);\n  }\n  structDefinition() {\n    return this.getTypedRuleContext(StructDefinitionContext, 0);\n  }\n  modifierDefinition() {\n    return this.getTypedRuleContext(ModifierDefinitionContext, 0);\n  }\n  functionDefinition() {\n    return this.getTypedRuleContext(FunctionDefinitionContext, 0);\n  }\n  eventDefinition() {\n    return this.getTypedRuleContext(EventDefinitionContext, 0);\n  }\n  enumDefinition() {\n    return this.getTypedRuleContext(EnumDefinitionContext, 0);\n  }\n  customErrorDefinition() {\n    return this.getTypedRuleContext(CustomErrorDefinitionContext, 0);\n  }\n  typeDefinition() {\n    return this.getTypedRuleContext(TypeDefinitionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_contractPart;\n  }\n  enterRule(listener) {\n    if (listener.enterContractPart) {\n      listener.enterContractPart(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitContractPart) {\n      listener.exitContractPart(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitContractPart) {\n      return visitor.visitContractPart(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StateVariableDeclarationContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  PublicKeyword_list() {\n    return this.getTokens(SolidityParser.PublicKeyword);\n  }\n  PublicKeyword(i2) {\n    return this.getToken(SolidityParser.PublicKeyword, i2);\n  }\n  InternalKeyword_list() {\n    return this.getTokens(SolidityParser.InternalKeyword);\n  }\n  InternalKeyword(i2) {\n    return this.getToken(SolidityParser.InternalKeyword, i2);\n  }\n  PrivateKeyword_list() {\n    return this.getTokens(SolidityParser.PrivateKeyword);\n  }\n  PrivateKeyword(i2) {\n    return this.getToken(SolidityParser.PrivateKeyword, i2);\n  }\n  ConstantKeyword_list() {\n    return this.getTokens(SolidityParser.ConstantKeyword);\n  }\n  ConstantKeyword(i2) {\n    return this.getToken(SolidityParser.ConstantKeyword, i2);\n  }\n  TransientKeyword_list() {\n    return this.getTokens(SolidityParser.TransientKeyword);\n  }\n  TransientKeyword(i2) {\n    return this.getToken(SolidityParser.TransientKeyword, i2);\n  }\n  ImmutableKeyword_list() {\n    return this.getTokens(SolidityParser.ImmutableKeyword);\n  }\n  ImmutableKeyword(i2) {\n    return this.getToken(SolidityParser.ImmutableKeyword, i2);\n  }\n  overrideSpecifier_list() {\n    return this.getTypedRuleContexts(OverrideSpecifierContext);\n  }\n  overrideSpecifier(i2) {\n    return this.getTypedRuleContext(OverrideSpecifierContext, i2);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_stateVariableDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterStateVariableDeclaration) {\n      listener.enterStateVariableDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStateVariableDeclaration) {\n      listener.exitStateVariableDeclaration(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitStateVariableDeclaration) {\n      return visitor.visitStateVariableDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FileLevelConstantContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  ConstantKeyword() {\n    return this.getToken(SolidityParser.ConstantKeyword, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_fileLevelConstant;\n  }\n  enterRule(listener) {\n    if (listener.enterFileLevelConstant) {\n      listener.enterFileLevelConstant(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFileLevelConstant) {\n      listener.exitFileLevelConstant(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFileLevelConstant) {\n      return visitor.visitFileLevelConstant(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar CustomErrorDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  parameterList() {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_customErrorDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterCustomErrorDefinition) {\n      listener.enterCustomErrorDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitCustomErrorDefinition) {\n      listener.exitCustomErrorDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitCustomErrorDefinition) {\n      return visitor.visitCustomErrorDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TypeDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  TypeKeyword() {\n    return this.getToken(SolidityParser.TypeKeyword, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  elementaryTypeName() {\n    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_typeDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterTypeDefinition) {\n      listener.enterTypeDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTypeDefinition) {\n      listener.exitTypeDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitTypeDefinition) {\n      return visitor.visitTypeDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UsingForDeclarationContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  usingForObject() {\n    return this.getTypedRuleContext(UsingForObjectContext, 0);\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  GlobalKeyword() {\n    return this.getToken(SolidityParser.GlobalKeyword, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_usingForDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterUsingForDeclaration) {\n      listener.enterUsingForDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUsingForDeclaration) {\n      listener.exitUsingForDeclaration(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitUsingForDeclaration) {\n      return visitor.visitUsingForDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UsingForObjectContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  userDefinedTypeName() {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);\n  }\n  usingForObjectDirective_list() {\n    return this.getTypedRuleContexts(UsingForObjectDirectiveContext);\n  }\n  usingForObjectDirective(i2) {\n    return this.getTypedRuleContext(UsingForObjectDirectiveContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_usingForObject;\n  }\n  enterRule(listener) {\n    if (listener.enterUsingForObject) {\n      listener.enterUsingForObject(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUsingForObject) {\n      listener.exitUsingForObject(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitUsingForObject) {\n      return visitor.visitUsingForObject(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UsingForObjectDirectiveContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  userDefinedTypeName() {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);\n  }\n  userDefinableOperators() {\n    return this.getTypedRuleContext(UserDefinableOperatorsContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_usingForObjectDirective;\n  }\n  enterRule(listener) {\n    if (listener.enterUsingForObjectDirective) {\n      listener.enterUsingForObjectDirective(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUsingForObjectDirective) {\n      listener.exitUsingForObjectDirective(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitUsingForObjectDirective) {\n      return visitor.visitUsingForObjectDirective(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UserDefinableOperatorsContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_userDefinableOperators;\n  }\n  enterRule(listener) {\n    if (listener.enterUserDefinableOperators) {\n      listener.enterUserDefinableOperators(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUserDefinableOperators) {\n      listener.exitUserDefinableOperators(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitUserDefinableOperators) {\n      return visitor.visitUserDefinableOperators(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StructDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  variableDeclaration_list() {\n    return this.getTypedRuleContexts(VariableDeclarationContext);\n  }\n  variableDeclaration(i2) {\n    return this.getTypedRuleContext(VariableDeclarationContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_structDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterStructDefinition) {\n      listener.enterStructDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStructDefinition) {\n      listener.exitStructDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitStructDefinition) {\n      return visitor.visitStructDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ModifierDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  block() {\n    return this.getTypedRuleContext(BlockContext, 0);\n  }\n  parameterList() {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n  }\n  VirtualKeyword_list() {\n    return this.getTokens(SolidityParser.VirtualKeyword);\n  }\n  VirtualKeyword(i2) {\n    return this.getToken(SolidityParser.VirtualKeyword, i2);\n  }\n  overrideSpecifier_list() {\n    return this.getTypedRuleContexts(OverrideSpecifierContext);\n  }\n  overrideSpecifier(i2) {\n    return this.getTypedRuleContext(OverrideSpecifierContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_modifierDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterModifierDefinition) {\n      listener.enterModifierDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitModifierDefinition) {\n      listener.exitModifierDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitModifierDefinition) {\n      return visitor.visitModifierDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ModifierInvocationContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  expressionList() {\n    return this.getTypedRuleContext(ExpressionListContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_modifierInvocation;\n  }\n  enterRule(listener) {\n    if (listener.enterModifierInvocation) {\n      listener.enterModifierInvocation(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitModifierInvocation) {\n      listener.exitModifierInvocation(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitModifierInvocation) {\n      return visitor.visitModifierInvocation(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  functionDescriptor() {\n    return this.getTypedRuleContext(FunctionDescriptorContext, 0);\n  }\n  parameterList() {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n  }\n  modifierList() {\n    return this.getTypedRuleContext(ModifierListContext, 0);\n  }\n  block() {\n    return this.getTypedRuleContext(BlockContext, 0);\n  }\n  returnParameters() {\n    return this.getTypedRuleContext(ReturnParametersContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionDefinition) {\n      listener.enterFunctionDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionDefinition) {\n      listener.exitFunctionDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFunctionDefinition) {\n      return visitor.visitFunctionDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionDescriptorContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  ConstructorKeyword() {\n    return this.getToken(SolidityParser.ConstructorKeyword, 0);\n  }\n  FallbackKeyword() {\n    return this.getToken(SolidityParser.FallbackKeyword, 0);\n  }\n  ReceiveKeyword() {\n    return this.getToken(SolidityParser.ReceiveKeyword, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionDescriptor;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionDescriptor) {\n      listener.enterFunctionDescriptor(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionDescriptor) {\n      listener.exitFunctionDescriptor(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFunctionDescriptor) {\n      return visitor.visitFunctionDescriptor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ReturnParametersContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  parameterList() {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_returnParameters;\n  }\n  enterRule(listener) {\n    if (listener.enterReturnParameters) {\n      listener.enterReturnParameters(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitReturnParameters) {\n      listener.exitReturnParameters(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitReturnParameters) {\n      return visitor.visitReturnParameters(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ModifierListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  ExternalKeyword_list() {\n    return this.getTokens(SolidityParser.ExternalKeyword);\n  }\n  ExternalKeyword(i2) {\n    return this.getToken(SolidityParser.ExternalKeyword, i2);\n  }\n  PublicKeyword_list() {\n    return this.getTokens(SolidityParser.PublicKeyword);\n  }\n  PublicKeyword(i2) {\n    return this.getToken(SolidityParser.PublicKeyword, i2);\n  }\n  InternalKeyword_list() {\n    return this.getTokens(SolidityParser.InternalKeyword);\n  }\n  InternalKeyword(i2) {\n    return this.getToken(SolidityParser.InternalKeyword, i2);\n  }\n  PrivateKeyword_list() {\n    return this.getTokens(SolidityParser.PrivateKeyword);\n  }\n  PrivateKeyword(i2) {\n    return this.getToken(SolidityParser.PrivateKeyword, i2);\n  }\n  VirtualKeyword_list() {\n    return this.getTokens(SolidityParser.VirtualKeyword);\n  }\n  VirtualKeyword(i2) {\n    return this.getToken(SolidityParser.VirtualKeyword, i2);\n  }\n  stateMutability_list() {\n    return this.getTypedRuleContexts(StateMutabilityContext);\n  }\n  stateMutability(i2) {\n    return this.getTypedRuleContext(StateMutabilityContext, i2);\n  }\n  modifierInvocation_list() {\n    return this.getTypedRuleContexts(ModifierInvocationContext);\n  }\n  modifierInvocation(i2) {\n    return this.getTypedRuleContext(ModifierInvocationContext, i2);\n  }\n  overrideSpecifier_list() {\n    return this.getTypedRuleContexts(OverrideSpecifierContext);\n  }\n  overrideSpecifier(i2) {\n    return this.getTypedRuleContext(OverrideSpecifierContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_modifierList;\n  }\n  enterRule(listener) {\n    if (listener.enterModifierList) {\n      listener.enterModifierList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitModifierList) {\n      listener.exitModifierList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitModifierList) {\n      return visitor.visitModifierList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EventDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  eventParameterList() {\n    return this.getTypedRuleContext(EventParameterListContext, 0);\n  }\n  AnonymousKeyword() {\n    return this.getToken(SolidityParser.AnonymousKeyword, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_eventDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterEventDefinition) {\n      listener.enterEventDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEventDefinition) {\n      listener.exitEventDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitEventDefinition) {\n      return visitor.visitEventDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EnumValueContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_enumValue;\n  }\n  enterRule(listener) {\n    if (listener.enterEnumValue) {\n      listener.enterEnumValue(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEnumValue) {\n      listener.exitEnumValue(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitEnumValue) {\n      return visitor.visitEnumValue(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EnumDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  enumValue_list() {\n    return this.getTypedRuleContexts(EnumValueContext);\n  }\n  enumValue(i2) {\n    return this.getTypedRuleContext(EnumValueContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_enumDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterEnumDefinition) {\n      listener.enterEnumDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEnumDefinition) {\n      listener.exitEnumDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitEnumDefinition) {\n      return visitor.visitEnumDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ParameterListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  parameter_list() {\n    return this.getTypedRuleContexts(ParameterContext);\n  }\n  parameter(i2) {\n    return this.getTypedRuleContext(ParameterContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_parameterList;\n  }\n  enterRule(listener) {\n    if (listener.enterParameterList) {\n      listener.enterParameterList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitParameterList) {\n      listener.exitParameterList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitParameterList) {\n      return visitor.visitParameterList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ParameterContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  storageLocation() {\n    return this.getTypedRuleContext(StorageLocationContext, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_parameter;\n  }\n  enterRule(listener) {\n    if (listener.enterParameter) {\n      listener.enterParameter(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitParameter) {\n      listener.exitParameter(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitParameter) {\n      return visitor.visitParameter(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EventParameterListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  eventParameter_list() {\n    return this.getTypedRuleContexts(EventParameterContext);\n  }\n  eventParameter(i2) {\n    return this.getTypedRuleContext(EventParameterContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_eventParameterList;\n  }\n  enterRule(listener) {\n    if (listener.enterEventParameterList) {\n      listener.enterEventParameterList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEventParameterList) {\n      listener.exitEventParameterList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitEventParameterList) {\n      return visitor.visitEventParameterList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EventParameterContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  IndexedKeyword() {\n    return this.getToken(SolidityParser.IndexedKeyword, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_eventParameter;\n  }\n  enterRule(listener) {\n    if (listener.enterEventParameter) {\n      listener.enterEventParameter(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEventParameter) {\n      listener.exitEventParameter(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitEventParameter) {\n      return visitor.visitEventParameter(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionTypeParameterListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  functionTypeParameter_list() {\n    return this.getTypedRuleContexts(FunctionTypeParameterContext);\n  }\n  functionTypeParameter(i2) {\n    return this.getTypedRuleContext(FunctionTypeParameterContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionTypeParameterList;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionTypeParameterList) {\n      listener.enterFunctionTypeParameterList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionTypeParameterList) {\n      listener.exitFunctionTypeParameterList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFunctionTypeParameterList) {\n      return visitor.visitFunctionTypeParameterList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionTypeParameterContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  storageLocation() {\n    return this.getTypedRuleContext(StorageLocationContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionTypeParameter;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionTypeParameter) {\n      listener.enterFunctionTypeParameter(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionTypeParameter) {\n      listener.exitFunctionTypeParameter(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFunctionTypeParameter) {\n      return visitor.visitFunctionTypeParameter(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VariableDeclarationContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  storageLocation() {\n    return this.getTypedRuleContext(StorageLocationContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_variableDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterVariableDeclaration) {\n      listener.enterVariableDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVariableDeclaration) {\n      listener.exitVariableDeclaration(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitVariableDeclaration) {\n      return visitor.visitVariableDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TypeNameContext = class _TypeNameContext extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  elementaryTypeName() {\n    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);\n  }\n  userDefinedTypeName() {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);\n  }\n  mapping() {\n    return this.getTypedRuleContext(MappingContext, 0);\n  }\n  functionTypeName() {\n    return this.getTypedRuleContext(FunctionTypeNameContext, 0);\n  }\n  PayableKeyword() {\n    return this.getToken(SolidityParser.PayableKeyword, 0);\n  }\n  typeName() {\n    return this.getTypedRuleContext(_TypeNameContext, 0);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_typeName;\n  }\n  enterRule(listener) {\n    if (listener.enterTypeName) {\n      listener.enterTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTypeName) {\n      listener.exitTypeName(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitTypeName) {\n      return visitor.visitTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UserDefinedTypeNameContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier_list() {\n    return this.getTypedRuleContexts(IdentifierContext);\n  }\n  identifier(i2) {\n    return this.getTypedRuleContext(IdentifierContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_userDefinedTypeName;\n  }\n  enterRule(listener) {\n    if (listener.enterUserDefinedTypeName) {\n      listener.enterUserDefinedTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUserDefinedTypeName) {\n      listener.exitUserDefinedTypeName(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitUserDefinedTypeName) {\n      return visitor.visitUserDefinedTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar MappingKeyContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  elementaryTypeName() {\n    return this.getTypedRuleContext(ElementaryTypeNameContext, 0);\n  }\n  userDefinedTypeName() {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_mappingKey;\n  }\n  enterRule(listener) {\n    if (listener.enterMappingKey) {\n      listener.enterMappingKey(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitMappingKey) {\n      listener.exitMappingKey(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitMappingKey) {\n      return visitor.visitMappingKey(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar MappingContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  mappingKey() {\n    return this.getTypedRuleContext(MappingKeyContext, 0);\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  mappingKeyName() {\n    return this.getTypedRuleContext(MappingKeyNameContext, 0);\n  }\n  mappingValueName() {\n    return this.getTypedRuleContext(MappingValueNameContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_mapping;\n  }\n  enterRule(listener) {\n    if (listener.enterMapping) {\n      listener.enterMapping(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitMapping) {\n      listener.exitMapping(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitMapping) {\n      return visitor.visitMapping(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar MappingKeyNameContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_mappingKeyName;\n  }\n  enterRule(listener) {\n    if (listener.enterMappingKeyName) {\n      listener.enterMappingKeyName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitMappingKeyName) {\n      listener.exitMappingKeyName(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitMappingKeyName) {\n      return visitor.visitMappingKeyName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar MappingValueNameContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_mappingValueName;\n  }\n  enterRule(listener) {\n    if (listener.enterMappingValueName) {\n      listener.enterMappingValueName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitMappingValueName) {\n      listener.exitMappingValueName(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitMappingValueName) {\n      return visitor.visitMappingValueName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionTypeNameContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  functionTypeParameterList_list() {\n    return this.getTypedRuleContexts(FunctionTypeParameterListContext);\n  }\n  functionTypeParameterList(i2) {\n    return this.getTypedRuleContext(FunctionTypeParameterListContext, i2);\n  }\n  InternalKeyword_list() {\n    return this.getTokens(SolidityParser.InternalKeyword);\n  }\n  InternalKeyword(i2) {\n    return this.getToken(SolidityParser.InternalKeyword, i2);\n  }\n  ExternalKeyword_list() {\n    return this.getTokens(SolidityParser.ExternalKeyword);\n  }\n  ExternalKeyword(i2) {\n    return this.getToken(SolidityParser.ExternalKeyword, i2);\n  }\n  stateMutability_list() {\n    return this.getTypedRuleContexts(StateMutabilityContext);\n  }\n  stateMutability(i2) {\n    return this.getTypedRuleContext(StateMutabilityContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionTypeName;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionTypeName) {\n      listener.enterFunctionTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionTypeName) {\n      listener.exitFunctionTypeName(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFunctionTypeName) {\n      return visitor.visitFunctionTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StorageLocationContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_storageLocation;\n  }\n  enterRule(listener) {\n    if (listener.enterStorageLocation) {\n      listener.enterStorageLocation(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStorageLocation) {\n      listener.exitStorageLocation(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitStorageLocation) {\n      return visitor.visitStorageLocation(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StateMutabilityContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  PureKeyword() {\n    return this.getToken(SolidityParser.PureKeyword, 0);\n  }\n  ConstantKeyword() {\n    return this.getToken(SolidityParser.ConstantKeyword, 0);\n  }\n  ViewKeyword() {\n    return this.getToken(SolidityParser.ViewKeyword, 0);\n  }\n  PayableKeyword() {\n    return this.getToken(SolidityParser.PayableKeyword, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_stateMutability;\n  }\n  enterRule(listener) {\n    if (listener.enterStateMutability) {\n      listener.enterStateMutability(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStateMutability) {\n      listener.exitStateMutability(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitStateMutability) {\n      return visitor.visitStateMutability(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar BlockContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  statement_list() {\n    return this.getTypedRuleContexts(StatementContext);\n  }\n  statement(i2) {\n    return this.getTypedRuleContext(StatementContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_block;\n  }\n  enterRule(listener) {\n    if (listener.enterBlock) {\n      listener.enterBlock(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitBlock) {\n      listener.exitBlock(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitBlock) {\n      return visitor.visitBlock(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  ifStatement() {\n    return this.getTypedRuleContext(IfStatementContext, 0);\n  }\n  tryStatement() {\n    return this.getTypedRuleContext(TryStatementContext, 0);\n  }\n  whileStatement() {\n    return this.getTypedRuleContext(WhileStatementContext, 0);\n  }\n  forStatement() {\n    return this.getTypedRuleContext(ForStatementContext, 0);\n  }\n  block() {\n    return this.getTypedRuleContext(BlockContext, 0);\n  }\n  inlineAssemblyStatement() {\n    return this.getTypedRuleContext(InlineAssemblyStatementContext, 0);\n  }\n  doWhileStatement() {\n    return this.getTypedRuleContext(DoWhileStatementContext, 0);\n  }\n  continueStatement() {\n    return this.getTypedRuleContext(ContinueStatementContext, 0);\n  }\n  breakStatement() {\n    return this.getTypedRuleContext(BreakStatementContext, 0);\n  }\n  returnStatement() {\n    return this.getTypedRuleContext(ReturnStatementContext, 0);\n  }\n  throwStatement() {\n    return this.getTypedRuleContext(ThrowStatementContext, 0);\n  }\n  emitStatement() {\n    return this.getTypedRuleContext(EmitStatementContext, 0);\n  }\n  simpleStatement() {\n    return this.getTypedRuleContext(SimpleStatementContext, 0);\n  }\n  uncheckedStatement() {\n    return this.getTypedRuleContext(UncheckedStatementContext, 0);\n  }\n  revertStatement() {\n    return this.getTypedRuleContext(RevertStatementContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_statement;\n  }\n  enterRule(listener) {\n    if (listener.enterStatement) {\n      listener.enterStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStatement) {\n      listener.exitStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitStatement) {\n      return visitor.visitStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ExpressionStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_expressionStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterExpressionStatement) {\n      listener.enterExpressionStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitExpressionStatement) {\n      listener.exitExpressionStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitExpressionStatement) {\n      return visitor.visitExpressionStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar IfStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  statement_list() {\n    return this.getTypedRuleContexts(StatementContext);\n  }\n  statement(i2) {\n    return this.getTypedRuleContext(StatementContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_ifStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterIfStatement) {\n      listener.enterIfStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitIfStatement) {\n      listener.exitIfStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitIfStatement) {\n      return visitor.visitIfStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TryStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  block() {\n    return this.getTypedRuleContext(BlockContext, 0);\n  }\n  returnParameters() {\n    return this.getTypedRuleContext(ReturnParametersContext, 0);\n  }\n  catchClause_list() {\n    return this.getTypedRuleContexts(CatchClauseContext);\n  }\n  catchClause(i2) {\n    return this.getTypedRuleContext(CatchClauseContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_tryStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterTryStatement) {\n      listener.enterTryStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTryStatement) {\n      listener.exitTryStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitTryStatement) {\n      return visitor.visitTryStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar CatchClauseContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  block() {\n    return this.getTypedRuleContext(BlockContext, 0);\n  }\n  parameterList() {\n    return this.getTypedRuleContext(ParameterListContext, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_catchClause;\n  }\n  enterRule(listener) {\n    if (listener.enterCatchClause) {\n      listener.enterCatchClause(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitCatchClause) {\n      listener.exitCatchClause(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitCatchClause) {\n      return visitor.visitCatchClause(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar WhileStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  statement() {\n    return this.getTypedRuleContext(StatementContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_whileStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterWhileStatement) {\n      listener.enterWhileStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitWhileStatement) {\n      listener.exitWhileStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitWhileStatement) {\n      return visitor.visitWhileStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar SimpleStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  variableDeclarationStatement() {\n    return this.getTypedRuleContext(VariableDeclarationStatementContext, 0);\n  }\n  expressionStatement() {\n    return this.getTypedRuleContext(ExpressionStatementContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_simpleStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterSimpleStatement) {\n      listener.enterSimpleStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitSimpleStatement) {\n      listener.exitSimpleStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitSimpleStatement) {\n      return visitor.visitSimpleStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UncheckedStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  block() {\n    return this.getTypedRuleContext(BlockContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_uncheckedStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterUncheckedStatement) {\n      listener.enterUncheckedStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUncheckedStatement) {\n      listener.exitUncheckedStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitUncheckedStatement) {\n      return visitor.visitUncheckedStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ForStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  statement() {\n    return this.getTypedRuleContext(StatementContext, 0);\n  }\n  simpleStatement() {\n    return this.getTypedRuleContext(SimpleStatementContext, 0);\n  }\n  expressionStatement() {\n    return this.getTypedRuleContext(ExpressionStatementContext, 0);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_forStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterForStatement) {\n      listener.enterForStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitForStatement) {\n      listener.exitForStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitForStatement) {\n      return visitor.visitForStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar InlineAssemblyStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyBlock() {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n  }\n  StringLiteralFragment() {\n    return this.getToken(SolidityParser.StringLiteralFragment, 0);\n  }\n  inlineAssemblyStatementFlag() {\n    return this.getTypedRuleContext(InlineAssemblyStatementFlagContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_inlineAssemblyStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterInlineAssemblyStatement) {\n      listener.enterInlineAssemblyStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitInlineAssemblyStatement) {\n      listener.exitInlineAssemblyStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitInlineAssemblyStatement) {\n      return visitor.visitInlineAssemblyStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar InlineAssemblyStatementFlagContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  stringLiteral() {\n    return this.getTypedRuleContext(StringLiteralContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_inlineAssemblyStatementFlag;\n  }\n  enterRule(listener) {\n    if (listener.enterInlineAssemblyStatementFlag) {\n      listener.enterInlineAssemblyStatementFlag(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitInlineAssemblyStatementFlag) {\n      listener.exitInlineAssemblyStatementFlag(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitInlineAssemblyStatementFlag) {\n      return visitor.visitInlineAssemblyStatementFlag(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar DoWhileStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  statement() {\n    return this.getTypedRuleContext(StatementContext, 0);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_doWhileStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterDoWhileStatement) {\n      listener.enterDoWhileStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitDoWhileStatement) {\n      listener.exitDoWhileStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitDoWhileStatement) {\n      return visitor.visitDoWhileStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ContinueStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  ContinueKeyword() {\n    return this.getToken(SolidityParser.ContinueKeyword, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_continueStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterContinueStatement) {\n      listener.enterContinueStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitContinueStatement) {\n      listener.exitContinueStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitContinueStatement) {\n      return visitor.visitContinueStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar BreakStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  BreakKeyword() {\n    return this.getToken(SolidityParser.BreakKeyword, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_breakStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterBreakStatement) {\n      listener.enterBreakStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitBreakStatement) {\n      listener.exitBreakStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitBreakStatement) {\n      return visitor.visitBreakStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ReturnStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_returnStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterReturnStatement) {\n      listener.enterReturnStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitReturnStatement) {\n      listener.exitReturnStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitReturnStatement) {\n      return visitor.visitReturnStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ThrowStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_throwStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterThrowStatement) {\n      listener.enterThrowStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitThrowStatement) {\n      listener.exitThrowStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitThrowStatement) {\n      return visitor.visitThrowStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EmitStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  functionCall() {\n    return this.getTypedRuleContext(FunctionCallContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_emitStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterEmitStatement) {\n      listener.enterEmitStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEmitStatement) {\n      listener.exitEmitStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitEmitStatement) {\n      return visitor.visitEmitStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar RevertStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  functionCall() {\n    return this.getTypedRuleContext(FunctionCallContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_revertStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterRevertStatement) {\n      listener.enterRevertStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitRevertStatement) {\n      listener.exitRevertStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitRevertStatement) {\n      return visitor.visitRevertStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VariableDeclarationStatementContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifierList() {\n    return this.getTypedRuleContext(IdentifierListContext, 0);\n  }\n  variableDeclaration() {\n    return this.getTypedRuleContext(VariableDeclarationContext, 0);\n  }\n  variableDeclarationList() {\n    return this.getTypedRuleContext(VariableDeclarationListContext, 0);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_variableDeclarationStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterVariableDeclarationStatement) {\n      listener.enterVariableDeclarationStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVariableDeclarationStatement) {\n      listener.exitVariableDeclarationStatement(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitVariableDeclarationStatement) {\n      return visitor.visitVariableDeclarationStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VariableDeclarationListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  variableDeclaration_list() {\n    return this.getTypedRuleContexts(VariableDeclarationContext);\n  }\n  variableDeclaration(i2) {\n    return this.getTypedRuleContext(VariableDeclarationContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_variableDeclarationList;\n  }\n  enterRule(listener) {\n    if (listener.enterVariableDeclarationList) {\n      listener.enterVariableDeclarationList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVariableDeclarationList) {\n      listener.exitVariableDeclarationList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitVariableDeclarationList) {\n      return visitor.visitVariableDeclarationList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar IdentifierListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier_list() {\n    return this.getTypedRuleContexts(IdentifierContext);\n  }\n  identifier(i2) {\n    return this.getTypedRuleContext(IdentifierContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_identifierList;\n  }\n  enterRule(listener) {\n    if (listener.enterIdentifierList) {\n      listener.enterIdentifierList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitIdentifierList) {\n      listener.exitIdentifierList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitIdentifierList) {\n      return visitor.visitIdentifierList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ElementaryTypeNameContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  Int() {\n    return this.getToken(SolidityParser.Int, 0);\n  }\n  Uint() {\n    return this.getToken(SolidityParser.Uint, 0);\n  }\n  Byte() {\n    return this.getToken(SolidityParser.Byte, 0);\n  }\n  Fixed() {\n    return this.getToken(SolidityParser.Fixed, 0);\n  }\n  Ufixed() {\n    return this.getToken(SolidityParser.Ufixed, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_elementaryTypeName;\n  }\n  enterRule(listener) {\n    if (listener.enterElementaryTypeName) {\n      listener.enterElementaryTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitElementaryTypeName) {\n      listener.exitElementaryTypeName(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitElementaryTypeName) {\n      return visitor.visitElementaryTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ExpressionContext = class _ExpressionContext extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  expression_list() {\n    return this.getTypedRuleContexts(_ExpressionContext);\n  }\n  expression(i2) {\n    return this.getTypedRuleContext(_ExpressionContext, i2);\n  }\n  primaryExpression() {\n    return this.getTypedRuleContext(PrimaryExpressionContext, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  nameValueList() {\n    return this.getTypedRuleContext(NameValueListContext, 0);\n  }\n  functionCallArguments() {\n    return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_expression;\n  }\n  enterRule(listener) {\n    if (listener.enterExpression) {\n      listener.enterExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitExpression) {\n      listener.exitExpression(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitExpression) {\n      return visitor.visitExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PrimaryExpressionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  BooleanLiteral() {\n    return this.getToken(SolidityParser.BooleanLiteral, 0);\n  }\n  numberLiteral() {\n    return this.getTypedRuleContext(NumberLiteralContext, 0);\n  }\n  hexLiteral() {\n    return this.getTypedRuleContext(HexLiteralContext, 0);\n  }\n  stringLiteral() {\n    return this.getTypedRuleContext(StringLiteralContext, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  TypeKeyword() {\n    return this.getToken(SolidityParser.TypeKeyword, 0);\n  }\n  PayableKeyword() {\n    return this.getToken(SolidityParser.PayableKeyword, 0);\n  }\n  tupleExpression() {\n    return this.getTypedRuleContext(TupleExpressionContext, 0);\n  }\n  typeName() {\n    return this.getTypedRuleContext(TypeNameContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_primaryExpression;\n  }\n  enterRule(listener) {\n    if (listener.enterPrimaryExpression) {\n      listener.enterPrimaryExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPrimaryExpression) {\n      listener.exitPrimaryExpression(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitPrimaryExpression) {\n      return visitor.visitPrimaryExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ExpressionListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression_list() {\n    return this.getTypedRuleContexts(ExpressionContext);\n  }\n  expression(i2) {\n    return this.getTypedRuleContext(ExpressionContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_expressionList;\n  }\n  enterRule(listener) {\n    if (listener.enterExpressionList) {\n      listener.enterExpressionList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitExpressionList) {\n      listener.exitExpressionList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitExpressionList) {\n      return visitor.visitExpressionList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar NameValueListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  nameValue_list() {\n    return this.getTypedRuleContexts(NameValueContext);\n  }\n  nameValue(i2) {\n    return this.getTypedRuleContext(NameValueContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_nameValueList;\n  }\n  enterRule(listener) {\n    if (listener.enterNameValueList) {\n      listener.enterNameValueList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitNameValueList) {\n      listener.exitNameValueList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitNameValueList) {\n      return visitor.visitNameValueList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar NameValueContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_nameValue;\n  }\n  enterRule(listener) {\n    if (listener.enterNameValue) {\n      listener.enterNameValue(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitNameValue) {\n      listener.exitNameValue(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitNameValue) {\n      return visitor.visitNameValue(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionCallArgumentsContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  nameValueList() {\n    return this.getTypedRuleContext(NameValueListContext, 0);\n  }\n  expressionList() {\n    return this.getTypedRuleContext(ExpressionListContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionCallArguments;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionCallArguments) {\n      listener.enterFunctionCallArguments(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionCallArguments) {\n      listener.exitFunctionCallArguments(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFunctionCallArguments) {\n      return visitor.visitFunctionCallArguments(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionCallContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression() {\n    return this.getTypedRuleContext(ExpressionContext, 0);\n  }\n  functionCallArguments() {\n    return this.getTypedRuleContext(FunctionCallArgumentsContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionCall;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionCall) {\n      listener.enterFunctionCall(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionCall) {\n      listener.exitFunctionCall(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitFunctionCall) {\n      return visitor.visitFunctionCall(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyBlockContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyItem_list() {\n    return this.getTypedRuleContexts(AssemblyItemContext);\n  }\n  assemblyItem(i2) {\n    return this.getTypedRuleContext(AssemblyItemContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyBlock;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyBlock) {\n      listener.enterAssemblyBlock(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyBlock) {\n      listener.exitAssemblyBlock(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyBlock) {\n      return visitor.visitAssemblyBlock(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyItemContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  assemblyBlock() {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n  }\n  assemblyExpression() {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n  }\n  assemblyLocalDefinition() {\n    return this.getTypedRuleContext(AssemblyLocalDefinitionContext, 0);\n  }\n  assemblyAssignment() {\n    return this.getTypedRuleContext(AssemblyAssignmentContext, 0);\n  }\n  assemblyStackAssignment() {\n    return this.getTypedRuleContext(AssemblyStackAssignmentContext, 0);\n  }\n  labelDefinition() {\n    return this.getTypedRuleContext(LabelDefinitionContext, 0);\n  }\n  assemblySwitch() {\n    return this.getTypedRuleContext(AssemblySwitchContext, 0);\n  }\n  assemblyFunctionDefinition() {\n    return this.getTypedRuleContext(AssemblyFunctionDefinitionContext, 0);\n  }\n  assemblyFor() {\n    return this.getTypedRuleContext(AssemblyForContext, 0);\n  }\n  assemblyIf() {\n    return this.getTypedRuleContext(AssemblyIfContext, 0);\n  }\n  BreakKeyword() {\n    return this.getToken(SolidityParser.BreakKeyword, 0);\n  }\n  ContinueKeyword() {\n    return this.getToken(SolidityParser.ContinueKeyword, 0);\n  }\n  LeaveKeyword() {\n    return this.getToken(SolidityParser.LeaveKeyword, 0);\n  }\n  numberLiteral() {\n    return this.getTypedRuleContext(NumberLiteralContext, 0);\n  }\n  stringLiteral() {\n    return this.getTypedRuleContext(StringLiteralContext, 0);\n  }\n  hexLiteral() {\n    return this.getTypedRuleContext(HexLiteralContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyItem;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyItem) {\n      listener.enterAssemblyItem(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyItem) {\n      listener.exitAssemblyItem(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyItem) {\n      return visitor.visitAssemblyItem(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyExpressionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyCall() {\n    return this.getTypedRuleContext(AssemblyCallContext, 0);\n  }\n  assemblyLiteral() {\n    return this.getTypedRuleContext(AssemblyLiteralContext, 0);\n  }\n  assemblyMember() {\n    return this.getTypedRuleContext(AssemblyMemberContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyExpression;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyExpression) {\n      listener.enterAssemblyExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyExpression) {\n      listener.exitAssemblyExpression(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyExpression) {\n      return visitor.visitAssemblyExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyMemberContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier_list() {\n    return this.getTypedRuleContexts(IdentifierContext);\n  }\n  identifier(i2) {\n    return this.getTypedRuleContext(IdentifierContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyMember;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyMember) {\n      listener.enterAssemblyMember(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyMember) {\n      listener.exitAssemblyMember(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyMember) {\n      return visitor.visitAssemblyMember(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyCallContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  assemblyExpression_list() {\n    return this.getTypedRuleContexts(AssemblyExpressionContext);\n  }\n  assemblyExpression(i2) {\n    return this.getTypedRuleContext(AssemblyExpressionContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyCall;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyCall) {\n      listener.enterAssemblyCall(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyCall) {\n      listener.exitAssemblyCall(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyCall) {\n      return visitor.visitAssemblyCall(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyLocalDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyIdentifierOrList() {\n    return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);\n  }\n  assemblyExpression() {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyLocalDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyLocalDefinition) {\n      listener.enterAssemblyLocalDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyLocalDefinition) {\n      listener.exitAssemblyLocalDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyLocalDefinition) {\n      return visitor.visitAssemblyLocalDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyAssignmentContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyIdentifierOrList() {\n    return this.getTypedRuleContext(AssemblyIdentifierOrListContext, 0);\n  }\n  assemblyExpression() {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyAssignment;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyAssignment) {\n      listener.enterAssemblyAssignment(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyAssignment) {\n      listener.exitAssemblyAssignment(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyAssignment) {\n      return visitor.visitAssemblyAssignment(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyIdentifierOrListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  assemblyMember() {\n    return this.getTypedRuleContext(AssemblyMemberContext, 0);\n  }\n  assemblyIdentifierList() {\n    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyIdentifierOrList;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyIdentifierOrList) {\n      listener.enterAssemblyIdentifierOrList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyIdentifierOrList) {\n      listener.exitAssemblyIdentifierOrList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyIdentifierOrList) {\n      return visitor.visitAssemblyIdentifierOrList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyIdentifierListContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier_list() {\n    return this.getTypedRuleContexts(IdentifierContext);\n  }\n  identifier(i2) {\n    return this.getTypedRuleContext(IdentifierContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyIdentifierList;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyIdentifierList) {\n      listener.enterAssemblyIdentifierList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyIdentifierList) {\n      listener.exitAssemblyIdentifierList(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyIdentifierList) {\n      return visitor.visitAssemblyIdentifierList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyStackAssignmentContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyExpression() {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyStackAssignment;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyStackAssignment) {\n      listener.enterAssemblyStackAssignment(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyStackAssignment) {\n      listener.exitAssemblyStackAssignment(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyStackAssignment) {\n      return visitor.visitAssemblyStackAssignment(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar LabelDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_labelDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterLabelDefinition) {\n      listener.enterLabelDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitLabelDefinition) {\n      listener.exitLabelDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitLabelDefinition) {\n      return visitor.visitLabelDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblySwitchContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyExpression() {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n  }\n  assemblyCase_list() {\n    return this.getTypedRuleContexts(AssemblyCaseContext);\n  }\n  assemblyCase(i2) {\n    return this.getTypedRuleContext(AssemblyCaseContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblySwitch;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblySwitch) {\n      listener.enterAssemblySwitch(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblySwitch) {\n      listener.exitAssemblySwitch(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblySwitch) {\n      return visitor.visitAssemblySwitch(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyCaseContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyLiteral() {\n    return this.getTypedRuleContext(AssemblyLiteralContext, 0);\n  }\n  assemblyBlock() {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyCase;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyCase) {\n      listener.enterAssemblyCase(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyCase) {\n      listener.exitAssemblyCase(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyCase) {\n      return visitor.visitAssemblyCase(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyFunctionDefinitionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  identifier() {\n    return this.getTypedRuleContext(IdentifierContext, 0);\n  }\n  assemblyBlock() {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n  }\n  assemblyIdentifierList() {\n    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);\n  }\n  assemblyFunctionReturns() {\n    return this.getTypedRuleContext(AssemblyFunctionReturnsContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyFunctionDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyFunctionDefinition) {\n      listener.enterAssemblyFunctionDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyFunctionDefinition) {\n      listener.exitAssemblyFunctionDefinition(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyFunctionDefinition) {\n      return visitor.visitAssemblyFunctionDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyFunctionReturnsContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyIdentifierList() {\n    return this.getTypedRuleContext(AssemblyIdentifierListContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyFunctionReturns;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyFunctionReturns) {\n      listener.enterAssemblyFunctionReturns(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyFunctionReturns) {\n      listener.exitAssemblyFunctionReturns(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyFunctionReturns) {\n      return visitor.visitAssemblyFunctionReturns(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyForContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyExpression_list() {\n    return this.getTypedRuleContexts(AssemblyExpressionContext);\n  }\n  assemblyExpression(i2) {\n    return this.getTypedRuleContext(AssemblyExpressionContext, i2);\n  }\n  assemblyBlock_list() {\n    return this.getTypedRuleContexts(AssemblyBlockContext);\n  }\n  assemblyBlock(i2) {\n    return this.getTypedRuleContext(AssemblyBlockContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyFor;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyFor) {\n      listener.enterAssemblyFor(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyFor) {\n      listener.exitAssemblyFor(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyFor) {\n      return visitor.visitAssemblyFor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyIfContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  assemblyExpression() {\n    return this.getTypedRuleContext(AssemblyExpressionContext, 0);\n  }\n  assemblyBlock() {\n    return this.getTypedRuleContext(AssemblyBlockContext, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyIf;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyIf) {\n      listener.enterAssemblyIf(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyIf) {\n      listener.exitAssemblyIf(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyIf) {\n      return visitor.visitAssemblyIf(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyLiteralContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  stringLiteral() {\n    return this.getTypedRuleContext(StringLiteralContext, 0);\n  }\n  DecimalNumber() {\n    return this.getToken(SolidityParser.DecimalNumber, 0);\n  }\n  HexNumber() {\n    return this.getToken(SolidityParser.HexNumber, 0);\n  }\n  hexLiteral() {\n    return this.getTypedRuleContext(HexLiteralContext, 0);\n  }\n  BooleanLiteral() {\n    return this.getToken(SolidityParser.BooleanLiteral, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyLiteral) {\n      listener.enterAssemblyLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyLiteral) {\n      listener.exitAssemblyLiteral(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitAssemblyLiteral) {\n      return visitor.visitAssemblyLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TupleExpressionContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  expression_list() {\n    return this.getTypedRuleContexts(ExpressionContext);\n  }\n  expression(i2) {\n    return this.getTypedRuleContext(ExpressionContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_tupleExpression;\n  }\n  enterRule(listener) {\n    if (listener.enterTupleExpression) {\n      listener.enterTupleExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTupleExpression) {\n      listener.exitTupleExpression(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitTupleExpression) {\n      return visitor.visitTupleExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar NumberLiteralContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  DecimalNumber() {\n    return this.getToken(SolidityParser.DecimalNumber, 0);\n  }\n  HexNumber() {\n    return this.getToken(SolidityParser.HexNumber, 0);\n  }\n  NumberUnit() {\n    return this.getToken(SolidityParser.NumberUnit, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_numberLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterNumberLiteral) {\n      listener.enterNumberLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitNumberLiteral) {\n      listener.exitNumberLiteral(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitNumberLiteral) {\n      return visitor.visitNumberLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar IdentifierContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  ReceiveKeyword() {\n    return this.getToken(SolidityParser.ReceiveKeyword, 0);\n  }\n  GlobalKeyword() {\n    return this.getToken(SolidityParser.GlobalKeyword, 0);\n  }\n  ConstructorKeyword() {\n    return this.getToken(SolidityParser.ConstructorKeyword, 0);\n  }\n  PayableKeyword() {\n    return this.getToken(SolidityParser.PayableKeyword, 0);\n  }\n  LeaveKeyword() {\n    return this.getToken(SolidityParser.LeaveKeyword, 0);\n  }\n  Identifier() {\n    return this.getToken(SolidityParser.Identifier, 0);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_identifier;\n  }\n  enterRule(listener) {\n    if (listener.enterIdentifier) {\n      listener.enterIdentifier(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitIdentifier) {\n      listener.exitIdentifier(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitIdentifier) {\n      return visitor.visitIdentifier(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar HexLiteralContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  HexLiteralFragment_list() {\n    return this.getTokens(SolidityParser.HexLiteralFragment);\n  }\n  HexLiteralFragment(i2) {\n    return this.getToken(SolidityParser.HexLiteralFragment, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_hexLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterHexLiteral) {\n      listener.enterHexLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitHexLiteral) {\n      listener.exitHexLiteral(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitHexLiteral) {\n      return visitor.visitHexLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar OverrideSpecifierContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  userDefinedTypeName_list() {\n    return this.getTypedRuleContexts(UserDefinedTypeNameContext);\n  }\n  userDefinedTypeName(i2) {\n    return this.getTypedRuleContext(UserDefinedTypeNameContext, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_overrideSpecifier;\n  }\n  enterRule(listener) {\n    if (listener.enterOverrideSpecifier) {\n      listener.enterOverrideSpecifier(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitOverrideSpecifier) {\n      listener.exitOverrideSpecifier(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitOverrideSpecifier) {\n      return visitor.visitOverrideSpecifier(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StringLiteralContext = class extends An {\n  constructor(parser, parent, invokingState) {\n    super(parent, invokingState);\n    this.parser = parser;\n  }\n  StringLiteralFragment_list() {\n    return this.getTokens(SolidityParser.StringLiteralFragment);\n  }\n  StringLiteralFragment(i2) {\n    return this.getToken(SolidityParser.StringLiteralFragment, i2);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_stringLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterStringLiteral) {\n      listener.enterStringLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStringLiteral) {\n      listener.exitStringLiteral(this);\n    }\n  }\n  // @Override\n  accept(visitor) {\n    if (visitor.visitStringLiteral) {\n      return visitor.visitStringLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\n\n// src/ast-types.ts\nvar astNodeTypes = [\n  \"SourceUnit\",\n  \"PragmaDirective\",\n  \"ImportDirective\",\n  \"ContractDefinition\",\n  \"InheritanceSpecifier\",\n  \"StateVariableDeclaration\",\n  \"UsingForDeclaration\",\n  \"StructDefinition\",\n  \"ModifierDefinition\",\n  \"ModifierInvocation\",\n  \"FunctionDefinition\",\n  \"EventDefinition\",\n  \"CustomErrorDefinition\",\n  \"RevertStatement\",\n  \"EnumValue\",\n  \"EnumDefinition\",\n  \"VariableDeclaration\",\n  \"UserDefinedTypeName\",\n  \"Mapping\",\n  \"ArrayTypeName\",\n  \"FunctionTypeName\",\n  \"Block\",\n  \"ExpressionStatement\",\n  \"IfStatement\",\n  \"WhileStatement\",\n  \"ForStatement\",\n  \"InlineAssemblyStatement\",\n  \"DoWhileStatement\",\n  \"ContinueStatement\",\n  \"Break\",\n  \"Continue\",\n  \"BreakStatement\",\n  \"ReturnStatement\",\n  \"EmitStatement\",\n  \"ThrowStatement\",\n  \"VariableDeclarationStatement\",\n  \"ElementaryTypeName\",\n  \"FunctionCall\",\n  \"AssemblyBlock\",\n  \"AssemblyCall\",\n  \"AssemblyLocalDefinition\",\n  \"AssemblyAssignment\",\n  \"AssemblyStackAssignment\",\n  \"LabelDefinition\",\n  \"AssemblySwitch\",\n  \"AssemblyCase\",\n  \"AssemblyFunctionDefinition\",\n  \"AssemblyFor\",\n  \"AssemblyIf\",\n  \"TupleExpression\",\n  \"NameValueExpression\",\n  \"BooleanLiteral\",\n  \"NumberLiteral\",\n  \"Identifier\",\n  \"BinaryOperation\",\n  \"UnaryOperation\",\n  \"NewExpression\",\n  \"Conditional\",\n  \"StringLiteral\",\n  \"HexLiteral\",\n  \"HexNumber\",\n  \"DecimalNumber\",\n  \"MemberAccess\",\n  \"IndexAccess\",\n  \"IndexRangeAccess\",\n  \"NameValueList\",\n  \"UncheckedStatement\",\n  \"TryStatement\",\n  \"CatchClause\",\n  \"FileLevelConstant\",\n  \"AssemblyMemberAccess\",\n  \"TypeDefinition\"\n];\nvar binaryOpValues = [\n  \"+\",\n  \"-\",\n  \"*\",\n  \"/\",\n  \"**\",\n  \"%\",\n  \"<<\",\n  \">>\",\n  \"&&\",\n  \"||\",\n  \"&\",\n  \"^\",\n  \"<\",\n  \">\",\n  \"<=\",\n  \">=\",\n  \"==\",\n  \"!=\",\n  \"=\",\n  \"^=\",\n  \"&=\",\n  \"<<=\",\n  \">>=\",\n  \"+=\",\n  \"-=\",\n  \"*=\",\n  \"/=\",\n  \"%=\",\n  \"|\",\n  \"|=\"\n];\nvar unaryOpValues = [\n  \"-\",\n  \"+\",\n  \"++\",\n  \"--\",\n  \"~\",\n  \"after\",\n  \"delete\",\n  \"!\"\n];\n\n// src/ASTBuilder.ts\nvar ASTBuilder = class extends Sn {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.result = null;\n  }\n  defaultResult() {\n    throw new Error(\"Unknown node\");\n  }\n  aggregateResult() {\n    return { type: \"\" };\n  }\n  visitSourceUnit(ctx) {\n    const children = ctx.children ?? [];\n    const node = {\n      type: \"SourceUnit\",\n      children: children.slice(0, -1).map((child) => this.visit(child))\n    };\n    const result = this._addMeta(node, ctx);\n    this.result = result;\n    return result;\n  }\n  visitContractPart(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitContractDefinition(ctx) {\n    const name = this._toText(ctx.identifier());\n    const kind = this._toText(ctx.getChild(0));\n    this._currentContract = name;\n    const node = {\n      type: \"ContractDefinition\",\n      name,\n      baseContracts: ctx.inheritanceSpecifier_list().map((x2) => this.visitInheritanceSpecifier(x2)),\n      subNodes: ctx.contractPart_list().map((x2) => this.visit(x2)),\n      kind\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitStateVariableDeclaration(ctx) {\n    const type = this.visitTypeName(ctx.typeName());\n    const iden = ctx.identifier();\n    const name = this._toText(iden);\n    let expression = null;\n    const ctxExpression = ctx.expression();\n    if (ctxExpression) {\n      expression = this.visitExpression(ctxExpression);\n    }\n    let visibility = \"default\";\n    if (ctx.InternalKeyword_list().length > 0) {\n      visibility = \"internal\";\n    } else if (ctx.PublicKeyword_list().length > 0) {\n      visibility = \"public\";\n    } else if (ctx.PrivateKeyword_list().length > 0) {\n      visibility = \"private\";\n    }\n    let isDeclaredConst = false;\n    if (ctx.ConstantKeyword_list().length > 0) {\n      isDeclaredConst = true;\n    }\n    let override;\n    const overrideSpecifier = ctx.overrideSpecifier_list();\n    if (overrideSpecifier.length === 0) {\n      override = null;\n    } else {\n      override = overrideSpecifier[0].userDefinedTypeName_list().map((x2) => this.visitUserDefinedTypeName(x2));\n    }\n    let isImmutable = false;\n    if (ctx.ImmutableKeyword_list().length > 0) {\n      isImmutable = true;\n    }\n    let isTransient = false;\n    if (ctx.TransientKeyword_list().length > 0) {\n      isTransient = true;\n    }\n    const decl = {\n      type: \"VariableDeclaration\",\n      typeName: type,\n      name,\n      identifier: this.visitIdentifier(iden),\n      expression,\n      visibility,\n      isStateVar: true,\n      isDeclaredConst,\n      isIndexed: false,\n      isImmutable,\n      isTransient,\n      override,\n      storageLocation: null\n    };\n    const node = {\n      type: \"StateVariableDeclaration\",\n      variables: [this._addMeta(decl, ctx)],\n      initialValue: expression\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitVariableDeclaration(ctx) {\n    let storageLocation = null;\n    const ctxStorageLocation = ctx.storageLocation();\n    if (ctxStorageLocation) {\n      storageLocation = this._toText(ctxStorageLocation);\n    }\n    const identifierCtx = ctx.identifier();\n    const node = {\n      type: \"VariableDeclaration\",\n      typeName: this.visitTypeName(ctx.typeName()),\n      name: this._toText(identifierCtx),\n      identifier: this.visitIdentifier(identifierCtx),\n      storageLocation,\n      isStateVar: false,\n      isIndexed: false,\n      expression: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitVariableDeclarationStatement(ctx) {\n    let variables = [];\n    const ctxVariableDeclaration = ctx.variableDeclaration();\n    const ctxIdentifierList = ctx.identifierList();\n    const ctxVariableDeclarationList = ctx.variableDeclarationList();\n    if (ctxVariableDeclaration) {\n      variables = [this.visitVariableDeclaration(ctxVariableDeclaration)];\n    } else if (ctxIdentifierList) {\n      variables = this.buildIdentifierList(ctxIdentifierList);\n    } else if (ctxVariableDeclarationList) {\n      variables = this.buildVariableDeclarationList(ctxVariableDeclarationList);\n    }\n    let initialValue = null;\n    const ctxExpression = ctx.expression();\n    if (ctxExpression) {\n      initialValue = this.visitExpression(ctxExpression);\n    }\n    const node = {\n      type: \"VariableDeclarationStatement\",\n      variables,\n      initialValue\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitStatement(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitSimpleStatement(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitEventDefinition(ctx) {\n    const parameters = ctx.eventParameterList().eventParameter_list().map((paramCtx) => {\n      const type = this.visitTypeName(paramCtx.typeName());\n      let name = null;\n      const paramCtxIdentifier = paramCtx.identifier();\n      if (paramCtxIdentifier) {\n        name = this._toText(paramCtxIdentifier);\n      }\n      const node2 = {\n        type: \"VariableDeclaration\",\n        typeName: type,\n        name,\n        identifier: paramCtxIdentifier ? this.visitIdentifier(paramCtxIdentifier) : null,\n        isStateVar: false,\n        isIndexed: Boolean(paramCtx.IndexedKeyword()),\n        storageLocation: null,\n        expression: null\n      };\n      return this._addMeta(node2, paramCtx);\n    });\n    const node = {\n      type: \"EventDefinition\",\n      name: this._toText(ctx.identifier()),\n      parameters,\n      isAnonymous: Boolean(ctx.AnonymousKeyword())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitBlock(ctx) {\n    const node = {\n      type: \"Block\",\n      statements: ctx.statement_list().map((x2) => this.visitStatement(x2))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitParameter(ctx) {\n    let storageLocation = null;\n    const ctxStorageLocation = ctx.storageLocation();\n    if (ctxStorageLocation) {\n      storageLocation = this._toText(ctxStorageLocation);\n    }\n    let name = null;\n    const ctxIdentifier = ctx.identifier();\n    if (ctxIdentifier) {\n      name = this._toText(ctxIdentifier);\n    }\n    const node = {\n      type: \"VariableDeclaration\",\n      typeName: this.visitTypeName(ctx.typeName()),\n      name,\n      identifier: ctxIdentifier ? this.visitIdentifier(ctxIdentifier) : null,\n      storageLocation,\n      isStateVar: false,\n      isIndexed: false,\n      expression: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionDefinition(ctx) {\n    let isConstructor = false;\n    let isFallback = false;\n    let isReceiveEther = false;\n    let isVirtual = false;\n    let name = null;\n    let parameters = [];\n    let returnParameters = null;\n    let visibility = \"default\";\n    let block = null;\n    const ctxBlock = ctx.block();\n    if (ctxBlock) {\n      block = this.visitBlock(ctxBlock);\n    }\n    const modifiers = ctx.modifierList().modifierInvocation_list().map((mod) => this.visitModifierInvocation(mod));\n    let stateMutability = null;\n    if (ctx.modifierList().stateMutability_list().length > 0) {\n      stateMutability = this._stateMutabilityToText(\n        ctx.modifierList().stateMutability(0)\n      );\n    }\n    const ctxReturnParameters = ctx.returnParameters();\n    switch (this._toText(ctx.functionDescriptor().getChild(0))) {\n      case \"constructor\":\n        parameters = ctx.parameterList().parameter_list().map((x2) => this.visit(x2));\n        if (ctx.modifierList().InternalKeyword_list().length > 0) {\n          visibility = \"internal\";\n        } else if (ctx.modifierList().PublicKeyword_list().length > 0) {\n          visibility = \"public\";\n        } else {\n          visibility = \"default\";\n        }\n        isConstructor = true;\n        break;\n      case \"fallback\":\n        parameters = ctx.parameterList().parameter_list().map((x2) => this.visit(x2));\n        returnParameters = ctxReturnParameters ? this.visitReturnParameters(ctxReturnParameters) : null;\n        visibility = \"external\";\n        isFallback = true;\n        break;\n      case \"receive\":\n        visibility = \"external\";\n        isReceiveEther = true;\n        break;\n      case \"function\": {\n        const identifier = ctx.functionDescriptor().identifier();\n        name = identifier ? this._toText(identifier) : \"\";\n        parameters = ctx.parameterList().parameter_list().map((x2) => this.visit(x2));\n        returnParameters = ctxReturnParameters ? this.visitReturnParameters(ctxReturnParameters) : null;\n        if (ctx.modifierList().ExternalKeyword_list().length > 0) {\n          visibility = \"external\";\n        } else if (ctx.modifierList().InternalKeyword_list().length > 0) {\n          visibility = \"internal\";\n        } else if (ctx.modifierList().PublicKeyword_list().length > 0) {\n          visibility = \"public\";\n        } else if (ctx.modifierList().PrivateKeyword_list().length > 0) {\n          visibility = \"private\";\n        }\n        isConstructor = name === this._currentContract;\n        isFallback = name === \"\";\n        break;\n      }\n    }\n    if (ctx.modifierList().VirtualKeyword_list().length > 0) {\n      isVirtual = true;\n    }\n    let override;\n    const overrideSpecifier = ctx.modifierList().overrideSpecifier_list();\n    if (overrideSpecifier.length === 0) {\n      override = null;\n    } else {\n      override = overrideSpecifier[0].userDefinedTypeName_list().map((x2) => this.visitUserDefinedTypeName(x2));\n    }\n    const node = {\n      type: \"FunctionDefinition\",\n      name,\n      parameters,\n      returnParameters,\n      body: block,\n      visibility,\n      modifiers,\n      override,\n      isConstructor,\n      isReceiveEther,\n      isFallback,\n      isVirtual,\n      stateMutability\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitEnumDefinition(ctx) {\n    const node = {\n      type: \"EnumDefinition\",\n      name: this._toText(ctx.identifier()),\n      members: ctx.enumValue_list().map((x2) => this.visitEnumValue(x2))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitEnumValue(ctx) {\n    const node = {\n      type: \"EnumValue\",\n      name: this._toText(ctx.identifier())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitElementaryTypeName(ctx) {\n    const node = {\n      type: \"ElementaryTypeName\",\n      name: this._toText(ctx),\n      stateMutability: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitIdentifier(ctx) {\n    const node = {\n      type: \"Identifier\",\n      name: this._toText(ctx)\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitTypeName(ctx) {\n    var _a;\n    if (ctx.children && ctx.children.length > 2) {\n      let length = null;\n      if (ctx.children.length === 4) {\n        const expression = ctx.expression();\n        if (expression === void 0 || expression === null) {\n          throw new Error(\n            \"Assertion error: a typeName with 4 children should have an expression\"\n          );\n        }\n        length = this.visitExpression(expression);\n      }\n      const node = {\n        type: \"ArrayTypeName\",\n        baseTypeName: this.visitTypeName(ctx.typeName()),\n        length\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (((_a = ctx.children) == null ? void 0 : _a.length) === 2) {\n      const node = {\n        type: \"ElementaryTypeName\",\n        name: this._toText(ctx.getChild(0)),\n        stateMutability: this._toText(ctx.getChild(1))\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.elementaryTypeName()) {\n      return this.visitElementaryTypeName(ctx.elementaryTypeName());\n    }\n    if (ctx.userDefinedTypeName()) {\n      return this.visitUserDefinedTypeName(ctx.userDefinedTypeName());\n    }\n    if (ctx.mapping()) {\n      return this.visitMapping(ctx.mapping());\n    }\n    if (ctx.functionTypeName()) {\n      return this.visitFunctionTypeName(ctx.functionTypeName());\n    }\n    throw new Error(\"Assertion error: unhandled type name case\");\n  }\n  visitUserDefinedTypeName(ctx) {\n    const node = {\n      type: \"UserDefinedTypeName\",\n      namePath: this._toText(ctx)\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitUsingForDeclaration(ctx) {\n    let typeName = null;\n    const ctxTypeName = ctx.typeName();\n    if (ctxTypeName) {\n      typeName = this.visitTypeName(ctxTypeName);\n    }\n    const isGlobal = Boolean(ctx.GlobalKeyword());\n    const usingForObjectCtx = ctx.usingForObject();\n    const userDefinedTypeNameCtx = usingForObjectCtx.userDefinedTypeName();\n    let node;\n    if (userDefinedTypeNameCtx) {\n      node = {\n        type: \"UsingForDeclaration\",\n        isGlobal,\n        typeName,\n        libraryName: this._toText(userDefinedTypeNameCtx),\n        functions: [],\n        operators: []\n      };\n    } else {\n      const usingForObjectDirectives = usingForObjectCtx.usingForObjectDirective_list();\n      const functions = [];\n      const operators = [];\n      for (const usingForObjectDirective of usingForObjectDirectives) {\n        functions.push(\n          this._toText(usingForObjectDirective.userDefinedTypeName())\n        );\n        const operator = usingForObjectDirective.userDefinableOperators();\n        if (operator) {\n          operators.push(this._toText(operator));\n        } else {\n          operators.push(null);\n        }\n      }\n      node = {\n        type: \"UsingForDeclaration\",\n        isGlobal,\n        typeName,\n        libraryName: null,\n        functions,\n        operators\n      };\n    }\n    return this._addMeta(node, ctx);\n  }\n  visitPragmaDirective(ctx) {\n    const versionContext = ctx.pragmaValue().version();\n    let value = this._toText(ctx.pragmaValue());\n    if (versionContext == null ? void 0 : versionContext.children) {\n      value = versionContext.children.map((x2) => this._toText(x2)).join(\" \");\n    }\n    const node = {\n      type: \"PragmaDirective\",\n      name: this._toText(ctx.pragmaName()),\n      value\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitInheritanceSpecifier(ctx) {\n    const exprList = ctx.expressionList();\n    const args = exprList ? exprList.expression_list().map((x2) => this.visitExpression(x2)) : [];\n    const node = {\n      type: \"InheritanceSpecifier\",\n      baseName: this.visitUserDefinedTypeName(ctx.userDefinedTypeName()),\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitModifierInvocation(ctx) {\n    const exprList = ctx.expressionList();\n    let args;\n    if (exprList != null) {\n      args = exprList.expression_list().map((x2) => this.visit(x2));\n    } else if (ctx.children && ctx.children.length > 1) {\n      args = [];\n    } else {\n      args = null;\n    }\n    const node = {\n      type: \"ModifierInvocation\",\n      name: this._toText(ctx.identifier()),\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionTypeName(ctx) {\n    const parameterTypes = ctx.functionTypeParameterList(0).functionTypeParameter_list().map((typeCtx) => this.visitFunctionTypeParameter(typeCtx));\n    let returnTypes = [];\n    if (ctx.functionTypeParameterList_list().length > 1) {\n      returnTypes = ctx.functionTypeParameterList(1).functionTypeParameter_list().map((typeCtx) => this.visitFunctionTypeParameter(typeCtx));\n    }\n    let visibility = \"default\";\n    if (ctx.InternalKeyword_list().length > 0) {\n      visibility = \"internal\";\n    } else if (ctx.ExternalKeyword_list().length > 0) {\n      visibility = \"external\";\n    }\n    let stateMutability = null;\n    if (ctx.stateMutability_list().length > 0) {\n      stateMutability = this._toText(ctx.stateMutability(0));\n    }\n    const node = {\n      type: \"FunctionTypeName\",\n      parameterTypes,\n      returnTypes,\n      visibility,\n      stateMutability\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionTypeParameter(ctx) {\n    let storageLocation = null;\n    if (ctx.storageLocation()) {\n      storageLocation = this._toText(ctx.storageLocation());\n    }\n    const node = {\n      type: \"VariableDeclaration\",\n      typeName: this.visitTypeName(ctx.typeName()),\n      name: null,\n      identifier: null,\n      storageLocation,\n      isStateVar: false,\n      isIndexed: false,\n      expression: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitThrowStatement(ctx) {\n    const node = {\n      type: \"ThrowStatement\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitReturnStatement(ctx) {\n    let expression = null;\n    const ctxExpression = ctx.expression();\n    if (ctxExpression) {\n      expression = this.visitExpression(ctxExpression);\n    }\n    const node = {\n      type: \"ReturnStatement\",\n      expression\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitEmitStatement(ctx) {\n    const node = {\n      type: \"EmitStatement\",\n      eventCall: this.visitFunctionCall(ctx.functionCall())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitCustomErrorDefinition(ctx) {\n    const node = {\n      type: \"CustomErrorDefinition\",\n      name: this._toText(ctx.identifier()),\n      parameters: this.visitParameterList(ctx.parameterList())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitTypeDefinition(ctx) {\n    const node = {\n      type: \"TypeDefinition\",\n      name: this._toText(ctx.identifier()),\n      definition: this.visitElementaryTypeName(ctx.elementaryTypeName())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitRevertStatement(ctx) {\n    const node = {\n      type: \"RevertStatement\",\n      revertCall: this.visitFunctionCall(ctx.functionCall())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionCall(ctx) {\n    let args = [];\n    const names = [];\n    const identifiers = [];\n    const ctxArgs = ctx.functionCallArguments();\n    const ctxArgsExpressionList = ctxArgs.expressionList();\n    const ctxArgsNameValueList = ctxArgs.nameValueList();\n    if (ctxArgsExpressionList) {\n      args = ctxArgsExpressionList.expression_list().map((exprCtx) => this.visitExpression(exprCtx));\n    } else if (ctxArgsNameValueList) {\n      for (const nameValue of ctxArgsNameValueList.nameValue_list()) {\n        args.push(this.visitExpression(nameValue.expression()));\n        names.push(this._toText(nameValue.identifier()));\n        identifiers.push(this.visitIdentifier(nameValue.identifier()));\n      }\n    }\n    const node = {\n      type: \"FunctionCall\",\n      expression: this.visitExpression(ctx.expression()),\n      arguments: args,\n      names,\n      identifiers\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitStructDefinition(ctx) {\n    const node = {\n      type: \"StructDefinition\",\n      name: this._toText(ctx.identifier()),\n      members: ctx.variableDeclaration_list().map((x2) => this.visitVariableDeclaration(x2))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitWhileStatement(ctx) {\n    const node = {\n      type: \"WhileStatement\",\n      condition: this.visitExpression(ctx.expression()),\n      body: this.visitStatement(ctx.statement())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitDoWhileStatement(ctx) {\n    const node = {\n      type: \"DoWhileStatement\",\n      condition: this.visitExpression(ctx.expression()),\n      body: this.visitStatement(ctx.statement())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitIfStatement(ctx) {\n    const trueBody = this.visitStatement(ctx.statement(0));\n    let falseBody = null;\n    if (ctx.statement_list().length > 1) {\n      falseBody = this.visitStatement(ctx.statement(1));\n    }\n    const node = {\n      type: \"IfStatement\",\n      condition: this.visitExpression(ctx.expression()),\n      trueBody,\n      falseBody\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitTryStatement(ctx) {\n    let returnParameters = null;\n    const ctxReturnParameters = ctx.returnParameters();\n    if (ctxReturnParameters) {\n      returnParameters = this.visitReturnParameters(ctxReturnParameters);\n    }\n    const catchClauses = ctx.catchClause_list().map((exprCtx) => this.visitCatchClause(exprCtx));\n    const node = {\n      type: \"TryStatement\",\n      expression: this.visitExpression(ctx.expression()),\n      returnParameters,\n      body: this.visitBlock(ctx.block()),\n      catchClauses\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitCatchClause(ctx) {\n    let parameters = null;\n    if (ctx.parameterList()) {\n      parameters = this.visitParameterList(ctx.parameterList());\n    }\n    if (ctx.identifier() && this._toText(ctx.identifier()) !== \"Error\" && this._toText(ctx.identifier()) !== \"Panic\") {\n      throw new Error('Expected \"Error\" or \"Panic\" identifier in catch clause');\n    }\n    let kind = null;\n    const ctxIdentifier = ctx.identifier();\n    if (ctxIdentifier) {\n      kind = this._toText(ctxIdentifier);\n    }\n    const node = {\n      type: \"CatchClause\",\n      // deprecated, use the `kind` property instead,\n      isReasonStringType: kind === \"Error\",\n      kind,\n      parameters,\n      body: this.visitBlock(ctx.block())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitExpressionStatement(ctx) {\n    if (!ctx) {\n      return null;\n    }\n    const node = {\n      type: \"ExpressionStatement\",\n      expression: this.visitExpression(ctx.expression())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitNumberLiteral(ctx) {\n    var _a;\n    const number = this._toText(ctx.getChild(0));\n    let subdenomination = null;\n    if (((_a = ctx.children) == null ? void 0 : _a.length) === 2) {\n      subdenomination = this._toText(ctx.getChild(1));\n    }\n    const node = {\n      type: \"NumberLiteral\",\n      number,\n      subdenomination\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitMappingKey(ctx) {\n    if (ctx.elementaryTypeName()) {\n      return this.visitElementaryTypeName(ctx.elementaryTypeName());\n    } else if (ctx.userDefinedTypeName()) {\n      return this.visitUserDefinedTypeName(ctx.userDefinedTypeName());\n    } else {\n      throw new Error(\n        \"Expected MappingKey to have either elementaryTypeName or userDefinedTypeName\"\n      );\n    }\n  }\n  visitMapping(ctx) {\n    const mappingKeyNameCtx = ctx.mappingKeyName();\n    const mappingValueNameCtx = ctx.mappingValueName();\n    const node = {\n      type: \"Mapping\",\n      keyType: this.visitMappingKey(ctx.mappingKey()),\n      keyName: mappingKeyNameCtx ? this.visitIdentifier(mappingKeyNameCtx.identifier()) : null,\n      valueType: this.visitTypeName(ctx.typeName()),\n      valueName: mappingValueNameCtx ? this.visitIdentifier(mappingValueNameCtx.identifier()) : null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitModifierDefinition(ctx) {\n    let parameters = null;\n    if (ctx.parameterList()) {\n      parameters = this.visitParameterList(ctx.parameterList());\n    }\n    let isVirtual = false;\n    if (ctx.VirtualKeyword_list().length > 0) {\n      isVirtual = true;\n    }\n    let override;\n    const overrideSpecifier = ctx.overrideSpecifier_list();\n    if (overrideSpecifier.length === 0) {\n      override = null;\n    } else {\n      override = overrideSpecifier[0].userDefinedTypeName_list().map((x2) => this.visitUserDefinedTypeName(x2));\n    }\n    let body = null;\n    const blockCtx = ctx.block();\n    if (blockCtx) {\n      body = this.visitBlock(blockCtx);\n    }\n    const node = {\n      type: \"ModifierDefinition\",\n      name: this._toText(ctx.identifier()),\n      parameters,\n      body,\n      isVirtual,\n      override\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitUncheckedStatement(ctx) {\n    const node = {\n      type: \"UncheckedStatement\",\n      block: this.visitBlock(ctx.block())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitExpression(ctx) {\n    let op;\n    switch (ctx.children.length) {\n      case 1: {\n        const primaryExpressionCtx = ctx.primaryExpression();\n        if (primaryExpressionCtx === void 0 || primaryExpressionCtx === null) {\n          throw new Error(\n            \"Assertion error: primary expression should exist when children length is 1\"\n          );\n        }\n        return this.visitPrimaryExpression(primaryExpressionCtx);\n      }\n      case 2:\n        op = this._toText(ctx.getChild(0));\n        if (op === \"new\") {\n          const node = {\n            type: \"NewExpression\",\n            typeName: this.visitTypeName(ctx.typeName())\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (unaryOpValues.includes(op)) {\n          const node = {\n            type: \"UnaryOperation\",\n            operator: op,\n            subExpression: this.visitExpression(ctx.expression(0)),\n            isPrefix: true\n          };\n          return this._addMeta(node, ctx);\n        }\n        op = this._toText(ctx.getChild(1));\n        if ([\"++\", \"--\"].includes(op)) {\n          const node = {\n            type: \"UnaryOperation\",\n            operator: op,\n            subExpression: this.visitExpression(ctx.expression(0)),\n            isPrefix: false\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 3:\n        if (this._toText(ctx.getChild(0)) === \"(\" && this._toText(ctx.getChild(2)) === \")\") {\n          const node = {\n            type: \"TupleExpression\",\n            components: [this.visitExpression(ctx.expression(0))],\n            isArray: false\n          };\n          return this._addMeta(node, ctx);\n        }\n        op = this._toText(ctx.getChild(1));\n        if (op === \".\") {\n          const node = {\n            type: \"MemberAccess\",\n            expression: this.visitExpression(ctx.expression(0)),\n            memberName: this._toText(ctx.identifier())\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (isBinOp(op)) {\n          const node = {\n            type: \"BinaryOperation\",\n            operator: op,\n            left: this.visitExpression(ctx.expression(0)),\n            right: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 4:\n        if (this._toText(ctx.getChild(1)) === \"(\" && this._toText(ctx.getChild(3)) === \")\") {\n          let args = [];\n          const names = [];\n          const identifiers = [];\n          const ctxArgs = ctx.functionCallArguments();\n          if (ctxArgs.expressionList()) {\n            args = ctxArgs.expressionList().expression_list().map((exprCtx) => this.visitExpression(exprCtx));\n          } else if (ctxArgs.nameValueList()) {\n            for (const nameValue of ctxArgs.nameValueList().nameValue_list()) {\n              args.push(this.visitExpression(nameValue.expression()));\n              names.push(this._toText(nameValue.identifier()));\n              identifiers.push(this.visitIdentifier(nameValue.identifier()));\n            }\n          }\n          const node = {\n            type: \"FunctionCall\",\n            expression: this.visitExpression(ctx.expression(0)),\n            arguments: args,\n            names,\n            identifiers\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(3)) === \"]\") {\n          if (ctx.getChild(2).getText() === \":\") {\n            const node2 = {\n              type: \"IndexRangeAccess\",\n              base: this.visitExpression(ctx.expression(0))\n            };\n            return this._addMeta(node2, ctx);\n          }\n          const node = {\n            type: \"IndexAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            index: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (this._toText(ctx.getChild(1)) === \"{\" && this._toText(ctx.getChild(3)) === \"}\") {\n          const node = {\n            type: \"NameValueExpression\",\n            expression: this.visitExpression(ctx.expression(0)),\n            arguments: this.visitNameValueList(ctx.nameValueList())\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 5:\n        if (this._toText(ctx.getChild(1)) === \"?\" && this._toText(ctx.getChild(3)) === \":\") {\n          const node = {\n            type: \"Conditional\",\n            condition: this.visitExpression(ctx.expression(0)),\n            trueExpression: this.visitExpression(ctx.expression(1)),\n            falseExpression: this.visitExpression(ctx.expression(2))\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(2)) === \":\" && this._toText(ctx.getChild(4)) === \"]\") {\n          const node = {\n            type: \"IndexRangeAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            indexEnd: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        } else if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(3)) === \":\" && this._toText(ctx.getChild(4)) === \"]\") {\n          const node = {\n            type: \"IndexRangeAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            indexStart: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 6:\n        if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(3)) === \":\" && this._toText(ctx.getChild(5)) === \"]\") {\n          const node = {\n            type: \"IndexRangeAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            indexStart: this.visitExpression(ctx.expression(1)),\n            indexEnd: this.visitExpression(ctx.expression(2))\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n    }\n    throw new Error(\"Unrecognized expression\");\n  }\n  visitNameValueList(ctx) {\n    const names = [];\n    const identifiers = [];\n    const args = [];\n    for (const nameValue of ctx.nameValue_list()) {\n      names.push(this._toText(nameValue.identifier()));\n      identifiers.push(this.visitIdentifier(nameValue.identifier()));\n      args.push(this.visitExpression(nameValue.expression()));\n    }\n    const node = {\n      type: \"NameValueList\",\n      names,\n      identifiers,\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFileLevelConstant(ctx) {\n    const type = this.visitTypeName(ctx.typeName());\n    const name = this._toText(ctx.identifier());\n    const expression = this.visitExpression(ctx.expression());\n    const node = {\n      type: \"FileLevelConstant\",\n      typeName: type,\n      name,\n      initialValue: expression,\n      isDeclaredConst: true,\n      isImmutable: false\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitForStatement(ctx) {\n    let conditionExpression = this.visitExpressionStatement(\n      ctx.expressionStatement()\n    );\n    if (conditionExpression) {\n      conditionExpression = conditionExpression.expression;\n    }\n    const node = {\n      type: \"ForStatement\",\n      initExpression: ctx.simpleStatement() ? this.visitSimpleStatement(ctx.simpleStatement()) : null,\n      conditionExpression,\n      loopExpression: {\n        type: \"ExpressionStatement\",\n        expression: ctx.expression() ? this.visitExpression(ctx.expression()) : null\n      },\n      body: this.visitStatement(ctx.statement())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitHexLiteral(ctx) {\n    const parts = ctx.HexLiteralFragment_list().map((x2) => this._toText(x2)).map((x2) => x2.substring(4, x2.length - 1));\n    const node = {\n      type: \"HexLiteral\",\n      value: parts.join(\"\"),\n      parts\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitPrimaryExpression(ctx) {\n    if (ctx.BooleanLiteral()) {\n      const node = {\n        type: \"BooleanLiteral\",\n        value: this._toText(ctx.BooleanLiteral()) === \"true\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.hexLiteral()) {\n      return this.visitHexLiteral(ctx.hexLiteral());\n    }\n    if (ctx.stringLiteral()) {\n      const fragments = ctx.stringLiteral().StringLiteralFragment_list().map((stringLiteralFragmentCtx) => {\n        let text = this._toText(stringLiteralFragmentCtx);\n        const isUnicode = text.slice(0, 7) === \"unicode\";\n        if (isUnicode) {\n          text = text.slice(7);\n        }\n        const singleQuotes = text[0] === \"'\";\n        const textWithoutQuotes = text.substring(1, text.length - 1);\n        const value = singleQuotes ? textWithoutQuotes.replace(new RegExp(\"\\\\\\\\'\", \"g\"), \"'\") : textWithoutQuotes.replace(new RegExp('\\\\\\\\\"', \"g\"), '\"');\n        return { value, isUnicode };\n      });\n      const parts = fragments.map((x2) => x2.value);\n      const node = {\n        type: \"StringLiteral\",\n        value: parts.join(\"\"),\n        parts,\n        isUnicode: fragments.map((x2) => x2.isUnicode)\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.numberLiteral()) {\n      return this.visitNumberLiteral(ctx.numberLiteral());\n    }\n    if (ctx.TypeKeyword()) {\n      const node = {\n        type: \"Identifier\",\n        name: \"type\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.typeName()) {\n      return this.visitTypeName(ctx.typeName());\n    }\n    return this.visit(ctx.getChild(0));\n  }\n  visitTupleExpression(ctx) {\n    const children = ctx.children.slice(1, -1);\n    const components = this._mapCommasToNulls(children).map((expr) => {\n      if (expr === null) {\n        return null;\n      }\n      return this.visit(expr);\n    });\n    const node = {\n      type: \"TupleExpression\",\n      components,\n      isArray: this._toText(ctx.getChild(0)) === \"[\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  buildIdentifierList(ctx) {\n    const children = ctx.children.slice(1, -1);\n    const identifiers = ctx.identifier_list();\n    let i2 = 0;\n    return this._mapCommasToNulls(children).map((identifierOrNull) => {\n      if (identifierOrNull === null) {\n        return null;\n      }\n      const iden = identifiers[i2];\n      i2++;\n      const node = {\n        type: \"VariableDeclaration\",\n        name: this._toText(iden),\n        identifier: this.visitIdentifier(iden),\n        isStateVar: false,\n        isIndexed: false,\n        typeName: null,\n        storageLocation: null,\n        expression: null\n      };\n      return this._addMeta(node, iden);\n    });\n  }\n  buildVariableDeclarationList(ctx) {\n    const variableDeclarations = ctx.variableDeclaration_list();\n    let i2 = 0;\n    return this._mapCommasToNulls(ctx.children ?? []).map((declOrNull) => {\n      if (!declOrNull) {\n        return null;\n      }\n      const decl = variableDeclarations[i2];\n      i2++;\n      let storageLocation = null;\n      if (decl.storageLocation()) {\n        storageLocation = this._toText(decl.storageLocation());\n      }\n      const identifierCtx = decl.identifier();\n      const result = {\n        type: \"VariableDeclaration\",\n        name: this._toText(identifierCtx),\n        identifier: this.visitIdentifier(identifierCtx),\n        typeName: this.visitTypeName(decl.typeName()),\n        storageLocation,\n        isStateVar: false,\n        isIndexed: false,\n        expression: null\n      };\n      return this._addMeta(result, decl);\n    });\n  }\n  visitImportDirective(ctx) {\n    const pathString = this._toText(ctx.importPath());\n    let unitAlias = null;\n    let unitAliasIdentifier = null;\n    let symbolAliases = null;\n    let symbolAliasesIdentifiers = null;\n    if (ctx.importDeclaration_list().length > 0) {\n      symbolAliases = ctx.importDeclaration_list().map((decl) => {\n        const symbol = this._toText(decl.identifier(0));\n        let alias = null;\n        if (decl.identifier_list().length > 1) {\n          alias = this._toText(decl.identifier(1));\n        }\n        return [symbol, alias];\n      });\n      symbolAliasesIdentifiers = ctx.importDeclaration_list().map((decl) => {\n        const symbolIdentifier = this.visitIdentifier(decl.identifier(0));\n        let aliasIdentifier = null;\n        if (decl.identifier_list().length > 1) {\n          aliasIdentifier = this.visitIdentifier(decl.identifier(1));\n        }\n        return [symbolIdentifier, aliasIdentifier];\n      });\n    } else {\n      const identifierCtxList = ctx.identifier_list();\n      if (identifierCtxList.length === 0) {\n      } else if (identifierCtxList.length === 1) {\n        const aliasIdentifierCtx = ctx.identifier(0);\n        unitAlias = this._toText(aliasIdentifierCtx);\n        unitAliasIdentifier = this.visitIdentifier(aliasIdentifierCtx);\n      } else if (identifierCtxList.length === 2) {\n        const aliasIdentifierCtx = ctx.identifier(1);\n        unitAlias = this._toText(aliasIdentifierCtx);\n        unitAliasIdentifier = this.visitIdentifier(aliasIdentifierCtx);\n      } else {\n        throw new Error(\n          \"Assertion error: an import should have one or two identifiers\"\n        );\n      }\n    }\n    const path = pathString.substring(1, pathString.length - 1);\n    const pathLiteral = {\n      type: \"StringLiteral\",\n      value: path,\n      parts: [path],\n      isUnicode: [false]\n      // paths in imports don't seem to support unicode literals\n    };\n    const node = {\n      type: \"ImportDirective\",\n      path,\n      pathLiteral: this._addMeta(pathLiteral, ctx.importPath()),\n      unitAlias,\n      unitAliasIdentifier,\n      symbolAliases,\n      symbolAliasesIdentifiers\n    };\n    return this._addMeta(node, ctx);\n  }\n  buildEventParameterList(ctx) {\n    return ctx.eventParameter_list().map((paramCtx) => {\n      const type = this.visit(paramCtx.typeName());\n      const identifier = paramCtx.identifier();\n      const name = identifier ? this._toText(identifier) : null;\n      return {\n        type: \"VariableDeclaration\",\n        typeName: type,\n        name,\n        isStateVar: false,\n        isIndexed: !!paramCtx.IndexedKeyword()\n      };\n    });\n  }\n  visitReturnParameters(ctx) {\n    return this.visitParameterList(ctx.parameterList());\n  }\n  visitParameterList(ctx) {\n    return ctx.parameter_list().map((paramCtx) => this.visitParameter(paramCtx));\n  }\n  visitInlineAssemblyStatement(ctx) {\n    let language = null;\n    if (ctx.StringLiteralFragment()) {\n      language = this._toText(ctx.StringLiteralFragment());\n      language = language.substring(1, language.length - 1);\n    }\n    const flags = [];\n    const flag = ctx.inlineAssemblyStatementFlag();\n    if (flag) {\n      const flagString = this._toText(flag.stringLiteral());\n      flags.push(flagString.slice(1, flagString.length - 1));\n    }\n    const node = {\n      type: \"InlineAssemblyStatement\",\n      language,\n      flags,\n      body: this.visitAssemblyBlock(ctx.assemblyBlock())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyBlock(ctx) {\n    const operations = ctx.assemblyItem_list().map((item) => this.visitAssemblyItem(item));\n    const node = {\n      type: \"AssemblyBlock\",\n      operations\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyItem(ctx) {\n    let text;\n    if (ctx.hexLiteral()) {\n      return this.visitHexLiteral(ctx.hexLiteral());\n    }\n    if (ctx.stringLiteral()) {\n      text = this._toText(ctx.stringLiteral());\n      const value = text.substring(1, text.length - 1);\n      const node = {\n        type: \"StringLiteral\",\n        value,\n        parts: [value],\n        isUnicode: [false]\n        // assembly doesn't seem to support unicode literals right now\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.BreakKeyword()) {\n      const node = {\n        type: \"Break\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.ContinueKeyword()) {\n      const node = {\n        type: \"Continue\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    return this.visit(ctx.getChild(0));\n  }\n  visitAssemblyExpression(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitAssemblyCall(ctx) {\n    const functionName = this._toText(ctx.getChild(0));\n    const args = ctx.assemblyExpression_list().map((assemblyExpr) => this.visitAssemblyExpression(assemblyExpr));\n    const node = {\n      type: \"AssemblyCall\",\n      functionName,\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyLiteral(ctx) {\n    let text;\n    if (ctx.stringLiteral()) {\n      text = this._toText(ctx);\n      const value = text.substring(1, text.length - 1);\n      const node = {\n        type: \"StringLiteral\",\n        value,\n        parts: [value],\n        isUnicode: [false]\n        // assembly doesn't seem to support unicode literals right now\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.BooleanLiteral()) {\n      const node = {\n        type: \"BooleanLiteral\",\n        value: this._toText(ctx.BooleanLiteral()) === \"true\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.DecimalNumber()) {\n      const node = {\n        type: \"DecimalNumber\",\n        value: this._toText(ctx)\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.HexNumber()) {\n      const node = {\n        type: \"HexNumber\",\n        value: this._toText(ctx)\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.hexLiteral()) {\n      return this.visitHexLiteral(ctx.hexLiteral());\n    }\n    throw new Error(\"Should never reach here\");\n  }\n  visitAssemblySwitch(ctx) {\n    const node = {\n      type: \"AssemblySwitch\",\n      expression: this.visitAssemblyExpression(ctx.assemblyExpression()),\n      cases: ctx.assemblyCase_list().map((c2) => this.visitAssemblyCase(c2))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyCase(ctx) {\n    let value = null;\n    if (this._toText(ctx.getChild(0)) === \"case\") {\n      value = this.visitAssemblyLiteral(ctx.assemblyLiteral());\n    }\n    const node = {\n      type: \"AssemblyCase\",\n      block: this.visitAssemblyBlock(ctx.assemblyBlock()),\n      value,\n      default: value === null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyLocalDefinition(ctx) {\n    const ctxAssemblyIdentifierOrList = ctx.assemblyIdentifierOrList();\n    let names;\n    if (ctxAssemblyIdentifierOrList.identifier()) {\n      names = [this.visitIdentifier(ctxAssemblyIdentifierOrList.identifier())];\n    } else if (ctxAssemblyIdentifierOrList.assemblyMember()) {\n      names = [\n        this.visitAssemblyMember(ctxAssemblyIdentifierOrList.assemblyMember())\n      ];\n    } else {\n      names = ctxAssemblyIdentifierOrList.assemblyIdentifierList().identifier_list().map((x2) => this.visitIdentifier(x2));\n    }\n    let expression = null;\n    if (ctx.assemblyExpression()) {\n      expression = this.visitAssemblyExpression(ctx.assemblyExpression());\n    }\n    const node = {\n      type: \"AssemblyLocalDefinition\",\n      names,\n      expression\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyFunctionDefinition(ctx) {\n    const ctxAssemblyIdentifierList = ctx.assemblyIdentifierList();\n    const args = ctxAssemblyIdentifierList ? ctxAssemblyIdentifierList.identifier_list().map((x2) => this.visitIdentifier(x2)) : [];\n    const ctxAssemblyFunctionReturns = ctx.assemblyFunctionReturns();\n    const returnArgs = ctxAssemblyFunctionReturns ? ctxAssemblyFunctionReturns.assemblyIdentifierList().identifier_list().map((x2) => this.visitIdentifier(x2)) : [];\n    const node = {\n      type: \"AssemblyFunctionDefinition\",\n      name: this._toText(ctx.identifier()),\n      arguments: args,\n      returnArguments: returnArgs,\n      body: this.visitAssemblyBlock(ctx.assemblyBlock())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyAssignment(ctx) {\n    const ctxAssemblyIdentifierOrList = ctx.assemblyIdentifierOrList();\n    let names;\n    if (ctxAssemblyIdentifierOrList.identifier()) {\n      names = [this.visitIdentifier(ctxAssemblyIdentifierOrList.identifier())];\n    } else if (ctxAssemblyIdentifierOrList.assemblyMember()) {\n      names = [\n        this.visitAssemblyMember(ctxAssemblyIdentifierOrList.assemblyMember())\n      ];\n    } else {\n      names = ctxAssemblyIdentifierOrList.assemblyIdentifierList().identifier_list().map((x2) => this.visitIdentifier(x2));\n    }\n    const node = {\n      type: \"AssemblyAssignment\",\n      names,\n      expression: this.visitAssemblyExpression(ctx.assemblyExpression())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyMember(ctx) {\n    const [accessed, member] = ctx.identifier_list();\n    const node = {\n      type: \"AssemblyMemberAccess\",\n      expression: this.visitIdentifier(accessed),\n      memberName: this.visitIdentifier(member)\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitLabelDefinition(ctx) {\n    const node = {\n      type: \"LabelDefinition\",\n      name: this._toText(ctx.identifier())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyStackAssignment(ctx) {\n    const node = {\n      type: \"AssemblyStackAssignment\",\n      name: this._toText(ctx.identifier()),\n      expression: this.visitAssemblyExpression(ctx.assemblyExpression())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyFor(ctx) {\n    const node = {\n      type: \"AssemblyFor\",\n      pre: this.visit(ctx.getChild(1)),\n      condition: this.visit(ctx.getChild(2)),\n      post: this.visit(ctx.getChild(3)),\n      body: this.visit(ctx.getChild(4))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyIf(ctx) {\n    const node = {\n      type: \"AssemblyIf\",\n      condition: this.visitAssemblyExpression(ctx.assemblyExpression()),\n      body: this.visitAssemblyBlock(ctx.assemblyBlock())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitContinueStatement(ctx) {\n    const node = {\n      type: \"ContinueStatement\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitBreakStatement(ctx) {\n    const node = {\n      type: \"BreakStatement\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  _toText(ctx) {\n    const text = ctx.getText();\n    if (text === void 0 || text === null) {\n      throw new Error(\"Assertion error: text should never be undefined\");\n    }\n    return text;\n  }\n  _stateMutabilityToText(ctx) {\n    if (ctx.PureKeyword()) {\n      return \"pure\";\n    }\n    if (ctx.ConstantKeyword()) {\n      return \"constant\";\n    }\n    if (ctx.PayableKeyword()) {\n      return \"payable\";\n    }\n    if (ctx.ViewKeyword()) {\n      return \"view\";\n    }\n    throw new Error(\"Assertion error: non-exhaustive stateMutability check\");\n  }\n  _loc(ctx) {\n    const sourceLocation = {\n      start: {\n        line: ctx.start.line,\n        column: ctx.start.column\n      },\n      end: {\n        line: ctx.stop ? ctx.stop.line : ctx.start.line,\n        column: ctx.stop ? ctx.stop.column : ctx.start.column\n      }\n    };\n    return sourceLocation;\n  }\n  _range(ctx) {\n    var _a;\n    return [ctx.start.start, ((_a = ctx.stop) == null ? void 0 : _a.stop) ?? ctx.start.start];\n  }\n  _addMeta(node, ctx) {\n    const nodeWithMeta = {\n      type: node.type\n    };\n    if (this.options.loc === true) {\n      node.loc = this._loc(ctx);\n    }\n    if (this.options.range === true) {\n      node.range = this._range(ctx);\n    }\n    return {\n      ...nodeWithMeta,\n      ...node\n    };\n  }\n  _mapCommasToNulls(children) {\n    if (children.length === 0) {\n      return [];\n    }\n    const values = [];\n    let comma = true;\n    for (const el of children) {\n      if (comma) {\n        if (this._toText(el) === \",\") {\n          values.push(null);\n        } else {\n          values.push(el);\n          comma = false;\n        }\n      } else {\n        if (this._toText(el) !== \",\") {\n          throw new Error(\"expected comma\");\n        }\n        comma = true;\n      }\n    }\n    if (comma) {\n      values.push(null);\n    }\n    return values;\n  }\n};\nfunction isBinOp(op) {\n  return binaryOpValues.includes(op);\n}\n\n// src/ErrorListener.ts\nvar ErrorListener = class extends an {\n  constructor() {\n    super();\n    this._errors = [];\n  }\n  syntaxError(recognizer, offendingSymbol, line, column, message) {\n    this._errors.push({ message, line, column });\n  }\n  getErrors() {\n    return this._errors;\n  }\n  hasErrors() {\n    return this._errors.length > 0;\n  }\n};\nvar ErrorListener_default = ErrorListener;\n\n// src/antlr/solidity-tokens.ts\nvar tokens = {\n  \"1\": \"pragma\",\n  \"2\": \";\",\n  \"3\": \"*\",\n  \"4\": \"||\",\n  \"5\": \"^\",\n  \"6\": \"~\",\n  \"7\": \">=\",\n  \"8\": \">\",\n  \"9\": \"<\",\n  \"10\": \"<=\",\n  \"11\": \"=\",\n  \"12\": \"as\",\n  \"13\": \"import\",\n  \"14\": \"from\",\n  \"15\": \"{\",\n  \"16\": \",\",\n  \"17\": \"}\",\n  \"18\": \"abstract\",\n  \"19\": \"contract\",\n  \"20\": \"interface\",\n  \"21\": \"library\",\n  \"22\": \"is\",\n  \"23\": \"(\",\n  \"24\": \")\",\n  \"25\": \"error\",\n  \"26\": \"using\",\n  \"27\": \"for\",\n  \"28\": \"|\",\n  \"29\": \"&\",\n  \"30\": \"+\",\n  \"31\": \"-\",\n  \"32\": \"/\",\n  \"33\": \"%\",\n  \"34\": \"==\",\n  \"35\": \"!=\",\n  \"36\": \"struct\",\n  \"37\": \"modifier\",\n  \"38\": \"function\",\n  \"39\": \"returns\",\n  \"40\": \"event\",\n  \"41\": \"enum\",\n  \"42\": \"[\",\n  \"43\": \"]\",\n  \"44\": \"address\",\n  \"45\": \".\",\n  \"46\": \"mapping\",\n  \"47\": \"=>\",\n  \"48\": \"memory\",\n  \"49\": \"storage\",\n  \"50\": \"calldata\",\n  \"51\": \"if\",\n  \"52\": \"else\",\n  \"53\": \"try\",\n  \"54\": \"catch\",\n  \"55\": \"while\",\n  \"56\": \"unchecked\",\n  \"57\": \"assembly\",\n  \"58\": \"do\",\n  \"59\": \"return\",\n  \"60\": \"throw\",\n  \"61\": \"emit\",\n  \"62\": \"revert\",\n  \"63\": \"var\",\n  \"64\": \"bool\",\n  \"65\": \"string\",\n  \"66\": \"byte\",\n  \"67\": \"++\",\n  \"68\": \"--\",\n  \"69\": \"new\",\n  \"70\": \":\",\n  \"71\": \"delete\",\n  \"72\": \"!\",\n  \"73\": \"**\",\n  \"74\": \"<<\",\n  \"75\": \">>\",\n  \"76\": \"&&\",\n  \"77\": \"?\",\n  \"78\": \"|=\",\n  \"79\": \"^=\",\n  \"80\": \"&=\",\n  \"81\": \"<<=\",\n  \"82\": \">>=\",\n  \"83\": \"+=\",\n  \"84\": \"-=\",\n  \"85\": \"*=\",\n  \"86\": \"/=\",\n  \"87\": \"%=\",\n  \"88\": \"let\",\n  \"89\": \":=\",\n  \"90\": \"=:\",\n  \"91\": \"switch\",\n  \"92\": \"case\",\n  \"93\": \"default\",\n  \"94\": \"->\",\n  \"95\": \"callback\",\n  \"96\": \"override\",\n  \"97\": \"Int\",\n  \"98\": \"Uint\",\n  \"99\": \"Byte\",\n  \"100\": \"Fixed\",\n  \"101\": \"Ufixed\",\n  \"102\": \"BooleanLiteral\",\n  \"103\": \"DecimalNumber\",\n  \"104\": \"HexNumber\",\n  \"105\": \"NumberUnit\",\n  \"106\": \"HexLiteralFragment\",\n  \"107\": \"ReservedKeyword\",\n  \"108\": \"anonymous\",\n  \"109\": \"break\",\n  \"110\": \"constant\",\n  \"111\": \"transient\",\n  \"112\": \"immutable\",\n  \"113\": \"continue\",\n  \"114\": \"leave\",\n  \"115\": \"external\",\n  \"116\": \"indexed\",\n  \"117\": \"internal\",\n  \"118\": \"payable\",\n  \"119\": \"private\",\n  \"120\": \"public\",\n  \"121\": \"virtual\",\n  \"122\": \"pure\",\n  \"123\": \"type\",\n  \"124\": \"view\",\n  \"125\": \"global\",\n  \"126\": \"constructor\",\n  \"127\": \"fallback\",\n  \"128\": \"receive\",\n  \"129\": \"Identifier\",\n  \"130\": \"StringLiteralFragment\",\n  \"131\": \"VersionLiteral\",\n  \"132\": \"WS\",\n  \"133\": \"COMMENT\",\n  \"134\": \"LINE_COMMENT\"\n};\n\n// src/tokens.ts\nvar TYPE_TOKENS = [\n  \"var\",\n  \"bool\",\n  \"address\",\n  \"string\",\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"UFixed\"\n];\nfunction getTokenType(value) {\n  if (value === \"Identifier\" || value === \"from\") {\n    return \"Identifier\";\n  } else if (value === \"TrueLiteral\" || value === \"FalseLiteral\") {\n    return \"Boolean\";\n  } else if (value === \"VersionLiteral\") {\n    return \"Version\";\n  } else if (value === \"StringLiteral\") {\n    return \"String\";\n  } else if (TYPE_TOKENS.includes(value)) {\n    return \"Type\";\n  } else if (value === \"NumberUnit\") {\n    return \"Subdenomination\";\n  } else if (value === \"DecimalNumber\") {\n    return \"Numeric\";\n  } else if (value === \"HexLiteral\") {\n    return \"Hex\";\n  } else if (value === \"ReservedKeyword\") {\n    return \"Reserved\";\n  } else if (/^\\W+$/.test(value)) {\n    return \"Punctuator\";\n  } else {\n    return \"Keyword\";\n  }\n}\nfunction range(token) {\n  return [token.start, token.stop + 1];\n}\nfunction loc(token) {\n  const tokenText = token.text ?? \"\";\n  const textInLines = tokenText.split(/\\r?\\n/);\n  const numberOfNewLines = textInLines.length - 1;\n  return {\n    start: { line: token.line, column: token.column },\n    end: {\n      line: token.line + numberOfNewLines,\n      column: textInLines[numberOfNewLines].length + (numberOfNewLines === 0 ? token.column : 0)\n    }\n  };\n}\nfunction buildTokenList(tokensArg, options) {\n  return tokensArg.map((token) => {\n    const type = getTokenType(tokens[token.type.toString()]);\n    const node = { type, value: token.text };\n    if (options.range === true) {\n      node.range = range(token);\n    }\n    if (options.loc === true) {\n      node.loc = loc(token);\n    }\n    return node;\n  });\n}\nfunction buildCommentList(tokensArg, commentsChannelId, options) {\n  return tokensArg.filter((token) => token.channel === commentsChannelId).map((token) => {\n    const comment = token.text.startsWith(\"//\") ? { type: \"LineComment\", value: token.text.slice(2) } : { type: \"BlockComment\", value: token.text.slice(2, -2) };\n    if (options.range === true) {\n      comment.range = range(token);\n    }\n    if (options.loc === true) {\n      comment.loc = loc(token);\n    }\n    return comment;\n  });\n}\n\n// src/parser.ts\nvar ParserError = class extends Error {\n  constructor(args) {\n    super();\n    const { message, line, column } = args.errors[0];\n    this.message = `${message} (${line}:${column})`;\n    this.errors = args.errors;\n    if (Error.captureStackTrace !== void 0) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n};\nfunction tokenize(input, options = {}) {\n  const inputStream = new Qe(input);\n  const lexer = new SolidityLexer(inputStream);\n  return buildTokenList(lexer.getAllTokens(), options);\n}\nfunction parse(input, options = {}) {\n  const inputStream = new Qe(input);\n  const lexer = new SolidityLexer(inputStream);\n  const tokenStream = new nn(lexer);\n  const parser = new SolidityParser(tokenStream);\n  const listener = new ErrorListener_default();\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(listener);\n  parser.removeErrorListeners();\n  parser.addErrorListener(listener);\n  parser.buildParseTrees = true;\n  const sourceUnit = parser.sourceUnit();\n  const astBuilder = new ASTBuilder(options);\n  astBuilder.visit(sourceUnit);\n  const ast = astBuilder.result;\n  if (ast === null) {\n    throw new Error(\"ast should never be null\");\n  }\n  if (options.tokens === true) {\n    ast.tokens = buildTokenList(tokenStream.tokens, options);\n  }\n  if (options.comments === true) {\n    ast.comments = buildCommentList(\n      tokenStream.tokens,\n      lexer.channelNames.indexOf(\"HIDDEN\"),\n      options\n    );\n  }\n  if (listener.hasErrors()) {\n    if (options.tolerant !== true) {\n      throw new ParserError({ errors: listener.getErrors() });\n    }\n    ast.errors = listener.getErrors();\n  }\n  return ast;\n}\nfunction _isASTNode(node) {\n  if (typeof node !== \"object\" || node === null) {\n    return false;\n  }\n  const nodeAsASTNode = node;\n  if (Object.prototype.hasOwnProperty.call(nodeAsASTNode, \"type\") && typeof nodeAsASTNode.type === \"string\") {\n    return astNodeTypes.includes(nodeAsASTNode.type);\n  }\n  return false;\n}\nfunction visit(node, visitor, nodeParent) {\n  if (Array.isArray(node)) {\n    node.forEach((child) => visit(child, visitor, nodeParent));\n  }\n  if (!_isASTNode(node))\n    return;\n  let cont = true;\n  if (visitor[node.type] !== void 0) {\n    cont = visitor[node.type](node, nodeParent);\n  }\n  if (cont === false)\n    return;\n  for (const prop in node) {\n    if (Object.prototype.hasOwnProperty.call(node, prop)) {\n      visit(node[prop], visitor, node);\n    }\n  }\n  const selector = node.type + \":exit\";\n  if (visitor[selector] !== void 0) {\n    visitor[selector](node, nodeParent);\n  }\n}\n\n// src/index.ts\nvar src_default = { ParserError, parse, tokenize, visit };\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.cjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@solidity-parser/parser/dist/index.cjs.js\n");

/***/ })

};
;