/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/adm-zip";
exports.ids = ["vendor-chunks/adm-zip"];
exports.modules = {

/***/ "(ssr)/./node_modules/adm-zip/adm-zip.js":
/*!*****************************************!*\
  !*** ./node_modules/adm-zip/adm-zip.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/adm-zip/util/index.js\");\r\nvar fs = Utils.FileSystem.require(),\r\n\tpth = __webpack_require__(/*! path */ \"path\");\r\n\r\nfs.existsSync = fs.existsSync || pth.existsSync;\r\n\r\nvar ZipEntry = __webpack_require__(/*! ./zipEntry */ \"(ssr)/./node_modules/adm-zip/zipEntry.js\"),\r\n\tZipFile = __webpack_require__(/*! ./zipFile */ \"(ssr)/./node_modules/adm-zip/zipFile.js\");\r\n\r\nvar isWin = /^win/.test(process.platform);\r\n\r\n\r\nmodule.exports = function (/**String*/input) {\r\n\tvar _zip = undefined,\r\n\t\t_filename = \"\";\r\n\r\n\tif (input && typeof input === \"string\") { // load zip file\r\n\t\tif (fs.existsSync(input)) {\r\n\t\t\t_filename = input;\r\n\t\t\t_zip = new ZipFile(input, Utils.Constants.FILE);\r\n\t\t} else {\r\n\t\t\tthrow new Error(Utils.Errors.INVALID_FILENAME);\r\n\t\t}\r\n\t} else if (input && Buffer.isBuffer(input)) { // load buffer\r\n\t\t_zip = new ZipFile(input, Utils.Constants.BUFFER);\r\n\t} else { // create new zip file\r\n\t\t_zip = new ZipFile(null, Utils.Constants.NONE);\r\n\t}\r\n\r\n\tfunction sanitize(prefix, name) {\r\n\t\tprefix = pth.resolve(pth.normalize(prefix));\r\n\t\tvar parts = name.split('/');\r\n\t\tfor (var i = 0, l = parts.length; i < l; i++) {\r\n\t\t\tvar path = pth.normalize(pth.join(prefix, parts.slice(i, l).join(pth.sep)));\r\n\t\t\tif (path.indexOf(prefix) === 0) {\r\n\t\t\t\treturn path;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pth.normalize(pth.join(prefix, pth.basename(name)));\r\n\t}\r\n\r\n\tfunction getEntry(/**Object*/entry) {\r\n\t\tif (entry && _zip) {\r\n\t\t\tvar item;\r\n\t\t\t// If entry was given as a file name\r\n\t\t\tif (typeof entry === \"string\")\r\n\t\t\t\titem = _zip.getEntry(entry);\r\n\t\t\t// if entry was given as a ZipEntry object\r\n\t\t\tif (typeof entry === \"object\" && typeof entry.entryName !== \"undefined\" && typeof entry.header !== \"undefined\")\r\n\t\t\t\titem = _zip.getEntry(entry.entryName);\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn {\r\n\t\t/**\r\n\t\t * Extracts the given entry from the archive and returns the content as a Buffer object\r\n\t\t * @param entry ZipEntry object or String with the full path of the entry\r\n\t\t *\r\n\t\t * @return Buffer or Null in case of error\r\n\t\t */\r\n\t\treadFile: function (/**Object*/entry) {\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\treturn item && item.getData() || null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Asynchronous readFile\r\n\t\t * @param entry ZipEntry object or String with the full path of the entry\r\n\t\t * @param callback\r\n\t\t *\r\n\t\t * @return Buffer or Null in case of error\r\n\t\t */\r\n\t\treadFileAsync: function (/**Object*/entry, /**Function*/callback) {\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (item) {\r\n\t\t\t\titem.getDataAsync(callback);\r\n\t\t\t} else {\r\n\t\t\t\tcallback(null, \"getEntry failed for:\" + entry)\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Extracts the given entry from the archive and returns the content as plain text in the given encoding\r\n\t\t * @param entry ZipEntry object or String with the full path of the entry\r\n\t\t * @param encoding Optional. If no encoding is specified utf8 is used\r\n\t\t *\r\n\t\t * @return String\r\n\t\t */\r\n\t\treadAsText: function (/**Object*/entry, /**String=*/encoding) {\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (item) {\r\n\t\t\t\tvar data = item.getData();\r\n\t\t\t\tif (data && data.length) {\r\n\t\t\t\t\treturn data.toString(encoding || \"utf8\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Asynchronous readAsText\r\n\t\t * @param entry ZipEntry object or String with the full path of the entry\r\n\t\t * @param callback\r\n\t\t * @param encoding Optional. If no encoding is specified utf8 is used\r\n\t\t *\r\n\t\t * @return String\r\n\t\t */\r\n\t\treadAsTextAsync: function (/**Object*/entry, /**Function*/callback, /**String=*/encoding) {\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (item) {\r\n\t\t\t\titem.getDataAsync(function (data, err) {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tcallback(data, err);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (data && data.length) {\r\n\t\t\t\t\t\tcallback(data.toString(encoding || \"utf8\"));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcallback(\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tcallback(\"\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove the entry from the file or the entry and all it's nested directories and files if the given entry is a directory\r\n\t\t *\r\n\t\t * @param entry\r\n\t\t */\r\n\t\tdeleteFile: function (/**Object*/entry) { // @TODO: test deleteFile\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (item) {\r\n\t\t\t\t_zip.deleteEntry(item.entryName);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Adds a comment to the zip. The zip must be rewritten after adding the comment.\r\n\t\t *\r\n\t\t * @param comment\r\n\t\t */\r\n\t\taddZipComment: function (/**String*/comment) { // @TODO: test addZipComment\r\n\t\t\t_zip.comment = comment;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns the zip comment\r\n\t\t *\r\n\t\t * @return String\r\n\t\t */\r\n\t\tgetZipComment: function () {\r\n\t\t\treturn _zip.comment || '';\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Adds a comment to a specified zipEntry. The zip must be rewritten after adding the comment\r\n\t\t * The comment cannot exceed 65535 characters in length\r\n\t\t *\r\n\t\t * @param entry\r\n\t\t * @param comment\r\n\t\t */\r\n\t\taddZipEntryComment: function (/**Object*/entry, /**String*/comment) {\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (item) {\r\n\t\t\t\titem.comment = comment;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns the comment of the specified entry\r\n\t\t *\r\n\t\t * @param entry\r\n\t\t * @return String\r\n\t\t */\r\n\t\tgetZipEntryComment: function (/**Object*/entry) {\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (item) {\r\n\t\t\t\treturn item.comment || '';\r\n\t\t\t}\r\n\t\t\treturn ''\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Updates the content of an existing entry inside the archive. The zip must be rewritten after updating the content\r\n\t\t *\r\n\t\t * @param entry\r\n\t\t * @param content\r\n\t\t */\r\n\t\tupdateFile: function (/**Object*/entry, /**Buffer*/content) {\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (item) {\r\n\t\t\t\titem.setData(content);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Adds a file from the disk to the archive\r\n\t\t *\r\n\t\t * @param localPath File to add to zip\r\n\t\t * @param zipPath Optional path inside the zip\r\n\t\t * @param zipName Optional name for the file\r\n\t\t */\r\n\t\taddLocalFile: function (/**String*/localPath, /**String=*/zipPath, /**String=*/zipName) {\r\n\t\t\tif (fs.existsSync(localPath)) {\r\n\t\t\t\tif (zipPath) {\r\n\t\t\t\t\tzipPath = zipPath.split(\"\\\\\").join(\"/\");\r\n\t\t\t\t\tif (zipPath.charAt(zipPath.length - 1) !== \"/\") {\r\n\t\t\t\t\t\tzipPath += \"/\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tzipPath = \"\";\r\n\t\t\t\t}\r\n\t\t\t\tvar p = localPath.split(\"\\\\\").join(\"/\").split(\"/\").pop();\r\n\r\n\t\t\t\tif (zipName) {\r\n\t\t\t\t\tthis.addFile(zipPath + zipName, fs.readFileSync(localPath), \"\", 0)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.addFile(zipPath + p, fs.readFileSync(localPath), \"\", 0)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(Utils.Errors.FILE_NOT_FOUND.replace(\"%s\", localPath));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Adds a local directory and all its nested files and directories to the archive\r\n\t\t *\r\n\t\t * @param localPath\r\n\t\t * @param zipPath optional path inside zip\r\n\t\t * @param filter optional RegExp or Function if files match will\r\n\t\t *               be included.\r\n\t\t */\r\n\t\taddLocalFolder: function (/**String*/localPath, /**String=*/zipPath, /**=RegExp|Function*/filter) {\r\n\t\t\tif (filter === undefined) {\r\n\t\t\t\tfilter = function () {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t};\r\n\t\t\t} else if (filter instanceof RegExp) {\r\n\t\t\t\tfilter = function (filter) {\r\n\t\t\t\t\treturn function (filename) {\r\n\t\t\t\t\t\treturn filter.test(filename);\r\n\t\t\t\t\t}\r\n\t\t\t\t}(filter);\r\n\t\t\t}\r\n\r\n\t\t\tif (zipPath) {\r\n\t\t\t\tzipPath = zipPath.split(\"\\\\\").join(\"/\");\r\n\t\t\t\tif (zipPath.charAt(zipPath.length - 1) !== \"/\") {\r\n\t\t\t\t\tzipPath += \"/\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tzipPath = \"\";\r\n\t\t\t}\r\n\t\t\t// normalize the path first\r\n\t\t\tlocalPath = pth.normalize(localPath);\r\n\t\t\tlocalPath = localPath.split(\"\\\\\").join(\"/\"); //windows fix\r\n\t\t\tif (localPath.charAt(localPath.length - 1) !== \"/\")\r\n\t\t\t\tlocalPath += \"/\";\r\n\r\n\t\t\tif (fs.existsSync(localPath)) {\r\n\r\n\t\t\t\tvar items = Utils.findFiles(localPath),\r\n\t\t\t\t\tself = this;\r\n\r\n\t\t\t\tif (items.length) {\r\n\t\t\t\t\titems.forEach(function (path) {\r\n\t\t\t\t\t\tvar p = path.split(\"\\\\\").join(\"/\").replace(new RegExp(localPath.replace(/(\\(|\\)|\\$)/g, '\\\\$1'), 'i'), \"\"); //windows fix\r\n\t\t\t\t\t\tif (filter(p)) {\r\n\t\t\t\t\t\t\tif (p.charAt(p.length - 1) !== \"/\") {\r\n\t\t\t\t\t\t\t\tself.addFile(zipPath + p, fs.readFileSync(path), \"\", 0)\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tself.addFile(zipPath + p, Buffer.alloc(0), \"\", 0)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(Utils.Errors.FILE_NOT_FOUND.replace(\"%s\", localPath));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Asynchronous addLocalFile\r\n\t\t * @param localPath\r\n\t\t * @param callback\r\n\t\t * @param zipPath optional path inside zip\r\n\t\t * @param filter optional RegExp or Function if files match will\r\n\t\t *               be included.\r\n\t\t */\r\n\t\taddLocalFolderAsync: function (/*String*/localPath, /*Function*/callback, /*String*/zipPath, /*RegExp|Function*/filter) {\r\n\t\t\tif (filter === undefined) {\r\n\t\t\t\tfilter = function () {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t};\r\n\t\t\t} else if (filter instanceof RegExp) {\r\n\t\t\t\tfilter = function (filter) {\r\n\t\t\t\t\treturn function (filename) {\r\n\t\t\t\t\t\treturn filter.test(filename);\r\n\t\t\t\t\t}\r\n\t\t\t\t}(filter);\r\n\t\t\t}\r\n\r\n\t\t\tif (zipPath) {\r\n\t\t\t\tzipPath = zipPath.split(\"\\\\\").join(\"/\");\r\n\t\t\t\tif (zipPath.charAt(zipPath.length - 1) !== \"/\") {\r\n\t\t\t\t\tzipPath += \"/\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tzipPath = \"\";\r\n\t\t\t}\r\n\t\t\t// normalize the path first\r\n\t\t\tlocalPath = pth.normalize(localPath);\r\n\t\t\tlocalPath = localPath.split(\"\\\\\").join(\"/\"); //windows fix\r\n\t\t\tif (localPath.charAt(localPath.length - 1) !== \"/\")\r\n\t\t\t\tlocalPath += \"/\";\r\n\r\n\t\t\tvar self = this;\r\n\t\t\tfs.open(localPath, 'r', function (err, fd) {\r\n\t\t\t\tif (err && err.code === 'ENOENT') {\r\n\t\t\t\t\tcallback(undefined, Utils.Errors.FILE_NOT_FOUND.replace(\"%s\", localPath));\r\n\t\t\t\t} else if (err) {\r\n\t\t\t\t\tcallback(undefined, err);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar items = Utils.findFiles(localPath);\r\n\t\t\t\t\tvar i = -1;\r\n\r\n\t\t\t\t\tvar next = function () {\r\n\t\t\t\t\t\ti += 1;\r\n\t\t\t\t\t\tif (i < items.length) {\r\n\t\t\t\t\t\t\tvar p = items[i].split(\"\\\\\").join(\"/\").replace(new RegExp(localPath.replace(/(\\(|\\))/g, '\\\\$1'), 'i'), \"\"); //windows fix\r\n\t\t\t\t\t\t\tp = p.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').replace(/[^\\x20-\\x7E]/g, '') // accent fix\r\n\t\t\t\t\t\t\tif (filter(p)) {\r\n\t\t\t\t\t\t\t\tif (p.charAt(p.length - 1) !== \"/\") {\r\n\t\t\t\t\t\t\t\t\tfs.readFile(items[i], function (err, data) {\r\n\t\t\t\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t\t\t\tcallback(undefined, err);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tself.addFile(zipPath + p, data, '', 0);\r\n\t\t\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tself.addFile(zipPath + p, Buffer.alloc(0), \"\", 0);\r\n\t\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tnext();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcallback(true, undefined);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnext();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Allows you to create a entry (file or directory) in the zip file.\r\n\t\t * If you want to create a directory the entryName must end in / and a null buffer should be provided.\r\n\t\t * Comment and attributes are optional\r\n\t\t *\r\n\t\t * @param entryName\r\n\t\t * @param content\r\n\t\t * @param comment\r\n\t\t * @param attr\r\n\t\t */\r\n\t\taddFile: function (/**String*/entryName, /**Buffer*/content, /**String*/comment, /**Number*/attr) {\r\n\t\t\tvar entry = new ZipEntry();\r\n\t\t\tentry.entryName = entryName;\r\n\t\t\tentry.comment = comment || \"\";\r\n\r\n\t\t\tif (!attr) {\r\n\t\t\t\tif (entry.isDirectory) {\r\n\t\t\t\t\tattr = (0o40755 << 16) | 0x10; // (permissions drwxr-xr-x) + (MS-DOS directory flag)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tattr = 0o644 << 16; // permissions -r-wr--r--\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tentry.attr = attr;\r\n\r\n\t\t\tentry.setData(content);\r\n\t\t\t_zip.setEntry(entry);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns an array of ZipEntry objects representing the files and folders inside the archive\r\n\t\t *\r\n\t\t * @return Array\r\n\t\t */\r\n\t\tgetEntries: function () {\r\n\t\t\tif (_zip) {\r\n\t\t\t\treturn _zip.entries;\r\n\t\t\t} else {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a ZipEntry object representing the file or folder specified by ``name``.\r\n\t\t *\r\n\t\t * @param name\r\n\t\t * @return ZipEntry\r\n\t\t */\r\n\t\tgetEntry: function (/**String*/name) {\r\n\t\t\treturn getEntry(name);\r\n\t\t},\r\n\r\n\t\tgetEntryCount: function() {\r\n\t\t\treturn _zip.getEntryCount();\r\n\t\t},\r\n\r\n\t\tforEach: function(callback) {\r\n\t\t\treturn _zip.forEach(callback);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Extracts the given entry to the given targetPath\r\n\t\t * If the entry is a directory inside the archive, the entire directory and it's subdirectories will be extracted\r\n\t\t *\r\n\t\t * @param entry ZipEntry object or String with the full path of the entry\r\n\t\t * @param targetPath Target folder where to write the file\r\n\t\t * @param maintainEntryPath If maintainEntryPath is true and the entry is inside a folder, the entry folder\r\n\t\t *                          will be created in targetPath as well. Default is TRUE\r\n\t\t * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.\r\n\t\t *                  Default is FALSE\r\n\t\t *\r\n\t\t * @return Boolean\r\n\t\t */\r\n\t\textractEntryTo: function (/**Object*/entry, /**String*/targetPath, /**Boolean*/maintainEntryPath, /**Boolean*/overwrite) {\r\n\t\t\toverwrite = overwrite || false;\r\n\t\t\tmaintainEntryPath = typeof maintainEntryPath === \"undefined\" ? true : maintainEntryPath;\r\n\r\n\t\t\tvar item = getEntry(entry);\r\n\t\t\tif (!item) {\r\n\t\t\t\tthrow new Error(Utils.Errors.NO_ENTRY);\r\n\t\t\t}\r\n\r\n\t\t\tvar entryName = item.entryName;\r\n\r\n\t\t\tvar target = sanitize(targetPath, maintainEntryPath ? entryName : pth.basename(entryName));\r\n\r\n\t\t\tif (item.isDirectory) {\r\n\t\t\t\ttarget = pth.resolve(target, \"..\");\r\n\t\t\t\tvar children = _zip.getEntryChildren(item);\r\n\t\t\t\tchildren.forEach(function (child) {\r\n\t\t\t\t\tif (child.isDirectory) return;\r\n\t\t\t\t\tvar content = child.getData();\r\n\t\t\t\t\tif (!content) {\r\n\t\t\t\t\t\tthrow new Error(Utils.Errors.CANT_EXTRACT_FILE);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar childName = sanitize(targetPath, maintainEntryPath ? child.entryName : pth.basename(child.entryName));\r\n\r\n\t\t\t\t\tUtils.writeFileTo(childName, content, overwrite);\r\n\t\t\t\t});\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tvar content = item.getData();\r\n\t\t\tif (!content) throw new Error(Utils.Errors.CANT_EXTRACT_FILE);\r\n\r\n\t\t\tif (fs.existsSync(target) && !overwrite) {\r\n\t\t\t\tthrow new Error(Utils.Errors.CANT_OVERRIDE);\r\n\t\t\t}\r\n\t\t\tUtils.writeFileTo(target, content, overwrite);\r\n\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Test the archive\r\n\t\t *\r\n\t\t */\r\n\t\ttest: function () {\r\n\t\t\tif (!_zip) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var entry in _zip.entries) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (entry.isDirectory) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar content = _zip.entries[entry].getData();\r\n\t\t\t\t\tif (!content) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Extracts the entire archive to the given location\r\n\t\t *\r\n\t\t * @param targetPath Target location\r\n\t\t * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.\r\n\t\t *                  Default is FALSE\r\n\t\t */\r\n\t\textractAllTo: function (/**String*/targetPath, /**Boolean*/overwrite) {\r\n\t\t\toverwrite = overwrite || false;\r\n\t\t\tif (!_zip) {\r\n\t\t\t\tthrow new Error(Utils.Errors.NO_ZIP);\r\n\t\t\t}\r\n\t\t\t_zip.entries.forEach(function (entry) {\r\n\t\t\t\tvar entryName = sanitize(targetPath, entry.entryName.toString());\r\n\t\t\t\tif (entry.isDirectory) {\r\n\t\t\t\t\tUtils.makeDir(entryName);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar content = entry.getData();\r\n\t\t\t\tif (!content) {\r\n\t\t\t\t\tthrow new Error(Utils.Errors.CANT_EXTRACT_FILE);\r\n\t\t\t\t}\r\n\t\t\t\tUtils.writeFileTo(entryName, content, overwrite);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tfs.utimesSync(entryName, entry.header.time, entry.header.time)\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tthrow new Error(Utils.Errors.CANT_EXTRACT_FILE);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Asynchronous extractAllTo\r\n\t\t *\r\n\t\t * @param targetPath Target location\r\n\t\t * @param overwrite If the file already exists at the target path, the file will be overwriten if this is true.\r\n\t\t *                  Default is FALSE\r\n\t\t * @param callback\r\n\t\t */\r\n\t\textractAllToAsync: function (/**String*/targetPath, /**Boolean*/overwrite, /**Function*/callback) {\r\n\t\t\tif (!callback) {\r\n\t\t\t\tcallback = function() {}\r\n\t\t\t}\r\n\t\t\toverwrite = overwrite || false;\r\n\t\t\tif (!_zip) {\r\n\t\t\t\tcallback(new Error(Utils.Errors.NO_ZIP));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar entries = _zip.entries;\r\n\t\t\tvar i = entries.length;\r\n\t\t\tentries.forEach(function (entry) {\r\n\t\t\t\tif (i <= 0) return; // Had an error already\r\n\r\n\t\t\t\tvar entryName = pth.normalize(entry.entryName.toString());\r\n\r\n\t\t\t\tif (entry.isDirectory) {\r\n\t\t\t\t\tUtils.makeDir(sanitize(targetPath, entryName));\r\n\t\t\t\t\tif (--i === 0)\r\n\t\t\t\t\t\tcallback(undefined);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tentry.getDataAsync(function (content, err) {\r\n\t\t\t\t\tif (i <= 0) return;\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tcallback(new Error(err));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!content) {\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\t\tcallback(new Error(Utils.Errors.CANT_EXTRACT_FILE));\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tUtils.writeFileToAsync(sanitize(targetPath, entryName), content, overwrite, function (succ) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tfs.utimesSync(pth.resolve(targetPath, entryName), entry.header.time, entry.header.time);\r\n\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\tcallback(new Error('Unable to set utimes'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (i <= 0) return;\r\n\t\t\t\t\t\tif (!succ) {\r\n\t\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\t\t\tcallback(new Error('Unable to write'));\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (--i === 0)\r\n\t\t\t\t\t\t\tcallback(undefined);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Writes the newly created zip file to disk at the specified location or if a zip was opened and no ``targetFileName`` is provided, it will overwrite the opened zip\r\n\t\t *\r\n\t\t * @param targetFileName\r\n\t\t * @param callback\r\n\t\t */\r\n\t\twriteZip: function (/**String*/targetFileName, /**Function*/callback) {\r\n\t\t\tif (arguments.length === 1) {\r\n\t\t\t\tif (typeof targetFileName === \"function\") {\r\n\t\t\t\t\tcallback = targetFileName;\r\n\t\t\t\t\ttargetFileName = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!targetFileName && _filename) {\r\n\t\t\t\ttargetFileName = _filename;\r\n\t\t\t}\r\n\t\t\tif (!targetFileName) return;\r\n\r\n\t\t\tvar zipData = _zip.compressToBuffer();\r\n\t\t\tif (zipData) {\r\n\t\t\t\tvar ok = Utils.writeFileTo(targetFileName, zipData, true);\r\n\t\t\t\tif (typeof callback === 'function') callback(!ok ? new Error(\"failed\") : null, \"\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns the content of the entire zip file as a Buffer object\r\n\t\t *\r\n\t\t * @return Buffer\r\n\t\t */\r\n\t\ttoBuffer: function (/**Function=*/onSuccess, /**Function=*/onFail, /**Function=*/onItemStart, /**Function=*/onItemEnd) {\r\n\t\t\tthis.valueOf = 2;\r\n\t\t\tif (typeof onSuccess === \"function\") {\r\n\t\t\t\t_zip.toAsyncBuffer(onSuccess, onFail, onItemStart, onItemEnd);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\treturn _zip.compressToBuffer()\r\n\t\t}\r\n\t}\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/adm-zip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/headers/entryHeader.js":
/*!*****************************************************!*\
  !*** ./node_modules/adm-zip/headers/entryHeader.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/adm-zip/util/index.js\"),\r\n    Constants = Utils.Constants;\r\n\r\n/* The central directory file header */\r\nmodule.exports = function () {\r\n    var _verMade = 0x0A,\r\n        _version = 0x0A,\r\n        _flags = 0,\r\n        _method = 0,\r\n        _time = 0,\r\n        _crc = 0,\r\n        _compressedSize = 0,\r\n        _size = 0,\r\n        _fnameLen = 0,\r\n        _extraLen = 0,\r\n\r\n        _comLen = 0,\r\n        _diskStart = 0,\r\n        _inattr = 0,\r\n        _attr = 0,\r\n        _offset = 0;\r\n\r\n    var _dataHeader = {};\r\n\r\n    function setTime(val) {\r\n        val = new Date(val);\r\n        _time = (val.getFullYear() - 1980 & 0x7f) << 25  // b09-16 years from 1980\r\n            | (val.getMonth() + 1) << 21                 // b05-08 month\r\n            | val.getDate() << 16                        // b00-04 hour\r\n\r\n            // 2 bytes time\r\n            | val.getHours() << 11    // b11-15 hour\r\n            | val.getMinutes() << 5   // b05-10 minute\r\n            | val.getSeconds() >> 1;  // b00-04 seconds divided by 2\r\n    }\r\n\r\n    setTime(+new Date());\r\n\r\n    return {\r\n        get made () { return _verMade; },\r\n        set made (val) { _verMade = val; },\r\n\r\n        get version () { return _version; },\r\n        set version (val) { _version = val },\r\n\r\n        get flags () { return _flags },\r\n        set flags (val) { _flags = val; },\r\n\r\n        get method () { return _method; },\r\n        set method (val) { _method = val; },\r\n\r\n        get time () { return new Date(\r\n            ((_time >> 25) & 0x7f) + 1980,\r\n            ((_time >> 21) & 0x0f) - 1,\r\n            (_time >> 16) & 0x1f,\r\n            (_time >> 11) & 0x1f,\r\n            (_time >> 5) & 0x3f,\r\n            (_time & 0x1f) << 1\r\n        );\r\n        },\r\n        set time (val) {\r\n            setTime(val);\r\n        },\r\n\r\n        get crc () { return _crc; },\r\n        set crc (val) { _crc = val; },\r\n\r\n        get compressedSize () { return _compressedSize; },\r\n        set compressedSize (val) { _compressedSize = val; },\r\n\r\n        get size () { return _size; },\r\n        set size (val) { _size = val; },\r\n\r\n        get fileNameLength () { return _fnameLen; },\r\n        set fileNameLength (val) { _fnameLen = val; },\r\n\r\n        get extraLength () { return _extraLen },\r\n        set extraLength (val) { _extraLen = val; },\r\n\r\n        get commentLength () { return _comLen },\r\n        set commentLength (val) { _comLen = val },\r\n\r\n        get diskNumStart () { return _diskStart },\r\n        set diskNumStart (val) { _diskStart = val },\r\n\r\n        get inAttr () { return _inattr },\r\n        set inAttr (val) { _inattr = val },\r\n\r\n        get attr () { return _attr },\r\n        set attr (val) { _attr = val },\r\n\r\n        get offset () { return _offset },\r\n        set offset (val) { _offset = val },\r\n\r\n        get encripted () { return (_flags & 1) === 1 },\r\n\r\n        get entryHeaderSize () {\r\n            return Constants.CENHDR + _fnameLen + _extraLen + _comLen;\r\n        },\r\n\r\n        get realDataOffset () {\r\n            return _offset + Constants.LOCHDR + _dataHeader.fnameLen + _dataHeader.extraLen;\r\n        },\r\n\r\n        get dataHeader () {\r\n            return _dataHeader;\r\n        },\r\n\r\n        loadDataHeaderFromBinary : function(/*Buffer*/input) {\r\n            var data = input.slice(_offset, _offset + Constants.LOCHDR);\r\n            // 30 bytes and should start with \"PK\\003\\004\"\r\n            if (data.readUInt32LE(0) !== Constants.LOCSIG) {\r\n                throw new Error(Utils.Errors.INVALID_LOC);\r\n            }\r\n            _dataHeader = {\r\n                // version needed to extract\r\n                version : data.readUInt16LE(Constants.LOCVER),\r\n                // general purpose bit flag\r\n                flags : data.readUInt16LE(Constants.LOCFLG),\r\n                // compression method\r\n                method : data.readUInt16LE(Constants.LOCHOW),\r\n                // modification time (2 bytes time, 2 bytes date)\r\n                time : data.readUInt32LE(Constants.LOCTIM),\r\n                // uncompressed file crc-32 value\r\n                crc : data.readUInt32LE(Constants.LOCCRC),\r\n                // compressed size\r\n                compressedSize : data.readUInt32LE(Constants.LOCSIZ),\r\n                // uncompressed size\r\n                size : data.readUInt32LE(Constants.LOCLEN),\r\n                // filename length\r\n                fnameLen : data.readUInt16LE(Constants.LOCNAM),\r\n                // extra field length\r\n                extraLen : data.readUInt16LE(Constants.LOCEXT)\r\n            }\r\n        },\r\n\r\n        loadFromBinary : function(/*Buffer*/data) {\r\n            // data should be 46 bytes and start with \"PK 01 02\"\r\n            if (data.length !== Constants.CENHDR || data.readUInt32LE(0) !== Constants.CENSIG) {\r\n                throw new Error(Utils.Errors.INVALID_CEN);\r\n            }\r\n            // version made by\r\n            _verMade = data.readUInt16LE(Constants.CENVEM);\r\n            // version needed to extract\r\n            _version = data.readUInt16LE(Constants.CENVER);\r\n            // encrypt, decrypt flags\r\n            _flags = data.readUInt16LE(Constants.CENFLG);\r\n            // compression method\r\n            _method = data.readUInt16LE(Constants.CENHOW);\r\n            // modification time (2 bytes time, 2 bytes date)\r\n            _time = data.readUInt32LE(Constants.CENTIM);\r\n            // uncompressed file crc-32 value\r\n            _crc = data.readUInt32LE(Constants.CENCRC);\r\n            // compressed size\r\n            _compressedSize = data.readUInt32LE(Constants.CENSIZ);\r\n            // uncompressed size\r\n            _size = data.readUInt32LE(Constants.CENLEN);\r\n            // filename length\r\n            _fnameLen = data.readUInt16LE(Constants.CENNAM);\r\n            // extra field length\r\n            _extraLen = data.readUInt16LE(Constants.CENEXT);\r\n            // file comment length\r\n            _comLen = data.readUInt16LE(Constants.CENCOM);\r\n            // volume number start\r\n            _diskStart = data.readUInt16LE(Constants.CENDSK);\r\n            // internal file attributes\r\n            _inattr = data.readUInt16LE(Constants.CENATT);\r\n            // external file attributes\r\n            _attr = data.readUInt32LE(Constants.CENATX);\r\n            // LOC header offset\r\n            _offset = data.readUInt32LE(Constants.CENOFF);\r\n        },\r\n\r\n        dataHeaderToBinary : function() {\r\n            // LOC header size (30 bytes)\r\n            var data = Buffer.alloc(Constants.LOCHDR);\r\n            // \"PK\\003\\004\"\r\n            data.writeUInt32LE(Constants.LOCSIG, 0);\r\n            // version needed to extract\r\n            data.writeUInt16LE(_version, Constants.LOCVER);\r\n            // general purpose bit flag\r\n            data.writeUInt16LE(_flags, Constants.LOCFLG);\r\n            // compression method\r\n            data.writeUInt16LE(_method, Constants.LOCHOW);\r\n            // modification time (2 bytes time, 2 bytes date)\r\n            data.writeUInt32LE(_time, Constants.LOCTIM);\r\n            // uncompressed file crc-32 value\r\n            data.writeUInt32LE(_crc, Constants.LOCCRC);\r\n            // compressed size\r\n            data.writeUInt32LE(_compressedSize, Constants.LOCSIZ);\r\n            // uncompressed size\r\n            data.writeUInt32LE(_size, Constants.LOCLEN);\r\n            // filename length\r\n            data.writeUInt16LE(_fnameLen, Constants.LOCNAM);\r\n            // extra field length\r\n            data.writeUInt16LE(_extraLen, Constants.LOCEXT);\r\n            return data;\r\n        },\r\n\r\n        entryHeaderToBinary : function() {\r\n            // CEN header size (46 bytes)\r\n            var data = Buffer.alloc(Constants.CENHDR + _fnameLen + _extraLen + _comLen);\r\n            // \"PK\\001\\002\"\r\n            data.writeUInt32LE(Constants.CENSIG, 0);\r\n            // version made by\r\n            data.writeUInt16LE(_verMade, Constants.CENVEM);\r\n            // version needed to extract\r\n            data.writeUInt16LE(_version, Constants.CENVER);\r\n            // encrypt, decrypt flags\r\n            data.writeUInt16LE(_flags, Constants.CENFLG);\r\n            // compression method\r\n            data.writeUInt16LE(_method, Constants.CENHOW);\r\n            // modification time (2 bytes time, 2 bytes date)\r\n            data.writeUInt32LE(_time, Constants.CENTIM);\r\n            // uncompressed file crc-32 value\r\n            data.writeUInt32LE(_crc, Constants.CENCRC);\r\n            // compressed size\r\n            data.writeUInt32LE(_compressedSize, Constants.CENSIZ);\r\n            // uncompressed size\r\n            data.writeUInt32LE(_size, Constants.CENLEN);\r\n            // filename length\r\n            data.writeUInt16LE(_fnameLen, Constants.CENNAM);\r\n            // extra field length\r\n            data.writeUInt16LE(_extraLen, Constants.CENEXT);\r\n            // file comment length\r\n            data.writeUInt16LE(_comLen, Constants.CENCOM);\r\n            // volume number start\r\n            data.writeUInt16LE(_diskStart, Constants.CENDSK);\r\n            // internal file attributes\r\n            data.writeUInt16LE(_inattr, Constants.CENATT);\r\n            // external file attributes\r\n            data.writeUInt32LE(_attr, Constants.CENATX);\r\n            // LOC header offset\r\n            data.writeUInt32LE(_offset, Constants.CENOFF);\r\n            // fill all with\r\n            data.fill(0x00, Constants.CENHDR);\r\n            return data;\r\n        },\r\n\r\n        toString : function() {\r\n            return '{\\n' +\r\n                '\\t\"made\" : ' + _verMade + \",\\n\" +\r\n                '\\t\"version\" : ' + _version + \",\\n\" +\r\n                '\\t\"flags\" : ' + _flags + \",\\n\" +\r\n                '\\t\"method\" : ' + Utils.methodToString(_method) + \",\\n\" +\r\n                '\\t\"time\" : ' + this.time + \",\\n\" +\r\n                '\\t\"crc\" : 0x' + _crc.toString(16).toUpperCase() + \",\\n\" +\r\n                '\\t\"compressedSize\" : ' + _compressedSize + \" bytes,\\n\" +\r\n                '\\t\"size\" : ' + _size + \" bytes,\\n\" +\r\n                '\\t\"fileNameLength\" : ' + _fnameLen + \",\\n\" +\r\n                '\\t\"extraLength\" : ' + _extraLen + \" bytes,\\n\" +\r\n                '\\t\"commentLength\" : ' + _comLen + \" bytes,\\n\" +\r\n                '\\t\"diskNumStart\" : ' + _diskStart + \",\\n\" +\r\n                '\\t\"inAttr\" : ' + _inattr + \",\\n\" +\r\n                '\\t\"attr\" : ' + _attr + \",\\n\" +\r\n                '\\t\"offset\" : ' + _offset + \",\\n\" +\r\n                '\\t\"entryHeaderSize\" : ' + (Constants.CENHDR + _fnameLen + _extraLen + _comLen) + \" bytes\\n\" +\r\n                '}';\r\n        }\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/headers/entryHeader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/headers/index.js":
/*!***********************************************!*\
  !*** ./node_modules/adm-zip/headers/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.EntryHeader = __webpack_require__(/*! ./entryHeader */ \"(ssr)/./node_modules/adm-zip/headers/entryHeader.js\");\r\nexports.MainHeader = __webpack_require__(/*! ./mainHeader */ \"(ssr)/./node_modules/adm-zip/headers/mainHeader.js\");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9oZWFkZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFIQUE4QztBQUM5QyxrSEFBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2FkbS16aXAvaGVhZGVycy9pbmRleC5qcz85ZTdiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuRW50cnlIZWFkZXIgPSByZXF1aXJlKFwiLi9lbnRyeUhlYWRlclwiKTtcclxuZXhwb3J0cy5NYWluSGVhZGVyID0gcmVxdWlyZShcIi4vbWFpbkhlYWRlclwiKTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/headers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/headers/mainHeader.js":
/*!****************************************************!*\
  !*** ./node_modules/adm-zip/headers/mainHeader.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/adm-zip/util/index.js\"),\r\n    Constants = Utils.Constants;\r\n\r\n/* The entries in the end of central directory */\r\nmodule.exports = function () {\r\n    var _volumeEntries = 0,\r\n        _totalEntries = 0,\r\n        _size = 0,\r\n        _offset = 0,\r\n        _commentLength = 0;\r\n\r\n    return {\r\n        get diskEntries () { return _volumeEntries },\r\n        set diskEntries (/*Number*/val) { _volumeEntries = _totalEntries = val; },\r\n\r\n        get totalEntries () { return _totalEntries },\r\n        set totalEntries (/*Number*/val) { _totalEntries = _volumeEntries = val; },\r\n\r\n        get size () { return _size },\r\n        set size (/*Number*/val) { _size = val; },\r\n\r\n        get offset () { return _offset },\r\n        set offset (/*Number*/val) { _offset = val; },\r\n\r\n        get commentLength () { return _commentLength },\r\n        set commentLength (/*Number*/val) { _commentLength = val; },\r\n\r\n        get mainHeaderSize () {\r\n            return Constants.ENDHDR + _commentLength;\r\n        },\r\n\r\n        loadFromBinary : function(/*Buffer*/data) {\r\n            // data should be 22 bytes and start with \"PK 05 06\"\r\n            // or be 56+ bytes and start with \"PK 06 06\" for Zip64\r\n            if ((data.length !== Constants.ENDHDR || data.readUInt32LE(0) !== Constants.ENDSIG) &&\r\n                (data.length < Constants.ZIP64HDR || data.readUInt32LE(0) !== Constants.ZIP64SIG)) {\r\n\r\n                throw new Error(Utils.Errors.INVALID_END);\r\n            }\r\n\r\n            if (data.readUInt32LE(0) === Constants.ENDSIG) {\r\n                // number of entries on this volume\r\n                _volumeEntries = data.readUInt16LE(Constants.ENDSUB);\r\n                // total number of entries\r\n                _totalEntries = data.readUInt16LE(Constants.ENDTOT);\r\n                // central directory size in bytes\r\n                _size = data.readUInt32LE(Constants.ENDSIZ);\r\n                // offset of first CEN header\r\n                _offset = data.readUInt32LE(Constants.ENDOFF);\r\n                // zip file comment length\r\n                _commentLength = data.readUInt16LE(Constants.ENDCOM);\r\n            } else {\r\n                // number of entries on this volume\r\n                _volumeEntries = Utils.readBigUInt64LE(data, Constants.ZIP64SUB);\r\n                // total number of entries\r\n                _totalEntries = Utils.readBigUInt64LE(data, Constants.ZIP64TOT);\r\n                // central directory size in bytes\r\n                _size = Utils.readBigUInt64LE(data, Constants.ZIP64SIZ);\r\n                // offset of first CEN header\r\n                _offset = Utils.readBigUInt64LE(data, Constants.ZIP64OFF);\r\n\r\n                _commentLength = 0;\r\n            }\r\n\r\n        },\r\n\r\n        toBinary : function() {\r\n           var b = Buffer.alloc(Constants.ENDHDR + _commentLength);\r\n            // \"PK 05 06\" signature\r\n            b.writeUInt32LE(Constants.ENDSIG, 0);\r\n            b.writeUInt32LE(0, 4);\r\n            // number of entries on this volume\r\n            b.writeUInt16LE(_volumeEntries, Constants.ENDSUB);\r\n            // total number of entries\r\n            b.writeUInt16LE(_totalEntries, Constants.ENDTOT);\r\n            // central directory size in bytes\r\n            b.writeUInt32LE(_size, Constants.ENDSIZ);\r\n            // offset of first CEN header\r\n            b.writeUInt32LE(_offset, Constants.ENDOFF);\r\n            // zip file comment length\r\n            b.writeUInt16LE(_commentLength, Constants.ENDCOM);\r\n            // fill comment memory with spaces so no garbage is left there\r\n            b.fill(\" \", Constants.ENDHDR);\r\n\r\n            return b;\r\n        },\r\n\r\n        toString : function() {\r\n            return '{\\n' +\r\n                '\\t\"diskEntries\" : ' + _volumeEntries + \",\\n\" +\r\n                '\\t\"totalEntries\" : ' + _totalEntries + \",\\n\" +\r\n                '\\t\"size\" : ' + _size + \" bytes,\\n\" +\r\n                '\\t\"offset\" : 0x' + _offset.toString(16).toUpperCase() + \",\\n\" +\r\n                '\\t\"commentLength\" : 0x' + _commentLength + \"\\n\" +\r\n            '}';\r\n        }\r\n    }\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9oZWFkZXJzL21haW5IZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLDJEQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsdUJBQXVCO0FBQ3BELDBDQUEwQyx1Q0FBdUM7QUFDakY7QUFDQSw4QkFBOEIsc0JBQXNCO0FBQ3BELDJDQUEyQyx1Q0FBdUM7QUFDbEY7QUFDQSxzQkFBc0IsY0FBYztBQUNwQyxtQ0FBbUMsY0FBYztBQUNqRDtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEMscUNBQXFDLGdCQUFnQjtBQUNyRDtBQUNBLCtCQUErQix1QkFBdUI7QUFDdEQsNENBQTRDLHVCQUF1QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2FkbS16aXAvaGVhZGVycy9tYWluSGVhZGVyLmpzPzI1NDkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWxcIiksXHJcbiAgICBDb25zdGFudHMgPSBVdGlscy5Db25zdGFudHM7XHJcblxyXG4vKiBUaGUgZW50cmllcyBpbiB0aGUgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5ICovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF92b2x1bWVFbnRyaWVzID0gMCxcclxuICAgICAgICBfdG90YWxFbnRyaWVzID0gMCxcclxuICAgICAgICBfc2l6ZSA9IDAsXHJcbiAgICAgICAgX29mZnNldCA9IDAsXHJcbiAgICAgICAgX2NvbW1lbnRMZW5ndGggPSAwO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0IGRpc2tFbnRyaWVzICgpIHsgcmV0dXJuIF92b2x1bWVFbnRyaWVzIH0sXHJcbiAgICAgICAgc2V0IGRpc2tFbnRyaWVzICgvKk51bWJlciovdmFsKSB7IF92b2x1bWVFbnRyaWVzID0gX3RvdGFsRW50cmllcyA9IHZhbDsgfSxcclxuXHJcbiAgICAgICAgZ2V0IHRvdGFsRW50cmllcyAoKSB7IHJldHVybiBfdG90YWxFbnRyaWVzIH0sXHJcbiAgICAgICAgc2V0IHRvdGFsRW50cmllcyAoLypOdW1iZXIqL3ZhbCkgeyBfdG90YWxFbnRyaWVzID0gX3ZvbHVtZUVudHJpZXMgPSB2YWw7IH0sXHJcblxyXG4gICAgICAgIGdldCBzaXplICgpIHsgcmV0dXJuIF9zaXplIH0sXHJcbiAgICAgICAgc2V0IHNpemUgKC8qTnVtYmVyKi92YWwpIHsgX3NpemUgPSB2YWw7IH0sXHJcblxyXG4gICAgICAgIGdldCBvZmZzZXQgKCkgeyByZXR1cm4gX29mZnNldCB9LFxyXG4gICAgICAgIHNldCBvZmZzZXQgKC8qTnVtYmVyKi92YWwpIHsgX29mZnNldCA9IHZhbDsgfSxcclxuXHJcbiAgICAgICAgZ2V0IGNvbW1lbnRMZW5ndGggKCkgeyByZXR1cm4gX2NvbW1lbnRMZW5ndGggfSxcclxuICAgICAgICBzZXQgY29tbWVudExlbmd0aCAoLypOdW1iZXIqL3ZhbCkgeyBfY29tbWVudExlbmd0aCA9IHZhbDsgfSxcclxuXHJcbiAgICAgICAgZ2V0IG1haW5IZWFkZXJTaXplICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENvbnN0YW50cy5FTkRIRFIgKyBfY29tbWVudExlbmd0aDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBsb2FkRnJvbUJpbmFyeSA6IGZ1bmN0aW9uKC8qQnVmZmVyKi9kYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIGRhdGEgc2hvdWxkIGJlIDIyIGJ5dGVzIGFuZCBzdGFydCB3aXRoIFwiUEsgMDUgMDZcIlxyXG4gICAgICAgICAgICAvLyBvciBiZSA1NisgYnl0ZXMgYW5kIHN0YXJ0IHdpdGggXCJQSyAwNiAwNlwiIGZvciBaaXA2NFxyXG4gICAgICAgICAgICBpZiAoKGRhdGEubGVuZ3RoICE9PSBDb25zdGFudHMuRU5ESERSIHx8IGRhdGEucmVhZFVJbnQzMkxFKDApICE9PSBDb25zdGFudHMuRU5EU0lHKSAmJlxyXG4gICAgICAgICAgICAgICAgKGRhdGEubGVuZ3RoIDwgQ29uc3RhbnRzLlpJUDY0SERSIHx8IGRhdGEucmVhZFVJbnQzMkxFKDApICE9PSBDb25zdGFudHMuWklQNjRTSUcpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFV0aWxzLkVycm9ycy5JTlZBTElEX0VORCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLnJlYWRVSW50MzJMRSgwKSA9PT0gQ29uc3RhbnRzLkVORFNJRykge1xyXG4gICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGVudHJpZXMgb24gdGhpcyB2b2x1bWVcclxuICAgICAgICAgICAgICAgIF92b2x1bWVFbnRyaWVzID0gZGF0YS5yZWFkVUludDE2TEUoQ29uc3RhbnRzLkVORFNVQik7XHJcbiAgICAgICAgICAgICAgICAvLyB0b3RhbCBudW1iZXIgb2YgZW50cmllc1xyXG4gICAgICAgICAgICAgICAgX3RvdGFsRW50cmllcyA9IGRhdGEucmVhZFVJbnQxNkxFKENvbnN0YW50cy5FTkRUT1QpO1xyXG4gICAgICAgICAgICAgICAgLy8gY2VudHJhbCBkaXJlY3Rvcnkgc2l6ZSBpbiBieXRlc1xyXG4gICAgICAgICAgICAgICAgX3NpemUgPSBkYXRhLnJlYWRVSW50MzJMRShDb25zdGFudHMuRU5EU0laKTtcclxuICAgICAgICAgICAgICAgIC8vIG9mZnNldCBvZiBmaXJzdCBDRU4gaGVhZGVyXHJcbiAgICAgICAgICAgICAgICBfb2Zmc2V0ID0gZGF0YS5yZWFkVUludDMyTEUoQ29uc3RhbnRzLkVORE9GRik7XHJcbiAgICAgICAgICAgICAgICAvLyB6aXAgZmlsZSBjb21tZW50IGxlbmd0aFxyXG4gICAgICAgICAgICAgICAgX2NvbW1lbnRMZW5ndGggPSBkYXRhLnJlYWRVSW50MTZMRShDb25zdGFudHMuRU5EQ09NKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBlbnRyaWVzIG9uIHRoaXMgdm9sdW1lXHJcbiAgICAgICAgICAgICAgICBfdm9sdW1lRW50cmllcyA9IFV0aWxzLnJlYWRCaWdVSW50NjRMRShkYXRhLCBDb25zdGFudHMuWklQNjRTVUIpO1xyXG4gICAgICAgICAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXNcclxuICAgICAgICAgICAgICAgIF90b3RhbEVudHJpZXMgPSBVdGlscy5yZWFkQmlnVUludDY0TEUoZGF0YSwgQ29uc3RhbnRzLlpJUDY0VE9UKTtcclxuICAgICAgICAgICAgICAgIC8vIGNlbnRyYWwgZGlyZWN0b3J5IHNpemUgaW4gYnl0ZXNcclxuICAgICAgICAgICAgICAgIF9zaXplID0gVXRpbHMucmVhZEJpZ1VJbnQ2NExFKGRhdGEsIENvbnN0YW50cy5aSVA2NFNJWik7XHJcbiAgICAgICAgICAgICAgICAvLyBvZmZzZXQgb2YgZmlyc3QgQ0VOIGhlYWRlclxyXG4gICAgICAgICAgICAgICAgX29mZnNldCA9IFV0aWxzLnJlYWRCaWdVSW50NjRMRShkYXRhLCBDb25zdGFudHMuWklQNjRPRkYpO1xyXG5cclxuICAgICAgICAgICAgICAgIF9jb21tZW50TGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b0JpbmFyeSA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgIHZhciBiID0gQnVmZmVyLmFsbG9jKENvbnN0YW50cy5FTkRIRFIgKyBfY29tbWVudExlbmd0aCk7XHJcbiAgICAgICAgICAgIC8vIFwiUEsgMDUgMDZcIiBzaWduYXR1cmVcclxuICAgICAgICAgICAgYi53cml0ZVVJbnQzMkxFKENvbnN0YW50cy5FTkRTSUcsIDApO1xyXG4gICAgICAgICAgICBiLndyaXRlVUludDMyTEUoMCwgNCk7XHJcbiAgICAgICAgICAgIC8vIG51bWJlciBvZiBlbnRyaWVzIG9uIHRoaXMgdm9sdW1lXHJcbiAgICAgICAgICAgIGIud3JpdGVVSW50MTZMRShfdm9sdW1lRW50cmllcywgQ29uc3RhbnRzLkVORFNVQik7XHJcbiAgICAgICAgICAgIC8vIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzXHJcbiAgICAgICAgICAgIGIud3JpdGVVSW50MTZMRShfdG90YWxFbnRyaWVzLCBDb25zdGFudHMuRU5EVE9UKTtcclxuICAgICAgICAgICAgLy8gY2VudHJhbCBkaXJlY3Rvcnkgc2l6ZSBpbiBieXRlc1xyXG4gICAgICAgICAgICBiLndyaXRlVUludDMyTEUoX3NpemUsIENvbnN0YW50cy5FTkRTSVopO1xyXG4gICAgICAgICAgICAvLyBvZmZzZXQgb2YgZmlyc3QgQ0VOIGhlYWRlclxyXG4gICAgICAgICAgICBiLndyaXRlVUludDMyTEUoX29mZnNldCwgQ29uc3RhbnRzLkVORE9GRik7XHJcbiAgICAgICAgICAgIC8vIHppcCBmaWxlIGNvbW1lbnQgbGVuZ3RoXHJcbiAgICAgICAgICAgIGIud3JpdGVVSW50MTZMRShfY29tbWVudExlbmd0aCwgQ29uc3RhbnRzLkVORENPTSk7XHJcbiAgICAgICAgICAgIC8vIGZpbGwgY29tbWVudCBtZW1vcnkgd2l0aCBzcGFjZXMgc28gbm8gZ2FyYmFnZSBpcyBsZWZ0IHRoZXJlXHJcbiAgICAgICAgICAgIGIuZmlsbChcIiBcIiwgQ29uc3RhbnRzLkVOREhEUik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYjtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b1N0cmluZyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ3tcXG4nICtcclxuICAgICAgICAgICAgICAgICdcXHRcImRpc2tFbnRyaWVzXCIgOiAnICsgX3ZvbHVtZUVudHJpZXMgKyBcIixcXG5cIiArXHJcbiAgICAgICAgICAgICAgICAnXFx0XCJ0b3RhbEVudHJpZXNcIiA6ICcgKyBfdG90YWxFbnRyaWVzICsgXCIsXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgJ1xcdFwic2l6ZVwiIDogJyArIF9zaXplICsgXCIgYnl0ZXMsXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgJ1xcdFwib2Zmc2V0XCIgOiAweCcgKyBfb2Zmc2V0LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgXCIsXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgJ1xcdFwiY29tbWVudExlbmd0aFwiIDogMHgnICsgX2NvbW1lbnRMZW5ndGggKyBcIlxcblwiICtcclxuICAgICAgICAgICAgJ30nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/headers/mainHeader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/methods/deflater.js":
/*!**************************************************!*\
  !*** ./node_modules/adm-zip/methods/deflater.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = function (/*Buffer*/inbuf) {\r\n\r\n  var zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\n  \r\n  var opts = {chunkSize: (parseInt(inbuf.length / 1024) + 1) * 1024};\r\n  \r\n  return {\r\n    deflate: function () {\r\n      return zlib.deflateRawSync(inbuf, opts);\r\n    },\r\n\r\n    deflateAsync: function (/*Function*/callback) {\r\n      var tmp = zlib.createDeflateRaw(opts), parts = [], total = 0;\r\n      tmp.on('data', function (data) {\r\n        parts.push(data);\r\n        total += data.length;\r\n      });\r\n      tmp.on('end', function () {\r\n        var buf = Buffer.alloc(total), written = 0;\r\n        buf.fill(0);\r\n        for (var i = 0; i < parts.length; i++) {\r\n          var part = parts[i];\r\n          part.copy(buf, written);\r\n          written += part.length;\r\n        }\r\n        callback && callback(buf);\r\n      });\r\n      tmp.end(inbuf);\r\n    }\r\n  }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2RlZmxhdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0I7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2RlZmxhdGVyLmpzP2YzOTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypCdWZmZXIqL2luYnVmKSB7XHJcblxyXG4gIHZhciB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XHJcbiAgXHJcbiAgdmFyIG9wdHMgPSB7Y2h1bmtTaXplOiAocGFyc2VJbnQoaW5idWYubGVuZ3RoIC8gMTAyNCkgKyAxKSAqIDEwMjR9O1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBkZWZsYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiB6bGliLmRlZmxhdGVSYXdTeW5jKGluYnVmLCBvcHRzKTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVmbGF0ZUFzeW5jOiBmdW5jdGlvbiAoLypGdW5jdGlvbiovY2FsbGJhY2spIHtcclxuICAgICAgdmFyIHRtcCA9IHpsaWIuY3JlYXRlRGVmbGF0ZVJhdyhvcHRzKSwgcGFydHMgPSBbXSwgdG90YWwgPSAwO1xyXG4gICAgICB0bXAub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHBhcnRzLnB1c2goZGF0YSk7XHJcbiAgICAgICAgdG90YWwgKz0gZGF0YS5sZW5ndGg7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0bXAub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKHRvdGFsKSwgd3JpdHRlbiA9IDA7XHJcbiAgICAgICAgYnVmLmZpbGwoMCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcclxuICAgICAgICAgIHBhcnQuY29weShidWYsIHdyaXR0ZW4pO1xyXG4gICAgICAgICAgd3JpdHRlbiArPSBwYXJ0Lmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soYnVmKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRtcC5lbmQoaW5idWYpO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/methods/deflater.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/methods/index.js":
/*!***********************************************!*\
  !*** ./node_modules/adm-zip/methods/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Deflater = __webpack_require__(/*! ./deflater */ \"(ssr)/./node_modules/adm-zip/methods/deflater.js\");\r\nexports.Inflater = __webpack_require__(/*! ./inflater */ \"(ssr)/./node_modules/adm-zip/methods/inflater.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDRHQUF3QztBQUN4Qyw0R0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2FkbS16aXAvbWV0aG9kcy9pbmRleC5qcz9mZTI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuRGVmbGF0ZXIgPSByZXF1aXJlKFwiLi9kZWZsYXRlclwiKTtcclxuZXhwb3J0cy5JbmZsYXRlciA9IHJlcXVpcmUoXCIuL2luZmxhdGVyXCIpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/methods/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/methods/inflater.js":
/*!**************************************************!*\
  !*** ./node_modules/adm-zip/methods/inflater.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = function (/*Buffer*/inbuf) {\r\n\r\n  var zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\n\r\n  return {\r\n    inflate: function () {\r\n      return zlib.inflateRawSync(inbuf);\r\n    },\r\n\r\n    inflateAsync: function (/*Function*/callback) {\r\n      var tmp = zlib.createInflateRaw(), parts = [], total = 0;\r\n      tmp.on('data', function (data) {\r\n        parts.push(data);\r\n        total += data.length;\r\n      });\r\n      tmp.on('end', function () {\r\n        var buf = Buffer.alloc(total), written = 0;\r\n        buf.fill(0);\r\n        for (var i = 0; i < parts.length; i++) {\r\n          var part = parts[i];\r\n          part.copy(buf, written);\r\n          written += part.length;\r\n        }\r\n        callback && callback(buf);\r\n      });\r\n      tmp.end(inbuf);\r\n    }\r\n  }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2luZmxhdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvYWRtLXppcC9tZXRob2RzL2luZmxhdGVyLmpzPzQ0ZTEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLypCdWZmZXIqL2luYnVmKSB7XHJcblxyXG4gIHZhciB6bGliID0gcmVxdWlyZShcInpsaWJcIik7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpbmZsYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiB6bGliLmluZmxhdGVSYXdTeW5jKGluYnVmKTtcclxuICAgIH0sXHJcblxyXG4gICAgaW5mbGF0ZUFzeW5jOiBmdW5jdGlvbiAoLypGdW5jdGlvbiovY2FsbGJhY2spIHtcclxuICAgICAgdmFyIHRtcCA9IHpsaWIuY3JlYXRlSW5mbGF0ZVJhdygpLCBwYXJ0cyA9IFtdLCB0b3RhbCA9IDA7XHJcbiAgICAgIHRtcC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgcGFydHMucHVzaChkYXRhKTtcclxuICAgICAgICB0b3RhbCArPSBkYXRhLmxlbmd0aDtcclxuICAgICAgfSk7XHJcbiAgICAgIHRtcC5vbignZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBidWYgPSBCdWZmZXIuYWxsb2ModG90YWwpLCB3cml0dGVuID0gMDtcclxuICAgICAgICBidWYuZmlsbCgwKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xyXG4gICAgICAgICAgcGFydC5jb3B5KGJ1Ziwgd3JpdHRlbik7XHJcbiAgICAgICAgICB3cml0dGVuICs9IHBhcnQubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhidWYpO1xyXG4gICAgICB9KTtcclxuICAgICAgdG1wLmVuZChpbmJ1Zik7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/methods/inflater.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/util/constants.js":
/*!************************************************!*\
  !*** ./node_modules/adm-zip/util/constants.js ***!
  \************************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    /* The local file header */\r\n    LOCHDR           : 30, // LOC header size\r\n    LOCSIG           : 0x04034b50, // \"PK\\003\\004\"\r\n    LOCVER           : 4,\t// version needed to extract\r\n    LOCFLG           : 6, // general purpose bit flag\r\n    LOCHOW           : 8, // compression method\r\n    LOCTIM           : 10, // modification time (2 bytes time, 2 bytes date)\r\n    LOCCRC           : 14, // uncompressed file crc-32 value\r\n    LOCSIZ           : 18, // compressed size\r\n    LOCLEN           : 22, // uncompressed size\r\n    LOCNAM           : 26, // filename length\r\n    LOCEXT           : 28, // extra field length\r\n\r\n    /* The Data descriptor */\r\n    EXTSIG           : 0x08074b50, // \"PK\\007\\008\"\r\n    EXTHDR           : 16, // EXT header size\r\n    EXTCRC           : 4, // uncompressed file crc-32 value\r\n    EXTSIZ           : 8, // compressed size\r\n    EXTLEN           : 12, // uncompressed size\r\n\r\n    /* The central directory file header */\r\n    CENHDR           : 46, // CEN header size\r\n    CENSIG           : 0x02014b50, // \"PK\\001\\002\"\r\n    CENVEM           : 4, // version made by\r\n    CENVER           : 6, // version needed to extract\r\n    CENFLG           : 8, // encrypt, decrypt flags\r\n    CENHOW           : 10, // compression method\r\n    CENTIM           : 12, // modification time (2 bytes time, 2 bytes date)\r\n    CENCRC           : 16, // uncompressed file crc-32 value\r\n    CENSIZ           : 20, // compressed size\r\n    CENLEN           : 24, // uncompressed size\r\n    CENNAM           : 28, // filename length\r\n    CENEXT           : 30, // extra field length\r\n    CENCOM           : 32, // file comment length\r\n    CENDSK           : 34, // volume number start\r\n    CENATT           : 36, // internal file attributes\r\n    CENATX           : 38, // external file attributes (host system dependent)\r\n    CENOFF           : 42, // LOC header offset\r\n\r\n    /* The entries in the end of central directory */\r\n    ENDHDR           : 22, // END header size\r\n    ENDSIG           : 0x06054b50, // \"PK\\005\\006\"\r\n    ENDSUB           : 8, // number of entries on this disk\r\n    ENDTOT           : 10, // total number of entries\r\n    ENDSIZ           : 12, // central directory size in bytes\r\n    ENDOFF           : 16, // offset of first CEN header\r\n    ENDCOM           : 20, // zip file comment length\r\n\r\n    END64HDR         : 20, // zip64 END header size\r\n    END64SIG         : 0x07064b50, // zip64 Locator signature, \"PK\\006\\007\"\r\n    END64START       : 4, // number of the disk with the start of the zip64\r\n    END64OFF         : 8, // relative offset of the zip64 end of central directory\r\n    END64NUMDISKS    : 16, // total number of disks\r\n\r\n    ZIP64SIG         : 0x06064b50, // zip64 signature, \"PK\\006\\006\"\r\n    ZIP64HDR         : 56, // zip64 record minimum size\r\n    ZIP64LEAD        : 12, // leading bytes at the start of the record, not counted by the value stored in ZIP64SIZE\r\n    ZIP64SIZE        : 4, // zip64 size of the central directory record\r\n    ZIP64VEM         : 12, // zip64 version made by\r\n    ZIP64VER         : 14, // zip64 version needed to extract\r\n    ZIP64DSK         : 16, // zip64 number of this disk\r\n    ZIP64DSKDIR      : 20, // number of the disk with the start of the record directory\r\n    ZIP64SUB         : 24, // number of entries on this disk\r\n    ZIP64TOT         : 32, // total number of entries\r\n    ZIP64SIZB        : 40, // zip64 central directory size in bytes\r\n    ZIP64OFF         : 48, // offset of start of central directory with respect to the starting disk number\r\n    ZIP64EXTRA       : 56, // extensible data sector\r\n\r\n    /* Compression methods */\r\n    STORED           : 0, // no compression\r\n    SHRUNK           : 1, // shrunk\r\n    REDUCED1         : 2, // reduced with compression factor 1\r\n    REDUCED2         : 3, // reduced with compression factor 2\r\n    REDUCED3         : 4, // reduced with compression factor 3\r\n    REDUCED4         : 5, // reduced with compression factor 4\r\n    IMPLODED         : 6, // imploded\r\n    // 7 reserved\r\n    DEFLATED         : 8, // deflated\r\n    ENHANCED_DEFLATED: 9, // enhanced deflated\r\n    PKWARE           : 10,// PKWare DCL imploded\r\n    // 11 reserved\r\n    BZIP2            : 12, //  compressed using BZIP2\r\n    // 13 reserved\r\n    LZMA             : 14, // LZMA\r\n    // 15-17 reserved\r\n    IBM_TERSE        : 18, // compressed using IBM TERSE\r\n    IBM_LZ77         : 19, //IBM LZ77 z\r\n\r\n    /* General purpose bit flag */\r\n    FLG_ENC          : 0,  // encripted file\r\n    FLG_COMP1        : 1,  // compression option\r\n    FLG_COMP2        : 2,  // compression option\r\n    FLG_DESC         : 4,  // data descriptor\r\n    FLG_ENH          : 8,  // enhanced deflation\r\n    FLG_STR          : 16, // strong encryption\r\n    FLG_LNG          : 1024, // language encoding\r\n    FLG_MSK          : 4096, // mask header values\r\n\r\n    /* Load type */\r\n    FILE             : 0,\r\n    BUFFER           : 1,\r\n    NONE             : 2,\r\n\r\n    /* 4.5 Extensible data fields */\r\n    EF_ID            : 0,\r\n    EF_SIZE          : 2,\r\n\r\n    /* Header IDs */\r\n    ID_ZIP64         : 0x0001,\r\n    ID_AVINFO        : 0x0007,\r\n    ID_PFS           : 0x0008,\r\n    ID_OS2           : 0x0009,\r\n    ID_NTFS          : 0x000a,\r\n    ID_OPENVMS       : 0x000c,\r\n    ID_UNIX          : 0x000d,\r\n    ID_FORK          : 0x000e,\r\n    ID_PATCH         : 0x000f,\r\n    ID_X509_PKCS7    : 0x0014,\r\n    ID_X509_CERTID_F : 0x0015,\r\n    ID_X509_CERTID_C : 0x0016,\r\n    ID_STRONGENC     : 0x0017,\r\n    ID_RECORD_MGT    : 0x0018,\r\n    ID_X509_PKCS7_RL : 0x0019,\r\n    ID_IBM1          : 0x0065,\r\n    ID_IBM2          : 0x0066,\r\n    ID_POSZIP        : 0x4690,\r\n\r\n    EF_ZIP64_OR_32   : 0xffffffff,\r\n    EF_ZIP64_OR_16   : 0xffff,\r\n    EF_ZIP64_SUNCOMP : 0,\r\n    EF_ZIP64_SCOMP   : 8,\r\n    EF_ZIP64_RHO     : 16,\r\n    EF_ZIP64_DSN     : 24\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/util/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/util/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/adm-zip/util/errors.js ***!
  \*********************************************/
/***/ ((module) => {

eval("module.exports = {\r\n    /* Header error messages */\r\n    \"INVALID_LOC\" : \"Invalid LOC header (bad signature)\",\r\n    \"INVALID_CEN\" : \"Invalid CEN header (bad signature)\",\r\n    \"INVALID_END\" : \"Invalid END header (bad signature)\",\r\n\r\n    /* ZipEntry error messages*/\r\n    \"NO_DATA\" : \"Nothing to decompress\",\r\n    \"BAD_CRC\" : \"CRC32 checksum failed\",\r\n    \"FILE_IN_THE_WAY\" : \"There is a file in the way: %s\",\r\n    \"UNKNOWN_METHOD\" : \"Invalid/unsupported compression method\",\r\n\r\n    /* Inflater error messages */\r\n    \"AVAIL_DATA\" : \"inflate::Available inflate data did not terminate\",\r\n    \"INVALID_DISTANCE\" : \"inflate::Invalid literal/length or distance code in fixed or dynamic block\",\r\n    \"TO_MANY_CODES\" : \"inflate::Dynamic block code description: too many length or distance codes\",\r\n    \"INVALID_REPEAT_LEN\" : \"inflate::Dynamic block code description: repeat more than specified lengths\",\r\n    \"INVALID_REPEAT_FIRST\" : \"inflate::Dynamic block code description: repeat lengths with no first length\",\r\n    \"INCOMPLETE_CODES\" : \"inflate::Dynamic block code description: code lengths codes incomplete\",\r\n    \"INVALID_DYN_DISTANCE\": \"inflate::Dynamic block code description: invalid distance code lengths\",\r\n    \"INVALID_CODES_LEN\": \"inflate::Dynamic block code description: invalid literal/length code lengths\",\r\n    \"INVALID_STORE_BLOCK\" : \"inflate::Stored block length did not match one's complement\",\r\n    \"INVALID_BLOCK_TYPE\" : \"inflate::Invalid block type (type == 3)\",\r\n\r\n    /* ADM-ZIP error messages */\r\n    \"CANT_EXTRACT_FILE\" : \"Could not extract the file\",\r\n    \"CANT_OVERRIDE\" : \"Target file already exists\",\r\n    \"NO_ZIP\" : \"No zip file was loaded\",\r\n    \"NO_ENTRY\" : \"Entry doesn't exist\",\r\n    \"DIRECTORY_CONTENT_ERROR\" : \"A directory cannot have content\",\r\n    \"FILE_NOT_FOUND\" : \"File not found: %s\",\r\n    \"NOT_IMPLEMENTED\" : \"Not implemented\",\r\n    \"INVALID_FILENAME\" : \"Invalid filename\",\r\n    \"INVALID_FORMAT\" : \"Invalid or unsupported zip format. No END header found\"\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9hZG0temlwL3V0aWwvZXJyb3JzLmpzPzcxMzkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICAvKiBIZWFkZXIgZXJyb3IgbWVzc2FnZXMgKi9cclxuICAgIFwiSU5WQUxJRF9MT0NcIiA6IFwiSW52YWxpZCBMT0MgaGVhZGVyIChiYWQgc2lnbmF0dXJlKVwiLFxyXG4gICAgXCJJTlZBTElEX0NFTlwiIDogXCJJbnZhbGlkIENFTiBoZWFkZXIgKGJhZCBzaWduYXR1cmUpXCIsXHJcbiAgICBcIklOVkFMSURfRU5EXCIgOiBcIkludmFsaWQgRU5EIGhlYWRlciAoYmFkIHNpZ25hdHVyZSlcIixcclxuXHJcbiAgICAvKiBaaXBFbnRyeSBlcnJvciBtZXNzYWdlcyovXHJcbiAgICBcIk5PX0RBVEFcIiA6IFwiTm90aGluZyB0byBkZWNvbXByZXNzXCIsXHJcbiAgICBcIkJBRF9DUkNcIiA6IFwiQ1JDMzIgY2hlY2tzdW0gZmFpbGVkXCIsXHJcbiAgICBcIkZJTEVfSU5fVEhFX1dBWVwiIDogXCJUaGVyZSBpcyBhIGZpbGUgaW4gdGhlIHdheTogJXNcIixcclxuICAgIFwiVU5LTk9XTl9NRVRIT0RcIiA6IFwiSW52YWxpZC91bnN1cHBvcnRlZCBjb21wcmVzc2lvbiBtZXRob2RcIixcclxuXHJcbiAgICAvKiBJbmZsYXRlciBlcnJvciBtZXNzYWdlcyAqL1xyXG4gICAgXCJBVkFJTF9EQVRBXCIgOiBcImluZmxhdGU6OkF2YWlsYWJsZSBpbmZsYXRlIGRhdGEgZGlkIG5vdCB0ZXJtaW5hdGVcIixcclxuICAgIFwiSU5WQUxJRF9ESVNUQU5DRVwiIDogXCJpbmZsYXRlOjpJbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIG9yIGRpc3RhbmNlIGNvZGUgaW4gZml4ZWQgb3IgZHluYW1pYyBibG9ja1wiLFxyXG4gICAgXCJUT19NQU5ZX0NPREVTXCIgOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogdG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIGNvZGVzXCIsXHJcbiAgICBcIklOVkFMSURfUkVQRUFUX0xFTlwiIDogXCJpbmZsYXRlOjpEeW5hbWljIGJsb2NrIGNvZGUgZGVzY3JpcHRpb246IHJlcGVhdCBtb3JlIHRoYW4gc3BlY2lmaWVkIGxlbmd0aHNcIixcclxuICAgIFwiSU5WQUxJRF9SRVBFQVRfRklSU1RcIiA6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiByZXBlYXQgbGVuZ3RocyB3aXRoIG5vIGZpcnN0IGxlbmd0aFwiLFxyXG4gICAgXCJJTkNPTVBMRVRFX0NPREVTXCIgOiBcImluZmxhdGU6OkR5bmFtaWMgYmxvY2sgY29kZSBkZXNjcmlwdGlvbjogY29kZSBsZW5ndGhzIGNvZGVzIGluY29tcGxldGVcIixcclxuICAgIFwiSU5WQUxJRF9EWU5fRElTVEFOQ0VcIjogXCJpbmZsYXRlOjpEeW5hbWljIGJsb2NrIGNvZGUgZGVzY3JpcHRpb246IGludmFsaWQgZGlzdGFuY2UgY29kZSBsZW5ndGhzXCIsXHJcbiAgICBcIklOVkFMSURfQ09ERVNfTEVOXCI6IFwiaW5mbGF0ZTo6RHluYW1pYyBibG9jayBjb2RlIGRlc2NyaXB0aW9uOiBpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGUgbGVuZ3Roc1wiLFxyXG4gICAgXCJJTlZBTElEX1NUT1JFX0JMT0NLXCIgOiBcImluZmxhdGU6OlN0b3JlZCBibG9jayBsZW5ndGggZGlkIG5vdCBtYXRjaCBvbmUncyBjb21wbGVtZW50XCIsXHJcbiAgICBcIklOVkFMSURfQkxPQ0tfVFlQRVwiIDogXCJpbmZsYXRlOjpJbnZhbGlkIGJsb2NrIHR5cGUgKHR5cGUgPT0gMylcIixcclxuXHJcbiAgICAvKiBBRE0tWklQIGVycm9yIG1lc3NhZ2VzICovXHJcbiAgICBcIkNBTlRfRVhUUkFDVF9GSUxFXCIgOiBcIkNvdWxkIG5vdCBleHRyYWN0IHRoZSBmaWxlXCIsXHJcbiAgICBcIkNBTlRfT1ZFUlJJREVcIiA6IFwiVGFyZ2V0IGZpbGUgYWxyZWFkeSBleGlzdHNcIixcclxuICAgIFwiTk9fWklQXCIgOiBcIk5vIHppcCBmaWxlIHdhcyBsb2FkZWRcIixcclxuICAgIFwiTk9fRU5UUllcIiA6IFwiRW50cnkgZG9lc24ndCBleGlzdFwiLFxyXG4gICAgXCJESVJFQ1RPUllfQ09OVEVOVF9FUlJPUlwiIDogXCJBIGRpcmVjdG9yeSBjYW5ub3QgaGF2ZSBjb250ZW50XCIsXHJcbiAgICBcIkZJTEVfTk9UX0ZPVU5EXCIgOiBcIkZpbGUgbm90IGZvdW5kOiAlc1wiLFxyXG4gICAgXCJOT1RfSU1QTEVNRU5URURcIiA6IFwiTm90IGltcGxlbWVudGVkXCIsXHJcbiAgICBcIklOVkFMSURfRklMRU5BTUVcIiA6IFwiSW52YWxpZCBmaWxlbmFtZVwiLFxyXG4gICAgXCJJTlZBTElEX0ZPUk1BVFwiIDogXCJJbnZhbGlkIG9yIHVuc3VwcG9ydGVkIHppcCBmb3JtYXQuIE5vIEVORCBoZWFkZXIgZm91bmRcIlxyXG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/util/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/util/fattr.js":
/*!********************************************!*\
  !*** ./node_modules/adm-zip/util/fattr.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = (__webpack_require__(/*! ./fileSystem */ \"(ssr)/./node_modules/adm-zip/util/fileSystem.js\").require)(),\r\n    pth = __webpack_require__(/*! path */ \"path\");\r\n\t\r\nfs.existsSync = fs.existsSync || pth.existsSync;\r\n\r\nmodule.exports = function(/*String*/path) {\r\n\r\n    var _path = path || \"\",\r\n        _permissions = 0,\r\n        _obj = newAttr(),\r\n        _stat = null;\r\n\r\n    function newAttr() {\r\n        return {\r\n            directory : false,\r\n            readonly : false,\r\n            hidden : false,\r\n            executable : false,\r\n            mtime : 0,\r\n            atime : 0\r\n        }\r\n    }\r\n\r\n    if (_path && fs.existsSync(_path)) {\r\n        _stat = fs.statSync(_path);\r\n        _obj.directory = _stat.isDirectory();\r\n        _obj.mtime = _stat.mtime;\r\n        _obj.atime = _stat.atime;\r\n        _obj.executable = !!(1 & parseInt ((_stat.mode & parseInt (\"777\", 8)).toString (8)[0]));\r\n        _obj.readonly = !!(2 & parseInt ((_stat.mode & parseInt (\"777\", 8)).toString (8)[0]));\r\n        _obj.hidden = pth.basename(_path)[0] === \".\";\r\n    } else {\r\n        console.warn(\"Invalid path: \" + _path)\r\n    }\r\n\r\n    return {\r\n\r\n        get directory () {\r\n            return _obj.directory;\r\n        },\r\n\r\n        get readOnly () {\r\n            return _obj.readonly;\r\n        },\r\n\r\n        get hidden () {\r\n            return _obj.hidden;\r\n        },\r\n\r\n        get mtime () {\r\n            return _obj.mtime;\r\n        },\r\n\r\n        get atime () {\r\n           return _obj.atime;\r\n        },\r\n\r\n\r\n        get executable () {\r\n            return _obj.executable;\r\n        },\r\n\r\n        decodeAttributes : function(val) {\r\n\r\n        },\r\n\r\n        encodeAttributes : function (val) {\r\n\r\n        },\r\n\r\n        toString : function() {\r\n           return '{\\n' +\r\n               '\\t\"path\" : \"' + _path + \",\\n\" +\r\n               '\\t\"isDirectory\" : ' + _obj.directory + \",\\n\" +\r\n               '\\t\"isReadOnly\" : ' + _obj.readonly + \",\\n\" +\r\n               '\\t\"isHidden\" : ' + _obj.hidden + \",\\n\" +\r\n               '\\t\"isExecutable\" : ' + _obj.executable + \",\\n\" +\r\n               '\\t\"mTime\" : ' + _obj.mtime + \"\\n\" +\r\n               '\\t\"aTime\" : ' + _obj.atime + \"\\n\" +\r\n           '}';\r\n        }\r\n    }\r\n\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2ZhdHRyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFNBQVMsb0dBQStCO0FBQ3hDLFVBQVUsbUJBQU8sQ0FBQyxrQkFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9mYXR0ci5qcz9iZmVhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcyA9IHJlcXVpcmUoXCIuL2ZpbGVTeXN0ZW1cIikucmVxdWlyZSgpLFxyXG4gICAgcHRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcblx0XHJcbmZzLmV4aXN0c1N5bmMgPSBmcy5leGlzdHNTeW5jIHx8IHB0aC5leGlzdHNTeW5jO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigvKlN0cmluZyovcGF0aCkge1xyXG5cclxuICAgIHZhciBfcGF0aCA9IHBhdGggfHwgXCJcIixcclxuICAgICAgICBfcGVybWlzc2lvbnMgPSAwLFxyXG4gICAgICAgIF9vYmogPSBuZXdBdHRyKCksXHJcbiAgICAgICAgX3N0YXQgPSBudWxsO1xyXG5cclxuICAgIGZ1bmN0aW9uIG5ld0F0dHIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGlyZWN0b3J5IDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlYWRvbmx5IDogZmFsc2UsXHJcbiAgICAgICAgICAgIGhpZGRlbiA6IGZhbHNlLFxyXG4gICAgICAgICAgICBleGVjdXRhYmxlIDogZmFsc2UsXHJcbiAgICAgICAgICAgIG10aW1lIDogMCxcclxuICAgICAgICAgICAgYXRpbWUgOiAwXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChfcGF0aCAmJiBmcy5leGlzdHNTeW5jKF9wYXRoKSkge1xyXG4gICAgICAgIF9zdGF0ID0gZnMuc3RhdFN5bmMoX3BhdGgpO1xyXG4gICAgICAgIF9vYmouZGlyZWN0b3J5ID0gX3N0YXQuaXNEaXJlY3RvcnkoKTtcclxuICAgICAgICBfb2JqLm10aW1lID0gX3N0YXQubXRpbWU7XHJcbiAgICAgICAgX29iai5hdGltZSA9IF9zdGF0LmF0aW1lO1xyXG4gICAgICAgIF9vYmouZXhlY3V0YWJsZSA9ICEhKDEgJiBwYXJzZUludCAoKF9zdGF0Lm1vZGUgJiBwYXJzZUludCAoXCI3NzdcIiwgOCkpLnRvU3RyaW5nICg4KVswXSkpO1xyXG4gICAgICAgIF9vYmoucmVhZG9ubHkgPSAhISgyICYgcGFyc2VJbnQgKChfc3RhdC5tb2RlICYgcGFyc2VJbnQgKFwiNzc3XCIsIDgpKS50b1N0cmluZyAoOClbMF0pKTtcclxuICAgICAgICBfb2JqLmhpZGRlbiA9IHB0aC5iYXNlbmFtZShfcGF0aClbMF0gPT09IFwiLlwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHBhdGg6IFwiICsgX3BhdGgpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuXHJcbiAgICAgICAgZ2V0IGRpcmVjdG9yeSAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfb2JqLmRpcmVjdG9yeTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgcmVhZE9ubHkgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX29iai5yZWFkb25seTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXQgaGlkZGVuICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9vYmouaGlkZGVuO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBtdGltZSAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfb2JqLm10aW1lO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBhdGltZSAoKSB7XHJcbiAgICAgICAgICAgcmV0dXJuIF9vYmouYXRpbWU7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIGdldCBleGVjdXRhYmxlICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9vYmouZXhlY3V0YWJsZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkZWNvZGVBdHRyaWJ1dGVzIDogZnVuY3Rpb24odmFsKSB7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGVuY29kZUF0dHJpYnV0ZXMgOiBmdW5jdGlvbiAodmFsKSB7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvU3RyaW5nIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgcmV0dXJuICd7XFxuJyArXHJcbiAgICAgICAgICAgICAgICdcXHRcInBhdGhcIiA6IFwiJyArIF9wYXRoICsgXCIsXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAnXFx0XCJpc0RpcmVjdG9yeVwiIDogJyArIF9vYmouZGlyZWN0b3J5ICsgXCIsXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAnXFx0XCJpc1JlYWRPbmx5XCIgOiAnICsgX29iai5yZWFkb25seSArIFwiLFxcblwiICtcclxuICAgICAgICAgICAgICAgJ1xcdFwiaXNIaWRkZW5cIiA6ICcgKyBfb2JqLmhpZGRlbiArIFwiLFxcblwiICtcclxuICAgICAgICAgICAgICAgJ1xcdFwiaXNFeGVjdXRhYmxlXCIgOiAnICsgX29iai5leGVjdXRhYmxlICsgXCIsXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAnXFx0XCJtVGltZVwiIDogJyArIF9vYmoubXRpbWUgKyBcIlxcblwiICtcclxuICAgICAgICAgICAgICAgJ1xcdFwiYVRpbWVcIiA6ICcgKyBfb2JqLmF0aW1lICsgXCJcXG5cIiArXHJcbiAgICAgICAgICAgJ30nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/util/fattr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/util/fileSystem.js":
/*!*************************************************!*\
  !*** ./node_modules/adm-zip/util/fileSystem.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.require = function() {\r\n  var fs = __webpack_require__(/*! fs */ \"fs\");\r\n  if (process.versions['electron']) {\r\n\t  try {\r\n\t    originalFs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'original-fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\r\n\t    if (Object.keys(originalFs).length > 0) {\r\n\t      fs = originalFs;\r\n      }\r\n\t  } catch (e) {}\r\n  }\r\n  return fs\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2ZpbGVTeXN0ZW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQywwSUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9hZG0temlwL3V0aWwvZmlsZVN5c3RlbS5qcz82ZDBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucmVxdWlyZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuICBpZiAocHJvY2Vzcy52ZXJzaW9uc1snZWxlY3Ryb24nXSkge1xyXG5cdCAgdHJ5IHtcclxuXHQgICAgb3JpZ2luYWxGcyA9IHJlcXVpcmUoXCJvcmlnaW5hbC1mc1wiKTtcclxuXHQgICAgaWYgKE9iamVjdC5rZXlzKG9yaWdpbmFsRnMpLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICBmcyA9IG9yaWdpbmFsRnM7XHJcbiAgICAgIH1cclxuXHQgIH0gY2F0Y2ggKGUpIHt9XHJcbiAgfVxyXG4gIHJldHVybiBmc1xyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/util/fileSystem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/util/index.js":
/*!********************************************!*\
  !*** ./node_modules/adm-zip/util/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/adm-zip/util/utils.js\");\r\nmodule.exports.FileSystem = __webpack_require__(/*! ./fileSystem */ \"(ssr)/./node_modules/adm-zip/util/fileSystem.js\");\r\nmodule.exports.Constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/adm-zip/util/constants.js\");\r\nmodule.exports.Errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/adm-zip/util/errors.js\");\r\nmodule.exports.FileAttr = __webpack_require__(/*! ./fattr */ \"(ssr)/./node_modules/adm-zip/util/fattr.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWRtLXppcC91dGlsL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGlHQUFtQztBQUNuQyxzSEFBbUQ7QUFDbkQsbUhBQWlEO0FBQ2pELDBHQUEyQztBQUMzQywwR0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2FkbS16aXAvdXRpbC9pbmRleC5qcz9iNTNmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XHJcbm1vZHVsZS5leHBvcnRzLkZpbGVTeXN0ZW0gPSByZXF1aXJlKFwiLi9maWxlU3lzdGVtXCIpO1xyXG5tb2R1bGUuZXhwb3J0cy5Db25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XHJcbm1vZHVsZS5leHBvcnRzLkVycm9ycyA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcclxubW9kdWxlLmV4cG9ydHMuRmlsZUF0dHIgPSByZXF1aXJlKFwiLi9mYXR0clwiKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/util/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/util/utils.js":
/*!********************************************!*\
  !*** ./node_modules/adm-zip/util/utils.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = (__webpack_require__(/*! ./fileSystem */ \"(ssr)/./node_modules/adm-zip/util/fileSystem.js\").require)(),\r\n    pth = __webpack_require__(/*! path */ \"path\");\r\n\r\nfs.existsSync = fs.existsSync || pth.existsSync;\r\n\r\nmodule.exports = (function() {\r\n\r\n    var crcTable = [],\r\n        Constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/adm-zip/util/constants.js\"),\r\n        Errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/adm-zip/util/errors.js\"),\r\n\r\n        PATH_SEPARATOR = pth.sep;\r\n\r\n\r\n    function mkdirSync(/*String*/path) {\r\n        var resolvedPath = path.split(PATH_SEPARATOR)[0];\r\n        path.split(PATH_SEPARATOR).forEach(function(name) {\r\n            if (!name || name.substr(-1,1) === \":\") return;\r\n            resolvedPath += PATH_SEPARATOR + name;\r\n            var stat;\r\n            try {\r\n                stat = fs.statSync(resolvedPath);\r\n            } catch (e) {\r\n                fs.mkdirSync(resolvedPath);\r\n            }\r\n            if (stat && stat.isFile())\r\n                throw Errors.FILE_IN_THE_WAY.replace(\"%s\", resolvedPath);\r\n        });\r\n    }\r\n\r\n    function findSync(/*String*/dir, /*RegExp*/pattern, /*Boolean*/recoursive) {\r\n        if (typeof pattern === 'boolean') {\r\n            recoursive = pattern;\r\n            pattern = undefined;\r\n        }\r\n        var files = [];\r\n        fs.readdirSync(dir).forEach(function(file) {\r\n            var path = pth.join(dir, file);\r\n\r\n            if (fs.statSync(path).isDirectory() && recoursive)\r\n                files = files.concat(findSync(path, pattern, recoursive));\r\n\r\n            if (!pattern || pattern.test(path)) {\r\n                files.push(pth.normalize(path) + (fs.statSync(path).isDirectory() ? PATH_SEPARATOR : \"\"));\r\n            }\r\n\r\n        });\r\n        return files;\r\n    }\r\n\r\n    function readBigUInt64LE(/*Buffer*/buffer, /*int*/index) {\r\n        var slice = Buffer.from(buffer.slice(index, index + 8));\r\n        slice.swap64();\r\n\r\n        return parseInt(`0x${ slice.toString('hex') }`);\r\n    }\r\n\r\n    return {\r\n        makeDir : function(/*String*/path) {\r\n            mkdirSync(path);\r\n        },\r\n\r\n        crc32 : function(buf) {\r\n            if (typeof buf === 'string') {\r\n                buf = Buffer.alloc(buf.length, buf);\r\n            }\r\n            var b = Buffer.alloc(4);\r\n            if (!crcTable.length) {\r\n                for (var n = 0; n < 256; n++) {\r\n                    var c = n;\r\n                    for (var k = 8; --k >= 0;)  //\r\n                        if ((c & 1) !== 0)  { c = 0xedb88320 ^ (c >>> 1); } else { c = c >>> 1; }\r\n                    if (c < 0) {\r\n                        b.writeInt32LE(c, 0);\r\n                        c = b.readUInt32LE(0);\r\n                    }\r\n                    crcTable[n] = c;\r\n                }\r\n            }\r\n            var crc = 0, off = 0, len = buf.length, c1 = ~crc;\r\n            while(--len >= 0) c1 = crcTable[(c1 ^ buf[off++]) & 0xff] ^ (c1 >>> 8);\r\n            crc = ~c1;\r\n            b.writeInt32LE(crc & 0xffffffff, 0);\r\n            return b.readUInt32LE(0);\r\n        },\r\n\r\n        methodToString : function(/*Number*/method) {\r\n            switch (method) {\r\n                case Constants.STORED:\r\n                    return 'STORED (' + method + ')';\r\n                case Constants.DEFLATED:\r\n                    return 'DEFLATED (' + method + ')';\r\n                default:\r\n                    return 'UNSUPPORTED (' + method + ')';\r\n            }\r\n\r\n        },\r\n\r\n        writeFileTo : function(/*String*/path, /*Buffer*/content, /*Boolean*/overwrite, /*Number*/attr) {\r\n            if (fs.existsSync(path)) {\r\n                if (!overwrite)\r\n                    return false; // cannot overwrite\r\n\r\n                var stat = fs.statSync(path);\r\n                if (stat.isDirectory()) {\r\n                    return false;\r\n                }\r\n            }\r\n            var folder = pth.dirname(path);\r\n            if (!fs.existsSync(folder)) {\r\n                mkdirSync(folder);\r\n            }\r\n\r\n            var fd;\r\n            try {\r\n                fd = fs.openSync(path, 'w', 438); // 0666\r\n            } catch(e) {\r\n                fs.chmodSync(path, 438);\r\n                fd = fs.openSync(path, 'w', 438);\r\n            }\r\n            if (fd) {\r\n                try {\r\n                    fs.writeSync(fd, content, 0, content.length, 0);\r\n                }\r\n                catch (e){\r\n                    throw e;\r\n                }\r\n                finally {\r\n                    fs.closeSync(fd);\r\n                }\r\n            }\r\n            fs.chmodSync(path, attr || 438);\r\n            return true;\r\n        },\r\n\r\n        writeFileToAsync : function(/*String*/path, /*Buffer*/content, /*Boolean*/overwrite, /*Number*/attr, /*Function*/callback) {\r\n            if(typeof attr === 'function') {\r\n                callback = attr;\r\n                attr = undefined;\r\n            }\r\n\r\n            fs.exists(path, function(exists) {\r\n                if(exists && !overwrite)\r\n                    return callback(false);\r\n\r\n                fs.stat(path, function(err, stat) {\r\n                    if(exists &&stat.isDirectory()) {\r\n                        return callback(false);\r\n                    }\r\n\r\n                    var folder = pth.dirname(path);\r\n                    fs.exists(folder, function(exists) {\r\n                        if(!exists)\r\n                            mkdirSync(folder);\r\n\r\n                        fs.open(path, 'w', 438, function(err, fd) {\r\n                            if(err) {\r\n                                fs.chmod(path, 438, function() {\r\n                                    fs.open(path, 'w', 438, function(err, fd) {\r\n                                        fs.write(fd, content, 0, content.length, 0, function() {\r\n                                            fs.close(fd, function() {\r\n                                                fs.chmod(path, attr || 438, function() {\r\n                                                    callback(true);\r\n                                                })\r\n                                            });\r\n                                        });\r\n                                    });\r\n                                })\r\n                            } else {\r\n                                if(fd) {\r\n                                    fs.write(fd, content, 0, content.length, 0, function() {\r\n                                        fs.close(fd, function() {\r\n                                            fs.chmod(path, attr || 438, function() {\r\n                                                callback(true);\r\n                                            })\r\n                                        });\r\n                                    });\r\n                                } else {\r\n                                    fs.chmod(path, attr || 438, function() {\r\n                                        callback(true);\r\n                                    })\r\n                                }\r\n                            }\r\n                        });\r\n                    })\r\n                })\r\n            })\r\n        },\r\n\r\n        findFiles : function(/*String*/path) {\r\n            return findSync(path, true);\r\n        },\r\n\r\n        getAttributes : function(/*String*/path) {\r\n\r\n        },\r\n\r\n        setAttributes : function(/*String*/path) {\r\n\r\n        },\r\n\r\n        toBuffer : function(input) {\r\n            if (Buffer.isBuffer(input)) {\r\n                return input;\r\n            } else {\r\n                if (input.length === 0) {\r\n                    return Buffer.alloc(0)\r\n                }\r\n                return Buffer.from(input, 'utf8');\r\n            }\r\n        },\r\n\r\n        readBigUInt64LE,\r\n\r\n        Constants : Constants,\r\n        Errors : Errors\r\n    }\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/util/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/zipEntry.js":
/*!******************************************!*\
  !*** ./node_modules/adm-zip/zipEntry.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/adm-zip/util/index.js\"),\r\n    Headers = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/adm-zip/headers/index.js\"),\r\n    Constants = Utils.Constants,\r\n    Methods = __webpack_require__(/*! ./methods */ \"(ssr)/./node_modules/adm-zip/methods/index.js\");\r\n\r\nmodule.exports = function (/*Buffer*/input) {\r\n\r\n    var _entryHeader = new Headers.EntryHeader(),\r\n        _entryName = Buffer.alloc(0),\r\n        _comment = Buffer.alloc(0),\r\n        _isDirectory = false,\r\n        uncompressedData = null,\r\n        _extra = Buffer.alloc(0);\r\n\r\n    function getCompressedDataFromZip() {\r\n        if (!input || !Buffer.isBuffer(input)) {\r\n            return Buffer.alloc(0);\r\n        }\r\n        _entryHeader.loadDataHeaderFromBinary(input);\r\n        return input.slice(_entryHeader.realDataOffset, _entryHeader.realDataOffset + _entryHeader.compressedSize)\r\n    }\r\n\r\n    function crc32OK(data) {\r\n        // if bit 3 (0x08) of the general-purpose flags field is set, then the CRC-32 and file sizes are not known when the header is written\r\n        if ((_entryHeader.flags & 0x8) !== 0x8) {\r\n           if (Utils.crc32(data) !== _entryHeader.dataHeader.crc) {\r\n               return false;\r\n           }\r\n        } else {\r\n            // @TODO: load and check data descriptor header\r\n            // The fields in the local header are filled with zero, and the CRC-32 and size are appended in a 12-byte structure\r\n            // (optionally preceded by a 4-byte signature) immediately after the compressed data:\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function decompress(/*Boolean*/async, /*Function*/callback, /*String*/pass) {\r\n        if(typeof callback === 'undefined' && typeof async === 'string') {\r\n            pass=async;\r\n            async=void 0;\r\n        }\r\n        if (_isDirectory) {\r\n            if (async && callback) {\r\n                callback(Buffer.alloc(0), Utils.Errors.DIRECTORY_CONTENT_ERROR); //si added error.\r\n            }\r\n            return Buffer.alloc(0);\r\n        }\r\n\r\n        var compressedData = getCompressedDataFromZip();\r\n\r\n        if (compressedData.length === 0) {\r\n            // File is empty, nothing to decompress.\r\n            if (async && callback) callback(compressedData);\r\n            return compressedData;\r\n        }\r\n\r\n        var data = Buffer.alloc(_entryHeader.size);\r\n\r\n        switch (_entryHeader.method) {\r\n            case Utils.Constants.STORED:\r\n                compressedData.copy(data);\r\n                if (!crc32OK(data)) {\r\n                    if (async && callback) callback(data, Utils.Errors.BAD_CRC);//si added error\r\n                    throw new Error(Utils.Errors.BAD_CRC);\r\n                } else {//si added otherwise did not seem to return data.\r\n                    if (async && callback) callback(data);\r\n                    return data;\r\n                }\r\n            case Utils.Constants.DEFLATED:\r\n                var inflater = new Methods.Inflater(compressedData);\r\n                if (!async) {\r\n                    var result = inflater.inflate(data);\r\n                    result.copy(data, 0);\r\n                    if (!crc32OK(data)) {\r\n                        throw new Error(Utils.Errors.BAD_CRC + \" \" + _entryName.toString());\r\n                    }\r\n                    return data;\r\n                } else {\r\n                    inflater.inflateAsync(function(result) {\r\n                        result.copy(data, 0);\r\n                        if (!crc32OK(data)) {\r\n                            if (callback) callback(data, Utils.Errors.BAD_CRC); //si added error\r\n                        } else { //si added otherwise did not seem to return data.\r\n                            if (callback) callback(data);\r\n                        }\r\n                    })\r\n                }\r\n                break;\r\n            default:\r\n                if (async && callback) callback(Buffer.alloc(0), Utils.Errors.UNKNOWN_METHOD);\r\n                throw new Error(Utils.Errors.UNKNOWN_METHOD);\r\n        }\r\n    }\r\n\r\n    function compress(/*Boolean*/async, /*Function*/callback) {\r\n        if ((!uncompressedData || !uncompressedData.length) && Buffer.isBuffer(input)) {\r\n            // no data set or the data wasn't changed to require recompression\r\n            if (async && callback) callback(getCompressedDataFromZip());\r\n            return getCompressedDataFromZip();\r\n        }\r\n\r\n        if (uncompressedData.length && !_isDirectory) {\r\n            var compressedData;\r\n            // Local file header\r\n            switch (_entryHeader.method) {\r\n                case Utils.Constants.STORED:\r\n                    _entryHeader.compressedSize = _entryHeader.size;\r\n\r\n                    compressedData = Buffer.alloc(uncompressedData.length);\r\n                    uncompressedData.copy(compressedData);\r\n\r\n                    if (async && callback) callback(compressedData);\r\n                    return compressedData;\r\n                default:\r\n                case Utils.Constants.DEFLATED:\r\n\r\n                    var deflater = new Methods.Deflater(uncompressedData);\r\n                    if (!async) {\r\n                        var deflated = deflater.deflate();\r\n                        _entryHeader.compressedSize = deflated.length;\r\n                        return deflated;\r\n                    } else {\r\n                        deflater.deflateAsync(function(data) {\r\n                            compressedData = Buffer.alloc(data.length);\r\n                            _entryHeader.compressedSize = data.length;\r\n                            data.copy(compressedData);\r\n                            callback && callback(compressedData);\r\n                        })\r\n                    }\r\n                    deflater = null;\r\n                    break;\r\n            }\r\n        } else {\r\n            if (async && callback) {\r\n                callback(Buffer.alloc(0));\r\n            } else {\r\n                return Buffer.alloc(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    function readUInt64LE(buffer, offset) {\r\n        return (buffer.readUInt32LE(offset + 4) << 4) + buffer.readUInt32LE(offset);\r\n    }\r\n\r\n    function parseExtra(data) {\r\n        var offset = 0;\r\n        var signature, size, part;\r\n        while(offset<data.length) {\r\n            signature = data.readUInt16LE(offset);\r\n            offset += 2;\r\n            size = data.readUInt16LE(offset);\r\n            offset += 2;\r\n            part = data.slice(offset, offset+size);\r\n            offset += size;\r\n            if(Constants.ID_ZIP64 === signature) {\r\n                parseZip64ExtendedInformation(part);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Override header field values with values from the ZIP64 extra field\r\n    function parseZip64ExtendedInformation(data) {\r\n        var size, compressedSize, offset, diskNumStart;\r\n\r\n        if(data.length >= Constants.EF_ZIP64_SCOMP) {\r\n            size = readUInt64LE(data, Constants.EF_ZIP64_SUNCOMP);\r\n            if(_entryHeader.size === Constants.EF_ZIP64_OR_32) {\r\n                _entryHeader.size = size;\r\n            }\r\n        }\r\n        if(data.length >= Constants.EF_ZIP64_RHO) {\r\n            compressedSize = readUInt64LE(data, Constants.EF_ZIP64_SCOMP);\r\n            if(_entryHeader.compressedSize === Constants.EF_ZIP64_OR_32) {\r\n                _entryHeader.compressedSize = compressedSize;\r\n            }\r\n        }\r\n        if(data.length >= Constants.EF_ZIP64_DSN) {\r\n            offset = readUInt64LE(data, Constants.EF_ZIP64_RHO);\r\n            if(_entryHeader.offset === Constants.EF_ZIP64_OR_32) {\r\n                _entryHeader.offset = offset;\r\n            }\r\n        }\r\n        if(data.length >= Constants.EF_ZIP64_DSN+4) {\r\n            diskNumStart = data.readUInt32LE(Constants.EF_ZIP64_DSN);\r\n            if(_entryHeader.diskNumStart === Constants.EF_ZIP64_OR_16) {\r\n                _entryHeader.diskNumStart = diskNumStart;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n        get entryName () { return _entryName.toString(); },\r\n        get rawEntryName() { return _entryName; },\r\n        set entryName (val) {\r\n            _entryName = Utils.toBuffer(val);\r\n            var lastChar = _entryName[_entryName.length - 1];\r\n            _isDirectory = (lastChar === 47) || (lastChar === 92);\r\n            _entryHeader.fileNameLength = _entryName.length;\r\n        },\r\n\r\n        get extra () { return _extra; },\r\n        set extra (val) {\r\n            _extra = val;\r\n            _entryHeader.extraLength = val.length;\r\n            parseExtra(val);\r\n        },\r\n\r\n        get comment () { return _comment.toString(); },\r\n        set comment (val) {\r\n            _comment = Utils.toBuffer(val);\r\n            _entryHeader.commentLength = _comment.length;\r\n        },\r\n\r\n        get name () { var n = _entryName.toString(); return _isDirectory ? n.substr(n.length - 1).split(\"/\").pop() : n.split(\"/\").pop(); },\r\n        get isDirectory () { return _isDirectory },\r\n\r\n        getCompressedData : function() {\r\n            return compress(false, null)\r\n        },\r\n\r\n        getCompressedDataAsync : function(/*Function*/callback) {\r\n            compress(true, callback)\r\n        },\r\n\r\n        setData : function(value) {\r\n            uncompressedData = Utils.toBuffer(value);\r\n            if (!_isDirectory && uncompressedData.length) {\r\n                _entryHeader.size = uncompressedData.length;\r\n                _entryHeader.method = Utils.Constants.DEFLATED;\r\n                _entryHeader.crc = Utils.crc32(value);\r\n                _entryHeader.changed = true;\r\n            } else { // folders and blank files should be stored\r\n                _entryHeader.method = Utils.Constants.STORED;\r\n            }\r\n        },\r\n\r\n        getData : function(pass) {\r\n            if (_entryHeader.changed) {\r\n\t\t\t\treturn uncompressedData;\r\n\t\t\t} else {\r\n\t\t\t\treturn decompress(false, null, pass);\r\n            }\r\n        },\r\n\r\n        getDataAsync : function(/*Function*/callback, pass) {\r\n\t\t\tif (_entryHeader.changed) {\r\n\t\t\t\tcallback(uncompressedData)\r\n\t\t\t} else {\r\n\t\t\t\tdecompress(true, callback, pass)\r\n            }\r\n        },\r\n\r\n        set attr(attr) { _entryHeader.attr = attr; },\r\n        get attr() { return _entryHeader.attr; },\r\n\r\n        set header(/*Buffer*/data) {\r\n            _entryHeader.loadFromBinary(data);\r\n        },\r\n\r\n        get header() {\r\n            return _entryHeader;\r\n        },\r\n\r\n        packHeader : function() {\r\n            var header = _entryHeader.entryHeaderToBinary();\r\n            // add\r\n            _entryName.copy(header, Utils.Constants.CENHDR);\r\n            if (_entryHeader.extraLength) {\r\n                _extra.copy(header, Utils.Constants.CENHDR + _entryName.length)\r\n            }\r\n            if (_entryHeader.commentLength) {\r\n                _comment.copy(header, Utils.Constants.CENHDR + _entryName.length + _entryHeader.extraLength, _comment.length);\r\n            }\r\n            return header;\r\n        },\r\n\r\n        toString : function() {\r\n            return '{\\n' +\r\n                '\\t\"entryName\" : \"' + _entryName.toString() + \"\\\",\\n\" +\r\n                '\\t\"name\" : \"' + (_isDirectory ? _entryName.toString().replace(/\\/$/, '').split(\"/\").pop() : _entryName.toString().split(\"/\").pop()) + \"\\\",\\n\" +\r\n                '\\t\"comment\" : \"' + _comment.toString() + \"\\\",\\n\" +\r\n                '\\t\"isDirectory\" : ' + _isDirectory + \",\\n\" +\r\n                '\\t\"header\" : ' + _entryHeader.toString().replace(/\\t/mg, \"\\t\\t\").replace(/}/mg, \"\\t}\")  + \",\\n\" +\r\n                '\\t\"compressedData\" : <' + (input && input.length  + \" bytes buffer\" || \"null\") + \">\\n\" +\r\n                '\\t\"data\" : <' + (uncompressedData && uncompressedData.length  + \" bytes buffer\" || \"null\") + \">\\n\" +\r\n                '}';\r\n        }\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/zipEntry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/adm-zip/zipFile.js":
/*!*****************************************!*\
  !*** ./node_modules/adm-zip/zipFile.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var ZipEntry = __webpack_require__(/*! ./zipEntry */ \"(ssr)/./node_modules/adm-zip/zipEntry.js\"),\r\n\tHeaders = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/adm-zip/headers/index.js\"),\r\n\tUtils = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/adm-zip/util/index.js\");\r\n\r\nmodule.exports = function (/*String|Buffer*/input, /*Number*/inputType) {\r\n\tvar entryList = [],\r\n\t\tentryTable = {},\r\n\t\t_comment = Buffer.alloc(0),\r\n\t\tfilename = \"\",\r\n\t\tfs = Utils.FileSystem.require(),\r\n\t\tinBuffer = null,\r\n\t\tmainHeader = new Headers.MainHeader(),\r\n\t\tloadedEntries = false;\r\n\r\n\tif (inputType === Utils.Constants.FILE) {\r\n\t\t// is a filename\r\n\t\tfilename = input;\r\n\t\tinBuffer = fs.readFileSync(filename);\r\n\t\treadMainHeader();\r\n\t} else if (inputType === Utils.Constants.BUFFER) {\r\n\t\t// is a memory buffer\r\n\t\tinBuffer = input;\r\n\t\treadMainHeader();\r\n\t} else {\r\n\t\t// none. is a new file\r\n\t\tloadedEntries = true;\r\n\t}\r\n\r\n\tfunction iterateEntries(callback) {\r\n\t\tconst totalEntries = mainHeader.diskEntries; // total number of entries\r\n\t\tlet index = mainHeader.offset; // offset of first CEN header\r\n\r\n\t\tfor (let i = 0; i < totalEntries; i++) {\r\n\t\t\tlet tmp = index;\r\n\t\t\tconst entry = new ZipEntry(inBuffer);\r\n\r\n\t\t\tentry.header = inBuffer.slice(tmp, tmp += Utils.Constants.CENHDR);\r\n\t\t\tentry.entryName = inBuffer.slice(tmp, tmp += entry.header.fileNameLength);\r\n\r\n\t\t\tindex += entry.header.entryHeaderSize;\r\n\r\n\t\t\tcallback(entry);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction readEntries() {\r\n\t\tloadedEntries = true;\r\n\t\tentryTable = {};\r\n\t\tentryList = new Array(mainHeader.diskEntries);  // total number of entries\r\n\t\tvar index = mainHeader.offset;  // offset of first CEN header\r\n\t\tfor (var i = 0; i < entryList.length; i++) {\r\n\r\n\t\t\tvar tmp = index,\r\n\t\t\t\tentry = new ZipEntry(inBuffer);\r\n\t\t\tentry.header = inBuffer.slice(tmp, tmp += Utils.Constants.CENHDR);\r\n\r\n\t\t\tentry.entryName = inBuffer.slice(tmp, tmp += entry.header.fileNameLength);\r\n\r\n\t\t\tif (entry.header.extraLength) {\r\n\t\t\t\tentry.extra = inBuffer.slice(tmp, tmp += entry.header.extraLength);\r\n\t\t\t}\r\n\r\n\t\t\tif (entry.header.commentLength)\r\n\t\t\t\tentry.comment = inBuffer.slice(tmp, tmp + entry.header.commentLength);\r\n\r\n\t\t\tindex += entry.header.entryHeaderSize;\r\n\r\n\t\t\tentryList[i] = entry;\r\n\t\t\tentryTable[entry.entryName] = entry;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction readMainHeader() {\r\n\t\tvar i = inBuffer.length - Utils.Constants.ENDHDR, // END header size\r\n\t\t\tmax = Math.max(0, i - 0xFFFF), // 0xFFFF is the max zip file comment length\r\n\t\t\tn = max,\r\n\t\t\tendStart = inBuffer.length,\r\n\t\t\tendOffset = -1, // Start offset of the END header\r\n\t\t\tcommentEnd = 0;\r\n\r\n\t\tfor (i; i >= n; i--) {\r\n\t\t\tif (inBuffer[i] !== 0x50) continue; // quick check that the byte is 'P'\r\n\t\t\tif (inBuffer.readUInt32LE(i) === Utils.Constants.ENDSIG) { // \"PK\\005\\006\"\r\n\t\t\t\tendOffset = i;\r\n\t\t\t\tcommentEnd = i;\r\n\t\t\t\tendStart = i + Utils.Constants.ENDHDR;\r\n\t\t\t\t// We already found a regular signature, let's look just a bit further to check if there's any zip64 signature\r\n\t\t\t\tn = i - Utils.Constants.END64HDR;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (inBuffer.readUInt32LE(i) === Utils.Constants.END64SIG) {\r\n\t\t\t\t// Found a zip64 signature, let's continue reading the whole zip64 record\r\n\t\t\t\tn = max;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (inBuffer.readUInt32LE(i) == Utils.Constants.ZIP64SIG) {\r\n\t\t\t\t// Found the zip64 record, let's determine it's size\r\n\t\t\t\tendOffset = i;\r\n\t\t\t\tendStart = i + Utils.readBigUInt64LE(inBuffer, i + Utils.Constants.ZIP64SIZE) + Utils.Constants.ZIP64LEAD;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!~endOffset)\r\n\t\t\tthrow new Error(Utils.Errors.INVALID_FORMAT);\r\n\r\n\t\tmainHeader.loadFromBinary(inBuffer.slice(endOffset, endStart));\r\n\t\tif (mainHeader.commentLength) {\r\n\t\t\t_comment = inBuffer.slice(commentEnd + Utils.Constants.ENDHDR);\r\n\t\t}\r\n\t\t// readEntries();\r\n\t}\r\n\r\n\treturn {\r\n\t\t/**\r\n\t\t * Returns an array of ZipEntry objects existent in the current opened archive\r\n\t\t * @return Array\r\n\t\t */\r\n\t\tget entries() {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treadEntries();\r\n\t\t\t}\r\n\t\t\treturn entryList;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Archive comment\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget comment() {\r\n\t\t\treturn _comment.toString();\r\n\t\t},\r\n\t\tset comment(val) {\r\n\t\t\tmainHeader.commentLength = val.length;\r\n\t\t\t_comment = val;\r\n\t\t},\r\n\r\n\t\tgetEntryCount: function() {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treturn mainHeader.diskEntries;\r\n\t\t\t}\r\n\r\n\t\t\treturn entryList.length;\r\n\t\t},\r\n\r\n\t\tforEach: function(callback) {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\titerateEntries(callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tentryList.forEach(callback);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a reference to the entry with the given name or null if entry is inexistent\r\n\t\t *\r\n\t\t * @param entryName\r\n\t\t * @return ZipEntry\r\n\t\t */\r\n\t\tgetEntry: function (/*String*/entryName) {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treadEntries();\r\n\t\t\t}\r\n\t\t\treturn entryTable[entryName] || null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Adds the given entry to the entry list\r\n\t\t *\r\n\t\t * @param entry\r\n\t\t */\r\n\t\tsetEntry: function (/*ZipEntry*/entry) {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treadEntries();\r\n\t\t\t}\r\n\t\t\tentryList.push(entry);\r\n\t\t\tentryTable[entry.entryName] = entry;\r\n\t\t\tmainHeader.totalEntries = entryList.length;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Removes the entry with the given name from the entry list.\r\n\t\t *\r\n\t\t * If the entry is a directory, then all nested files and directories will be removed\r\n\t\t * @param entryName\r\n\t\t */\r\n\t\tdeleteEntry: function (/*String*/entryName) {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treadEntries();\r\n\t\t\t}\r\n\t\t\tvar entry = entryTable[entryName];\r\n\t\t\tif (entry && entry.isDirectory) {\r\n\t\t\t\tvar _self = this;\r\n\t\t\t\tthis.getEntryChildren(entry).forEach(function (child) {\r\n\t\t\t\t\tif (child.entryName !== entryName) {\r\n\t\t\t\t\t\t_self.deleteEntry(child.entryName)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tentryList.splice(entryList.indexOf(entry), 1);\r\n\t\t\tdelete(entryTable[entryName]);\r\n\t\t\tmainHeader.totalEntries = entryList.length;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t *  Iterates and returns all nested files and directories of the given entry\r\n\t\t *\r\n\t\t * @param entry\r\n\t\t * @return Array\r\n\t\t */\r\n\t\tgetEntryChildren: function (/*ZipEntry*/entry) {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treadEntries();\r\n\t\t\t}\r\n\t\t\tif (entry.isDirectory) {\r\n\t\t\t\tvar list = [],\r\n\t\t\t\t\tname = entry.entryName,\r\n\t\t\t\t\tlen = name.length;\r\n\r\n\t\t\t\tentryList.forEach(function (zipEntry) {\r\n\t\t\t\t\tif (zipEntry.entryName.substr(0, len) === name) {\r\n\t\t\t\t\t\tlist.push(zipEntry);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn list;\r\n\t\t\t}\r\n\t\t\treturn []\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns the zip file\r\n\t\t *\r\n\t\t * @return Buffer\r\n\t\t */\r\n\t\tcompressToBuffer: function () {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treadEntries();\r\n\t\t\t}\r\n\t\t\tif (entryList.length > 1) {\r\n\t\t\t\tentryList.sort(function (a, b) {\r\n\t\t\t\t\tvar nameA = a.entryName.toLowerCase();\r\n\t\t\t\t\tvar nameB = b.entryName.toLowerCase();\r\n\t\t\t\t\tif (nameA < nameB) {\r\n\t\t\t\t\t\treturn -1\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (nameA > nameB) {\r\n\t\t\t\t\t\treturn 1\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tvar totalSize = 0,\r\n\t\t\t\tdataBlock = [],\r\n\t\t\t\tentryHeaders = [],\r\n\t\t\t\tdindex = 0;\r\n\r\n\t\t\tmainHeader.size = 0;\r\n\t\t\tmainHeader.offset = 0;\r\n\r\n\t\t\tentryList.forEach(function (entry) {\r\n\t\t\t\t// compress data and set local and entry header accordingly. Reason why is called first\r\n\t\t\t\tvar compressedData = entry.getCompressedData();\r\n\t\t\t\t// data header\r\n\t\t\t\tentry.header.offset = dindex;\r\n\t\t\t\tvar dataHeader = entry.header.dataHeaderToBinary();\r\n\t\t\t\tvar entryNameLen = entry.rawEntryName.length;\r\n\t\t\t\tvar extra = entry.extra.toString();\r\n\t\t\t\tvar postHeader = Buffer.alloc(entryNameLen + extra.length);\r\n\t\t\t\tentry.rawEntryName.copy(postHeader, 0);\r\n\t\t\t\tpostHeader.fill(extra, entryNameLen);\r\n\r\n\t\t\t\tvar dataLength = dataHeader.length + postHeader.length + compressedData.length;\r\n\r\n\t\t\t\tdindex += dataLength;\r\n\r\n\t\t\t\tdataBlock.push(dataHeader);\r\n\t\t\t\tdataBlock.push(postHeader);\r\n\t\t\t\tdataBlock.push(compressedData);\r\n\r\n\t\t\t\tvar entryHeader = entry.packHeader();\r\n\t\t\t\tentryHeaders.push(entryHeader);\r\n\t\t\t\tmainHeader.size += entryHeader.length;\r\n\t\t\t\ttotalSize += (dataLength + entryHeader.length);\r\n\t\t\t});\r\n\r\n\t\t\ttotalSize += mainHeader.mainHeaderSize; // also includes zip file comment length\r\n\t\t\t// point to end of data and beginning of central directory first record\r\n\t\t\tmainHeader.offset = dindex;\r\n\r\n\t\t\tdindex = 0;\r\n\t\t\tvar outBuffer = Buffer.alloc(totalSize);\r\n\t\t\tdataBlock.forEach(function (content) {\r\n\t\t\t\tcontent.copy(outBuffer, dindex); // write data blocks\r\n\t\t\t\tdindex += content.length;\r\n\t\t\t});\r\n\t\t\tentryHeaders.forEach(function (content) {\r\n\t\t\t\tcontent.copy(outBuffer, dindex); // write central directory entries\r\n\t\t\t\tdindex += content.length;\r\n\t\t\t});\r\n\r\n\t\t\tvar mh = mainHeader.toBinary();\r\n\t\t\tif (_comment) {\r\n\t\t\t\tBuffer.from(_comment).copy(mh, Utils.Constants.ENDHDR); // add zip file comment\r\n\t\t\t}\r\n\r\n\t\t\tmh.copy(outBuffer, dindex); // write main header\r\n\r\n\t\t\treturn outBuffer\r\n\t\t},\r\n\r\n\t\ttoAsyncBuffer: function (/*Function*/onSuccess, /*Function*/onFail, /*Function*/onItemStart, /*Function*/onItemEnd) {\r\n\t\t\tif (!loadedEntries) {\r\n\t\t\t\treadEntries();\r\n\t\t\t}\r\n\t\t\tif (entryList.length > 1) {\r\n\t\t\t\tentryList.sort(function (a, b) {\r\n\t\t\t\t\tvar nameA = a.entryName.toLowerCase();\r\n\t\t\t\t\tvar nameB = b.entryName.toLowerCase();\r\n\t\t\t\t\tif (nameA > nameB) {\r\n\t\t\t\t\t\treturn -1\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (nameA < nameB) {\r\n\t\t\t\t\t\treturn 1\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tvar totalSize = 0,\r\n\t\t\t\tdataBlock = [],\r\n\t\t\t\tentryHeaders = [],\r\n\t\t\t\tdindex = 0;\r\n\r\n\t\t\tmainHeader.size = 0;\r\n\t\t\tmainHeader.offset = 0;\r\n\r\n\t\t\tvar compress = function (entryList) {\r\n\t\t\t\tvar self = arguments.callee;\r\n\t\t\t\tif (entryList.length) {\r\n\t\t\t\t\tvar entry = entryList.pop();\r\n\t\t\t\t\tvar name = entry.entryName + entry.extra.toString();\r\n\t\t\t\t\tif (onItemStart) onItemStart(name);\r\n\t\t\t\t\tentry.getCompressedDataAsync(function (compressedData) {\r\n\t\t\t\t\t\tif (onItemEnd) onItemEnd(name);\r\n\r\n\t\t\t\t\t\tentry.header.offset = dindex;\r\n\t\t\t\t\t\t// data header\r\n\t\t\t\t\t\tvar dataHeader = entry.header.dataHeaderToBinary();\r\n\t\t\t\t\t\tvar postHeader;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tpostHeader = Buffer.alloc(name.length, name);  // using alloc will work on node  5.x+\r\n\t\t\t\t\t\t} catch(e){\r\n\t\t\t\t\t\t\tpostHeader = new Buffer(name); // use deprecated method if alloc fails...\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar dataLength = dataHeader.length + postHeader.length + compressedData.length;\r\n\r\n\t\t\t\t\t\tdindex += dataLength;\r\n\r\n\t\t\t\t\t\tdataBlock.push(dataHeader);\r\n\t\t\t\t\t\tdataBlock.push(postHeader);\r\n\t\t\t\t\t\tdataBlock.push(compressedData);\r\n\r\n\t\t\t\t\t\tvar entryHeader = entry.packHeader();\r\n\t\t\t\t\t\tentryHeaders.push(entryHeader);\r\n\t\t\t\t\t\tmainHeader.size += entryHeader.length;\r\n\t\t\t\t\t\ttotalSize += (dataLength + entryHeader.length);\r\n\r\n\t\t\t\t\t\tif (entryList.length) {\r\n\t\t\t\t\t\t\tself(entryList);\r\n\t\t\t\t\t\t} else {\r\n\r\n\r\n\t\t\t\t\t\t\ttotalSize += mainHeader.mainHeaderSize; // also includes zip file comment length\r\n\t\t\t\t\t\t\t// point to end of data and beginning of central directory first record\r\n\t\t\t\t\t\t\tmainHeader.offset = dindex;\r\n\r\n\t\t\t\t\t\t\tdindex = 0;\r\n\t\t\t\t\t\t\tvar outBuffer = Buffer.alloc(totalSize);\r\n\t\t\t\t\t\t\tdataBlock.forEach(function (content) {\r\n\t\t\t\t\t\t\t\tcontent.copy(outBuffer, dindex); // write data blocks\r\n\t\t\t\t\t\t\t\tdindex += content.length;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tentryHeaders.forEach(function (content) {\r\n\t\t\t\t\t\t\t\tcontent.copy(outBuffer, dindex); // write central directory entries\r\n\t\t\t\t\t\t\t\tdindex += content.length;\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tvar mh = mainHeader.toBinary();\r\n\t\t\t\t\t\t\tif (_comment) {\r\n\t\t\t\t\t\t\t\t_comment.copy(mh, Utils.Constants.ENDHDR); // add zip file comment\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tmh.copy(outBuffer, dindex); // write main header\r\n\r\n\t\t\t\t\t\t\tonSuccess(outBuffer);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tcompress(entryList);\r\n\t\t}\r\n\t}\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/adm-zip/zipFile.js\n");

/***/ })

};
;