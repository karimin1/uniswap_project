"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hardhat-gas-reporter";
exports.ids = ["vendor-chunks/hardhat-gas-reporter"];
exports.modules = {

/***/ "(ssr)/./node_modules/hardhat-gas-reporter/dist/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/hardhat-gas-reporter/dist/src/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst task_names_1 = __webpack_require__(/*! hardhat/builtin-tasks/task-names */ \"(ssr)/./node_modules/hardhat/builtin-tasks/task-names.js\");\nconst config_1 = __webpack_require__(/*! hardhat/config */ \"(ssr)/./node_modules/hardhat/config.js\");\nconst plugins_1 = __webpack_require__(/*! hardhat/plugins */ \"(ssr)/./node_modules/hardhat/plugins.js\");\n__webpack_require__(/*! ./type-extensions */ \"(ssr)/./node_modules/hardhat-gas-reporter/dist/src/type-extensions.js\");\nconst task_names_2 = __webpack_require__(/*! ./task-names */ \"(ssr)/./node_modules/hardhat-gas-reporter/dist/src/task-names.js\");\nconst merge_reports_1 = __webpack_require__(/*! ./merge-reports */ \"(ssr)/./node_modules/hardhat-gas-reporter/dist/src/merge-reports.js\");\nlet mochaConfig;\nlet resolvedQualifiedNames;\nlet resolvedRemoteContracts = [];\n/**\n * Filters out contracts to exclude from report\n * @param  {string}   qualifiedName HRE artifact identifier\n * @param  {string[]} skippable      excludeContracts option values\n * @return {boolean}\n */\nfunction shouldSkipContract(qualifiedName, skippable) {\n    for (const item of skippable) {\n        if (qualifiedName.includes(item))\n            return true;\n    }\n    return false;\n}\n/**\n * Method passed to eth-gas-reporter to resolve artifact resources. Loads\n * and processes JSON artifacts\n * @param  {HardhatRuntimeEnvironment} hre.artifacts\n * @param  {String[]}                  skippable    contract *not* to track\n * @return {object[]}                  objects w/ abi and bytecode\n */\nfunction getContracts(artifacts, skippable = []) {\n    const contracts = [];\n    for (const qualifiedName of resolvedQualifiedNames) {\n        if (shouldSkipContract(qualifiedName, skippable)) {\n            continue;\n        }\n        let name;\n        let artifact = artifacts.readArtifactSync(qualifiedName);\n        // Prefer simple names\n        try {\n            artifact = artifacts.readArtifactSync(artifact.contractName);\n            name = artifact.contractName;\n        }\n        catch (e) {\n            name = qualifiedName;\n        }\n        contracts.push({\n            name: name,\n            artifact: {\n                abi: artifact.abi,\n                bytecode: artifact.bytecode,\n                deployedBytecode: artifact.deployedBytecode\n            }\n        });\n    }\n    for (const remoteContract of resolvedRemoteContracts) {\n        contracts.push({\n            name: remoteContract.name,\n            artifact: {\n                abi: remoteContract.abi,\n                bytecode: remoteContract.bytecode,\n                bytecodeHash: remoteContract.bytecodeHash,\n                deployedBytecode: remoteContract.deployedBytecode\n            }\n        });\n    }\n    return contracts;\n}\n/**\n * Sets reporter options to pass to eth-gas-reporter:\n * > url to connect to client with\n * > artifact format (hardhat)\n * > solc compiler info\n * @param  {HardhatRuntimeEnvironment} hre\n * @return {EthGasReporterConfig}\n */\nfunction getDefaultOptions(hre) {\n    const defaultUrl = \"http://localhost:8545\";\n    const defaultCompiler = hre.config.solidity.compilers[0];\n    let url;\n    // Resolve URL\n    if (hre.network.config.url) {\n        url = hre.network.config.url;\n    }\n    else {\n        url = defaultUrl;\n    }\n    return {\n        enabled: true,\n        url: url,\n        metadata: {\n            compiler: {\n                version: defaultCompiler.version\n            },\n            settings: {\n                optimizer: {\n                    enabled: defaultCompiler.settings.optimizer.enabled,\n                    runs: defaultCompiler.settings.optimizer.runs\n                }\n            }\n        }\n    };\n}\n/**\n * Merges GasReporter defaults with user's GasReporter config\n * @param  {HardhatRuntimeEnvironment} hre\n * @return {any}\n */\nfunction getOptions(hre) {\n    return Object.assign(Object.assign({}, getDefaultOptions(hre)), hre.config.gasReporter);\n}\n/**\n * Fetches remote bytecode at address and hashes it so these addresses can be\n * added to the tracking at eth-gas-reporter synchronously on init.\n * @param  {EGRAsyncApiProvider}   provider\n * @param  {RemoteContract[] = []} remoteContracts\n * @return {Promise<RemoteContract[]>}\n */\nasync function getResolvedRemoteContracts(provider, remoteContracts = []) {\n    const { default: sha1 } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! sha1 */ \"(ssr)/./node_modules/sha1/sha1.js\")));\n    for (const contract of remoteContracts) {\n        let code;\n        try {\n            contract.bytecode = await provider.getCode(contract.address);\n            contract.deployedBytecode = contract.bytecode;\n            contract.bytecodeHash = sha1(contract.bytecode);\n        }\n        catch (error) {\n            console.log(`Warning: failed to fetch bytecode for remote contract: ${contract.name}`);\n            console.log(`Error was: ${error}\\n`);\n        }\n    }\n    return remoteContracts;\n}\n/**\n * Overrides TASK_TEST_RUN_MOCHA_TEST to (conditionally) use eth-gas-reporter as\n * the mocha test reporter and passes mocha relevant options. These are listed\n * on the `gasReporter` of the user's config.\n */\n(0, config_1.subtask)(task_names_1.TASK_TEST_RUN_MOCHA_TESTS).setAction(async (args, hre, runSuper) => {\n    let options = getOptions(hre);\n    options.getContracts = getContracts.bind(null, hre.artifacts, options.excludeContracts);\n    if (options.enabled) {\n        // Temporarily skipping when in parallel mode because it crashes and unsure how to resolve...\n        if (args.parallel === true) {\n            const result = await runSuper();\n            console.log(\"Note: Gas reporting has been skipped because plugin `hardhat-gas-reporter` does not support \" +\n                \"the --parallel flag.\");\n            return result;\n        }\n        const { parseSoliditySources, setGasAndPriceRates } = __webpack_require__(/*! eth-gas-reporter/lib/utils */ \"(ssr)/./node_modules/eth-gas-reporter/lib/utils.js\");\n        const InternalReporterConfig = __webpack_require__(/*! eth-gas-reporter/lib/config */ \"(ssr)/./node_modules/eth-gas-reporter/lib/config.js\");\n        // Fetch data from gas and coin price providers\n        const originalOptions = options;\n        options = new InternalReporterConfig(originalOptions);\n        await setGasAndPriceRates(options);\n        mochaConfig = hre.config.mocha || {};\n        mochaConfig.reporter = \"eth-gas-reporter\";\n        mochaConfig.reporterOptions = options;\n        if (hre.network.name === plugins_1.HARDHAT_NETWORK_NAME || options.fast) {\n            const { BackwardsCompatibilityProviderAdapter } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! hardhat/internal/core/providers/backwards-compatibility */ \"(ssr)/./node_modules/hardhat/internal/core/providers/backwards-compatibility.js\")));\n            const { EGRDataCollectionProvider, EGRAsyncApiProvider } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./providers */ \"(ssr)/./node_modules/hardhat-gas-reporter/dist/src/providers.js\")));\n            const wrappedDataProvider = new EGRDataCollectionProvider(hre.network.provider, mochaConfig);\n            hre.network.provider = new BackwardsCompatibilityProviderAdapter(wrappedDataProvider);\n            const asyncProvider = new EGRAsyncApiProvider(hre.network.provider);\n            resolvedRemoteContracts = await getResolvedRemoteContracts(asyncProvider, originalOptions.remoteContracts);\n            mochaConfig.reporterOptions.provider = asyncProvider;\n            mochaConfig.reporterOptions.blockLimit = hre.network.config.blockGasLimit;\n            mochaConfig.attachments = {};\n        }\n        hre.config.mocha = mochaConfig;\n        resolvedQualifiedNames = await hre.artifacts.getAllFullyQualifiedNames();\n    }\n    return runSuper();\n});\n(0, config_1.subtask)(task_names_2.TASK_GAS_REPORTER_MERGE_REPORTS)\n    .addOptionalVariadicPositionalParam(\"inputFiles\", \"Path of several gasReporterOutput.json files to merge\", [])\n    .setAction(async ({ inputFiles }) => {\n    const reports = inputFiles.map((input) => JSON.parse(fs_1.default.readFileSync(input, \"utf-8\")));\n    return (0, merge_reports_1.mergeReports)(reports);\n});\n/**\n * Task for merging multiple gasReporterOutput.json files generated by eth-gas-reporter\n * This task is necessary when we want to generate different parts of the reports\n * parallelized on different jobs, then merge the results and upload it to codechecks.\n * Gas Report JSON file schema: https://github.com/cgewecke/eth-gas-reporter/blob/master/docs/gasReporterOutput.md\n */\n(0, config_1.task)(task_names_2.TASK_GAS_REPORTER_MERGE)\n    .addOptionalParam(\"output\", \"Target file to save the merged report\", \"gasReporterOutput.json\")\n    .addVariadicPositionalParam(\"input\", \"A list of gasReporterOutput.json files generated by eth-gas-reporter. Files can be defined using glob patterns\")\n    .setAction(async (taskArguments, { run }) => {\n    const output = path_1.default.resolve(process.cwd(), taskArguments.output);\n    // Parse input files and calculate glob patterns\n    const { globSync } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! hardhat/internal/util/glob */ \"(ssr)/./node_modules/hardhat/internal/util/glob.js\")));\n    const arrayUniq = __webpack_require__(/*! array-uniq */ \"(ssr)/./node_modules/array-uniq/index.js\");\n    const inputFiles = arrayUniq(taskArguments.input.map(globSync).flat())\n        .map(inputFile => path_1.default.resolve(inputFile));\n    if (inputFiles.length === 0) {\n        throw new Error(`No files found for the given input: ${taskArguments.input.join(\" \")}`);\n    }\n    console.log(`Merging ${inputFiles.length} input files:`);\n    inputFiles.forEach(inputFile => {\n        console.log(\"  - \", inputFile);\n    });\n    console.log(\"\\nOutput: \", output);\n    const result = await run(task_names_2.TASK_GAS_REPORTER_MERGE_REPORTS, { inputFiles });\n    fs_1.default.writeFileSync(output, JSON.stringify(result), \"utf-8\");\n});\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat-gas-reporter/dist/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat-gas-reporter/dist/src/merge-reports.js":
/*!*********************************************************************!*\
  !*** ./node_modules/hardhat-gas-reporter/dist/src/merge-reports.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeReports = void 0;\n/**\n * Try to merge several gas reporter output objects into one. It will also\n * validate that the config are the same to make sure that the reports were\n * generated by the same source.\n */\nfunction mergeReports(reports) {\n    const result = {\n        namespace: null,\n        config: null,\n        info: {\n            methods: {},\n            deployments: [],\n            blockLimit: null,\n        },\n    };\n    for (const report of reports) {\n        if (!result.config)\n            result.config = report.config;\n        if (!result.namespace) {\n            result.namespace = report.namespace;\n        }\n        if (result.namespace !== report.namespace) {\n            throw new Error('Cannot merge reports with different namespaces');\n        }\n        // Update config.gasPrice only if the newer one has a bigger number\n        if (typeof report.config.gasPrice === 'number') {\n            if (typeof result.config.gasPrice !== 'number' ||\n                result.config.gasPrice < report.config.gasPrice) {\n                result.config.gasPrice = report.config.gasPrice;\n            }\n        }\n        else {\n            result.config.gasPrice = report.config.gasPrice;\n        }\n        if (!report.info || typeof report.info.blockLimit !== 'number') {\n            throw new Error(`Invalid \"info\" property for given report`);\n        }\n        if (!result.info.blockLimit) {\n            result.info.blockLimit = report.info.blockLimit;\n        }\n        else if (result.info.blockLimit !== report.info.blockLimit) {\n            throw new Error('\"info.blockLimit\" should be the same on all reports');\n        }\n        if (!report.info.methods) {\n            throw new Error(`Missing \"info.methods\" property on given report`);\n        }\n        // Merge info.methods objects\n        Object.entries(report.info.methods).forEach(([key, value]) => {\n            if (!result.info.methods[key]) {\n                result.info.methods[key] = value;\n                return;\n            }\n            result.info.methods[key].gasData = [\n                ...result.info.methods[key].gasData,\n                ...report.info.methods[key].gasData,\n            ].sort((a, b) => a - b);\n            result.info.methods[key].numberOfCalls += report.info.methods[key].numberOfCalls;\n        });\n        if (!Array.isArray(report.info.deployments)) {\n            throw new Error(`Invalid \"info.deployments\" property on given report`);\n        }\n        // Merge info.deployments objects\n        report.info.deployments.forEach(deployment => {\n            const current = result.info.deployments.find(d => d.name === deployment.name);\n            if (current) {\n                current.gasData = [...current.gasData, ...deployment.gasData].sort((a, b) => a - b);\n            }\n            else {\n                result.info.deployments.push(deployment);\n            }\n        });\n    }\n    return result;\n}\nexports.mergeReports = mergeReports;\n//# sourceMappingURL=merge-reports.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC1nYXMtcmVwb3J0ZXIvZGlzdC9zcmMvbWVyZ2UtcmVwb3J0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0LWdhcy1yZXBvcnRlci9kaXN0L3NyYy9tZXJnZS1yZXBvcnRzLmpzP2IyYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlUmVwb3J0cyA9IHZvaWQgMDtcbi8qKlxuICogVHJ5IHRvIG1lcmdlIHNldmVyYWwgZ2FzIHJlcG9ydGVyIG91dHB1dCBvYmplY3RzIGludG8gb25lLiBJdCB3aWxsIGFsc29cbiAqIHZhbGlkYXRlIHRoYXQgdGhlIGNvbmZpZyBhcmUgdGhlIHNhbWUgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHJlcG9ydHMgd2VyZVxuICogZ2VuZXJhdGVkIGJ5IHRoZSBzYW1lIHNvdXJjZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VSZXBvcnRzKHJlcG9ydHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIG5hbWVzcGFjZTogbnVsbCxcbiAgICAgICAgY29uZmlnOiBudWxsLFxuICAgICAgICBpbmZvOiB7XG4gICAgICAgICAgICBtZXRob2RzOiB7fSxcbiAgICAgICAgICAgIGRlcGxveW1lbnRzOiBbXSxcbiAgICAgICAgICAgIGJsb2NrTGltaXQ6IG51bGwsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IHJlcG9ydCBvZiByZXBvcnRzKSB7XG4gICAgICAgIGlmICghcmVzdWx0LmNvbmZpZylcbiAgICAgICAgICAgIHJlc3VsdC5jb25maWcgPSByZXBvcnQuY29uZmlnO1xuICAgICAgICBpZiAoIXJlc3VsdC5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIHJlc3VsdC5uYW1lc3BhY2UgPSByZXBvcnQubmFtZXNwYWNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQubmFtZXNwYWNlICE9PSByZXBvcnQubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBtZXJnZSByZXBvcnRzIHdpdGggZGlmZmVyZW50IG5hbWVzcGFjZXMnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGUgY29uZmlnLmdhc1ByaWNlIG9ubHkgaWYgdGhlIG5ld2VyIG9uZSBoYXMgYSBiaWdnZXIgbnVtYmVyXG4gICAgICAgIGlmICh0eXBlb2YgcmVwb3J0LmNvbmZpZy5nYXNQcmljZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0LmNvbmZpZy5nYXNQcmljZSAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICByZXN1bHQuY29uZmlnLmdhc1ByaWNlIDwgcmVwb3J0LmNvbmZpZy5nYXNQcmljZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jb25maWcuZ2FzUHJpY2UgPSByZXBvcnQuY29uZmlnLmdhc1ByaWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LmNvbmZpZy5nYXNQcmljZSA9IHJlcG9ydC5jb25maWcuZ2FzUHJpY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXBvcnQuaW5mbyB8fCB0eXBlb2YgcmVwb3J0LmluZm8uYmxvY2tMaW1pdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBcImluZm9cIiBwcm9wZXJ0eSBmb3IgZ2l2ZW4gcmVwb3J0YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQuaW5mby5ibG9ja0xpbWl0KSB7XG4gICAgICAgICAgICByZXN1bHQuaW5mby5ibG9ja0xpbWl0ID0gcmVwb3J0LmluZm8uYmxvY2tMaW1pdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXN1bHQuaW5mby5ibG9ja0xpbWl0ICE9PSByZXBvcnQuaW5mby5ibG9ja0xpbWl0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiaW5mby5ibG9ja0xpbWl0XCIgc2hvdWxkIGJlIHRoZSBzYW1lIG9uIGFsbCByZXBvcnRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXBvcnQuaW5mby5tZXRob2RzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgXCJpbmZvLm1ldGhvZHNcIiBwcm9wZXJ0eSBvbiBnaXZlbiByZXBvcnRgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNZXJnZSBpbmZvLm1ldGhvZHMgb2JqZWN0c1xuICAgICAgICBPYmplY3QuZW50cmllcyhyZXBvcnQuaW5mby5tZXRob2RzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0LmluZm8ubWV0aG9kc1trZXldKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmluZm8ubWV0aG9kc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LmluZm8ubWV0aG9kc1trZXldLmdhc0RhdGEgPSBbXG4gICAgICAgICAgICAgICAgLi4ucmVzdWx0LmluZm8ubWV0aG9kc1trZXldLmdhc0RhdGEsXG4gICAgICAgICAgICAgICAgLi4ucmVwb3J0LmluZm8ubWV0aG9kc1trZXldLmdhc0RhdGEsXG4gICAgICAgICAgICBdLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgICAgICAgIHJlc3VsdC5pbmZvLm1ldGhvZHNba2V5XS5udW1iZXJPZkNhbGxzICs9IHJlcG9ydC5pbmZvLm1ldGhvZHNba2V5XS5udW1iZXJPZkNhbGxzO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlcG9ydC5pbmZvLmRlcGxveW1lbnRzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFwiaW5mby5kZXBsb3ltZW50c1wiIHByb3BlcnR5IG9uIGdpdmVuIHJlcG9ydGApO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1lcmdlIGluZm8uZGVwbG95bWVudHMgb2JqZWN0c1xuICAgICAgICByZXBvcnQuaW5mby5kZXBsb3ltZW50cy5mb3JFYWNoKGRlcGxveW1lbnQgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHJlc3VsdC5pbmZvLmRlcGxveW1lbnRzLmZpbmQoZCA9PiBkLm5hbWUgPT09IGRlcGxveW1lbnQubmFtZSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQuZ2FzRGF0YSA9IFsuLi5jdXJyZW50Lmdhc0RhdGEsIC4uLmRlcGxveW1lbnQuZ2FzRGF0YV0uc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmluZm8uZGVwbG95bWVudHMucHVzaChkZXBsb3ltZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLm1lcmdlUmVwb3J0cyA9IG1lcmdlUmVwb3J0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlLXJlcG9ydHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat-gas-reporter/dist/src/merge-reports.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat-gas-reporter/dist/src/providers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/hardhat-gas-reporter/dist/src/providers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EGRAsyncApiProvider = exports.EGRDataCollectionProvider = void 0;\nconst wrapper_1 = __webpack_require__(/*! hardhat/internal/core/providers/wrapper */ \"(ssr)/./node_modules/hardhat/internal/core/providers/wrapper.js\");\n/**\n * Wrapped provider which collects tx data\n */\nclass EGRDataCollectionProvider extends wrapper_1.ProviderWrapper {\n    constructor(provider, mochaConfig) {\n        super(provider);\n        this.mochaConfig = mochaConfig;\n    }\n    async request(args) {\n        // Truffle\n        if (args.method === \"eth_getTransactionReceipt\") {\n            const receipt = await this._wrappedProvider.request(args);\n            if ((receipt === null || receipt === void 0 ? void 0 : receipt.status) && (receipt === null || receipt === void 0 ? void 0 : receipt.transactionHash)) {\n                const tx = await this._wrappedProvider.request({\n                    method: \"eth_getTransactionByHash\",\n                    params: [receipt.transactionHash]\n                });\n                await this.mochaConfig.attachments.recordTransaction(receipt, tx);\n            }\n            return receipt;\n            // Ethers: will get run twice for deployments (e.g both receipt and txhash are fetched)\n        }\n        else if (args.method === 'eth_getTransactionByHash') {\n            const receipt = await this._wrappedProvider.request({\n                method: \"eth_getTransactionReceipt\",\n                params: args.params\n            });\n            const tx = await this._wrappedProvider.request(args);\n            if (receipt === null || receipt === void 0 ? void 0 : receipt.status) {\n                await this.mochaConfig.attachments.recordTransaction(receipt, tx);\n            }\n            return tx;\n            // Waffle: This is necessary when using Waffle wallets. eth_sendTransaction fetches the\n            // transactionHash as part of its flow, eth_sendRawTransaction *does not*.\n        }\n        else if (args.method === 'eth_sendRawTransaction') {\n            const txHash = await this._wrappedProvider.request(args);\n            if (typeof txHash === 'string') {\n                const tx = await this._wrappedProvider.request({\n                    method: \"eth_getTransactionByHash\",\n                    params: [txHash]\n                });\n                const receipt = await this._wrappedProvider.request({\n                    method: \"eth_getTransactionReceipt\",\n                    params: [txHash]\n                });\n                if (receipt === null || receipt === void 0 ? void 0 : receipt.status) {\n                    await this.mochaConfig.attachments.recordTransaction(receipt, tx);\n                }\n            }\n            return txHash;\n        }\n        return this._wrappedProvider.request(args);\n    }\n}\nexports.EGRDataCollectionProvider = EGRDataCollectionProvider;\n/**\n * A set of async RPC calls which substitute the sync calls made by the core reporter\n * These allow us to use HardhatEVM or another in-process provider.\n */\nclass EGRAsyncApiProvider {\n    constructor(provider) {\n        this.provider = provider;\n    }\n    async getNetworkId() {\n        return this.provider.send(\"net_version\", []);\n    }\n    async getCode(address) {\n        return this.provider.send(\"eth_getCode\", [address, \"latest\"]);\n    }\n    async getLatestBlock() {\n        return this.provider.send(\"eth_getBlockByNumber\", [\"latest\", false]);\n    }\n    async getBlockByNumber(num) {\n        const hexNumber = `0x${num.toString(16)}`;\n        return this.provider.send(\"eth_getBlockByNumber\", [hexNumber, true]);\n    }\n    async blockNumber() {\n        const block = await this.getLatestBlock();\n        return parseInt(block.number, 16);\n    }\n    async getTransactionByHash(tx) {\n        return this.provider.send(\"eth_getTransactionByHash\", [tx]);\n    }\n    async call(payload, blockNumber) {\n        return this.provider.send(\"eth_call\", [payload, blockNumber]);\n    }\n}\nexports.EGRAsyncApiProvider = EGRAsyncApiProvider;\n//# sourceMappingURL=providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC1nYXMtcmVwb3J0ZXIvZGlzdC9zcmMvcHJvdmlkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLGlDQUFpQztBQUMvRCxrQkFBa0IsbUJBQU8sQ0FBQyxnSEFBeUM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0LWdhcy1yZXBvcnRlci9kaXN0L3NyYy9wcm92aWRlcnMuanM/MjE3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRUdSQXN5bmNBcGlQcm92aWRlciA9IGV4cG9ydHMuRUdSRGF0YUNvbGxlY3Rpb25Qcm92aWRlciA9IHZvaWQgMDtcbmNvbnN0IHdyYXBwZXJfMSA9IHJlcXVpcmUoXCJoYXJkaGF0L2ludGVybmFsL2NvcmUvcHJvdmlkZXJzL3dyYXBwZXJcIik7XG4vKipcbiAqIFdyYXBwZWQgcHJvdmlkZXIgd2hpY2ggY29sbGVjdHMgdHggZGF0YVxuICovXG5jbGFzcyBFR1JEYXRhQ29sbGVjdGlvblByb3ZpZGVyIGV4dGVuZHMgd3JhcHBlcl8xLlByb3ZpZGVyV3JhcHBlciB7XG4gICAgY29uc3RydWN0b3IocHJvdmlkZXIsIG1vY2hhQ29uZmlnKSB7XG4gICAgICAgIHN1cGVyKHByb3ZpZGVyKTtcbiAgICAgICAgdGhpcy5tb2NoYUNvbmZpZyA9IG1vY2hhQ29uZmlnO1xuICAgIH1cbiAgICBhc3luYyByZXF1ZXN0KGFyZ3MpIHtcbiAgICAgICAgLy8gVHJ1ZmZsZVxuICAgICAgICBpZiAoYXJncy5tZXRob2QgPT09IFwiZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdFwiKSB7XG4gICAgICAgICAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgdGhpcy5fd3JhcHBlZFByb3ZpZGVyLnJlcXVlc3QoYXJncyk7XG4gICAgICAgICAgICBpZiAoKHJlY2VpcHQgPT09IG51bGwgfHwgcmVjZWlwdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVjZWlwdC5zdGF0dXMpICYmIChyZWNlaXB0ID09PSBudWxsIHx8IHJlY2VpcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlY2VpcHQudHJhbnNhY3Rpb25IYXNoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy5fd3JhcHBlZFByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogW3JlY2VpcHQudHJhbnNhY3Rpb25IYXNoXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW9jaGFDb25maWcuYXR0YWNobWVudHMucmVjb3JkVHJhbnNhY3Rpb24ocmVjZWlwdCwgdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlY2VpcHQ7XG4gICAgICAgICAgICAvLyBFdGhlcnM6IHdpbGwgZ2V0IHJ1biB0d2ljZSBmb3IgZGVwbG95bWVudHMgKGUuZyBib3RoIHJlY2VpcHQgYW5kIHR4aGFzaCBhcmUgZmV0Y2hlZClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmdzLm1ldGhvZCA9PT0gJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0aGlzLl93cmFwcGVkUHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHRcIixcbiAgICAgICAgICAgICAgICBwYXJhbXM6IGFyZ3MucGFyYW1zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy5fd3JhcHBlZFByb3ZpZGVyLnJlcXVlc3QoYXJncyk7XG4gICAgICAgICAgICBpZiAocmVjZWlwdCA9PT0gbnVsbCB8fCByZWNlaXB0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWNlaXB0LnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW9jaGFDb25maWcuYXR0YWNobWVudHMucmVjb3JkVHJhbnNhY3Rpb24ocmVjZWlwdCwgdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR4O1xuICAgICAgICAgICAgLy8gV2FmZmxlOiBUaGlzIGlzIG5lY2Vzc2FyeSB3aGVuIHVzaW5nIFdhZmZsZSB3YWxsZXRzLiBldGhfc2VuZFRyYW5zYWN0aW9uIGZldGNoZXMgdGhlXG4gICAgICAgICAgICAvLyB0cmFuc2FjdGlvbkhhc2ggYXMgcGFydCBvZiBpdHMgZmxvdywgZXRoX3NlbmRSYXdUcmFuc2FjdGlvbiAqZG9lcyBub3QqLlxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFyZ3MubWV0aG9kID09PSAnZXRoX3NlbmRSYXdUcmFuc2FjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHR4SGFzaCA9IGF3YWl0IHRoaXMuX3dyYXBwZWRQcm92aWRlci5yZXF1ZXN0KGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0eEhhc2ggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLl93cmFwcGVkUHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2hcIixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbdHhIYXNoXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0aGlzLl93cmFwcGVkUHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogW3R4SGFzaF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVjZWlwdCA9PT0gbnVsbCB8fCByZWNlaXB0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZWNlaXB0LnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm1vY2hhQ29uZmlnLmF0dGFjaG1lbnRzLnJlY29yZFRyYW5zYWN0aW9uKHJlY2VpcHQsIHR4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHhIYXNoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93cmFwcGVkUHJvdmlkZXIucmVxdWVzdChhcmdzKTtcbiAgICB9XG59XG5leHBvcnRzLkVHUkRhdGFDb2xsZWN0aW9uUHJvdmlkZXIgPSBFR1JEYXRhQ29sbGVjdGlvblByb3ZpZGVyO1xuLyoqXG4gKiBBIHNldCBvZiBhc3luYyBSUEMgY2FsbHMgd2hpY2ggc3Vic3RpdHV0ZSB0aGUgc3luYyBjYWxscyBtYWRlIGJ5IHRoZSBjb3JlIHJlcG9ydGVyXG4gKiBUaGVzZSBhbGxvdyB1cyB0byB1c2UgSGFyZGhhdEVWTSBvciBhbm90aGVyIGluLXByb2Nlc3MgcHJvdmlkZXIuXG4gKi9cbmNsYXNzIEVHUkFzeW5jQXBpUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TmV0d29ya0lkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kKFwibmV0X3ZlcnNpb25cIiwgW10pO1xuICAgIH1cbiAgICBhc3luYyBnZXRDb2RlKGFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuc2VuZChcImV0aF9nZXRDb2RlXCIsIFthZGRyZXNzLCBcImxhdGVzdFwiXSk7XG4gICAgfVxuICAgIGFzeW5jIGdldExhdGVzdEJsb2NrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIiwgW1wibGF0ZXN0XCIsIGZhbHNlXSk7XG4gICAgfVxuICAgIGFzeW5jIGdldEJsb2NrQnlOdW1iZXIobnVtKSB7XG4gICAgICAgIGNvbnN0IGhleE51bWJlciA9IGAweCR7bnVtLnRvU3RyaW5nKDE2KX1gO1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIiwgW2hleE51bWJlciwgdHJ1ZV0pO1xuICAgIH1cbiAgICBhc3luYyBibG9ja051bWJlcigpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBhd2FpdCB0aGlzLmdldExhdGVzdEJsb2NrKCk7XG4gICAgICAgIHJldHVybiBwYXJzZUludChibG9jay5udW1iZXIsIDE2KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25CeUhhc2godHgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuc2VuZChcImV0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaFwiLCBbdHhdKTtcbiAgICB9XG4gICAgYXN5bmMgY2FsbChwYXlsb2FkLCBibG9ja051bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX2NhbGxcIiwgW3BheWxvYWQsIGJsb2NrTnVtYmVyXSk7XG4gICAgfVxufVxuZXhwb3J0cy5FR1JBc3luY0FwaVByb3ZpZGVyID0gRUdSQXN5bmNBcGlQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat-gas-reporter/dist/src/providers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat-gas-reporter/dist/src/task-names.js":
/*!******************************************************************!*\
  !*** ./node_modules/hardhat-gas-reporter/dist/src/task-names.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TASK_GAS_REPORTER_MERGE = exports.TASK_GAS_REPORTER_MERGE_REPORTS = void 0;\nexports.TASK_GAS_REPORTER_MERGE_REPORTS = \"gas-reporter:merge-reports\";\nexports.TASK_GAS_REPORTER_MERGE = \"gas-reporter:merge\";\n//# sourceMappingURL=task-names.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC1nYXMtcmVwb3J0ZXIvZGlzdC9zcmMvdGFzay1uYW1lcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0IsR0FBRyx1Q0FBdUM7QUFDekUsdUNBQXVDO0FBQ3ZDLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC1nYXMtcmVwb3J0ZXIvZGlzdC9zcmMvdGFzay1uYW1lcy5qcz9hNmU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UQVNLX0dBU19SRVBPUlRFUl9NRVJHRSA9IGV4cG9ydHMuVEFTS19HQVNfUkVQT1JURVJfTUVSR0VfUkVQT1JUUyA9IHZvaWQgMDtcbmV4cG9ydHMuVEFTS19HQVNfUkVQT1JURVJfTUVSR0VfUkVQT1JUUyA9IFwiZ2FzLXJlcG9ydGVyOm1lcmdlLXJlcG9ydHNcIjtcbmV4cG9ydHMuVEFTS19HQVNfUkVQT1JURVJfTUVSR0UgPSBcImdhcy1yZXBvcnRlcjptZXJnZVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFzay1uYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat-gas-reporter/dist/src/task-names.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/hardhat-gas-reporter/dist/src/type-extensions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/hardhat-gas-reporter/dist/src/type-extensions.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! hardhat/types/config */ \"(ssr)/./node_modules/hardhat/types/config.js\");\n//# sourceMappingURL=type-extensions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGFyZGhhdC1nYXMtcmVwb3J0ZXIvZGlzdC9zcmMvdHlwZS1leHRlbnNpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFPLENBQUMsMEVBQXNCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9oYXJkaGF0LWdhcy1yZXBvcnRlci9kaXN0L3NyYy90eXBlLWV4dGVuc2lvbnMuanM/YzI4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnJlcXVpcmUoXCJoYXJkaGF0L3R5cGVzL2NvbmZpZ1wiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGUtZXh0ZW5zaW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hardhat-gas-reporter/dist/src/type-extensions.js\n");

/***/ })

};
;