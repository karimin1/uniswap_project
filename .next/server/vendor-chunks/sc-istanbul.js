/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sc-istanbul";
exports.ids = ["vendor-chunks/sc-istanbul"];
exports.modules = {

/***/ "(ssr)/./node_modules/sc-istanbul/index.js":
/*!*******************************************!*\
  !*** ./node_modules/sc-istanbul/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\nCopyright (c) 2012, Yahoo! Inc.  All rights reserved.\nCopyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n*/\n\n/*jslint nomen: true */\nvar path = __webpack_require__(/*! path */ \"path\"),\n    Store = __webpack_require__(/*! ./lib/store */ \"(ssr)/./node_modules/sc-istanbul/lib/store/index.js\"),\n    Report = __webpack_require__(/*! ./lib/report */ \"(ssr)/./node_modules/sc-istanbul/lib/report/index.js\"),\n    meta = __webpack_require__(/*! ./lib/util/meta */ \"(ssr)/./node_modules/sc-istanbul/lib/util/meta.js\");\n\n//register our standard plugins\n__webpack_require__(/*! ./lib/register-plugins */ \"(ssr)/./node_modules/sc-istanbul/lib/register-plugins.js\");\n\n/**\n * the top-level API for `istanbul`. provides access to the key libraries in\n * istanbul so you can write your own tools using `istanbul` as a library.\n *\n * Usage\n * -----\n *\n *      var istanbul = require('istanbul');\n *\n *\n * @class Istanbul\n * @static\n * @module main\n * @main main\n */\n\nmodule.exports = {\n    /**\n     * the Instrumenter class.\n     * @property Instrumenter\n     * @type Instrumenter\n     * @static\n     */\n    Instrumenter: __webpack_require__(/*! ./lib/instrumenter */ \"(ssr)/./node_modules/sc-istanbul/lib/instrumenter.js\"),\n    /**\n     * the Store class.\n     * @property  Store\n     * @type Store\n     * @static\n     */\n    Store: Store,\n    /**\n     * the Collector class\n     * @property  Collector\n     * @type Collector\n     * @static\n     */\n    Collector: __webpack_require__(/*! ./lib/collector */ \"(ssr)/./node_modules/sc-istanbul/lib/collector.js\"),\n    /**\n     * the hook module\n     * @property hook\n     * @type Hook\n     * @static\n     */\n    hook: __webpack_require__(/*! ./lib/hook */ \"(ssr)/./node_modules/sc-istanbul/lib/hook.js\"),\n    /**\n     * the Report class\n     * @property Report\n     * @type Report\n     * @static\n     */\n    Report: Report,\n    /**\n     * the config module\n     * @property config\n     * @type Config\n     * @static\n     */\n    config: __webpack_require__(/*! ./lib/config */ \"(ssr)/./node_modules/sc-istanbul/lib/config.js\"),\n    /**\n     * the Reporter class\n     * @property Reporter\n     * @type Reporter\n     * @static\n     */\n    Reporter: __webpack_require__(/*! ./lib/reporter */ \"(ssr)/./node_modules/sc-istanbul/lib/reporter.js\"),\n    /**\n     * utility for processing coverage objects\n     * @property utils\n     * @type ObjectUtils\n     * @static\n     */\n    utils: __webpack_require__(/*! ./lib/object-utils */ \"(ssr)/./node_modules/sc-istanbul/lib/object-utils.js\"),\n    /**\n     * asynchronously returns a function that can match filesystem paths.\n     * The function returned in the callback may be passed directly as a `matcher`\n     * to the functions in the `hook` module.\n     *\n     * When no options are passed, the match function is one that matches all JS\n     * files under the current working directory except ones under `node_modules`\n     *\n     * Match patterns are `ant`-style patterns processed using the `glob` library.\n     * Examples not provided due to limitations in putting asterisks inside\n     * jsdoc comments. Please refer to tests under `test/other/test-matcher.js`\n     * for examples.\n     *\n     * @method matcherFor\n     * @static\n     * @param {Object} options Optional. Lookup options.\n     * @param {String} [options.root] the root of the filesystem tree under\n     *     which to match files. Defaults to `process.cwd()`\n     * @param {Array} [options.includes] an array of include patterns to match.\n     *     Defaults to all JS files under the root.\n     * @param {Array} [options.excludes] and array of exclude patterns. File paths\n     *     matching these patterns will be excluded by the returned matcher.\n     *     Defaults to files under `node_modules` found anywhere under root.\n     * @param {Function(err, matchFunction)} callback  The callback that is\n     *      called with two arguments. The first is an `Error` object in case\n     *      of errors or a falsy value if there were no errors. The second\n     *      is a function that may be use as a matcher.\n     */\n    matcherFor: (__webpack_require__(/*! ./lib/util/file-matcher */ \"(ssr)/./node_modules/sc-istanbul/lib/util/file-matcher.js\").matcherFor),\n    /**\n     * the version of the library\n     * @property VERSION\n     * @type String\n     * @static\n     */\n    VERSION: meta.VERSION,\n    /**\n     * the abstract Writer class\n     * @property Writer\n     * @type Writer\n     * @static\n     */\n    Writer: (__webpack_require__(/*! ./lib/util/writer */ \"(ssr)/./node_modules/sc-istanbul/lib/util/writer.js\").Writer),\n    /**\n     * the abstract ContentWriter class\n     * @property ContentWriter\n     * @type ContentWriter\n     * @static\n     */\n    ContentWriter: (__webpack_require__(/*! ./lib/util/writer */ \"(ssr)/./node_modules/sc-istanbul/lib/util/writer.js\").ContentWriter),\n    /**\n     * the concrete FileWriter class\n     * @property FileWriter\n     * @type FileWriter\n     * @static\n     */\n    FileWriter: __webpack_require__(/*! ./lib/util/file-writer */ \"(ssr)/./node_modules/sc-istanbul/lib/util/file-writer.js\"),\n    //undocumented\n    _yuiLoadHook: __webpack_require__(/*! ./lib/util/yui-load-hook */ \"(ssr)/./node_modules/sc-istanbul/lib/util/yui-load-hook.js\"),\n    //undocumented\n    TreeSummarizer: __webpack_require__(/*! ./lib/util/tree-summarizer */ \"(ssr)/./node_modules/sc-istanbul/lib/util/tree-summarizer.js\"),\n    //undocumented\n    assetsDir: path.resolve(__dirname, 'lib', 'assets')\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekIsWUFBWSxtQkFBTyxDQUFDLHdFQUFhO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQywwRUFBYztBQUNuQyxXQUFXLG1CQUFPLENBQUMsMEVBQWlCOztBQUVwQztBQUNBLG1CQUFPLENBQUMsd0ZBQXdCOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsMEVBQWlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxnRUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQU8sQ0FBQyxvRUFBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsd0VBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxnRkFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0EsZUFBZSw4QkFBOEI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNEhBQTZDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0R0FBbUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1IQUEwQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyx3RkFBd0I7QUFDaEQ7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyw0RkFBMEI7QUFDcEQ7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQyxnR0FBNEI7QUFDeEQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zYy1pc3RhbmJ1bC9pbmRleC5qcz9jN2Y3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTIsIFlhaG9vISBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuKi9cblxuLypqc2xpbnQgbm9tZW46IHRydWUgKi9cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIFN0b3JlID0gcmVxdWlyZSgnLi9saWIvc3RvcmUnKSxcbiAgICBSZXBvcnQgPSByZXF1aXJlKCcuL2xpYi9yZXBvcnQnKSxcbiAgICBtZXRhID0gcmVxdWlyZSgnLi9saWIvdXRpbC9tZXRhJyk7XG5cbi8vcmVnaXN0ZXIgb3VyIHN0YW5kYXJkIHBsdWdpbnNcbnJlcXVpcmUoJy4vbGliL3JlZ2lzdGVyLXBsdWdpbnMnKTtcblxuLyoqXG4gKiB0aGUgdG9wLWxldmVsIEFQSSBmb3IgYGlzdGFuYnVsYC4gcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBrZXkgbGlicmFyaWVzIGluXG4gKiBpc3RhbmJ1bCBzbyB5b3UgY2FuIHdyaXRlIHlvdXIgb3duIHRvb2xzIHVzaW5nIGBpc3RhbmJ1bGAgYXMgYSBsaWJyYXJ5LlxuICpcbiAqIFVzYWdlXG4gKiAtLS0tLVxuICpcbiAqICAgICAgdmFyIGlzdGFuYnVsID0gcmVxdWlyZSgnaXN0YW5idWwnKTtcbiAqXG4gKlxuICogQGNsYXNzIElzdGFuYnVsXG4gKiBAc3RhdGljXG4gKiBAbW9kdWxlIG1haW5cbiAqIEBtYWluIG1haW5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiB0aGUgSW5zdHJ1bWVudGVyIGNsYXNzLlxuICAgICAqIEBwcm9wZXJ0eSBJbnN0cnVtZW50ZXJcbiAgICAgKiBAdHlwZSBJbnN0cnVtZW50ZXJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgSW5zdHJ1bWVudGVyOiByZXF1aXJlKCcuL2xpYi9pbnN0cnVtZW50ZXInKSxcbiAgICAvKipcbiAgICAgKiB0aGUgU3RvcmUgY2xhc3MuXG4gICAgICogQHByb3BlcnR5ICBTdG9yZVxuICAgICAqIEB0eXBlIFN0b3JlXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIFN0b3JlOiBTdG9yZSxcbiAgICAvKipcbiAgICAgKiB0aGUgQ29sbGVjdG9yIGNsYXNzXG4gICAgICogQHByb3BlcnR5ICBDb2xsZWN0b3JcbiAgICAgKiBAdHlwZSBDb2xsZWN0b3JcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgQ29sbGVjdG9yOiByZXF1aXJlKCcuL2xpYi9jb2xsZWN0b3InKSxcbiAgICAvKipcbiAgICAgKiB0aGUgaG9vayBtb2R1bGVcbiAgICAgKiBAcHJvcGVydHkgaG9va1xuICAgICAqIEB0eXBlIEhvb2tcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgaG9vazogcmVxdWlyZSgnLi9saWIvaG9vaycpLFxuICAgIC8qKlxuICAgICAqIHRoZSBSZXBvcnQgY2xhc3NcbiAgICAgKiBAcHJvcGVydHkgUmVwb3J0XG4gICAgICogQHR5cGUgUmVwb3J0XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIFJlcG9ydDogUmVwb3J0LFxuICAgIC8qKlxuICAgICAqIHRoZSBjb25maWcgbW9kdWxlXG4gICAgICogQHByb3BlcnR5IGNvbmZpZ1xuICAgICAqIEB0eXBlIENvbmZpZ1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBjb25maWc6IHJlcXVpcmUoJy4vbGliL2NvbmZpZycpLFxuICAgIC8qKlxuICAgICAqIHRoZSBSZXBvcnRlciBjbGFzc1xuICAgICAqIEBwcm9wZXJ0eSBSZXBvcnRlclxuICAgICAqIEB0eXBlIFJlcG9ydGVyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIFJlcG9ydGVyOiByZXF1aXJlKCcuL2xpYi9yZXBvcnRlcicpLFxuICAgIC8qKlxuICAgICAqIHV0aWxpdHkgZm9yIHByb2Nlc3NpbmcgY292ZXJhZ2Ugb2JqZWN0c1xuICAgICAqIEBwcm9wZXJ0eSB1dGlsc1xuICAgICAqIEB0eXBlIE9iamVjdFV0aWxzXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHV0aWxzOiByZXF1aXJlKCcuL2xpYi9vYmplY3QtdXRpbHMnKSxcbiAgICAvKipcbiAgICAgKiBhc3luY2hyb25vdXNseSByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gbWF0Y2ggZmlsZXN5c3RlbSBwYXRocy5cbiAgICAgKiBUaGUgZnVuY3Rpb24gcmV0dXJuZWQgaW4gdGhlIGNhbGxiYWNrIG1heSBiZSBwYXNzZWQgZGlyZWN0bHkgYXMgYSBgbWF0Y2hlcmBcbiAgICAgKiB0byB0aGUgZnVuY3Rpb25zIGluIHRoZSBgaG9va2AgbW9kdWxlLlxuICAgICAqXG4gICAgICogV2hlbiBubyBvcHRpb25zIGFyZSBwYXNzZWQsIHRoZSBtYXRjaCBmdW5jdGlvbiBpcyBvbmUgdGhhdCBtYXRjaGVzIGFsbCBKU1xuICAgICAqIGZpbGVzIHVuZGVyIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGV4Y2VwdCBvbmVzIHVuZGVyIGBub2RlX21vZHVsZXNgXG4gICAgICpcbiAgICAgKiBNYXRjaCBwYXR0ZXJucyBhcmUgYGFudGAtc3R5bGUgcGF0dGVybnMgcHJvY2Vzc2VkIHVzaW5nIHRoZSBgZ2xvYmAgbGlicmFyeS5cbiAgICAgKiBFeGFtcGxlcyBub3QgcHJvdmlkZWQgZHVlIHRvIGxpbWl0YXRpb25zIGluIHB1dHRpbmcgYXN0ZXJpc2tzIGluc2lkZVxuICAgICAqIGpzZG9jIGNvbW1lbnRzLiBQbGVhc2UgcmVmZXIgdG8gdGVzdHMgdW5kZXIgYHRlc3Qvb3RoZXIvdGVzdC1tYXRjaGVyLmpzYFxuICAgICAqIGZvciBleGFtcGxlcy5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgbWF0Y2hlckZvclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25hbC4gTG9va3VwIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnJvb3RdIHRoZSByb290IG9mIHRoZSBmaWxlc3lzdGVtIHRyZWUgdW5kZXJcbiAgICAgKiAgICAgd2hpY2ggdG8gbWF0Y2ggZmlsZXMuIERlZmF1bHRzIHRvIGBwcm9jZXNzLmN3ZCgpYFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLmluY2x1ZGVzXSBhbiBhcnJheSBvZiBpbmNsdWRlIHBhdHRlcm5zIHRvIG1hdGNoLlxuICAgICAqICAgICBEZWZhdWx0cyB0byBhbGwgSlMgZmlsZXMgdW5kZXIgdGhlIHJvb3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuZXhjbHVkZXNdIGFuZCBhcnJheSBvZiBleGNsdWRlIHBhdHRlcm5zLiBGaWxlIHBhdGhzXG4gICAgICogICAgIG1hdGNoaW5nIHRoZXNlIHBhdHRlcm5zIHdpbGwgYmUgZXhjbHVkZWQgYnkgdGhlIHJldHVybmVkIG1hdGNoZXIuXG4gICAgICogICAgIERlZmF1bHRzIHRvIGZpbGVzIHVuZGVyIGBub2RlX21vZHVsZXNgIGZvdW5kIGFueXdoZXJlIHVuZGVyIHJvb3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbihlcnIsIG1hdGNoRnVuY3Rpb24pfSBjYWxsYmFjayAgVGhlIGNhbGxiYWNrIHRoYXQgaXNcbiAgICAgKiAgICAgIGNhbGxlZCB3aXRoIHR3byBhcmd1bWVudHMuIFRoZSBmaXJzdCBpcyBhbiBgRXJyb3JgIG9iamVjdCBpbiBjYXNlXG4gICAgICogICAgICBvZiBlcnJvcnMgb3IgYSBmYWxzeSB2YWx1ZSBpZiB0aGVyZSB3ZXJlIG5vIGVycm9ycy4gVGhlIHNlY29uZFxuICAgICAqICAgICAgaXMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2UgYXMgYSBtYXRjaGVyLlxuICAgICAqL1xuICAgIG1hdGNoZXJGb3I6IHJlcXVpcmUoJy4vbGliL3V0aWwvZmlsZS1tYXRjaGVyJykubWF0Y2hlckZvcixcbiAgICAvKipcbiAgICAgKiB0aGUgdmVyc2lvbiBvZiB0aGUgbGlicmFyeVxuICAgICAqIEBwcm9wZXJ0eSBWRVJTSU9OXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIFZFUlNJT046IG1ldGEuVkVSU0lPTixcbiAgICAvKipcbiAgICAgKiB0aGUgYWJzdHJhY3QgV3JpdGVyIGNsYXNzXG4gICAgICogQHByb3BlcnR5IFdyaXRlclxuICAgICAqIEB0eXBlIFdyaXRlclxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBXcml0ZXI6IHJlcXVpcmUoJy4vbGliL3V0aWwvd3JpdGVyJykuV3JpdGVyLFxuICAgIC8qKlxuICAgICAqIHRoZSBhYnN0cmFjdCBDb250ZW50V3JpdGVyIGNsYXNzXG4gICAgICogQHByb3BlcnR5IENvbnRlbnRXcml0ZXJcbiAgICAgKiBAdHlwZSBDb250ZW50V3JpdGVyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIENvbnRlbnRXcml0ZXI6IHJlcXVpcmUoJy4vbGliL3V0aWwvd3JpdGVyJykuQ29udGVudFdyaXRlcixcbiAgICAvKipcbiAgICAgKiB0aGUgY29uY3JldGUgRmlsZVdyaXRlciBjbGFzc1xuICAgICAqIEBwcm9wZXJ0eSBGaWxlV3JpdGVyXG4gICAgICogQHR5cGUgRmlsZVdyaXRlclxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBGaWxlV3JpdGVyOiByZXF1aXJlKCcuL2xpYi91dGlsL2ZpbGUtd3JpdGVyJyksXG4gICAgLy91bmRvY3VtZW50ZWRcbiAgICBfeXVpTG9hZEhvb2s6IHJlcXVpcmUoJy4vbGliL3V0aWwveXVpLWxvYWQtaG9vaycpLFxuICAgIC8vdW5kb2N1bWVudGVkXG4gICAgVHJlZVN1bW1hcml6ZXI6IHJlcXVpcmUoJy4vbGliL3V0aWwvdHJlZS1zdW1tYXJpemVyJyksXG4gICAgLy91bmRvY3VtZW50ZWRcbiAgICBhc3NldHNEaXI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdsaWInLCAnYXNzZXRzJylcbn07XG5cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/collector.js":
/*!***************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/collector.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar MemoryStore = __webpack_require__(/*! ./store/memory */ \"(ssr)/./node_modules/sc-istanbul/lib/store/memory.js\"),\n    utils = __webpack_require__(/*! ./object-utils */ \"(ssr)/./node_modules/sc-istanbul/lib/object-utils.js\");\n\n/**\n * a mechanism to merge multiple coverage objects into one. Handles the use case\n * of overlapping coverage information for the same files in multiple coverage\n * objects and does not double-count in this situation. For example, if\n * you pass the same coverage object multiple times, the final merged object will be\n * no different that any of the objects passed in (except for execution counts).\n *\n * The `Collector` is built for scale to handle thousands of coverage objects.\n * By default, all processing is done in memory since the common use-case is of\n * one or a few coverage objects. You can work around memory\n * issues by passing in a `Store` implementation that stores temporary computations\n * on disk (the `tmp` store, for example).\n *\n * The `getFinalCoverage` method returns an object with merged coverage information\n * and is provided as a convenience for implementors working with coverage information\n * that can fit into memory. Reporters, in the interest of generality, should *not* use this method for\n * creating reports.\n *\n * Usage\n * -----\n *\n *      var collector = new require('istanbul').Collector();\n *\n *      files.forEach(function (f) {\n *          //each coverage object can have overlapping information about multiple files\n *          collector.add(JSON.parse(fs.readFileSync(f, 'utf8')));\n *      });\n *\n *      collector.files().forEach(function(file) {\n *          var fileCoverage = collector.fileCoverageFor(file);\n *          console.log('Coverage for ' + file + ' is:' + JSON.stringify(fileCoverage));\n *      });\n *\n *      // convenience method: do not use this when dealing with a large number of files\n *      var finalCoverage = collector.getFinalCoverage();\n *\n * @class Collector\n * @module main\n * @constructor\n * @param {Object} options Optional. Configuration options.\n * @param {Store} options.store - an implementation of `Store` to use for temporary\n *      calculations.\n */\nfunction Collector(options) {\n    options = options || {};\n    this.store = options.store || new MemoryStore();\n}\n\nCollector.prototype = {\n    /**\n     * adds a coverage object to the collector.\n     *\n     * @method add\n     * @param {Object} coverage the coverage object.\n     * @param {String} testName Optional. The name of the test used to produce the object.\n     *      This is currently not used.\n     */\n    add: function (coverage /*, testName */) {\n        var store = this.store;\n        Object.keys(coverage).forEach(function (key) {\n            var fileCoverage = coverage[key];\n            if (store.hasKey(key)) {\n                store.setObject(key, utils.mergeFileCoverage(fileCoverage, store.getObject(key)));\n            } else {\n                store.setObject(key, fileCoverage);\n            }\n        });\n    },\n    /**\n     * returns a list of unique file paths for which coverage information has been added.\n     * @method files\n     * @return {Array} an array of file paths for which coverage information is present.\n     */\n    files: function () {\n        return this.store.keys();\n    },\n    /**\n     * return file coverage information for a single file\n     * @method fileCoverageFor\n     * @param {String} fileName the path for the file for which coverage information is\n     *      required. Must be one of the values returned in the `files()` method.\n     * @return {Object} the coverage information for the specified file.\n     */\n    fileCoverageFor: function (fileName) {\n        var ret = this.store.getObject(fileName);\n        utils.addDerivedInfoForFile(ret);\n        return ret;\n    },\n    /**\n     * returns file coverage information for all files. This has the same format as\n     * any of the objects passed in to the `add` method. The number of keys in this\n     * object will be a superset of all keys found in the objects passed to `add()`\n     * @method getFinalCoverage\n     * @return {Object} the merged coverage information\n     */\n    getFinalCoverage: function () {\n        var ret = {},\n            that = this;\n        this.files().forEach(function (file) {\n            ret[file] = that.fileCoverageFor(file);\n        });\n        return ret;\n    },\n    /**\n     * disposes this collector and reclaims temporary resources used in the\n     * computation. Calls `dispose()` on the underlying store.\n     * @method dispose\n     */\n    dispose: function () {\n        this.store.dispose();\n    }\n};\n\nmodule.exports = Collector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL2NvbGxlY3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNhO0FBQ2Isa0JBQWtCLG1CQUFPLENBQUMsNEVBQWdCO0FBQzFDLFlBQVksbUJBQU8sQ0FBQyw0RUFBZ0I7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NjLWlzdGFuYnVsL2xpYi9jb2xsZWN0b3IuanM/YzA1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIENvcHlyaWdodCAoYykgMjAxMiwgWWFob28hIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBNZW1vcnlTdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmUvbWVtb3J5JyksXG4gICAgdXRpbHMgPSByZXF1aXJlKCcuL29iamVjdC11dGlscycpO1xuXG4vKipcbiAqIGEgbWVjaGFuaXNtIHRvIG1lcmdlIG11bHRpcGxlIGNvdmVyYWdlIG9iamVjdHMgaW50byBvbmUuIEhhbmRsZXMgdGhlIHVzZSBjYXNlXG4gKiBvZiBvdmVybGFwcGluZyBjb3ZlcmFnZSBpbmZvcm1hdGlvbiBmb3IgdGhlIHNhbWUgZmlsZXMgaW4gbXVsdGlwbGUgY292ZXJhZ2VcbiAqIG9iamVjdHMgYW5kIGRvZXMgbm90IGRvdWJsZS1jb3VudCBpbiB0aGlzIHNpdHVhdGlvbi4gRm9yIGV4YW1wbGUsIGlmXG4gKiB5b3UgcGFzcyB0aGUgc2FtZSBjb3ZlcmFnZSBvYmplY3QgbXVsdGlwbGUgdGltZXMsIHRoZSBmaW5hbCBtZXJnZWQgb2JqZWN0IHdpbGwgYmVcbiAqIG5vIGRpZmZlcmVudCB0aGF0IGFueSBvZiB0aGUgb2JqZWN0cyBwYXNzZWQgaW4gKGV4Y2VwdCBmb3IgZXhlY3V0aW9uIGNvdW50cykuXG4gKlxuICogVGhlIGBDb2xsZWN0b3JgIGlzIGJ1aWx0IGZvciBzY2FsZSB0byBoYW5kbGUgdGhvdXNhbmRzIG9mIGNvdmVyYWdlIG9iamVjdHMuXG4gKiBCeSBkZWZhdWx0LCBhbGwgcHJvY2Vzc2luZyBpcyBkb25lIGluIG1lbW9yeSBzaW5jZSB0aGUgY29tbW9uIHVzZS1jYXNlIGlzIG9mXG4gKiBvbmUgb3IgYSBmZXcgY292ZXJhZ2Ugb2JqZWN0cy4gWW91IGNhbiB3b3JrIGFyb3VuZCBtZW1vcnlcbiAqIGlzc3VlcyBieSBwYXNzaW5nIGluIGEgYFN0b3JlYCBpbXBsZW1lbnRhdGlvbiB0aGF0IHN0b3JlcyB0ZW1wb3JhcnkgY29tcHV0YXRpb25zXG4gKiBvbiBkaXNrICh0aGUgYHRtcGAgc3RvcmUsIGZvciBleGFtcGxlKS5cbiAqXG4gKiBUaGUgYGdldEZpbmFsQ292ZXJhZ2VgIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIG1lcmdlZCBjb3ZlcmFnZSBpbmZvcm1hdGlvblxuICogYW5kIGlzIHByb3ZpZGVkIGFzIGEgY29udmVuaWVuY2UgZm9yIGltcGxlbWVudG9ycyB3b3JraW5nIHdpdGggY292ZXJhZ2UgaW5mb3JtYXRpb25cbiAqIHRoYXQgY2FuIGZpdCBpbnRvIG1lbW9yeS4gUmVwb3J0ZXJzLCBpbiB0aGUgaW50ZXJlc3Qgb2YgZ2VuZXJhbGl0eSwgc2hvdWxkICpub3QqIHVzZSB0aGlzIG1ldGhvZCBmb3JcbiAqIGNyZWF0aW5nIHJlcG9ydHMuXG4gKlxuICogVXNhZ2VcbiAqIC0tLS0tXG4gKlxuICogICAgICB2YXIgY29sbGVjdG9yID0gbmV3IHJlcXVpcmUoJ2lzdGFuYnVsJykuQ29sbGVjdG9yKCk7XG4gKlxuICogICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gKiAgICAgICAgICAvL2VhY2ggY292ZXJhZ2Ugb2JqZWN0IGNhbiBoYXZlIG92ZXJsYXBwaW5nIGluZm9ybWF0aW9uIGFib3V0IG11bHRpcGxlIGZpbGVzXG4gKiAgICAgICAgICBjb2xsZWN0b3IuYWRkKEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGYsICd1dGY4JykpKTtcbiAqICAgICAgfSk7XG4gKlxuICogICAgICBjb2xsZWN0b3IuZmlsZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAqICAgICAgICAgIHZhciBmaWxlQ292ZXJhZ2UgPSBjb2xsZWN0b3IuZmlsZUNvdmVyYWdlRm9yKGZpbGUpO1xuICogICAgICAgICAgY29uc29sZS5sb2coJ0NvdmVyYWdlIGZvciAnICsgZmlsZSArICcgaXM6JyArIEpTT04uc3RyaW5naWZ5KGZpbGVDb3ZlcmFnZSkpO1xuICogICAgICB9KTtcbiAqXG4gKiAgICAgIC8vIGNvbnZlbmllbmNlIG1ldGhvZDogZG8gbm90IHVzZSB0aGlzIHdoZW4gZGVhbGluZyB3aXRoIGEgbGFyZ2UgbnVtYmVyIG9mIGZpbGVzXG4gKiAgICAgIHZhciBmaW5hbENvdmVyYWdlID0gY29sbGVjdG9yLmdldEZpbmFsQ292ZXJhZ2UoKTtcbiAqXG4gKiBAY2xhc3MgQ29sbGVjdG9yXG4gKiBAbW9kdWxlIG1haW5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9uYWwuIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEBwYXJhbSB7U3RvcmV9IG9wdGlvbnMuc3RvcmUgLSBhbiBpbXBsZW1lbnRhdGlvbiBvZiBgU3RvcmVgIHRvIHVzZSBmb3IgdGVtcG9yYXJ5XG4gKiAgICAgIGNhbGN1bGF0aW9ucy5cbiAqL1xuZnVuY3Rpb24gQ29sbGVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLnN0b3JlID0gb3B0aW9ucy5zdG9yZSB8fCBuZXcgTWVtb3J5U3RvcmUoKTtcbn1cblxuQ29sbGVjdG9yLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBhZGRzIGEgY292ZXJhZ2Ugb2JqZWN0IHRvIHRoZSBjb2xsZWN0b3IuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFkZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb3ZlcmFnZSB0aGUgY292ZXJhZ2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXN0TmFtZSBPcHRpb25hbC4gVGhlIG5hbWUgb2YgdGhlIHRlc3QgdXNlZCB0byBwcm9kdWNlIHRoZSBvYmplY3QuXG4gICAgICogICAgICBUaGlzIGlzIGN1cnJlbnRseSBub3QgdXNlZC5cbiAgICAgKi9cbiAgICBhZGQ6IGZ1bmN0aW9uIChjb3ZlcmFnZSAvKiwgdGVzdE5hbWUgKi8pIHtcbiAgICAgICAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZTtcbiAgICAgICAgT2JqZWN0LmtleXMoY292ZXJhZ2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIGZpbGVDb3ZlcmFnZSA9IGNvdmVyYWdlW2tleV07XG4gICAgICAgICAgICBpZiAoc3RvcmUuaGFzS2V5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5zZXRPYmplY3Qoa2V5LCB1dGlscy5tZXJnZUZpbGVDb3ZlcmFnZShmaWxlQ292ZXJhZ2UsIHN0b3JlLmdldE9iamVjdChrZXkpKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0b3JlLnNldE9iamVjdChrZXksIGZpbGVDb3ZlcmFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogcmV0dXJucyBhIGxpc3Qgb2YgdW5pcXVlIGZpbGUgcGF0aHMgZm9yIHdoaWNoIGNvdmVyYWdlIGluZm9ybWF0aW9uIGhhcyBiZWVuIGFkZGVkLlxuICAgICAqIEBtZXRob2QgZmlsZXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2YgZmlsZSBwYXRocyBmb3Igd2hpY2ggY292ZXJhZ2UgaW5mb3JtYXRpb24gaXMgcHJlc2VudC5cbiAgICAgKi9cbiAgICBmaWxlczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZS5rZXlzKCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiByZXR1cm4gZmlsZSBjb3ZlcmFnZSBpbmZvcm1hdGlvbiBmb3IgYSBzaW5nbGUgZmlsZVxuICAgICAqIEBtZXRob2QgZmlsZUNvdmVyYWdlRm9yXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVOYW1lIHRoZSBwYXRoIGZvciB0aGUgZmlsZSBmb3Igd2hpY2ggY292ZXJhZ2UgaW5mb3JtYXRpb24gaXNcbiAgICAgKiAgICAgIHJlcXVpcmVkLiBNdXN0IGJlIG9uZSBvZiB0aGUgdmFsdWVzIHJldHVybmVkIGluIHRoZSBgZmlsZXMoKWAgbWV0aG9kLlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIGNvdmVyYWdlIGluZm9ybWF0aW9uIGZvciB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gICAgICovXG4gICAgZmlsZUNvdmVyYWdlRm9yOiBmdW5jdGlvbiAoZmlsZU5hbWUpIHtcbiAgICAgICAgdmFyIHJldCA9IHRoaXMuc3RvcmUuZ2V0T2JqZWN0KGZpbGVOYW1lKTtcbiAgICAgICAgdXRpbHMuYWRkRGVyaXZlZEluZm9Gb3JGaWxlKHJldCk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiByZXR1cm5zIGZpbGUgY292ZXJhZ2UgaW5mb3JtYXRpb24gZm9yIGFsbCBmaWxlcy4gVGhpcyBoYXMgdGhlIHNhbWUgZm9ybWF0IGFzXG4gICAgICogYW55IG9mIHRoZSBvYmplY3RzIHBhc3NlZCBpbiB0byB0aGUgYGFkZGAgbWV0aG9kLiBUaGUgbnVtYmVyIG9mIGtleXMgaW4gdGhpc1xuICAgICAqIG9iamVjdCB3aWxsIGJlIGEgc3VwZXJzZXQgb2YgYWxsIGtleXMgZm91bmQgaW4gdGhlIG9iamVjdHMgcGFzc2VkIHRvIGBhZGQoKWBcbiAgICAgKiBAbWV0aG9kIGdldEZpbmFsQ292ZXJhZ2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBtZXJnZWQgY292ZXJhZ2UgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBnZXRGaW5hbENvdmVyYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXQgPSB7fSxcbiAgICAgICAgICAgIHRoYXQgPSB0aGlzO1xuICAgICAgICB0aGlzLmZpbGVzKCkuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgcmV0W2ZpbGVdID0gdGhhdC5maWxlQ292ZXJhZ2VGb3IoZmlsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogZGlzcG9zZXMgdGhpcyBjb2xsZWN0b3IgYW5kIHJlY2xhaW1zIHRlbXBvcmFyeSByZXNvdXJjZXMgdXNlZCBpbiB0aGVcbiAgICAgKiBjb21wdXRhdGlvbi4gQ2FsbHMgYGRpc3Bvc2UoKWAgb24gdGhlIHVuZGVybHlpbmcgc3RvcmUuXG4gICAgICogQG1ldGhvZCBkaXNwb3NlXG4gICAgICovXG4gICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3JlLmRpc3Bvc2UoKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbGxlY3RvcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/collector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/command/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/command/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar Factory = __webpack_require__(/*! ../util/factory */ \"(ssr)/./node_modules/sc-istanbul/lib/util/factory.js\"),\n    factory = new Factory('command', __dirname, true);\n\nfunction Command() {}\n// add register, create, mix, loadAll, getCommandList, resolveCommandName to the Command object\nfactory.bindClassMethods(Command);\n\nCommand.prototype = {\n    toolName: function () {\n        return (__webpack_require__(/*! ../util/meta */ \"(ssr)/./node_modules/sc-istanbul/lib/util/meta.js\").NAME);\n    },\n\n    type: function () {\n        return this.constructor.TYPE;\n    },\n    synopsis: /* istanbul ignore next: base method */ function () {\n        return \"the developer has not written a one-line summary of the \" + this.type() + \" command\";\n    },\n    usage: /* istanbul ignore next: base method */ function () {\n        console.error(\"the developer has not provided a usage for the \" + this.type() + \" command\");\n    },\n    run: /* istanbul ignore next: abstract method */ function (args, callback) {\n        return callback(new Error(\"run: must be overridden for the \" + this.type() + \" command\"));\n    }\n};\n\nmodule.exports = Command;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL2NvbW1hbmQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLDZFQUFpQjtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsbUdBQTRCO0FBQzNDLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NjLWlzdGFuYnVsL2xpYi9jb21tYW5kL2luZGV4LmpzPzRlOGEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTIsIFlhaG9vISBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuXG52YXIgRmFjdG9yeSA9IHJlcXVpcmUoJy4uL3V0aWwvZmFjdG9yeScpLFxuICAgIGZhY3RvcnkgPSBuZXcgRmFjdG9yeSgnY29tbWFuZCcsIF9fZGlybmFtZSwgdHJ1ZSk7XG5cbmZ1bmN0aW9uIENvbW1hbmQoKSB7fVxuLy8gYWRkIHJlZ2lzdGVyLCBjcmVhdGUsIG1peCwgbG9hZEFsbCwgZ2V0Q29tbWFuZExpc3QsIHJlc29sdmVDb21tYW5kTmFtZSB0byB0aGUgQ29tbWFuZCBvYmplY3RcbmZhY3RvcnkuYmluZENsYXNzTWV0aG9kcyhDb21tYW5kKTtcblxuQ29tbWFuZC5wcm90b3R5cGUgPSB7XG4gICAgdG9vbE5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoJy4uL3V0aWwvbWV0YScpLk5BTUU7XG4gICAgfSxcblxuICAgIHR5cGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuVFlQRTtcbiAgICB9LFxuICAgIHN5bm9wc2lzOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogYmFzZSBtZXRob2QgKi8gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJ0aGUgZGV2ZWxvcGVyIGhhcyBub3Qgd3JpdHRlbiBhIG9uZS1saW5lIHN1bW1hcnkgb2YgdGhlIFwiICsgdGhpcy50eXBlKCkgKyBcIiBjb21tYW5kXCI7XG4gICAgfSxcbiAgICB1c2FnZTogLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGJhc2UgbWV0aG9kICovIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcInRoZSBkZXZlbG9wZXIgaGFzIG5vdCBwcm92aWRlZCBhIHVzYWdlIGZvciB0aGUgXCIgKyB0aGlzLnR5cGUoKSArIFwiIGNvbW1hbmRcIik7XG4gICAgfSxcbiAgICBydW46IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBhYnN0cmFjdCBtZXRob2QgKi8gZnVuY3Rpb24gKGFyZ3MsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJydW46IG11c3QgYmUgb3ZlcnJpZGRlbiBmb3IgdGhlIFwiICsgdGhpcy50eXBlKCkgKyBcIiBjb21tYW5kXCIpKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1hbmQ7XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/command/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/config.js":
/*!************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/config.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2013, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar path = __webpack_require__(/*! path */ \"path\"),\n    fs = __webpack_require__(/*! fs */ \"fs\"),\n    existsSync = fs.existsSync || path.existsSync,\n    CAMEL_PATTERN = /([a-z])([A-Z])/g,\n    YML_PATTERN = /\\.ya?ml$/,\n    yaml = __webpack_require__(/*! js-yaml */ \"(ssr)/./node_modules/js-yaml/index.js\"),\n    defaults = __webpack_require__(/*! ./report/common/defaults */ \"(ssr)/./node_modules/sc-istanbul/lib/report/common/defaults.js\");\n\nfunction defaultConfig(includeBackCompatAttrs) {\n    var ret = {\n        verbose: false,\n        instrumentation: {\n            root: '.',\n            extensions: ['.js'],\n            'default-excludes': true,\n            excludes: [],\n            'embed-source': false,\n            variable: '__coverage__',\n            compact: true,\n            'preserve-comments': false,\n            'complete-copy': false,\n            'save-baseline': false,\n            'baseline-file': './coverage/coverage-baseline.json',\n            'include-all-sources': false,\n            'include-pid': false,\n            'es-modules': false\n        },\n        reporting: {\n            print: 'summary',\n            reports: [ 'lcov' ],\n            dir: './coverage'\n        },\n        hooks: {\n            'hook-run-in-context': false,\n            'post-require-hook': null,\n            'handle-sigint': false\n        },\n        check: {\n            global: {\n                statements: 0,\n                lines: 0,\n                branches: 0,\n                functions: 0,\n                excludes: [] // Currently list of files (root + path). For future, extend to patterns.\n            },\n            each: {\n                statements: 0,\n                lines: 0,\n                branches: 0,\n                functions: 0,\n                excludes: []\n            }\n        }\n    };\n    ret.reporting.watermarks = defaults.watermarks();\n    ret.reporting['report-config'] = defaults.defaultReportConfig();\n\n    if (includeBackCompatAttrs) {\n        ret.instrumentation['preload-sources'] = false;\n    }\n\n    return ret;\n}\n\nfunction dasherize(word) {\n    return word.replace(CAMEL_PATTERN, function (match, lch, uch) {\n        return lch + '-' + uch.toLowerCase();\n    });\n}\nfunction isScalar(v) {\n    if (v === null) { return true; }\n    return v !== undefined && !Array.isArray(v) && typeof v !== 'object';\n}\n\nfunction isObject(v) {\n    return typeof v === 'object' && v !== null && !Array.isArray(v);\n}\n\nfunction mergeObjects(explicit, template) {\n\n    var ret = {};\n\n    Object.keys(template).forEach(function (k) {\n        var v1 = template[k],\n            v2 = explicit[k];\n\n        if (Array.isArray(v1)) {\n            ret[k] = Array.isArray(v2) && v2.length > 0 ? v2 : v1;\n        } else if (isObject(v1)) {\n            v2 = isObject(v2) ? v2 : {};\n            ret[k] = mergeObjects(v2, v1);\n        } else {\n            ret[k] = isScalar(v2) ? v2 : v1;\n        }\n    });\n    return ret;\n}\n\nfunction mergeDefaults(explicit, implicit) {\n    return mergeObjects(explicit || {}, implicit);\n}\n\nfunction addMethods() {\n    var args = Array.prototype.slice.call(arguments),\n        cons = args.shift();\n\n    args.forEach(function (arg) {\n        var method = arg,\n            property = dasherize(arg);\n        cons.prototype[method] = function () {\n            return this.config[property];\n        };\n    });\n}\n\n/**\n * Object that returns instrumentation options\n * @class InstrumentOptions\n * @module config\n * @constructor\n * @param config the instrumentation part of the config object\n */\nfunction InstrumentOptions(config) {\n    if (config['preload-sources']) {\n        console.error('The preload-sources option is deprecated, please use include-all-sources instead.');\n        config['include-all-sources'] = config['preload-sources'];\n    }\n    this.config = config;\n}\n\n/**\n * returns if default excludes should be turned on. Used by the `cover` command.\n * @method defaultExcludes\n * @return {Boolean} true if default excludes should be turned on\n */\n/**\n * returns if non-JS files should be copied during instrumentation. Used by the\n * `instrument` command.\n * @method completeCopy\n * @return {Boolean} true if non-JS files should be copied\n */\n/**\n * returns if the source should be embedded in the instrumented code. Used by the\n * `instrument` command.\n * @method embedSource\n * @return {Boolean} true if the source should be embedded in the instrumented code\n */\n/**\n * the coverage variable name to use. Used by the `instrument` command.\n * @method variable\n * @return {String} the coverage variable name to use\n */\n/**\n * returns if the output should be compact JS. Used by the `instrument` command.\n * @method compact\n * @return {Boolean} true if the output should be compact\n */\n/**\n * returns if comments should be preserved in the generated JS. Used by the\n * `cover` and `instrument` commands.\n * @method preserveComments\n * @return {Boolean} true if comments should be preserved in the generated JS\n */\n/**\n * returns if a zero-coverage baseline file should be written as part of\n * instrumentation. This allows reporting to display numbers for files that have\n * no tests. Used by the  `instrument` command.\n * @method saveBaseline\n * @return {Boolean} true if a baseline coverage file should be written.\n */\n/**\n * Sets the baseline coverage filename. Used by the  `instrument` command.\n * @method baselineFile\n * @return {String} the name of the baseline coverage file.\n */\n/**\n * returns if comments the JS to instrument contains es6 Module syntax.\n * @method esModules\n * @return {Boolean} true if code contains es6 import/export statements.\n */\n/**\n * returns if the coverage filename should include the PID. Used by the  `instrument` command.\n * @method includePid\n * @return {Boolean} true to include pid in coverage filename.\n */\n\n\naddMethods(InstrumentOptions,\n    'extensions', 'defaultExcludes', 'completeCopy',\n    'embedSource', 'variable', 'compact', 'preserveComments',\n    'saveBaseline', 'baselineFile', 'esModules',\n    'includeAllSources', 'includePid');\n\n/**\n * returns the root directory used by istanbul which is typically the root of the\n * source tree. Used by the `cover` and `report` commands.\n * @method root\n * @return {String} the root directory used by istanbul.\n */\nInstrumentOptions.prototype.root = function () { return path.resolve(this.config.root); };\n/**\n * returns an array of glob patterns that should be excluded for instrumentation.\n * Used by the `instrument` and `cover` commands.\n * @method excludes\n * @return {Array} an array of glob patterns that should be excluded for\n *  instrumentation.\n */\nInstrumentOptions.prototype.excludes = function (excludeTests) {\n    var defs;\n    if (this.defaultExcludes()) {\n        defs = [ '**/node_modules/**' ];\n        if (excludeTests) {\n            defs = defs.concat(['**/test/**', '**/tests/**']);\n        }\n        return defs.concat(this.config.excludes);\n    }\n    return this.config.excludes;\n};\n\n/**\n * Object that returns reporting options\n * @class ReportingOptions\n * @module config\n * @constructor\n * @param config the reporting part of the config object\n */\nfunction ReportingOptions(config) {\n    this.config = config;\n}\n\n/**\n * returns the kind of information to be printed on the console. May be one\n * of `summary`, `detail`, `both` or `none`. Used by the\n * `cover` command.\n * @method print\n * @return {String} the kind of information to print to the console at the end\n * of the `cover` command execution.\n */\n/**\n * returns a list of reports that should be generated at the end of a run. Used\n * by the `cover` and `report` commands.\n * @method reports\n * @return {Array} an array of reports that should be produced\n */\n/**\n * returns the directory under which reports should be generated. Used by the\n * `cover` and `report` commands.\n *\n * @method dir\n * @return {String} the directory under which reports should be generated.\n */\n/**\n * returns an object that has keys that are report format names and values that are objects\n * containing detailed configuration for each format. Running `istanbul help config`\n * will give you all the keys per report format that can be overridden.\n * Used by the `cover` and `report` commands.\n * @method reportConfig\n * @return {Object} detailed report configuration per report format.\n */\naddMethods(ReportingOptions, 'print', 'reports', 'dir', 'reportConfig');\n\nfunction isInvalidMark(v, key) {\n    var prefix = 'Watermark for [' + key + '] :';\n\n    if (v.length !== 2) {\n        return prefix + 'must be an array of length 2';\n    }\n    v[0] = Number(v[0]);\n    v[1] = Number(v[1]);\n\n    if (isNaN(v[0]) || isNaN(v[1])) {\n        return prefix + 'must have valid numbers';\n    }\n    if (v[0] < 0 || v[1] < 0) {\n        return prefix + 'must be positive numbers';\n    }\n    if (v[1] > 100) {\n        return prefix + 'cannot exceed 100';\n    }\n    if (v[1] <= v[0]) {\n        return prefix + 'low must be less than high';\n    }\n    return null;\n}\n\n/**\n * returns the low and high watermarks to be used to designate whether coverage\n * is `low`, `medium` or `high`. Statements, functions, branches and lines can\n * have independent watermarks. These are respected by all reports\n * that color for low, medium and high coverage. See the default configuration for exact syntax\n * using `istanbul help config`. Used by the `cover` and `report` commands.\n *\n * @method watermarks\n * @return {Object} an object containing low and high watermarks for statements,\n *  branches, functions and lines.\n */\nReportingOptions.prototype.watermarks = function () {\n    var v = this.config.watermarks,\n        defs = defaults.watermarks(),\n        ret = {};\n\n    Object.keys(defs).forEach(function (k) {\n        var mark = v[k], //it will already be a non-zero length array because of the way the merge works\n            message = isInvalidMark(mark, k);\n        if (message) {\n            console.error(message);\n            ret[k] = defs[k];\n        } else {\n            ret[k] = mark;\n        }\n    });\n    return ret;\n};\n\n/**\n * Object that returns hook options. Note that istanbul does not provide an\n * option to hook `require`. This is always done by the `cover` command.\n * @class HookOptions\n * @module config\n * @constructor\n * @param config the hooks part of the config object\n */\nfunction HookOptions(config) {\n    this.config = config;\n}\n\n/**\n * returns if `vm.runInThisContext` needs to be hooked, in addition to the standard\n * `require` hooks added by istanbul. This should be true for code that uses\n * RequireJS for example. Used by the `cover` command.\n * @method hookRunInContext\n * @return {Boolean} true if `vm.runInThisContext` needs to be hooked for coverage\n */\n/**\n * returns a path to JS file or a dependent module that should be used for\n * post-processing files after they have been required. See the `yui-istanbul` module for\n * an example of a post-require hook. This particular hook modifies the yui loader when\n * that file is required to add istanbul interceptors. Use by the `cover` command\n *\n * @method postRequireHook\n * @return {String} a path to a JS file or the name of a node module that needs\n * to be used as a `require` post-processor\n */\n/**\n * returns if istanbul needs to add a SIGINT (control-c, usually) handler to\n * save coverage information. Useful for getting code coverage out of processes\n * that run forever and need a SIGINT to terminate.\n * @method handleSigint\n * @return {Boolean} true if SIGINT needs to be hooked to write coverage information\n */\n\naddMethods(HookOptions, 'hookRunInContext', 'postRequireHook', 'handleSigint');\n\n/**\n * represents the istanbul configuration and provides sub-objects that can\n * return instrumentation, reporting and hook options respectively.\n * Usage\n * -----\n *\n *      var configObj = require('istanbul').config.loadFile();\n *\n *      console.log(configObj.reporting.reports());\n *\n * @class Configuration\n * @module config\n * @param {Object} obj  the base object to use as the configuration\n * @param {Object} overrides optional - override attributes that are merged into\n *  the base config\n * @constructor\n */\nfunction Configuration(obj, overrides) {\n\n    var config = mergeDefaults(obj, defaultConfig(true));\n    if (isObject(overrides)) {\n        config = mergeDefaults(overrides, config);\n    }\n    if (config.verbose) {\n        console.error('Using configuration');\n        console.error('-------------------');\n        console.error(yaml.safeDump(config, { indent: 4, flowLevel: 3 }));\n        console.error('-------------------\\n');\n    }\n    this.verbose = config.verbose;\n    this.instrumentation = new InstrumentOptions(config.instrumentation);\n    this.reporting = new ReportingOptions(config.reporting);\n    this.hooks = new HookOptions(config.hooks);\n    this.check = config.check; // Pass raw config sub-object.\n}\n\n/**\n * true if verbose logging is required\n * @property verbose\n * @type Boolean\n */\n/**\n * instrumentation options\n * @property instrumentation\n * @type InstrumentOptions\n */\n/**\n * reporting options\n * @property reporting\n * @type ReportingOptions\n */\n/**\n * hook options\n * @property hooks\n * @type HookOptions\n */\n\n\nfunction loadFile(file, overrides) {\n    var defaultConfigFile = path.resolve('.istanbul.yml'),\n        configObject;\n\n    if (file) {\n        if (!existsSync(file)) {\n            throw new Error('Invalid configuration file specified:' + file);\n        }\n    } else {\n        if (existsSync(defaultConfigFile)) {\n            file = defaultConfigFile;\n        }\n    }\n\n    if (file) {\n        if (overrides && overrides.verbose === true) {\n            console.error('Loading config: ' + file);\n        }\n        configObject = file.match(YML_PATTERN) ?\n            yaml.safeLoad(fs.readFileSync(file, 'utf8'), { filename: file }) :\n            __webpack_require__(\"(ssr)/./node_modules/sc-istanbul/lib sync recursive\")(path.resolve(file));\n    }\n\n    return new Configuration(configObject, overrides);\n}\n\nfunction loadObject(obj, overrides) {\n    return new Configuration(obj, overrides);\n}\n\n/**\n * methods to load the configuration object.\n * Usage\n * -----\n *\n *      var config = require('istanbul').config,\n *          configObj = config.loadFile();\n *\n *      console.log(configObj.reporting.reports());\n *\n * @class Config\n * @module main\n * @static\n */\nmodule.exports = {\n    /**\n     * loads the specified configuration file with optional overrides. Throws\n     * when a file is specified and it is not found.\n     * @method loadFile\n     * @static\n     * @param {String} file the file to load. If falsy, the default config file, if present, is loaded.\n     *  If not a default config is used.\n     * @param {Object} overrides - an object with override keys that are merged into the\n     *  config object loaded\n     * @return {Configuration} the config object with overrides applied\n     */\n    loadFile: loadFile,\n    /**\n     * loads the specified configuration object with optional overrides.\n     * @method loadObject\n     * @static\n     * @param {Object} obj the object to use as the base configuration.\n     * @param {Object} overrides - an object with override keys that are merged into the\n     *  config object\n     * @return {Configuration} the config object with overrides applied\n     */\n    loadObject: loadObject,\n    /**\n     * returns the default configuration object. Note that this is a plain object\n     * and not a `Configuration` instance.\n     * @method defaultConfig\n     * @static\n     * @return {Object} an object that represents the default config\n     */\n    defaultConfig: defaultConfig\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/hook.js":
/*!**********************************************!*\
  !*** ./node_modules/sc-istanbul/lib/hook.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n/**\n * provides a mechanism to transform code in the scope of `require` or `vm.createScript`.\n * This mechanism is general and relies on a user-supplied `matcher` function that determines when transformations should be\n * performed and a user-supplied `transformer` function that performs the actual transform.\n * Instrumenting code for coverage is one specific example of useful hooking.\n *\n * Note that both the `matcher` and `transformer` must execute synchronously.\n *\n * For the common case of matching filesystem paths based on inclusion/ exclusion patterns, use the `matcherFor`\n * function in the istanbul API to get a matcher.\n *\n * It is up to the transformer to perform processing with side-effects, such as caching, storing the original\n * source code to disk in case of dynamically generated scripts etc. The `Store` class can help you with this.\n *\n * Usage\n * -----\n *\n *      var hook = require('istanbul').hook,\n *          myMatcher = function (file) { return file.match(/foo/); },\n *          myTransformer = function (code, file) { return 'console.log(\"' + file + '\");' + code; };\n *\n *      hook.hookRequire(myMatcher, myTransformer);\n *\n *      var foo = require('foo'); //will now print foo's module path to console\n *\n * @class Hook\n * @module main\n */\nvar path = __webpack_require__(/*! path */ \"path\"),\n    fs = __webpack_require__(/*! fs */ \"fs\"),\n    Module = __webpack_require__(/*! module */ \"module\"),\n    vm = __webpack_require__(/*! vm */ \"vm\"),\n    originalLoaders = {},\n    originalCreateScript = vm.createScript,\n    originalRunInThisContext = vm.runInThisContext;\n\nfunction transformFn(matcher, transformer, verbose) {\n\n    return function (code, filename) {\n        var shouldHook = typeof filename === 'string' && matcher(path.resolve(filename)),\n            transformed,\n            changed = false;\n\n        if (shouldHook) {\n            if (verbose) {\n                console.error('Module load hook: transform [' + filename + ']');\n            }\n            try {\n                transformed = transformer(code, filename);\n                changed = true;\n            } catch (ex) {\n                console.error('Transformation error; return original code');\n                console.error(ex);\n                transformed = code;\n            }\n        } else {\n            transformed = code;\n        }\n        return { code: transformed, changed: changed };\n    };\n}\n\nfunction unloadRequireCache(matcher) {\n    if (matcher && \"function\" !== 'undefined' && __webpack_require__(\"(ssr)/./node_modules/sc-istanbul/lib sync recursive\") && __webpack_require__.c) {\n        Object.keys(__webpack_require__.c).forEach(function (filename) {\n            if (matcher(filename)) {\n                delete __webpack_require__.c[filename];\n            }\n        });\n    }\n}\n/**\n * hooks `require` to return transformed code to the node module loader.\n * Exceptions in the transform result in the original code being used instead.\n * @method hookRequire\n * @static\n * @param matcher {Function(filePath)} a function that is called with the absolute path to the file being\n *  `require`-d. Should return a truthy value when transformations need to be applied to the code, a falsy value otherwise\n * @param transformer {Function(code, filePath)} a function called with the original code and the associated path of the file\n *  from where the code was loaded. Should return the transformed code.\n * @param options {Object} options Optional.\n * @param {Boolean} [options.verbose] write a line to standard error every time the transformer is called\n * @param {Function} [options.postLoadHook] a function that is called with the name of the file being\n *  required. This is called after the require is processed irrespective of whether it was transformed.\n */\nfunction hookRequire(matcher, transformer, options) {\n    options = options || {};\n    var extensions,\n        fn = transformFn(matcher, transformer, options.verbose),\n        postLoadHook = options.postLoadHook &&\n            typeof options.postLoadHook === 'function' ? options.postLoadHook : null;\n\n    extensions = options.extensions || ['.js'];\n\n    extensions.forEach(function(ext){\n        if (!(ext in originalLoaders)) {\n            originalLoaders[ext] = Module._extensions[ext] || Module._extensions['.js'];\n        }\n        Module._extensions[ext] = function (module, filename) {\n            var ret = fn(fs.readFileSync(filename, 'utf8'), filename);\n            if (ret.changed) {\n                module._compile(ret.code, filename);\n            } else {\n                originalLoaders[ext](module, filename);\n            }\n            if (postLoadHook) {\n                postLoadHook(filename);\n            }\n        };\n    });\n}\n/**\n * unhook `require` to restore it to its original state.\n * @method unhookRequire\n * @static\n */\nfunction unhookRequire() {\n    Object.keys(originalLoaders).forEach(function(ext) {\n        Module._extensions[ext] = originalLoaders[ext];\n    });\n}\n/**\n * hooks `vm.createScript` to return transformed code out of which a `Script` object will be created.\n * Exceptions in the transform result in the original code being used instead.\n * @method hookCreateScript\n * @static\n * @param matcher {Function(filePath)} a function that is called with the filename passed to `vm.createScript`\n *  Should return a truthy value when transformations need to be applied to the code, a falsy value otherwise\n * @param transformer {Function(code, filePath)} a function called with the original code and the filename passed to\n *  `vm.createScript`. Should return the transformed code.\n * @param options {Object} options Optional.\n * @param {Boolean} [options.verbose] write a line to standard error every time the transformer is called\n */\nfunction hookCreateScript(matcher, transformer, opts) {\n    opts = opts || {};\n    var fn = transformFn(matcher, transformer, opts.verbose);\n    vm.createScript = function (code, file) {\n        var ret = fn(code, file);\n        return originalCreateScript(ret.code, file);\n    };\n}\n\n/**\n * unhooks vm.createScript, restoring it to its original state.\n * @method unhookCreateScript\n * @static\n */\nfunction unhookCreateScript() {\n    vm.createScript = originalCreateScript;\n}\n\n\n/**\n * hooks `vm.runInThisContext` to return transformed code.\n * @method hookRunInThisContext\n * @static\n * @param matcher {Function(filePath)} a function that is called with the filename passed to `vm.createScript`\n *  Should return a truthy value when transformations need to be applied to the code, a falsy value otherwise\n * @param transformer {Function(code, filePath)} a function called with the original code and the filename passed to\n *  `vm.createScript`. Should return the transformed code.\n * @param options {Object} options Optional.\n * @param {Boolean} [options.verbose] write a line to standard error every time the transformer is called\n */\nfunction hookRunInThisContext(matcher, transformer, opts) {\n    opts = opts || {};\n    var fn = transformFn(matcher, transformer, opts.verbose);\n    vm.runInThisContext = function (code, file) {\n        var ret = fn(code, file);\n        return originalRunInThisContext(ret.code, file);\n    };\n}\n\n/**\n * unhooks vm.runInThisContext, restoring it to its original state.\n * @method unhookRunInThisContext\n * @static\n */\nfunction unhookRunInThisContext() {\n    vm.runInThisContext = originalRunInThisContext;\n}\n\n\nmodule.exports = {\n    hookRequire: hookRequire,\n    unhookRequire: unhookRequire,\n    hookCreateScript: hookCreateScript,\n    unhookCreateScript: unhookCreateScript,\n    hookRunInThisContext : hookRunInThisContext,\n    unhookRunInThisContext : unhookRunInThisContext,\n    unloadRequireCache: unloadRequireCache\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/hook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/instrumenter.js":
/*!******************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/instrumenter.js ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n/*global esprima, escodegen, window */\n(function (isNode) {\n    \"use strict\";\n    var SYNTAX,\n        nodeType,\n        ESP = isNode ? __webpack_require__(/*! esprima */ \"(ssr)/./node_modules/esprima/esprima.js\") : esprima,\n        ESPGEN = isNode ? __webpack_require__(/*! escodegen */ \"(ssr)/./node_modules/escodegen/escodegen.js\") : escodegen,  //TODO - package as dependency\n        crypto = isNode ? __webpack_require__(/*! crypto */ \"crypto\") : null,\n        LEADER_WRAP = '(function () { ',\n        TRAILER_WRAP = '\\n}());',\n        COMMENT_RE = /^\\s*istanbul\\s+ignore\\s+(if|else|next)(?=\\W|$)/,\n        astgen,\n        preconditions,\n        cond,\n        isArray = Array.isArray;\n\n    /* istanbul ignore if: untestable */\n    if (!isArray) {\n        isArray = function (thing) { return thing &&  Object.prototype.toString.call(thing) === '[object Array]'; };\n    }\n\n    if (!isNode) {\n        preconditions = {\n            'Could not find esprima': ESP,\n            'Could not find escodegen': ESPGEN,\n            'JSON object not in scope': JSON,\n            'Array does not implement push': [].push,\n            'Array does not implement unshift': [].unshift\n        };\n        /* istanbul ignore next: untestable */\n        for (cond in preconditions) {\n            if (preconditions.hasOwnProperty(cond)) {\n                if (!preconditions[cond]) { throw new Error(cond); }\n            }\n        }\n    }\n\n    function generateTrackerVar(filename, omitSuffix) {\n        var hash, suffix;\n        if (crypto !== null) {\n            hash = crypto.createHash('md5');\n            hash.update(filename);\n            suffix = hash.digest('base64');\n            //trim trailing equal signs, turn identifier unsafe chars to safe ones + => _ and / => $\n            suffix = suffix.replace(new RegExp('=', 'g'), '')\n                .replace(new RegExp('\\\\+', 'g'), '_')\n                .replace(new RegExp('/', 'g'), '$');\n        } else {\n            window.__cov_seq = window.__cov_seq || 0;\n            window.__cov_seq += 1;\n            suffix = window.__cov_seq;\n        }\n        return '__cov_' + (omitSuffix ? '' : suffix);\n    }\n\n    function pushAll(ary, thing) {\n        if (!isArray(thing)) {\n            thing = [ thing ];\n        }\n        Array.prototype.push.apply(ary, thing);\n    }\n\n    SYNTAX = {\n        // keep in sync with estraverse's VisitorKeys\n        AssignmentExpression: ['left', 'right'],\n        AssignmentPattern: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        ArrowFunctionExpression: ['params', 'body'],\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ClassBody: ['body'],\n        ClassDeclaration: ['id', 'superClass', 'body'],\n        ClassExpression: ['id', 'superClass', 'body'],\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExportAllDeclaration: ['source'],\n        ExportDefaultDeclaration: ['declaration'],\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\n        ExportSpecifier: ['exported', 'local'],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        ForOfStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        ImportDeclaration: ['specifiers', 'source'],\n        ImportDefaultSpecifier: ['local'],\n        ImportNamespaceSpecifier: ['local'],\n        ImportSpecifier: ['imported', 'local'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MetaProperty: ['meta', 'property'],\n        MemberExpression: ['object', 'property'],\n        MethodDefinition: ['key', 'value'],\n        ModuleSpecifier: [],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        RestElement: [ 'argument' ],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SpreadElement: ['argument'],\n        Super: [],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        TaggedTemplateExpression: ['tag', 'quasi'],\n        TemplateElement: [],\n        TemplateLiteral: ['quasis', 'expressions'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handler', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    for (nodeType in SYNTAX) {\n        /* istanbul ignore else: has own property */\n        if (SYNTAX.hasOwnProperty(nodeType)) {\n            SYNTAX[nodeType] = { name: nodeType, children: SYNTAX[nodeType] };\n        }\n    }\n\n    astgen = {\n        variable: function (name) { return { type: SYNTAX.Identifier.name, name: name }; },\n        stringLiteral: function (str) { return { type: SYNTAX.Literal.name, value: String(str) }; },\n        numericLiteral: function (num) { return { type: SYNTAX.Literal.name, value: Number(num) }; },\n        statement: function (contents) { return { type: SYNTAX.ExpressionStatement.name, expression: contents }; },\n        dot: function (obj, field) { return { type: SYNTAX.MemberExpression.name, computed: false, object: obj, property: field }; },\n        subscript: function (obj, sub) { return { type: SYNTAX.MemberExpression.name, computed: true, object: obj, property: sub }; },\n        postIncrement: function (obj) { return { type: SYNTAX.UpdateExpression.name, operator: '++', prefix: false, argument: obj }; },\n        sequence: function (one, two) { return { type: SYNTAX.SequenceExpression.name, expressions: [one, two] }; },\n        returnStatement: function (expr) { return { type: SYNTAX.ReturnStatement.name, argument: expr }; }\n    };\n\n    function Walker(walkMap, preprocessor, scope, debug) {\n        this.walkMap = walkMap;\n        this.preprocessor = preprocessor;\n        this.scope = scope;\n        this.debug = debug;\n        if (this.debug) {\n            this.level = 0;\n            this.seq = true;\n        }\n    }\n\n    function defaultWalker(node, walker) {\n\n        var type = node.type,\n            preprocessor,\n            postprocessor,\n            children = SYNTAX[type],\n            // don't run generated nodes thru custom walks otherwise we will attempt to instrument the instrumentation code :)\n            applyCustomWalker = !!node.loc || node.type === SYNTAX.Program.name,\n            walkerFn = applyCustomWalker ? walker.walkMap[type] : null,\n            i,\n            j,\n            walkFnIndex,\n            childType,\n            childNode,\n            ret,\n            childArray,\n            childElement,\n            pathElement,\n            assignNode,\n            isLast;\n\n        if (!SYNTAX[type]) {\n            console.error(node);\n            console.error('Unsupported node type:' + type);\n            return;\n        }\n        children = SYNTAX[type].children;\n        /* istanbul ignore if: guard */\n        if (node.walking) { throw new Error('Infinite regress: Custom walkers may NOT call walker.apply(node)'); }\n        node.walking = true;\n\n        ret = walker.apply(node, walker.preprocessor);\n\n        preprocessor = ret.preprocessor;\n        if (preprocessor) {\n            delete ret.preprocessor;\n            ret = walker.apply(node, preprocessor);\n        }\n\n        if (isArray(walkerFn)) {\n            for (walkFnIndex = 0; walkFnIndex < walkerFn.length; walkFnIndex += 1) {\n                isLast = walkFnIndex === walkerFn.length - 1;\n                ret = walker.apply(ret, walkerFn[walkFnIndex]);\n                /*istanbul ignore next: paranoid check */\n                if (ret.type !== type && !isLast) {\n                    throw new Error('Only the last walker is allowed to change the node type: [type was: ' + type + ' ]');\n                }\n            }\n        } else {\n            if (walkerFn) {\n                ret = walker.apply(node, walkerFn);\n            }\n        }\n\n        if (node.skipSelf) {\n            return;\n        }\n\n        for (i = 0; i < children.length; i += 1) {\n            childType = children[i];\n            childNode = node[childType];\n            if (childNode && !childNode.skipWalk) {\n                pathElement = { node: node, property: childType };\n                if (isArray(childNode)) {\n                    childArray = [];\n                    for (j = 0; j < childNode.length; j += 1) {\n                        childElement = childNode[j];\n                        pathElement.index = j;\n                        if (childElement) {\n                          assignNode = walker.apply(childElement, null, pathElement);\n                          if (isArray(assignNode.prepend)) {\n                              pushAll(childArray, assignNode.prepend);\n                              delete assignNode.prepend;\n                          }\n                        } else {\n                            assignNode = undefined;\n                        }\n                        pushAll(childArray, assignNode);\n                    }\n                    node[childType] = childArray;\n                } else {\n                    assignNode = walker.apply(childNode, null, pathElement);\n                    /*istanbul ignore if: paranoid check */\n                    if (isArray(assignNode.prepend)) {\n                        throw new Error('Internal error: attempt to prepend statements in disallowed (non-array) context');\n                        /* if this should be allowed, this is how to solve it\n                        tmpNode = { type: 'BlockStatement', body: [] };\n                        pushAll(tmpNode.body, assignNode.prepend);\n                        pushAll(tmpNode.body, assignNode);\n                        node[childType] = tmpNode;\n                        delete assignNode.prepend;\n                        */\n                    } else {\n                        node[childType] = assignNode;\n                    }\n                }\n            }\n        }\n\n        postprocessor = ret.postprocessor;\n        if (postprocessor) {\n            delete ret.postprocessor;\n            ret = walker.apply(ret, postprocessor);\n        }\n\n        delete node.walking;\n\n        return ret;\n    }\n\n    Walker.prototype = {\n        startWalk: function (node) {\n            this.path = [];\n            this.apply(node);\n        },\n\n        apply: function (node, walkFn, pathElement) {\n            var ret, i, seq, prefix;\n\n            walkFn = walkFn || defaultWalker;\n            if (this.debug) {\n                this.seq += 1;\n                this.level += 1;\n                seq = this.seq;\n                prefix = '';\n                for (i = 0; i < this.level; i += 1) { prefix += '    '; }\n                console.log(prefix + 'Enter (' + seq + '):' + node.type);\n            }\n            if (pathElement) { this.path.push(pathElement); }\n            ret = walkFn.call(this.scope, node, this);\n            if (pathElement) { this.path.pop(); }\n            if (this.debug) {\n                this.level -= 1;\n                console.log(prefix + 'Return (' + seq + '):' + node.type);\n            }\n            return ret || node;\n        },\n\n        startLineForNode: function (node) {\n            return node && node.loc && node.loc.start ? node.loc.start.line : /* istanbul ignore next: guard */ null;\n        },\n\n        ancestor: function (n) {\n            return this.path.length > n - 1 ? this.path[this.path.length - n] : /* istanbul ignore next: guard */ null;\n        },\n\n        parent: function () {\n            return this.ancestor(1);\n        },\n\n        isLabeled: function () {\n            var el = this.parent();\n            return el && el.node.type === SYNTAX.LabeledStatement.name;\n        }\n    };\n\n    /**\n     * mechanism to instrument code for coverage. It uses the `esprima` and\n     * `escodegen` libraries for JS parsing and code generation respectively.\n     *\n     * Works on `node` as well as the browser.\n     *\n     * Usage on nodejs\n     * ---------------\n     *\n     *      var instrumenter = new require('istanbul').Instrumenter(),\n     *          changed = instrumenter.instrumentSync('function meaningOfLife() { return 42; }', 'filename.js');\n     *\n     * Usage in a browser\n     * ------------------\n     *\n     * Load `esprima.js`, `escodegen.js` and `instrumenter.js` (this file) using `script` tags or other means.\n     *\n     * Create an instrumenter object as:\n     *\n     *      var instrumenter = new Instrumenter(),\n     *          changed = instrumenter.instrumentSync('function meaningOfLife() { return 42; }', 'filename.js');\n     *\n     * Aside from demonstration purposes, it is unclear why you would want to instrument code in a browser.\n     *\n     * @class Instrumenter\n     * @constructor\n     * @param {Object} options Optional. Configuration options.\n     * @param {String} [options.coverageVariable] the global variable name to use for\n     *      tracking coverage. Defaults to `__coverage__`\n     * @param {Boolean} [options.embedSource] whether to embed the source code of every\n     *      file as an array in the file coverage object for that file. Defaults to `false`\n     * @param {Boolean} [options.preserveComments] whether comments should be preserved in the output. Defaults to `false`\n     * @param {Boolean} [options.noCompact] emit readable code when set. Defaults to `false`\n     * @param {Boolean} [options.esModules] whether the code to instrument contains uses es\n     *      imports or exports.\n     * @param {Boolean} [options.noAutoWrap] do not automatically wrap the source in\n     *      an anonymous function before covering it. By default, code is wrapped in\n     *      an anonymous function before it is parsed. This is done because\n     *      some nodejs libraries have `return` statements outside of\n     *      a function which is technically invalid Javascript and causes the parser to fail.\n     *      This construct, however, works correctly in node since module loading\n     *      is done in the context of an anonymous function.\n     *\n     * Note that the semantics of the code *returned* by the instrumenter does not change in any way.\n     * The function wrapper is \"unwrapped\" before the instrumented code is generated.\n     * @param {Object} [options.codeGenerationOptions] an object that is directly passed to the `escodegen`\n     *      library as configuration for code generation. The `noCompact` setting is not honored when this\n     *      option is specified\n     * @param {Boolean} [options.debug] assist in debugging. Currently, the only effect of\n     *      setting this option is a pretty-print of the coverage variable. Defaults to `false`\n     * @param {Boolean} [options.walkDebug] assist in debugging of the AST walker used by this class.\n     *\n     */\n    function Instrumenter(options) {\n        this.opts = options || {\n            debug: false,\n            walkDebug: false,\n            coverageVariable: '__coverage__',\n            codeGenerationOptions: undefined,\n            noAutoWrap: false,\n            noCompact: false,\n            embedSource: false,\n            preserveComments: false,\n            esModules: false\n        };\n\n        if (this.opts.esModules && !this.opts.noAutoWrap) {\n            this.opts.noAutoWrap = true;\n            if (this.opts.debug) {\n                console.log('Setting noAutoWrap to true as required by esModules');\n            }\n        }\n\n        this.walker = new Walker({\n            ArrowFunctionExpression: [ this.arrowBlockConverter ],\n            ExpressionStatement: this.coverStatement,\n            ExportNamedDeclaration: this.coverExport,\n            BreakStatement: this.coverStatement,\n            ContinueStatement: this.coverStatement,\n            DebuggerStatement: this.coverStatement,\n            ReturnStatement: this.coverStatement,\n            ThrowStatement: this.coverStatement,\n            TryStatement: [ this.paranoidHandlerCheck, this.coverStatement],\n            VariableDeclaration: this.coverStatement,\n            IfStatement: [ this.ifBlockConverter, this.coverStatement, this.ifBranchInjector ],\n            ForStatement: [ this.skipInit, this.loopBlockConverter, this.coverStatement ],\n            ForInStatement: [ this.skipLeft, this.loopBlockConverter, this.coverStatement ],\n            ForOfStatement: [ this.skipLeft, this.loopBlockConverter, this.coverStatement ],\n            WhileStatement: [ this.loopBlockConverter, this.coverStatement ],\n            DoWhileStatement: [ this.loopBlockConverter, this.coverStatement ],\n            SwitchStatement: [ this.coverStatement, this.switchBranchInjector ],\n            SwitchCase: [ this.switchCaseInjector ],\n            WithStatement: [ this.withBlockConverter, this.coverStatement ],\n            FunctionDeclaration: [ this.coverFunction, this.coverStatement ],\n            FunctionExpression: this.coverFunction,\n            LabeledStatement: this.coverStatement,\n            ConditionalExpression: this.conditionalBranchInjector,\n            LogicalExpression: this.logicalExpressionBranchInjector,\n            ObjectExpression: this.maybeAddType,\n            MetaProperty: this.coverMetaProperty,\n        }, this.extractCurrentHint, this, this.opts.walkDebug);\n\n        //unit testing purposes only\n        if (this.opts.backdoor && this.opts.backdoor.omitTrackerSuffix) {\n            this.omitTrackerSuffix = true;\n        }\n    }\n\n    Instrumenter.prototype = {\n        /**\n         * synchronous instrumentation method. Throws when illegal code is passed to it\n         * @method instrumentSync\n         * @param {String} code the code to be instrumented as a String\n         * @param {String} filename Optional. The name of the file from which\n         *  the code was read. A temporary filename is generated when not specified.\n         *  Not specifying a filename is only useful for unit tests and demonstrations\n         *  of this library.\n         */\n        instrumentSync: function (code, filename) {\n            var program;\n\n            //protect from users accidentally passing in a Buffer object instead\n            if (typeof code !== 'string') { throw new Error('Code must be string'); }\n            if (code.charAt(0) === '#') { //shebang, 'comment' it out, won't affect syntax tree locations for things we care about\n                code = '//' + code;\n            }\n            if (!this.opts.noAutoWrap) {\n                code = LEADER_WRAP + code + TRAILER_WRAP;\n            }\n            try {\n                program = ESP.parse(code, {\n                    loc: true,\n                    range: true,\n                    tokens: this.opts.preserveComments,\n                    comment: true,\n                    sourceType: this.opts.esModules ? 'module' : 'script'\n                });\n            } catch (e) {\n                console.log('Failed to parse file: ' + filename);\n                throw e;\n            }\n            if (this.opts.preserveComments) {\n                program = ESPGEN.attachComments(program, program.comments, program.tokens);\n            }\n            if (!this.opts.noAutoWrap) {\n                program = {\n                    type: SYNTAX.Program.name,\n                    body: program.body[0].expression.callee.body.body,\n                    comments: program.comments\n                };\n            }\n            return this.instrumentASTSync(program, filename, code);\n        },\n        filterHints: function (comments) {\n            var ret = [],\n                i,\n                comment,\n                groups;\n            if (!(comments && isArray(comments))) {\n                return ret;\n            }\n            for (i = 0; i < comments.length; i += 1) {\n                comment = comments[i];\n                /* istanbul ignore else: paranoid check */\n                if (comment && comment.value && comment.range && isArray(comment.range)) {\n                    groups = String(comment.value).match(COMMENT_RE);\n                    if (groups) {\n                        ret.push({ type: groups[1], start: comment.range[0], end: comment.range[1] });\n                    }\n                }\n            }\n            return ret;\n        },\n        extractCurrentHint: function (node) {\n            if (!node.range) { return; }\n            var i = this.currentState.lastHintPosition + 1,\n                hints = this.currentState.hints,\n                nodeStart = node.range[0],\n                hint;\n            this.currentState.currentHint = null;\n            while (i < hints.length) {\n                hint = hints[i];\n                if (hint.end < nodeStart) {\n                    this.currentState.currentHint = hint;\n                    this.currentState.lastHintPosition = i;\n                    i += 1;\n                } else {\n                    break;\n                }\n            }\n        },\n        /**\n         * synchronous instrumentation method that instruments an AST instead.\n         * @method instrumentASTSync\n         * @param {String} program the AST to be instrumented\n         * @param {String} filename Optional. The name of the file from which\n         *  the code was read. A temporary filename is generated when not specified.\n         *  Not specifying a filename is only useful for unit tests and demonstrations\n         *  of this library.\n         *  @param {String} originalCode the original code corresponding to the AST,\n         *  used for embedding the source into the coverage object\n         */\n        instrumentASTSync: function (program, filename, originalCode) {\n            var usingStrict = false,\n                codegenOptions,\n                generated,\n                preamble,\n                lineCount,\n                i;\n            filename = filename || String(new Date().getTime()) + '.js';\n            this.sourceMap = null;\n            this.coverState = {\n                path: filename,\n                s: {},\n                b: {},\n                f: {},\n                fnMap: {},\n                statementMap: {},\n                branchMap: {}\n            };\n            this.currentState = {\n                trackerVar: generateTrackerVar(filename, this.omitTrackerSuffix),\n                func: 0,\n                branch: 0,\n                variable: 0,\n                statement: 0,\n                hints: this.filterHints(program.comments),\n                currentHint: null,\n                lastHintPosition: -1,\n                ignoring: 0\n            };\n            if (program.body && program.body.length > 0 && this.isUseStrictExpression(program.body[0])) {\n                //nuke it\n                program.body.shift();\n                //and add it back at code generation time\n                usingStrict = true;\n            }\n            this.walker.startWalk(program);\n            codegenOptions = this.opts.codeGenerationOptions || { format: { compact: !this.opts.noCompact }};\n            codegenOptions.comment = this.opts.preserveComments;\n            //console.log(JSON.stringify(program, undefined, 2));\n\n            generated = ESPGEN.generate(program, codegenOptions);\n            preamble = this.getPreamble(originalCode || '', usingStrict);\n\n            if (generated.map && generated.code) {\n                lineCount = preamble.split(/\\r\\n|\\r|\\n/).length;\n                // offset all the generated line numbers by the number of lines in the preamble\n                for (i = 0; i < generated.map._mappings._array.length; i += 1) {\n                    generated.map._mappings._array[i].generatedLine += lineCount;\n                }\n                this.sourceMap = generated.map;\n                generated = generated.code;\n            }\n\n            return preamble + '\\n' + generated + '\\n';\n        },\n        /**\n         * Callback based instrumentation. Note that this still executes synchronously in the same process tick\n         * and calls back immediately. It only provides the options for callback style error handling as\n         * opposed to a `try-catch` style and nothing more. Implemented as a wrapper over `instrumentSync`\n         *\n         * @method instrument\n         * @param {String} code the code to be instrumented as a String\n         * @param {String} filename Optional. The name of the file from which\n         *  the code was read. A temporary filename is generated when not specified.\n         *  Not specifying a filename is only useful for unit tests and demonstrations\n         *  of this library.\n         * @param {Function(err, instrumentedCode)} callback - the callback function\n         */\n        instrument: function (code, filename, callback) {\n\n            if (!callback && typeof filename === 'function') {\n                callback = filename;\n                filename = null;\n            }\n            try {\n                callback(null, this.instrumentSync(code, filename));\n            } catch (ex) {\n                callback(ex);\n            }\n        },\n        /**\n         * returns the file coverage object for the code that was instrumented\n         * just before calling this method. Note that this represents a\n         * \"zero-coverage\" object which is not even representative of the code\n         * being loaded in node or a browser (which would increase the statement\n         * counts for mainline code).\n         * @method lastFileCoverage\n         * @return {Object} a \"zero-coverage\" file coverage object for the code last instrumented\n         * by this instrumenter\n         */\n        lastFileCoverage: function () {\n            return this.coverState;\n        },\n        /**\n         * returns the source map object for the code that was instrumented\n         * just before calling this method.\n         * @method lastSourceMap\n         * @return {Object} a source map object for the code last instrumented\n         * by this instrumenter\n         */\n        lastSourceMap: function () {\n            return this.sourceMap;\n        },\n        fixColumnPositions: function (coverState) {\n            var offset = LEADER_WRAP.length,\n                fixer = function (loc) {\n                    if (loc.start.line === 1) {\n                        loc.start.column -= offset;\n                    }\n                    if (loc.end.line === 1) {\n                        loc.end.column -= offset;\n                    }\n                },\n                k,\n                obj,\n                i,\n                locations;\n\n            obj = coverState.statementMap;\n            for (k in obj) {\n                /* istanbul ignore else: has own property */\n                if (obj.hasOwnProperty(k)) { fixer(obj[k]); }\n            }\n            obj = coverState.fnMap;\n            for (k in obj) {\n                /* istanbul ignore else: has own property */\n                if (obj.hasOwnProperty(k)) { fixer(obj[k].loc); }\n            }\n            obj = coverState.branchMap;\n            for (k in obj) {\n                /* istanbul ignore else: has own property */\n                if (obj.hasOwnProperty(k)) {\n                    locations = obj[k].locations;\n                    for (i = 0; i < locations.length; i += 1) {\n                        fixer(locations[i]);\n                    }\n                }\n            }\n        },\n\n        getPreamble: function (sourceCode, emitUseStrict) {\n            var varName = this.opts.coverageVariable || '__coverage__',\n                file = this.coverState.path.replace(/\\\\/g, '\\\\\\\\'),\n                tracker = this.currentState.trackerVar,\n                coverState,\n                strictLine = emitUseStrict ? '\"use strict\";' : '',\n                // return replacements using the function to ensure that the replacement is\n                // treated like a dumb string and not as a string with RE replacement patterns\n                replacer = function (s) {\n                    return function () { return s; };\n                },\n                code;\n            if (!this.opts.noAutoWrap) {\n                this.fixColumnPositions(this.coverState);\n            }\n            if (this.opts.embedSource) {\n                this.coverState.code = sourceCode.split(/(?:\\r?\\n)|\\r/);\n            }\n            coverState = this.opts.debug ? JSON.stringify(this.coverState, undefined, 4) : JSON.stringify(this.coverState);\n            code = [\n                \"%STRICT%\",\n                \"var %VAR% = (Function('return this'))();\",\n                \"if (!%VAR%.%GLOBAL%) { %VAR%.%GLOBAL% = {}; }\",\n                \"%VAR% = %VAR%.%GLOBAL%;\",\n                \"if (!(%VAR%['%FILE%'])) {\",\n                \"   %VAR%['%FILE%'] = %OBJECT%;\",\n                \"}\",\n                \"%VAR% = %VAR%['%FILE%'];\"\n            ].join(\"\\n\")\n                .replace(/%STRICT%/g, replacer(strictLine))\n                .replace(/%VAR%/g, replacer(tracker))\n                .replace(/%GLOBAL%/g, replacer(varName))\n                .replace(/%FILE%/g, replacer(file))\n                .replace(/%OBJECT%/g, replacer(coverState));\n            return code;\n        },\n\n        startIgnore: function () {\n            this.currentState.ignoring += 1;\n        },\n\n        endIgnore: function () {\n            this.currentState.ignoring -= 1;\n        },\n\n        convertToBlock: function (node) {\n            if (!node) {\n                return { type: 'BlockStatement', body: [] };\n            } else if (node.type === 'BlockStatement') {\n                return node;\n            } else {\n                return { type: 'BlockStatement', body: [ node ] };\n            }\n        },\n\n        arrowBlockConverter: function (node) {\n            var retStatement;\n            if (node.expression) { // turn expression nodes into a block with a return statement\n                retStatement = astgen.returnStatement(node.body);\n                // ensure the generated return statement is covered\n                retStatement.loc = node.body.loc;\n                node.body = this.convertToBlock(retStatement);\n                node.expression = false;\n            }\n        },\n\n        paranoidHandlerCheck: function (node) {\n            // if someone is using an older esprima on the browser\n            // convert handlers array to single handler attribute\n            // containing its first element\n            /* istanbul ignore next */\n            if (!node.handler && node.handlers) {\n                node.handler = node.handlers[0];\n            }\n        },\n\n        ifBlockConverter: function (node) {\n            node.consequent = this.convertToBlock(node.consequent);\n            node.alternate = this.convertToBlock(node.alternate);\n        },\n\n        loopBlockConverter: function (node) {\n            node.body = this.convertToBlock(node.body);\n        },\n\n        withBlockConverter: function (node) {\n            node.body = this.convertToBlock(node.body);\n        },\n\n        statementName: function (location, initValue) {\n            var sName,\n                ignoring = !!this.currentState.ignoring;\n\n            location.skip = ignoring || undefined;\n            initValue = initValue || 0;\n            this.currentState.statement += 1;\n            sName = this.currentState.statement;\n            this.coverState.statementMap[sName] = location;\n            this.coverState.s[sName] = initValue;\n            return sName;\n        },\n\n        skipInit: function (node /*, walker */) {\n            if (node.init) {\n                node.init.skipWalk = true;\n            }\n        },\n\n        skipLeft: function (node /*, walker */) {\n            node.left.skipWalk = true;\n        },\n\n        isUseStrictExpression: function (node) {\n            return node && node.type === SYNTAX.ExpressionStatement.name &&\n                node.expression  && node.expression.type === SYNTAX.Literal.name &&\n                node.expression.value === 'use strict';\n        },\n\n        maybeSkipNode: function (node, type) {\n            var alreadyIgnoring = !!this.currentState.ignoring,\n                hint = this.currentState.currentHint,\n                ignoreThis = !alreadyIgnoring && hint && hint.type === type;\n\n            if (ignoreThis) {\n                this.startIgnore();\n                node.postprocessor = this.endIgnore;\n                return true;\n            }\n            return false;\n        },\n\n        coverMetaProperty: function(node /* , walker */) {\n           node.skipSelf = true;\n        },\n\n        coverStatement: function (node, walker) {\n            var sName,\n                incrStatementCount,\n                parent,\n                grandParent;\n\n            this.maybeSkipNode(node, 'next');\n\n            if (this.isUseStrictExpression(node)) {\n                grandParent = walker.ancestor(2);\n                /* istanbul ignore else: difficult to test */\n                if (grandParent) {\n                    if ((grandParent.node.type === SYNTAX.FunctionExpression.name ||\n                        grandParent.node.type === SYNTAX.FunctionDeclaration.name)  &&\n                        walker.parent().node.body[0] === node) {\n                        return;\n                    }\n                }\n            }\n\n            if (node.type === SYNTAX.FunctionDeclaration.name) {\n                // Called for the side-effect of setting the function's statement count to 1.\n                this.statementName(node.loc, 1);\n            } else {\n                // We let `coverExport` handle ExportNamedDeclarations.\n                parent = walker.parent();\n                if (parent && parent.node.type === SYNTAX.ExportNamedDeclaration.name) {\n                    return;\n                }\n\n                sName = this.statementName(node.loc);\n\n                incrStatementCount = astgen.statement(\n                    astgen.postIncrement(\n                        astgen.subscript(\n                            astgen.dot(astgen.variable(this.currentState.trackerVar), astgen.variable('s')),\n                            astgen.stringLiteral(sName)\n                        )\n                    )\n                );\n\n                this.splice(incrStatementCount, node, walker);\n            }\n        },\n\n        coverExport: function (node, walker) {\n            var sName, incrStatementCount;\n\n            if ( !node.declaration || !node.declaration.declarations ) { return; }\n\n            this.maybeSkipNode(node, 'next');\n\n            sName = this.statementName(node.declaration.loc);\n            incrStatementCount = astgen.statement(\n                astgen.postIncrement(\n                    astgen.subscript(\n                        astgen.dot(astgen.variable(this.currentState.trackerVar), astgen.variable('s')),\n                        astgen.stringLiteral(sName)\n                    )\n                )\n            );\n\n            this.splice(incrStatementCount, node, walker);\n        },\n\n        splice: function (statements, node, walker) {\n            var targetNode = walker.isLabeled() ? walker.parent().node : node;\n            targetNode.prepend = targetNode.prepend || [];\n            pushAll(targetNode.prepend, statements);\n        },\n\n        functionName: function (node, line, location) {\n            this.currentState.func += 1;\n            var id = this.currentState.func,\n                ignoring = !!this.currentState.ignoring,\n                name = node.id ? node.id.name : '(anonymous_' + id + ')',\n                clone = function (attr) {\n                    var obj = location[attr] || /* istanbul ignore next */ {};\n                    return { line: obj.line, column: obj.column };\n                };\n            this.coverState.fnMap[id] = {\n                name: name, line: line,\n                loc: {\n                    start: clone('start'),\n                    end: clone('end')\n                },\n                skip: ignoring || undefined\n            };\n            this.coverState.f[id] = 0;\n            return id;\n        },\n\n        coverFunction: function (node, walker) {\n            var id,\n                body = node.body,\n                blockBody = body.body,\n                popped;\n\n            this.maybeSkipNode(node, 'next');\n\n            id = this.functionName(node, walker.startLineForNode(node), {\n                start: node.loc.start,\n                end: { line: node.body.loc.start.line, column: node.body.loc.start.column }\n            });\n\n            if (blockBody.length > 0 && this.isUseStrictExpression(blockBody[0])) {\n                popped = blockBody.shift();\n            }\n            blockBody.unshift(\n                astgen.statement(\n                    astgen.postIncrement(\n                        astgen.subscript(\n                            astgen.dot(astgen.variable(this.currentState.trackerVar), astgen.variable('f')),\n                            astgen.stringLiteral(id)\n                        )\n                    )\n                )\n            );\n            if (popped) {\n                blockBody.unshift(popped);\n            }\n        },\n\n        branchName: function (type, startLine, pathLocations) {\n            var bName,\n                paths = [],\n                locations = [],\n                i,\n                ignoring = !!this.currentState.ignoring;\n            this.currentState.branch += 1;\n            bName = this.currentState.branch;\n            for (i = 0; i < pathLocations.length; i += 1) {\n                pathLocations[i].skip = pathLocations[i].skip || ignoring || undefined;\n                locations.push(pathLocations[i]);\n                paths.push(0);\n            }\n            this.coverState.b[bName] = paths;\n            this.coverState.branchMap[bName] = { line: startLine, type: type, locations: locations };\n            return bName;\n        },\n\n        branchIncrementExprAst: function (varName, branchIndex, down) {\n            var ret = astgen.postIncrement(\n                astgen.subscript(\n                    astgen.subscript(\n                        astgen.dot(astgen.variable(this.currentState.trackerVar), astgen.variable('b')),\n                        astgen.stringLiteral(varName)\n                    ),\n                    astgen.numericLiteral(branchIndex)\n                ),\n                down\n            );\n            return ret;\n        },\n\n        locationsForNodes: function (nodes) {\n            var ret = [],\n                i;\n            for (i = 0; i < nodes.length; i += 1) {\n                ret.push(nodes[i].loc);\n            }\n            return ret;\n        },\n\n        ifBranchInjector: function (node, walker) {\n            var alreadyIgnoring = !!this.currentState.ignoring,\n                hint = this.currentState.currentHint,\n                ignoreThen = !alreadyIgnoring && hint && hint.type === 'if',\n                ignoreElse = !alreadyIgnoring && hint && hint.type === 'else',\n                line = node.loc.start.line,\n                col = node.loc.start.column,\n                makeLoc = function () { return  { line: line, column: col }; },\n                bName = this.branchName('if', walker.startLineForNode(node), [\n                    { start: makeLoc(), end: makeLoc(), skip: ignoreThen || undefined },\n                    { start: makeLoc(), end: makeLoc(), skip: ignoreElse || undefined }\n                ]),\n                thenBody = node.consequent.body,\n                elseBody = node.alternate.body,\n                child;\n            thenBody.unshift(astgen.statement(this.branchIncrementExprAst(bName, 0)));\n            elseBody.unshift(astgen.statement(this.branchIncrementExprAst(bName, 1)));\n            if (ignoreThen) { child = node.consequent; child.preprocessor = this.startIgnore; child.postprocessor = this.endIgnore; }\n            if (ignoreElse) { child = node.alternate; child.preprocessor = this.startIgnore; child.postprocessor = this.endIgnore; }\n        },\n\n        branchLocationFor: function (name, index) {\n            return this.coverState.branchMap[name].locations[index];\n        },\n\n        switchBranchInjector: function (node, walker) {\n            var cases = node.cases,\n                bName,\n                i;\n\n            if (!(cases && cases.length > 0)) {\n                return;\n            }\n            bName = this.branchName('switch', walker.startLineForNode(node), this.locationsForNodes(cases));\n            for (i = 0; i < cases.length; i += 1) {\n                cases[i].branchLocation = this.branchLocationFor(bName, i);\n                cases[i].consequent.unshift(astgen.statement(this.branchIncrementExprAst(bName, i)));\n            }\n        },\n\n        switchCaseInjector: function (node) {\n            var location = node.branchLocation;\n            delete node.branchLocation;\n            if (this.maybeSkipNode(node, 'next')) {\n                location.skip = true;\n            }\n        },\n\n        conditionalBranchInjector: function (node, walker) {\n            var bName = this.branchName('cond-expr', walker.startLineForNode(node), this.locationsForNodes([ node.consequent, node.alternate ])),\n                ast1 = this.branchIncrementExprAst(bName, 0),\n                ast2 = this.branchIncrementExprAst(bName, 1);\n\n            node.consequent.preprocessor = this.maybeAddSkip(this.branchLocationFor(bName, 0));\n            node.alternate.preprocessor = this.maybeAddSkip(this.branchLocationFor(bName, 1));\n            node.consequent = astgen.sequence(ast1, node.consequent);\n            node.alternate = astgen.sequence(ast2, node.alternate);\n        },\n\n        maybeAddSkip: function (branchLocation) {\n            return function (node) {\n                var alreadyIgnoring = !!this.currentState.ignoring,\n                    hint = this.currentState.currentHint,\n                    ignoreThis = !alreadyIgnoring && hint && hint.type === 'next';\n                if (ignoreThis) {\n                    this.startIgnore();\n                    node.postprocessor = this.endIgnore;\n                }\n                if (ignoreThis || alreadyIgnoring) {\n                    branchLocation.skip = true;\n                }\n            };\n        },\n\n        logicalExpressionBranchInjector: function (node, walker) {\n            var parent = walker.parent(),\n                leaves = [],\n                bName,\n                tuple,\n                i;\n\n            this.maybeSkipNode(node, 'next');\n\n            if (parent && parent.node.type === SYNTAX.LogicalExpression.name) {\n                //already covered\n                return;\n            }\n\n            this.findLeaves(node, leaves);\n            bName = this.branchName('binary-expr',\n                walker.startLineForNode(node),\n                this.locationsForNodes(leaves.map(function (item) { return item.node; }))\n            );\n            for (i = 0; i < leaves.length; i += 1) {\n                tuple = leaves[i];\n                tuple.parent[tuple.property] = astgen.sequence(this.branchIncrementExprAst(bName, i), tuple.node);\n                tuple.node.preprocessor = this.maybeAddSkip(this.branchLocationFor(bName, i));\n            }\n        },\n\n        findLeaves: function (node, accumulator, parent, property) {\n            if (node.type === SYNTAX.LogicalExpression.name) {\n                this.findLeaves(node.left, accumulator, node, 'left');\n                this.findLeaves(node.right, accumulator, node, 'right');\n            } else {\n                accumulator.push({ node: node, parent: parent, property: property });\n            }\n        },\n        maybeAddType: function (node /*, walker */) {\n            var props = node.properties,\n                i,\n                child;\n            for (i = 0; i < props.length; i += 1) {\n                child = props[i];\n                if (!child.type) {\n                    child.type = SYNTAX.Property.name;\n                }\n            }\n        },\n    };\n\n    if (isNode) {\n        module.exports = Instrumenter;\n    } else {\n        window.Instrumenter = Instrumenter;\n    }\n\n}( true && typeof module.exports !== 'undefined' && typeof exports !== 'undefined'));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/instrumenter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/object-utils.js":
/*!******************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/object-utils.js ***!
  \******************************************************/
/***/ ((module, exports) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n/**\n * utility methods to process coverage objects. A coverage object has the following\n * format.\n *\n *      {\n *          \"/path/to/file1.js\": { file1 coverage },\n *          \"/path/to/file2.js\": { file2 coverage }\n *      }\n *\n *  The internals of the file coverage object are intentionally not documented since\n *  it is not a public interface.\n *\n *  *Note:* When a method of this module has the word `File` in it, it will accept\n *  one of the sub-objects of the main coverage object as an argument. Other\n *  methods accept the higher level coverage object with multiple keys.\n *\n * Works on `node` as well as the browser.\n *\n * Usage on nodejs\n * ---------------\n *\n *      var objectUtils = require('istanbul').utils;\n *\n * Usage in a browser\n * ------------------\n *\n * Load this file using a `script` tag or other means. This will set `window.coverageUtils`\n * to this module's exports.\n *\n * @class ObjectUtils\n * @module main\n * @static\n */\n(function (isNode) {\n    /**\n     * adds line coverage information to a file coverage object, reverse-engineering\n     * it from statement coverage. The object passed in is updated in place.\n     *\n     * Note that if line coverage information is already present in the object,\n     * it is not recomputed.\n     *\n     * @method addDerivedInfoForFile\n     * @static\n     * @param {Object} fileCoverage the coverage object for a single file\n     */\n    function addDerivedInfoForFile(fileCoverage) {\n        var statementMap = fileCoverage.statementMap,\n            statements = fileCoverage.s,\n            lineMap;\n\n        if (!fileCoverage.l) {\n            fileCoverage.l = lineMap = {};\n            Object.keys(statements).forEach(function (st) {\n                var line = statementMap[st].start.line,\n                    count = statements[st],\n                    prevVal = lineMap[line];\n                if (count === 0 && statementMap[st].skip) { count = 1; }\n                if (typeof prevVal === 'undefined' || prevVal < count) {\n                    lineMap[line] = count;\n                }\n            });\n        }\n    }\n    /**\n     * adds line coverage information to all file coverage objects.\n     *\n     * @method addDerivedInfo\n     * @static\n     * @param {Object} coverage the coverage object\n     */\n    function addDerivedInfo(coverage) {\n        Object.keys(coverage).forEach(function (k) {\n            addDerivedInfoForFile(coverage[k]);\n        });\n    }\n    /**\n     * removes line coverage information from all file coverage objects\n     * @method removeDerivedInfo\n     * @static\n     * @param {Object} coverage the coverage object\n     */\n    function removeDerivedInfo(coverage) {\n        Object.keys(coverage).forEach(function (k) {\n            delete coverage[k].l;\n        });\n    }\n\n    function percent(covered, total) {\n        var tmp;\n        if (total > 0) {\n            tmp = 1000 * 100 * covered / total + 5;\n            return Math.floor(tmp / 10) / 100;\n        } else {\n            return 100.00;\n        }\n    }\n\n    function computeSimpleTotals(fileCoverage, property, mapProperty) {\n        var stats = fileCoverage[property],\n            map = mapProperty ? fileCoverage[mapProperty] : null,\n            ret = { total: 0, covered: 0, skipped: 0 };\n\n        Object.keys(stats).forEach(function (key) {\n            var covered = !!stats[key],\n                skipped = map && map[key].skip;\n            ret.total += 1;\n            if (covered || skipped) {\n                ret.covered += 1;\n            }\n            if (!covered && skipped) {\n                ret.skipped += 1;\n            }\n        });\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n\n    function computeBranchTotals(fileCoverage) {\n        var stats = fileCoverage.b,\n            branchMap = fileCoverage.branchMap,\n            ret = { total: 0, covered: 0, skipped: 0 };\n\n        Object.keys(stats).forEach(function (key) {\n            var branches = stats[key],\n                map = branchMap[key],\n                covered,\n                skipped,\n                i;\n            for (i = 0; i < branches.length; i += 1) {\n                covered = branches[i] > 0;\n                skipped = map.locations && map.locations[i] && map.locations[i].skip;\n                if (covered || skipped) {\n                    ret.covered += 1;\n                }\n                if (!covered && skipped) {\n                    ret.skipped += 1;\n                }\n            }\n            ret.total += branches.length;\n        });\n        ret.pct = percent(ret.covered, ret.total);\n        return ret;\n    }\n    /**\n     * returns a blank summary metrics object. A metrics object has the following\n     * format.\n     *\n     *      {\n     *          lines: lineMetrics,\n     *          statements: statementMetrics,\n     *          functions: functionMetrics,\n     *          branches: branchMetrics\n     *          linesCovered: lineCoveredCount\n     *      }\n     *\n     *  Each individual metric object looks as follows:\n     *\n     *      {\n     *          total: n,\n     *          covered: m,\n     *          pct: percent\n     *      }\n     *\n     * @method blankSummary\n     * @static\n     * @return {Object} a blank metrics object\n     */\n    function blankSummary() {\n        return {\n            lines: {\n                total: 0,\n                covered: 0,\n                skipped: 0,\n                pct: 'Unknown'\n            },\n            statements: {\n                total: 0,\n                covered: 0,\n                skipped: 0,\n                pct: 'Unknown'\n            },\n            functions: {\n                total: 0,\n                covered: 0,\n                skipped: 0,\n                pct: 'Unknown'\n            },\n            branches: {\n                total: 0,\n                covered: 0,\n                skipped: 0,\n                pct: 'Unknown'\n            },\n            linesCovered: {}\n        };\n    }\n    /**\n     * returns the summary metrics given the coverage object for a single file. See `blankSummary()`\n     * to understand the format of the returned object.\n     *\n     * @method summarizeFileCoverage\n     * @static\n     * @param {Object} fileCoverage the coverage object for a single file.\n     * @return {Object} the summary metrics for the file\n     */\n    function summarizeFileCoverage(fileCoverage) {\n        var ret = blankSummary();\n        addDerivedInfoForFile(fileCoverage);\n        ret.lines = computeSimpleTotals(fileCoverage, 'l');\n        ret.functions = computeSimpleTotals(fileCoverage, 'f', 'fnMap');\n        ret.statements = computeSimpleTotals(fileCoverage, 's', 'statementMap');\n        ret.branches = computeBranchTotals(fileCoverage);\n        ret.linesCovered = fileCoverage.l;\n        return ret;\n    }\n    /**\n     * merges two instances of file coverage objects *for the same file*\n     * such that the execution counts are correct.\n     *\n     * @method mergeFileCoverage\n     * @static\n     * @param {Object} first the first file coverage object for a given file\n     * @param {Object} second the second file coverage object for the same file\n     * @return {Object} an object that is a result of merging the two. Note that\n     *      the input objects are not changed in any way.\n     */\n    function mergeFileCoverage(first, second) {\n        var ret = JSON.parse(JSON.stringify(first)),\n            i;\n\n        delete ret.l; //remove derived info\n\n        Object.keys(second.s).forEach(function (k) {\n            ret.s[k] += second.s[k];\n        });\n        Object.keys(second.f).forEach(function (k) {\n            ret.f[k] += second.f[k];\n        });\n        Object.keys(second.b).forEach(function (k) {\n            var retArray = ret.b[k],\n                secondArray = second.b[k];\n            for (i = 0; i < retArray.length; i += 1) {\n                retArray[i] += secondArray[i];\n            }\n        });\n\n        return ret;\n    }\n    /**\n     * merges multiple summary metrics objects by summing up the `totals` and\n     * `covered` fields and recomputing the percentages. This function is generic\n     * and can accept any number of arguments.\n     *\n     * @method mergeSummaryObjects\n     * @static\n     * @param {Object} summary... multiple summary metrics objects\n     * @return {Object} the merged summary metrics\n     */\n    function mergeSummaryObjects() {\n        var ret = blankSummary(),\n            args = Array.prototype.slice.call(arguments),\n            keys = ['lines', 'statements', 'branches', 'functions'],\n            increment = function (obj) {\n                if (obj) {\n                    keys.forEach(function (key) {\n                        ret[key].total += obj[key].total;\n                        ret[key].covered += obj[key].covered;\n                        ret[key].skipped += obj[key].skipped;\n                    });\n\n                    // keep track of all lines we have coverage for.\n                    Object.keys(obj.linesCovered).forEach(function (key) {\n                        if (!ret.linesCovered[key]) {\n                            ret.linesCovered[key] = obj.linesCovered[key];\n                        } else {\n                            ret.linesCovered[key] += obj.linesCovered[key];\n                        }\n                    });\n                }\n            };\n        args.forEach(function (arg) {\n            increment(arg);\n        });\n        keys.forEach(function (key) {\n            ret[key].pct = percent(ret[key].covered, ret[key].total);\n        });\n\n        return ret;\n    }\n    /**\n     * returns the coverage summary for a single coverage object. This is\n     * wrapper over `summarizeFileCoverage` and `mergeSummaryObjects` for\n     * the common case of a single coverage object\n     * @method summarizeCoverage\n     * @static\n     * @param {Object} coverage  the coverage object\n     * @return {Object} summary coverage metrics across all files in the coverage object\n     */\n    function summarizeCoverage(coverage) {\n        var fileSummary = [];\n        Object.keys(coverage).forEach(function (key) {\n            fileSummary.push(summarizeFileCoverage(coverage[key]));\n        });\n        return mergeSummaryObjects.apply(null, fileSummary);\n    }\n\n    /**\n     * makes the coverage object generated by this library yuitest_coverage compatible.\n     * Note that this transformation is lossy since the returned object will not have\n     * statement and branch coverage.\n     *\n     * @method toYUICoverage\n     * @static\n     * @param {Object} coverage The `istanbul` coverage object\n     * @return {Object} a coverage object in `yuitest_coverage` format.\n     */\n    function toYUICoverage(coverage) {\n        var ret = {};\n\n        addDerivedInfo(coverage);\n\n        Object.keys(coverage).forEach(function (k) {\n            var fileCoverage = coverage[k],\n                lines = fileCoverage.l,\n                functions = fileCoverage.f,\n                fnMap = fileCoverage.fnMap,\n                o;\n\n            o = ret[k] = {\n                lines: {},\n                calledLines: 0,\n                coveredLines: 0,\n                functions: {},\n                calledFunctions: 0,\n                coveredFunctions: 0\n            };\n            Object.keys(lines).forEach(function (k) {\n                o.lines[k] = lines[k];\n                o.coveredLines += 1;\n                if (lines[k] > 0) {\n                    o.calledLines += 1;\n                }\n            });\n            Object.keys(functions).forEach(function (k) {\n                var name = fnMap[k].name + ':' + fnMap[k].line;\n                o.functions[name] = functions[k];\n                o.coveredFunctions += 1;\n                if (functions[k] > 0) {\n                    o.calledFunctions += 1;\n                }\n            });\n        });\n        return ret;\n    }\n\n    /**\n     * Creates new file coverage object with incremented hits count\n     * on skipped statements, branches and functions\n     *\n     * @method incrementIgnoredTotals\n     * @static\n     * @param {Object} cov File coverage object\n     * @return {Object} New file coverage object\n     */\n    function incrementIgnoredTotals(cov) {\n        //TODO: This may be slow in the browser and may break in older browsers\n        //      Look into using a library that works in Node and the browser\n        var fileCoverage = JSON.parse(JSON.stringify(cov));\n\n        [\n            {mapKey: 'statementMap', hitsKey: 's'},\n            {mapKey: 'branchMap', hitsKey: 'b'},\n            {mapKey: 'fnMap', hitsKey: 'f'}\n        ].forEach(function (keys) {\n            Object.keys(fileCoverage[keys.mapKey])\n                .forEach(function (key) {\n                    var map = fileCoverage[keys.mapKey][key];\n                    var hits = fileCoverage[keys.hitsKey];\n\n                    if (keys.mapKey === 'branchMap') {\n                        var locations = map.locations;\n\n                        locations.forEach(function (location, index) {\n                            if (hits[key][index] === 0 && location.skip) {\n                                hits[key][index] = 1;\n                            }\n                        });\n\n                        return;\n                    }\n\n                    if (hits[key] === 0 && map.skip) {\n                        hits[key] = 1;\n                    }\n                });\n            });\n\n        return fileCoverage;\n    }\n\n    var exportables = {\n        addDerivedInfo: addDerivedInfo,\n        addDerivedInfoForFile: addDerivedInfoForFile,\n        removeDerivedInfo: removeDerivedInfo,\n        blankSummary: blankSummary,\n        summarizeFileCoverage: summarizeFileCoverage,\n        summarizeCoverage: summarizeCoverage,\n        mergeFileCoverage: mergeFileCoverage,\n        mergeSummaryObjects: mergeSummaryObjects,\n        toYUICoverage: toYUICoverage,\n        incrementIgnoredTotals: incrementIgnoredTotals\n    };\n\n    /* istanbul ignore else: windows */\n    if (isNode) {\n        module.exports = exportables;\n    } else {\n        window.coverageUtils = exportables;\n    }\n}( true && typeof module.exports !== 'undefined' && typeof exports !== 'undefined'));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/object-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/register-plugins.js":
/*!**********************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/register-plugins.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar Store = __webpack_require__(/*! ./store */ \"(ssr)/./node_modules/sc-istanbul/lib/store/index.js\"),\n    Report = __webpack_require__(/*! ./report */ \"(ssr)/./node_modules/sc-istanbul/lib/report/index.js\"),\n    Command = __webpack_require__(/*! ./command */ \"(ssr)/./node_modules/sc-istanbul/lib/command/index.js\");\n\nStore.loadAll();\nReport.loadAll();\nCommand.loadAll();\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3JlZ2lzdGVyLXBsdWdpbnMuanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQkFBTyxDQUFDLG9FQUFTO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyxzRUFBVTtBQUMvQixjQUFjLG1CQUFPLENBQUMsd0VBQVc7O0FBRWpDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3JlZ2lzdGVyLXBsdWdpbnMuanM/MGJlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qXG4gQ29weXJpZ2h0IChjKSAyMDEyLCBZYWhvbyEgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBTdG9yZSA9IHJlcXVpcmUoJy4vc3RvcmUnKSxcbiAgICBSZXBvcnQgPSByZXF1aXJlKCcuL3JlcG9ydCcpLFxuICAgIENvbW1hbmQgPSByZXF1aXJlKCcuL2NvbW1hbmQnKTtcblxuU3RvcmUubG9hZEFsbCgpO1xuUmVwb3J0LmxvYWRBbGwoKTtcbkNvbW1hbmQubG9hZEFsbCgpO1xuXG5cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/register-plugins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/report/common/defaults.js":
/*!****************************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/report/common/defaults.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2013, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar Report  = __webpack_require__(/*! ../index */ \"(ssr)/./node_modules/sc-istanbul/lib/report/index.js\");\nvar supportsColor = __webpack_require__(/*! supports-color */ \"(ssr)/./node_modules/sc-istanbul/node_modules/supports-color/index.js\");\n\nmodule.exports = {\n    watermarks: function () {\n        return {\n            statements: [ 50, 80 ],\n            lines: [ 50, 80 ],\n            functions: [ 50, 80],\n            branches: [ 50, 80 ]\n        };\n    },\n\n    classFor: function (type, metrics, watermarks) {\n        var mark = watermarks[type],\n            value = metrics[type].pct;\n        return value >= mark[1] ? 'high' : value >= mark[0] ? 'medium' : 'low';\n    },\n\n    colorize: function (str, clazz) {\n        /* istanbul ignore if: untestable in batch mode */\n        var colors = {\n            low: '31;1',\n            medium: '33;1',\n            high: '32;1'\n        };\n        \n        if (supportsColor && colors[clazz]) {\n            return '\\u001b[' + colors[clazz] + 'm' + str + '\\u001b[0m';\n        }\n        return str;\n    },\n\n    defaultReportConfig: function () {\n        var cfg = {};\n        Report.getReportList().forEach(function (type) {\n            var rpt = Report.create(type),\n                c = rpt.getDefaultConfig();\n            if (c) {\n                cfg[type] = c;\n            }\n        });\n        return cfg;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3JlcG9ydC9jb21tb24vZGVmYXVsdHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLHNFQUFVO0FBQ2hDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFnQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQix3QkFBd0I7QUFDeEIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NjLWlzdGFuYnVsL2xpYi9yZXBvcnQvY29tbW9uL2RlZmF1bHRzLmpzP2NiYmMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTMsIFlhaG9vISBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuXG52YXIgUmVwb3J0ICA9IHJlcXVpcmUoJy4uL2luZGV4Jyk7XG52YXIgc3VwcG9ydHNDb2xvciA9IHJlcXVpcmUoJ3N1cHBvcnRzLWNvbG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHdhdGVybWFya3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXRlbWVudHM6IFsgNTAsIDgwIF0sXG4gICAgICAgICAgICBsaW5lczogWyA1MCwgODAgXSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczogWyA1MCwgODBdLFxuICAgICAgICAgICAgYnJhbmNoZXM6IFsgNTAsIDgwIF1cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgY2xhc3NGb3I6IGZ1bmN0aW9uICh0eXBlLCBtZXRyaWNzLCB3YXRlcm1hcmtzKSB7XG4gICAgICAgIHZhciBtYXJrID0gd2F0ZXJtYXJrc1t0eXBlXSxcbiAgICAgICAgICAgIHZhbHVlID0gbWV0cmljc1t0eXBlXS5wY3Q7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSBtYXJrWzFdID8gJ2hpZ2gnIDogdmFsdWUgPj0gbWFya1swXSA/ICdtZWRpdW0nIDogJ2xvdyc7XG4gICAgfSxcblxuICAgIGNvbG9yaXplOiBmdW5jdGlvbiAoc3RyLCBjbGF6eikge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IHVudGVzdGFibGUgaW4gYmF0Y2ggbW9kZSAqL1xuICAgICAgICB2YXIgY29sb3JzID0ge1xuICAgICAgICAgICAgbG93OiAnMzE7MScsXG4gICAgICAgICAgICBtZWRpdW06ICczMzsxJyxcbiAgICAgICAgICAgIGhpZ2g6ICczMjsxJ1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgaWYgKHN1cHBvcnRzQ29sb3IgJiYgY29sb3JzW2NsYXp6XSkge1xuICAgICAgICAgICAgcmV0dXJuICdcXHUwMDFiWycgKyBjb2xvcnNbY2xhenpdICsgJ20nICsgc3RyICsgJ1xcdTAwMWJbMG0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfSxcblxuICAgIGRlZmF1bHRSZXBvcnRDb25maWc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNmZyA9IHt9O1xuICAgICAgICBSZXBvcnQuZ2V0UmVwb3J0TGlzdCgpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBycHQgPSBSZXBvcnQuY3JlYXRlKHR5cGUpLFxuICAgICAgICAgICAgICAgIGMgPSBycHQuZ2V0RGVmYXVsdENvbmZpZygpO1xuICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICBjZmdbdHlwZV0gPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNmZztcbiAgICB9XG59O1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/report/common/defaults.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/report/index.js":
/*!******************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/report/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar util = __webpack_require__(/*! util */ \"util\"),\n    EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter),\n    Factory = __webpack_require__(/*! ../util/factory */ \"(ssr)/./node_modules/sc-istanbul/lib/util/factory.js\"),\n    factory = new Factory('report', __dirname, false);\n/**\n * An abstraction for producing coverage reports.\n * This class is both the base class as well as a factory for `Report` implementations.\n * All reports are event emitters and are expected to emit a `done` event when\n * the report writing is complete.\n *\n * See also the `Reporter` class for easily producing multiple coverage reports\n * with a single call.\n *\n * Usage\n * -----\n *\n *      var Report = require('istanbul').Report,\n *          report = Report.create('html'),\n *          collector = new require('istanbul').Collector;\n *\n *      collector.add(coverageObject);\n *      report.on('done', function () { console.log('done'); });\n *      report.writeReport(collector);\n *\n * @class Report\n * @module report\n * @main report\n * @constructor\n * @protected\n * @param {Object} options Optional. The options supported by a specific store implementation.\n */\nfunction Report(/* options */) {\n    EventEmitter.call(this);\n}\n\nutil.inherits(Report, EventEmitter);\n\n//add register, create, mix, loadAll, getReportList as class methods\nfactory.bindClassMethods(Report);\n\n/**\n * registers a new report implementation.\n * @method register\n * @static\n * @param {Function} constructor the constructor function for the report. This function must have a\n *  `TYPE` property of type String, that will be used in `Report.create()`\n */\n/**\n * returns a report implementation of the specified type.\n * @method create\n * @static\n * @param {String} type the type of report to create\n * @param {Object} opts Optional. Options specific to the report implementation\n * @return {Report} a new store of the specified type\n */\n/**\n * returns the list of available reports as an array of strings\n * @method getReportList\n * @static\n * @return an array of supported report formats\n */\n\nvar proto = {\n    /**\n     * returns a one-line summary of the report\n     * @method synopsis\n     * @return {String} a description of what the report is about\n     */\n    synopsis: function () {\n        throw new Error('synopsis must be overridden');\n    },\n    /**\n     * returns a config object that has override-able keys settable via config\n     * @method getDefaultConfig\n     * @return {Object|null} an object representing keys that can be overridden via\n     *  the istanbul configuration where the values are the defaults used when\n     *  not specified. A null return implies no config attributes\n     */\n    getDefaultConfig: function () {\n        return null;\n    },\n    /**\n     * writes the report for a set of coverage objects added to a collector.\n     * @method writeReport\n     * @param {Collector} collector the collector for getting the set of files and coverage\n     * @param {Boolean} sync true if reports must be written synchronously, false if they can be written using asynchronous means (e.g. stream.write)\n     */\n    writeReport: function (/* collector, sync */) {\n        throw new Error('writeReport: must be overridden');\n    }\n};\n\nObject.keys(proto).forEach(function (k) {\n    Report.prototype[k] = proto[k];\n});\n\nmodule.exports = Report;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3JlcG9ydC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekIsbUJBQW1CLDBEQUE4QjtBQUNqRCxjQUFjLG1CQUFPLENBQUMsNkVBQWlCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxzQkFBc0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3JlcG9ydC9pbmRleC5qcz9hYTNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IChjKSAyMDEyLCBZYWhvbyEgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG4gICAgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyLFxuICAgIEZhY3RvcnkgPSByZXF1aXJlKCcuLi91dGlsL2ZhY3RvcnknKSxcbiAgICBmYWN0b3J5ID0gbmV3IEZhY3RvcnkoJ3JlcG9ydCcsIF9fZGlybmFtZSwgZmFsc2UpO1xuLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3IgcHJvZHVjaW5nIGNvdmVyYWdlIHJlcG9ydHMuXG4gKiBUaGlzIGNsYXNzIGlzIGJvdGggdGhlIGJhc2UgY2xhc3MgYXMgd2VsbCBhcyBhIGZhY3RvcnkgZm9yIGBSZXBvcnRgIGltcGxlbWVudGF0aW9ucy5cbiAqIEFsbCByZXBvcnRzIGFyZSBldmVudCBlbWl0dGVycyBhbmQgYXJlIGV4cGVjdGVkIHRvIGVtaXQgYSBgZG9uZWAgZXZlbnQgd2hlblxuICogdGhlIHJlcG9ydCB3cml0aW5nIGlzIGNvbXBsZXRlLlxuICpcbiAqIFNlZSBhbHNvIHRoZSBgUmVwb3J0ZXJgIGNsYXNzIGZvciBlYXNpbHkgcHJvZHVjaW5nIG11bHRpcGxlIGNvdmVyYWdlIHJlcG9ydHNcbiAqIHdpdGggYSBzaW5nbGUgY2FsbC5cbiAqXG4gKiBVc2FnZVxuICogLS0tLS1cbiAqXG4gKiAgICAgIHZhciBSZXBvcnQgPSByZXF1aXJlKCdpc3RhbmJ1bCcpLlJlcG9ydCxcbiAqICAgICAgICAgIHJlcG9ydCA9IFJlcG9ydC5jcmVhdGUoJ2h0bWwnKSxcbiAqICAgICAgICAgIGNvbGxlY3RvciA9IG5ldyByZXF1aXJlKCdpc3RhbmJ1bCcpLkNvbGxlY3RvcjtcbiAqXG4gKiAgICAgIGNvbGxlY3Rvci5hZGQoY292ZXJhZ2VPYmplY3QpO1xuICogICAgICByZXBvcnQub24oJ2RvbmUnLCBmdW5jdGlvbiAoKSB7IGNvbnNvbGUubG9nKCdkb25lJyk7IH0pO1xuICogICAgICByZXBvcnQud3JpdGVSZXBvcnQoY29sbGVjdG9yKTtcbiAqXG4gKiBAY2xhc3MgUmVwb3J0XG4gKiBAbW9kdWxlIHJlcG9ydFxuICogQG1haW4gcmVwb3J0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcm90ZWN0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbmFsLiBUaGUgb3B0aW9ucyBzdXBwb3J0ZWQgYnkgYSBzcGVjaWZpYyBzdG9yZSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gUmVwb3J0KC8qIG9wdGlvbnMgKi8pIHtcbiAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbn1cblxudXRpbC5pbmhlcml0cyhSZXBvcnQsIEV2ZW50RW1pdHRlcik7XG5cbi8vYWRkIHJlZ2lzdGVyLCBjcmVhdGUsIG1peCwgbG9hZEFsbCwgZ2V0UmVwb3J0TGlzdCBhcyBjbGFzcyBtZXRob2RzXG5mYWN0b3J5LmJpbmRDbGFzc01ldGhvZHMoUmVwb3J0KTtcblxuLyoqXG4gKiByZWdpc3RlcnMgYSBuZXcgcmVwb3J0IGltcGxlbWVudGF0aW9uLlxuICogQG1ldGhvZCByZWdpc3RlclxuICogQHN0YXRpY1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgcmVwb3J0LiBUaGlzIGZ1bmN0aW9uIG11c3QgaGF2ZSBhXG4gKiAgYFRZUEVgIHByb3BlcnR5IG9mIHR5cGUgU3RyaW5nLCB0aGF0IHdpbGwgYmUgdXNlZCBpbiBgUmVwb3J0LmNyZWF0ZSgpYFxuICovXG4vKipcbiAqIHJldHVybnMgYSByZXBvcnQgaW1wbGVtZW50YXRpb24gb2YgdGhlIHNwZWNpZmllZCB0eXBlLlxuICogQG1ldGhvZCBjcmVhdGVcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHRoZSB0eXBlIG9mIHJlcG9ydCB0byBjcmVhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsLiBPcHRpb25zIHNwZWNpZmljIHRvIHRoZSByZXBvcnQgaW1wbGVtZW50YXRpb25cbiAqIEByZXR1cm4ge1JlcG9ydH0gYSBuZXcgc3RvcmUgb2YgdGhlIHNwZWNpZmllZCB0eXBlXG4gKi9cbi8qKlxuICogcmV0dXJucyB0aGUgbGlzdCBvZiBhdmFpbGFibGUgcmVwb3J0cyBhcyBhbiBhcnJheSBvZiBzdHJpbmdzXG4gKiBAbWV0aG9kIGdldFJlcG9ydExpc3RcbiAqIEBzdGF0aWNcbiAqIEByZXR1cm4gYW4gYXJyYXkgb2Ygc3VwcG9ydGVkIHJlcG9ydCBmb3JtYXRzXG4gKi9cblxudmFyIHByb3RvID0ge1xuICAgIC8qKlxuICAgICAqIHJldHVybnMgYSBvbmUtbGluZSBzdW1tYXJ5IG9mIHRoZSByZXBvcnRcbiAgICAgKiBAbWV0aG9kIHN5bm9wc2lzXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBhIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIHJlcG9ydCBpcyBhYm91dFxuICAgICAqL1xuICAgIHN5bm9wc2lzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3lub3BzaXMgbXVzdCBiZSBvdmVycmlkZGVuJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiByZXR1cm5zIGEgY29uZmlnIG9iamVjdCB0aGF0IGhhcyBvdmVycmlkZS1hYmxlIGtleXMgc2V0dGFibGUgdmlhIGNvbmZpZ1xuICAgICAqIEBtZXRob2QgZ2V0RGVmYXVsdENvbmZpZ1xuICAgICAqIEByZXR1cm4ge09iamVjdHxudWxsfSBhbiBvYmplY3QgcmVwcmVzZW50aW5nIGtleXMgdGhhdCBjYW4gYmUgb3ZlcnJpZGRlbiB2aWFcbiAgICAgKiAgdGhlIGlzdGFuYnVsIGNvbmZpZ3VyYXRpb24gd2hlcmUgdGhlIHZhbHVlcyBhcmUgdGhlIGRlZmF1bHRzIHVzZWQgd2hlblxuICAgICAqICBub3Qgc3BlY2lmaWVkLiBBIG51bGwgcmV0dXJuIGltcGxpZXMgbm8gY29uZmlnIGF0dHJpYnV0ZXNcbiAgICAgKi9cbiAgICBnZXREZWZhdWx0Q29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogd3JpdGVzIHRoZSByZXBvcnQgZm9yIGEgc2V0IG9mIGNvdmVyYWdlIG9iamVjdHMgYWRkZWQgdG8gYSBjb2xsZWN0b3IuXG4gICAgICogQG1ldGhvZCB3cml0ZVJlcG9ydFxuICAgICAqIEBwYXJhbSB7Q29sbGVjdG9yfSBjb2xsZWN0b3IgdGhlIGNvbGxlY3RvciBmb3IgZ2V0dGluZyB0aGUgc2V0IG9mIGZpbGVzIGFuZCBjb3ZlcmFnZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc3luYyB0cnVlIGlmIHJlcG9ydHMgbXVzdCBiZSB3cml0dGVuIHN5bmNocm9ub3VzbHksIGZhbHNlIGlmIHRoZXkgY2FuIGJlIHdyaXR0ZW4gdXNpbmcgYXN5bmNocm9ub3VzIG1lYW5zIChlLmcuIHN0cmVhbS53cml0ZSlcbiAgICAgKi9cbiAgICB3cml0ZVJlcG9ydDogZnVuY3Rpb24gKC8qIGNvbGxlY3Rvciwgc3luYyAqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyaXRlUmVwb3J0OiBtdXN0IGJlIG92ZXJyaWRkZW4nKTtcbiAgICB9XG59O1xuXG5PYmplY3Qua2V5cyhwcm90bykuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIFJlcG9ydC5wcm90b3R5cGVba10gPSBwcm90b1trXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcG9ydDtcblxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/report/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/reporter.js":
/*!**************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/reporter.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2014, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar Report = __webpack_require__(/*! ./report */ \"(ssr)/./node_modules/sc-istanbul/lib/report/index.js\"),\n    configuration = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/sc-istanbul/lib/config.js\"),\n    inputError = __webpack_require__(/*! ./util/input-error */ \"(ssr)/./node_modules/sc-istanbul/lib/util/input-error.js\");\n\n/**\n * convenience mechanism to write one or more reports ensuring that config\n * options are respected.\n * Usage\n * -----\n *\n *      var fs = require('fs'),\n *          reporter = new require('istanbul').Reporter(),\n *          collector = new require('istanbul').Collector(),\n *          sync = true;\n *\n *      collector.add(JSON.parse(fs.readFileSync('coverage.json', 'utf8')));\n *      reporter.add('lcovonly');\n *      reporter.addAll(['clover', 'cobertura']);\n *      reporter.write(collector, sync, function () { console.log('done'); });\n *\n * @class Reporter\n * @param {Configuration} cfg  the config object, a falsy value will load the\n *  default configuration instead\n * @param {String} dir  the directory in which to write the reports, may be falsy\n *  to use config or global defaults\n * @constructor\n * @module main\n */\nfunction Reporter(cfg, dir) {\n    this.config = cfg || configuration.loadFile();\n    this.dir = dir || this.config.reporting.dir();\n    this.reports = {};\n}\n\nReporter.prototype = {\n    /**\n     * adds a report to be generated. Must be one of the entries returned\n     * by `Report.getReportList()`\n     * @method add\n     * @param {String} fmt the format of the report to generate\n     */\n    add: function (fmt) {\n        if (this.reports[fmt]) { // already added\n            return;\n        }\n        var config = this.config,\n            rptConfig = config.reporting.reportConfig()[fmt] || {};\n        rptConfig.verbose = config.verbose;\n        rptConfig.dir = this.dir;\n        rptConfig.watermarks = config.reporting.watermarks();\n        try {\n            this.reports[fmt] = Report.create(fmt, rptConfig);\n        } catch (ex) {\n            throw inputError.create('Invalid report format [' + fmt + ']');\n        }\n    },\n    /**\n     * adds an array of report formats to be generated\n     * @method addAll\n     * @param {Array} fmts an array of report formats\n     */\n    addAll: function (fmts) {\n        var that = this;\n        fmts.forEach(function (f) {\n            that.add(f);\n        });\n    },\n    /**\n     * writes all reports added and calls the callback when done\n     * @method write\n     * @param {Collector} collector the collector having the coverage data\n     * @param {Boolean} sync true to write reports synchronously\n     * @param {Function} callback the callback to call when done. When `sync`\n     * is true, the callback will be called in the same process tick.\n     */\n    write: function (collector, sync, callback) {\n        var reports = this.reports,\n            verbose = this.config.verbose,\n            handler = this.handleDone.bind(this, callback);\n\n        this.inProgress = Object.keys(reports).length;\n\n        Object.keys(reports).forEach(function (name) {\n            var report = reports[name];\n            if (verbose) {\n                console.error('Write report: ' + name);\n            }\n            report.on('done', handler);\n            report.writeReport(collector, sync);\n        });\n    },\n    /*\n     * handles listening on all reports to be completed before calling the callback\n     * @method handleDone\n     * @private\n     * @param {Function} callback the callback to call when all reports are\n     * written\n     */\n    handleDone: function (callback) {\n        this.inProgress -= 1;\n        if (this.inProgress === 0) {\n            return callback();\n        }\n    }\n};\n\nmodule.exports = Reporter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3JlcG9ydGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLHNFQUFVO0FBQy9CLG9CQUFvQixtQkFBTyxDQUFDLGdFQUFVO0FBQ3RDLGlCQUFpQixtQkFBTyxDQUFDLG9GQUFvQjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxzQkFBc0I7QUFDNUU7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFdBQVc7QUFDMUIsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3JlcG9ydGVyLmpzPzMxNDIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTQsIFlhaG9vISBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlcG9ydCA9IHJlcXVpcmUoJy4vcmVwb3J0JyksXG4gICAgY29uZmlndXJhdGlvbiA9IHJlcXVpcmUoJy4vY29uZmlnJyksXG4gICAgaW5wdXRFcnJvciA9IHJlcXVpcmUoJy4vdXRpbC9pbnB1dC1lcnJvcicpO1xuXG4vKipcbiAqIGNvbnZlbmllbmNlIG1lY2hhbmlzbSB0byB3cml0ZSBvbmUgb3IgbW9yZSByZXBvcnRzIGVuc3VyaW5nIHRoYXQgY29uZmlnXG4gKiBvcHRpb25zIGFyZSByZXNwZWN0ZWQuXG4gKiBVc2FnZVxuICogLS0tLS1cbiAqXG4gKiAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyksXG4gKiAgICAgICAgICByZXBvcnRlciA9IG5ldyByZXF1aXJlKCdpc3RhbmJ1bCcpLlJlcG9ydGVyKCksXG4gKiAgICAgICAgICBjb2xsZWN0b3IgPSBuZXcgcmVxdWlyZSgnaXN0YW5idWwnKS5Db2xsZWN0b3IoKSxcbiAqICAgICAgICAgIHN5bmMgPSB0cnVlO1xuICpcbiAqICAgICAgY29sbGVjdG9yLmFkZChKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYygnY292ZXJhZ2UuanNvbicsICd1dGY4JykpKTtcbiAqICAgICAgcmVwb3J0ZXIuYWRkKCdsY292b25seScpO1xuICogICAgICByZXBvcnRlci5hZGRBbGwoWydjbG92ZXInLCAnY29iZXJ0dXJhJ10pO1xuICogICAgICByZXBvcnRlci53cml0ZShjb2xsZWN0b3IsIHN5bmMsIGZ1bmN0aW9uICgpIHsgY29uc29sZS5sb2coJ2RvbmUnKTsgfSk7XG4gKlxuICogQGNsYXNzIFJlcG9ydGVyXG4gKiBAcGFyYW0ge0NvbmZpZ3VyYXRpb259IGNmZyAgdGhlIGNvbmZpZyBvYmplY3QsIGEgZmFsc3kgdmFsdWUgd2lsbCBsb2FkIHRoZVxuICogIGRlZmF1bHQgY29uZmlndXJhdGlvbiBpbnN0ZWFkXG4gKiBAcGFyYW0ge1N0cmluZ30gZGlyICB0aGUgZGlyZWN0b3J5IGluIHdoaWNoIHRvIHdyaXRlIHRoZSByZXBvcnRzLCBtYXkgYmUgZmFsc3lcbiAqICB0byB1c2UgY29uZmlnIG9yIGdsb2JhbCBkZWZhdWx0c1xuICogQGNvbnN0cnVjdG9yXG4gKiBAbW9kdWxlIG1haW5cbiAqL1xuZnVuY3Rpb24gUmVwb3J0ZXIoY2ZnLCBkaXIpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNmZyB8fCBjb25maWd1cmF0aW9uLmxvYWRGaWxlKCk7XG4gICAgdGhpcy5kaXIgPSBkaXIgfHwgdGhpcy5jb25maWcucmVwb3J0aW5nLmRpcigpO1xuICAgIHRoaXMucmVwb3J0cyA9IHt9O1xufVxuXG5SZXBvcnRlci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogYWRkcyBhIHJlcG9ydCB0byBiZSBnZW5lcmF0ZWQuIE11c3QgYmUgb25lIG9mIHRoZSBlbnRyaWVzIHJldHVybmVkXG4gICAgICogYnkgYFJlcG9ydC5nZXRSZXBvcnRMaXN0KClgXG4gICAgICogQG1ldGhvZCBhZGRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm10IHRoZSBmb3JtYXQgb2YgdGhlIHJlcG9ydCB0byBnZW5lcmF0ZVxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24gKGZtdCkge1xuICAgICAgICBpZiAodGhpcy5yZXBvcnRzW2ZtdF0pIHsgLy8gYWxyZWFkeSBhZGRlZFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgICAgIHJwdENvbmZpZyA9IGNvbmZpZy5yZXBvcnRpbmcucmVwb3J0Q29uZmlnKClbZm10XSB8fCB7fTtcbiAgICAgICAgcnB0Q29uZmlnLnZlcmJvc2UgPSBjb25maWcudmVyYm9zZTtcbiAgICAgICAgcnB0Q29uZmlnLmRpciA9IHRoaXMuZGlyO1xuICAgICAgICBycHRDb25maWcud2F0ZXJtYXJrcyA9IGNvbmZpZy5yZXBvcnRpbmcud2F0ZXJtYXJrcygpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRzW2ZtdF0gPSBSZXBvcnQuY3JlYXRlKGZtdCwgcnB0Q29uZmlnKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHRocm93IGlucHV0RXJyb3IuY3JlYXRlKCdJbnZhbGlkIHJlcG9ydCBmb3JtYXQgWycgKyBmbXQgKyAnXScpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBhZGRzIGFuIGFycmF5IG9mIHJlcG9ydCBmb3JtYXRzIHRvIGJlIGdlbmVyYXRlZFxuICAgICAqIEBtZXRob2QgYWRkQWxsXG4gICAgICogQHBhcmFtIHtBcnJheX0gZm10cyBhbiBhcnJheSBvZiByZXBvcnQgZm9ybWF0c1xuICAgICAqL1xuICAgIGFkZEFsbDogZnVuY3Rpb24gKGZtdHMpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICBmbXRzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgIHRoYXQuYWRkKGYpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIHdyaXRlcyBhbGwgcmVwb3J0cyBhZGRlZCBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gZG9uZVxuICAgICAqIEBtZXRob2Qgd3JpdGVcbiAgICAgKiBAcGFyYW0ge0NvbGxlY3Rvcn0gY29sbGVjdG9yIHRoZSBjb2xsZWN0b3IgaGF2aW5nIHRoZSBjb3ZlcmFnZSBkYXRhXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBzeW5jIHRydWUgdG8gd3JpdGUgcmVwb3J0cyBzeW5jaHJvbm91c2x5XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRvIGNhbGwgd2hlbiBkb25lLiBXaGVuIGBzeW5jYFxuICAgICAqIGlzIHRydWUsIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgc2FtZSBwcm9jZXNzIHRpY2suXG4gICAgICovXG4gICAgd3JpdGU6IGZ1bmN0aW9uIChjb2xsZWN0b3IsIHN5bmMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXBvcnRzID0gdGhpcy5yZXBvcnRzLFxuICAgICAgICAgICAgdmVyYm9zZSA9IHRoaXMuY29uZmlnLnZlcmJvc2UsXG4gICAgICAgICAgICBoYW5kbGVyID0gdGhpcy5oYW5kbGVEb25lLmJpbmQodGhpcywgY2FsbGJhY2spO1xuXG4gICAgICAgIHRoaXMuaW5Qcm9ncmVzcyA9IE9iamVjdC5rZXlzKHJlcG9ydHMpLmxlbmd0aDtcblxuICAgICAgICBPYmplY3Qua2V5cyhyZXBvcnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgcmVwb3J0ID0gcmVwb3J0c1tuYW1lXTtcbiAgICAgICAgICAgIGlmICh2ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignV3JpdGUgcmVwb3J0OiAnICsgbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBvcnQub24oJ2RvbmUnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHJlcG9ydC53cml0ZVJlcG9ydChjb2xsZWN0b3IsIHN5bmMpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIC8qXG4gICAgICogaGFuZGxlcyBsaXN0ZW5pbmcgb24gYWxsIHJlcG9ydHMgdG8gYmUgY29tcGxldGVkIGJlZm9yZSBjYWxsaW5nIHRoZSBjYWxsYmFja1xuICAgICAqIEBtZXRob2QgaGFuZGxlRG9uZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRvIGNhbGwgd2hlbiBhbGwgcmVwb3J0cyBhcmVcbiAgICAgKiB3cml0dGVuXG4gICAgICovXG4gICAgaGFuZGxlRG9uZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaW5Qcm9ncmVzcyAtPSAxO1xuICAgICAgICBpZiAodGhpcy5pblByb2dyZXNzID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVwb3J0ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/reporter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/store/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/store/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar Factory = __webpack_require__(/*! ../util/factory */ \"(ssr)/./node_modules/sc-istanbul/lib/util/factory.js\"),\n    factory = new Factory('store', __dirname, false);\n/**\n * An abstraction for keeping track of content against some keys (e.g.\n * original source, instrumented source, coverage objects against file names).\n * This class is both the base class as well as a factory for `Store` implementations.\n *\n * Usage\n * -----\n *\n *      var Store = require('istanbul').Store,\n *          store = Store.create('memory');\n *\n *      //basic use\n *      store.set('foo', 'foo-content');\n *      var content = store.get('foo');\n *\n *      //keys and values\n *      store.keys().forEach(function (key) {\n *          console.log(key + ':\\n' + store.get(key);\n *      });\n *      if (store.hasKey('bar') { console.log(store.get('bar'); }\n *\n *\n *      //syntactic sugar\n *      store.setObject('foo', { foo: true });\n *      console.log(store.getObject('foo').foo);\n *\n *      store.dispose();\n *\n * @class Store\n * @constructor\n * @module store\n * @param {Object} options Optional. The options supported by a specific store implementation.\n * @main store\n */\nfunction Store(/* options */) {}\n\n//add register, create, mix, loadAll, getStoreList as class methods\nfactory.bindClassMethods(Store);\n\n/**\n * registers a new store implementation.\n * @method register\n * @static\n * @param {Function} constructor the constructor function for the store. This function must have a\n *  `TYPE` property of type String, that will be used in `Store.create()`\n */\n/**\n * returns a store implementation of the specified type.\n * @method create\n * @static\n * @param {String} type the type of store to create\n * @param {Object} opts Optional. Options specific to the store implementation\n * @return {Store} a new store of the specified type\n */\n\nStore.prototype = {\n    /**\n     * sets some content associated with a specific key. The manner in which\n     * duplicate keys are handled for multiple `set()` calls with the same\n     * key is implementation-specific.\n     *\n     * @method set\n     * @param {String} key the key for the content\n     * @param {String} contents the contents for the key\n     */\n    set: function (/* key, contents */) { throw new Error(\"set: must be overridden\"); },\n    /**\n     * returns the content associated to a specific key or throws if the key\n     * was not `set`\n     * @method get\n     * @param {String} key the key for which to get the content\n     * @return {String} the content for the specified key\n     */\n    get: function (/* key */) { throw new Error(\"get: must be overridden\"); },\n    /**\n     * returns a list of all known keys\n     * @method keys\n     * @return {Array} an array of seen keys\n     */\n    keys: function () { throw new Error(\"keys: must be overridden\"); },\n    /**\n     * returns true if the key is one for which a `get()` call would work.\n     * @method hasKey\n     * @param {String} key\n     * @return true if the key is valid for this store, false otherwise\n     */\n    hasKey: function (/* key */) { throw new Error(\"hasKey: must be overridden\"); },\n    /**\n     * lifecycle method to dispose temporary resources associated with the store\n     * @method dispose\n     */\n    dispose: function () {},\n    /**\n     * sugar method to return an object associated with a specific key. Throws\n     * if the content set against the key was not a valid JSON string.\n     * @method getObject\n     * @param {String} key the key for which to return the associated object\n     * @return {Object} the object corresponding to the key\n     */\n    getObject: function (key) {\n        return JSON.parse(this.get(key));\n    },\n    /**\n     * sugar method to set an object against a specific key.\n     * @method setObject\n     * @param {String} key the key for the object\n     * @param {Object} object the object to be stored\n     */\n    setObject: function (key, object) {\n        return this.set(key, JSON.stringify(object));\n    }\n};\n\nmodule.exports = Store;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3N0b3JlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsbUJBQU8sQ0FBQyw2RUFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxXQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBLDBDQUEwQyw2Q0FBNkM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQSxnQ0FBZ0MsNkNBQTZDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0Esd0JBQXdCLDhDQUE4QztBQUN0RTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLG1DQUFtQyxnREFBZ0Q7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3N0b3JlL2luZGV4LmpzPzg5NGQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTIsIFlhaG9vISBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuXG52YXIgRmFjdG9yeSA9IHJlcXVpcmUoJy4uL3V0aWwvZmFjdG9yeScpLFxuICAgIGZhY3RvcnkgPSBuZXcgRmFjdG9yeSgnc3RvcmUnLCBfX2Rpcm5hbWUsIGZhbHNlKTtcbi8qKlxuICogQW4gYWJzdHJhY3Rpb24gZm9yIGtlZXBpbmcgdHJhY2sgb2YgY29udGVudCBhZ2FpbnN0IHNvbWUga2V5cyAoZS5nLlxuICogb3JpZ2luYWwgc291cmNlLCBpbnN0cnVtZW50ZWQgc291cmNlLCBjb3ZlcmFnZSBvYmplY3RzIGFnYWluc3QgZmlsZSBuYW1lcykuXG4gKiBUaGlzIGNsYXNzIGlzIGJvdGggdGhlIGJhc2UgY2xhc3MgYXMgd2VsbCBhcyBhIGZhY3RvcnkgZm9yIGBTdG9yZWAgaW1wbGVtZW50YXRpb25zLlxuICpcbiAqIFVzYWdlXG4gKiAtLS0tLVxuICpcbiAqICAgICAgdmFyIFN0b3JlID0gcmVxdWlyZSgnaXN0YW5idWwnKS5TdG9yZSxcbiAqICAgICAgICAgIHN0b3JlID0gU3RvcmUuY3JlYXRlKCdtZW1vcnknKTtcbiAqXG4gKiAgICAgIC8vYmFzaWMgdXNlXG4gKiAgICAgIHN0b3JlLnNldCgnZm9vJywgJ2Zvby1jb250ZW50Jyk7XG4gKiAgICAgIHZhciBjb250ZW50ID0gc3RvcmUuZ2V0KCdmb28nKTtcbiAqXG4gKiAgICAgIC8va2V5cyBhbmQgdmFsdWVzXG4gKiAgICAgIHN0b3JlLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAqICAgICAgICAgIGNvbnNvbGUubG9nKGtleSArICc6XFxuJyArIHN0b3JlLmdldChrZXkpO1xuICogICAgICB9KTtcbiAqICAgICAgaWYgKHN0b3JlLmhhc0tleSgnYmFyJykgeyBjb25zb2xlLmxvZyhzdG9yZS5nZXQoJ2JhcicpOyB9XG4gKlxuICpcbiAqICAgICAgLy9zeW50YWN0aWMgc3VnYXJcbiAqICAgICAgc3RvcmUuc2V0T2JqZWN0KCdmb28nLCB7IGZvbzogdHJ1ZSB9KTtcbiAqICAgICAgY29uc29sZS5sb2coc3RvcmUuZ2V0T2JqZWN0KCdmb28nKS5mb28pO1xuICpcbiAqICAgICAgc3RvcmUuZGlzcG9zZSgpO1xuICpcbiAqIEBjbGFzcyBTdG9yZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAbW9kdWxlIHN0b3JlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25hbC4gVGhlIG9wdGlvbnMgc3VwcG9ydGVkIGJ5IGEgc3BlY2lmaWMgc3RvcmUgaW1wbGVtZW50YXRpb24uXG4gKiBAbWFpbiBzdG9yZVxuICovXG5mdW5jdGlvbiBTdG9yZSgvKiBvcHRpb25zICovKSB7fVxuXG4vL2FkZCByZWdpc3RlciwgY3JlYXRlLCBtaXgsIGxvYWRBbGwsIGdldFN0b3JlTGlzdCBhcyBjbGFzcyBtZXRob2RzXG5mYWN0b3J5LmJpbmRDbGFzc01ldGhvZHMoU3RvcmUpO1xuXG4vKipcbiAqIHJlZ2lzdGVycyBhIG5ldyBzdG9yZSBpbXBsZW1lbnRhdGlvbi5cbiAqIEBtZXRob2QgcmVnaXN0ZXJcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgdGhlIHN0b3JlLiBUaGlzIGZ1bmN0aW9uIG11c3QgaGF2ZSBhXG4gKiAgYFRZUEVgIHByb3BlcnR5IG9mIHR5cGUgU3RyaW5nLCB0aGF0IHdpbGwgYmUgdXNlZCBpbiBgU3RvcmUuY3JlYXRlKClgXG4gKi9cbi8qKlxuICogcmV0dXJucyBhIHN0b3JlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBzcGVjaWZpZWQgdHlwZS5cbiAqIEBtZXRob2QgY3JlYXRlXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0aGUgdHlwZSBvZiBzdG9yZSB0byBjcmVhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsLiBPcHRpb25zIHNwZWNpZmljIHRvIHRoZSBzdG9yZSBpbXBsZW1lbnRhdGlvblxuICogQHJldHVybiB7U3RvcmV9IGEgbmV3IHN0b3JlIG9mIHRoZSBzcGVjaWZpZWQgdHlwZVxuICovXG5cblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzZXRzIHNvbWUgY29udGVudCBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyBrZXkuIFRoZSBtYW5uZXIgaW4gd2hpY2hcbiAgICAgKiBkdXBsaWNhdGUga2V5cyBhcmUgaGFuZGxlZCBmb3IgbXVsdGlwbGUgYHNldCgpYCBjYWxscyB3aXRoIHRoZSBzYW1lXG4gICAgICoga2V5IGlzIGltcGxlbWVudGF0aW9uLXNwZWNpZmljLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZXRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IHRoZSBrZXkgZm9yIHRoZSBjb250ZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzIHRoZSBjb250ZW50cyBmb3IgdGhlIGtleVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24gKC8qIGtleSwgY29udGVudHMgKi8pIHsgdGhyb3cgbmV3IEVycm9yKFwic2V0OiBtdXN0IGJlIG92ZXJyaWRkZW5cIik7IH0sXG4gICAgLyoqXG4gICAgICogcmV0dXJucyB0aGUgY29udGVudCBhc3NvY2lhdGVkIHRvIGEgc3BlY2lmaWMga2V5IG9yIHRocm93cyBpZiB0aGUga2V5XG4gICAgICogd2FzIG5vdCBgc2V0YFxuICAgICAqIEBtZXRob2QgZ2V0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSB0aGUga2V5IGZvciB3aGljaCB0byBnZXQgdGhlIGNvbnRlbnRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBjb250ZW50IGZvciB0aGUgc3BlY2lmaWVkIGtleVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gKC8qIGtleSAqLykgeyB0aHJvdyBuZXcgRXJyb3IoXCJnZXQ6IG11c3QgYmUgb3ZlcnJpZGRlblwiKTsgfSxcbiAgICAvKipcbiAgICAgKiByZXR1cm5zIGEgbGlzdCBvZiBhbGwga25vd24ga2V5c1xuICAgICAqIEBtZXRob2Qga2V5c1xuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBzZWVuIGtleXNcbiAgICAgKi9cbiAgICBrZXlzOiBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcihcImtleXM6IG11c3QgYmUgb3ZlcnJpZGRlblwiKTsgfSxcbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHRydWUgaWYgdGhlIGtleSBpcyBvbmUgZm9yIHdoaWNoIGEgYGdldCgpYCBjYWxsIHdvdWxkIHdvcmsuXG4gICAgICogQG1ldGhvZCBoYXNLZXlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHJldHVybiB0cnVlIGlmIHRoZSBrZXkgaXMgdmFsaWQgZm9yIHRoaXMgc3RvcmUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGhhc0tleTogZnVuY3Rpb24gKC8qIGtleSAqLykgeyB0aHJvdyBuZXcgRXJyb3IoXCJoYXNLZXk6IG11c3QgYmUgb3ZlcnJpZGRlblwiKTsgfSxcbiAgICAvKipcbiAgICAgKiBsaWZlY3ljbGUgbWV0aG9kIHRvIGRpc3Bvc2UgdGVtcG9yYXJ5IHJlc291cmNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHN0b3JlXG4gICAgICogQG1ldGhvZCBkaXNwb3NlXG4gICAgICovXG4gICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge30sXG4gICAgLyoqXG4gICAgICogc3VnYXIgbWV0aG9kIHRvIHJldHVybiBhbiBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIGEgc3BlY2lmaWMga2V5LiBUaHJvd3NcbiAgICAgKiBpZiB0aGUgY29udGVudCBzZXQgYWdhaW5zdCB0aGUga2V5IHdhcyBub3QgYSB2YWxpZCBKU09OIHN0cmluZy5cbiAgICAgKiBAbWV0aG9kIGdldE9iamVjdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgdGhlIGtleSBmb3Igd2hpY2ggdG8gcmV0dXJuIHRoZSBhc3NvY2lhdGVkIG9iamVjdFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBrZXlcbiAgICAgKi9cbiAgICBnZXRPYmplY3Q6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5nZXQoa2V5KSk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBzdWdhciBtZXRob2QgdG8gc2V0IGFuIG9iamVjdCBhZ2FpbnN0IGEgc3BlY2lmaWMga2V5LlxuICAgICAqIEBtZXRob2Qgc2V0T2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleSB0aGUga2V5IGZvciB0aGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCB0aGUgb2JqZWN0IHRvIGJlIHN0b3JlZFxuICAgICAqL1xuICAgIHNldE9iamVjdDogZnVuY3Rpb24gKGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldChrZXksIEpTT04uc3RyaW5naWZ5KG9iamVjdCkpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmU7XG5cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/store/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/store/memory.js":
/*!******************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/store/memory.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar util = __webpack_require__(/*! util */ \"util\"),\n    Store = __webpack_require__(/*! ./index */ \"(ssr)/./node_modules/sc-istanbul/lib/store/index.js\");\n\n/**\n * a `Store` implementation using an in-memory object.\n *\n * Usage\n * -----\n *\n *      var store = require('istanbul').Store.create('memory');\n *\n *\n * @class MemoryStore\n * @extends Store\n * @module store\n * @constructor\n */\nfunction MemoryStore() {\n    Store.call(this);\n    this.map = {};\n}\n\nMemoryStore.TYPE = 'memory';\nutil.inherits(MemoryStore, Store);\n\nStore.mix(MemoryStore, {\n    set: function (key, contents) {\n        this.map[key] = contents;\n    },\n\n    get: function (key) {\n        if (!this.hasKey(key)) {\n            throw new Error('Unable to find entry for [' + key + ']');\n        }\n        return this.map[key];\n    },\n\n    hasKey: function (key) {\n        return this.map.hasOwnProperty(key);\n    },\n\n    keys: function () {\n        return Object.keys(this.map);\n    },\n\n    dispose: function () {\n        this.map = {};\n    }\n});\n\nmodule.exports = MemoryStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3N0b3JlL21lbW9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekIsWUFBWSxtQkFBTyxDQUFDLG9FQUFTOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NjLWlzdGFuYnVsL2xpYi9zdG9yZS9tZW1vcnkuanM/YWNmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIENvcHlyaWdodCAoYykgMjAxMiwgWWFob28hIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIFN0b3JlID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuXG4vKipcbiAqIGEgYFN0b3JlYCBpbXBsZW1lbnRhdGlvbiB1c2luZyBhbiBpbi1tZW1vcnkgb2JqZWN0LlxuICpcbiAqIFVzYWdlXG4gKiAtLS0tLVxuICpcbiAqICAgICAgdmFyIHN0b3JlID0gcmVxdWlyZSgnaXN0YW5idWwnKS5TdG9yZS5jcmVhdGUoJ21lbW9yeScpO1xuICpcbiAqXG4gKiBAY2xhc3MgTWVtb3J5U3RvcmVcbiAqIEBleHRlbmRzIFN0b3JlXG4gKiBAbW9kdWxlIHN0b3JlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWVtb3J5U3RvcmUoKSB7XG4gICAgU3RvcmUuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm1hcCA9IHt9O1xufVxuXG5NZW1vcnlTdG9yZS5UWVBFID0gJ21lbW9yeSc7XG51dGlsLmluaGVyaXRzKE1lbW9yeVN0b3JlLCBTdG9yZSk7XG5cblN0b3JlLm1peChNZW1vcnlTdG9yZSwge1xuICAgIHNldDogZnVuY3Rpb24gKGtleSwgY29udGVudHMpIHtcbiAgICAgICAgdGhpcy5tYXBba2V5XSA9IGNvbnRlbnRzO1xuICAgIH0sXG5cbiAgICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0tleShrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIGVudHJ5IGZvciBbJyArIGtleSArICddJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFwW2tleV07XG4gICAgfSxcblxuICAgIGhhc0tleTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICB9LFxuXG4gICAga2V5czogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5tYXApO1xuICAgIH0sXG5cbiAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubWFwID0ge307XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVtb3J5U3RvcmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/store/memory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/factory.js":
/*!******************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/factory.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar util = __webpack_require__(/*! util */ \"util\"),\n    path = __webpack_require__(/*! path */ \"path\"),\n    fs = __webpack_require__(/*! fs */ \"fs\"),\n    abbrev = __webpack_require__(/*! abbrev */ \"(ssr)/./node_modules/abbrev/abbrev.js\");\n\nfunction Factory(kind, dir, allowAbbreviations) {\n    this.kind = kind;\n    this.dir = dir;\n    this.allowAbbreviations = allowAbbreviations;\n    this.classMap = {};\n    this.abbreviations = null;\n}\n\nFactory.prototype = {\n\n    knownTypes: function () {\n        var keys = Object.keys(this.classMap);\n        keys.sort();\n        return keys;\n    },\n\n    resolve: function (abbreviatedType) {\n        if (!this.abbreviations) {\n            this.abbreviations = abbrev(this.knownTypes());\n        }\n        return this.abbreviations[abbreviatedType];\n    },\n\n    register: function (constructor) {\n        var type = constructor.TYPE;\n        if (!type) { throw new Error('Could not register ' + this.kind + ' constructor [no TYPE property]: ' + util.inspect(constructor)); }\n        this.classMap[type] = constructor;\n        this.abbreviations = null;\n    },\n\n    create: function (type, opts) {\n        var allowAbbrev = this.allowAbbreviations,\n            realType = allowAbbrev ? this.resolve(type) : type,\n            Cons;\n\n        Cons = realType ? this.classMap[realType] : null;\n        if (!Cons) { throw new Error('Invalid ' + this.kind + ' [' + type + '], allowed values are ' + this.knownTypes().join(', ')); }\n        return new Cons(opts);\n    },\n\n    loadStandard: function (dir) {\n        var that = this;\n        fs.readdirSync(dir).forEach(function (file) {\n            if (file !== 'index.js' && file.indexOf('.js') === file.length - 3) {\n                try {\n                    that.register(__webpack_require__(\"(ssr)/./node_modules/sc-istanbul/lib/util sync recursive\")(path.resolve(dir, file)));\n                } catch (ex) {\n                    console.error(ex.message);\n                    console.error(ex.stack);\n                    throw new Error('Could not register ' + that.kind + ' from file ' + file);\n                }\n            }\n        });\n    },\n\n    bindClassMethods: function (Cons) {\n        var tmpKind = this.kind.charAt(0).toUpperCase() + this.kind.substring(1), //ucfirst\n            allowAbbrev = this.allowAbbreviations;\n\n        Cons.mix = Factory.mix;\n        Cons.register = this.register.bind(this);\n        Cons.create = this.create.bind(this);\n        Cons.loadAll = this.loadStandard.bind(this, this.dir);\n        Cons['get' + tmpKind + 'List'] = this.knownTypes.bind(this);\n        if (allowAbbrev) {\n            Cons['resolve' + tmpKind + 'Name'] = this.resolve.bind(this);\n        }\n    }\n};\n\nFactory.mix = function (cons, proto) {\n    Object.keys(proto).forEach(function (key) {\n        cons.prototype[key] = proto[key];\n    });\n};\n\nmodule.exports = Factory;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekIsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLGFBQWEsbUJBQU8sQ0FBQyxxREFBUTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsZ0ZBQVEsdUJBQXVCLENBQUM7QUFDbEUsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zYy1pc3RhbmJ1bC9saWIvdXRpbC9mYWN0b3J5LmpzP2MyMmMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTIsIFlhaG9vISBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBhYmJyZXYgPSByZXF1aXJlKCdhYmJyZXYnKTtcblxuZnVuY3Rpb24gRmFjdG9yeShraW5kLCBkaXIsIGFsbG93QWJicmV2aWF0aW9ucykge1xuICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgdGhpcy5kaXIgPSBkaXI7XG4gICAgdGhpcy5hbGxvd0FiYnJldmlhdGlvbnMgPSBhbGxvd0FiYnJldmlhdGlvbnM7XG4gICAgdGhpcy5jbGFzc01hcCA9IHt9O1xuICAgIHRoaXMuYWJicmV2aWF0aW9ucyA9IG51bGw7XG59XG5cbkZhY3RvcnkucHJvdG90eXBlID0ge1xuXG4gICAga25vd25UeXBlczogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuY2xhc3NNYXApO1xuICAgICAgICBrZXlzLnNvcnQoKTtcbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgfSxcblxuICAgIHJlc29sdmU6IGZ1bmN0aW9uIChhYmJyZXZpYXRlZFR5cGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFiYnJldmlhdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuYWJicmV2aWF0aW9ucyA9IGFiYnJldih0aGlzLmtub3duVHlwZXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWJicmV2aWF0aW9uc1thYmJyZXZpYXRlZFR5cGVdO1xuICAgIH0sXG5cbiAgICByZWdpc3RlcjogZnVuY3Rpb24gKGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHZhciB0eXBlID0gY29uc3RydWN0b3IuVFlQRTtcbiAgICAgICAgaWYgKCF0eXBlKSB7IHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJlZ2lzdGVyICcgKyB0aGlzLmtpbmQgKyAnIGNvbnN0cnVjdG9yIFtubyBUWVBFIHByb3BlcnR5XTogJyArIHV0aWwuaW5zcGVjdChjb25zdHJ1Y3RvcikpOyB9XG4gICAgICAgIHRoaXMuY2xhc3NNYXBbdHlwZV0gPSBjb25zdHJ1Y3RvcjtcbiAgICAgICAgdGhpcy5hYmJyZXZpYXRpb25zID0gbnVsbDtcbiAgICB9LFxuXG4gICAgY3JlYXRlOiBmdW5jdGlvbiAodHlwZSwgb3B0cykge1xuICAgICAgICB2YXIgYWxsb3dBYmJyZXYgPSB0aGlzLmFsbG93QWJicmV2aWF0aW9ucyxcbiAgICAgICAgICAgIHJlYWxUeXBlID0gYWxsb3dBYmJyZXYgPyB0aGlzLnJlc29sdmUodHlwZSkgOiB0eXBlLFxuICAgICAgICAgICAgQ29ucztcblxuICAgICAgICBDb25zID0gcmVhbFR5cGUgPyB0aGlzLmNsYXNzTWFwW3JlYWxUeXBlXSA6IG51bGw7XG4gICAgICAgIGlmICghQ29ucykgeyB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIHRoaXMua2luZCArICcgWycgKyB0eXBlICsgJ10sIGFsbG93ZWQgdmFsdWVzIGFyZSAnICsgdGhpcy5rbm93blR5cGVzKCkuam9pbignLCAnKSk7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb25zKG9wdHMpO1xuICAgIH0sXG5cbiAgICBsb2FkU3RhbmRhcmQ6IGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICBmcy5yZWFkZGlyU3luYyhkaXIpLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICAgIGlmIChmaWxlICE9PSAnaW5kZXguanMnICYmIGZpbGUuaW5kZXhPZignLmpzJykgPT09IGZpbGUubGVuZ3RoIC0gMykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVnaXN0ZXIocmVxdWlyZShwYXRoLnJlc29sdmUoZGlyLCBmaWxlKSkpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXgubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXguc3RhY2spO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZWdpc3RlciAnICsgdGhhdC5raW5kICsgJyBmcm9tIGZpbGUgJyArIGZpbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGJpbmRDbGFzc01ldGhvZHM6IGZ1bmN0aW9uIChDb25zKSB7XG4gICAgICAgIHZhciB0bXBLaW5kID0gdGhpcy5raW5kLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5raW5kLnN1YnN0cmluZygxKSwgLy91Y2ZpcnN0XG4gICAgICAgICAgICBhbGxvd0FiYnJldiA9IHRoaXMuYWxsb3dBYmJyZXZpYXRpb25zO1xuXG4gICAgICAgIENvbnMubWl4ID0gRmFjdG9yeS5taXg7XG4gICAgICAgIENvbnMucmVnaXN0ZXIgPSB0aGlzLnJlZ2lzdGVyLmJpbmQodGhpcyk7XG4gICAgICAgIENvbnMuY3JlYXRlID0gdGhpcy5jcmVhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgQ29ucy5sb2FkQWxsID0gdGhpcy5sb2FkU3RhbmRhcmQuYmluZCh0aGlzLCB0aGlzLmRpcik7XG4gICAgICAgIENvbnNbJ2dldCcgKyB0bXBLaW5kICsgJ0xpc3QnXSA9IHRoaXMua25vd25UeXBlcy5iaW5kKHRoaXMpO1xuICAgICAgICBpZiAoYWxsb3dBYmJyZXYpIHtcbiAgICAgICAgICAgIENvbnNbJ3Jlc29sdmUnICsgdG1wS2luZCArICdOYW1lJ10gPSB0aGlzLnJlc29sdmUuYmluZCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkZhY3RvcnkubWl4ID0gZnVuY3Rpb24gKGNvbnMsIHByb3RvKSB7XG4gICAgT2JqZWN0LmtleXMocHJvdG8pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBjb25zLnByb3RvdHlwZVtrZXldID0gcHJvdG9ba2V5XTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRmFjdG9yeTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/factory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/file-matcher.js":
/*!***********************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/file-matcher.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar async = __webpack_require__(/*! async */ \"(ssr)/./node_modules/sc-istanbul/node_modules/async/lib/async.js\"),\n    glob = __webpack_require__(/*! glob */ \"(ssr)/./node_modules/sc-istanbul/node_modules/glob/glob.js\"),\n    fs = __webpack_require__(/*! fs */ \"fs\"),\n    path = __webpack_require__(/*! path */ \"path\"),\n    seq = 0;\n\nfunction filesFor(options, callback) {\n    if (!callback && typeof options === 'function') {\n        callback = options;\n        options = null;\n    }\n    options = options || {};\n\n    var root = options.root,\n        includes = options.includes,\n        excludes = options.excludes,\n        realpath = options.realpath,\n        relative = options.relative,\n        opts;\n\n    root = root || process.cwd();\n    includes = includes && Array.isArray(includes) ? includes : [ '**/*.js' ];\n    excludes = excludes && Array.isArray(excludes) ? excludes : [ '**/node_modules/**' ];\n\n    opts = { cwd: root, nodir: true, ignore: excludes };\n    seq += 1;\n    opts['x' + seq + new Date().getTime()] = true; //cache buster for minimatch cache bug\n    glob(includes.join(' '), opts, function (err, files) {\n        if (err) { return callback(err); }\n        if (relative) { return callback(err, files); }\n\n        if (!realpath) {\n            files = files.map(function (file) { return path.resolve(root, file); });\n            return callback(err, files);\n        }\n\n        var realPathCache = module.constructor._realpathCache || {};\n\n        async.map(files, function (file, done) {\n            fs.realpath(path.resolve(root, file), realPathCache, done);\n        }, callback);\n    });\n}\n\nfunction matcherFor(options, callback) {\n\n    if (!callback && typeof options === 'function') {\n        callback = options;\n        options = null;\n    }\n    options = options || {};\n    options.relative = false; //force absolute paths\n    options.realpath = true; //force real paths (to match Node.js module paths)\n\n    filesFor(options, function (err, files) {\n        var fileMap = {},\n            matchFn;\n        if (err) { return callback(err); }\n        files.forEach(function (file) { fileMap[file] = true; });\n\n        matchFn = function (file) { return fileMap[file]; };\n        matchFn.files = Object.keys(fileMap);\n        return callback(null, matchFn);\n    });\n}\n\nmodule.exports = {\n    filesFor: filesFor,\n    matcherFor: matcherFor\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvZmlsZS1tYXRjaGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLG1CQUFPLENBQUMsK0VBQU87QUFDM0IsV0FBVyxtQkFBTyxDQUFDLHdFQUFNO0FBQ3pCLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2I7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQSxtQkFBbUI7QUFDbkIsd0JBQXdCOztBQUV4QjtBQUNBLGdEQUFnRCxrQ0FBa0M7QUFDbEY7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLDZCQUE2Qjs7QUFFN0I7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxtQkFBbUI7QUFDbkIsd0NBQXdDLHVCQUF1Qjs7QUFFL0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91bmlzd2FwX2Nsb25lLy4vbm9kZV9tb2R1bGVzL3NjLWlzdGFuYnVsL2xpYi91dGlsL2ZpbGUtbWF0Y2hlci5qcz8wOWM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IChjKSAyMDEyLCBZYWhvbyEgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cblxudmFyIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKSxcbiAgICBnbG9iID0gcmVxdWlyZSgnZ2xvYicpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIHNlcSA9IDA7XG5cbmZ1bmN0aW9uIGZpbGVzRm9yKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSBudWxsO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHZhciByb290ID0gb3B0aW9ucy5yb290LFxuICAgICAgICBpbmNsdWRlcyA9IG9wdGlvbnMuaW5jbHVkZXMsXG4gICAgICAgIGV4Y2x1ZGVzID0gb3B0aW9ucy5leGNsdWRlcyxcbiAgICAgICAgcmVhbHBhdGggPSBvcHRpb25zLnJlYWxwYXRoLFxuICAgICAgICByZWxhdGl2ZSA9IG9wdGlvbnMucmVsYXRpdmUsXG4gICAgICAgIG9wdHM7XG5cbiAgICByb290ID0gcm9vdCB8fCBwcm9jZXNzLmN3ZCgpO1xuICAgIGluY2x1ZGVzID0gaW5jbHVkZXMgJiYgQXJyYXkuaXNBcnJheShpbmNsdWRlcykgPyBpbmNsdWRlcyA6IFsgJyoqLyouanMnIF07XG4gICAgZXhjbHVkZXMgPSBleGNsdWRlcyAmJiBBcnJheS5pc0FycmF5KGV4Y2x1ZGVzKSA/IGV4Y2x1ZGVzIDogWyAnKiovbm9kZV9tb2R1bGVzLyoqJyBdO1xuXG4gICAgb3B0cyA9IHsgY3dkOiByb290LCBub2RpcjogdHJ1ZSwgaWdub3JlOiBleGNsdWRlcyB9O1xuICAgIHNlcSArPSAxO1xuICAgIG9wdHNbJ3gnICsgc2VxICsgbmV3IERhdGUoKS5nZXRUaW1lKCldID0gdHJ1ZTsgLy9jYWNoZSBidXN0ZXIgZm9yIG1pbmltYXRjaCBjYWNoZSBidWdcbiAgICBnbG9iKGluY2x1ZGVzLmpvaW4oJyAnKSwgb3B0cywgZnVuY3Rpb24gKGVyciwgZmlsZXMpIHtcbiAgICAgICAgaWYgKGVycikgeyByZXR1cm4gY2FsbGJhY2soZXJyKTsgfVxuICAgICAgICBpZiAocmVsYXRpdmUpIHsgcmV0dXJuIGNhbGxiYWNrKGVyciwgZmlsZXMpOyB9XG5cbiAgICAgICAgaWYgKCFyZWFscGF0aCkge1xuICAgICAgICAgICAgZmlsZXMgPSBmaWxlcy5tYXAoZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIHBhdGgucmVzb2x2ZShyb290LCBmaWxlKTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBmaWxlcyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVhbFBhdGhDYWNoZSA9IG1vZHVsZS5jb25zdHJ1Y3Rvci5fcmVhbHBhdGhDYWNoZSB8fCB7fTtcblxuICAgICAgICBhc3luYy5tYXAoZmlsZXMsIGZ1bmN0aW9uIChmaWxlLCBkb25lKSB7XG4gICAgICAgICAgICBmcy5yZWFscGF0aChwYXRoLnJlc29sdmUocm9vdCwgZmlsZSksIHJlYWxQYXRoQ2FjaGUsIGRvbmUpO1xuICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGb3Iob3B0aW9ucywgY2FsbGJhY2spIHtcblxuICAgIGlmICghY2FsbGJhY2sgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gbnVsbDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5yZWxhdGl2ZSA9IGZhbHNlOyAvL2ZvcmNlIGFic29sdXRlIHBhdGhzXG4gICAgb3B0aW9ucy5yZWFscGF0aCA9IHRydWU7IC8vZm9yY2UgcmVhbCBwYXRocyAodG8gbWF0Y2ggTm9kZS5qcyBtb2R1bGUgcGF0aHMpXG5cbiAgICBmaWxlc0ZvcihvcHRpb25zLCBmdW5jdGlvbiAoZXJyLCBmaWxlcykge1xuICAgICAgICB2YXIgZmlsZU1hcCA9IHt9LFxuICAgICAgICAgICAgbWF0Y2hGbjtcbiAgICAgICAgaWYgKGVycikgeyByZXR1cm4gY2FsbGJhY2soZXJyKTsgfVxuICAgICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7IGZpbGVNYXBbZmlsZV0gPSB0cnVlOyB9KTtcblxuICAgICAgICBtYXRjaEZuID0gZnVuY3Rpb24gKGZpbGUpIHsgcmV0dXJuIGZpbGVNYXBbZmlsZV07IH07XG4gICAgICAgIG1hdGNoRm4uZmlsZXMgPSBPYmplY3Qua2V5cyhmaWxlTWFwKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG1hdGNoRm4pO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmaWxlc0ZvcjogZmlsZXNGb3IsXG4gICAgbWF0Y2hlckZvcjogbWF0Y2hlckZvclxufTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/file-matcher.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/file-writer.js":
/*!**********************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/file-writer.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar path = __webpack_require__(/*! path */ \"path\"),\n    util = __webpack_require__(/*! util */ \"util\"),\n    fs = __webpack_require__(/*! fs */ \"fs\"),\n    async = __webpack_require__(/*! async */ \"(ssr)/./node_modules/sc-istanbul/node_modules/async/lib/async.js\"),\n    mkdirp = __webpack_require__(/*! mkdirp */ \"(ssr)/./node_modules/mkdirp/index.js\"),\n    writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/sc-istanbul/lib/util/writer.js\"),\n    Writer = writer.Writer,\n    ContentWriter = writer.ContentWriter;\n\nfunction extend(cons, proto) {\n    Object.keys(proto).forEach(function (k) {\n        cons.prototype[k] = proto[k];\n    });\n}\n\nfunction BufferedContentWriter() {\n    ContentWriter.call(this);\n    this.content = '';\n}\nutil.inherits(BufferedContentWriter, ContentWriter);\n\nextend(BufferedContentWriter, {\n    write: function (str) {\n        this.content += str;\n    },\n    getContent: function () {\n        return this.content;\n    }\n});\n\nfunction StreamContentWriter(stream) {\n    ContentWriter.call(this);\n    this.stream = stream;\n}\nutil.inherits(StreamContentWriter, ContentWriter);\n\nextend(StreamContentWriter, {\n    write: function (str) {\n        this.stream.write(str);\n    }\n});\n\nfunction SyncFileWriter() {\n    Writer.call(this);\n}\nutil.inherits(SyncFileWriter, Writer);\n\nextend(SyncFileWriter, {\n    writeFile: function (file, callback) {\n        mkdirp.sync(path.dirname(file));\n        var cw = new BufferedContentWriter();\n        callback(cw);\n        fs.writeFileSync(file, cw.getContent(), 'utf8');\n    },\n    done: function () {\n        this.emit('done'); //everything already done\n    }\n});\n\nfunction AsyncFileWriter() {\n    this.queue = async.queue(this.processFile.bind(this), 20);\n    this.openFileMap = {};\n}\n\nutil.inherits(AsyncFileWriter, Writer);\n\nextend(AsyncFileWriter, {\n    writeFile: function (file, callback) {\n        this.openFileMap[file] = true;\n        this.queue.push({ file: file, callback: callback });\n    },\n    processFile: function (task, cb) {\n        var file = task.file,\n            userCallback = task.callback,\n            that = this,\n            stream,\n            contentWriter;\n\n        mkdirp.sync(path.dirname(file));\n        stream = fs.createWriteStream(file);\n        stream.on('close', function () {\n            delete that.openFileMap[file];\n            cb();\n            that.checkDone();\n        });\n        stream.on('error', function (err) { that.emit('error', err); });\n        contentWriter = new StreamContentWriter(stream);\n        userCallback(contentWriter);\n        stream.end();\n    },\n    done: function () {\n        this.doneCalled = true;\n        this.checkDone();\n    },\n    checkDone: function () {\n        if (!this.doneCalled) { return; }\n        if (Object.keys(this.openFileMap).length === 0) {\n            this.emit('done');\n        }\n    }\n});\n/**\n * a concrete writer implementation that can write files synchronously or\n * asynchronously based on the constructor argument passed to it.\n *\n * Usage\n * -----\n *\n *      var sync = true,\n *          fileWriter = new require('istanbul').FileWriter(sync);\n *\n *      fileWriter.on('done', function () { console.log('done'); });\n *      fileWriter.copyFile('/foo/bar.jpg', '/baz/bar.jpg');\n *      fileWriter.writeFile('/foo/index.html', function (contentWriter) {\n *          contentWriter.println('<html>');\n *          contentWriter.println('</html>');\n *      });\n *      fileWriter.done(); // will emit the `done` event when all files are written\n *\n * @class FileWriter\n * @extends Writer\n * @module io\n * @param sync\n * @constructor\n */\nfunction FileWriter(sync) {\n    Writer.call(this);\n    var that = this;\n    this.delegate = sync ? new SyncFileWriter() : new AsyncFileWriter();\n    this.delegate.on('error', function (err) { that.emit('error', err); });\n    this.delegate.on('done', function () { that.emit('done'); });\n}\n\nutil.inherits(FileWriter, Writer);\n\nextend(FileWriter, {\n    copyFile: function (source, dest) {\n        mkdirp.sync(path.dirname(dest));\n        fs.writeFileSync(dest, fs.readFileSync(source));\n    },\n    writeFile: function (file, callback) {\n        this.delegate.writeFile(file, callback);\n    },\n    done: function () {\n        this.delegate.done();\n    }\n});\n\nmodule.exports = FileWriter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvZmlsZS13cml0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxtQkFBTyxDQUFDLGtCQUFNO0FBQ3pCLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QixTQUFTLG1CQUFPLENBQUMsY0FBSTtBQUNyQixZQUFZLG1CQUFPLENBQUMsK0VBQU87QUFDM0IsYUFBYSxtQkFBTyxDQUFDLG9EQUFRO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyxxRUFBVTtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGdDQUFnQztBQUMxRCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw0Q0FBNEMsMEJBQTBCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsc0JBQXNCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLDBCQUEwQjtBQUN6RSwyQ0FBMkMsb0JBQW9CO0FBQy9EOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvZmlsZS13cml0ZXIuanM/NWU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIENvcHlyaWdodCAoYykgMjAxMiwgWWFob28hIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG4gICAgZnMgPSByZXF1aXJlKCdmcycpLFxuICAgIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKSxcbiAgICBta2RpcnAgPSByZXF1aXJlKCdta2RpcnAnKSxcbiAgICB3cml0ZXIgPSByZXF1aXJlKCcuL3dyaXRlcicpLFxuICAgIFdyaXRlciA9IHdyaXRlci5Xcml0ZXIsXG4gICAgQ29udGVudFdyaXRlciA9IHdyaXRlci5Db250ZW50V3JpdGVyO1xuXG5mdW5jdGlvbiBleHRlbmQoY29ucywgcHJvdG8pIHtcbiAgICBPYmplY3Qua2V5cyhwcm90bykuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICBjb25zLnByb3RvdHlwZVtrXSA9IHByb3RvW2tdO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBCdWZmZXJlZENvbnRlbnRXcml0ZXIoKSB7XG4gICAgQ29udGVudFdyaXRlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuY29udGVudCA9ICcnO1xufVxudXRpbC5pbmhlcml0cyhCdWZmZXJlZENvbnRlbnRXcml0ZXIsIENvbnRlbnRXcml0ZXIpO1xuXG5leHRlbmQoQnVmZmVyZWRDb250ZW50V3JpdGVyLCB7XG4gICAgd3JpdGU6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdGhpcy5jb250ZW50ICs9IHN0cjtcbiAgICB9LFxuICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gU3RyZWFtQ29udGVudFdyaXRlcihzdHJlYW0pIHtcbiAgICBDb250ZW50V3JpdGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XG59XG51dGlsLmluaGVyaXRzKFN0cmVhbUNvbnRlbnRXcml0ZXIsIENvbnRlbnRXcml0ZXIpO1xuXG5leHRlbmQoU3RyZWFtQ29udGVudFdyaXRlciwge1xuICAgIHdyaXRlOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtLndyaXRlKHN0cik7XG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIFN5bmNGaWxlV3JpdGVyKCkge1xuICAgIFdyaXRlci5jYWxsKHRoaXMpO1xufVxudXRpbC5pbmhlcml0cyhTeW5jRmlsZVdyaXRlciwgV3JpdGVyKTtcblxuZXh0ZW5kKFN5bmNGaWxlV3JpdGVyLCB7XG4gICAgd3JpdGVGaWxlOiBmdW5jdGlvbiAoZmlsZSwgY2FsbGJhY2spIHtcbiAgICAgICAgbWtkaXJwLnN5bmMocGF0aC5kaXJuYW1lKGZpbGUpKTtcbiAgICAgICAgdmFyIGN3ID0gbmV3IEJ1ZmZlcmVkQ29udGVudFdyaXRlcigpO1xuICAgICAgICBjYWxsYmFjayhjdyk7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZSwgY3cuZ2V0Q29udGVudCgpLCAndXRmOCcpO1xuICAgIH0sXG4gICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RvbmUnKTsgLy9ldmVyeXRoaW5nIGFscmVhZHkgZG9uZVxuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBBc3luY0ZpbGVXcml0ZXIoKSB7XG4gICAgdGhpcy5xdWV1ZSA9IGFzeW5jLnF1ZXVlKHRoaXMucHJvY2Vzc0ZpbGUuYmluZCh0aGlzKSwgMjApO1xuICAgIHRoaXMub3BlbkZpbGVNYXAgPSB7fTtcbn1cblxudXRpbC5pbmhlcml0cyhBc3luY0ZpbGVXcml0ZXIsIFdyaXRlcik7XG5cbmV4dGVuZChBc3luY0ZpbGVXcml0ZXIsIHtcbiAgICB3cml0ZUZpbGU6IGZ1bmN0aW9uIChmaWxlLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm9wZW5GaWxlTWFwW2ZpbGVdID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKHsgZmlsZTogZmlsZSwgY2FsbGJhY2s6IGNhbGxiYWNrIH0pO1xuICAgIH0sXG4gICAgcHJvY2Vzc0ZpbGU6IGZ1bmN0aW9uICh0YXNrLCBjYikge1xuICAgICAgICB2YXIgZmlsZSA9IHRhc2suZmlsZSxcbiAgICAgICAgICAgIHVzZXJDYWxsYmFjayA9IHRhc2suY2FsbGJhY2ssXG4gICAgICAgICAgICB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgIHN0cmVhbSxcbiAgICAgICAgICAgIGNvbnRlbnRXcml0ZXI7XG5cbiAgICAgICAgbWtkaXJwLnN5bmMocGF0aC5kaXJuYW1lKGZpbGUpKTtcbiAgICAgICAgc3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oZmlsZSk7XG4gICAgICAgIHN0cmVhbS5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhhdC5vcGVuRmlsZU1hcFtmaWxlXTtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICB0aGF0LmNoZWNrRG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHsgdGhhdC5lbWl0KCdlcnJvcicsIGVycik7IH0pO1xuICAgICAgICBjb250ZW50V3JpdGVyID0gbmV3IFN0cmVhbUNvbnRlbnRXcml0ZXIoc3RyZWFtKTtcbiAgICAgICAgdXNlckNhbGxiYWNrKGNvbnRlbnRXcml0ZXIpO1xuICAgICAgICBzdHJlYW0uZW5kKCk7XG4gICAgfSxcbiAgICBkb25lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZG9uZUNhbGxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hlY2tEb25lKCk7XG4gICAgfSxcbiAgICBjaGVja0RvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRvbmVDYWxsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLm9wZW5GaWxlTWFwKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZG9uZScpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4vKipcbiAqIGEgY29uY3JldGUgd3JpdGVyIGltcGxlbWVudGF0aW9uIHRoYXQgY2FuIHdyaXRlIGZpbGVzIHN5bmNocm9ub3VzbHkgb3JcbiAqIGFzeW5jaHJvbm91c2x5IGJhc2VkIG9uIHRoZSBjb25zdHJ1Y3RvciBhcmd1bWVudCBwYXNzZWQgdG8gaXQuXG4gKlxuICogVXNhZ2VcbiAqIC0tLS0tXG4gKlxuICogICAgICB2YXIgc3luYyA9IHRydWUsXG4gKiAgICAgICAgICBmaWxlV3JpdGVyID0gbmV3IHJlcXVpcmUoJ2lzdGFuYnVsJykuRmlsZVdyaXRlcihzeW5jKTtcbiAqXG4gKiAgICAgIGZpbGVXcml0ZXIub24oJ2RvbmUnLCBmdW5jdGlvbiAoKSB7IGNvbnNvbGUubG9nKCdkb25lJyk7IH0pO1xuICogICAgICBmaWxlV3JpdGVyLmNvcHlGaWxlKCcvZm9vL2Jhci5qcGcnLCAnL2Jhei9iYXIuanBnJyk7XG4gKiAgICAgIGZpbGVXcml0ZXIud3JpdGVGaWxlKCcvZm9vL2luZGV4Lmh0bWwnLCBmdW5jdGlvbiAoY29udGVudFdyaXRlcikge1xuICogICAgICAgICAgY29udGVudFdyaXRlci5wcmludGxuKCc8aHRtbD4nKTtcbiAqICAgICAgICAgIGNvbnRlbnRXcml0ZXIucHJpbnRsbignPC9odG1sPicpO1xuICogICAgICB9KTtcbiAqICAgICAgZmlsZVdyaXRlci5kb25lKCk7IC8vIHdpbGwgZW1pdCB0aGUgYGRvbmVgIGV2ZW50IHdoZW4gYWxsIGZpbGVzIGFyZSB3cml0dGVuXG4gKlxuICogQGNsYXNzIEZpbGVXcml0ZXJcbiAqIEBleHRlbmRzIFdyaXRlclxuICogQG1vZHVsZSBpb1xuICogQHBhcmFtIHN5bmNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGaWxlV3JpdGVyKHN5bmMpIHtcbiAgICBXcml0ZXIuY2FsbCh0aGlzKTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy5kZWxlZ2F0ZSA9IHN5bmMgPyBuZXcgU3luY0ZpbGVXcml0ZXIoKSA6IG5ldyBBc3luY0ZpbGVXcml0ZXIoKTtcbiAgICB0aGlzLmRlbGVnYXRlLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHsgdGhhdC5lbWl0KCdlcnJvcicsIGVycik7IH0pO1xuICAgIHRoaXMuZGVsZWdhdGUub24oJ2RvbmUnLCBmdW5jdGlvbiAoKSB7IHRoYXQuZW1pdCgnZG9uZScpOyB9KTtcbn1cblxudXRpbC5pbmhlcml0cyhGaWxlV3JpdGVyLCBXcml0ZXIpO1xuXG5leHRlbmQoRmlsZVdyaXRlciwge1xuICAgIGNvcHlGaWxlOiBmdW5jdGlvbiAoc291cmNlLCBkZXN0KSB7XG4gICAgICAgIG1rZGlycC5zeW5jKHBhdGguZGlybmFtZShkZXN0KSk7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoZGVzdCwgZnMucmVhZEZpbGVTeW5jKHNvdXJjZSkpO1xuICAgIH0sXG4gICAgd3JpdGVGaWxlOiBmdW5jdGlvbiAoZmlsZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS53cml0ZUZpbGUoZmlsZSwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgZG9uZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlLmRvbmUoKTtcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlV3JpdGVyOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/file-writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/input-error.js":
/*!**********************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/input-error.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nmodule.exports.create = function (message) {\n    var err = new Error(message);\n    err.inputError = true;\n    return err;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvaW5wdXQtZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zYy1pc3RhbmJ1bC9saWIvdXRpbC9pbnB1dC1lcnJvci5qcz9lNTYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IChjKSAyMDEyLCBZYWhvbyEgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVyci5pbnB1dEVycm9yID0gdHJ1ZTtcbiAgICByZXR1cm4gZXJyO1xufTtcblxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/input-error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/meta.js":
/*!***************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/meta.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar path = __webpack_require__(/*! path */ \"path\"),\n    fs = __webpack_require__(/*! fs */ \"fs\"),\n    pkg = JSON.parse(fs.readFileSync(path.resolve(__dirname, '..', '..', 'package.json'), 'utf8'));\n\nmodule.exports = {\n    NAME: pkg.name,\n    VERSION: pkg.version\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvbWV0YS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QixTQUFTLG1CQUFPLENBQUMsY0FBSTtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvbWV0YS5qcz83YmIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IChjKSAyMDEyLCBZYWhvbyEgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICAgIGZzID0gcmVxdWlyZSgnZnMnKSxcbiAgICBwa2cgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAncGFja2FnZS5qc29uJyksICd1dGY4JykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBOQU1FOiBwa2cubmFtZSxcbiAgICBWRVJTSU9OOiBwa2cudmVyc2lvblxufTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/meta.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/tree-summarizer.js":
/*!**************************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/tree-summarizer.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar path = __webpack_require__(/*! path */ \"path\"),\n    SEP = path.sep || '/',\n    utils = __webpack_require__(/*! ../object-utils */ \"(ssr)/./node_modules/sc-istanbul/lib/object-utils.js\");\n\nfunction commonArrayPrefix(first, second) {\n    var len = first.length < second.length ? first.length : second.length,\n        i,\n        ret = [];\n    for (i = 0; i < len; i += 1) {\n        if (first[i] === second[i]) {\n            ret.push(first[i]);\n        } else {\n            break;\n        }\n    }\n    return ret;\n}\n\nfunction findCommonArrayPrefix(args) {\n    if (args.length === 0) {\n        return [];\n    }\n\n    var separated = args.map(function (arg) { return arg.split(SEP); }),\n        ret = separated.pop();\n\n    if (separated.length === 0) {\n        return ret.slice(0, ret.length - 1);\n    } else {\n        return separated.reduce(commonArrayPrefix, ret);\n    }\n}\n\nfunction Node(fullName, kind, metrics) {\n    this.name = fullName;\n    this.fullName = fullName;\n    this.kind = kind;\n    this.metrics = metrics || null;\n    this.parent = null;\n    this.children = [];\n}\n\nNode.prototype = {\n    displayShortName: function () {\n        return this.relativeName;\n    },\n    fullPath: function () {\n        return this.fullName;\n    },\n    addChild: function (child) {\n        this.children.push(child);\n        child.parent = this;\n    },\n    toJSON: function () {\n        return {\n            name: this.name,\n            relativeName: this.relativeName,\n            fullName: this.fullName,\n            kind: this.kind,\n            metrics: this.metrics,\n            parent: this.parent === null ? null : this.parent.name,\n            children: this.children.map(function (node) { return node.toJSON(); })\n        };\n    }\n};\n\nfunction TreeSummary(summaryMap, commonPrefix) {\n    this.prefix = commonPrefix;\n    this.convertToTree(summaryMap, commonPrefix);\n}\n\nTreeSummary.prototype = {\n    getNode: function (shortName) {\n        return this.map[shortName];\n    },\n    convertToTree: function (summaryMap, arrayPrefix) {\n        var nodes = [],\n            rootPath = arrayPrefix.join(SEP) + SEP,\n            root = new Node(rootPath, 'dir'),\n            tmp,\n            tmpChildren,\n            seen = {},\n            filesUnderRoot = false;\n\n        seen[rootPath] = root;\n        Object.keys(summaryMap).forEach(function (key) {\n            var metrics = summaryMap[key],\n                node,\n                parentPath,\n                parent;\n            node = new Node(key, 'file', metrics);\n            seen[key] = node;\n            nodes.push(node);\n            parentPath = path.dirname(key) + SEP;\n            if (parentPath === SEP + SEP || parentPath === '.' + SEP) {\n                parentPath = SEP + '__root__' + SEP;\n            }\n            parent = seen[parentPath];\n            if (!parent) {\n                parent = new Node(parentPath, 'dir');\n                root.addChild(parent);\n                seen[parentPath] = parent;\n            }\n            parent.addChild(node);\n            if (parent === root) { filesUnderRoot = true; }\n        });\n\n        if (filesUnderRoot && arrayPrefix.length > 0) {\n            arrayPrefix.pop(); //start at one level above\n            tmp = root;\n            tmpChildren = tmp.children;\n            tmp.children = [];\n            root = new Node(arrayPrefix.join(SEP) + SEP, 'dir');\n            root.addChild(tmp);\n            tmpChildren.forEach(function (child) {\n                if (child.kind === 'dir') {\n                    root.addChild(child);\n                } else {\n                    tmp.addChild(child);\n                }\n            });\n        }\n        this.fixupNodes(root, arrayPrefix.join(SEP) + SEP);\n        this.calculateMetrics(root);\n        this.root = root;\n        this.map = {};\n        this.indexAndSortTree(root, this.map);\n    },\n\n    fixupNodes: function (node, prefix, parent) {\n        var that = this;\n        if (node.name.indexOf(prefix) === 0) {\n            node.name = node.name.substring(prefix.length);\n        }\n        if (node.name.charAt(0) === SEP) {\n            node.name = node.name.substring(1);\n        }\n        if (parent) {\n            if (parent.name !== '__root__' + SEP) {\n                node.relativeName = node.name.substring(parent.name.length);\n            } else {\n                node.relativeName = node.name;\n            }\n        } else {\n            node.relativeName = node.name.substring(prefix.length);\n        }\n        node.children.forEach(function (child) {\n            that.fixupNodes(child, prefix, node);\n        });\n    },\n    calculateMetrics: function (entry) {\n        var that = this,\n            fileChildren;\n        if (entry.kind !== 'dir') {return; }\n        entry.children.forEach(function (child) {\n            that.calculateMetrics(child);\n        });\n        entry.metrics = utils.mergeSummaryObjects.apply(\n            null,\n            entry.children.map(function (child) { return child.metrics; })\n        );\n        // calclulate \"java-style\" package metrics where there is no hierarchy\n        // across packages\n        fileChildren = entry.children.filter(function (n) { return n.kind !== 'dir'; });\n        if (fileChildren.length > 0) {\n            entry.packageMetrics = utils.mergeSummaryObjects.apply(\n                null,\n                fileChildren.map(function (child) { return child.metrics; })\n            );\n        } else {\n            entry.packageMetrics = null;\n        }\n    },\n    indexAndSortTree: function (node, map) {\n        var that = this;\n        map[node.name] = node;\n        node.children.sort(function (a, b) {\n            a = a.relativeName;\n            b = b.relativeName;\n            return a < b ? -1 : a > b ? 1 : 0;\n        });\n        node.children.forEach(function (child) {\n            that.indexAndSortTree(child, map);\n        });\n    },\n    toJSON: function () {\n        return {\n            prefix: this.prefix,\n            root: this.root.toJSON()\n        };\n    }\n};\n\nfunction TreeSummarizer() {\n    this.summaryMap = {};\n}\n\nTreeSummarizer.prototype = {\n    addFileCoverageSummary: function (filePath, metrics) {\n        this.summaryMap[filePath] = metrics;\n    },\n    getTreeSummary: function () {\n        var commonArrayPrefix = findCommonArrayPrefix(Object.keys(this.summaryMap));\n        return new TreeSummary(this.summaryMap, commonArrayPrefix);\n    }\n};\n\nmodule.exports = TreeSummarizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/tree-summarizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/writer.js":
/*!*****************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/writer.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\nvar util = __webpack_require__(/*! util */ \"util\"),\n    EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n\nfunction extend(cons, proto) {\n    Object.keys(proto).forEach(function (k) {\n        cons.prototype[k] = proto[k];\n    });\n}\n\n/**\n * abstract interfaces for writing content\n * @class ContentWriter\n * @module io\n * @main io\n * @constructor\n */\n//abstract interface for writing content\nfunction ContentWriter() {\n}\n\nContentWriter.prototype = {\n    /**\n     * writes the specified string as-is\n     * @method write\n     * @param {String} str the string to write\n     */\n    write: /* istanbul ignore next: abstract method */ function (/* str */) {\n        throw new Error('write: must be overridden');\n    },\n    /**\n     * writes the specified string with a newline at the end\n     * @method println\n     * @param {String} str the string to write\n     */\n    println: function (str) { this.write(str + '\\n'); }\n};\n\n/**\n * abstract interface for writing files and assets. The caller is expected to\n * call `done` on the writer after it has finished writing all the required\n * files. The writer is an event-emitter that emits a `done` event when `done`\n * is called on it *and* all files have successfully been written.\n *\n * @class Writer\n * @constructor\n */\nfunction Writer() {\n    EventEmitter.call(this);\n}\n\nutil.inherits(Writer, EventEmitter);\n\nextend(Writer, {\n    /**\n     * allows writing content to a file using a callback that is passed a content writer\n     * @method writeFile\n     * @param {String} file the name of the file to write\n     * @param {Function} callback the callback that is called as `callback(contentWriter)`\n     */\n    writeFile: /* istanbul ignore next: abstract method */ function (/* file, callback */) {\n        throw new Error('writeFile: must be overridden');\n    },\n    /**\n     * copies a file from source to destination\n     * @method copyFile\n     * @param {String} source the file to copy, found on the file system\n     * @param {String} dest the destination path\n     */\n    copyFile: /* istanbul ignore next: abstract method */ function (/* source, dest */) {\n        throw new Error('copyFile: must be overridden');\n    },\n    /**\n     * marker method to indicate that the caller is done with this writer object\n     * The writer is expected to emit a `done` event only after this method is called\n     * and it is truly done.\n     * @method done\n     */\n    done: /* istanbul ignore next: abstract method */ function () {\n        throw new Error('done: must be overridden');\n    }\n});\n\nmodule.exports = {\n    Writer: Writer,\n    ContentWriter: ContentWriter\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwvd3JpdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxrQkFBTTtBQUN6QixtQkFBbUIsMERBQThCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLDhCQUE4QjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zYy1pc3RhbmJ1bC9saWIvdXRpbC93cml0ZXIuanM/YTE3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIENvcHlyaWdodCAoYykgMjAxMiwgWWFob28hIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuZnVuY3Rpb24gZXh0ZW5kKGNvbnMsIHByb3RvKSB7XG4gICAgT2JqZWN0LmtleXMocHJvdG8pLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgY29ucy5wcm90b3R5cGVba10gPSBwcm90b1trXTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBhYnN0cmFjdCBpbnRlcmZhY2VzIGZvciB3cml0aW5nIGNvbnRlbnRcbiAqIEBjbGFzcyBDb250ZW50V3JpdGVyXG4gKiBAbW9kdWxlIGlvXG4gKiBAbWFpbiBpb1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbi8vYWJzdHJhY3QgaW50ZXJmYWNlIGZvciB3cml0aW5nIGNvbnRlbnRcbmZ1bmN0aW9uIENvbnRlbnRXcml0ZXIoKSB7XG59XG5cbkNvbnRlbnRXcml0ZXIucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHdyaXRlcyB0aGUgc3BlY2lmaWVkIHN0cmluZyBhcy1pc1xuICAgICAqIEBtZXRob2Qgd3JpdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gd3JpdGVcbiAgICAgKi9cbiAgICB3cml0ZTogLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGFic3RyYWN0IG1ldGhvZCAqLyBmdW5jdGlvbiAoLyogc3RyICovKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignd3JpdGU6IG11c3QgYmUgb3ZlcnJpZGRlbicpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogd3JpdGVzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHdpdGggYSBuZXdsaW5lIGF0IHRoZSBlbmRcbiAgICAgKiBAbWV0aG9kIHByaW50bG5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gd3JpdGVcbiAgICAgKi9cbiAgICBwcmludGxuOiBmdW5jdGlvbiAoc3RyKSB7IHRoaXMud3JpdGUoc3RyICsgJ1xcbicpOyB9XG59O1xuXG4vKipcbiAqIGFic3RyYWN0IGludGVyZmFjZSBmb3Igd3JpdGluZyBmaWxlcyBhbmQgYXNzZXRzLiBUaGUgY2FsbGVyIGlzIGV4cGVjdGVkIHRvXG4gKiBjYWxsIGBkb25lYCBvbiB0aGUgd3JpdGVyIGFmdGVyIGl0IGhhcyBmaW5pc2hlZCB3cml0aW5nIGFsbCB0aGUgcmVxdWlyZWRcbiAqIGZpbGVzLiBUaGUgd3JpdGVyIGlzIGFuIGV2ZW50LWVtaXR0ZXIgdGhhdCBlbWl0cyBhIGBkb25lYCBldmVudCB3aGVuIGBkb25lYFxuICogaXMgY2FsbGVkIG9uIGl0ICphbmQqIGFsbCBmaWxlcyBoYXZlIHN1Y2Nlc3NmdWxseSBiZWVuIHdyaXR0ZW4uXG4gKlxuICogQGNsYXNzIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFdyaXRlcigpIHtcbiAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbn1cblxudXRpbC5pbmhlcml0cyhXcml0ZXIsIEV2ZW50RW1pdHRlcik7XG5cbmV4dGVuZChXcml0ZXIsIHtcbiAgICAvKipcbiAgICAgKiBhbGxvd3Mgd3JpdGluZyBjb250ZW50IHRvIGEgZmlsZSB1c2luZyBhIGNhbGxiYWNrIHRoYXQgaXMgcGFzc2VkIGEgY29udGVudCB3cml0ZXJcbiAgICAgKiBAbWV0aG9kIHdyaXRlRmlsZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlIHRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIHdyaXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIGFzIGBjYWxsYmFjayhjb250ZW50V3JpdGVyKWBcbiAgICAgKi9cbiAgICB3cml0ZUZpbGU6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBhYnN0cmFjdCBtZXRob2QgKi8gZnVuY3Rpb24gKC8qIGZpbGUsIGNhbGxiYWNrICovKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignd3JpdGVGaWxlOiBtdXN0IGJlIG92ZXJyaWRkZW4nKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGNvcGllcyBhIGZpbGUgZnJvbSBzb3VyY2UgdG8gZGVzdGluYXRpb25cbiAgICAgKiBAbWV0aG9kIGNvcHlGaWxlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNvdXJjZSB0aGUgZmlsZSB0byBjb3B5LCBmb3VuZCBvbiB0aGUgZmlsZSBzeXN0ZW1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGVzdCB0aGUgZGVzdGluYXRpb24gcGF0aFxuICAgICAqL1xuICAgIGNvcHlGaWxlOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogYWJzdHJhY3QgbWV0aG9kICovIGZ1bmN0aW9uICgvKiBzb3VyY2UsIGRlc3QgKi8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3B5RmlsZTogbXVzdCBiZSBvdmVycmlkZGVuJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBtYXJrZXIgbWV0aG9kIHRvIGluZGljYXRlIHRoYXQgdGhlIGNhbGxlciBpcyBkb25lIHdpdGggdGhpcyB3cml0ZXIgb2JqZWN0XG4gICAgICogVGhlIHdyaXRlciBpcyBleHBlY3RlZCB0byBlbWl0IGEgYGRvbmVgIGV2ZW50IG9ubHkgYWZ0ZXIgdGhpcyBtZXRob2QgaXMgY2FsbGVkXG4gICAgICogYW5kIGl0IGlzIHRydWx5IGRvbmUuXG4gICAgICogQG1ldGhvZCBkb25lXG4gICAgICovXG4gICAgZG9uZTogLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGFic3RyYWN0IG1ldGhvZCAqLyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZG9uZTogbXVzdCBiZSBvdmVycmlkZGVuJyk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFdyaXRlcjogV3JpdGVyLFxuICAgIENvbnRlbnRXcml0ZXI6IENvbnRlbnRXcml0ZXJcbn07XG5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/lib/util/yui-load-hook.js":
/*!************************************************************!*\
  !*** ./node_modules/sc-istanbul/lib/util/yui-load-hook.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n Copyright (c) 2012, Yahoo! Inc.  All rights reserved.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n\n//EXPERIMENTAL code: do not rely on this in anyway until the docs say it is allowed\n\nvar path = __webpack_require__(/*! path */ \"path\"),\n    yuiRegexp = /yui-nodejs\\.js$/;\n\nmodule.exports = function (matchFn, transformFn, verbose) {\n    return function (file) {\n        if (!file.match(yuiRegexp)) {\n            return;\n        }\n        var YMain = __webpack_require__(\"(ssr)/./node_modules/sc-istanbul/lib/util sync recursive\")(file),\n            YUI,\n            loaderFn,\n            origGet;\n\n        if (YMain.YUI) {\n            YUI = YMain.YUI;\n            loaderFn = YUI.Env && YUI.Env.mods && YUI.Env.mods['loader-base'] ? YUI.Env.mods['loader-base'].fn : null;\n            if (!loaderFn) { return; }\n            if (verbose) { console.log('Applying YUI load post-hook'); }\n            YUI.Env.mods['loader-base'].fn = function (Y) {\n                loaderFn.call(null, Y);\n                origGet = Y.Get._exec;\n                Y.Get._exec = function (data, url, cb) {\n                    if (matchFn(url) || matchFn(path.resolve(url))) { //allow for relative paths as well\n                        if (verbose) {\n                            console.log('Transforming [' + url + ']');\n                        }\n                        try {\n                            data = transformFn(data, url);\n                        } catch (ex) {\n                            console.error('Error transforming: ' + url + ' return original code');\n                            console.error(ex.message || ex);\n                            if (ex.stack) { console.error(ex.stack); }\n                        }\n                    }\n                    return origGet.call(Y, data, url, cb);\n                };\n                return Y;\n            };\n        }\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwveXVpLWxvYWQtaG9vay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxXQUFXLG1CQUFPLENBQUMsa0JBQU07QUFDekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnRkFBUSxJQUFJLENBQUM7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbGliL3V0aWwveXVpLWxvYWQtaG9vay5qcz83ZmI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gQ29weXJpZ2h0IChjKSAyMDEyLCBZYWhvbyEgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cblxuLy9FWFBFUklNRU5UQUwgY29kZTogZG8gbm90IHJlbHkgb24gdGhpcyBpbiBhbnl3YXkgdW50aWwgdGhlIGRvY3Mgc2F5IGl0IGlzIGFsbG93ZWRcblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyksXG4gICAgeXVpUmVnZXhwID0gL3l1aS1ub2RlanNcXC5qcyQvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaEZuLCB0cmFuc2Zvcm1GbiwgdmVyYm9zZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICBpZiAoIWZpbGUubWF0Y2goeXVpUmVnZXhwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBZTWFpbiA9IHJlcXVpcmUoZmlsZSksXG4gICAgICAgICAgICBZVUksXG4gICAgICAgICAgICBsb2FkZXJGbixcbiAgICAgICAgICAgIG9yaWdHZXQ7XG5cbiAgICAgICAgaWYgKFlNYWluLllVSSkge1xuICAgICAgICAgICAgWVVJID0gWU1haW4uWVVJO1xuICAgICAgICAgICAgbG9hZGVyRm4gPSBZVUkuRW52ICYmIFlVSS5FbnYubW9kcyAmJiBZVUkuRW52Lm1vZHNbJ2xvYWRlci1iYXNlJ10gPyBZVUkuRW52Lm1vZHNbJ2xvYWRlci1iYXNlJ10uZm4gOiBudWxsO1xuICAgICAgICAgICAgaWYgKCFsb2FkZXJGbikgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGlmICh2ZXJib3NlKSB7IGNvbnNvbGUubG9nKCdBcHBseWluZyBZVUkgbG9hZCBwb3N0LWhvb2snKTsgfVxuICAgICAgICAgICAgWVVJLkVudi5tb2RzWydsb2FkZXItYmFzZSddLmZuID0gZnVuY3Rpb24gKFkpIHtcbiAgICAgICAgICAgICAgICBsb2FkZXJGbi5jYWxsKG51bGwsIFkpO1xuICAgICAgICAgICAgICAgIG9yaWdHZXQgPSBZLkdldC5fZXhlYztcbiAgICAgICAgICAgICAgICBZLkdldC5fZXhlYyA9IGZ1bmN0aW9uIChkYXRhLCB1cmwsIGNiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaEZuKHVybCkgfHwgbWF0Y2hGbihwYXRoLnJlc29sdmUodXJsKSkpIHsgLy9hbGxvdyBmb3IgcmVsYXRpdmUgcGF0aHMgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcmJvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVHJhbnNmb3JtaW5nIFsnICsgdXJsICsgJ10nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRyYW5zZm9ybUZuKGRhdGEsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRyYW5zZm9ybWluZzogJyArIHVybCArICcgcmV0dXJuIG9yaWdpbmFsIGNvZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGV4Lm1lc3NhZ2UgfHwgZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleC5zdGFjaykgeyBjb25zb2xlLmVycm9yKGV4LnN0YWNrKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnR2V0LmNhbGwoWSwgZGF0YSwgdXJsLCBjYik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/lib/util/yui-load-hook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/node_modules/async/lib/async.js":
/*!******************************************************************!*\
  !*** ./node_modules/sc-istanbul/node_modules/async/lib/async.js ***!
  \******************************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (typeof arguments[1] === 'function') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var hasError = false;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            if (hasError) return;\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    hasError = true;\n\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback.apply(null, [null].concat(args));\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                while(!q.paused && workers < q.concurrency && q.tasks.length){\n\n                    var tasks = q.payload ?\n                        q.tasks.splice(0, q.payload) :\n                        q.tasks.splice(0, q.tasks.length);\n\n                    var data = _map(tasks, function (task) {\n                        return task.data;\n                    });\n\n                    if (q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    workersList.push(tasks[0]);\n                    var cb = only_once(_next(q, tasks));\n                    worker(data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        var has = Object.prototype.hasOwnProperty;\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (has.call(memo, key)) {   \n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (has.call(queues, key)) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if ( true && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n            return async;\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    // included directly via <script> tag\n    else {}\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/node_modules/async/lib/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/node_modules/glob/common.js":
/*!**************************************************************!*\
  !*** ./node_modules/sc-istanbul/node_modules/glob/common.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.alphasort = alphasort\nexports.alphasorti = alphasorti\nexports.setopts = setopts\nexports.ownProp = ownProp\nexports.makeAbs = makeAbs\nexports.finish = finish\nexports.mark = mark\nexports.isIgnored = isIgnored\nexports.childrenIgnored = childrenIgnored\n\nfunction ownProp (obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field)\n}\n\nvar path = __webpack_require__(/*! path */ \"path\")\nvar minimatch = __webpack_require__(/*! minimatch */ \"(ssr)/./node_modules/minimatch/minimatch.js\")\nvar isAbsolute = __webpack_require__(/*! path-is-absolute */ \"(ssr)/./node_modules/path-is-absolute/index.js\")\nvar Minimatch = minimatch.Minimatch\n\nfunction alphasorti (a, b) {\n  return a.toLowerCase().localeCompare(b.toLowerCase())\n}\n\nfunction alphasort (a, b) {\n  return a.localeCompare(b)\n}\n\nfunction setupIgnores (self, options) {\n  self.ignore = options.ignore || []\n\n  if (!Array.isArray(self.ignore))\n    self.ignore = [self.ignore]\n\n  if (self.ignore.length) {\n    self.ignore = self.ignore.map(ignoreMap)\n  }\n}\n\nfunction ignoreMap (pattern) {\n  var gmatcher = null\n  if (pattern.slice(-3) === '/**') {\n    var gpattern = pattern.replace(/(\\/\\*\\*)+$/, '')\n    gmatcher = new Minimatch(gpattern)\n  }\n\n  return {\n    matcher: new Minimatch(pattern),\n    gmatcher: gmatcher\n  }\n}\n\nfunction setopts (self, pattern, options) {\n  if (!options)\n    options = {}\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\")\n    }\n    pattern = \"**/\" + pattern\n  }\n\n  self.silent = !!options.silent\n  self.pattern = pattern\n  self.strict = options.strict !== false\n  self.realpath = !!options.realpath\n  self.realpathCache = options.realpathCache || Object.create(null)\n  self.follow = !!options.follow\n  self.dot = !!options.dot\n  self.mark = !!options.mark\n  self.nodir = !!options.nodir\n  if (self.nodir)\n    self.mark = true\n  self.sync = !!options.sync\n  self.nounique = !!options.nounique\n  self.nonull = !!options.nonull\n  self.nosort = !!options.nosort\n  self.nocase = !!options.nocase\n  self.stat = !!options.stat\n  self.noprocess = !!options.noprocess\n\n  self.maxLength = options.maxLength || Infinity\n  self.cache = options.cache || Object.create(null)\n  self.statCache = options.statCache || Object.create(null)\n  self.symlinks = options.symlinks || Object.create(null)\n\n  setupIgnores(self, options)\n\n  self.changedCwd = false\n  var cwd = process.cwd()\n  if (!ownProp(options, \"cwd\"))\n    self.cwd = cwd\n  else {\n    self.cwd = options.cwd\n    self.changedCwd = path.resolve(options.cwd) !== cwd\n  }\n\n  self.root = options.root || path.resolve(self.cwd, \"/\")\n  self.root = path.resolve(self.root)\n  if (process.platform === \"win32\")\n    self.root = self.root.replace(/\\\\/g, \"/\")\n\n  self.nomount = !!options.nomount\n\n  // disable comments and negation unless the user explicitly\n  // passes in false as the option.\n  options.nonegate = options.nonegate === false ? false : true\n  options.nocomment = options.nocomment === false ? false : true\n  deprecationWarning(options)\n\n  self.minimatch = new Minimatch(pattern, options)\n  self.options = self.minimatch.options\n}\n\n// TODO(isaacs): remove entirely in v6\n// exported to reset in tests\nexports.deprecationWarned\nfunction deprecationWarning(options) {\n  if (!options.nonegate || !options.nocomment) {\n    if (process.noDeprecation !== true && !exports.deprecationWarned) {\n      var msg = 'glob WARNING: comments and negation will be disabled in v6'\n      if (process.throwDeprecation)\n        throw new Error(msg)\n      else if (process.traceDeprecation)\n        console.trace(msg)\n      else\n        console.error(msg)\n\n      exports.deprecationWarned = true\n    }\n  }\n}\n\nfunction finish (self) {\n  var nou = self.nounique\n  var all = nou ? [] : Object.create(null)\n\n  for (var i = 0, l = self.matches.length; i < l; i ++) {\n    var matches = self.matches[i]\n    if (!matches || Object.keys(matches).length === 0) {\n      if (self.nonull) {\n        // do like the shell, and spit out the literal glob\n        var literal = self.minimatch.globSet[i]\n        if (nou)\n          all.push(literal)\n        else\n          all[literal] = true\n      }\n    } else {\n      // had matches\n      var m = Object.keys(matches)\n      if (nou)\n        all.push.apply(all, m)\n      else\n        m.forEach(function (m) {\n          all[m] = true\n        })\n    }\n  }\n\n  if (!nou)\n    all = Object.keys(all)\n\n  if (!self.nosort)\n    all = all.sort(self.nocase ? alphasorti : alphasort)\n\n  // at *some* point we statted all of these\n  if (self.mark) {\n    for (var i = 0; i < all.length; i++) {\n      all[i] = self._mark(all[i])\n    }\n    if (self.nodir) {\n      all = all.filter(function (e) {\n        return !(/\\/$/.test(e))\n      })\n    }\n  }\n\n  if (self.ignore.length)\n    all = all.filter(function(m) {\n      return !isIgnored(self, m)\n    })\n\n  self.found = all\n}\n\nfunction mark (self, p) {\n  var abs = makeAbs(self, p)\n  var c = self.cache[abs]\n  var m = p\n  if (c) {\n    var isDir = c === 'DIR' || Array.isArray(c)\n    var slash = p.slice(-1) === '/'\n\n    if (isDir && !slash)\n      m += '/'\n    else if (!isDir && slash)\n      m = m.slice(0, -1)\n\n    if (m !== p) {\n      var mabs = makeAbs(self, m)\n      self.statCache[mabs] = self.statCache[abs]\n      self.cache[mabs] = self.cache[abs]\n    }\n  }\n\n  return m\n}\n\n// lotta situps...\nfunction makeAbs (self, f) {\n  var abs = f\n  if (f.charAt(0) === '/') {\n    abs = path.join(self.root, f)\n  } else if (isAbsolute(f) || f === '') {\n    abs = f\n  } else if (self.changedCwd) {\n    abs = path.resolve(self.cwd, f)\n  } else {\n    abs = path.resolve(f)\n  }\n  return abs\n}\n\n\n// Return true, if pattern ends with globstar '**', for the accompanying parent directory.\n// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents\nfunction isIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n\nfunction childrenIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/node_modules/glob/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/node_modules/glob/glob.js":
/*!************************************************************!*\
  !*** ./node_modules/sc-istanbul/node_modules/glob/glob.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\nmodule.exports = glob\n\nvar fs = __webpack_require__(/*! fs */ \"fs\")\nvar minimatch = __webpack_require__(/*! minimatch */ \"(ssr)/./node_modules/minimatch/minimatch.js\")\nvar Minimatch = minimatch.Minimatch\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")\nvar EE = (__webpack_require__(/*! events */ \"events\").EventEmitter)\nvar path = __webpack_require__(/*! path */ \"path\")\nvar assert = __webpack_require__(/*! assert */ \"assert\")\nvar isAbsolute = __webpack_require__(/*! path-is-absolute */ \"(ssr)/./node_modules/path-is-absolute/index.js\")\nvar globSync = __webpack_require__(/*! ./sync.js */ \"(ssr)/./node_modules/sc-istanbul/node_modules/glob/sync.js\")\nvar common = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/sc-istanbul/node_modules/glob/common.js\")\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar inflight = __webpack_require__(/*! inflight */ \"(ssr)/./node_modules/inflight/inflight.js\")\nvar util = __webpack_require__(/*! util */ \"util\")\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nvar once = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\")\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === 'function') cb = options, options = {}\n  if (!options) options = {}\n\n  if (options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return globSync(pattern, options)\n  }\n\n  return new Glob(pattern, options, cb)\n}\n\nglob.sync = globSync\nvar GlobSync = glob.GlobSync = globSync.GlobSync\n\n// old api surface\nglob.glob = glob\n\nglob.hasMagic = function (pattern, options_) {\n  var options = util._extend({}, options_)\n  options.noprocess = true\n\n  var g = new Glob(pattern, options)\n  var set = g.minimatch.set\n  if (set.length > 1)\n    return true\n\n  for (var j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== 'string')\n      return true\n  }\n\n  return false\n}\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = null\n  }\n\n  if (options && options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return new GlobSync(pattern, options)\n  }\n\n  if (!(this instanceof Glob))\n    return new Glob(pattern, options, cb)\n\n  setopts(this, pattern, options)\n  this._didRealPath = false\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  if (typeof cb === 'function') {\n    cb = once(cb)\n    this.on('error', cb)\n    this.on('end', function (matches) {\n      cb(null, matches)\n    })\n  }\n\n  var self = this\n  var n = this.minimatch.set.length\n  this._processing = 0\n  this.matches = new Array(n)\n\n  this._emitQueue = []\n  this._processQueue = []\n  this.paused = false\n\n  if (this.noprocess)\n    return this\n\n  if (n === 0)\n    return done()\n\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false, done)\n  }\n\n  function done () {\n    --self._processing\n    if (self._processing <= 0)\n      self._finish()\n  }\n}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n  if (this.aborted)\n    return\n\n  if (this.realpath && !this._didRealpath)\n    return this._realpath()\n\n  common.finish(this)\n  this.emit('end', this.found)\n}\n\nGlob.prototype._realpath = function () {\n  if (this._didRealpath)\n    return\n\n  this._didRealpath = true\n\n  var n = this.matches.length\n  if (n === 0)\n    return this._finish()\n\n  var self = this\n  for (var i = 0; i < this.matches.length; i++)\n    this._realpathSet(i, next)\n\n  function next () {\n    if (--n === 0)\n      self._finish()\n  }\n}\n\nGlob.prototype._realpathSet = function (index, cb) {\n  var matchset = this.matches[index]\n  if (!matchset)\n    return cb()\n\n  var found = Object.keys(matchset)\n  var self = this\n  var n = found.length\n\n  if (n === 0)\n    return cb()\n\n  var set = this.matches[index] = Object.create(null)\n  found.forEach(function (p, i) {\n    // If there's a problem with the stat, then it means that\n    // one or more of the links in the realpath couldn't be\n    // resolved.  just return the abs value in that case.\n    p = self._makeAbs(p)\n    fs.realpath(p, self.realpathCache, function (er, real) {\n      if (!er)\n        set[real] = true\n      else if (er.syscall === 'stat')\n        set[p] = true\n      else\n        self.emit('error', er) // srsly wtf right here\n\n      if (--n === 0) {\n        self.matches[index] = set\n        cb()\n      }\n    })\n  })\n}\n\nGlob.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlob.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit('abort')\n}\n\nGlob.prototype.pause = function () {\n  if (!this.paused) {\n    this.paused = true\n    this.emit('pause')\n  }\n}\n\nGlob.prototype.resume = function () {\n  if (this.paused) {\n    this.emit('resume')\n    this.paused = false\n    if (this._emitQueue.length) {\n      var eq = this._emitQueue.slice(0)\n      this._emitQueue.length = 0\n      for (var i = 0; i < eq.length; i ++) {\n        var e = eq[i]\n        this._emitMatch(e[0], e[1])\n      }\n    }\n    if (this._processQueue.length) {\n      var pq = this._processQueue.slice(0)\n      this._processQueue.length = 0\n      for (var i = 0; i < pq.length; i ++) {\n        var p = pq[i]\n        this._processing--\n        this._process(p[0], p[1], p[2], p[3])\n      }\n    }\n  }\n}\n\nGlob.prototype._process = function (pattern, index, inGlobStar, cb) {\n  assert(this instanceof Glob)\n  assert(typeof cb === 'function')\n\n  if (this.aborted)\n    return\n\n  this._processing++\n  if (this.paused) {\n    this._processQueue.push([pattern, index, inGlobStar, cb])\n    return\n  }\n\n  //console.error('PROCESS %d', this._processing, pattern)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index, cb)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip _processing\n  if (childrenIgnored(this, read))\n    return cb()\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)\n}\n\nGlob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\nGlob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return cb()\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return cb()\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return cb()\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix) {\n      if (prefix !== '/')\n        e = prefix + '/' + e\n      else\n        e = prefix + e\n    }\n    this._process([e].concat(remain), index, inGlobStar, cb)\n  }\n  cb()\n}\n\nGlob.prototype._emitMatch = function (index, e) {\n  if (this.aborted)\n    return\n\n  if (this.matches[index][e])\n    return\n\n  if (isIgnored(this, e))\n    return\n\n  if (this.paused) {\n    this._emitQueue.push([index, e])\n    return\n  }\n\n  var abs = this._makeAbs(e)\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  if (this.mark)\n    e = this._mark(e)\n\n  this.matches[index][e] = true\n\n  var st = this.statCache[abs]\n  if (st)\n    this.emit('stat', e, st)\n\n  this.emit('match', e)\n}\n\nGlob.prototype._readdirInGlobStar = function (abs, cb) {\n  if (this.aborted)\n    return\n\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false, cb)\n\n  var lstatkey = 'lstat\\0' + abs\n  var self = this\n  var lstatcb = inflight(lstatkey, lstatcb_)\n\n  if (lstatcb)\n    fs.lstat(abs, lstatcb)\n\n  function lstatcb_ (er, lstat) {\n    if (er)\n      return cb()\n\n    var isSym = lstat.isSymbolicLink()\n    self.symlinks[abs] = isSym\n\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && !lstat.isDirectory()) {\n      self.cache[abs] = 'FILE'\n      cb()\n    } else\n      self._readdir(abs, false, cb)\n  }\n}\n\nGlob.prototype._readdir = function (abs, inGlobStar, cb) {\n  if (this.aborted)\n    return\n\n  cb = inflight('readdir\\0'+abs+'\\0'+inGlobStar, cb)\n  if (!cb)\n    return\n\n  //console.error('RD %j %j', +inGlobStar, abs)\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs, cb)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return cb()\n\n    if (Array.isArray(c))\n      return cb(null, c)\n  }\n\n  var self = this\n  fs.readdir(abs, readdirCb(this, abs, cb))\n}\n\nfunction readdirCb (self, abs, cb) {\n  return function (er, entries) {\n    if (er)\n      self._readdirError(abs, er, cb)\n    else\n      self._readdirEntries(abs, entries, cb)\n  }\n}\n\nGlob.prototype._readdirEntries = function (abs, entries, cb) {\n  if (this.aborted)\n    return\n\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n  return cb(null, entries)\n}\n\nGlob.prototype._readdirError = function (f, er, cb) {\n  if (this.aborted)\n    return\n\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      this.cache[this._makeAbs(f)] = 'FILE'\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n\n  return cb()\n}\n\nGlob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\n\nGlob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n  //console.error('pgs2', prefix, remain[0], entries)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return cb()\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false, cb)\n\n  var isSym = this.symlinks[abs]\n  var len = entries.length\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return cb()\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true, cb)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true, cb)\n  }\n\n  cb()\n}\n\nGlob.prototype._processSimple = function (prefix, index, cb) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var self = this\n  this._stat(prefix, function (er, exists) {\n    self._processSimple2(prefix, index, er, exists, cb)\n  })\n}\nGlob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {\n\n  //console.error('ps2', prefix, exists)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return cb()\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n  cb()\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlob.prototype._stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return cb()\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return cb(null, c)\n\n    if (needDir && c === 'FILE')\n      return cb()\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (stat !== undefined) {\n    if (stat === false)\n      return cb(null, stat)\n    else {\n      var type = stat.isDirectory() ? 'DIR' : 'FILE'\n      if (needDir && type === 'FILE')\n        return cb()\n      else\n        return cb(null, type, stat)\n    }\n  }\n\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb_)\n  if (statcb)\n    fs.lstat(abs, statcb)\n\n  function lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er) {\n    this.statCache[abs] = false\n    return cb()\n  }\n\n  var needDir = f.slice(-1) === '/'\n  this.statCache[abs] = stat\n\n  if (abs.slice(-1) === '/' && !stat.isDirectory())\n    return cb(null, false, stat)\n\n  var c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c !== 'DIR')\n    return cb()\n\n  return cb(null, c, stat)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/node_modules/glob/glob.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/node_modules/glob/sync.js":
/*!************************************************************!*\
  !*** ./node_modules/sc-istanbul/node_modules/glob/sync.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = globSync\nglobSync.GlobSync = GlobSync\n\nvar fs = __webpack_require__(/*! fs */ \"fs\")\nvar minimatch = __webpack_require__(/*! minimatch */ \"(ssr)/./node_modules/minimatch/minimatch.js\")\nvar Minimatch = minimatch.Minimatch\nvar Glob = (__webpack_require__(/*! ./glob.js */ \"(ssr)/./node_modules/sc-istanbul/node_modules/glob/glob.js\").Glob)\nvar util = __webpack_require__(/*! util */ \"util\")\nvar path = __webpack_require__(/*! path */ \"path\")\nvar assert = __webpack_require__(/*! assert */ \"assert\")\nvar isAbsolute = __webpack_require__(/*! path-is-absolute */ \"(ssr)/./node_modules/path-is-absolute/index.js\")\nvar common = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/sc-istanbul/node_modules/glob/common.js\")\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar childrenIgnored = common.childrenIgnored\n\nfunction globSync (pattern, options) {\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  return new GlobSync(pattern, options).found\n}\n\nfunction GlobSync (pattern, options) {\n  if (!pattern)\n    throw new Error('must provide pattern')\n\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  if (!(this instanceof GlobSync))\n    return new GlobSync(pattern, options)\n\n  setopts(this, pattern, options)\n\n  if (this.noprocess)\n    return this\n\n  var n = this.minimatch.set.length\n  this.matches = new Array(n)\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false)\n  }\n  this._finish()\n}\n\nGlobSync.prototype._finish = function () {\n  assert(this instanceof GlobSync)\n  if (this.realpath) {\n    var self = this\n    this.matches.forEach(function (matchset, index) {\n      var set = self.matches[index] = Object.create(null)\n      for (var p in matchset) {\n        try {\n          p = self._makeAbs(p)\n          var real = fs.realpathSync(p, self.realpathCache)\n          set[real] = true\n        } catch (er) {\n          if (er.syscall === 'stat')\n            set[self._makeAbs(p)] = true\n          else\n            throw er\n        }\n      }\n    })\n  }\n  common.finish(this)\n}\n\n\nGlobSync.prototype._process = function (pattern, index, inGlobStar) {\n  assert(this instanceof GlobSync)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // See if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip processing\n  if (childrenIgnored(this, read))\n    return\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)\n}\n\n\nGlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {\n  var entries = this._readdir(abs, inGlobStar)\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix.slice(-1) !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this.matches[index][e] = true\n    }\n    // This was the last one, and no stats were needed\n    return\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix)\n      newPattern = [prefix, e]\n    else\n      newPattern = [e]\n    this._process(newPattern.concat(remain), index, inGlobStar)\n  }\n}\n\n\nGlobSync.prototype._emitMatch = function (index, e) {\n  var abs = this._makeAbs(e)\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[this._makeAbs(e)]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n  if (this.stat)\n    this._stat(e)\n}\n\n\nGlobSync.prototype._readdirInGlobStar = function (abs) {\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false)\n\n  var entries\n  var lstat\n  var stat\n  try {\n    lstat = fs.lstatSync(abs)\n  } catch (er) {\n    // lstat failed, doesn't exist\n    return null\n  }\n\n  var isSym = lstat.isSymbolicLink()\n  this.symlinks[abs] = isSym\n\n  // If it's not a symlink or a dir, then it's definitely a regular file.\n  // don't bother doing a readdir in that case.\n  if (!isSym && !lstat.isDirectory())\n    this.cache[abs] = 'FILE'\n  else\n    entries = this._readdir(abs, false)\n\n  return entries\n}\n\nGlobSync.prototype._readdir = function (abs, inGlobStar) {\n  var entries\n\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return null\n\n    if (Array.isArray(c))\n      return c\n  }\n\n  try {\n    return this._readdirEntries(abs, fs.readdirSync(abs))\n  } catch (er) {\n    this._readdirError(abs, er)\n    return null\n  }\n}\n\nGlobSync.prototype._readdirEntries = function (abs, entries) {\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n\n  // mark and cache dir-ness\n  return entries\n}\n\nGlobSync.prototype._readdirError = function (f, er) {\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      this.cache[this._makeAbs(f)] = 'FILE'\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n}\n\nGlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {\n\n  var entries = this._readdir(abs, inGlobStar)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false)\n\n  var len = entries.length\n  var isSym = this.symlinks[abs]\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true)\n  }\n}\n\nGlobSync.prototype._processSimple = function (prefix, index) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var exists = this._stat(prefix)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this.matches[index][prefix] = true\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlobSync.prototype._stat = function (f) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return false\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return c\n\n    if (needDir && c === 'FILE')\n      return false\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (!stat) {\n    var lstat\n    try {\n      lstat = fs.lstatSync(abs)\n    } catch (er) {\n      return false\n    }\n\n    if (lstat.isSymbolicLink()) {\n      try {\n        stat = fs.statSync(abs)\n      } catch (er) {\n        stat = lstat\n      }\n    } else {\n      stat = lstat\n    }\n  }\n\n  this.statCache[abs] = stat\n\n  var c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c !== 'DIR')\n    return false\n\n  return c\n}\n\nGlobSync.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlobSync.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/node_modules/glob/sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/node_modules/has-flag/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sc-istanbul/node_modules/has-flag/index.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = function (flag, argv) {\n\targv = argv || process.argv;\n\n\tvar terminatorPos = argv.indexOf('--');\n\tvar prefix = /^--/.test(flag) ? '' : '--';\n\tvar pos = argv.indexOf(prefix + flag);\n\n\treturn pos !== -1 && (terminatorPos !== -1 ? pos < terminatorPos : true);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbm9kZV9tb2R1bGVzL2hhcy1mbGFnL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuaXN3YXBfY2xvbmUvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbm9kZV9tb2R1bGVzL2hhcy1mbGFnL2luZGV4LmpzPzE1YzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZmxhZywgYXJndikge1xuXHRhcmd2ID0gYXJndiB8fCBwcm9jZXNzLmFyZ3Y7XG5cblx0dmFyIHRlcm1pbmF0b3JQb3MgPSBhcmd2LmluZGV4T2YoJy0tJyk7XG5cdHZhciBwcmVmaXggPSAvXi0tLy50ZXN0KGZsYWcpID8gJycgOiAnLS0nO1xuXHR2YXIgcG9zID0gYXJndi5pbmRleE9mKHByZWZpeCArIGZsYWcpO1xuXG5cdHJldHVybiBwb3MgIT09IC0xICYmICh0ZXJtaW5hdG9yUG9zICE9PSAtMSA/IHBvcyA8IHRlcm1pbmF0b3JQb3MgOiB0cnVlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/node_modules/has-flag/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/sc-istanbul/node_modules/supports-color/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/sc-istanbul/node_modules/supports-color/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar hasFlag = __webpack_require__(/*! has-flag */ \"(ssr)/./node_modules/sc-istanbul/node_modules/has-flag/index.js\");\n\nvar support = function (level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel: level,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n};\n\nvar supportLevel = (function () {\n\tif (hasFlag('no-color') ||\n\t\thasFlag('no-colors') ||\n\t\thasFlag('color=false')) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (hasFlag('color') ||\n\t\thasFlag('colors') ||\n\t\thasFlag('color=true') ||\n\t\thasFlag('color=always')) {\n\t\treturn 1;\n\t}\n\n\tif (process.stdout && !process.stdout.isTTY) {\n\t\treturn 0;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn 1;\n\t}\n\n\tif ('CI' in process.env) {\n\t\tif ('TRAVIS' in process.env || process.env.CI === 'Travis') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tif ('TEAMCITY_VERSION' in process.env) {\n\t\treturn process.env.TEAMCITY_VERSION.match(/^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/) === null ? 0 : 1;\n\t}\n\n\tif (/^(screen|xterm)-256(?:color)?/.test(process.env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in process.env) {\n\t\treturn 1;\n\t}\n\n\tif (process.env.TERM === 'dumb') {\n\t\treturn 0;\n\t}\n\n\treturn 0;\n})();\n\nif (supportLevel === 0 && 'FORCE_COLOR' in process.env) {\n\tsupportLevel = 1;\n}\n\nmodule.exports = process && support(supportLevel);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2MtaXN0YW5idWwvbm9kZV9tb2R1bGVzL3N1cHBvcnRzLWNvbG9yL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsY0FBYyxtQkFBTyxDQUFDLGlGQUFVOztBQUVoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG9FQUFvRSxHQUFHO0FBQ3ZFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9zYy1pc3RhbmJ1bC9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanM/ZjI3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgaGFzRmxhZyA9IHJlcXVpcmUoJ2hhcy1mbGFnJyk7XG5cbnZhciBzdXBwb3J0ID0gZnVuY3Rpb24gKGxldmVsKSB7XG5cdGlmIChsZXZlbCA9PT0gMCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bGV2ZWw6IGxldmVsLFxuXHRcdGhhc0Jhc2ljOiB0cnVlLFxuXHRcdGhhczI1NjogbGV2ZWwgPj0gMixcblx0XHRoYXMxNm06IGxldmVsID49IDNcblx0fTtcbn07XG5cbnZhciBzdXBwb3J0TGV2ZWwgPSAoZnVuY3Rpb24gKCkge1xuXHRpZiAoaGFzRmxhZygnbm8tY29sb3InKSB8fFxuXHRcdGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9ZmFsc2UnKSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ2NvbG9yPTE2bScpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9ZnVsbCcpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9dHJ1ZWNvbG9yJykpIHtcblx0XHRyZXR1cm4gMztcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcj0yNTYnKSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ2NvbG9yJykgfHxcblx0XHRoYXNGbGFnKCdjb2xvcnMnKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPXRydWUnKSB8fFxuXHRcdGhhc0ZsYWcoJ2NvbG9yPWFsd2F5cycpKSB7XG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAocHJvY2Vzcy5zdGRvdXQgJiYgIXByb2Nlc3Muc3Rkb3V0LmlzVFRZKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKCdDSScgaW4gcHJvY2Vzcy5lbnYpIHtcblx0XHRpZiAoJ1RSQVZJUycgaW4gcHJvY2Vzcy5lbnYgfHwgcHJvY2Vzcy5lbnYuQ0kgPT09ICdUcmF2aXMnKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGlmICgnVEVBTUNJVFlfVkVSU0lPTicgaW4gcHJvY2Vzcy5lbnYpIHtcblx0XHRyZXR1cm4gcHJvY2Vzcy5lbnYuVEVBTUNJVFlfVkVSU0lPTi5tYXRjaCgvXig5XFwuKDAqWzEtOV1cXGQqKVxcLnxcXGR7Mix9XFwuKS8pID09PSBudWxsID8gMCA6IDE7XG5cdH1cblxuXHRpZiAoL14oc2NyZWVufHh0ZXJtKS0yNTYoPzpjb2xvcik/Ly50ZXN0KHByb2Nlc3MuZW52LlRFUk0pKSB7XG5cdFx0cmV0dXJuIDI7XG5cdH1cblxuXHRpZiAoL15zY3JlZW58Xnh0ZXJtfF52dDEwMHxjb2xvcnxhbnNpfGN5Z3dpbnxsaW51eC9pLnRlc3QocHJvY2Vzcy5lbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmICgnQ09MT1JURVJNJyBpbiBwcm9jZXNzLmVudikge1xuXHRcdHJldHVybiAxO1xuXHR9XG5cblx0aWYgKHByb2Nlc3MuZW52LlRFUk0gPT09ICdkdW1iJykge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0cmV0dXJuIDA7XG59KSgpO1xuXG5pZiAoc3VwcG9ydExldmVsID09PSAwICYmICdGT1JDRV9DT0xPUicgaW4gcHJvY2Vzcy5lbnYpIHtcblx0c3VwcG9ydExldmVsID0gMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzICYmIHN1cHBvcnQoc3VwcG9ydExldmVsKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/sc-istanbul/node_modules/supports-color/index.js\n");

/***/ })

};
;