/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-gas-reporter";
exports.ids = ["vendor-chunks/eth-gas-reporter"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-gas-reporter/lib/config.js":
/*!*****************************************************!*\
  !*** ./node_modules/eth-gas-reporter/lib/config.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Configuration defaults\n */\n\nclass Config {\n  constructor(options = {}) {\n    this.token = options.token || \"ETH\";\n    this.blockLimit = options.blockLimit || 6718946;\n    this.defaultGasPrice = 5;\n\n    this.currency = options.currency || \"eur\";\n    this.gasPriceApi =\n      options.gasPriceApi ||\n      \"https://api.etherscan.io/api?module=proxy&action=eth_gasPrice\";\n    this.coinmarketcap = options.coinmarketcap || null;\n    this.ethPrice = options.ethPrice || null;\n    this.gasPrice = options.gasPrice || null;\n    this.outputFile = options.outputFile || null;\n    this.forceConsoleOutput = options.forceConsoleOutput || false;\n    this.rst = options.rst || false;\n    this.rstTitle = options.rstTitle || \"\";\n    this.showTimeSpent = options.showTimeSpent || false;\n    this.srcPath = options.src || \"contracts\";\n    this.artifactType = options.artifactType || \"truffle-v5\";\n    this.getContracts = options.getContracts || null;\n    this.noColors = options.noColors;\n    this.proxyResolver = options.proxyResolver || null;\n    this.metadata = options.metadata || null;\n    this.showMethodSig = options.showMethodSig || false;\n    this.provider = options.provider || null;\n    this.maxMethodDiff = options.maxMethodDiff;\n    this.maxDeploymentDiff = options.maxDeploymentDiff;\n\n    this.excludeContracts = Array.isArray(options.excludeContracts)\n      ? options.excludeContracts\n      : [];\n\n    this.onlyCalledMethods = options.onlyCalledMethods === false ? false : true;\n\n    this.url = options.url\n      ? this._normalizeUrl(options.url)\n      : this.resolveClientUrl();\n  }\n\n  /**\n   * Tries to obtain the client url reporter's sync-requests will target.\n   * @return {String}         url e.g http://localhost:8545\n   */\n  resolveClientUrl() {\n    // Case: web3 globally available in mocha test context\n    try {\n      if (web3 && web3.currentProvider) {\n        const cp = web3.currentProvider;\n\n        // Truffle/Web3 http\n        if (cp.host) return cp.host;\n\n        // Truffle/Web3 websockets\n        if (cp.connection) return this._normalizeUrl(cp.connection.url);\n      }\n    } catch (err) {\n      // Web3 undefined\n    }\n\n    // Case: Failure\n    const message =\n      `ERROR: eth-gas-reporter was unable to resolve a client url ` +\n      `from the provider available in your test context. Try setting the ` +\n      `url as a mocha reporter option (ex: url='http://localhost:8545')`;\n\n    console.log(message);\n    process.exit(1);\n  }\n\n  /**\n   * Forces websockets to http\n   * @param  {String} url e.g web3.provider.connection.url\n   * @return {String}     http:// prefixed url\n   */\n  _normalizeUrl(url) {\n    return url.replace(\"ws://\", \"http://\");\n  }\n}\n\nmodule.exports = Config;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWdhcy1yZXBvcnRlci9saWIvY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLGdCQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdW5pc3dhcF9jbG9uZS8uL25vZGVfbW9kdWxlcy9ldGgtZ2FzLXJlcG9ydGVyL2xpYi9jb25maWcuanM/MDUxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbmZpZ3VyYXRpb24gZGVmYXVsdHNcbiAqL1xuXG5jbGFzcyBDb25maWcge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnRva2VuID0gb3B0aW9ucy50b2tlbiB8fCBcIkVUSFwiO1xuICAgIHRoaXMuYmxvY2tMaW1pdCA9IG9wdGlvbnMuYmxvY2tMaW1pdCB8fCA2NzE4OTQ2O1xuICAgIHRoaXMuZGVmYXVsdEdhc1ByaWNlID0gNTtcblxuICAgIHRoaXMuY3VycmVuY3kgPSBvcHRpb25zLmN1cnJlbmN5IHx8IFwiZXVyXCI7XG4gICAgdGhpcy5nYXNQcmljZUFwaSA9XG4gICAgICBvcHRpb25zLmdhc1ByaWNlQXBpIHx8XG4gICAgICBcImh0dHBzOi8vYXBpLmV0aGVyc2Nhbi5pby9hcGk/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2FzUHJpY2VcIjtcbiAgICB0aGlzLmNvaW5tYXJrZXRjYXAgPSBvcHRpb25zLmNvaW5tYXJrZXRjYXAgfHwgbnVsbDtcbiAgICB0aGlzLmV0aFByaWNlID0gb3B0aW9ucy5ldGhQcmljZSB8fCBudWxsO1xuICAgIHRoaXMuZ2FzUHJpY2UgPSBvcHRpb25zLmdhc1ByaWNlIHx8IG51bGw7XG4gICAgdGhpcy5vdXRwdXRGaWxlID0gb3B0aW9ucy5vdXRwdXRGaWxlIHx8IG51bGw7XG4gICAgdGhpcy5mb3JjZUNvbnNvbGVPdXRwdXQgPSBvcHRpb25zLmZvcmNlQ29uc29sZU91dHB1dCB8fCBmYWxzZTtcbiAgICB0aGlzLnJzdCA9IG9wdGlvbnMucnN0IHx8IGZhbHNlO1xuICAgIHRoaXMucnN0VGl0bGUgPSBvcHRpb25zLnJzdFRpdGxlIHx8IFwiXCI7XG4gICAgdGhpcy5zaG93VGltZVNwZW50ID0gb3B0aW9ucy5zaG93VGltZVNwZW50IHx8IGZhbHNlO1xuICAgIHRoaXMuc3JjUGF0aCA9IG9wdGlvbnMuc3JjIHx8IFwiY29udHJhY3RzXCI7XG4gICAgdGhpcy5hcnRpZmFjdFR5cGUgPSBvcHRpb25zLmFydGlmYWN0VHlwZSB8fCBcInRydWZmbGUtdjVcIjtcbiAgICB0aGlzLmdldENvbnRyYWN0cyA9IG9wdGlvbnMuZ2V0Q29udHJhY3RzIHx8IG51bGw7XG4gICAgdGhpcy5ub0NvbG9ycyA9IG9wdGlvbnMubm9Db2xvcnM7XG4gICAgdGhpcy5wcm94eVJlc29sdmVyID0gb3B0aW9ucy5wcm94eVJlc29sdmVyIHx8IG51bGw7XG4gICAgdGhpcy5tZXRhZGF0YSA9IG9wdGlvbnMubWV0YWRhdGEgfHwgbnVsbDtcbiAgICB0aGlzLnNob3dNZXRob2RTaWcgPSBvcHRpb25zLnNob3dNZXRob2RTaWcgfHwgZmFsc2U7XG4gICAgdGhpcy5wcm92aWRlciA9IG9wdGlvbnMucHJvdmlkZXIgfHwgbnVsbDtcbiAgICB0aGlzLm1heE1ldGhvZERpZmYgPSBvcHRpb25zLm1heE1ldGhvZERpZmY7XG4gICAgdGhpcy5tYXhEZXBsb3ltZW50RGlmZiA9IG9wdGlvbnMubWF4RGVwbG95bWVudERpZmY7XG5cbiAgICB0aGlzLmV4Y2x1ZGVDb250cmFjdHMgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMuZXhjbHVkZUNvbnRyYWN0cylcbiAgICAgID8gb3B0aW9ucy5leGNsdWRlQ29udHJhY3RzXG4gICAgICA6IFtdO1xuXG4gICAgdGhpcy5vbmx5Q2FsbGVkTWV0aG9kcyA9IG9wdGlvbnMub25seUNhbGxlZE1ldGhvZHMgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybFxuICAgICAgPyB0aGlzLl9ub3JtYWxpemVVcmwob3B0aW9ucy51cmwpXG4gICAgICA6IHRoaXMucmVzb2x2ZUNsaWVudFVybCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyaWVzIHRvIG9idGFpbiB0aGUgY2xpZW50IHVybCByZXBvcnRlcidzIHN5bmMtcmVxdWVzdHMgd2lsbCB0YXJnZXQuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gICAgICAgICB1cmwgZS5nIGh0dHA6Ly9sb2NhbGhvc3Q6ODU0NVxuICAgKi9cbiAgcmVzb2x2ZUNsaWVudFVybCgpIHtcbiAgICAvLyBDYXNlOiB3ZWIzIGdsb2JhbGx5IGF2YWlsYWJsZSBpbiBtb2NoYSB0ZXN0IGNvbnRleHRcbiAgICB0cnkge1xuICAgICAgaWYgKHdlYjMgJiYgd2ViMy5jdXJyZW50UHJvdmlkZXIpIHtcbiAgICAgICAgY29uc3QgY3AgPSB3ZWIzLmN1cnJlbnRQcm92aWRlcjtcblxuICAgICAgICAvLyBUcnVmZmxlL1dlYjMgaHR0cFxuICAgICAgICBpZiAoY3AuaG9zdCkgcmV0dXJuIGNwLmhvc3Q7XG5cbiAgICAgICAgLy8gVHJ1ZmZsZS9XZWIzIHdlYnNvY2tldHNcbiAgICAgICAgaWYgKGNwLmNvbm5lY3Rpb24pIHJldHVybiB0aGlzLl9ub3JtYWxpemVVcmwoY3AuY29ubmVjdGlvbi51cmwpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gV2ViMyB1bmRlZmluZWRcbiAgICB9XG5cbiAgICAvLyBDYXNlOiBGYWlsdXJlXG4gICAgY29uc3QgbWVzc2FnZSA9XG4gICAgICBgRVJST1I6IGV0aC1nYXMtcmVwb3J0ZXIgd2FzIHVuYWJsZSB0byByZXNvbHZlIGEgY2xpZW50IHVybCBgICtcbiAgICAgIGBmcm9tIHRoZSBwcm92aWRlciBhdmFpbGFibGUgaW4geW91ciB0ZXN0IGNvbnRleHQuIFRyeSBzZXR0aW5nIHRoZSBgICtcbiAgICAgIGB1cmwgYXMgYSBtb2NoYSByZXBvcnRlciBvcHRpb24gKGV4OiB1cmw9J2h0dHA6Ly9sb2NhbGhvc3Q6ODU0NScpYDtcblxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjZXMgd2Vic29ja2V0cyB0byBodHRwXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdXJsIGUuZyB3ZWIzLnByb3ZpZGVyLmNvbm5lY3Rpb24udXJsXG4gICAqIEByZXR1cm4ge1N0cmluZ30gICAgIGh0dHA6Ly8gcHJlZml4ZWQgdXJsXG4gICAqL1xuICBfbm9ybWFsaXplVXJsKHVybCkge1xuICAgIHJldHVybiB1cmwucmVwbGFjZShcIndzOi8vXCIsIFwiaHR0cDovL1wiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbmZpZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-gas-reporter/lib/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-gas-reporter/lib/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/eth-gas-reporter/lib/utils.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst parser = __webpack_require__(/*! @solidity-parser/parser */ \"(ssr)/./node_modules/eth-gas-reporter/node_modules/@solidity-parser/parser/dist/index.cjs.js\");\nconst axios = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst read = __webpack_require__(/*! fs-readdir-recursive */ \"(ssr)/./node_modules/fs-readdir-recursive/index.js\");\nconst colors = __webpack_require__(/*! colors/safe */ \"(ssr)/./node_modules/colors/safe.js\");\nconst log = console.log;\n\nconst utils = {\n  /**\n   * Expresses gas usage as a nation-state currency price\n   * @param  {Number} gas      gas used\n   * @param  {Number} ethPrice e.g chf/eth\n   * @param  {Number} gasPrice in wei e.g 5000000000 (5 gwei)\n   * @return {Number}          cost of gas used (0.00)\n   */\n  gasToCost: function(gas, ethPrice, gasPrice) {\n    ethPrice = parseFloat(ethPrice);\n    gasPrice = parseInt(gasPrice);\n    return ((gasPrice / 1e9) * gas * ethPrice).toFixed(2);\n  },\n\n  /**\n   * Expresses gas usage as a % of the block gasLimit. Source: NeuFund (see issues)\n   * @param  {Number} gasUsed    gas value\n   * @param  {Number} blockLimit gas limit of a block\n   * @return {Number}            percent (0.0)\n   */\n  gasToPercentOfLimit: function(gasUsed, blockLimit) {\n    return Math.round((1000 * gasUsed) / blockLimit) / 10;\n  },\n\n  /**\n   * Generates id for a GasData.methods entry from the input of a web3.eth.getTransaction\n   * and a contract name\n   * @param  {String} code hex data\n   * @return {String}      id\n   */\n  getMethodID: function(contractName, code) {\n    return contractName + \"_\" + code.slice(2, 10);\n  },\n\n  /**\n   * Extracts solc settings and version info from solidity metadata\n   * @param  {Object} metadata solidity metadata\n   * @return {Object}          {version, optimizer, runs}\n   */\n  getSolcInfo: function(metadata) {\n    const missing = \"----\";\n    const info = {\n      version: missing,\n      optimizer: missing,\n      runs: missing\n    };\n    if (metadata) {\n      info.version = metadata.compiler.version;\n      info.optimizer = metadata.settings.optimizer.enabled;\n      info.runs = metadata.settings.optimizer.runs;\n    }\n    return info;\n  },\n\n  /**\n   * Return true if transaction input and bytecode are same, ignoring library link code.\n   * @param  {String} code\n   * @return {Bool}\n   */\n  matchBinaries: function(input, bytecode) {\n    const regExp = utils.bytecodeToBytecodeRegex(bytecode);\n    return input.match(regExp) !== null;\n  },\n\n  /**\n   * Generate a regular expression string which is library link agnostic so we can match\n   * linked bytecode deployment transaction inputs to the evm.bytecode solc output.\n   * @param  {String} bytecode\n   * @return {String}\n   */\n  bytecodeToBytecodeRegex: function(bytecode = \"\") {\n    const bytecodeRegex = bytecode\n      .replace(/__.{38}/g, \".{40}\")\n      .replace(/73f{40}/g, \".{42}\");\n\n    // HACK: Node regexes can't be longer that 32767 characters.\n    // Contracts bytecode can. We just truncate the regexes. It's safe in practice.\n    const MAX_REGEX_LENGTH = 32767;\n    const truncatedBytecodeRegex = bytecodeRegex.slice(0, MAX_REGEX_LENGTH);\n    return truncatedBytecodeRegex;\n  },\n\n  /**\n   * Parses files for contract names\n   * @param  {String} filePath path to file\n   * @return {String[]}        contract names\n   */\n  getContractNames: function(filePath) {\n    const names = [];\n    const code = fs.readFileSync(filePath, \"utf-8\");\n\n    let ast;\n    try {\n      ast = parser.parse(code, { tolerant: true });\n    } catch (err) {\n      utils.warnParser(filePath, err);\n      return names;\n    }\n\n    parser.visit(ast, {\n      ContractDefinition: function(node) {\n        names.push(node.name);\n      }\n    });\n\n    return names;\n  },\n\n  /**\n   * Message for un-parseable files\n   * @param  {String} filePath\n   * @param  {Error} err\n   * @return {void}\n   */\n  warnParser: function(filePath, err) {\n    log();\n    log(colors.red(`>>>>> WARNING <<<<<<`));\n    log(\n      `Failed to parse file: \"${filePath}\". No data will collected for its contract(s).`\n    );\n    log(\n      `NB: some Solidity 0.6.x syntax is not supported by the JS parser yet.`\n    );\n    log(\n      `Please report the error below to github.com/consensys/solidity-parser-antlr`\n    );\n    log(colors.red(`>>>>>>>>>>>>>>>>>>>>`));\n    log(colors.red(`${err}`));\n    log();\n  },\n\n  /**\n   * Message for un-parseable ABI (ethers)\n   * @param  {String} name contract name\n   * @param  {Error} err\n   * @return {void}\n   */\n  warnEthers: function(name, err) {\n    log();\n    log(colors.red(`>>>>> WARNING <<<<<<`));\n    log(\n      `Failed to parse ABI for contract: \"${name}\". (Its method data will not be collected).`\n    );\n    log(\n      `NB: Some Solidity 0.6.x syntax is not supported by Ethers.js V5 AbiCoder yet.`\n    );\n    log(`Please report the error below to github.com/ethers-io/ethers.js`);\n    log(colors.red(`>>>>>>>>>>>>>>>>>>>>`));\n    log(colors.red(`${err}`));\n    log();\n  },\n\n  /**\n   * Converts hex gas to decimal\n   * @param  {Number} val hex gas returned by RPC\n   * @return {Number}     decimal gas consumed by human eyes.\n   */\n  gas: function(val) {\n    return parseInt(val, 16);\n  },\n\n  /**\n   * Fetches gasPrices from ethgasstation (defaults to the lowest safe gas price)\n   * and current market value of eth in currency specified by the config from\n   * coinmarketcap (defaults to euros). Sets config.ethPrice, config.gasPrice unless these\n   * are already set as constants in the reporter options\n   * @param  {Object} config\n   */\n  setGasAndPriceRates: async function(config) {\n    if ((config.ethPrice && config.gasPrice) || !config.coinmarketcap) return;\n\n    const token = config.token.toUpperCase();\n    const gasPriceApi = config.gasPriceApi;\n\n    const axiosInstance = axios.create({\n      baseURL: `https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/`\n    });\n\n    const requestArgs = `latest?symbol=${token}&CMC_PRO_API_KEY=${\n      config.coinmarketcap\n    }&convert=`;\n\n    const currencyKey = config.currency.toUpperCase();\n    const currencyPath = `${requestArgs}${currencyKey}`;\n\n    // Currency market data: coinmarketcap\n    if (!config.ethPrice) {\n      try {\n        let response = await axiosInstance.get(currencyPath);\n        config.ethPrice = response.data.data[token].quote[\n          currencyKey\n        ].price.toFixed(2);\n      } catch (error) {\n        config.ethPrice = null;\n      }\n    }\n\n    // Gas price data: etherscan (or `gasPriceAPI`)\n    if (!config.gasPrice) {\n      try {\n        let response = await axiosInstance.get(gasPriceApi);\n        config.gasPrice = Math.round(\n          parseInt(response.data.result, 16) / Math.pow(10, 9)\n        );\n      } catch (error) {\n        config.gasPrice = config.defaultGasPrice;\n      }\n    }\n  },\n\n  listSolidityFiles(srcPath) {\n    let base = `./${srcPath}/`;\n\n    if (process.platform === \"win32\") {\n      base = base.replace(/\\\\/g, \"/\");\n    }\n\n    const paths = read(base)\n      .filter(file => path.extname(file) === \".sol\")\n      .map(file => base + file);\n\n    return paths;\n  },\n\n  /**\n   * Loads and parses Solidity files, returning a filtered array of contract names.\n   * @return {string[]}\n   */\n  parseSoliditySources(config) {\n    const names = [];\n    const files = utils.listSolidityFiles(config.srcPath);\n    files.forEach(file => {\n      const namesForFile = utils.getContractNames(file);\n      const filtered = namesForFile.filter(\n        name => !config.excludeContracts.includes(name)\n      );\n      filtered.forEach(item => names.push(item));\n    });\n    return names;\n  },\n\n  // Debugging helper\n  pretty: function(msg, obj) {\n    console.log(`<------ ${msg} ------>\\n` + JSON.stringify(obj, null, \" \"));\n    console.log(`<------- END -------->\\n`);\n  }\n};\n\nmodule.exports = utils;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-gas-reporter/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-gas-reporter/node_modules/@solidity-parser/parser/dist/index.cjs.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/eth-gas-reporter/node_modules/@solidity-parser/parser/dist/index.cjs.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;\nvar __objSpread = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", {value: true});\nvar __commonJS = (cb, mod) => () => (mod || cb((mod = {exports: {}}).exports, mod), mod.exports);\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, {get: all[name], enumerable: true});\n};\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && key !== \"default\")\n        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});\n  }\n  return target;\n};\nvar __toModule = (module2) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);\n};\n\n// node_modules/antlr4ts/ANTLRErrorListener.js\nvar require_ANTLRErrorListener = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/ANTLRErrorStrategy.js\nvar require_ANTLRErrorStrategy = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/Decorators.js\nvar require_Decorators = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.SuppressWarnings = exports.Override = exports.Nullable = exports.NotNull = void 0;\n  function NotNull(target, propertyKey, propertyDescriptor) {\n  }\n  exports.NotNull = NotNull;\n  function Nullable(target, propertyKey, propertyDescriptor) {\n  }\n  exports.Nullable = Nullable;\n  function Override(target, propertyKey, propertyDescriptor) {\n  }\n  exports.Override = Override;\n  function SuppressWarnings(options) {\n    return (target, propertyKey, descriptor) => {\n    };\n  }\n  exports.SuppressWarnings = SuppressWarnings;\n});\n\n// node_modules/antlr4ts/IntStream.js\nvar require_IntStream = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.IntStream = void 0;\n  var IntStream;\n  (function(IntStream2) {\n    IntStream2.EOF = -1;\n    IntStream2.UNKNOWN_SOURCE_NAME = \"<unknown>\";\n  })(IntStream = exports.IntStream || (exports.IntStream = {}));\n});\n\n// node_modules/antlr4ts/ANTLRInputStream.js\nvar require_ANTLRInputStream = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ANTLRInputStream = void 0;\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var Decorators_1 = require_Decorators();\n  var IntStream_1 = require_IntStream();\n  var ANTLRInputStream2 = class {\n    constructor(input) {\n      this.p = 0;\n      this.data = input;\n      this.n = input.length;\n    }\n    reset() {\n      this.p = 0;\n    }\n    consume() {\n      if (this.p >= this.n) {\n        assert(this.LA(1) === IntStream_1.IntStream.EOF);\n        throw new Error(\"cannot consume EOF\");\n      }\n      if (this.p < this.n) {\n        this.p++;\n      }\n    }\n    LA(i) {\n      if (i === 0) {\n        return 0;\n      }\n      if (i < 0) {\n        i++;\n        if (this.p + i - 1 < 0) {\n          return IntStream_1.IntStream.EOF;\n        }\n      }\n      if (this.p + i - 1 >= this.n) {\n        return IntStream_1.IntStream.EOF;\n      }\n      return this.data.charCodeAt(this.p + i - 1);\n    }\n    LT(i) {\n      return this.LA(i);\n    }\n    get index() {\n      return this.p;\n    }\n    get size() {\n      return this.n;\n    }\n    mark() {\n      return -1;\n    }\n    release(marker) {\n    }\n    seek(index) {\n      if (index <= this.p) {\n        this.p = index;\n        return;\n      }\n      index = Math.min(index, this.n);\n      while (this.p < index) {\n        this.consume();\n      }\n    }\n    getText(interval) {\n      let start = interval.a;\n      let stop = interval.b;\n      if (stop >= this.n) {\n        stop = this.n - 1;\n      }\n      let count = stop - start + 1;\n      if (start >= this.n) {\n        return \"\";\n      }\n      return this.data.substr(start, count);\n    }\n    get sourceName() {\n      if (!this.name) {\n        return IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;\n      }\n      return this.name;\n    }\n    toString() {\n      return this.data;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"consume\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"LA\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"index\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"mark\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"release\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"seek\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"getText\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"sourceName\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ANTLRInputStream2.prototype, \"toString\", null);\n  exports.ANTLRInputStream = ANTLRInputStream2;\n});\n\n// node_modules/antlr4ts/atn/ATNState.js\nvar require_ATNState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATNState = void 0;\n  var Decorators_1 = require_Decorators();\n  var ATNState = class {\n    constructor() {\n      this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n      this.ruleIndex = 0;\n      this.epsilonOnlyTransitions = false;\n      this.transitions = [];\n      this.optimizedTransitions = this.transitions;\n    }\n    getStateNumber() {\n      return this.stateNumber;\n    }\n    get nonStopStateNumber() {\n      return this.getStateNumber();\n    }\n    hashCode() {\n      return this.stateNumber;\n    }\n    equals(o) {\n      if (o instanceof ATNState) {\n        return this.stateNumber === o.stateNumber;\n      }\n      return false;\n    }\n    get isNonGreedyExitState() {\n      return false;\n    }\n    toString() {\n      return String(this.stateNumber);\n    }\n    getTransitions() {\n      return this.transitions.slice(0);\n    }\n    get numberOfTransitions() {\n      return this.transitions.length;\n    }\n    addTransition(e, index) {\n      if (this.transitions.length === 0) {\n        this.epsilonOnlyTransitions = e.isEpsilon;\n      } else if (this.epsilonOnlyTransitions !== e.isEpsilon) {\n        this.epsilonOnlyTransitions = false;\n        throw new Error(\"ATN state \" + this.stateNumber + \" has both epsilon and non-epsilon transitions.\");\n      }\n      this.transitions.splice(index !== void 0 ? index : this.transitions.length, 0, e);\n    }\n    transition(i) {\n      return this.transitions[i];\n    }\n    setTransition(i, e) {\n      this.transitions[i] = e;\n    }\n    removeTransition(index) {\n      return this.transitions.splice(index, 1)[0];\n    }\n    get onlyHasEpsilonTransitions() {\n      return this.epsilonOnlyTransitions;\n    }\n    setRuleIndex(ruleIndex) {\n      this.ruleIndex = ruleIndex;\n    }\n    get isOptimized() {\n      return this.optimizedTransitions !== this.transitions;\n    }\n    get numberOfOptimizedTransitions() {\n      return this.optimizedTransitions.length;\n    }\n    getOptimizedTransition(i) {\n      return this.optimizedTransitions[i];\n    }\n    addOptimizedTransition(e) {\n      if (!this.isOptimized) {\n        this.optimizedTransitions = new Array();\n      }\n      this.optimizedTransitions.push(e);\n    }\n    setOptimizedTransition(i, e) {\n      if (!this.isOptimized) {\n        throw new Error(\"This ATNState is not optimized.\");\n      }\n      this.optimizedTransitions[i] = e;\n    }\n    removeOptimizedTransition(i) {\n      if (!this.isOptimized) {\n        throw new Error(\"This ATNState is not optimized.\");\n      }\n      this.optimizedTransitions.splice(i, 1);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ATNState.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNState.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNState.prototype, \"toString\", null);\n  exports.ATNState = ATNState;\n  (function(ATNState2) {\n    ATNState2.INVALID_STATE_NUMBER = -1;\n  })(ATNState = exports.ATNState || (exports.ATNState = {}));\n});\n\n// node_modules/antlr4ts/atn/ATNStateType.js\nvar require_ATNStateType = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATNStateType = void 0;\n  var ATNStateType;\n  (function(ATNStateType2) {\n    ATNStateType2[ATNStateType2[\"INVALID_TYPE\"] = 0] = \"INVALID_TYPE\";\n    ATNStateType2[ATNStateType2[\"BASIC\"] = 1] = \"BASIC\";\n    ATNStateType2[ATNStateType2[\"RULE_START\"] = 2] = \"RULE_START\";\n    ATNStateType2[ATNStateType2[\"BLOCK_START\"] = 3] = \"BLOCK_START\";\n    ATNStateType2[ATNStateType2[\"PLUS_BLOCK_START\"] = 4] = \"PLUS_BLOCK_START\";\n    ATNStateType2[ATNStateType2[\"STAR_BLOCK_START\"] = 5] = \"STAR_BLOCK_START\";\n    ATNStateType2[ATNStateType2[\"TOKEN_START\"] = 6] = \"TOKEN_START\";\n    ATNStateType2[ATNStateType2[\"RULE_STOP\"] = 7] = \"RULE_STOP\";\n    ATNStateType2[ATNStateType2[\"BLOCK_END\"] = 8] = \"BLOCK_END\";\n    ATNStateType2[ATNStateType2[\"STAR_LOOP_BACK\"] = 9] = \"STAR_LOOP_BACK\";\n    ATNStateType2[ATNStateType2[\"STAR_LOOP_ENTRY\"] = 10] = \"STAR_LOOP_ENTRY\";\n    ATNStateType2[ATNStateType2[\"PLUS_LOOP_BACK\"] = 11] = \"PLUS_LOOP_BACK\";\n    ATNStateType2[ATNStateType2[\"LOOP_END\"] = 12] = \"LOOP_END\";\n  })(ATNStateType = exports.ATNStateType || (exports.ATNStateType = {}));\n});\n\n// node_modules/antlr4ts/RecognitionException.js\nvar require_RecognitionException = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RecognitionException = void 0;\n  var RecognitionException2 = class extends Error {\n    constructor(recognizer, input, ctx, message) {\n      super(message);\n      this._offendingState = -1;\n      this._recognizer = recognizer;\n      this.input = input;\n      this.ctx = ctx;\n      if (recognizer) {\n        this._offendingState = recognizer.state;\n      }\n    }\n    get offendingState() {\n      return this._offendingState;\n    }\n    setOffendingState(offendingState) {\n      this._offendingState = offendingState;\n    }\n    get expectedTokens() {\n      if (this._recognizer) {\n        return this._recognizer.atn.getExpectedTokens(this._offendingState, this.ctx);\n      }\n      return void 0;\n    }\n    get context() {\n      return this.ctx;\n    }\n    get inputStream() {\n      return this.input;\n    }\n    getOffendingToken(recognizer) {\n      if (recognizer && recognizer !== this._recognizer) {\n        return void 0;\n      }\n      return this.offendingToken;\n    }\n    setOffendingToken(recognizer, offendingToken) {\n      if (recognizer === this._recognizer) {\n        this.offendingToken = offendingToken;\n      }\n    }\n    get recognizer() {\n      return this._recognizer;\n    }\n  };\n  exports.RecognitionException = RecognitionException2;\n});\n\n// node_modules/antlr4ts/atn/Transition.js\nvar require_Transition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Transition = void 0;\n  var Decorators_1 = require_Decorators();\n  var Transition = class Transition {\n    constructor(target) {\n      if (target == null) {\n        throw new Error(\"target cannot be null.\");\n      }\n      this.target = target;\n    }\n    get isEpsilon() {\n      return false;\n    }\n    get label() {\n      return void 0;\n    }\n  };\n  Transition.serializationNames = [\n    \"INVALID\",\n    \"EPSILON\",\n    \"RANGE\",\n    \"RULE\",\n    \"PREDICATE\",\n    \"ATOM\",\n    \"ACTION\",\n    \"SET\",\n    \"NOT_SET\",\n    \"WILDCARD\",\n    \"PRECEDENCE\"\n  ];\n  __decorate([\n    Decorators_1.NotNull\n  ], Transition.prototype, \"target\", void 0);\n  Transition = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], Transition);\n  exports.Transition = Transition;\n});\n\n// node_modules/antlr4ts/atn/AbstractPredicateTransition.js\nvar require_AbstractPredicateTransition = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.AbstractPredicateTransition = void 0;\n  var Transition_1 = require_Transition();\n  var AbstractPredicateTransition = class extends Transition_1.Transition {\n    constructor(target) {\n      super(target);\n    }\n  };\n  exports.AbstractPredicateTransition = AbstractPredicateTransition;\n});\n\n// node_modules/antlr4ts/misc/MurmurHash.js\nvar require_MurmurHash = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.MurmurHash = void 0;\n  var MurmurHash;\n  (function(MurmurHash2) {\n    const DEFAULT_SEED = 0;\n    function initialize(seed = DEFAULT_SEED) {\n      return seed;\n    }\n    MurmurHash2.initialize = initialize;\n    function update(hash, value) {\n      const c1 = 3432918353;\n      const c2 = 461845907;\n      const r1 = 15;\n      const r2 = 13;\n      const m = 5;\n      const n = 3864292196;\n      if (value == null) {\n        value = 0;\n      } else if (typeof value === \"string\") {\n        value = hashString(value);\n      } else if (typeof value === \"object\") {\n        value = value.hashCode();\n      }\n      let k = value;\n      k = Math.imul(k, c1);\n      k = k << r1 | k >>> 32 - r1;\n      k = Math.imul(k, c2);\n      hash = hash ^ k;\n      hash = hash << r2 | hash >>> 32 - r2;\n      hash = Math.imul(hash, m) + n;\n      return hash & 4294967295;\n    }\n    MurmurHash2.update = update;\n    function finish(hash, numberOfWords) {\n      hash = hash ^ numberOfWords * 4;\n      hash = hash ^ hash >>> 16;\n      hash = Math.imul(hash, 2246822507);\n      hash = hash ^ hash >>> 13;\n      hash = Math.imul(hash, 3266489909);\n      hash = hash ^ hash >>> 16;\n      return hash;\n    }\n    MurmurHash2.finish = finish;\n    function hashCode(data, seed = DEFAULT_SEED) {\n      let hash = initialize(seed);\n      let length = 0;\n      for (let value of data) {\n        hash = update(hash, value);\n        length++;\n      }\n      hash = finish(hash, length);\n      return hash;\n    }\n    MurmurHash2.hashCode = hashCode;\n    function hashString(str) {\n      let len = str.length;\n      if (len === 0) {\n        return 0;\n      }\n      let hash = 0;\n      for (let i = 0; i < len; i++) {\n        let c = str.charCodeAt(i);\n        hash = (hash << 5 >>> 0) - hash + c;\n        hash |= 0;\n      }\n      return hash;\n    }\n  })(MurmurHash = exports.MurmurHash || (exports.MurmurHash = {}));\n});\n\n// node_modules/antlr4ts/misc/ObjectEqualityComparator.js\nvar require_ObjectEqualityComparator = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ObjectEqualityComparator = void 0;\n  var Decorators_1 = require_Decorators();\n  var ObjectEqualityComparator = class {\n    hashCode(obj) {\n      if (obj == null) {\n        return 0;\n      }\n      return obj.hashCode();\n    }\n    equals(a, b) {\n      if (a == null) {\n        return b == null;\n      }\n      return a.equals(b);\n    }\n  };\n  ObjectEqualityComparator.INSTANCE = new ObjectEqualityComparator();\n  __decorate([\n    Decorators_1.Override\n  ], ObjectEqualityComparator.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ObjectEqualityComparator.prototype, \"equals\", null);\n  exports.ObjectEqualityComparator = ObjectEqualityComparator;\n});\n\n// node_modules/antlr4ts/misc/DefaultEqualityComparator.js\nvar require_DefaultEqualityComparator = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DefaultEqualityComparator = void 0;\n  var Decorators_1 = require_Decorators();\n  var MurmurHash_1 = require_MurmurHash();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var DefaultEqualityComparator = class {\n    hashCode(obj) {\n      if (obj == null) {\n        return 0;\n      } else if (typeof obj === \"string\" || typeof obj === \"number\") {\n        return MurmurHash_1.MurmurHash.hashCode([obj]);\n      } else {\n        return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.hashCode(obj);\n      }\n    }\n    equals(a, b) {\n      if (a == null) {\n        return b == null;\n      } else if (typeof a === \"string\" || typeof a === \"number\") {\n        return a === b;\n      } else {\n        return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a, b);\n      }\n    }\n  };\n  DefaultEqualityComparator.INSTANCE = new DefaultEqualityComparator();\n  __decorate([\n    Decorators_1.Override\n  ], DefaultEqualityComparator.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DefaultEqualityComparator.prototype, \"equals\", null);\n  exports.DefaultEqualityComparator = DefaultEqualityComparator;\n});\n\n// node_modules/antlr4ts/misc/Array2DHashSet.js\nvar require_Array2DHashSet = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Array2DHashSet = void 0;\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var DefaultEqualityComparator_1 = require_DefaultEqualityComparator();\n  var Decorators_1 = require_Decorators();\n  var MurmurHash_1 = require_MurmurHash();\n  var INITAL_CAPACITY = 16;\n  var LOAD_FACTOR = 0.75;\n  var Array2DHashSet = class {\n    constructor(comparatorOrSet, initialCapacity = INITAL_CAPACITY) {\n      this.n = 0;\n      this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);\n      if (comparatorOrSet instanceof Array2DHashSet) {\n        this.comparator = comparatorOrSet.comparator;\n        this.buckets = comparatorOrSet.buckets.slice(0);\n        for (let i = 0; i < this.buckets.length; i++) {\n          let bucket = this.buckets[i];\n          if (bucket) {\n            this.buckets[i] = bucket.slice(0);\n          }\n        }\n        this.n = comparatorOrSet.n;\n        this.threshold = comparatorOrSet.threshold;\n      } else {\n        this.comparator = comparatorOrSet || DefaultEqualityComparator_1.DefaultEqualityComparator.INSTANCE;\n        this.buckets = this.createBuckets(initialCapacity);\n      }\n    }\n    getOrAdd(o) {\n      if (this.n > this.threshold) {\n        this.expand();\n      }\n      return this.getOrAddImpl(o);\n    }\n    getOrAddImpl(o) {\n      let b = this.getBucket(o);\n      let bucket = this.buckets[b];\n      if (!bucket) {\n        bucket = [o];\n        this.buckets[b] = bucket;\n        this.n++;\n        return o;\n      }\n      for (let existing of bucket) {\n        if (this.comparator.equals(existing, o)) {\n          return existing;\n        }\n      }\n      bucket.push(o);\n      this.n++;\n      return o;\n    }\n    get(o) {\n      if (o == null) {\n        return o;\n      }\n      let b = this.getBucket(o);\n      let bucket = this.buckets[b];\n      if (!bucket) {\n        return void 0;\n      }\n      for (let e of bucket) {\n        if (this.comparator.equals(e, o)) {\n          return e;\n        }\n      }\n      return void 0;\n    }\n    getBucket(o) {\n      let hash = this.comparator.hashCode(o);\n      let b = hash & this.buckets.length - 1;\n      return b;\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      for (let bucket of this.buckets) {\n        if (bucket == null) {\n          continue;\n        }\n        for (let o of bucket) {\n          if (o == null) {\n            break;\n          }\n          hash = MurmurHash_1.MurmurHash.update(hash, this.comparator.hashCode(o));\n        }\n      }\n      hash = MurmurHash_1.MurmurHash.finish(hash, this.size);\n      return hash;\n    }\n    equals(o) {\n      if (o === this) {\n        return true;\n      }\n      if (!(o instanceof Array2DHashSet)) {\n        return false;\n      }\n      if (o.size !== this.size) {\n        return false;\n      }\n      let same = this.containsAll(o);\n      return same;\n    }\n    expand() {\n      let old = this.buckets;\n      let newCapacity = this.buckets.length * 2;\n      let newTable = this.createBuckets(newCapacity);\n      this.buckets = newTable;\n      this.threshold = Math.floor(newCapacity * LOAD_FACTOR);\n      let oldSize = this.size;\n      for (let bucket of old) {\n        if (!bucket) {\n          continue;\n        }\n        for (let o of bucket) {\n          let b = this.getBucket(o);\n          let newBucket = this.buckets[b];\n          if (!newBucket) {\n            newBucket = [];\n            this.buckets[b] = newBucket;\n          }\n          newBucket.push(o);\n        }\n      }\n      assert(this.n === oldSize);\n    }\n    add(t) {\n      let existing = this.getOrAdd(t);\n      return existing === t;\n    }\n    get size() {\n      return this.n;\n    }\n    get isEmpty() {\n      return this.n === 0;\n    }\n    contains(o) {\n      return this.containsFast(this.asElementType(o));\n    }\n    containsFast(obj) {\n      if (obj == null) {\n        return false;\n      }\n      return this.get(obj) != null;\n    }\n    *[Symbol.iterator]() {\n      yield* this.toArray();\n    }\n    toArray() {\n      const a = new Array(this.size);\n      let i = 0;\n      for (let bucket of this.buckets) {\n        if (bucket == null) {\n          continue;\n        }\n        for (let o of bucket) {\n          if (o == null) {\n            break;\n          }\n          a[i++] = o;\n        }\n      }\n      return a;\n    }\n    containsAll(collection) {\n      if (collection instanceof Array2DHashSet) {\n        let s = collection;\n        for (let bucket of s.buckets) {\n          if (bucket == null) {\n            continue;\n          }\n          for (let o of bucket) {\n            if (o == null) {\n              break;\n            }\n            if (!this.containsFast(this.asElementType(o))) {\n              return false;\n            }\n          }\n        }\n      } else {\n        for (let o of collection) {\n          if (!this.containsFast(this.asElementType(o))) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    addAll(c) {\n      let changed = false;\n      for (let o of c) {\n        let existing = this.getOrAdd(o);\n        if (existing !== o) {\n          changed = true;\n        }\n      }\n      return changed;\n    }\n    clear() {\n      this.buckets = this.createBuckets(INITAL_CAPACITY);\n      this.n = 0;\n      this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);\n    }\n    toString() {\n      if (this.size === 0) {\n        return \"{}\";\n      }\n      let buf = \"{\";\n      let first = true;\n      for (let bucket of this.buckets) {\n        if (bucket == null) {\n          continue;\n        }\n        for (let o of bucket) {\n          if (o == null) {\n            break;\n          }\n          if (first) {\n            first = false;\n          } else {\n            buf += \", \";\n          }\n          buf += o.toString();\n        }\n      }\n      buf += \"}\";\n      return buf;\n    }\n    toTableString() {\n      let buf = \"\";\n      for (let bucket of this.buckets) {\n        if (bucket == null) {\n          buf += \"null\\n\";\n          continue;\n        }\n        buf += \"[\";\n        let first = true;\n        for (let o of bucket) {\n          if (first) {\n            first = false;\n          } else {\n            buf += \" \";\n          }\n          if (o == null) {\n            buf += \"_\";\n          } else {\n            buf += o.toString();\n          }\n        }\n        buf += \"]\\n\";\n      }\n      return buf;\n    }\n    asElementType(o) {\n      return o;\n    }\n    createBuckets(capacity) {\n      return new Array(capacity);\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], Array2DHashSet.prototype, \"comparator\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"add\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"isEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"contains\", null);\n  __decorate([\n    __param(0, Decorators_1.Nullable)\n  ], Array2DHashSet.prototype, \"containsFast\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, Symbol.iterator, null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"toArray\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"containsAll\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"addAll\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"clear\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Array2DHashSet.prototype, \"toString\", null);\n  __decorate([\n    Decorators_1.SuppressWarnings(\"unchecked\")\n  ], Array2DHashSet.prototype, \"asElementType\", null);\n  __decorate([\n    Decorators_1.SuppressWarnings(\"unchecked\")\n  ], Array2DHashSet.prototype, \"createBuckets\", null);\n  exports.Array2DHashSet = Array2DHashSet;\n});\n\n// node_modules/antlr4ts/misc/ArrayEqualityComparator.js\nvar require_ArrayEqualityComparator = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ArrayEqualityComparator = void 0;\n  var Decorators_1 = require_Decorators();\n  var MurmurHash_1 = require_MurmurHash();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var ArrayEqualityComparator = class {\n    hashCode(obj) {\n      if (obj == null) {\n        return 0;\n      }\n      return MurmurHash_1.MurmurHash.hashCode(obj, 0);\n    }\n    equals(a, b) {\n      if (a == null) {\n        return b == null;\n      } else if (b == null) {\n        return false;\n      }\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  };\n  ArrayEqualityComparator.INSTANCE = new ArrayEqualityComparator();\n  __decorate([\n    Decorators_1.Override\n  ], ArrayEqualityComparator.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayEqualityComparator.prototype, \"equals\", null);\n  exports.ArrayEqualityComparator = ArrayEqualityComparator;\n});\n\n// node_modules/antlr4ts/misc/Utils.js\nvar require_Utils = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.toCharArray = exports.toMap = exports.equals = exports.join = exports.escapeWhitespace = void 0;\n  function escapeWhitespace(s, escapeSpaces) {\n    return escapeSpaces ? s.replace(/ /, \"\\xB7\") : s.replace(/\\t/, \"\\\\t\").replace(/\\n/, \"\\\\n\").replace(/\\r/, \"\\\\r\");\n  }\n  exports.escapeWhitespace = escapeWhitespace;\n  function join3(collection, separator) {\n    let buf = \"\";\n    let first = true;\n    for (let current of collection) {\n      if (first) {\n        first = false;\n      } else {\n        buf += separator;\n      }\n      buf += current;\n    }\n    return buf;\n  }\n  exports.join = join3;\n  function equals(x, y) {\n    if (x === y) {\n      return true;\n    }\n    if (x === void 0 || y === void 0) {\n      return false;\n    }\n    return x.equals(y);\n  }\n  exports.equals = equals;\n  function toMap(keys) {\n    let m = new Map();\n    for (let i = 0; i < keys.length; i++) {\n      m.set(keys[i], i);\n    }\n    return m;\n  }\n  exports.toMap = toMap;\n  function toCharArray3(str) {\n    if (typeof str === \"string\") {\n      let result = new Uint16Array(str.length);\n      for (let i = 0; i < str.length; i++) {\n        result[i] = str.charCodeAt(i);\n      }\n      return result;\n    } else {\n      return str.toCharArray();\n    }\n  }\n  exports.toCharArray = toCharArray3;\n});\n\n// node_modules/antlr4ts/atn/SemanticContext.js\nvar require_SemanticContext = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.SemanticContext = void 0;\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var Utils3 = require_Utils();\n  function max(items) {\n    let result;\n    for (let current of items) {\n      if (result === void 0) {\n        result = current;\n        continue;\n      }\n      let comparison = result.compareTo(current);\n      if (comparison < 0) {\n        result = current;\n      }\n    }\n    return result;\n  }\n  function min(items) {\n    let result;\n    for (let current of items) {\n      if (result === void 0) {\n        result = current;\n        continue;\n      }\n      let comparison = result.compareTo(current);\n      if (comparison > 0) {\n        result = current;\n      }\n    }\n    return result;\n  }\n  var SemanticContext = class {\n    static get NONE() {\n      if (SemanticContext._NONE === void 0) {\n        SemanticContext._NONE = new SemanticContext.Predicate();\n      }\n      return SemanticContext._NONE;\n    }\n    evalPrecedence(parser, parserCallStack) {\n      return this;\n    }\n    static and(a, b) {\n      if (!a || a === SemanticContext.NONE) {\n        return b;\n      }\n      if (b === SemanticContext.NONE) {\n        return a;\n      }\n      let result = new SemanticContext.AND(a, b);\n      if (result.opnds.length === 1) {\n        return result.opnds[0];\n      }\n      return result;\n    }\n    static or(a, b) {\n      if (!a) {\n        return b;\n      }\n      if (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n        return SemanticContext.NONE;\n      }\n      let result = new SemanticContext.OR(a, b);\n      if (result.opnds.length === 1) {\n        return result.opnds[0];\n      }\n      return result;\n    }\n  };\n  exports.SemanticContext = SemanticContext;\n  (function(SemanticContext2) {\n    const AND_HASHCODE = 40363613;\n    const OR_HASHCODE = 486279973;\n    function filterPrecedencePredicates(collection) {\n      let result = [];\n      for (let i = 0; i < collection.length; i++) {\n        let context = collection[i];\n        if (context instanceof SemanticContext2.PrecedencePredicate) {\n          result.push(context);\n          collection.splice(i, 1);\n          i--;\n        }\n      }\n      return result;\n    }\n    class Predicate extends SemanticContext2 {\n      constructor(ruleIndex = -1, predIndex = -1, isCtxDependent = false) {\n        super();\n        this.ruleIndex = ruleIndex;\n        this.predIndex = predIndex;\n        this.isCtxDependent = isCtxDependent;\n      }\n      eval(parser, parserCallStack) {\n        let localctx = this.isCtxDependent ? parserCallStack : void 0;\n        return parser.sempred(localctx, this.ruleIndex, this.predIndex);\n      }\n      hashCode() {\n        let hashCode = MurmurHash_1.MurmurHash.initialize();\n        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.ruleIndex);\n        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.predIndex);\n        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.isCtxDependent ? 1 : 0);\n        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 3);\n        return hashCode;\n      }\n      equals(obj) {\n        if (!(obj instanceof Predicate)) {\n          return false;\n        }\n        if (this === obj) {\n          return true;\n        }\n        return this.ruleIndex === obj.ruleIndex && this.predIndex === obj.predIndex && this.isCtxDependent === obj.isCtxDependent;\n      }\n      toString() {\n        return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n      }\n    }\n    __decorate([\n      Decorators_1.Override\n    ], Predicate.prototype, \"eval\", null);\n    __decorate([\n      Decorators_1.Override\n    ], Predicate.prototype, \"hashCode\", null);\n    __decorate([\n      Decorators_1.Override\n    ], Predicate.prototype, \"equals\", null);\n    __decorate([\n      Decorators_1.Override\n    ], Predicate.prototype, \"toString\", null);\n    SemanticContext2.Predicate = Predicate;\n    class PrecedencePredicate extends SemanticContext2 {\n      constructor(precedence) {\n        super();\n        this.precedence = precedence;\n      }\n      eval(parser, parserCallStack) {\n        return parser.precpred(parserCallStack, this.precedence);\n      }\n      evalPrecedence(parser, parserCallStack) {\n        if (parser.precpred(parserCallStack, this.precedence)) {\n          return SemanticContext2.NONE;\n        } else {\n          return void 0;\n        }\n      }\n      compareTo(o) {\n        return this.precedence - o.precedence;\n      }\n      hashCode() {\n        let hashCode = 1;\n        hashCode = 31 * hashCode + this.precedence;\n        return hashCode;\n      }\n      equals(obj) {\n        if (!(obj instanceof PrecedencePredicate)) {\n          return false;\n        }\n        if (this === obj) {\n          return true;\n        }\n        return this.precedence === obj.precedence;\n      }\n      toString() {\n        return \"{\" + this.precedence + \">=prec}?\";\n      }\n    }\n    __decorate([\n      Decorators_1.Override\n    ], PrecedencePredicate.prototype, \"eval\", null);\n    __decorate([\n      Decorators_1.Override\n    ], PrecedencePredicate.prototype, \"evalPrecedence\", null);\n    __decorate([\n      Decorators_1.Override\n    ], PrecedencePredicate.prototype, \"compareTo\", null);\n    __decorate([\n      Decorators_1.Override\n    ], PrecedencePredicate.prototype, \"hashCode\", null);\n    __decorate([\n      Decorators_1.Override\n    ], PrecedencePredicate.prototype, \"equals\", null);\n    __decorate([\n      Decorators_1.Override\n    ], PrecedencePredicate.prototype, \"toString\", null);\n    SemanticContext2.PrecedencePredicate = PrecedencePredicate;\n    class Operator extends SemanticContext2 {\n    }\n    SemanticContext2.Operator = Operator;\n    let AND = class AND2 extends Operator {\n      constructor(a, b) {\n        super();\n        let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n        if (a instanceof AND2) {\n          operands.addAll(a.opnds);\n        } else {\n          operands.add(a);\n        }\n        if (b instanceof AND2) {\n          operands.addAll(b.opnds);\n        } else {\n          operands.add(b);\n        }\n        this.opnds = operands.toArray();\n        let precedencePredicates = filterPrecedencePredicates(this.opnds);\n        let reduced = min(precedencePredicates);\n        if (reduced) {\n          this.opnds.push(reduced);\n        }\n      }\n      get operands() {\n        return this.opnds;\n      }\n      equals(obj) {\n        if (this === obj) {\n          return true;\n        }\n        if (!(obj instanceof AND2)) {\n          return false;\n        }\n        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);\n      }\n      hashCode() {\n        return MurmurHash_1.MurmurHash.hashCode(this.opnds, AND_HASHCODE);\n      }\n      eval(parser, parserCallStack) {\n        for (let opnd of this.opnds) {\n          if (!opnd.eval(parser, parserCallStack)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      evalPrecedence(parser, parserCallStack) {\n        let differs = false;\n        let operands = [];\n        for (let context of this.opnds) {\n          let evaluated = context.evalPrecedence(parser, parserCallStack);\n          differs = differs || evaluated !== context;\n          if (evaluated == null) {\n            return void 0;\n          } else if (evaluated !== SemanticContext2.NONE) {\n            operands.push(evaluated);\n          }\n        }\n        if (!differs) {\n          return this;\n        }\n        if (operands.length === 0) {\n          return SemanticContext2.NONE;\n        }\n        let result = operands[0];\n        for (let i = 1; i < operands.length; i++) {\n          result = SemanticContext2.and(result, operands[i]);\n        }\n        return result;\n      }\n      toString() {\n        return Utils3.join(this.opnds, \"&&\");\n      }\n    };\n    __decorate([\n      Decorators_1.Override\n    ], AND.prototype, \"operands\", null);\n    __decorate([\n      Decorators_1.Override\n    ], AND.prototype, \"equals\", null);\n    __decorate([\n      Decorators_1.Override\n    ], AND.prototype, \"hashCode\", null);\n    __decorate([\n      Decorators_1.Override\n    ], AND.prototype, \"eval\", null);\n    __decorate([\n      Decorators_1.Override\n    ], AND.prototype, \"evalPrecedence\", null);\n    __decorate([\n      Decorators_1.Override\n    ], AND.prototype, \"toString\", null);\n    AND = __decorate([\n      __param(0, Decorators_1.NotNull),\n      __param(1, Decorators_1.NotNull)\n    ], AND);\n    SemanticContext2.AND = AND;\n    let OR = class OR2 extends Operator {\n      constructor(a, b) {\n        super();\n        let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n        if (a instanceof OR2) {\n          operands.addAll(a.opnds);\n        } else {\n          operands.add(a);\n        }\n        if (b instanceof OR2) {\n          operands.addAll(b.opnds);\n        } else {\n          operands.add(b);\n        }\n        this.opnds = operands.toArray();\n        let precedencePredicates = filterPrecedencePredicates(this.opnds);\n        let reduced = max(precedencePredicates);\n        if (reduced) {\n          this.opnds.push(reduced);\n        }\n      }\n      get operands() {\n        return this.opnds;\n      }\n      equals(obj) {\n        if (this === obj) {\n          return true;\n        }\n        if (!(obj instanceof OR2)) {\n          return false;\n        }\n        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);\n      }\n      hashCode() {\n        return MurmurHash_1.MurmurHash.hashCode(this.opnds, OR_HASHCODE);\n      }\n      eval(parser, parserCallStack) {\n        for (let opnd of this.opnds) {\n          if (opnd.eval(parser, parserCallStack)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      evalPrecedence(parser, parserCallStack) {\n        let differs = false;\n        let operands = [];\n        for (let context of this.opnds) {\n          let evaluated = context.evalPrecedence(parser, parserCallStack);\n          differs = differs || evaluated !== context;\n          if (evaluated === SemanticContext2.NONE) {\n            return SemanticContext2.NONE;\n          } else if (evaluated) {\n            operands.push(evaluated);\n          }\n        }\n        if (!differs) {\n          return this;\n        }\n        if (operands.length === 0) {\n          return void 0;\n        }\n        let result = operands[0];\n        for (let i = 1; i < operands.length; i++) {\n          result = SemanticContext2.or(result, operands[i]);\n        }\n        return result;\n      }\n      toString() {\n        return Utils3.join(this.opnds, \"||\");\n      }\n    };\n    __decorate([\n      Decorators_1.Override\n    ], OR.prototype, \"operands\", null);\n    __decorate([\n      Decorators_1.Override\n    ], OR.prototype, \"equals\", null);\n    __decorate([\n      Decorators_1.Override\n    ], OR.prototype, \"hashCode\", null);\n    __decorate([\n      Decorators_1.Override\n    ], OR.prototype, \"eval\", null);\n    __decorate([\n      Decorators_1.Override\n    ], OR.prototype, \"evalPrecedence\", null);\n    __decorate([\n      Decorators_1.Override\n    ], OR.prototype, \"toString\", null);\n    OR = __decorate([\n      __param(0, Decorators_1.NotNull),\n      __param(1, Decorators_1.NotNull)\n    ], OR);\n    SemanticContext2.OR = OR;\n  })(SemanticContext = exports.SemanticContext || (exports.SemanticContext = {}));\n});\n\n// node_modules/antlr4ts/atn/PredicateTransition.js\nvar require_PredicateTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.PredicateTransition = void 0;\n  var AbstractPredicateTransition_1 = require_AbstractPredicateTransition();\n  var Decorators_1 = require_Decorators();\n  var SemanticContext_1 = require_SemanticContext();\n  var PredicateTransition = class PredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n      super(target);\n      this.ruleIndex = ruleIndex;\n      this.predIndex = predIndex;\n      this.isCtxDependent = isCtxDependent;\n    }\n    get serializationType() {\n      return 4;\n    }\n    get isEpsilon() {\n      return true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    get predicate() {\n      return new SemanticContext_1.SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n    toString() {\n      return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], PredicateTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], PredicateTransition.prototype, \"isEpsilon\", null);\n  __decorate([\n    Decorators_1.Override\n  ], PredicateTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], PredicateTransition.prototype, \"toString\", null);\n  PredicateTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], PredicateTransition);\n  exports.PredicateTransition = PredicateTransition;\n});\n\n// node_modules/antlr4ts/FailedPredicateException.js\nvar require_FailedPredicateException = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.FailedPredicateException = void 0;\n  var RecognitionException_1 = require_RecognitionException();\n  var Decorators_1 = require_Decorators();\n  var PredicateTransition_1 = require_PredicateTransition();\n  var FailedPredicateException2 = class FailedPredicateException3 extends RecognitionException_1.RecognitionException {\n    constructor(recognizer, predicate, message) {\n      super(recognizer, recognizer.inputStream, recognizer.context, FailedPredicateException3.formatMessage(predicate, message));\n      let s = recognizer.interpreter.atn.states[recognizer.state];\n      let trans = s.transition(0);\n      if (trans instanceof PredicateTransition_1.PredicateTransition) {\n        this._ruleIndex = trans.ruleIndex;\n        this._predicateIndex = trans.predIndex;\n      } else {\n        this._ruleIndex = 0;\n        this._predicateIndex = 0;\n      }\n      this._predicate = predicate;\n      super.setOffendingToken(recognizer, recognizer.currentToken);\n    }\n    get ruleIndex() {\n      return this._ruleIndex;\n    }\n    get predicateIndex() {\n      return this._predicateIndex;\n    }\n    get predicate() {\n      return this._predicate;\n    }\n    static formatMessage(predicate, message) {\n      if (message) {\n        return message;\n      }\n      return `failed predicate: {${predicate}}?`;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], FailedPredicateException2, \"formatMessage\", null);\n  FailedPredicateException2 = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], FailedPredicateException2);\n  exports.FailedPredicateException = FailedPredicateException2;\n});\n\n// node_modules/antlr4ts/InputMismatchException.js\nvar require_InputMismatchException = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.InputMismatchException = void 0;\n  var RecognitionException_1 = require_RecognitionException();\n  var Decorators_1 = require_Decorators();\n  var InputMismatchException = class InputMismatchException extends RecognitionException_1.RecognitionException {\n    constructor(recognizer, state, context) {\n      if (context === void 0) {\n        context = recognizer.context;\n      }\n      super(recognizer, recognizer.inputStream, context);\n      if (state !== void 0) {\n        this.setOffendingState(state);\n      }\n      this.setOffendingToken(recognizer, recognizer.currentToken);\n    }\n  };\n  InputMismatchException = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], InputMismatchException);\n  exports.InputMismatchException = InputMismatchException;\n});\n\n// node_modules/antlr4ts/misc/Arrays.js\nvar require_Arrays = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Arrays = void 0;\n  var Arrays;\n  (function(Arrays2) {\n    function binarySearch(array, key, fromIndex, toIndex) {\n      return binarySearch0(array, fromIndex !== void 0 ? fromIndex : 0, toIndex !== void 0 ? toIndex : array.length, key);\n    }\n    Arrays2.binarySearch = binarySearch;\n    function binarySearch0(array, fromIndex, toIndex, key) {\n      let low = fromIndex;\n      let high = toIndex - 1;\n      while (low <= high) {\n        let mid = low + high >>> 1;\n        let midVal = array[mid];\n        if (midVal < key) {\n          low = mid + 1;\n        } else if (midVal > key) {\n          high = mid - 1;\n        } else {\n          return mid;\n        }\n      }\n      return -(low + 1);\n    }\n    function toString(array) {\n      let result = \"[\";\n      let first = true;\n      for (let element of array) {\n        if (first) {\n          first = false;\n        } else {\n          result += \", \";\n        }\n        if (element === null) {\n          result += \"null\";\n        } else if (element === void 0) {\n          result += \"undefined\";\n        } else {\n          result += element;\n        }\n      }\n      result += \"]\";\n      return result;\n    }\n    Arrays2.toString = toString;\n  })(Arrays = exports.Arrays || (exports.Arrays = {}));\n});\n\n// node_modules/antlr4ts/misc/IntegerList.js\nvar require_IntegerList = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.IntegerList = void 0;\n  var Arrays_1 = require_Arrays();\n  var Decorators_1 = require_Decorators();\n  var EMPTY_DATA = new Int32Array(0);\n  var INITIAL_SIZE = 4;\n  var MAX_ARRAY_SIZE = (1 << 31 >>> 0) - 1 - 8;\n  var IntegerList = class {\n    constructor(arg) {\n      if (!arg) {\n        this._data = EMPTY_DATA;\n        this._size = 0;\n      } else if (arg instanceof IntegerList) {\n        this._data = arg._data.slice(0);\n        this._size = arg._size;\n      } else if (typeof arg === \"number\") {\n        if (arg === 0) {\n          this._data = EMPTY_DATA;\n          this._size = 0;\n        } else {\n          this._data = new Int32Array(arg);\n          this._size = 0;\n        }\n      } else {\n        this._data = EMPTY_DATA;\n        this._size = 0;\n        for (let value of arg) {\n          this.add(value);\n        }\n      }\n    }\n    add(value) {\n      if (this._data.length === this._size) {\n        this.ensureCapacity(this._size + 1);\n      }\n      this._data[this._size] = value;\n      this._size++;\n    }\n    addAll(list) {\n      if (Array.isArray(list)) {\n        this.ensureCapacity(this._size + list.length);\n        this._data.subarray(this._size, this._size + list.length).set(list);\n        this._size += list.length;\n      } else if (list instanceof IntegerList) {\n        this.ensureCapacity(this._size + list._size);\n        this._data.subarray(this._size, this._size + list.size).set(list._data);\n        this._size += list._size;\n      } else {\n        this.ensureCapacity(this._size + list.size);\n        let current = 0;\n        for (let xi of list) {\n          this._data[this._size + current] = xi;\n          current++;\n        }\n        this._size += list.size;\n      }\n    }\n    get(index) {\n      if (index < 0 || index >= this._size) {\n        throw RangeError();\n      }\n      return this._data[index];\n    }\n    contains(value) {\n      for (let i = 0; i < this._size; i++) {\n        if (this._data[i] === value) {\n          return true;\n        }\n      }\n      return false;\n    }\n    set(index, value) {\n      if (index < 0 || index >= this._size) {\n        throw RangeError();\n      }\n      let previous = this._data[index];\n      this._data[index] = value;\n      return previous;\n    }\n    removeAt(index) {\n      let value = this.get(index);\n      this._data.copyWithin(index, index + 1, this._size);\n      this._data[this._size - 1] = 0;\n      this._size--;\n      return value;\n    }\n    removeRange(fromIndex, toIndex) {\n      if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {\n        throw RangeError();\n      }\n      if (fromIndex > toIndex) {\n        throw RangeError();\n      }\n      this._data.copyWithin(toIndex, fromIndex, this._size);\n      this._data.fill(0, this._size - (toIndex - fromIndex), this._size);\n      this._size -= toIndex - fromIndex;\n    }\n    get isEmpty() {\n      return this._size === 0;\n    }\n    get size() {\n      return this._size;\n    }\n    trimToSize() {\n      if (this._data.length === this._size) {\n        return;\n      }\n      this._data = this._data.slice(0, this._size);\n    }\n    clear() {\n      this._data.fill(0, 0, this._size);\n      this._size = 0;\n    }\n    toArray() {\n      if (this._size === 0) {\n        return [];\n      }\n      return Array.from(this._data.subarray(0, this._size));\n    }\n    sort() {\n      this._data.subarray(0, this._size).sort();\n    }\n    equals(o) {\n      if (o === this) {\n        return true;\n      }\n      if (!(o instanceof IntegerList)) {\n        return false;\n      }\n      if (this._size !== o._size) {\n        return false;\n      }\n      for (let i = 0; i < this._size; i++) {\n        if (this._data[i] !== o._data[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    hashCode() {\n      let hashCode = 1;\n      for (let i = 0; i < this._size; i++) {\n        hashCode = 31 * hashCode + this._data[i];\n      }\n      return hashCode;\n    }\n    toString() {\n      return this._data.toString();\n    }\n    binarySearch(key, fromIndex, toIndex) {\n      if (fromIndex === void 0) {\n        fromIndex = 0;\n      }\n      if (toIndex === void 0) {\n        toIndex = this._size;\n      }\n      if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {\n        throw new RangeError();\n      }\n      if (fromIndex > toIndex) {\n        throw new RangeError();\n      }\n      return Arrays_1.Arrays.binarySearch(this._data, key, fromIndex, toIndex);\n    }\n    ensureCapacity(capacity) {\n      if (capacity < 0 || capacity > MAX_ARRAY_SIZE) {\n        throw new RangeError();\n      }\n      let newLength;\n      if (this._data.length === 0) {\n        newLength = INITIAL_SIZE;\n      } else {\n        newLength = this._data.length;\n      }\n      while (newLength < capacity) {\n        newLength = newLength * 2;\n        if (newLength < 0 || newLength > MAX_ARRAY_SIZE) {\n          newLength = MAX_ARRAY_SIZE;\n        }\n      }\n      let tmp = new Int32Array(newLength);\n      tmp.set(this._data);\n      this._data = tmp;\n    }\n    toCharArray() {\n      let resultArray = new Uint16Array(this._size);\n      let resultIdx = 0;\n      let calculatedPreciseResultSize = false;\n      for (let i = 0; i < this._size; i++) {\n        let codePoint = this._data[i];\n        if (codePoint >= 0 && codePoint < 65536) {\n          resultArray[resultIdx] = codePoint;\n          resultIdx++;\n          continue;\n        }\n        if (!calculatedPreciseResultSize) {\n          let newResultArray = new Uint16Array(this.charArraySize());\n          newResultArray.set(resultArray, 0);\n          resultArray = newResultArray;\n          calculatedPreciseResultSize = true;\n        }\n        let pair = String.fromCodePoint(codePoint);\n        resultArray[resultIdx] = pair.charCodeAt(0);\n        resultArray[resultIdx + 1] = pair.charCodeAt(1);\n        resultIdx += 2;\n      }\n      return resultArray;\n    }\n    charArraySize() {\n      let result = 0;\n      for (let i = 0; i < this._size; i++) {\n        result += this._data[i] >= 65536 ? 2 : 1;\n      }\n      return result;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], IntegerList.prototype, \"_data\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], IntegerList.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntegerList.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntegerList.prototype, \"toString\", null);\n  exports.IntegerList = IntegerList;\n});\n\n// node_modules/antlr4ts/misc/Interval.js\nvar require_Interval = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Interval = void 0;\n  var Decorators_1 = require_Decorators();\n  var INTERVAL_POOL_MAX_VALUE = 1e3;\n  var Interval = class {\n    constructor(a, b) {\n      this.a = a;\n      this.b = b;\n    }\n    static get INVALID() {\n      return Interval._INVALID;\n    }\n    static of(a, b) {\n      if (a !== b || a < 0 || a > INTERVAL_POOL_MAX_VALUE) {\n        return new Interval(a, b);\n      }\n      if (Interval.cache[a] == null) {\n        Interval.cache[a] = new Interval(a, a);\n      }\n      return Interval.cache[a];\n    }\n    get length() {\n      if (this.b < this.a) {\n        return 0;\n      }\n      return this.b - this.a + 1;\n    }\n    equals(o) {\n      if (o === this) {\n        return true;\n      } else if (!(o instanceof Interval)) {\n        return false;\n      }\n      return this.a === o.a && this.b === o.b;\n    }\n    hashCode() {\n      let hash = 23;\n      hash = hash * 31 + this.a;\n      hash = hash * 31 + this.b;\n      return hash;\n    }\n    startsBeforeDisjoint(other) {\n      return this.a < other.a && this.b < other.a;\n    }\n    startsBeforeNonDisjoint(other) {\n      return this.a <= other.a && this.b >= other.a;\n    }\n    startsAfter(other) {\n      return this.a > other.a;\n    }\n    startsAfterDisjoint(other) {\n      return this.a > other.b;\n    }\n    startsAfterNonDisjoint(other) {\n      return this.a > other.a && this.a <= other.b;\n    }\n    disjoint(other) {\n      return this.startsBeforeDisjoint(other) || this.startsAfterDisjoint(other);\n    }\n    adjacent(other) {\n      return this.a === other.b + 1 || this.b === other.a - 1;\n    }\n    properlyContains(other) {\n      return other.a >= this.a && other.b <= this.b;\n    }\n    union(other) {\n      return Interval.of(Math.min(this.a, other.a), Math.max(this.b, other.b));\n    }\n    intersection(other) {\n      return Interval.of(Math.max(this.a, other.a), Math.min(this.b, other.b));\n    }\n    differenceNotProperlyContained(other) {\n      let diff;\n      if (other.startsBeforeNonDisjoint(this)) {\n        diff = Interval.of(Math.max(this.a, other.b + 1), this.b);\n      } else if (other.startsAfterNonDisjoint(this)) {\n        diff = Interval.of(this.a, other.a - 1);\n      }\n      return diff;\n    }\n    toString() {\n      return this.a + \"..\" + this.b;\n    }\n  };\n  Interval._INVALID = new Interval(-1, -2);\n  Interval.cache = new Array(INTERVAL_POOL_MAX_VALUE + 1);\n  __decorate([\n    Decorators_1.Override\n  ], Interval.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Interval.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Interval.prototype, \"toString\", null);\n  exports.Interval = Interval;\n});\n\n// node_modules/antlr4ts/Token.js\nvar require_Token = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Token = void 0;\n  var IntStream_1 = require_IntStream();\n  var Token2;\n  (function(Token3) {\n    Token3.INVALID_TYPE = 0;\n    Token3.EPSILON = -2;\n    Token3.MIN_USER_TOKEN_TYPE = 1;\n    Token3.EOF = IntStream_1.IntStream.EOF;\n    Token3.DEFAULT_CHANNEL = 0;\n    Token3.HIDDEN_CHANNEL = 1;\n    Token3.MIN_USER_CHANNEL_VALUE = 2;\n  })(Token2 = exports.Token || (exports.Token = {}));\n});\n\n// node_modules/antlr4ts/CommonToken.js\nvar require_CommonToken = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.CommonToken = void 0;\n  var Interval_1 = require_Interval();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var CommonToken = class CommonToken2 {\n    constructor(type, text, source = CommonToken2.EMPTY_SOURCE, channel = Token_1.Token.DEFAULT_CHANNEL, start = 0, stop = 0) {\n      this._line = 0;\n      this._charPositionInLine = -1;\n      this._channel = Token_1.Token.DEFAULT_CHANNEL;\n      this.index = -1;\n      this._text = text;\n      this._type = type;\n      this.source = source;\n      this._channel = channel;\n      this.start = start;\n      this.stop = stop;\n      if (source.source != null) {\n        this._line = source.source.line;\n        this._charPositionInLine = source.source.charPositionInLine;\n      }\n    }\n    static fromToken(oldToken) {\n      let result = new CommonToken2(oldToken.type, void 0, CommonToken2.EMPTY_SOURCE, oldToken.channel, oldToken.startIndex, oldToken.stopIndex);\n      result._line = oldToken.line;\n      result.index = oldToken.tokenIndex;\n      result._charPositionInLine = oldToken.charPositionInLine;\n      if (oldToken instanceof CommonToken2) {\n        result._text = oldToken._text;\n        result.source = oldToken.source;\n      } else {\n        result._text = oldToken.text;\n        result.source = {source: oldToken.tokenSource, stream: oldToken.inputStream};\n      }\n      return result;\n    }\n    get type() {\n      return this._type;\n    }\n    set type(type) {\n      this._type = type;\n    }\n    get line() {\n      return this._line;\n    }\n    set line(line) {\n      this._line = line;\n    }\n    get text() {\n      if (this._text != null) {\n        return this._text;\n      }\n      let input = this.inputStream;\n      if (input == null) {\n        return void 0;\n      }\n      let n = input.size;\n      if (this.start < n && this.stop < n) {\n        return input.getText(Interval_1.Interval.of(this.start, this.stop));\n      } else {\n        return \"<EOF>\";\n      }\n    }\n    set text(text) {\n      this._text = text;\n    }\n    get charPositionInLine() {\n      return this._charPositionInLine;\n    }\n    set charPositionInLine(charPositionInLine) {\n      this._charPositionInLine = charPositionInLine;\n    }\n    get channel() {\n      return this._channel;\n    }\n    set channel(channel) {\n      this._channel = channel;\n    }\n    get startIndex() {\n      return this.start;\n    }\n    set startIndex(start) {\n      this.start = start;\n    }\n    get stopIndex() {\n      return this.stop;\n    }\n    set stopIndex(stop) {\n      this.stop = stop;\n    }\n    get tokenIndex() {\n      return this.index;\n    }\n    set tokenIndex(index) {\n      this.index = index;\n    }\n    get tokenSource() {\n      return this.source.source;\n    }\n    get inputStream() {\n      return this.source.stream;\n    }\n    toString(recognizer) {\n      let channelStr = \"\";\n      if (this._channel > 0) {\n        channelStr = \",channel=\" + this._channel;\n      }\n      let txt = this.text;\n      if (txt != null) {\n        txt = txt.replace(/\\n/g, \"\\\\n\");\n        txt = txt.replace(/\\r/g, \"\\\\r\");\n        txt = txt.replace(/\\t/g, \"\\\\t\");\n      } else {\n        txt = \"<no text>\";\n      }\n      let typeString = String(this._type);\n      if (recognizer) {\n        typeString = recognizer.vocabulary.getDisplayName(this._type);\n      }\n      return \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + txt + \"',<\" + typeString + \">\" + channelStr + \",\" + this._line + \":\" + this.charPositionInLine + \"]\";\n    }\n  };\n  CommonToken.EMPTY_SOURCE = {source: void 0, stream: void 0};\n  __decorate([\n    Decorators_1.NotNull\n  ], CommonToken.prototype, \"source\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"type\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"line\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"text\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"charPositionInLine\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"channel\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"startIndex\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"stopIndex\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"tokenIndex\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"tokenSource\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"inputStream\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonToken.prototype, \"toString\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], CommonToken, \"fromToken\", null);\n  CommonToken = __decorate([\n    __param(2, Decorators_1.NotNull)\n  ], CommonToken);\n  exports.CommonToken = CommonToken;\n});\n\n// node_modules/antlr4ts/CommonTokenFactory.js\nvar require_CommonTokenFactory = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.CommonTokenFactory = void 0;\n  var CommonToken_1 = require_CommonToken();\n  var Interval_1 = require_Interval();\n  var Decorators_1 = require_Decorators();\n  var CommonTokenFactory = class {\n    constructor(copyText = false) {\n      this.copyText = copyText;\n    }\n    create(source, type, text, channel, start, stop, line, charPositionInLine) {\n      let t = new CommonToken_1.CommonToken(type, text, source, channel, start, stop);\n      t.line = line;\n      t.charPositionInLine = charPositionInLine;\n      if (text == null && this.copyText && source.stream != null) {\n        t.text = source.stream.getText(Interval_1.Interval.of(start, stop));\n      }\n      return t;\n    }\n    createSimple(type, text) {\n      return new CommonToken_1.CommonToken(type, text);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], CommonTokenFactory.prototype, \"create\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonTokenFactory.prototype, \"createSimple\", null);\n  exports.CommonTokenFactory = CommonTokenFactory;\n  (function(CommonTokenFactory2) {\n    CommonTokenFactory2.DEFAULT = new CommonTokenFactory2();\n  })(CommonTokenFactory = exports.CommonTokenFactory || (exports.CommonTokenFactory = {}));\n});\n\n// node_modules/antlr4ts/misc/IntegerStack.js\nvar require_IntegerStack = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.IntegerStack = void 0;\n  var IntegerList_1 = require_IntegerList();\n  var IntegerStack = class extends IntegerList_1.IntegerList {\n    constructor(arg) {\n      super(arg);\n    }\n    push(value) {\n      this.add(value);\n    }\n    pop() {\n      return this.removeAt(this.size - 1);\n    }\n    peek() {\n      return this.get(this.size - 1);\n    }\n  };\n  exports.IntegerStack = IntegerStack;\n});\n\n// node_modules/antlr4ts/dfa/AcceptStateInfo.js\nvar require_AcceptStateInfo = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.AcceptStateInfo = void 0;\n  var AcceptStateInfo = class {\n    constructor(prediction, lexerActionExecutor) {\n      this._prediction = prediction;\n      this._lexerActionExecutor = lexerActionExecutor;\n    }\n    get prediction() {\n      return this._prediction;\n    }\n    get lexerActionExecutor() {\n      return this._lexerActionExecutor;\n    }\n  };\n  exports.AcceptStateInfo = AcceptStateInfo;\n});\n\n// node_modules/antlr4ts/misc/Array2DHashMap.js\nvar require_Array2DHashMap = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Array2DHashMap = void 0;\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var MapKeyEqualityComparator = class {\n    constructor(keyComparator) {\n      this.keyComparator = keyComparator;\n    }\n    hashCode(obj) {\n      return this.keyComparator.hashCode(obj.key);\n    }\n    equals(a, b) {\n      return this.keyComparator.equals(a.key, b.key);\n    }\n  };\n  var Array2DHashMap = class {\n    constructor(keyComparer) {\n      if (keyComparer instanceof Array2DHashMap) {\n        this.backingStore = new Array2DHashSet_1.Array2DHashSet(keyComparer.backingStore);\n      } else {\n        this.backingStore = new Array2DHashSet_1.Array2DHashSet(new MapKeyEqualityComparator(keyComparer));\n      }\n    }\n    clear() {\n      this.backingStore.clear();\n    }\n    containsKey(key) {\n      return this.backingStore.contains({key});\n    }\n    get(key) {\n      let bucket = this.backingStore.get({key});\n      if (!bucket) {\n        return void 0;\n      }\n      return bucket.value;\n    }\n    get isEmpty() {\n      return this.backingStore.isEmpty;\n    }\n    put(key, value) {\n      let element = this.backingStore.get({key, value});\n      let result;\n      if (!element) {\n        this.backingStore.add({key, value});\n      } else {\n        result = element.value;\n        element.value = value;\n      }\n      return result;\n    }\n    putIfAbsent(key, value) {\n      let element = this.backingStore.get({key, value});\n      let result;\n      if (!element) {\n        this.backingStore.add({key, value});\n      } else {\n        result = element.value;\n      }\n      return result;\n    }\n    get size() {\n      return this.backingStore.size;\n    }\n    hashCode() {\n      return this.backingStore.hashCode();\n    }\n    equals(o) {\n      if (!(o instanceof Array2DHashMap)) {\n        return false;\n      }\n      return this.backingStore.equals(o.backingStore);\n    }\n  };\n  exports.Array2DHashMap = Array2DHashMap;\n});\n\n// node_modules/antlr4ts/atn/DecisionState.js\nvar require_DecisionState = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DecisionState = void 0;\n  var ATNState_1 = require_ATNState();\n  var DecisionState = class extends ATNState_1.ATNState {\n    constructor() {\n      super(...arguments);\n      this.decision = -1;\n      this.nonGreedy = false;\n      this.sll = false;\n    }\n  };\n  exports.DecisionState = DecisionState;\n});\n\n// node_modules/antlr4ts/atn/PredictionContextCache.js\nvar require_PredictionContextCache = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.PredictionContextCache = void 0;\n  var Array2DHashMap_1 = require_Array2DHashMap();\n  var Decorators_1 = require_Decorators();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var PredictionContext_1 = require_PredictionContext();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var PredictionContextCache = class {\n    constructor(enableCache = true) {\n      this.contexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n      this.childContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n      this.joinContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n      this.enableCache = enableCache;\n    }\n    getAsCached(context) {\n      if (!this.enableCache) {\n        return context;\n      }\n      let result = this.contexts.get(context);\n      if (!result) {\n        result = context;\n        this.contexts.put(context, context);\n      }\n      return result;\n    }\n    getChild(context, invokingState) {\n      if (!this.enableCache) {\n        return context.getChild(invokingState);\n      }\n      let operands = new PredictionContextCache.PredictionContextAndInt(context, invokingState);\n      let result = this.childContexts.get(operands);\n      if (!result) {\n        result = context.getChild(invokingState);\n        result = this.getAsCached(result);\n        this.childContexts.put(operands, result);\n      }\n      return result;\n    }\n    join(x, y) {\n      if (!this.enableCache) {\n        return PredictionContext_1.PredictionContext.join(x, y, this);\n      }\n      let operands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(x, y);\n      let result = this.joinContexts.get(operands);\n      if (result) {\n        return result;\n      }\n      result = PredictionContext_1.PredictionContext.join(x, y, this);\n      result = this.getAsCached(result);\n      this.joinContexts.put(operands, result);\n      return result;\n    }\n  };\n  exports.PredictionContextCache = PredictionContextCache;\n  PredictionContextCache.UNCACHED = new PredictionContextCache(false);\n  (function(PredictionContextCache2) {\n    class PredictionContextAndInt {\n      constructor(obj, value) {\n        this.obj = obj;\n        this.value = value;\n      }\n      equals(obj) {\n        if (!(obj instanceof PredictionContextAndInt)) {\n          return false;\n        } else if (obj === this) {\n          return true;\n        }\n        let other = obj;\n        return this.value === other.value && (this.obj === other.obj || this.obj != null && this.obj.equals(other.obj));\n      }\n      hashCode() {\n        let hashCode = 5;\n        hashCode = 7 * hashCode + (this.obj != null ? this.obj.hashCode() : 0);\n        hashCode = 7 * hashCode + this.value;\n        return hashCode;\n      }\n    }\n    __decorate([\n      Decorators_1.Override\n    ], PredictionContextAndInt.prototype, \"equals\", null);\n    __decorate([\n      Decorators_1.Override\n    ], PredictionContextAndInt.prototype, \"hashCode\", null);\n    PredictionContextCache2.PredictionContextAndInt = PredictionContextAndInt;\n    class IdentityCommutativePredictionContextOperands {\n      constructor(x, y) {\n        assert(x != null);\n        assert(y != null);\n        this._x = x;\n        this._y = y;\n      }\n      get x() {\n        return this._x;\n      }\n      get y() {\n        return this._y;\n      }\n      equals(o) {\n        if (!(o instanceof IdentityCommutativePredictionContextOperands)) {\n          return false;\n        } else if (this === o) {\n          return true;\n        }\n        let other = o;\n        return this._x === other._x && this._y === other._y || this._x === other._y && this._y === other._x;\n      }\n      hashCode() {\n        return this._x.hashCode() ^ this._y.hashCode();\n      }\n    }\n    __decorate([\n      Decorators_1.Override\n    ], IdentityCommutativePredictionContextOperands.prototype, \"equals\", null);\n    __decorate([\n      Decorators_1.Override\n    ], IdentityCommutativePredictionContextOperands.prototype, \"hashCode\", null);\n    PredictionContextCache2.IdentityCommutativePredictionContextOperands = IdentityCommutativePredictionContextOperands;\n  })(PredictionContextCache = exports.PredictionContextCache || (exports.PredictionContextCache = {}));\n});\n\n// node_modules/antlr4ts/atn/PredictionContext.js\nvar require_PredictionContext = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.SingletonPredictionContext = exports.PredictionContext = void 0;\n  var Array2DHashMap_1 = require_Array2DHashMap();\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var Arrays_1 = require_Arrays();\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var PredictionContextCache_1 = require_PredictionContextCache();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var INITIAL_HASH = 1;\n  var PredictionContext = class {\n    constructor(cachedHashCode) {\n      this.cachedHashCode = cachedHashCode;\n    }\n    static calculateEmptyHashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);\n      hash = MurmurHash_1.MurmurHash.finish(hash, 0);\n      return hash;\n    }\n    static calculateSingleHashCode(parent, returnState) {\n      let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);\n      hash = MurmurHash_1.MurmurHash.update(hash, parent);\n      hash = MurmurHash_1.MurmurHash.update(hash, returnState);\n      hash = MurmurHash_1.MurmurHash.finish(hash, 2);\n      return hash;\n    }\n    static calculateHashCode(parents, returnStates) {\n      let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);\n      for (let parent of parents) {\n        hash = MurmurHash_1.MurmurHash.update(hash, parent);\n      }\n      for (let returnState of returnStates) {\n        hash = MurmurHash_1.MurmurHash.update(hash, returnState);\n      }\n      hash = MurmurHash_1.MurmurHash.finish(hash, 2 * parents.length);\n      return hash;\n    }\n    static fromRuleContext(atn, outerContext, fullContext = true) {\n      if (outerContext.isEmpty) {\n        return fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;\n      }\n      let parent;\n      if (outerContext._parent) {\n        parent = PredictionContext.fromRuleContext(atn, outerContext._parent, fullContext);\n      } else {\n        parent = fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;\n      }\n      let state = atn.states[outerContext.invokingState];\n      let transition = state.transition(0);\n      return parent.getChild(transition.followState.stateNumber);\n    }\n    static addEmptyContext(context) {\n      return context.addEmptyContext();\n    }\n    static removeEmptyContext(context) {\n      return context.removeEmptyContext();\n    }\n    static join(context0, context1, contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED) {\n      if (context0 === context1) {\n        return context0;\n      }\n      if (context0.isEmpty) {\n        return PredictionContext.isEmptyLocal(context0) ? context0 : PredictionContext.addEmptyContext(context1);\n      } else if (context1.isEmpty) {\n        return PredictionContext.isEmptyLocal(context1) ? context1 : PredictionContext.addEmptyContext(context0);\n      }\n      let context0size = context0.size;\n      let context1size = context1.size;\n      if (context0size === 1 && context1size === 1 && context0.getReturnState(0) === context1.getReturnState(0)) {\n        let merged = contextCache.join(context0.getParent(0), context1.getParent(0));\n        if (merged === context0.getParent(0)) {\n          return context0;\n        } else if (merged === context1.getParent(0)) {\n          return context1;\n        } else {\n          return merged.getChild(context0.getReturnState(0));\n        }\n      }\n      let count = 0;\n      let parentsList = new Array(context0size + context1size);\n      let returnStatesList = new Array(parentsList.length);\n      let leftIndex = 0;\n      let rightIndex = 0;\n      let canReturnLeft = true;\n      let canReturnRight = true;\n      while (leftIndex < context0size && rightIndex < context1size) {\n        if (context0.getReturnState(leftIndex) === context1.getReturnState(rightIndex)) {\n          parentsList[count] = contextCache.join(context0.getParent(leftIndex), context1.getParent(rightIndex));\n          returnStatesList[count] = context0.getReturnState(leftIndex);\n          canReturnLeft = canReturnLeft && parentsList[count] === context0.getParent(leftIndex);\n          canReturnRight = canReturnRight && parentsList[count] === context1.getParent(rightIndex);\n          leftIndex++;\n          rightIndex++;\n        } else if (context0.getReturnState(leftIndex) < context1.getReturnState(rightIndex)) {\n          parentsList[count] = context0.getParent(leftIndex);\n          returnStatesList[count] = context0.getReturnState(leftIndex);\n          canReturnRight = false;\n          leftIndex++;\n        } else {\n          assert(context1.getReturnState(rightIndex) < context0.getReturnState(leftIndex));\n          parentsList[count] = context1.getParent(rightIndex);\n          returnStatesList[count] = context1.getReturnState(rightIndex);\n          canReturnLeft = false;\n          rightIndex++;\n        }\n        count++;\n      }\n      while (leftIndex < context0size) {\n        parentsList[count] = context0.getParent(leftIndex);\n        returnStatesList[count] = context0.getReturnState(leftIndex);\n        leftIndex++;\n        canReturnRight = false;\n        count++;\n      }\n      while (rightIndex < context1size) {\n        parentsList[count] = context1.getParent(rightIndex);\n        returnStatesList[count] = context1.getReturnState(rightIndex);\n        rightIndex++;\n        canReturnLeft = false;\n        count++;\n      }\n      if (canReturnLeft) {\n        return context0;\n      } else if (canReturnRight) {\n        return context1;\n      }\n      if (count < parentsList.length) {\n        parentsList = parentsList.slice(0, count);\n        returnStatesList = returnStatesList.slice(0, count);\n      }\n      if (parentsList.length === 0) {\n        return PredictionContext.EMPTY_FULL;\n      } else if (parentsList.length === 1) {\n        return new SingletonPredictionContext(parentsList[0], returnStatesList[0]);\n      } else {\n        return new ArrayPredictionContext(parentsList, returnStatesList);\n      }\n    }\n    static isEmptyLocal(context) {\n      return context === PredictionContext.EMPTY_LOCAL;\n    }\n    static getCachedContext(context, contextCache, visited) {\n      if (context.isEmpty) {\n        return context;\n      }\n      let existing = visited.get(context);\n      if (existing) {\n        return existing;\n      }\n      existing = contextCache.get(context);\n      if (existing) {\n        visited.put(context, existing);\n        return existing;\n      }\n      let changed = false;\n      let parents = new Array(context.size);\n      for (let i = 0; i < parents.length; i++) {\n        let parent = PredictionContext.getCachedContext(context.getParent(i), contextCache, visited);\n        if (changed || parent !== context.getParent(i)) {\n          if (!changed) {\n            parents = new Array(context.size);\n            for (let j = 0; j < context.size; j++) {\n              parents[j] = context.getParent(j);\n            }\n            changed = true;\n          }\n          parents[i] = parent;\n        }\n      }\n      if (!changed) {\n        existing = contextCache.putIfAbsent(context, context);\n        visited.put(context, existing != null ? existing : context);\n        return context;\n      }\n      let updated;\n      if (parents.length === 1) {\n        updated = new SingletonPredictionContext(parents[0], context.getReturnState(0));\n      } else {\n        let returnStates = new Array(context.size);\n        for (let i = 0; i < context.size; i++) {\n          returnStates[i] = context.getReturnState(i);\n        }\n        updated = new ArrayPredictionContext(parents, returnStates, context.hashCode());\n      }\n      existing = contextCache.putIfAbsent(updated, updated);\n      visited.put(updated, existing || updated);\n      visited.put(context, existing || updated);\n      return updated;\n    }\n    appendSingleContext(returnContext, contextCache) {\n      return this.appendContext(PredictionContext.EMPTY_FULL.getChild(returnContext), contextCache);\n    }\n    getChild(returnState) {\n      return new SingletonPredictionContext(this, returnState);\n    }\n    hashCode() {\n      return this.cachedHashCode;\n    }\n    toStrings(recognizer, currentState, stop = PredictionContext.EMPTY_FULL) {\n      let result = [];\n      outer:\n        for (let perm = 0; ; perm++) {\n          let offset = 0;\n          let last = true;\n          let p = this;\n          let stateNumber = currentState;\n          let localBuffer = \"\";\n          localBuffer += \"[\";\n          while (!p.isEmpty && p !== stop) {\n            let index = 0;\n            if (p.size > 0) {\n              let bits = 1;\n              while (1 << bits >>> 0 < p.size) {\n                bits++;\n              }\n              let mask = (1 << bits >>> 0) - 1;\n              index = perm >> offset & mask;\n              last = last && index >= p.size - 1;\n              if (index >= p.size) {\n                continue outer;\n              }\n              offset += bits;\n            }\n            if (recognizer) {\n              if (localBuffer.length > 1) {\n                localBuffer += \" \";\n              }\n              let atn = recognizer.atn;\n              let s = atn.states[stateNumber];\n              let ruleName = recognizer.ruleNames[s.ruleIndex];\n              localBuffer += ruleName;\n            } else if (p.getReturnState(index) !== PredictionContext.EMPTY_FULL_STATE_KEY) {\n              if (!p.isEmpty) {\n                if (localBuffer.length > 1) {\n                  localBuffer += \" \";\n                }\n                localBuffer += p.getReturnState(index);\n              }\n            }\n            stateNumber = p.getReturnState(index);\n            p = p.getParent(index);\n          }\n          localBuffer += \"]\";\n          result.push(localBuffer);\n          if (last) {\n            break;\n          }\n        }\n      return result;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], PredictionContext.prototype, \"hashCode\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], PredictionContext, \"join\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], PredictionContext, \"getCachedContext\", null);\n  exports.PredictionContext = PredictionContext;\n  var EmptyPredictionContext = class extends PredictionContext {\n    constructor(fullContext) {\n      super(PredictionContext.calculateEmptyHashCode());\n      this.fullContext = fullContext;\n    }\n    get isFullContext() {\n      return this.fullContext;\n    }\n    addEmptyContext() {\n      return this;\n    }\n    removeEmptyContext() {\n      throw new Error(\"Cannot remove the empty context from itself.\");\n    }\n    getParent(index) {\n      throw new Error(\"index out of bounds\");\n    }\n    getReturnState(index) {\n      throw new Error(\"index out of bounds\");\n    }\n    findReturnState(returnState) {\n      return -1;\n    }\n    get size() {\n      return 0;\n    }\n    appendSingleContext(returnContext, contextCache) {\n      return contextCache.getChild(this, returnContext);\n    }\n    appendContext(suffix, contextCache) {\n      return suffix;\n    }\n    get isEmpty() {\n      return true;\n    }\n    get hasEmpty() {\n      return true;\n    }\n    equals(o) {\n      return this === o;\n    }\n    toStrings(recognizer, currentState, stop) {\n      return [\"[]\"];\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"addEmptyContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"removeEmptyContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"getParent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"getReturnState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"findReturnState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"appendSingleContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"appendContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"isEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"hasEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EmptyPredictionContext.prototype, \"toStrings\", null);\n  var ArrayPredictionContext = class ArrayPredictionContext2 extends PredictionContext {\n    constructor(parents, returnStates, hashCode) {\n      super(hashCode || PredictionContext.calculateHashCode(parents, returnStates));\n      assert(parents.length === returnStates.length);\n      assert(returnStates.length > 1 || returnStates[0] !== PredictionContext.EMPTY_FULL_STATE_KEY, \"Should be using PredictionContext.EMPTY instead.\");\n      this.parents = parents;\n      this.returnStates = returnStates;\n    }\n    getParent(index) {\n      return this.parents[index];\n    }\n    getReturnState(index) {\n      return this.returnStates[index];\n    }\n    findReturnState(returnState) {\n      return Arrays_1.Arrays.binarySearch(this.returnStates, returnState);\n    }\n    get size() {\n      return this.returnStates.length;\n    }\n    get isEmpty() {\n      return false;\n    }\n    get hasEmpty() {\n      return this.returnStates[this.returnStates.length - 1] === PredictionContext.EMPTY_FULL_STATE_KEY;\n    }\n    addEmptyContext() {\n      if (this.hasEmpty) {\n        return this;\n      }\n      let parents2 = this.parents.slice(0);\n      let returnStates2 = this.returnStates.slice(0);\n      parents2.push(PredictionContext.EMPTY_FULL);\n      returnStates2.push(PredictionContext.EMPTY_FULL_STATE_KEY);\n      return new ArrayPredictionContext2(parents2, returnStates2);\n    }\n    removeEmptyContext() {\n      if (!this.hasEmpty) {\n        return this;\n      }\n      if (this.returnStates.length === 2) {\n        return new SingletonPredictionContext(this.parents[0], this.returnStates[0]);\n      } else {\n        let parents2 = this.parents.slice(0, this.parents.length - 1);\n        let returnStates2 = this.returnStates.slice(0, this.returnStates.length - 1);\n        return new ArrayPredictionContext2(parents2, returnStates2);\n      }\n    }\n    appendContext(suffix, contextCache) {\n      return ArrayPredictionContext2.appendContextImpl(this, suffix, new PredictionContext.IdentityHashMap());\n    }\n    static appendContextImpl(context, suffix, visited) {\n      if (suffix.isEmpty) {\n        if (PredictionContext.isEmptyLocal(suffix)) {\n          if (context.hasEmpty) {\n            return PredictionContext.EMPTY_LOCAL;\n          }\n          throw new Error(\"what to do here?\");\n        }\n        return context;\n      }\n      if (suffix.size !== 1) {\n        throw new Error(\"Appending a tree suffix is not yet supported.\");\n      }\n      let result = visited.get(context);\n      if (!result) {\n        if (context.isEmpty) {\n          result = suffix;\n        } else {\n          let parentCount = context.size;\n          if (context.hasEmpty) {\n            parentCount--;\n          }\n          let updatedParents = new Array(parentCount);\n          let updatedReturnStates = new Array(parentCount);\n          for (let i = 0; i < parentCount; i++) {\n            updatedReturnStates[i] = context.getReturnState(i);\n          }\n          for (let i = 0; i < parentCount; i++) {\n            updatedParents[i] = ArrayPredictionContext2.appendContextImpl(context.getParent(i), suffix, visited);\n          }\n          if (updatedParents.length === 1) {\n            result = new SingletonPredictionContext(updatedParents[0], updatedReturnStates[0]);\n          } else {\n            assert(updatedParents.length > 1);\n            result = new ArrayPredictionContext2(updatedParents, updatedReturnStates);\n          }\n          if (context.hasEmpty) {\n            result = PredictionContext.join(result, suffix);\n          }\n        }\n        visited.put(context, result);\n      }\n      return result;\n    }\n    equals(o) {\n      if (this === o) {\n        return true;\n      } else if (!(o instanceof ArrayPredictionContext2)) {\n        return false;\n      }\n      if (this.hashCode() !== o.hashCode()) {\n        return false;\n      }\n      let other = o;\n      return this.equalsImpl(other, new Array2DHashSet_1.Array2DHashSet());\n    }\n    equalsImpl(other, visited) {\n      let selfWorkList = [];\n      let otherWorkList = [];\n      selfWorkList.push(this);\n      otherWorkList.push(other);\n      while (true) {\n        let currentSelf = selfWorkList.pop();\n        let currentOther = otherWorkList.pop();\n        if (!currentSelf || !currentOther) {\n          break;\n        }\n        let operands = new PredictionContextCache_1.PredictionContextCache.IdentityCommutativePredictionContextOperands(currentSelf, currentOther);\n        if (!visited.add(operands)) {\n          continue;\n        }\n        let selfSize = operands.x.size;\n        if (selfSize === 0) {\n          if (!operands.x.equals(operands.y)) {\n            return false;\n          }\n          continue;\n        }\n        let otherSize = operands.y.size;\n        if (selfSize !== otherSize) {\n          return false;\n        }\n        for (let i = 0; i < selfSize; i++) {\n          if (operands.x.getReturnState(i) !== operands.y.getReturnState(i)) {\n            return false;\n          }\n          let selfParent = operands.x.getParent(i);\n          let otherParent = operands.y.getParent(i);\n          if (selfParent.hashCode() !== otherParent.hashCode()) {\n            return false;\n          }\n          if (selfParent !== otherParent) {\n            selfWorkList.push(selfParent);\n            otherWorkList.push(otherParent);\n          }\n        }\n      }\n      return true;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ArrayPredictionContext.prototype, \"parents\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ArrayPredictionContext.prototype, \"returnStates\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"getParent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"getReturnState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"findReturnState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"isEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"hasEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"addEmptyContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"removeEmptyContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"appendContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ArrayPredictionContext.prototype, \"equals\", null);\n  ArrayPredictionContext = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ArrayPredictionContext);\n  var SingletonPredictionContext = class SingletonPredictionContext2 extends PredictionContext {\n    constructor(parent, returnState) {\n      super(PredictionContext.calculateSingleHashCode(parent, returnState));\n      this.parent = parent;\n      this.returnState = returnState;\n    }\n    getParent(index) {\n      return this.parent;\n    }\n    getReturnState(index) {\n      return this.returnState;\n    }\n    findReturnState(returnState) {\n      return this.returnState === returnState ? 0 : -1;\n    }\n    get size() {\n      return 1;\n    }\n    get isEmpty() {\n      return false;\n    }\n    get hasEmpty() {\n      return false;\n    }\n    appendContext(suffix, contextCache) {\n      return contextCache.getChild(this.parent.appendContext(suffix, contextCache), this.returnState);\n    }\n    addEmptyContext() {\n      let parents = [this.parent, PredictionContext.EMPTY_FULL];\n      let returnStates = [this.returnState, PredictionContext.EMPTY_FULL_STATE_KEY];\n      return new ArrayPredictionContext(parents, returnStates);\n    }\n    removeEmptyContext() {\n      return this;\n    }\n    equals(o) {\n      if (o === this) {\n        return true;\n      } else if (!(o instanceof SingletonPredictionContext2)) {\n        return false;\n      }\n      let other = o;\n      if (this.hashCode() !== other.hashCode()) {\n        return false;\n      }\n      return this.returnState === other.returnState && this.parent.equals(other.parent);\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], SingletonPredictionContext.prototype, \"parent\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"getParent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"getReturnState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"findReturnState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"isEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"hasEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"appendContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"addEmptyContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"removeEmptyContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SingletonPredictionContext.prototype, \"equals\", null);\n  SingletonPredictionContext = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], SingletonPredictionContext);\n  exports.SingletonPredictionContext = SingletonPredictionContext;\n  (function(PredictionContext2) {\n    PredictionContext2.EMPTY_LOCAL = new EmptyPredictionContext(false);\n    PredictionContext2.EMPTY_FULL = new EmptyPredictionContext(true);\n    PredictionContext2.EMPTY_LOCAL_STATE_KEY = -(1 << 31 >>> 0);\n    PredictionContext2.EMPTY_FULL_STATE_KEY = (1 << 31 >>> 0) - 1;\n    class IdentityHashMap extends Array2DHashMap_1.Array2DHashMap {\n      constructor() {\n        super(IdentityEqualityComparator.INSTANCE);\n      }\n    }\n    PredictionContext2.IdentityHashMap = IdentityHashMap;\n    class IdentityEqualityComparator {\n      IdentityEqualityComparator() {\n      }\n      hashCode(obj) {\n        return obj.hashCode();\n      }\n      equals(a, b) {\n        return a === b;\n      }\n    }\n    IdentityEqualityComparator.INSTANCE = new IdentityEqualityComparator();\n    __decorate([\n      Decorators_1.Override\n    ], IdentityEqualityComparator.prototype, \"hashCode\", null);\n    __decorate([\n      Decorators_1.Override\n    ], IdentityEqualityComparator.prototype, \"equals\", null);\n    PredictionContext2.IdentityEqualityComparator = IdentityEqualityComparator;\n  })(PredictionContext = exports.PredictionContext || (exports.PredictionContext = {}));\n});\n\n// node_modules/antlr4ts/atn/ATNConfig.js\nvar require_ATNConfig = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATNConfig = void 0;\n  var Array2DHashMap_1 = require_Array2DHashMap();\n  var DecisionState_1 = require_DecisionState();\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var PredictionContext_1 = require_PredictionContext();\n  var SemanticContext_1 = require_SemanticContext();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var SUPPRESS_PRECEDENCE_FILTER = 2147483648;\n  var ATNConfig = class ATNConfig2 {\n    constructor(state, altOrConfig, context) {\n      if (typeof altOrConfig === \"number\") {\n        assert((altOrConfig & 16777215) === altOrConfig);\n        this._state = state;\n        this.altAndOuterContextDepth = altOrConfig;\n        this._context = context;\n      } else {\n        this._state = state;\n        this.altAndOuterContextDepth = altOrConfig.altAndOuterContextDepth;\n        this._context = context;\n      }\n    }\n    static create(state, alt, context, semanticContext = SemanticContext_1.SemanticContext.NONE, lexerActionExecutor) {\n      if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {\n        if (lexerActionExecutor != null) {\n          return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, alt, context, false);\n        } else {\n          return new SemanticContextATNConfig(semanticContext, state, alt, context);\n        }\n      } else if (lexerActionExecutor != null) {\n        return new ActionATNConfig(lexerActionExecutor, state, alt, context, false);\n      } else {\n        return new ATNConfig2(state, alt, context);\n      }\n    }\n    get state() {\n      return this._state;\n    }\n    get alt() {\n      return this.altAndOuterContextDepth & 16777215;\n    }\n    get context() {\n      return this._context;\n    }\n    set context(context) {\n      this._context = context;\n    }\n    get reachesIntoOuterContext() {\n      return this.outerContextDepth !== 0;\n    }\n    get outerContextDepth() {\n      return this.altAndOuterContextDepth >>> 24 & 127;\n    }\n    set outerContextDepth(outerContextDepth) {\n      assert(outerContextDepth >= 0);\n      outerContextDepth = Math.min(outerContextDepth, 127);\n      this.altAndOuterContextDepth = outerContextDepth << 24 | (this.altAndOuterContextDepth & ~2130706432) >>> 0;\n    }\n    get lexerActionExecutor() {\n      return void 0;\n    }\n    get semanticContext() {\n      return SemanticContext_1.SemanticContext.NONE;\n    }\n    get hasPassedThroughNonGreedyDecision() {\n      return false;\n    }\n    clone() {\n      return this.transform(this.state, false);\n    }\n    transform(state, checkNonGreedy, arg2) {\n      if (arg2 == null) {\n        return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);\n      } else if (arg2 instanceof PredictionContext_1.PredictionContext) {\n        return this.transformImpl(state, arg2, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);\n      } else if (arg2 instanceof SemanticContext_1.SemanticContext) {\n        return this.transformImpl(state, this._context, arg2, checkNonGreedy, this.lexerActionExecutor);\n      } else {\n        return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, arg2);\n      }\n    }\n    transformImpl(state, context, semanticContext, checkNonGreedy, lexerActionExecutor) {\n      let passedThroughNonGreedy = checkNonGreedy && ATNConfig2.checkNonGreedyDecision(this, state);\n      if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {\n        if (lexerActionExecutor != null || passedThroughNonGreedy) {\n          return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, this, context, passedThroughNonGreedy);\n        } else {\n          return new SemanticContextATNConfig(semanticContext, state, this, context);\n        }\n      } else if (lexerActionExecutor != null || passedThroughNonGreedy) {\n        return new ActionATNConfig(lexerActionExecutor, state, this, context, passedThroughNonGreedy);\n      } else {\n        return new ATNConfig2(state, this, context);\n      }\n    }\n    static checkNonGreedyDecision(source, target) {\n      return source.hasPassedThroughNonGreedyDecision || target instanceof DecisionState_1.DecisionState && target.nonGreedy;\n    }\n    appendContext(context, contextCache) {\n      if (typeof context === \"number\") {\n        let appendedContext = this.context.appendSingleContext(context, contextCache);\n        let result = this.transform(this.state, false, appendedContext);\n        return result;\n      } else {\n        let appendedContext = this.context.appendContext(context, contextCache);\n        let result = this.transform(this.state, false, appendedContext);\n        return result;\n      }\n    }\n    contains(subconfig) {\n      if (this.state.stateNumber !== subconfig.state.stateNumber || this.alt !== subconfig.alt || !this.semanticContext.equals(subconfig.semanticContext)) {\n        return false;\n      }\n      let leftWorkList = [];\n      let rightWorkList = [];\n      leftWorkList.push(this.context);\n      rightWorkList.push(subconfig.context);\n      while (true) {\n        let left = leftWorkList.pop();\n        let right = rightWorkList.pop();\n        if (!left || !right) {\n          break;\n        }\n        if (left === right) {\n          return true;\n        }\n        if (left.size < right.size) {\n          return false;\n        }\n        if (right.isEmpty) {\n          return left.hasEmpty;\n        } else {\n          for (let i = 0; i < right.size; i++) {\n            let index = left.findReturnState(right.getReturnState(i));\n            if (index < 0) {\n              return false;\n            }\n            leftWorkList.push(left.getParent(index));\n            rightWorkList.push(right.getParent(i));\n          }\n        }\n      }\n      return false;\n    }\n    get isPrecedenceFilterSuppressed() {\n      return (this.altAndOuterContextDepth & SUPPRESS_PRECEDENCE_FILTER) !== 0;\n    }\n    set isPrecedenceFilterSuppressed(value) {\n      if (value) {\n        this.altAndOuterContextDepth |= SUPPRESS_PRECEDENCE_FILTER;\n      } else {\n        this.altAndOuterContextDepth &= ~SUPPRESS_PRECEDENCE_FILTER;\n      }\n    }\n    equals(o) {\n      if (this === o) {\n        return true;\n      } else if (!(o instanceof ATNConfig2)) {\n        return false;\n      }\n      return this.state.stateNumber === o.state.stateNumber && this.alt === o.alt && this.reachesIntoOuterContext === o.reachesIntoOuterContext && this.context.equals(o.context) && this.semanticContext.equals(o.semanticContext) && this.isPrecedenceFilterSuppressed === o.isPrecedenceFilterSuppressed && this.hasPassedThroughNonGreedyDecision === o.hasPassedThroughNonGreedyDecision && ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor, o.lexerActionExecutor);\n    }\n    hashCode() {\n      let hashCode = MurmurHash_1.MurmurHash.initialize(7);\n      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.state.stateNumber);\n      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.alt);\n      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.reachesIntoOuterContext ? 1 : 0);\n      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.context);\n      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.semanticContext);\n      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.hasPassedThroughNonGreedyDecision ? 1 : 0);\n      hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.lexerActionExecutor);\n      hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 7);\n      return hashCode;\n    }\n    toDotString() {\n      let builder = \"\";\n      builder += \"digraph G {\\n\";\n      builder += \"rankdir=LR;\\n\";\n      let visited = new Array2DHashMap_1.Array2DHashMap(PredictionContext_1.PredictionContext.IdentityEqualityComparator.INSTANCE);\n      let workList = [];\n      function getOrAddContext(context) {\n        let newNumber = visited.size;\n        let result = visited.putIfAbsent(context, newNumber);\n        if (result != null) {\n          return result;\n        }\n        workList.push(context);\n        return newNumber;\n      }\n      workList.push(this.context);\n      visited.put(this.context, 0);\n      while (true) {\n        let current = workList.pop();\n        if (!current) {\n          break;\n        }\n        for (let i = 0; i < current.size; i++) {\n          builder += \"  s\" + getOrAddContext(current);\n          builder += \"->\";\n          builder += \"s\" + getOrAddContext(current.getParent(i));\n          builder += '[label=\"' + current.getReturnState(i) + '\"];\\n';\n        }\n      }\n      builder += \"}\\n\";\n      return builder.toString();\n    }\n    toString(recog, showAlt, showContext) {\n      if (showContext == null) {\n        showContext = showAlt != null;\n      }\n      if (showAlt == null) {\n        showAlt = true;\n      }\n      let buf = \"\";\n      let contexts;\n      if (showContext) {\n        contexts = this.context.toStrings(recog, this.state.stateNumber);\n      } else {\n        contexts = [\"?\"];\n      }\n      let first = true;\n      for (let contextDesc of contexts) {\n        if (first) {\n          first = false;\n        } else {\n          buf += \", \";\n        }\n        buf += \"(\";\n        buf += this.state;\n        if (showAlt) {\n          buf += \",\";\n          buf += this.alt;\n        }\n        if (this.context) {\n          buf += \",\";\n          buf += contextDesc;\n        }\n        if (this.semanticContext !== SemanticContext_1.SemanticContext.NONE) {\n          buf += \",\";\n          buf += this.semanticContext;\n        }\n        if (this.reachesIntoOuterContext) {\n          buf += \",up=\" + this.outerContextDepth;\n        }\n        buf += \")\";\n      }\n      return buf.toString();\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNConfig.prototype, \"_state\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNConfig.prototype, \"_context\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNConfig.prototype, \"state\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], ATNConfig.prototype, \"context\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNConfig.prototype, \"semanticContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfig.prototype, \"clone\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ATNConfig.prototype, \"transformImpl\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfig.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfig.prototype, \"hashCode\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n  ], ATNConfig, \"create\", null);\n  ATNConfig = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ATNConfig);\n  exports.ATNConfig = ATNConfig;\n  var SemanticContextATNConfig = class SemanticContextATNConfig extends ATNConfig {\n    constructor(semanticContext, state, altOrConfig, context) {\n      if (typeof altOrConfig === \"number\") {\n        super(state, altOrConfig, context);\n      } else {\n        super(state, altOrConfig, context);\n      }\n      this._semanticContext = semanticContext;\n    }\n    get semanticContext() {\n      return this._semanticContext;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], SemanticContextATNConfig.prototype, \"_semanticContext\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], SemanticContextATNConfig.prototype, \"semanticContext\", null);\n  SemanticContextATNConfig = __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], SemanticContextATNConfig);\n  var ActionATNConfig = class ActionATNConfig extends ATNConfig {\n    constructor(lexerActionExecutor, state, altOrConfig, context, passedThroughNonGreedyDecision) {\n      if (typeof altOrConfig === \"number\") {\n        super(state, altOrConfig, context);\n      } else {\n        super(state, altOrConfig, context);\n        if (altOrConfig.semanticContext !== SemanticContext_1.SemanticContext.NONE) {\n          throw new Error(\"Not supported\");\n        }\n      }\n      this._lexerActionExecutor = lexerActionExecutor;\n      this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;\n    }\n    get lexerActionExecutor() {\n      return this._lexerActionExecutor;\n    }\n    get hasPassedThroughNonGreedyDecision() {\n      return this.passedThroughNonGreedyDecision;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ActionATNConfig.prototype, \"lexerActionExecutor\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ActionATNConfig.prototype, \"hasPassedThroughNonGreedyDecision\", null);\n  ActionATNConfig = __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ActionATNConfig);\n  var ActionSemanticContextATNConfig = class ActionSemanticContextATNConfig extends SemanticContextATNConfig {\n    constructor(lexerActionExecutor, semanticContext, state, altOrConfig, context, passedThroughNonGreedyDecision) {\n      if (typeof altOrConfig === \"number\") {\n        super(semanticContext, state, altOrConfig, context);\n      } else {\n        super(semanticContext, state, altOrConfig, context);\n      }\n      this._lexerActionExecutor = lexerActionExecutor;\n      this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;\n    }\n    get lexerActionExecutor() {\n      return this._lexerActionExecutor;\n    }\n    get hasPassedThroughNonGreedyDecision() {\n      return this.passedThroughNonGreedyDecision;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ActionSemanticContextATNConfig.prototype, \"lexerActionExecutor\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ActionSemanticContextATNConfig.prototype, \"hasPassedThroughNonGreedyDecision\", null);\n  ActionSemanticContextATNConfig = __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ActionSemanticContextATNConfig);\n});\n\n// node_modules/antlr4ts/misc/BitSet.js\nvar require_BitSet = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.BitSet = void 0;\n  var util = __webpack_require__(/*! util */ \"util\");\n  var MurmurHash_1 = require_MurmurHash();\n  var EMPTY_DATA = new Uint16Array(0);\n  function getIndex(bitNumber) {\n    return bitNumber >>> 4;\n  }\n  function unIndex(n) {\n    return n * 16;\n  }\n  function findLSBSet(word) {\n    let bit = 1;\n    for (let i = 0; i < 16; i++) {\n      if ((word & bit) !== 0) {\n        return i;\n      }\n      bit = bit << 1 >>> 0;\n    }\n    throw new RangeError(\"No specified bit found\");\n  }\n  function findMSBSet(word) {\n    let bit = 1 << 15 >>> 0;\n    for (let i = 15; i >= 0; i--) {\n      if ((word & bit) !== 0) {\n        return i;\n      }\n      bit = bit >>> 1;\n    }\n    throw new RangeError(\"No specified bit found\");\n  }\n  function bitsFor(fromBit, toBit) {\n    fromBit &= 15;\n    toBit &= 15;\n    if (fromBit === toBit) {\n      return 1 << fromBit >>> 0;\n    }\n    return 65535 >>> 15 - toBit ^ 65535 >>> 16 - fromBit;\n  }\n  var POP_CNT = new Uint8Array(65536);\n  for (let i = 0; i < 16; i++) {\n    const stride = 1 << i >>> 0;\n    let index = 0;\n    while (index < POP_CNT.length) {\n      index += stride;\n      for (let j = 0; j < stride; j++) {\n        POP_CNT[index]++;\n        index++;\n      }\n    }\n  }\n  var BitSet = class {\n    constructor(arg) {\n      if (!arg) {\n        this.data = EMPTY_DATA;\n      } else if (typeof arg === \"number\") {\n        if (arg < 0) {\n          throw new RangeError(\"nbits cannot be negative\");\n        } else {\n          this.data = new Uint16Array(getIndex(arg - 1) + 1);\n        }\n      } else {\n        if (arg instanceof BitSet) {\n          this.data = arg.data.slice(0);\n        } else {\n          let max = -1;\n          for (let v of arg) {\n            if (max < v) {\n              max = v;\n            }\n          }\n          this.data = new Uint16Array(getIndex(max - 1) + 1);\n          for (let v of arg) {\n            this.set(v);\n          }\n        }\n      }\n    }\n    and(set) {\n      const data = this.data;\n      const other = set.data;\n      const words = Math.min(data.length, other.length);\n      let lastWord = -1;\n      for (let i = 0; i < words; i++) {\n        let value = data[i] &= other[i];\n        if (value !== 0) {\n          lastWord = i;\n        }\n      }\n      if (lastWord === -1) {\n        this.data = EMPTY_DATA;\n      }\n      if (lastWord < data.length - 1) {\n        this.data = data.slice(0, lastWord + 1);\n      }\n    }\n    andNot(set) {\n      const data = this.data;\n      const other = set.data;\n      const words = Math.min(data.length, other.length);\n      let lastWord = -1;\n      for (let i = 0; i < words; i++) {\n        let value = data[i] &= other[i] ^ 65535;\n        if (value !== 0) {\n          lastWord = i;\n        }\n      }\n      if (lastWord === -1) {\n        this.data = EMPTY_DATA;\n      }\n      if (lastWord < data.length - 1) {\n        this.data = data.slice(0, lastWord + 1);\n      }\n    }\n    cardinality() {\n      if (this.isEmpty) {\n        return 0;\n      }\n      const data = this.data;\n      const length = data.length;\n      let result = 0;\n      for (let i = 0; i < length; i++) {\n        result += POP_CNT[data[i]];\n      }\n      return result;\n    }\n    clear(fromIndex, toIndex) {\n      if (fromIndex == null) {\n        this.data.fill(0);\n      } else if (toIndex == null) {\n        this.set(fromIndex, false);\n      } else {\n        this.set(fromIndex, toIndex, false);\n      }\n    }\n    flip(fromIndex, toIndex) {\n      if (toIndex == null) {\n        toIndex = fromIndex;\n      }\n      if (fromIndex < 0 || toIndex < fromIndex) {\n        throw new RangeError();\n      }\n      let word = getIndex(fromIndex);\n      const lastWord = getIndex(toIndex);\n      if (word === lastWord) {\n        this.data[word] ^= bitsFor(fromIndex, toIndex);\n      } else {\n        this.data[word++] ^= bitsFor(fromIndex, 15);\n        while (word < lastWord) {\n          this.data[word++] ^= 65535;\n        }\n        this.data[word++] ^= bitsFor(0, toIndex);\n      }\n    }\n    get(fromIndex, toIndex) {\n      if (toIndex === void 0) {\n        return !!(this.data[getIndex(fromIndex)] & bitsFor(fromIndex, fromIndex));\n      } else {\n        let result = new BitSet(toIndex + 1);\n        for (let i = fromIndex; i <= toIndex; i++) {\n          result.set(i, this.get(i));\n        }\n        return result;\n      }\n    }\n    intersects(set) {\n      let smallerLength = Math.min(this.length(), set.length());\n      if (smallerLength === 0) {\n        return false;\n      }\n      let bound = getIndex(smallerLength - 1);\n      for (let i = 0; i <= bound; i++) {\n        if ((this.data[i] & set.data[i]) !== 0) {\n          return true;\n        }\n      }\n      return false;\n    }\n    get isEmpty() {\n      return this.length() === 0;\n    }\n    length() {\n      if (!this.data.length) {\n        return 0;\n      }\n      return this.previousSetBit(unIndex(this.data.length) - 1) + 1;\n    }\n    nextClearBit(fromIndex) {\n      if (fromIndex < 0) {\n        throw new RangeError(\"fromIndex cannot be negative\");\n      }\n      const data = this.data;\n      const length = data.length;\n      let word = getIndex(fromIndex);\n      if (word > length) {\n        return -1;\n      }\n      let ignore = 65535 ^ bitsFor(fromIndex, 15);\n      if ((data[word] | ignore) === 65535) {\n        word++;\n        ignore = 0;\n        for (; word < length; word++) {\n          if (data[word] !== 65535) {\n            break;\n          }\n        }\n        if (word === length) {\n          return -1;\n        }\n      }\n      return unIndex(word) + findLSBSet((data[word] | ignore) ^ 65535);\n    }\n    nextSetBit(fromIndex) {\n      if (fromIndex < 0) {\n        throw new RangeError(\"fromIndex cannot be negative\");\n      }\n      const data = this.data;\n      const length = data.length;\n      let word = getIndex(fromIndex);\n      if (word > length) {\n        return -1;\n      }\n      let mask = bitsFor(fromIndex, 15);\n      if ((data[word] & mask) === 0) {\n        word++;\n        mask = 65535;\n        for (; word < length; word++) {\n          if (data[word] !== 0) {\n            break;\n          }\n        }\n        if (word >= length) {\n          return -1;\n        }\n      }\n      return unIndex(word) + findLSBSet(data[word] & mask);\n    }\n    or(set) {\n      const data = this.data;\n      const other = set.data;\n      const minWords = Math.min(data.length, other.length);\n      const words = Math.max(data.length, other.length);\n      const dest = data.length === words ? data : new Uint16Array(words);\n      let lastWord = -1;\n      for (let i = 0; i < minWords; i++) {\n        let value = dest[i] = data[i] | other[i];\n        if (value !== 0) {\n          lastWord = i;\n        }\n      }\n      const longer = data.length > other.length ? data : other;\n      for (let i = minWords; i < words; i++) {\n        let value = dest[i] = longer[i];\n        if (value !== 0) {\n          lastWord = i;\n        }\n      }\n      if (lastWord === -1) {\n        this.data = EMPTY_DATA;\n      } else if (dest.length === lastWord + 1) {\n        this.data = dest;\n      } else {\n        this.data = dest.slice(0, lastWord);\n      }\n    }\n    previousClearBit(fromIndex) {\n      if (fromIndex < 0) {\n        throw new RangeError(\"fromIndex cannot be negative\");\n      }\n      const data = this.data;\n      const length = data.length;\n      let word = getIndex(fromIndex);\n      if (word >= length) {\n        word = length - 1;\n      }\n      let ignore = 65535 ^ bitsFor(0, fromIndex);\n      if ((data[word] | ignore) === 65535) {\n        ignore = 0;\n        word--;\n        for (; word >= 0; word--) {\n          if (data[word] !== 65535) {\n            break;\n          }\n        }\n        if (word < 0) {\n          return -1;\n        }\n      }\n      return unIndex(word) + findMSBSet((data[word] | ignore) ^ 65535);\n    }\n    previousSetBit(fromIndex) {\n      if (fromIndex < 0) {\n        throw new RangeError(\"fromIndex cannot be negative\");\n      }\n      const data = this.data;\n      const length = data.length;\n      let word = getIndex(fromIndex);\n      if (word >= length) {\n        word = length - 1;\n      }\n      let mask = bitsFor(0, fromIndex);\n      if ((data[word] & mask) === 0) {\n        word--;\n        mask = 65535;\n        for (; word >= 0; word--) {\n          if (data[word] !== 0) {\n            break;\n          }\n        }\n        if (word < 0) {\n          return -1;\n        }\n      }\n      return unIndex(word) + findMSBSet(data[word] & mask);\n    }\n    set(fromIndex, toIndex, value) {\n      if (toIndex === void 0) {\n        toIndex = fromIndex;\n        value = true;\n      } else if (typeof toIndex === \"boolean\") {\n        value = toIndex;\n        toIndex = fromIndex;\n      }\n      if (value === void 0) {\n        value = true;\n      }\n      if (fromIndex < 0 || fromIndex > toIndex) {\n        throw new RangeError();\n      }\n      let word = getIndex(fromIndex);\n      let lastWord = getIndex(toIndex);\n      if (value && lastWord >= this.data.length) {\n        let temp = new Uint16Array(lastWord + 1);\n        this.data.forEach((value2, index) => temp[index] = value2);\n        this.data = temp;\n      } else if (!value) {\n        if (word >= this.data.length) {\n          return;\n        }\n        if (lastWord >= this.data.length) {\n          lastWord = this.data.length - 1;\n          toIndex = this.data.length * 16 - 1;\n        }\n      }\n      if (word === lastWord) {\n        this._setBits(word, value, bitsFor(fromIndex, toIndex));\n      } else {\n        this._setBits(word++, value, bitsFor(fromIndex, 15));\n        while (word < lastWord) {\n          this.data[word++] = value ? 65535 : 0;\n        }\n        this._setBits(word, value, bitsFor(0, toIndex));\n      }\n    }\n    _setBits(word, value, mask) {\n      if (value) {\n        this.data[word] |= mask;\n      } else {\n        this.data[word] &= 65535 ^ mask;\n      }\n    }\n    get size() {\n      return this.data.byteLength * 8;\n    }\n    hashCode() {\n      return MurmurHash_1.MurmurHash.hashCode(this.data, 22);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof BitSet)) {\n        return false;\n      }\n      const len = this.length();\n      if (len !== obj.length()) {\n        return false;\n      }\n      if (len === 0) {\n        return true;\n      }\n      let bound = getIndex(len - 1);\n      for (let i = 0; i <= bound; i++) {\n        if (this.data[i] !== obj.data[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    toString() {\n      let result = \"{\";\n      let first = true;\n      for (let i = this.nextSetBit(0); i >= 0; i = this.nextSetBit(i + 1)) {\n        if (first) {\n          first = false;\n        } else {\n          result += \", \";\n        }\n        result += i;\n      }\n      result += \"}\";\n      return result;\n    }\n    xor(set) {\n      const data = this.data;\n      const other = set.data;\n      const minWords = Math.min(data.length, other.length);\n      const words = Math.max(data.length, other.length);\n      const dest = data.length === words ? data : new Uint16Array(words);\n      let lastWord = -1;\n      for (let i = 0; i < minWords; i++) {\n        let value = dest[i] = data[i] ^ other[i];\n        if (value !== 0) {\n          lastWord = i;\n        }\n      }\n      const longer = data.length > other.length ? data : other;\n      for (let i = minWords; i < words; i++) {\n        let value = dest[i] = longer[i];\n        if (value !== 0) {\n          lastWord = i;\n        }\n      }\n      if (lastWord === -1) {\n        this.data = EMPTY_DATA;\n      } else if (dest.length === lastWord + 1) {\n        this.data = dest;\n      } else {\n        this.data = dest.slice(0, lastWord + 1);\n      }\n    }\n    clone() {\n      return new BitSet(this);\n    }\n    [Symbol.iterator]() {\n      return new BitSetIterator(this.data);\n    }\n    [util.inspect.custom]() {\n      return \"BitSet \" + this.toString();\n    }\n  };\n  exports.BitSet = BitSet;\n  var BitSetIterator = class {\n    constructor(data) {\n      this.data = data;\n      this.index = 0;\n      this.mask = 65535;\n    }\n    next() {\n      while (this.index < this.data.length) {\n        const bits = this.data[this.index] & this.mask;\n        if (bits !== 0) {\n          const bitNumber = unIndex(this.index) + findLSBSet(bits);\n          this.mask = bitsFor(bitNumber + 1, 15);\n          return {done: false, value: bitNumber};\n        }\n        this.index++;\n        this.mask = 65535;\n      }\n      return {done: true, value: -1};\n    }\n    [Symbol.iterator]() {\n      return this;\n    }\n  };\n});\n\n// node_modules/antlr4ts/atn/ATNConfigSet.js\nvar require_ATNConfigSet = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATNConfigSet = void 0;\n  var Array2DHashMap_1 = require_Array2DHashMap();\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();\n  var ATN_1 = require_ATN();\n  var ATNConfig_1 = require_ATNConfig();\n  var BitSet_1 = require_BitSet();\n  var Decorators_1 = require_Decorators();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var PredictionContext_1 = require_PredictionContext();\n  var PredictionContextCache_1 = require_PredictionContextCache();\n  var SemanticContext_1 = require_SemanticContext();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var Utils3 = require_Utils();\n  var KeyTypeEqualityComparer = class {\n    hashCode(key) {\n      return key.state ^ key.alt;\n    }\n    equals(a, b) {\n      return a.state === b.state && a.alt === b.alt;\n    }\n  };\n  KeyTypeEqualityComparer.INSTANCE = new KeyTypeEqualityComparer();\n  function NewKeyedConfigMap(map) {\n    if (map) {\n      return new Array2DHashMap_1.Array2DHashMap(map);\n    } else {\n      return new Array2DHashMap_1.Array2DHashMap(KeyTypeEqualityComparer.INSTANCE);\n    }\n  }\n  var ATNConfigSet = class {\n    constructor(set, readonly) {\n      this._uniqueAlt = 0;\n      this._hasSemanticContext = false;\n      this._dipsIntoOuterContext = false;\n      this.outermostConfigSet = false;\n      this.cachedHashCode = -1;\n      if (!set) {\n        this.mergedConfigs = NewKeyedConfigMap();\n        this.unmerged = [];\n        this.configs = [];\n        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;\n      } else {\n        if (readonly) {\n          this.mergedConfigs = void 0;\n          this.unmerged = void 0;\n        } else if (!set.isReadOnly) {\n          this.mergedConfigs = NewKeyedConfigMap(set.mergedConfigs);\n          this.unmerged = set.unmerged.slice(0);\n        } else {\n          this.mergedConfigs = NewKeyedConfigMap();\n          this.unmerged = [];\n        }\n        this.configs = set.configs.slice(0);\n        this._dipsIntoOuterContext = set._dipsIntoOuterContext;\n        this._hasSemanticContext = set._hasSemanticContext;\n        this.outermostConfigSet = set.outermostConfigSet;\n        if (readonly || !set.isReadOnly) {\n          this._uniqueAlt = set._uniqueAlt;\n          this._conflictInfo = set._conflictInfo;\n        }\n      }\n    }\n    getRepresentedAlternatives() {\n      if (this._conflictInfo != null) {\n        return this._conflictInfo.conflictedAlts.clone();\n      }\n      let alts = new BitSet_1.BitSet();\n      for (let config of this) {\n        alts.set(config.alt);\n      }\n      return alts;\n    }\n    get isReadOnly() {\n      return this.mergedConfigs == null;\n    }\n    get isOutermostConfigSet() {\n      return this.outermostConfigSet;\n    }\n    set isOutermostConfigSet(outermostConfigSet) {\n      if (this.outermostConfigSet && !outermostConfigSet) {\n        throw new Error(\"IllegalStateException\");\n      }\n      assert(!outermostConfigSet || !this._dipsIntoOuterContext);\n      this.outermostConfigSet = outermostConfigSet;\n    }\n    getStates() {\n      let states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n      for (let c of this.configs) {\n        states.add(c.state);\n      }\n      return states;\n    }\n    optimizeConfigs(interpreter) {\n      if (this.configs.length === 0) {\n        return;\n      }\n      for (let config of this.configs) {\n        config.context = interpreter.atn.getCachedContext(config.context);\n      }\n    }\n    clone(readonly) {\n      let copy = new ATNConfigSet(this, readonly);\n      if (!readonly && this.isReadOnly) {\n        copy.addAll(this.configs);\n      }\n      return copy;\n    }\n    get size() {\n      return this.configs.length;\n    }\n    get isEmpty() {\n      return this.configs.length === 0;\n    }\n    contains(o) {\n      if (!(o instanceof ATNConfig_1.ATNConfig)) {\n        return false;\n      }\n      if (this.mergedConfigs && this.unmerged) {\n        let config = o;\n        let configKey = this.getKey(config);\n        let mergedConfig = this.mergedConfigs.get(configKey);\n        if (mergedConfig != null && this.canMerge(config, configKey, mergedConfig)) {\n          return mergedConfig.contains(config);\n        }\n        for (let c of this.unmerged) {\n          if (c.contains(o)) {\n            return true;\n          }\n        }\n      } else {\n        for (let c of this.configs) {\n          if (c.contains(o)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    *[Symbol.iterator]() {\n      yield* this.configs;\n    }\n    toArray() {\n      return this.configs;\n    }\n    add(e, contextCache) {\n      this.ensureWritable();\n      if (!this.mergedConfigs || !this.unmerged) {\n        throw new Error(\"Covered by ensureWritable but duplicated here for strict null check limitation\");\n      }\n      assert(!this.outermostConfigSet || !e.reachesIntoOuterContext);\n      if (contextCache == null) {\n        contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;\n      }\n      let addKey;\n      let key = this.getKey(e);\n      let mergedConfig = this.mergedConfigs.get(key);\n      addKey = mergedConfig == null;\n      if (mergedConfig != null && this.canMerge(e, key, mergedConfig)) {\n        mergedConfig.outerContextDepth = Math.max(mergedConfig.outerContextDepth, e.outerContextDepth);\n        if (e.isPrecedenceFilterSuppressed) {\n          mergedConfig.isPrecedenceFilterSuppressed = true;\n        }\n        let joined = PredictionContext_1.PredictionContext.join(mergedConfig.context, e.context, contextCache);\n        this.updatePropertiesForMergedConfig(e);\n        if (mergedConfig.context === joined) {\n          return false;\n        }\n        mergedConfig.context = joined;\n        return true;\n      }\n      for (let i = 0; i < this.unmerged.length; i++) {\n        let unmergedConfig = this.unmerged[i];\n        if (this.canMerge(e, key, unmergedConfig)) {\n          unmergedConfig.outerContextDepth = Math.max(unmergedConfig.outerContextDepth, e.outerContextDepth);\n          if (e.isPrecedenceFilterSuppressed) {\n            unmergedConfig.isPrecedenceFilterSuppressed = true;\n          }\n          let joined = PredictionContext_1.PredictionContext.join(unmergedConfig.context, e.context, contextCache);\n          this.updatePropertiesForMergedConfig(e);\n          if (unmergedConfig.context === joined) {\n            return false;\n          }\n          unmergedConfig.context = joined;\n          if (addKey) {\n            this.mergedConfigs.put(key, unmergedConfig);\n            this.unmerged.splice(i, 1);\n          }\n          return true;\n        }\n      }\n      this.configs.push(e);\n      if (addKey) {\n        this.mergedConfigs.put(key, e);\n      } else {\n        this.unmerged.push(e);\n      }\n      this.updatePropertiesForAddedConfig(e);\n      return true;\n    }\n    updatePropertiesForMergedConfig(config) {\n      this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;\n      assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);\n    }\n    updatePropertiesForAddedConfig(config) {\n      if (this.configs.length === 1) {\n        this._uniqueAlt = config.alt;\n      } else if (this._uniqueAlt !== config.alt) {\n        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;\n      }\n      this._hasSemanticContext = this._hasSemanticContext || !SemanticContext_1.SemanticContext.NONE.equals(config.semanticContext);\n      this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;\n      assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);\n    }\n    canMerge(left, leftKey, right) {\n      if (left.state.stateNumber !== right.state.stateNumber) {\n        return false;\n      }\n      if (leftKey.alt !== right.alt) {\n        return false;\n      }\n      return left.semanticContext.equals(right.semanticContext);\n    }\n    getKey(e) {\n      return {state: e.state.stateNumber, alt: e.alt};\n    }\n    containsAll(c) {\n      for (let o of c) {\n        if (!(o instanceof ATNConfig_1.ATNConfig)) {\n          return false;\n        }\n        if (!this.contains(o)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    addAll(c, contextCache) {\n      this.ensureWritable();\n      let changed = false;\n      for (let group of c) {\n        if (this.add(group, contextCache)) {\n          changed = true;\n        }\n      }\n      return changed;\n    }\n    clear() {\n      this.ensureWritable();\n      if (!this.mergedConfigs || !this.unmerged) {\n        throw new Error(\"Covered by ensureWritable but duplicated here for strict null check limitation\");\n      }\n      this.mergedConfigs.clear();\n      this.unmerged.length = 0;\n      this.configs.length = 0;\n      this._dipsIntoOuterContext = false;\n      this._hasSemanticContext = false;\n      this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;\n      this._conflictInfo = void 0;\n    }\n    equals(obj) {\n      if (this === obj) {\n        return true;\n      }\n      if (!(obj instanceof ATNConfigSet)) {\n        return false;\n      }\n      return this.outermostConfigSet === obj.outermostConfigSet && Utils3.equals(this._conflictInfo, obj._conflictInfo) && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.configs, obj.configs);\n    }\n    hashCode() {\n      if (this.isReadOnly && this.cachedHashCode !== -1) {\n        return this.cachedHashCode;\n      }\n      let hashCode = 1;\n      hashCode = 5 * hashCode ^ (this.outermostConfigSet ? 1 : 0);\n      hashCode = 5 * hashCode ^ ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.hashCode(this.configs);\n      if (this.isReadOnly) {\n        this.cachedHashCode = hashCode;\n      }\n      return hashCode;\n    }\n    toString(showContext) {\n      if (showContext == null) {\n        showContext = false;\n      }\n      let buf = \"\";\n      let sortedConfigs = this.configs.slice(0);\n      sortedConfigs.sort((o1, o2) => {\n        if (o1.alt !== o2.alt) {\n          return o1.alt - o2.alt;\n        } else if (o1.state.stateNumber !== o2.state.stateNumber) {\n          return o1.state.stateNumber - o2.state.stateNumber;\n        } else {\n          return o1.semanticContext.toString().localeCompare(o2.semanticContext.toString());\n        }\n      });\n      buf += \"[\";\n      for (let i = 0; i < sortedConfigs.length; i++) {\n        if (i > 0) {\n          buf += \", \";\n        }\n        buf += sortedConfigs[i].toString(void 0, true, showContext);\n      }\n      buf += \"]\";\n      if (this._hasSemanticContext) {\n        buf += \",hasSemanticContext=\" + this._hasSemanticContext;\n      }\n      if (this._uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\n        buf += \",uniqueAlt=\" + this._uniqueAlt;\n      }\n      if (this._conflictInfo != null) {\n        buf += \",conflictingAlts=\" + this._conflictInfo.conflictedAlts;\n        if (!this._conflictInfo.isExact) {\n          buf += \"*\";\n        }\n      }\n      if (this._dipsIntoOuterContext) {\n        buf += \",dipsIntoOuterContext\";\n      }\n      return buf.toString();\n    }\n    get uniqueAlt() {\n      return this._uniqueAlt;\n    }\n    get hasSemanticContext() {\n      return this._hasSemanticContext;\n    }\n    set hasSemanticContext(value) {\n      this.ensureWritable();\n      this._hasSemanticContext = value;\n    }\n    get conflictInfo() {\n      return this._conflictInfo;\n    }\n    set conflictInfo(conflictInfo) {\n      this.ensureWritable();\n      this._conflictInfo = conflictInfo;\n    }\n    get conflictingAlts() {\n      if (this._conflictInfo == null) {\n        return void 0;\n      }\n      return this._conflictInfo.conflictedAlts;\n    }\n    get isExactConflict() {\n      if (this._conflictInfo == null) {\n        return false;\n      }\n      return this._conflictInfo.isExact;\n    }\n    get dipsIntoOuterContext() {\n      return this._dipsIntoOuterContext;\n    }\n    get(index) {\n      return this.configs[index];\n    }\n    ensureWritable() {\n      if (this.isReadOnly) {\n        throw new Error(\"This ATNConfigSet is read only.\");\n      }\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNConfigSet.prototype, \"getRepresentedAlternatives\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"isEmpty\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"contains\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, Symbol.iterator, null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"toArray\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"containsAll\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"clear\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ATNConfigSet.prototype, \"hashCode\", null);\n  exports.ATNConfigSet = ATNConfigSet;\n});\n\n// node_modules/antlr4ts/dfa/DFAState.js\nvar require_DFAState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DFAState = void 0;\n  var ATN_1 = require_ATN();\n  var BitSet_1 = require_BitSet();\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var PredictionContext_1 = require_PredictionContext();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var DFAState = class {\n    constructor(configs) {\n      this.stateNumber = -1;\n      this.configs = configs;\n      this.edges = new Map();\n      this.contextEdges = new Map();\n    }\n    get isContextSensitive() {\n      return !!this.contextSymbols;\n    }\n    isContextSymbol(symbol) {\n      if (!this.isContextSensitive) {\n        return false;\n      }\n      return this.contextSymbols.get(symbol);\n    }\n    setContextSymbol(symbol) {\n      assert(this.isContextSensitive);\n      this.contextSymbols.set(symbol);\n    }\n    setContextSensitive(atn) {\n      assert(!this.configs.isOutermostConfigSet);\n      if (this.isContextSensitive) {\n        return;\n      }\n      if (!this.contextSymbols) {\n        this.contextSymbols = new BitSet_1.BitSet();\n      }\n    }\n    get acceptStateInfo() {\n      return this._acceptStateInfo;\n    }\n    set acceptStateInfo(acceptStateInfo) {\n      this._acceptStateInfo = acceptStateInfo;\n    }\n    get isAcceptState() {\n      return !!this._acceptStateInfo;\n    }\n    get prediction() {\n      if (!this._acceptStateInfo) {\n        return ATN_1.ATN.INVALID_ALT_NUMBER;\n      }\n      return this._acceptStateInfo.prediction;\n    }\n    get lexerActionExecutor() {\n      if (!this._acceptStateInfo) {\n        return void 0;\n      }\n      return this._acceptStateInfo.lexerActionExecutor;\n    }\n    getTarget(symbol) {\n      return this.edges.get(symbol);\n    }\n    setTarget(symbol, target) {\n      this.edges.set(symbol, target);\n    }\n    getEdgeMap() {\n      return this.edges;\n    }\n    getContextTarget(invokingState) {\n      if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n        invokingState = -1;\n      }\n      return this.contextEdges.get(invokingState);\n    }\n    setContextTarget(invokingState, target) {\n      if (!this.isContextSensitive) {\n        throw new Error(\"The state is not context sensitive.\");\n      }\n      if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n        invokingState = -1;\n      }\n      this.contextEdges.set(invokingState, target);\n    }\n    getContextEdgeMap() {\n      let map = new Map(this.contextEdges);\n      let existing = map.get(-1);\n      if (existing !== void 0) {\n        if (map.size === 1) {\n          let result = new Map();\n          result.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n          return result;\n        } else {\n          map.delete(-1);\n          map.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n        }\n      }\n      return map;\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize(7);\n      hash = MurmurHash_1.MurmurHash.update(hash, this.configs.hashCode());\n      hash = MurmurHash_1.MurmurHash.finish(hash, 1);\n      return hash;\n    }\n    equals(o) {\n      if (this === o) {\n        return true;\n      }\n      if (!(o instanceof DFAState)) {\n        return false;\n      }\n      let other = o;\n      let sameSet = this.configs.equals(other.configs);\n      return sameSet;\n    }\n    toString() {\n      let buf = \"\";\n      buf += this.stateNumber + \":\" + this.configs;\n      if (this.isAcceptState) {\n        buf += \"=>\";\n        if (this.predicates) {\n          buf += this.predicates;\n        } else {\n          buf += this.prediction;\n        }\n      }\n      return buf.toString();\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], DFAState.prototype, \"configs\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], DFAState.prototype, \"edges\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], DFAState.prototype, \"contextEdges\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], DFAState.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DFAState.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DFAState.prototype, \"toString\", null);\n  exports.DFAState = DFAState;\n  (function(DFAState2) {\n    let PredPrediction = class PredPrediction {\n      constructor(pred, alt) {\n        this.alt = alt;\n        this.pred = pred;\n      }\n      toString() {\n        return \"(\" + this.pred + \", \" + this.alt + \")\";\n      }\n    };\n    __decorate([\n      Decorators_1.NotNull\n    ], PredPrediction.prototype, \"pred\", void 0);\n    __decorate([\n      Decorators_1.Override\n    ], PredPrediction.prototype, \"toString\", null);\n    PredPrediction = __decorate([\n      __param(0, Decorators_1.NotNull)\n    ], PredPrediction);\n    DFAState2.PredPrediction = PredPrediction;\n  })(DFAState = exports.DFAState || (exports.DFAState = {}));\n});\n\n// node_modules/antlr4ts/atn/ATNSimulator.js\nvar require_ATNSimulator = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATNSimulator = void 0;\n  var ATNConfigSet_1 = require_ATNConfigSet();\n  var DFAState_1 = require_DFAState();\n  var Decorators_1 = require_Decorators();\n  var PredictionContext_1 = require_PredictionContext();\n  var ATNSimulator = class ATNSimulator2 {\n    constructor(atn) {\n      this.atn = atn;\n    }\n    static get ERROR() {\n      if (!ATNSimulator2._ERROR) {\n        ATNSimulator2._ERROR = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());\n        ATNSimulator2._ERROR.stateNumber = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;\n      }\n      return ATNSimulator2._ERROR;\n    }\n    clearDFA() {\n      this.atn.clearDFA();\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNSimulator.prototype, \"atn\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNSimulator, \"ERROR\", null);\n  ATNSimulator = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ATNSimulator);\n  exports.ATNSimulator = ATNSimulator;\n  (function(ATNSimulator2) {\n    const RULE_VARIANT_DELIMITER = \"$\";\n    const RULE_LF_VARIANT_MARKER = \"$lf$\";\n    const RULE_NOLF_VARIANT_MARKER = \"$nolf$\";\n  })(ATNSimulator = exports.ATNSimulator || (exports.ATNSimulator = {}));\n  exports.ATNSimulator = ATNSimulator;\n});\n\n// node_modules/antlr4ts/ConsoleErrorListener.js\nvar require_ConsoleErrorListener = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ConsoleErrorListener = void 0;\n  var ConsoleErrorListener = class {\n    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {\n      console.error(`line ${line}:${charPositionInLine} ${msg}`);\n    }\n  };\n  exports.ConsoleErrorListener = ConsoleErrorListener;\n  ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n});\n\n// node_modules/antlr4ts/ProxyErrorListener.js\nvar require_ProxyErrorListener = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ProxyErrorListener = void 0;\n  var Decorators_1 = require_Decorators();\n  var ProxyErrorListener = class {\n    constructor(delegates) {\n      this.delegates = delegates;\n      if (!delegates) {\n        throw new Error(\"Invalid delegates\");\n      }\n    }\n    getDelegates() {\n      return this.delegates;\n    }\n    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {\n      this.delegates.forEach((listener) => {\n        if (listener.syntaxError) {\n          listener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);\n        }\n      });\n    }\n  };\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull),\n    __param(4, Decorators_1.NotNull)\n  ], ProxyErrorListener.prototype, \"syntaxError\", null);\n  exports.ProxyErrorListener = ProxyErrorListener;\n});\n\n// node_modules/antlr4ts/Recognizer.js\nvar require_Recognizer = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Recognizer = void 0;\n  var ConsoleErrorListener_1 = require_ConsoleErrorListener();\n  var ProxyErrorListener_1 = require_ProxyErrorListener();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var Utils3 = require_Utils();\n  var Recognizer = class {\n    constructor() {\n      this._listeners = [ConsoleErrorListener_1.ConsoleErrorListener.INSTANCE];\n      this._stateNumber = -1;\n    }\n    getTokenTypeMap() {\n      let vocabulary = this.vocabulary;\n      let result = Recognizer.tokenTypeMapCache.get(vocabulary);\n      if (result == null) {\n        let intermediateResult = new Map();\n        for (let i = 0; i <= this.atn.maxTokenType; i++) {\n          let literalName = vocabulary.getLiteralName(i);\n          if (literalName != null) {\n            intermediateResult.set(literalName, i);\n          }\n          let symbolicName = vocabulary.getSymbolicName(i);\n          if (symbolicName != null) {\n            intermediateResult.set(symbolicName, i);\n          }\n        }\n        intermediateResult.set(\"EOF\", Token_1.Token.EOF);\n        result = intermediateResult;\n        Recognizer.tokenTypeMapCache.set(vocabulary, result);\n      }\n      return result;\n    }\n    getRuleIndexMap() {\n      let ruleNames = this.ruleNames;\n      if (ruleNames == null) {\n        throw new Error(\"The current recognizer does not provide a list of rule names.\");\n      }\n      let result = Recognizer.ruleIndexMapCache.get(ruleNames);\n      if (result == null) {\n        result = Utils3.toMap(ruleNames);\n        Recognizer.ruleIndexMapCache.set(ruleNames, result);\n      }\n      return result;\n    }\n    getTokenType(tokenName) {\n      let ttype = this.getTokenTypeMap().get(tokenName);\n      if (ttype != null) {\n        return ttype;\n      }\n      return Token_1.Token.INVALID_TYPE;\n    }\n    get serializedATN() {\n      throw new Error(\"there is no serialized ATN\");\n    }\n    get atn() {\n      return this._interp.atn;\n    }\n    get interpreter() {\n      return this._interp;\n    }\n    set interpreter(interpreter) {\n      this._interp = interpreter;\n    }\n    get parseInfo() {\n      return Promise.resolve(void 0);\n    }\n    getErrorHeader(e) {\n      let token = e.getOffendingToken();\n      if (!token) {\n        return \"\";\n      }\n      let line = token.line;\n      let charPositionInLine = token.charPositionInLine;\n      return \"line \" + line + \":\" + charPositionInLine;\n    }\n    addErrorListener(listener) {\n      if (!listener) {\n        throw new TypeError(\"listener must not be null\");\n      }\n      this._listeners.push(listener);\n    }\n    removeErrorListener(listener) {\n      let position = this._listeners.indexOf(listener);\n      if (position !== -1) {\n        this._listeners.splice(position, 1);\n      }\n    }\n    removeErrorListeners() {\n      this._listeners.length = 0;\n    }\n    getErrorListeners() {\n      return this._listeners.slice(0);\n    }\n    getErrorListenerDispatch() {\n      return new ProxyErrorListener_1.ProxyErrorListener(this.getErrorListeners());\n    }\n    sempred(_localctx, ruleIndex, actionIndex) {\n      return true;\n    }\n    precpred(localctx, precedence) {\n      return true;\n    }\n    action(_localctx, ruleIndex, actionIndex) {\n    }\n    get state() {\n      return this._stateNumber;\n    }\n    set state(atnState) {\n      this._stateNumber = atnState;\n    }\n  };\n  Recognizer.EOF = -1;\n  Recognizer.tokenTypeMapCache = new WeakMap();\n  Recognizer.ruleIndexMapCache = new WeakMap();\n  __decorate([\n    Decorators_1.SuppressWarnings(\"serial\"),\n    Decorators_1.NotNull\n  ], Recognizer.prototype, \"_listeners\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], Recognizer.prototype, \"getTokenTypeMap\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Recognizer.prototype, \"getRuleIndexMap\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Recognizer.prototype, \"serializedATN\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Recognizer.prototype, \"atn\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], Recognizer.prototype, \"interpreter\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], Recognizer.prototype, \"getErrorHeader\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], Recognizer.prototype, \"addErrorListener\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], Recognizer.prototype, \"removeErrorListener\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Recognizer.prototype, \"getErrorListeners\", null);\n  exports.Recognizer = Recognizer;\n});\n\n// node_modules/antlr4ts/VocabularyImpl.js\nvar require_VocabularyImpl = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.VocabularyImpl = void 0;\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var VocabularyImpl3 = class {\n    constructor(literalNames, symbolicNames, displayNames) {\n      this.literalNames = literalNames;\n      this.symbolicNames = symbolicNames;\n      this.displayNames = displayNames;\n      this._maxTokenType = Math.max(this.displayNames.length, Math.max(this.literalNames.length, this.symbolicNames.length)) - 1;\n    }\n    get maxTokenType() {\n      return this._maxTokenType;\n    }\n    getLiteralName(tokenType) {\n      if (tokenType >= 0 && tokenType < this.literalNames.length) {\n        return this.literalNames[tokenType];\n      }\n      return void 0;\n    }\n    getSymbolicName(tokenType) {\n      if (tokenType >= 0 && tokenType < this.symbolicNames.length) {\n        return this.symbolicNames[tokenType];\n      }\n      if (tokenType === Token_1.Token.EOF) {\n        return \"EOF\";\n      }\n      return void 0;\n    }\n    getDisplayName(tokenType) {\n      if (tokenType >= 0 && tokenType < this.displayNames.length) {\n        let displayName = this.displayNames[tokenType];\n        if (displayName) {\n          return displayName;\n        }\n      }\n      let literalName = this.getLiteralName(tokenType);\n      if (literalName) {\n        return literalName;\n      }\n      let symbolicName = this.getSymbolicName(tokenType);\n      if (symbolicName) {\n        return symbolicName;\n      }\n      return String(tokenType);\n    }\n  };\n  VocabularyImpl3.EMPTY_VOCABULARY = new VocabularyImpl3([], [], []);\n  __decorate([\n    Decorators_1.NotNull\n  ], VocabularyImpl3.prototype, \"literalNames\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], VocabularyImpl3.prototype, \"symbolicNames\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], VocabularyImpl3.prototype, \"displayNames\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], VocabularyImpl3.prototype, \"maxTokenType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], VocabularyImpl3.prototype, \"getLiteralName\", null);\n  __decorate([\n    Decorators_1.Override\n  ], VocabularyImpl3.prototype, \"getSymbolicName\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], VocabularyImpl3.prototype, \"getDisplayName\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], VocabularyImpl3, \"EMPTY_VOCABULARY\", void 0);\n  exports.VocabularyImpl = VocabularyImpl3;\n});\n\n// node_modules/antlr4ts/dfa/DFASerializer.js\nvar require_DFASerializer = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DFASerializer = void 0;\n  var ATNSimulator_1 = require_ATNSimulator();\n  var Decorators_1 = require_Decorators();\n  var PredictionContext_1 = require_PredictionContext();\n  var Recognizer_1 = require_Recognizer();\n  var VocabularyImpl_1 = require_VocabularyImpl();\n  var DFASerializer = class {\n    constructor(dfa, vocabulary, ruleNames, atn) {\n      if (vocabulary instanceof Recognizer_1.Recognizer) {\n        ruleNames = vocabulary.ruleNames;\n        atn = vocabulary.atn;\n        vocabulary = vocabulary.vocabulary;\n      } else if (!vocabulary) {\n        vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;\n      }\n      this.dfa = dfa;\n      this.vocabulary = vocabulary;\n      this.ruleNames = ruleNames;\n      this.atn = atn;\n    }\n    toString() {\n      if (!this.dfa.s0) {\n        return \"\";\n      }\n      let buf = \"\";\n      if (this.dfa.states) {\n        let states = new Array(...this.dfa.states.toArray());\n        states.sort((o1, o2) => o1.stateNumber - o2.stateNumber);\n        for (let s of states) {\n          let edges = s.getEdgeMap();\n          let edgeKeys = [...edges.keys()].sort((a, b) => a - b);\n          let contextEdges = s.getContextEdgeMap();\n          let contextEdgeKeys = [...contextEdges.keys()].sort((a, b) => a - b);\n          for (let entry of edgeKeys) {\n            let value = edges.get(entry);\n            if ((value == null || value === ATNSimulator_1.ATNSimulator.ERROR) && !s.isContextSymbol(entry)) {\n              continue;\n            }\n            let contextSymbol = false;\n            buf += this.getStateString(s) + \"-\" + this.getEdgeLabel(entry) + \"->\";\n            if (s.isContextSymbol(entry)) {\n              buf += \"!\";\n              contextSymbol = true;\n            }\n            let t = value;\n            if (t && t.stateNumber !== ATNSimulator_1.ATNSimulator.ERROR.stateNumber) {\n              buf += this.getStateString(t) + \"\\n\";\n            } else if (contextSymbol) {\n              buf += \"ctx\\n\";\n            }\n          }\n          if (s.isContextSensitive) {\n            for (let entry of contextEdgeKeys) {\n              buf += this.getStateString(s) + \"-\" + this.getContextLabel(entry) + \"->\" + this.getStateString(contextEdges.get(entry)) + \"\\n\";\n            }\n          }\n        }\n      }\n      let output = buf;\n      if (output.length === 0) {\n        return \"\";\n      }\n      return output;\n    }\n    getContextLabel(i) {\n      if (i === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n        return \"ctx:EMPTY_FULL\";\n      } else if (i === PredictionContext_1.PredictionContext.EMPTY_LOCAL_STATE_KEY) {\n        return \"ctx:EMPTY_LOCAL\";\n      }\n      if (this.atn && i > 0 && i <= this.atn.states.length) {\n        let state = this.atn.states[i];\n        let ruleIndex = state.ruleIndex;\n        if (this.ruleNames && ruleIndex >= 0 && ruleIndex < this.ruleNames.length) {\n          return \"ctx:\" + String(i) + \"(\" + this.ruleNames[ruleIndex] + \")\";\n        }\n      }\n      return \"ctx:\" + String(i);\n    }\n    getEdgeLabel(i) {\n      return this.vocabulary.getDisplayName(i);\n    }\n    getStateString(s) {\n      if (s === ATNSimulator_1.ATNSimulator.ERROR) {\n        return \"ERROR\";\n      }\n      let n = s.stateNumber;\n      let stateStr = \"s\" + n;\n      if (s.isAcceptState) {\n        if (s.predicates) {\n          stateStr = \":s\" + n + \"=>\" + s.predicates;\n        } else {\n          stateStr = \":s\" + n + \"=>\" + s.prediction;\n        }\n      }\n      if (s.isContextSensitive) {\n        stateStr += \"*\";\n        for (let config of s.configs) {\n          if (config.reachesIntoOuterContext) {\n            stateStr += \"*\";\n            break;\n          }\n        }\n      }\n      return stateStr;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], DFASerializer.prototype, \"dfa\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], DFASerializer.prototype, \"vocabulary\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], DFASerializer.prototype, \"toString\", null);\n  exports.DFASerializer = DFASerializer;\n});\n\n// node_modules/antlr4ts/dfa/LexerDFASerializer.js\nvar require_LexerDFASerializer = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerDFASerializer = void 0;\n  var DFASerializer_1 = require_DFASerializer();\n  var Decorators_1 = require_Decorators();\n  var VocabularyImpl_1 = require_VocabularyImpl();\n  var LexerDFASerializer = class LexerDFASerializer extends DFASerializer_1.DFASerializer {\n    constructor(dfa) {\n      super(dfa, VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY);\n    }\n    getEdgeLabel(i) {\n      return \"'\" + String.fromCodePoint(i) + \"'\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], LexerDFASerializer.prototype, \"getEdgeLabel\", null);\n  LexerDFASerializer = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerDFASerializer);\n  exports.LexerDFASerializer = LexerDFASerializer;\n});\n\n// node_modules/antlr4ts/atn/StarLoopEntryState.js\nvar require_StarLoopEntryState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.StarLoopEntryState = void 0;\n  var ATNStateType_1 = require_ATNStateType();\n  var BitSet_1 = require_BitSet();\n  var DecisionState_1 = require_DecisionState();\n  var Decorators_1 = require_Decorators();\n  var StarLoopEntryState = class extends DecisionState_1.DecisionState {\n    constructor() {\n      super(...arguments);\n      this.precedenceRuleDecision = false;\n      this.precedenceLoopbackStates = new BitSet_1.BitSet();\n    }\n    get stateType() {\n      return ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], StarLoopEntryState.prototype, \"stateType\", null);\n  exports.StarLoopEntryState = StarLoopEntryState;\n});\n\n// node_modules/antlr4ts/dfa/DFA.js\nvar require_DFA = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DFA = void 0;\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var ATNConfigSet_1 = require_ATNConfigSet();\n  var DFASerializer_1 = require_DFASerializer();\n  var DFAState_1 = require_DFAState();\n  var LexerDFASerializer_1 = require_LexerDFASerializer();\n  var Decorators_1 = require_Decorators();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var StarLoopEntryState_1 = require_StarLoopEntryState();\n  var VocabularyImpl_1 = require_VocabularyImpl();\n  var DFA = class DFA {\n    constructor(atnStartState, decision = 0) {\n      this.states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n      this.nextStateNumber = 0;\n      if (!atnStartState.atn) {\n        throw new Error(\"The ATNState must be associated with an ATN\");\n      }\n      this.atnStartState = atnStartState;\n      this.atn = atnStartState.atn;\n      this.decision = decision;\n      let isPrecedenceDfa = false;\n      if (atnStartState instanceof StarLoopEntryState_1.StarLoopEntryState) {\n        if (atnStartState.precedenceRuleDecision) {\n          isPrecedenceDfa = true;\n          this.s0 = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());\n          this.s0full = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());\n        }\n      }\n      this.precedenceDfa = isPrecedenceDfa;\n    }\n    get isPrecedenceDfa() {\n      return this.precedenceDfa;\n    }\n    getPrecedenceStartState(precedence, fullContext) {\n      if (!this.isPrecedenceDfa) {\n        throw new Error(\"Only precedence DFAs may contain a precedence start state.\");\n      }\n      if (fullContext) {\n        return this.s0full.getTarget(precedence);\n      } else {\n        return this.s0.getTarget(precedence);\n      }\n    }\n    setPrecedenceStartState(precedence, fullContext, startState) {\n      if (!this.isPrecedenceDfa) {\n        throw new Error(\"Only precedence DFAs may contain a precedence start state.\");\n      }\n      if (precedence < 0) {\n        return;\n      }\n      if (fullContext) {\n        this.s0full.setTarget(precedence, startState);\n      } else {\n        this.s0.setTarget(precedence, startState);\n      }\n    }\n    get isEmpty() {\n      if (this.isPrecedenceDfa) {\n        return this.s0.getEdgeMap().size === 0 && this.s0full.getEdgeMap().size === 0;\n      }\n      return this.s0 == null && this.s0full == null;\n    }\n    get isContextSensitive() {\n      if (this.isPrecedenceDfa) {\n        return this.s0full.getEdgeMap().size > 0;\n      }\n      return this.s0full != null;\n    }\n    addState(state) {\n      state.stateNumber = this.nextStateNumber++;\n      return this.states.getOrAdd(state);\n    }\n    toString(vocabulary, ruleNames) {\n      if (!vocabulary) {\n        vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;\n      }\n      if (!this.s0) {\n        return \"\";\n      }\n      let serializer;\n      if (ruleNames) {\n        serializer = new DFASerializer_1.DFASerializer(this, vocabulary, ruleNames, this.atnStartState.atn);\n      } else {\n        serializer = new DFASerializer_1.DFASerializer(this, vocabulary);\n      }\n      return serializer.toString();\n    }\n    toLexerString() {\n      if (!this.s0) {\n        return \"\";\n      }\n      let serializer = new LexerDFASerializer_1.LexerDFASerializer(this);\n      return serializer.toString();\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], DFA.prototype, \"states\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], DFA.prototype, \"atnStartState\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], DFA.prototype, \"atn\", void 0);\n  DFA = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DFA);\n  exports.DFA = DFA;\n});\n\n// node_modules/antlr4ts/atn/BasicState.js\nvar require_BasicState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.BasicState = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var Decorators_1 = require_Decorators();\n  var BasicState = class extends ATNState_1.ATNState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.BASIC;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], BasicState.prototype, \"stateType\", null);\n  exports.BasicState = BasicState;\n});\n\n// node_modules/antlr4ts/atn/InvalidState.js\nvar require_InvalidState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.InvalidState = void 0;\n  var ATNStateType_1 = require_ATNStateType();\n  var BasicState_1 = require_BasicState();\n  var Decorators_1 = require_Decorators();\n  var InvalidState = class extends BasicState_1.BasicState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.INVALID_TYPE;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], InvalidState.prototype, \"stateType\", null);\n  exports.InvalidState = InvalidState;\n});\n\n// node_modules/antlr4ts/atn/SetTransition.js\nvar require_SetTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.SetTransition = void 0;\n  var IntervalSet_1 = require_IntervalSet();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var Transition_1 = require_Transition();\n  var SetTransition = class SetTransition extends Transition_1.Transition {\n    constructor(target, set) {\n      super(target);\n      if (set == null) {\n        set = IntervalSet_1.IntervalSet.of(Token_1.Token.INVALID_TYPE);\n      }\n      this.set = set;\n    }\n    get serializationType() {\n      return 7;\n    }\n    get label() {\n      return this.set;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return this.set.contains(symbol);\n    }\n    toString() {\n      return this.set.toString();\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], SetTransition.prototype, \"set\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], SetTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], SetTransition.prototype, \"label\", null);\n  __decorate([\n    Decorators_1.Override\n  ], SetTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], SetTransition.prototype, \"toString\", null);\n  SetTransition = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.Nullable)\n  ], SetTransition);\n  exports.SetTransition = SetTransition;\n});\n\n// node_modules/antlr4ts/atn/NotSetTransition.js\nvar require_NotSetTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.NotSetTransition = void 0;\n  var Decorators_1 = require_Decorators();\n  var SetTransition_1 = require_SetTransition();\n  var NotSetTransition = class NotSetTransition extends SetTransition_1.SetTransition {\n    constructor(target, set) {\n      super(target, set);\n    }\n    get serializationType() {\n      return 8;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n    }\n    toString() {\n      return \"~\" + super.toString();\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], NotSetTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], NotSetTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override\n  ], NotSetTransition.prototype, \"toString\", null);\n  NotSetTransition = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.Nullable)\n  ], NotSetTransition);\n  exports.NotSetTransition = NotSetTransition;\n});\n\n// node_modules/antlr4ts/atn/RuleStopState.js\nvar require_RuleStopState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleStopState = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var Decorators_1 = require_Decorators();\n  var RuleStopState = class extends ATNState_1.ATNState {\n    get nonStopStateNumber() {\n      return -1;\n    }\n    get stateType() {\n      return ATNStateType_1.ATNStateType.RULE_STOP;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], RuleStopState.prototype, \"nonStopStateNumber\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleStopState.prototype, \"stateType\", null);\n  exports.RuleStopState = RuleStopState;\n});\n\n// node_modules/antlr4ts/atn/RuleTransition.js\nvar require_RuleTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleTransition = void 0;\n  var Decorators_1 = require_Decorators();\n  var Transition_1 = require_Transition();\n  var RuleTransition = class RuleTransition extends Transition_1.Transition {\n    constructor(ruleStart, ruleIndex, precedence, followState) {\n      super(ruleStart);\n      this.tailCall = false;\n      this.optimizedTailCall = false;\n      this.ruleIndex = ruleIndex;\n      this.precedence = precedence;\n      this.followState = followState;\n    }\n    get serializationType() {\n      return 3;\n    }\n    get isEpsilon() {\n      return true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], RuleTransition.prototype, \"followState\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTransition.prototype, \"isEpsilon\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTransition.prototype, \"matches\", null);\n  RuleTransition = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n  ], RuleTransition);\n  exports.RuleTransition = RuleTransition;\n});\n\n// node_modules/antlr4ts/atn/WildcardTransition.js\nvar require_WildcardTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.WildcardTransition = void 0;\n  var Decorators_1 = require_Decorators();\n  var Transition_1 = require_Transition();\n  var WildcardTransition = class WildcardTransition extends Transition_1.Transition {\n    constructor(target) {\n      super(target);\n    }\n    get serializationType() {\n      return 9;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n    }\n    toString() {\n      return \".\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], WildcardTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], WildcardTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], WildcardTransition.prototype, \"toString\", null);\n  WildcardTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], WildcardTransition);\n  exports.WildcardTransition = WildcardTransition;\n});\n\n// node_modules/antlr4ts/atn/LL1Analyzer.js\nvar require_LL1Analyzer = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LL1Analyzer = void 0;\n  var AbstractPredicateTransition_1 = require_AbstractPredicateTransition();\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var ATNConfig_1 = require_ATNConfig();\n  var BitSet_1 = require_BitSet();\n  var IntervalSet_1 = require_IntervalSet();\n  var Decorators_1 = require_Decorators();\n  var NotSetTransition_1 = require_NotSetTransition();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var PredictionContext_1 = require_PredictionContext();\n  var RuleStopState_1 = require_RuleStopState();\n  var RuleTransition_1 = require_RuleTransition();\n  var Token_1 = require_Token();\n  var WildcardTransition_1 = require_WildcardTransition();\n  var LL1Analyzer = class LL1Analyzer2 {\n    constructor(atn) {\n      this.atn = atn;\n    }\n    getDecisionLookahead(s) {\n      if (s == null) {\n        return void 0;\n      }\n      let look = new Array(s.numberOfTransitions);\n      for (let alt = 0; alt < s.numberOfTransitions; alt++) {\n        let current = new IntervalSet_1.IntervalSet();\n        look[alt] = current;\n        let lookBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n        let seeThruPreds = false;\n        this._LOOK(s.transition(alt).target, void 0, PredictionContext_1.PredictionContext.EMPTY_LOCAL, current, lookBusy, new BitSet_1.BitSet(), seeThruPreds, false);\n        if (current.size === 0 || current.contains(LL1Analyzer2.HIT_PRED)) {\n          current = void 0;\n          look[alt] = current;\n        }\n      }\n      return look;\n    }\n    LOOK(s, ctx, stopState) {\n      if (stopState === void 0) {\n        if (s.atn == null) {\n          throw new Error(\"Illegal state\");\n        }\n        stopState = s.atn.ruleToStopState[s.ruleIndex];\n      } else if (stopState === null) {\n        stopState = void 0;\n      }\n      let r = new IntervalSet_1.IntervalSet();\n      let seeThruPreds = true;\n      let addEOF = true;\n      this._LOOK(s, stopState, ctx, r, new Array2DHashSet_1.Array2DHashSet(), new BitSet_1.BitSet(), seeThruPreds, addEOF);\n      return r;\n    }\n    _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n      let c = ATNConfig_1.ATNConfig.create(s, 0, ctx);\n      if (!lookBusy.add(c)) {\n        return;\n      }\n      if (s === stopState) {\n        if (PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {\n          look.add(Token_1.Token.EPSILON);\n          return;\n        } else if (ctx.isEmpty) {\n          if (addEOF) {\n            look.add(Token_1.Token.EOF);\n          }\n          return;\n        }\n      }\n      if (s instanceof RuleStopState_1.RuleStopState) {\n        if (ctx.isEmpty && !PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {\n          if (addEOF) {\n            look.add(Token_1.Token.EOF);\n          }\n          return;\n        }\n        let removed = calledRuleStack.get(s.ruleIndex);\n        try {\n          calledRuleStack.clear(s.ruleIndex);\n          for (let i = 0; i < ctx.size; i++) {\n            if (ctx.getReturnState(i) === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n              continue;\n            }\n            let returnState = this.atn.states[ctx.getReturnState(i)];\n            this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n          }\n        } finally {\n          if (removed) {\n            calledRuleStack.set(s.ruleIndex);\n          }\n        }\n      }\n      let n = s.numberOfTransitions;\n      for (let i = 0; i < n; i++) {\n        let t = s.transition(i);\n        if (t instanceof RuleTransition_1.RuleTransition) {\n          if (calledRuleStack.get(t.ruleIndex)) {\n            continue;\n          }\n          let newContext = ctx.getChild(t.followState.stateNumber);\n          try {\n            calledRuleStack.set(t.ruleIndex);\n            this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n          } finally {\n            calledRuleStack.clear(t.ruleIndex);\n          }\n        } else if (t instanceof AbstractPredicateTransition_1.AbstractPredicateTransition) {\n          if (seeThruPreds) {\n            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n          } else {\n            look.add(LL1Analyzer2.HIT_PRED);\n          }\n        } else if (t.isEpsilon) {\n          this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n        } else if (t instanceof WildcardTransition_1.WildcardTransition) {\n          look.addAll(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));\n        } else {\n          let set = t.label;\n          if (set != null) {\n            if (t instanceof NotSetTransition_1.NotSetTransition) {\n              set = set.complement(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));\n            }\n            look.addAll(set);\n          }\n        }\n      }\n    }\n  };\n  LL1Analyzer.HIT_PRED = Token_1.Token.INVALID_TYPE;\n  __decorate([\n    Decorators_1.NotNull\n  ], LL1Analyzer.prototype, \"atn\", void 0);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], LL1Analyzer.prototype, \"LOOK\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull),\n    __param(4, Decorators_1.NotNull),\n    __param(5, Decorators_1.NotNull)\n  ], LL1Analyzer.prototype, \"_LOOK\", null);\n  LL1Analyzer = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LL1Analyzer);\n  exports.LL1Analyzer = LL1Analyzer;\n});\n\n// node_modules/antlr4ts/atn/ATN.js\nvar require_ATN = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATN = void 0;\n  var Array2DHashMap_1 = require_Array2DHashMap();\n  var DFA_1 = require_DFA();\n  var IntervalSet_1 = require_IntervalSet();\n  var InvalidState_1 = require_InvalidState();\n  var LL1Analyzer_1 = require_LL1Analyzer();\n  var Decorators_1 = require_Decorators();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var PredictionContext_1 = require_PredictionContext();\n  var Token_1 = require_Token();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var ATN2 = class ATN {\n    constructor(grammarType, maxTokenType) {\n      this.states = [];\n      this.decisionToState = [];\n      this.modeNameToStartState = new Map();\n      this.modeToStartState = [];\n      this.contextCache = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n      this.decisionToDFA = [];\n      this.modeToDFA = [];\n      this.LL1Table = new Map();\n      this.grammarType = grammarType;\n      this.maxTokenType = maxTokenType;\n    }\n    clearDFA() {\n      this.decisionToDFA = new Array(this.decisionToState.length);\n      for (let i = 0; i < this.decisionToDFA.length; i++) {\n        this.decisionToDFA[i] = new DFA_1.DFA(this.decisionToState[i], i);\n      }\n      this.modeToDFA = new Array(this.modeToStartState.length);\n      for (let i = 0; i < this.modeToDFA.length; i++) {\n        this.modeToDFA[i] = new DFA_1.DFA(this.modeToStartState[i]);\n      }\n      this.contextCache.clear();\n      this.LL1Table.clear();\n    }\n    get contextCacheSize() {\n      return this.contextCache.size;\n    }\n    getCachedContext(context) {\n      return PredictionContext_1.PredictionContext.getCachedContext(context, this.contextCache, new PredictionContext_1.PredictionContext.IdentityHashMap());\n    }\n    getDecisionToDFA() {\n      assert(this.decisionToDFA != null && this.decisionToDFA.length === this.decisionToState.length);\n      return this.decisionToDFA;\n    }\n    nextTokens(s, ctx) {\n      if (ctx) {\n        let anal = new LL1Analyzer_1.LL1Analyzer(this);\n        let next = anal.LOOK(s, ctx);\n        return next;\n      } else {\n        if (s.nextTokenWithinRule) {\n          return s.nextTokenWithinRule;\n        }\n        s.nextTokenWithinRule = this.nextTokens(s, PredictionContext_1.PredictionContext.EMPTY_LOCAL);\n        s.nextTokenWithinRule.setReadonly(true);\n        return s.nextTokenWithinRule;\n      }\n    }\n    addState(state) {\n      state.atn = this;\n      state.stateNumber = this.states.length;\n      this.states.push(state);\n    }\n    removeState(state) {\n      let invalidState = new InvalidState_1.InvalidState();\n      invalidState.atn = this;\n      invalidState.stateNumber = state.stateNumber;\n      this.states[state.stateNumber] = invalidState;\n    }\n    defineMode(name, s) {\n      this.modeNameToStartState.set(name, s);\n      this.modeToStartState.push(s);\n      this.modeToDFA.push(new DFA_1.DFA(s));\n      this.defineDecisionState(s);\n    }\n    defineDecisionState(s) {\n      this.decisionToState.push(s);\n      s.decision = this.decisionToState.length - 1;\n      this.decisionToDFA.push(new DFA_1.DFA(s, s.decision));\n      return s.decision;\n    }\n    getDecisionState(decision) {\n      if (this.decisionToState.length > 0) {\n        return this.decisionToState[decision];\n      }\n      return void 0;\n    }\n    get numberOfDecisions() {\n      return this.decisionToState.length;\n    }\n    getExpectedTokens(stateNumber, context) {\n      if (stateNumber < 0 || stateNumber >= this.states.length) {\n        throw new RangeError(\"Invalid state number.\");\n      }\n      let ctx = context;\n      let s = this.states[stateNumber];\n      let following = this.nextTokens(s);\n      if (!following.contains(Token_1.Token.EPSILON)) {\n        return following;\n      }\n      let expected = new IntervalSet_1.IntervalSet();\n      expected.addAll(following);\n      expected.remove(Token_1.Token.EPSILON);\n      while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {\n        let invokingState = this.states[ctx.invokingState];\n        let rt = invokingState.transition(0);\n        following = this.nextTokens(rt.followState);\n        expected.addAll(following);\n        expected.remove(Token_1.Token.EPSILON);\n        ctx = ctx._parent;\n      }\n      if (following.contains(Token_1.Token.EPSILON)) {\n        expected.add(Token_1.Token.EOF);\n      }\n      return expected;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"states\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"decisionToState\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"modeNameToStartState\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"modeToStartState\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"decisionToDFA\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"modeToDFA\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"nextTokens\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ATN2.prototype, \"removeState\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ATN2.prototype, \"defineMode\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ATN2.prototype, \"defineDecisionState\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ATN2.prototype, \"getExpectedTokens\", null);\n  ATN2 = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ATN2);\n  exports.ATN = ATN2;\n  (function(ATN3) {\n    ATN3.INVALID_ALT_NUMBER = 0;\n  })(ATN2 = exports.ATN || (exports.ATN = {}));\n  exports.ATN = ATN2;\n});\n\n// node_modules/antlr4ts/atn/LexerIndexedCustomAction.js\nvar require_LexerIndexedCustomAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerIndexedCustomAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerIndexedCustomAction = class LexerIndexedCustomAction2 {\n    constructor(offset, action) {\n      this._offset = offset;\n      this._action = action;\n    }\n    get offset() {\n      return this._offset;\n    }\n    get action() {\n      return this._action;\n    }\n    get actionType() {\n      return this._action.actionType;\n    }\n    get isPositionDependent() {\n      return true;\n    }\n    execute(lexer) {\n      this._action.execute(lexer);\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this._offset);\n      hash = MurmurHash_1.MurmurHash.update(hash, this._action);\n      return MurmurHash_1.MurmurHash.finish(hash, 2);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof LexerIndexedCustomAction2)) {\n        return false;\n      }\n      return this._offset === obj._offset && this._action.equals(obj._action);\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], LexerIndexedCustomAction.prototype, \"action\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerIndexedCustomAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerIndexedCustomAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerIndexedCustomAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerIndexedCustomAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerIndexedCustomAction.prototype, \"equals\", null);\n  LexerIndexedCustomAction = __decorate([\n    __param(1, Decorators_1.NotNull)\n  ], LexerIndexedCustomAction);\n  exports.LexerIndexedCustomAction = LexerIndexedCustomAction;\n});\n\n// node_modules/antlr4ts/atn/LexerActionExecutor.js\nvar require_LexerActionExecutor = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerActionExecutor = void 0;\n  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();\n  var LexerIndexedCustomAction_1 = require_LexerIndexedCustomAction();\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerActionExecutor = class LexerActionExecutor2 {\n    constructor(lexerActions) {\n      this._lexerActions = lexerActions;\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      for (let lexerAction of lexerActions) {\n        hash = MurmurHash_1.MurmurHash.update(hash, lexerAction);\n      }\n      this.cachedHashCode = MurmurHash_1.MurmurHash.finish(hash, lexerActions.length);\n    }\n    static append(lexerActionExecutor, lexerAction) {\n      if (!lexerActionExecutor) {\n        return new LexerActionExecutor2([lexerAction]);\n      }\n      let lexerActions = lexerActionExecutor._lexerActions.slice(0);\n      lexerActions.push(lexerAction);\n      return new LexerActionExecutor2(lexerActions);\n    }\n    fixOffsetBeforeMatch(offset) {\n      let updatedLexerActions;\n      for (let i = 0; i < this._lexerActions.length; i++) {\n        if (this._lexerActions[i].isPositionDependent && !(this._lexerActions[i] instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction)) {\n          if (!updatedLexerActions) {\n            updatedLexerActions = this._lexerActions.slice(0);\n          }\n          updatedLexerActions[i] = new LexerIndexedCustomAction_1.LexerIndexedCustomAction(offset, this._lexerActions[i]);\n        }\n      }\n      if (!updatedLexerActions) {\n        return this;\n      }\n      return new LexerActionExecutor2(updatedLexerActions);\n    }\n    get lexerActions() {\n      return this._lexerActions;\n    }\n    execute(lexer, input, startIndex) {\n      let requiresSeek = false;\n      let stopIndex = input.index;\n      try {\n        for (let lexerAction of this._lexerActions) {\n          if (lexerAction instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction) {\n            let offset = lexerAction.offset;\n            input.seek(startIndex + offset);\n            lexerAction = lexerAction.action;\n            requiresSeek = startIndex + offset !== stopIndex;\n          } else if (lexerAction.isPositionDependent) {\n            input.seek(stopIndex);\n            requiresSeek = false;\n          }\n          lexerAction.execute(lexer);\n        }\n      } finally {\n        if (requiresSeek) {\n          input.seek(stopIndex);\n        }\n      }\n    }\n    hashCode() {\n      return this.cachedHashCode;\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof LexerActionExecutor2)) {\n        return false;\n      }\n      return this.cachedHashCode === obj.cachedHashCode && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions, obj._lexerActions);\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], LexerActionExecutor.prototype, \"_lexerActions\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], LexerActionExecutor.prototype, \"lexerActions\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerActionExecutor.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerActionExecutor.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerActionExecutor.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(1, Decorators_1.NotNull)\n  ], LexerActionExecutor, \"append\", null);\n  LexerActionExecutor = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerActionExecutor);\n  exports.LexerActionExecutor = LexerActionExecutor;\n});\n\n// node_modules/antlr4ts/LexerNoViableAltException.js\nvar require_LexerNoViableAltException = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerNoViableAltException = void 0;\n  var RecognitionException_1 = require_RecognitionException();\n  var Decorators_1 = require_Decorators();\n  var Interval_1 = require_Interval();\n  var Utils3 = require_Utils();\n  var LexerNoViableAltException = class LexerNoViableAltException extends RecognitionException_1.RecognitionException {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n      super(lexer, input);\n      this._startIndex = startIndex;\n      this._deadEndConfigs = deadEndConfigs;\n    }\n    get startIndex() {\n      return this._startIndex;\n    }\n    get deadEndConfigs() {\n      return this._deadEndConfigs;\n    }\n    get inputStream() {\n      return super.inputStream;\n    }\n    toString() {\n      let symbol = \"\";\n      if (this._startIndex >= 0 && this._startIndex < this.inputStream.size) {\n        symbol = this.inputStream.getText(Interval_1.Interval.of(this._startIndex, this._startIndex));\n        symbol = Utils3.escapeWhitespace(symbol, false);\n      }\n      return `LexerNoViableAltException('${symbol}')`;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerNoViableAltException.prototype, \"inputStream\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerNoViableAltException.prototype, \"toString\", null);\n  LexerNoViableAltException = __decorate([\n    __param(1, Decorators_1.NotNull)\n  ], LexerNoViableAltException);\n  exports.LexerNoViableAltException = LexerNoViableAltException;\n});\n\n// node_modules/antlr4ts/atn/OrderedATNConfigSet.js\nvar require_OrderedATNConfigSet = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.OrderedATNConfigSet = void 0;\n  var ATNConfigSet_1 = require_ATNConfigSet();\n  var Decorators_1 = require_Decorators();\n  var OrderedATNConfigSet = class extends ATNConfigSet_1.ATNConfigSet {\n    constructor(set, readonly) {\n      if (set != null && readonly != null) {\n        super(set, readonly);\n      } else {\n        super();\n      }\n    }\n    clone(readonly) {\n      let copy = new OrderedATNConfigSet(this, readonly);\n      if (!readonly && this.isReadOnly) {\n        copy.addAll(this);\n      }\n      return copy;\n    }\n    getKey(e) {\n      return {state: 0, alt: e.hashCode()};\n    }\n    canMerge(left, leftKey, right) {\n      return left.equals(right);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], OrderedATNConfigSet.prototype, \"clone\", null);\n  __decorate([\n    Decorators_1.Override\n  ], OrderedATNConfigSet.prototype, \"getKey\", null);\n  __decorate([\n    Decorators_1.Override\n  ], OrderedATNConfigSet.prototype, \"canMerge\", null);\n  exports.OrderedATNConfigSet = OrderedATNConfigSet;\n});\n\n// node_modules/antlr4ts/atn/LexerATNSimulator.js\nvar require_LexerATNSimulator = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerATNSimulator = void 0;\n  var AcceptStateInfo_1 = require_AcceptStateInfo();\n  var ATN_1 = require_ATN();\n  var ATNConfig_1 = require_ATNConfig();\n  var ATNConfigSet_1 = require_ATNConfigSet();\n  var ATNSimulator_1 = require_ATNSimulator();\n  var DFAState_1 = require_DFAState();\n  var Interval_1 = require_Interval();\n  var IntStream_1 = require_IntStream();\n  var Lexer_1 = require_Lexer();\n  var LexerActionExecutor_1 = require_LexerActionExecutor();\n  var LexerNoViableAltException_1 = require_LexerNoViableAltException();\n  var Decorators_1 = require_Decorators();\n  var OrderedATNConfigSet_1 = require_OrderedATNConfigSet();\n  var PredictionContext_1 = require_PredictionContext();\n  var RuleStopState_1 = require_RuleStopState();\n  var Token_1 = require_Token();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var LexerATNSimulator2 = class LexerATNSimulator3 extends ATNSimulator_1.ATNSimulator {\n    constructor(atn, recog) {\n      super(atn);\n      this.optimize_tail_calls = true;\n      this.startIndex = -1;\n      this._line = 1;\n      this._charPositionInLine = 0;\n      this.mode = Lexer_1.Lexer.DEFAULT_MODE;\n      this.prevAccept = new LexerATNSimulator3.SimState();\n      this.recog = recog;\n    }\n    copyState(simulator) {\n      this._charPositionInLine = simulator.charPositionInLine;\n      this._line = simulator._line;\n      this.mode = simulator.mode;\n      this.startIndex = simulator.startIndex;\n    }\n    match(input, mode) {\n      this.mode = mode;\n      let mark = input.mark();\n      try {\n        this.startIndex = input.index;\n        this.prevAccept.reset();\n        let s0 = this.atn.modeToDFA[mode].s0;\n        if (s0 == null) {\n          return this.matchATN(input);\n        } else {\n          return this.execATN(input, s0);\n        }\n      } finally {\n        input.release(mark);\n      }\n    }\n    reset() {\n      this.prevAccept.reset();\n      this.startIndex = -1;\n      this._line = 1;\n      this._charPositionInLine = 0;\n      this.mode = Lexer_1.Lexer.DEFAULT_MODE;\n    }\n    matchATN(input) {\n      let startState = this.atn.modeToStartState[this.mode];\n      if (LexerATNSimulator3.debug) {\n        console.log(`matchATN mode ${this.mode} start: ${startState}`);\n      }\n      let old_mode = this.mode;\n      let s0_closure = this.computeStartState(input, startState);\n      let suppressEdge = s0_closure.hasSemanticContext;\n      if (suppressEdge) {\n        s0_closure.hasSemanticContext = false;\n      }\n      let next = this.addDFAState(s0_closure);\n      if (!suppressEdge) {\n        let dfa = this.atn.modeToDFA[this.mode];\n        if (!dfa.s0) {\n          dfa.s0 = next;\n        } else {\n          next = dfa.s0;\n        }\n      }\n      let predict = this.execATN(input, next);\n      if (LexerATNSimulator3.debug) {\n        console.log(`DFA after matchATN: ${this.atn.modeToDFA[old_mode].toLexerString()}`);\n      }\n      return predict;\n    }\n    execATN(input, ds0) {\n      if (LexerATNSimulator3.debug) {\n        console.log(`start state closure=${ds0.configs}`);\n      }\n      if (ds0.isAcceptState) {\n        this.captureSimState(this.prevAccept, input, ds0);\n      }\n      let t = input.LA(1);\n      let s = ds0;\n      while (true) {\n        if (LexerATNSimulator3.debug) {\n          console.log(`execATN loop starting closure: ${s.configs}`);\n        }\n        let target = this.getExistingTargetState(s, t);\n        if (target == null) {\n          target = this.computeTargetState(input, s, t);\n        }\n        if (target === ATNSimulator_1.ATNSimulator.ERROR) {\n          break;\n        }\n        if (t !== IntStream_1.IntStream.EOF) {\n          this.consume(input);\n        }\n        if (target.isAcceptState) {\n          this.captureSimState(this.prevAccept, input, target);\n          if (t === IntStream_1.IntStream.EOF) {\n            break;\n          }\n        }\n        t = input.LA(1);\n        s = target;\n      }\n      return this.failOrAccept(this.prevAccept, input, s.configs, t);\n    }\n    getExistingTargetState(s, t) {\n      let target = s.getTarget(t);\n      if (LexerATNSimulator3.debug && target != null) {\n        console.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n      }\n      return target;\n    }\n    computeTargetState(input, s, t) {\n      let reach = new OrderedATNConfigSet_1.OrderedATNConfigSet();\n      this.getReachableConfigSet(input, s.configs, reach, t);\n      if (reach.isEmpty) {\n        if (!reach.hasSemanticContext) {\n          this.addDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);\n        }\n        return ATNSimulator_1.ATNSimulator.ERROR;\n      }\n      return this.addDFAEdge(s, t, reach);\n    }\n    failOrAccept(prevAccept, input, reach, t) {\n      if (prevAccept.dfaState != null) {\n        let lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n        this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.charPos);\n        return prevAccept.dfaState.prediction;\n      } else {\n        if (t === IntStream_1.IntStream.EOF && input.index === this.startIndex) {\n          return Token_1.Token.EOF;\n        }\n        throw new LexerNoViableAltException_1.LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n      }\n    }\n    getReachableConfigSet(input, closure, reach, t) {\n      let skipAlt = ATN_1.ATN.INVALID_ALT_NUMBER;\n      for (let c of closure) {\n        let currentAltReachedAcceptState = c.alt === skipAlt;\n        if (currentAltReachedAcceptState && c.hasPassedThroughNonGreedyDecision) {\n          continue;\n        }\n        if (LexerATNSimulator3.debug) {\n          console.log(`testing ${this.getTokenName(t)} at ${c.toString(this.recog, true)}`);\n        }\n        let n = c.state.numberOfOptimizedTransitions;\n        for (let ti = 0; ti < n; ti++) {\n          let trans = c.state.getOptimizedTransition(ti);\n          let target = this.getReachableTarget(trans, t);\n          if (target != null) {\n            let lexerActionExecutor = c.lexerActionExecutor;\n            let config;\n            if (lexerActionExecutor != null) {\n              lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n              config = c.transform(target, true, lexerActionExecutor);\n            } else {\n              assert(c.lexerActionExecutor == null);\n              config = c.transform(target, true);\n            }\n            let treatEofAsEpsilon = t === IntStream_1.IntStream.EOF;\n            if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n              skipAlt = c.alt;\n              break;\n            }\n          }\n        }\n      }\n    }\n    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {\n      if (LexerATNSimulator3.debug) {\n        console.log(`ACTION ${lexerActionExecutor}`);\n      }\n      input.seek(index);\n      this._line = line;\n      this._charPositionInLine = charPos;\n      if (lexerActionExecutor != null && this.recog != null) {\n        lexerActionExecutor.execute(this.recog, input, startIndex);\n      }\n    }\n    getReachableTarget(trans, t) {\n      if (trans.matches(t, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {\n        return trans.target;\n      }\n      return void 0;\n    }\n    computeStartState(input, p) {\n      let initialContext = PredictionContext_1.PredictionContext.EMPTY_FULL;\n      let configs = new OrderedATNConfigSet_1.OrderedATNConfigSet();\n      for (let i = 0; i < p.numberOfTransitions; i++) {\n        let target = p.transition(i).target;\n        let c = ATNConfig_1.ATNConfig.create(target, i + 1, initialContext);\n        this.closure(input, c, configs, false, false, false);\n      }\n      return configs;\n    }\n    closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n      if (LexerATNSimulator3.debug) {\n        console.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n      }\n      if (config.state instanceof RuleStopState_1.RuleStopState) {\n        if (LexerATNSimulator3.debug) {\n          if (this.recog != null) {\n            console.log(`closure at ${this.recog.ruleNames[config.state.ruleIndex]} rule stop ${config}`);\n          } else {\n            console.log(`closure at rule stop ${config}`);\n          }\n        }\n        let context = config.context;\n        if (context.isEmpty) {\n          configs.add(config);\n          return true;\n        } else if (context.hasEmpty) {\n          configs.add(config.transform(config.state, true, PredictionContext_1.PredictionContext.EMPTY_FULL));\n          currentAltReachedAcceptState = true;\n        }\n        for (let i = 0; i < context.size; i++) {\n          let returnStateNumber = context.getReturnState(i);\n          if (returnStateNumber === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n            continue;\n          }\n          let newContext = context.getParent(i);\n          let returnState = this.atn.states[returnStateNumber];\n          let c = config.transform(returnState, false, newContext);\n          currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n        }\n        return currentAltReachedAcceptState;\n      }\n      if (!config.state.onlyHasEpsilonTransitions) {\n        if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision) {\n          configs.add(config);\n        }\n      }\n      let p = config.state;\n      for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {\n        let t = p.getOptimizedTransition(i);\n        let c = this.getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon);\n        if (c != null) {\n          currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n        }\n      }\n      return currentAltReachedAcceptState;\n    }\n    getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon) {\n      let c;\n      switch (t.serializationType) {\n        case 3:\n          let ruleTransition = t;\n          if (this.optimize_tail_calls && ruleTransition.optimizedTailCall && !config.context.hasEmpty) {\n            c = config.transform(t.target, true);\n          } else {\n            let newContext = config.context.getChild(ruleTransition.followState.stateNumber);\n            c = config.transform(t.target, true, newContext);\n          }\n          break;\n        case 10:\n          throw new Error(\"Precedence predicates are not supported in lexers.\");\n        case 4:\n          let pt = t;\n          if (LexerATNSimulator3.debug) {\n            console.log(\"EVAL rule \" + pt.ruleIndex + \":\" + pt.predIndex);\n          }\n          configs.hasSemanticContext = true;\n          if (this.evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative)) {\n            c = config.transform(t.target, true);\n          } else {\n            c = void 0;\n          }\n          break;\n        case 6:\n          if (config.context.hasEmpty) {\n            let lexerActionExecutor = LexerActionExecutor_1.LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[t.actionIndex]);\n            c = config.transform(t.target, true, lexerActionExecutor);\n            break;\n          } else {\n            c = config.transform(t.target, true);\n            break;\n          }\n        case 1:\n          c = config.transform(t.target, true);\n          break;\n        case 5:\n        case 2:\n        case 7:\n          if (treatEofAsEpsilon) {\n            if (t.matches(IntStream_1.IntStream.EOF, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {\n              c = config.transform(t.target, false);\n              break;\n            }\n          }\n          c = void 0;\n          break;\n        default:\n          c = void 0;\n          break;\n      }\n      return c;\n    }\n    evaluatePredicate(input, ruleIndex, predIndex, speculative) {\n      if (this.recog == null) {\n        return true;\n      }\n      if (!speculative) {\n        return this.recog.sempred(void 0, ruleIndex, predIndex);\n      }\n      let savedCharPositionInLine = this._charPositionInLine;\n      let savedLine = this._line;\n      let index = input.index;\n      let marker = input.mark();\n      try {\n        this.consume(input);\n        return this.recog.sempred(void 0, ruleIndex, predIndex);\n      } finally {\n        this._charPositionInLine = savedCharPositionInLine;\n        this._line = savedLine;\n        input.seek(index);\n        input.release(marker);\n      }\n    }\n    captureSimState(settings, input, dfaState) {\n      settings.index = input.index;\n      settings.line = this._line;\n      settings.charPos = this._charPositionInLine;\n      settings.dfaState = dfaState;\n    }\n    addDFAEdge(p, t, q) {\n      if (q instanceof ATNConfigSet_1.ATNConfigSet) {\n        let suppressEdge = q.hasSemanticContext;\n        if (suppressEdge) {\n          q.hasSemanticContext = false;\n        }\n        let to = this.addDFAState(q);\n        if (suppressEdge) {\n          return to;\n        }\n        this.addDFAEdge(p, t, to);\n        return to;\n      } else {\n        if (LexerATNSimulator3.debug) {\n          console.log(\"EDGE \" + p + \" -> \" + q + \" upon \" + String.fromCharCode(t));\n        }\n        if (p != null) {\n          p.setTarget(t, q);\n        }\n      }\n    }\n    addDFAState(configs) {\n      assert(!configs.hasSemanticContext);\n      let proposed = new DFAState_1.DFAState(configs);\n      let existing = this.atn.modeToDFA[this.mode].states.get(proposed);\n      if (existing != null) {\n        return existing;\n      }\n      configs.optimizeConfigs(this);\n      let newState = new DFAState_1.DFAState(configs.clone(true));\n      let firstConfigWithRuleStopState;\n      for (let c of configs) {\n        if (c.state instanceof RuleStopState_1.RuleStopState) {\n          firstConfigWithRuleStopState = c;\n          break;\n        }\n      }\n      if (firstConfigWithRuleStopState != null) {\n        let prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n        let lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n        newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(prediction, lexerActionExecutor);\n      }\n      return this.atn.modeToDFA[this.mode].addState(newState);\n    }\n    getDFA(mode) {\n      return this.atn.modeToDFA[mode];\n    }\n    getText(input) {\n      return input.getText(Interval_1.Interval.of(this.startIndex, input.index - 1));\n    }\n    get line() {\n      return this._line;\n    }\n    set line(line) {\n      this._line = line;\n    }\n    get charPositionInLine() {\n      return this._charPositionInLine;\n    }\n    set charPositionInLine(charPositionInLine) {\n      this._charPositionInLine = charPositionInLine;\n    }\n    consume(input) {\n      let curChar = input.LA(1);\n      if (curChar === \"\\n\".charCodeAt(0)) {\n        this._line++;\n        this._charPositionInLine = 0;\n      } else {\n        this._charPositionInLine++;\n      }\n      input.consume();\n    }\n    getTokenName(t) {\n      if (t === -1) {\n        return \"EOF\";\n      }\n      return \"'\" + String.fromCharCode(t) + \"'\";\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], LexerATNSimulator2.prototype, \"prevAccept\", void 0);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"copyState\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"match\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerATNSimulator2.prototype, \"reset\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"matchATN\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"execATN\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"getExistingTargetState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"computeTargetState\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"getReachableConfigSet\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"accept\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"computeStartState\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"closure\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"getEpsilonTarget\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"evaluatePredicate\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"captureSimState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"addDFAState\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], LexerATNSimulator2.prototype, \"getDFA\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"getText\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2.prototype, \"consume\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], LexerATNSimulator2.prototype, \"getTokenName\", null);\n  LexerATNSimulator2 = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], LexerATNSimulator2);\n  exports.LexerATNSimulator = LexerATNSimulator2;\n  (function(LexerATNSimulator3) {\n    LexerATNSimulator3.debug = false;\n    LexerATNSimulator3.dfa_debug = false;\n    class SimState {\n      constructor() {\n        this.index = -1;\n        this.line = 0;\n        this.charPos = -1;\n      }\n      reset() {\n        this.index = -1;\n        this.line = 0;\n        this.charPos = -1;\n        this.dfaState = void 0;\n      }\n    }\n    LexerATNSimulator3.SimState = SimState;\n  })(LexerATNSimulator2 = exports.LexerATNSimulator || (exports.LexerATNSimulator = {}));\n  exports.LexerATNSimulator = LexerATNSimulator2;\n});\n\n// node_modules/antlr4ts/Lexer.js\nvar require_Lexer = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Lexer = void 0;\n  var CommonTokenFactory_1 = require_CommonTokenFactory();\n  var IntegerStack_1 = require_IntegerStack();\n  var Interval_1 = require_Interval();\n  var IntStream_1 = require_IntStream();\n  var LexerATNSimulator_1 = require_LexerATNSimulator();\n  var LexerNoViableAltException_1 = require_LexerNoViableAltException();\n  var Decorators_1 = require_Decorators();\n  var Recognizer_1 = require_Recognizer();\n  var Token_1 = require_Token();\n  var Lexer2 = class extends Recognizer_1.Recognizer {\n    constructor(input) {\n      super();\n      this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;\n      this._tokenStartCharIndex = -1;\n      this._tokenStartLine = 0;\n      this._tokenStartCharPositionInLine = 0;\n      this._hitEOF = false;\n      this._channel = 0;\n      this._type = 0;\n      this._modeStack = new IntegerStack_1.IntegerStack();\n      this._mode = Lexer2.DEFAULT_MODE;\n      this._input = input;\n      this._tokenFactorySourcePair = {source: this, stream: input};\n    }\n    static get DEFAULT_TOKEN_CHANNEL() {\n      return Token_1.Token.DEFAULT_CHANNEL;\n    }\n    static get HIDDEN() {\n      return Token_1.Token.HIDDEN_CHANNEL;\n    }\n    reset(resetInput) {\n      if (resetInput === void 0 || resetInput) {\n        this._input.seek(0);\n      }\n      this._token = void 0;\n      this._type = Token_1.Token.INVALID_TYPE;\n      this._channel = Token_1.Token.DEFAULT_CHANNEL;\n      this._tokenStartCharIndex = -1;\n      this._tokenStartCharPositionInLine = -1;\n      this._tokenStartLine = -1;\n      this._text = void 0;\n      this._hitEOF = false;\n      this._mode = Lexer2.DEFAULT_MODE;\n      this._modeStack.clear();\n      this.interpreter.reset();\n    }\n    nextToken() {\n      if (this._input == null) {\n        throw new Error(\"nextToken requires a non-null input stream.\");\n      }\n      let tokenStartMarker = this._input.mark();\n      try {\n        outer:\n          while (true) {\n            if (this._hitEOF) {\n              return this.emitEOF();\n            }\n            this._token = void 0;\n            this._channel = Token_1.Token.DEFAULT_CHANNEL;\n            this._tokenStartCharIndex = this._input.index;\n            this._tokenStartCharPositionInLine = this.interpreter.charPositionInLine;\n            this._tokenStartLine = this.interpreter.line;\n            this._text = void 0;\n            do {\n              this._type = Token_1.Token.INVALID_TYPE;\n              let ttype;\n              try {\n                ttype = this.interpreter.match(this._input, this._mode);\n              } catch (e) {\n                if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {\n                  this.notifyListeners(e);\n                  this.recover(e);\n                  ttype = Lexer2.SKIP;\n                } else {\n                  throw e;\n                }\n              }\n              if (this._input.LA(1) === IntStream_1.IntStream.EOF) {\n                this._hitEOF = true;\n              }\n              if (this._type === Token_1.Token.INVALID_TYPE) {\n                this._type = ttype;\n              }\n              if (this._type === Lexer2.SKIP) {\n                continue outer;\n              }\n            } while (this._type === Lexer2.MORE);\n            if (this._token == null) {\n              return this.emit();\n            }\n            return this._token;\n          }\n      } finally {\n        this._input.release(tokenStartMarker);\n      }\n    }\n    skip() {\n      this._type = Lexer2.SKIP;\n    }\n    more() {\n      this._type = Lexer2.MORE;\n    }\n    mode(m) {\n      this._mode = m;\n    }\n    pushMode(m) {\n      if (LexerATNSimulator_1.LexerATNSimulator.debug) {\n        console.log(\"pushMode \" + m);\n      }\n      this._modeStack.push(this._mode);\n      this.mode(m);\n    }\n    popMode() {\n      if (this._modeStack.isEmpty) {\n        throw new Error(\"EmptyStackException\");\n      }\n      if (LexerATNSimulator_1.LexerATNSimulator.debug) {\n        console.log(\"popMode back to \" + this._modeStack.peek());\n      }\n      this.mode(this._modeStack.pop());\n      return this._mode;\n    }\n    get tokenFactory() {\n      return this._factory;\n    }\n    set tokenFactory(factory) {\n      this._factory = factory;\n    }\n    get inputStream() {\n      return this._input;\n    }\n    set inputStream(input) {\n      this.reset(false);\n      this._input = input;\n      this._tokenFactorySourcePair = {source: this, stream: this._input};\n    }\n    get sourceName() {\n      return this._input.sourceName;\n    }\n    emit(token) {\n      if (!token) {\n        token = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.charIndex - 1, this._tokenStartLine, this._tokenStartCharPositionInLine);\n      }\n      this._token = token;\n      return token;\n    }\n    emitEOF() {\n      let cpos = this.charPositionInLine;\n      let line = this.line;\n      let eof = this._factory.create(this._tokenFactorySourcePair, Token_1.Token.EOF, void 0, Token_1.Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, line, cpos);\n      this.emit(eof);\n      return eof;\n    }\n    get line() {\n      return this.interpreter.line;\n    }\n    set line(line) {\n      this.interpreter.line = line;\n    }\n    get charPositionInLine() {\n      return this.interpreter.charPositionInLine;\n    }\n    set charPositionInLine(charPositionInLine) {\n      this.interpreter.charPositionInLine = charPositionInLine;\n    }\n    get charIndex() {\n      return this._input.index;\n    }\n    get text() {\n      if (this._text != null) {\n        return this._text;\n      }\n      return this.interpreter.getText(this._input);\n    }\n    set text(text) {\n      this._text = text;\n    }\n    get token() {\n      return this._token;\n    }\n    set token(_token) {\n      this._token = _token;\n    }\n    set type(ttype) {\n      this._type = ttype;\n    }\n    get type() {\n      return this._type;\n    }\n    set channel(channel) {\n      this._channel = channel;\n    }\n    get channel() {\n      return this._channel;\n    }\n    getAllTokens() {\n      let tokens2 = [];\n      let t = this.nextToken();\n      while (t.type !== Token_1.Token.EOF) {\n        tokens2.push(t);\n        t = this.nextToken();\n      }\n      return tokens2;\n    }\n    notifyListeners(e) {\n      let text = this._input.getText(Interval_1.Interval.of(this._tokenStartCharIndex, this._input.index));\n      let msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n      let listener = this.getErrorListenerDispatch();\n      if (listener.syntaxError) {\n        listener.syntaxError(this, void 0, this._tokenStartLine, this._tokenStartCharPositionInLine, msg, e);\n      }\n    }\n    getErrorDisplay(s) {\n      if (typeof s === \"number\") {\n        switch (s) {\n          case Token_1.Token.EOF:\n            return \"<EOF>\";\n          case 10:\n            return \"\\\\n\";\n          case 9:\n            return \"\\\\t\";\n          case 13:\n            return \"\\\\r\";\n        }\n        return String.fromCharCode(s);\n      }\n      return s.replace(/\\n/g, \"\\\\n\").replace(/\\t/g, \"\\\\t\").replace(/\\r/g, \"\\\\r\");\n    }\n    getCharErrorDisplay(c) {\n      let s = this.getErrorDisplay(c);\n      return \"'\" + s + \"'\";\n    }\n    recover(re) {\n      if (re instanceof LexerNoViableAltException_1.LexerNoViableAltException) {\n        if (this._input.LA(1) !== IntStream_1.IntStream.EOF) {\n          this.interpreter.consume(this._input);\n        }\n      } else {\n        this._input.consume();\n      }\n    }\n  };\n  Lexer2.DEFAULT_MODE = 0;\n  Lexer2.MORE = -2;\n  Lexer2.SKIP = -3;\n  Lexer2.MIN_CHAR_VALUE = 0;\n  Lexer2.MAX_CHAR_VALUE = 1114111;\n  __decorate([\n    Decorators_1.Override\n  ], Lexer2.prototype, \"nextToken\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Lexer2.prototype, \"tokenFactory\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Lexer2.prototype, \"inputStream\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Lexer2.prototype, \"sourceName\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Lexer2.prototype, \"line\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Lexer2.prototype, \"charPositionInLine\", null);\n  exports.Lexer = Lexer2;\n});\n\n// node_modules/antlr4ts/misc/IntervalSet.js\nvar require_IntervalSet = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.IntervalSet = void 0;\n  var ArrayEqualityComparator_1 = require_ArrayEqualityComparator();\n  var IntegerList_1 = require_IntegerList();\n  var Interval_1 = require_Interval();\n  var Lexer_1 = require_Lexer();\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var IntervalSet = class {\n    constructor(intervals) {\n      this.readonly = false;\n      if (intervals != null) {\n        this._intervals = intervals.slice(0);\n      } else {\n        this._intervals = [];\n      }\n    }\n    static get COMPLETE_CHAR_SET() {\n      if (IntervalSet._COMPLETE_CHAR_SET === void 0) {\n        IntervalSet._COMPLETE_CHAR_SET = IntervalSet.of(Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE);\n        IntervalSet._COMPLETE_CHAR_SET.setReadonly(true);\n      }\n      return IntervalSet._COMPLETE_CHAR_SET;\n    }\n    static get EMPTY_SET() {\n      if (IntervalSet._EMPTY_SET == null) {\n        IntervalSet._EMPTY_SET = new IntervalSet();\n        IntervalSet._EMPTY_SET.setReadonly(true);\n      }\n      return IntervalSet._EMPTY_SET;\n    }\n    static of(a, b = a) {\n      let s = new IntervalSet();\n      s.add(a, b);\n      return s;\n    }\n    clear() {\n      if (this.readonly) {\n        throw new Error(\"can't alter readonly IntervalSet\");\n      }\n      this._intervals.length = 0;\n    }\n    add(a, b = a) {\n      this.addRange(Interval_1.Interval.of(a, b));\n    }\n    addRange(addition) {\n      if (this.readonly) {\n        throw new Error(\"can't alter readonly IntervalSet\");\n      }\n      if (addition.b < addition.a) {\n        return;\n      }\n      for (let i = 0; i < this._intervals.length; i++) {\n        let r = this._intervals[i];\n        if (addition.equals(r)) {\n          return;\n        }\n        if (addition.adjacent(r) || !addition.disjoint(r)) {\n          let bigger = addition.union(r);\n          this._intervals[i] = bigger;\n          while (i < this._intervals.length - 1) {\n            i++;\n            let next = this._intervals[i];\n            if (!bigger.adjacent(next) && bigger.disjoint(next)) {\n              break;\n            }\n            this._intervals.splice(i, 1);\n            i--;\n            this._intervals[i] = bigger.union(next);\n          }\n          return;\n        }\n        if (addition.startsBeforeDisjoint(r)) {\n          this._intervals.splice(i, 0, addition);\n          return;\n        }\n      }\n      this._intervals.push(addition);\n    }\n    static or(sets) {\n      let r = new IntervalSet();\n      for (let s of sets) {\n        r.addAll(s);\n      }\n      return r;\n    }\n    addAll(set) {\n      if (set == null) {\n        return this;\n      }\n      if (set instanceof IntervalSet) {\n        let other = set;\n        let n = other._intervals.length;\n        for (let i = 0; i < n; i++) {\n          let I = other._intervals[i];\n          this.add(I.a, I.b);\n        }\n      } else {\n        for (let value of set.toArray()) {\n          this.add(value);\n        }\n      }\n      return this;\n    }\n    complementRange(minElement, maxElement) {\n      return this.complement(IntervalSet.of(minElement, maxElement));\n    }\n    complement(vocabulary) {\n      if (vocabulary.isNil) {\n        return IntervalSet.EMPTY_SET;\n      }\n      let vocabularyIS;\n      if (vocabulary instanceof IntervalSet) {\n        vocabularyIS = vocabulary;\n      } else {\n        vocabularyIS = new IntervalSet();\n        vocabularyIS.addAll(vocabulary);\n      }\n      return vocabularyIS.subtract(this);\n    }\n    subtract(a) {\n      if (a == null || a.isNil) {\n        return new IntervalSet(this._intervals);\n      }\n      if (a instanceof IntervalSet) {\n        return IntervalSet.subtract(this, a);\n      }\n      let other = new IntervalSet();\n      other.addAll(a);\n      return IntervalSet.subtract(this, other);\n    }\n    static subtract(left, right) {\n      if (left.isNil) {\n        return new IntervalSet();\n      }\n      let result = new IntervalSet(left._intervals);\n      if (right.isNil) {\n        return result;\n      }\n      let resultI = 0;\n      let rightI = 0;\n      while (resultI < result._intervals.length && rightI < right._intervals.length) {\n        let resultInterval = result._intervals[resultI];\n        let rightInterval = right._intervals[rightI];\n        if (rightInterval.b < resultInterval.a) {\n          rightI++;\n          continue;\n        }\n        if (rightInterval.a > resultInterval.b) {\n          resultI++;\n          continue;\n        }\n        let beforeCurrent;\n        let afterCurrent;\n        if (rightInterval.a > resultInterval.a) {\n          beforeCurrent = new Interval_1.Interval(resultInterval.a, rightInterval.a - 1);\n        }\n        if (rightInterval.b < resultInterval.b) {\n          afterCurrent = new Interval_1.Interval(rightInterval.b + 1, resultInterval.b);\n        }\n        if (beforeCurrent) {\n          if (afterCurrent) {\n            result._intervals[resultI] = beforeCurrent;\n            result._intervals.splice(resultI + 1, 0, afterCurrent);\n            resultI++;\n            rightI++;\n            continue;\n          } else {\n            result._intervals[resultI] = beforeCurrent;\n            resultI++;\n            continue;\n          }\n        } else {\n          if (afterCurrent) {\n            result._intervals[resultI] = afterCurrent;\n            rightI++;\n            continue;\n          } else {\n            result._intervals.splice(resultI, 1);\n            continue;\n          }\n        }\n      }\n      return result;\n    }\n    or(a) {\n      let o = new IntervalSet();\n      o.addAll(this);\n      o.addAll(a);\n      return o;\n    }\n    and(other) {\n      if (other.isNil) {\n        return new IntervalSet();\n      }\n      let myIntervals = this._intervals;\n      let theirIntervals = other._intervals;\n      let intersection;\n      let mySize = myIntervals.length;\n      let theirSize = theirIntervals.length;\n      let i = 0;\n      let j = 0;\n      while (i < mySize && j < theirSize) {\n        let mine = myIntervals[i];\n        let theirs = theirIntervals[j];\n        if (mine.startsBeforeDisjoint(theirs)) {\n          i++;\n        } else if (theirs.startsBeforeDisjoint(mine)) {\n          j++;\n        } else if (mine.properlyContains(theirs)) {\n          if (!intersection) {\n            intersection = new IntervalSet();\n          }\n          intersection.addRange(mine.intersection(theirs));\n          j++;\n        } else if (theirs.properlyContains(mine)) {\n          if (!intersection) {\n            intersection = new IntervalSet();\n          }\n          intersection.addRange(mine.intersection(theirs));\n          i++;\n        } else if (!mine.disjoint(theirs)) {\n          if (!intersection) {\n            intersection = new IntervalSet();\n          }\n          intersection.addRange(mine.intersection(theirs));\n          if (mine.startsAfterNonDisjoint(theirs)) {\n            j++;\n          } else if (theirs.startsAfterNonDisjoint(mine)) {\n            i++;\n          }\n        }\n      }\n      if (!intersection) {\n        return new IntervalSet();\n      }\n      return intersection;\n    }\n    contains(el) {\n      let n = this._intervals.length;\n      let l = 0;\n      let r = n - 1;\n      while (l <= r) {\n        let m = l + r >> 1;\n        let I = this._intervals[m];\n        let a = I.a;\n        let b = I.b;\n        if (b < el) {\n          l = m + 1;\n        } else if (a > el) {\n          r = m - 1;\n        } else {\n          return true;\n        }\n      }\n      return false;\n    }\n    get isNil() {\n      return this._intervals == null || this._intervals.length === 0;\n    }\n    get maxElement() {\n      if (this.isNil) {\n        throw new RangeError(\"set is empty\");\n      }\n      let last = this._intervals[this._intervals.length - 1];\n      return last.b;\n    }\n    get minElement() {\n      if (this.isNil) {\n        throw new RangeError(\"set is empty\");\n      }\n      return this._intervals[0].a;\n    }\n    get intervals() {\n      return this._intervals;\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      for (let I of this._intervals) {\n        hash = MurmurHash_1.MurmurHash.update(hash, I.a);\n        hash = MurmurHash_1.MurmurHash.update(hash, I.b);\n      }\n      hash = MurmurHash_1.MurmurHash.finish(hash, this._intervals.length * 2);\n      return hash;\n    }\n    equals(o) {\n      if (o == null || !(o instanceof IntervalSet)) {\n        return false;\n      }\n      return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._intervals, o._intervals);\n    }\n    toString(elemAreChar = false) {\n      let buf = \"\";\n      if (this._intervals == null || this._intervals.length === 0) {\n        return \"{}\";\n      }\n      if (this.size > 1) {\n        buf += \"{\";\n      }\n      let first = true;\n      for (let I of this._intervals) {\n        if (first) {\n          first = false;\n        } else {\n          buf += \", \";\n        }\n        let a = I.a;\n        let b = I.b;\n        if (a === b) {\n          if (a === Token_1.Token.EOF) {\n            buf += \"<EOF>\";\n          } else if (elemAreChar) {\n            buf += \"'\" + String.fromCodePoint(a) + \"'\";\n          } else {\n            buf += a;\n          }\n        } else {\n          if (elemAreChar) {\n            buf += \"'\" + String.fromCodePoint(a) + \"'..'\" + String.fromCodePoint(b) + \"'\";\n          } else {\n            buf += a + \"..\" + b;\n          }\n        }\n      }\n      if (this.size > 1) {\n        buf += \"}\";\n      }\n      return buf;\n    }\n    toStringVocabulary(vocabulary) {\n      if (this._intervals == null || this._intervals.length === 0) {\n        return \"{}\";\n      }\n      let buf = \"\";\n      if (this.size > 1) {\n        buf += \"{\";\n      }\n      let first = true;\n      for (let I of this._intervals) {\n        if (first) {\n          first = false;\n        } else {\n          buf += \", \";\n        }\n        let a = I.a;\n        let b = I.b;\n        if (a === b) {\n          buf += this.elementName(vocabulary, a);\n        } else {\n          for (let i = a; i <= b; i++) {\n            if (i > a) {\n              buf += \", \";\n            }\n            buf += this.elementName(vocabulary, i);\n          }\n        }\n      }\n      if (this.size > 1) {\n        buf += \"}\";\n      }\n      return buf;\n    }\n    elementName(vocabulary, a) {\n      if (a === Token_1.Token.EOF) {\n        return \"<EOF>\";\n      } else if (a === Token_1.Token.EPSILON) {\n        return \"<EPSILON>\";\n      } else {\n        return vocabulary.getDisplayName(a);\n      }\n    }\n    get size() {\n      let n = 0;\n      let numIntervals = this._intervals.length;\n      if (numIntervals === 1) {\n        let firstInterval = this._intervals[0];\n        return firstInterval.b - firstInterval.a + 1;\n      }\n      for (let i = 0; i < numIntervals; i++) {\n        let I = this._intervals[i];\n        n += I.b - I.a + 1;\n      }\n      return n;\n    }\n    toIntegerList() {\n      let values = new IntegerList_1.IntegerList(this.size);\n      let n = this._intervals.length;\n      for (let i = 0; i < n; i++) {\n        let I = this._intervals[i];\n        let a = I.a;\n        let b = I.b;\n        for (let v = a; v <= b; v++) {\n          values.add(v);\n        }\n      }\n      return values;\n    }\n    toSet() {\n      let s = new Set();\n      for (let I of this._intervals) {\n        let a = I.a;\n        let b = I.b;\n        for (let v = a; v <= b; v++) {\n          s.add(v);\n        }\n      }\n      return s;\n    }\n    toArray() {\n      let values = new Array();\n      let n = this._intervals.length;\n      for (let i = 0; i < n; i++) {\n        let I = this._intervals[i];\n        let a = I.a;\n        let b = I.b;\n        for (let v = a; v <= b; v++) {\n          values.push(v);\n        }\n      }\n      return values;\n    }\n    remove(el) {\n      if (this.readonly) {\n        throw new Error(\"can't alter readonly IntervalSet\");\n      }\n      let n = this._intervals.length;\n      for (let i = 0; i < n; i++) {\n        let I = this._intervals[i];\n        let a = I.a;\n        let b = I.b;\n        if (el < a) {\n          break;\n        }\n        if (el === a && el === b) {\n          this._intervals.splice(i, 1);\n          break;\n        }\n        if (el === a) {\n          this._intervals[i] = Interval_1.Interval.of(I.a + 1, I.b);\n          break;\n        }\n        if (el === b) {\n          this._intervals[i] = Interval_1.Interval.of(I.a, I.b - 1);\n          break;\n        }\n        if (el > a && el < b) {\n          let oldb = I.b;\n          this._intervals[i] = Interval_1.Interval.of(I.a, el - 1);\n          this.add(el + 1, oldb);\n        }\n      }\n    }\n    get isReadonly() {\n      return this.readonly;\n    }\n    setReadonly(readonly) {\n      if (this.readonly && !readonly) {\n        throw new Error(\"can't alter readonly IntervalSet\");\n      }\n      this.readonly = readonly;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"addAll\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"complement\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"subtract\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"or\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"and\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"contains\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"isNil\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"equals\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], IntervalSet.prototype, \"toStringVocabulary\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], IntervalSet.prototype, \"elementName\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], IntervalSet.prototype, \"remove\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], IntervalSet, \"of\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], IntervalSet, \"subtract\", null);\n  exports.IntervalSet = IntervalSet;\n});\n\n// node_modules/antlr4ts/atn/ATNDeserializationOptions.js\nvar require_ATNDeserializationOptions = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATNDeserializationOptions = void 0;\n  var Decorators_1 = require_Decorators();\n  var ATNDeserializationOptions = class {\n    constructor(options) {\n      this.readOnly = false;\n      if (options) {\n        this.verifyATN = options.verifyATN;\n        this.generateRuleBypassTransitions = options.generateRuleBypassTransitions;\n        this.optimize = options.optimize;\n      } else {\n        this.verifyATN = true;\n        this.generateRuleBypassTransitions = false;\n        this.optimize = true;\n      }\n    }\n    static get defaultOptions() {\n      if (ATNDeserializationOptions._defaultOptions == null) {\n        ATNDeserializationOptions._defaultOptions = new ATNDeserializationOptions();\n        ATNDeserializationOptions._defaultOptions.makeReadOnly();\n      }\n      return ATNDeserializationOptions._defaultOptions;\n    }\n    get isReadOnly() {\n      return this.readOnly;\n    }\n    makeReadOnly() {\n      this.readOnly = true;\n    }\n    get isVerifyATN() {\n      return this.verifyATN;\n    }\n    set isVerifyATN(verifyATN) {\n      this.throwIfReadOnly();\n      this.verifyATN = verifyATN;\n    }\n    get isGenerateRuleBypassTransitions() {\n      return this.generateRuleBypassTransitions;\n    }\n    set isGenerateRuleBypassTransitions(generateRuleBypassTransitions) {\n      this.throwIfReadOnly();\n      this.generateRuleBypassTransitions = generateRuleBypassTransitions;\n    }\n    get isOptimize() {\n      return this.optimize;\n    }\n    set isOptimize(optimize) {\n      this.throwIfReadOnly();\n      this.optimize = optimize;\n    }\n    throwIfReadOnly() {\n      if (this.isReadOnly) {\n        throw new Error(\"The object is read only.\");\n      }\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNDeserializationOptions, \"defaultOptions\", null);\n  exports.ATNDeserializationOptions = ATNDeserializationOptions;\n});\n\n// node_modules/antlr4ts/atn/ActionTransition.js\nvar require_ActionTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ActionTransition = void 0;\n  var Decorators_1 = require_Decorators();\n  var Transition_1 = require_Transition();\n  var ActionTransition = class ActionTransition extends Transition_1.Transition {\n    constructor(target, ruleIndex, actionIndex = -1, isCtxDependent = false) {\n      super(target);\n      this.ruleIndex = ruleIndex;\n      this.actionIndex = actionIndex;\n      this.isCtxDependent = isCtxDependent;\n    }\n    get serializationType() {\n      return 6;\n    }\n    get isEpsilon() {\n      return true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    toString() {\n      return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ActionTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ActionTransition.prototype, \"isEpsilon\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ActionTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ActionTransition.prototype, \"toString\", null);\n  ActionTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ActionTransition);\n  exports.ActionTransition = ActionTransition;\n});\n\n// node_modules/antlr4ts/atn/AtomTransition.js\nvar require_AtomTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.AtomTransition = void 0;\n  var IntervalSet_1 = require_IntervalSet();\n  var Decorators_1 = require_Decorators();\n  var Transition_1 = require_Transition();\n  var AtomTransition2 = class AtomTransition extends Transition_1.Transition {\n    constructor(target, label) {\n      super(target);\n      this._label = label;\n    }\n    get serializationType() {\n      return 5;\n    }\n    get label() {\n      return IntervalSet_1.IntervalSet.of(this._label);\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return this._label === symbol;\n    }\n    toString() {\n      return String(this.label);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], AtomTransition2.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], AtomTransition2.prototype, \"label\", null);\n  __decorate([\n    Decorators_1.Override\n  ], AtomTransition2.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], AtomTransition2.prototype, \"toString\", null);\n  AtomTransition2 = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], AtomTransition2);\n  exports.AtomTransition = AtomTransition2;\n});\n\n// node_modules/antlr4ts/atn/BlockStartState.js\nvar require_BlockStartState = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.BlockStartState = void 0;\n  var DecisionState_1 = require_DecisionState();\n  var BlockStartState = class extends DecisionState_1.DecisionState {\n  };\n  exports.BlockStartState = BlockStartState;\n});\n\n// node_modules/antlr4ts/atn/BasicBlockStartState.js\nvar require_BasicBlockStartState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.BasicBlockStartState = void 0;\n  var ATNStateType_1 = require_ATNStateType();\n  var BlockStartState_1 = require_BlockStartState();\n  var Decorators_1 = require_Decorators();\n  var BasicBlockStartState = class extends BlockStartState_1.BlockStartState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.BLOCK_START;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], BasicBlockStartState.prototype, \"stateType\", null);\n  exports.BasicBlockStartState = BasicBlockStartState;\n});\n\n// node_modules/antlr4ts/atn/BlockEndState.js\nvar require_BlockEndState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.BlockEndState = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var Decorators_1 = require_Decorators();\n  var BlockEndState = class extends ATNState_1.ATNState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.BLOCK_END;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], BlockEndState.prototype, \"stateType\", null);\n  exports.BlockEndState = BlockEndState;\n});\n\n// node_modules/antlr4ts/atn/EpsilonTransition.js\nvar require_EpsilonTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.EpsilonTransition = void 0;\n  var Decorators_1 = require_Decorators();\n  var Transition_1 = require_Transition();\n  var EpsilonTransition = class EpsilonTransition extends Transition_1.Transition {\n    constructor(target, outermostPrecedenceReturn = -1) {\n      super(target);\n      this._outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n    get outermostPrecedenceReturn() {\n      return this._outermostPrecedenceReturn;\n    }\n    get serializationType() {\n      return 1;\n    }\n    get isEpsilon() {\n      return true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    toString() {\n      return \"epsilon\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], EpsilonTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EpsilonTransition.prototype, \"isEpsilon\", null);\n  __decorate([\n    Decorators_1.Override\n  ], EpsilonTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], EpsilonTransition.prototype, \"toString\", null);\n  EpsilonTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], EpsilonTransition);\n  exports.EpsilonTransition = EpsilonTransition;\n});\n\n// node_modules/antlr4ts/atn/LexerChannelAction.js\nvar require_LexerChannelAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerChannelAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerChannelAction = class {\n    constructor(channel) {\n      this._channel = channel;\n    }\n    get channel() {\n      return this._channel;\n    }\n    get actionType() {\n      return 0;\n    }\n    get isPositionDependent() {\n      return false;\n    }\n    execute(lexer) {\n      lexer.channel = this._channel;\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash_1.MurmurHash.update(hash, this._channel);\n      return MurmurHash_1.MurmurHash.finish(hash, 2);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof LexerChannelAction)) {\n        return false;\n      }\n      return this._channel === obj._channel;\n    }\n    toString() {\n      return `channel(${this._channel})`;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerChannelAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerChannelAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerChannelAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerChannelAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerChannelAction.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerChannelAction.prototype, \"toString\", null);\n  exports.LexerChannelAction = LexerChannelAction;\n});\n\n// node_modules/antlr4ts/atn/LexerCustomAction.js\nvar require_LexerCustomAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerCustomAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerCustomAction = class {\n    constructor(ruleIndex, actionIndex) {\n      this._ruleIndex = ruleIndex;\n      this._actionIndex = actionIndex;\n    }\n    get ruleIndex() {\n      return this._ruleIndex;\n    }\n    get actionIndex() {\n      return this._actionIndex;\n    }\n    get actionType() {\n      return 1;\n    }\n    get isPositionDependent() {\n      return true;\n    }\n    execute(lexer) {\n      lexer.action(void 0, this._ruleIndex, this._actionIndex);\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash_1.MurmurHash.update(hash, this._ruleIndex);\n      hash = MurmurHash_1.MurmurHash.update(hash, this._actionIndex);\n      return MurmurHash_1.MurmurHash.finish(hash, 3);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof LexerCustomAction)) {\n        return false;\n      }\n      return this._ruleIndex === obj._ruleIndex && this._actionIndex === obj._actionIndex;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerCustomAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerCustomAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerCustomAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerCustomAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerCustomAction.prototype, \"equals\", null);\n  exports.LexerCustomAction = LexerCustomAction;\n});\n\n// node_modules/antlr4ts/atn/LexerModeAction.js\nvar require_LexerModeAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerModeAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerModeAction = class {\n    constructor(mode) {\n      this._mode = mode;\n    }\n    get mode() {\n      return this._mode;\n    }\n    get actionType() {\n      return 2;\n    }\n    get isPositionDependent() {\n      return false;\n    }\n    execute(lexer) {\n      lexer.mode(this._mode);\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash_1.MurmurHash.update(hash, this._mode);\n      return MurmurHash_1.MurmurHash.finish(hash, 2);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof LexerModeAction)) {\n        return false;\n      }\n      return this._mode === obj._mode;\n    }\n    toString() {\n      return `mode(${this._mode})`;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerModeAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerModeAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerModeAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerModeAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerModeAction.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerModeAction.prototype, \"toString\", null);\n  exports.LexerModeAction = LexerModeAction;\n});\n\n// node_modules/antlr4ts/atn/LexerMoreAction.js\nvar require_LexerMoreAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerMoreAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerMoreAction = class {\n    constructor() {\n    }\n    get actionType() {\n      return 3;\n    }\n    get isPositionDependent() {\n      return false;\n    }\n    execute(lexer) {\n      lexer.more();\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      return MurmurHash_1.MurmurHash.finish(hash, 1);\n    }\n    equals(obj) {\n      return obj === this;\n    }\n    toString() {\n      return \"more\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerMoreAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerMoreAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerMoreAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerMoreAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerMoreAction.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerMoreAction.prototype, \"toString\", null);\n  exports.LexerMoreAction = LexerMoreAction;\n  (function(LexerMoreAction2) {\n    LexerMoreAction2.INSTANCE = new LexerMoreAction2();\n  })(LexerMoreAction = exports.LexerMoreAction || (exports.LexerMoreAction = {}));\n});\n\n// node_modules/antlr4ts/atn/LexerPopModeAction.js\nvar require_LexerPopModeAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerPopModeAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerPopModeAction = class {\n    constructor() {\n    }\n    get actionType() {\n      return 4;\n    }\n    get isPositionDependent() {\n      return false;\n    }\n    execute(lexer) {\n      lexer.popMode();\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      return MurmurHash_1.MurmurHash.finish(hash, 1);\n    }\n    equals(obj) {\n      return obj === this;\n    }\n    toString() {\n      return \"popMode\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerPopModeAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPopModeAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerPopModeAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPopModeAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPopModeAction.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPopModeAction.prototype, \"toString\", null);\n  exports.LexerPopModeAction = LexerPopModeAction;\n  (function(LexerPopModeAction2) {\n    LexerPopModeAction2.INSTANCE = new LexerPopModeAction2();\n  })(LexerPopModeAction = exports.LexerPopModeAction || (exports.LexerPopModeAction = {}));\n});\n\n// node_modules/antlr4ts/atn/LexerPushModeAction.js\nvar require_LexerPushModeAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerPushModeAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerPushModeAction = class {\n    constructor(mode) {\n      this._mode = mode;\n    }\n    get mode() {\n      return this._mode;\n    }\n    get actionType() {\n      return 5;\n    }\n    get isPositionDependent() {\n      return false;\n    }\n    execute(lexer) {\n      lexer.pushMode(this._mode);\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash_1.MurmurHash.update(hash, this._mode);\n      return MurmurHash_1.MurmurHash.finish(hash, 2);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof LexerPushModeAction)) {\n        return false;\n      }\n      return this._mode === obj._mode;\n    }\n    toString() {\n      return `pushMode(${this._mode})`;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerPushModeAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPushModeAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerPushModeAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPushModeAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPushModeAction.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerPushModeAction.prototype, \"toString\", null);\n  exports.LexerPushModeAction = LexerPushModeAction;\n});\n\n// node_modules/antlr4ts/atn/LexerSkipAction.js\nvar require_LexerSkipAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerSkipAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerSkipAction = class {\n    constructor() {\n    }\n    get actionType() {\n      return 6;\n    }\n    get isPositionDependent() {\n      return false;\n    }\n    execute(lexer) {\n      lexer.skip();\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      return MurmurHash_1.MurmurHash.finish(hash, 1);\n    }\n    equals(obj) {\n      return obj === this;\n    }\n    toString() {\n      return \"skip\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerSkipAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerSkipAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerSkipAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerSkipAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerSkipAction.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerSkipAction.prototype, \"toString\", null);\n  exports.LexerSkipAction = LexerSkipAction;\n  (function(LexerSkipAction2) {\n    LexerSkipAction2.INSTANCE = new LexerSkipAction2();\n  })(LexerSkipAction = exports.LexerSkipAction || (exports.LexerSkipAction = {}));\n});\n\n// node_modules/antlr4ts/atn/LexerTypeAction.js\nvar require_LexerTypeAction = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerTypeAction = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var LexerTypeAction = class {\n    constructor(type) {\n      this._type = type;\n    }\n    get type() {\n      return this._type;\n    }\n    get actionType() {\n      return 7;\n    }\n    get isPositionDependent() {\n      return false;\n    }\n    execute(lexer) {\n      lexer.type = this._type;\n    }\n    hashCode() {\n      let hash = MurmurHash_1.MurmurHash.initialize();\n      hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n      hash = MurmurHash_1.MurmurHash.update(hash, this._type);\n      return MurmurHash_1.MurmurHash.finish(hash, 2);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof LexerTypeAction)) {\n        return false;\n      }\n      return this._type === obj._type;\n    }\n    toString() {\n      return `type(${this._type})`;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LexerTypeAction.prototype, \"actionType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerTypeAction.prototype, \"isPositionDependent\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], LexerTypeAction.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerTypeAction.prototype, \"hashCode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerTypeAction.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], LexerTypeAction.prototype, \"toString\", null);\n  exports.LexerTypeAction = LexerTypeAction;\n});\n\n// node_modules/antlr4ts/atn/LoopEndState.js\nvar require_LoopEndState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LoopEndState = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var Decorators_1 = require_Decorators();\n  var LoopEndState = class extends ATNState_1.ATNState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.LOOP_END;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], LoopEndState.prototype, \"stateType\", null);\n  exports.LoopEndState = LoopEndState;\n});\n\n// node_modules/antlr4ts/atn/ConflictInfo.js\nvar require_ConflictInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ConflictInfo = void 0;\n  var Decorators_1 = require_Decorators();\n  var Utils3 = require_Utils();\n  var ConflictInfo = class {\n    constructor(conflictedAlts, exact) {\n      this._conflictedAlts = conflictedAlts;\n      this.exact = exact;\n    }\n    get conflictedAlts() {\n      return this._conflictedAlts;\n    }\n    get isExact() {\n      return this.exact;\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof ConflictInfo)) {\n        return false;\n      }\n      return this.isExact === obj.isExact && Utils3.equals(this.conflictedAlts, obj.conflictedAlts);\n    }\n    hashCode() {\n      return this.conflictedAlts.hashCode();\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ConflictInfo.prototype, \"equals\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ConflictInfo.prototype, \"hashCode\", null);\n  exports.ConflictInfo = ConflictInfo;\n});\n\n// node_modules/antlr4ts/tree/TerminalNode.js\nvar require_TerminalNode = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.TerminalNode = void 0;\n  var Interval_1 = require_Interval();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var TerminalNode = class {\n    constructor(symbol) {\n      this._symbol = symbol;\n    }\n    getChild(i) {\n      throw new RangeError(\"Terminal Node has no children.\");\n    }\n    get symbol() {\n      return this._symbol;\n    }\n    get parent() {\n      return this._parent;\n    }\n    setParent(parent) {\n      this._parent = parent;\n    }\n    get payload() {\n      return this._symbol;\n    }\n    get sourceInterval() {\n      let tokenIndex = this._symbol.tokenIndex;\n      return new Interval_1.Interval(tokenIndex, tokenIndex);\n    }\n    get childCount() {\n      return 0;\n    }\n    accept(visitor) {\n      return visitor.visitTerminal(this);\n    }\n    get text() {\n      return this._symbol.text || \"\";\n    }\n    toStringTree(parser) {\n      return this.toString();\n    }\n    toString() {\n      if (this._symbol.type === Token_1.Token.EOF) {\n        return \"<EOF>\";\n      }\n      return this._symbol.text || \"\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"getChild\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"parent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"setParent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"payload\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"sourceInterval\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"childCount\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"accept\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"text\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"toStringTree\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TerminalNode.prototype, \"toString\", null);\n  exports.TerminalNode = TerminalNode;\n});\n\n// node_modules/antlr4ts/tree/ErrorNode.js\nvar require_ErrorNode = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ErrorNode = void 0;\n  var Decorators_1 = require_Decorators();\n  var TerminalNode_1 = require_TerminalNode();\n  var ErrorNode2 = class extends TerminalNode_1.TerminalNode {\n    constructor(token) {\n      super(token);\n    }\n    accept(visitor) {\n      return visitor.visitErrorNode(this);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ErrorNode2.prototype, \"accept\", null);\n  exports.ErrorNode = ErrorNode2;\n});\n\n// node_modules/antlr4ts/tree/RuleNode.js\nvar require_RuleNode = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleNode = void 0;\n  var RuleNode = class {\n  };\n  exports.RuleNode = RuleNode;\n});\n\n// node_modules/antlr4ts/tree/Trees.js\nvar require_Trees = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Trees = void 0;\n  var ATN_1 = require_ATN();\n  var CommonToken_1 = require_CommonToken();\n  var ErrorNode_1 = require_ErrorNode();\n  var Decorators_1 = require_Decorators();\n  var Parser_1 = require_Parser();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var RuleNode_1 = require_RuleNode();\n  var TerminalNode_1 = require_TerminalNode();\n  var Token_1 = require_Token();\n  var Utils3 = require_Utils();\n  var Trees = class {\n    static toStringTree(t, arg2) {\n      let ruleNames;\n      if (arg2 instanceof Parser_1.Parser) {\n        ruleNames = arg2.ruleNames;\n      } else {\n        ruleNames = arg2;\n      }\n      let s = Utils3.escapeWhitespace(this.getNodeText(t, ruleNames), false);\n      if (t.childCount === 0) {\n        return s;\n      }\n      let buf = \"\";\n      buf += \"(\";\n      s = Utils3.escapeWhitespace(this.getNodeText(t, ruleNames), false);\n      buf += s;\n      buf += \" \";\n      for (let i = 0; i < t.childCount; i++) {\n        if (i > 0) {\n          buf += \" \";\n        }\n        buf += this.toStringTree(t.getChild(i), ruleNames);\n      }\n      buf += \")\";\n      return buf;\n    }\n    static getNodeText(t, arg2) {\n      let ruleNames;\n      if (arg2 instanceof Parser_1.Parser) {\n        ruleNames = arg2.ruleNames;\n      } else if (arg2) {\n        ruleNames = arg2;\n      } else {\n        let payload = t.payload;\n        if (typeof payload.text === \"string\") {\n          return payload.text;\n        }\n        return t.payload.toString();\n      }\n      if (t instanceof RuleNode_1.RuleNode) {\n        let ruleContext = t.ruleContext;\n        let ruleIndex = ruleContext.ruleIndex;\n        let ruleName = ruleNames[ruleIndex];\n        let altNumber = ruleContext.altNumber;\n        if (altNumber !== ATN_1.ATN.INVALID_ALT_NUMBER) {\n          return ruleName + \":\" + altNumber;\n        }\n        return ruleName;\n      } else if (t instanceof ErrorNode_1.ErrorNode) {\n        return t.toString();\n      } else if (t instanceof TerminalNode_1.TerminalNode) {\n        let symbol = t.symbol;\n        return symbol.text || \"\";\n      }\n      throw new TypeError(\"Unexpected node type\");\n    }\n    static getChildren(t) {\n      let kids = [];\n      for (let i = 0; i < t.childCount; i++) {\n        kids.push(t.getChild(i));\n      }\n      return kids;\n    }\n    static getAncestors(t) {\n      let ancestors = [];\n      let p = t.parent;\n      while (p) {\n        ancestors.unshift(p);\n        p = p.parent;\n      }\n      return ancestors;\n    }\n    static isAncestorOf(t, u) {\n      if (!t || !u || !t.parent) {\n        return false;\n      }\n      let p = u.parent;\n      while (p) {\n        if (t === p) {\n          return true;\n        }\n        p = p.parent;\n      }\n      return false;\n    }\n    static findAllTokenNodes(t, ttype) {\n      return Trees.findAllNodes(t, ttype, true);\n    }\n    static findAllRuleNodes(t, ruleIndex) {\n      return Trees.findAllNodes(t, ruleIndex, false);\n    }\n    static findAllNodes(t, index, findTokens) {\n      let nodes = [];\n      Trees._findAllNodes(t, index, findTokens, nodes);\n      return nodes;\n    }\n    static _findAllNodes(t, index, findTokens, nodes) {\n      if (findTokens && t instanceof TerminalNode_1.TerminalNode) {\n        if (t.symbol.type === index) {\n          nodes.push(t);\n        }\n      } else if (!findTokens && t instanceof ParserRuleContext_1.ParserRuleContext) {\n        if (t.ruleIndex === index) {\n          nodes.push(t);\n        }\n      }\n      for (let i = 0; i < t.childCount; i++) {\n        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n      }\n    }\n    static getDescendants(t) {\n      let nodes = [];\n      function recurse(e) {\n        nodes.push(e);\n        const n = e.childCount;\n        for (let i = 0; i < n; i++) {\n          recurse(e.getChild(i));\n        }\n      }\n      recurse(t);\n      return nodes;\n    }\n    static getRootOfSubtreeEnclosingRegion(t, startTokenIndex, stopTokenIndex) {\n      let n = t.childCount;\n      for (let i = 0; i < n; i++) {\n        let child = t.getChild(i);\n        let r = Trees.getRootOfSubtreeEnclosingRegion(child, startTokenIndex, stopTokenIndex);\n        if (r) {\n          return r;\n        }\n      }\n      if (t instanceof ParserRuleContext_1.ParserRuleContext) {\n        let stopToken = t.stop;\n        if (startTokenIndex >= t.start.tokenIndex && (stopToken == null || stopTokenIndex <= stopToken.tokenIndex)) {\n          return t;\n        }\n      }\n      return void 0;\n    }\n    static stripChildrenOutOfRange(t, root, startIndex, stopIndex) {\n      if (!t) {\n        return;\n      }\n      let count = t.childCount;\n      for (let i = 0; i < count; i++) {\n        let child = t.getChild(i);\n        let range = child.sourceInterval;\n        if (child instanceof ParserRuleContext_1.ParserRuleContext && (range.b < startIndex || range.a > stopIndex)) {\n          if (Trees.isAncestorOf(child, root)) {\n            let abbrev = new CommonToken_1.CommonToken(Token_1.Token.INVALID_TYPE, \"...\");\n            t.children[i] = new TerminalNode_1.TerminalNode(abbrev);\n          }\n        }\n      }\n    }\n    static findNodeSuchThat(t, pred) {\n      if (pred(t)) {\n        return t;\n      }\n      let n = t.childCount;\n      for (let i = 0; i < n; i++) {\n        let u = Trees.findNodeSuchThat(t.getChild(i), pred);\n        if (u !== void 0) {\n          return u;\n        }\n      }\n      return void 0;\n    }\n  };\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], Trees, \"toStringTree\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], Trees, \"getAncestors\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], Trees, \"getRootOfSubtreeEnclosingRegion\", null);\n  exports.Trees = Trees;\n});\n\n// node_modules/antlr4ts/RuleContext.js\nvar require_RuleContext = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleContext = void 0;\n  var ATN_1 = require_ATN();\n  var Recognizer_1 = require_Recognizer();\n  var RuleNode_1 = require_RuleNode();\n  var Interval_1 = require_Interval();\n  var Decorators_1 = require_Decorators();\n  var Trees_1 = require_Trees();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var RuleContext = class extends RuleNode_1.RuleNode {\n    constructor(parent, invokingState) {\n      super();\n      this._parent = parent;\n      this.invokingState = invokingState != null ? invokingState : -1;\n    }\n    static getChildContext(parent, invokingState) {\n      return new RuleContext(parent, invokingState);\n    }\n    depth() {\n      let n = 0;\n      let p = this;\n      while (p) {\n        p = p._parent;\n        n++;\n      }\n      return n;\n    }\n    get isEmpty() {\n      return this.invokingState === -1;\n    }\n    get sourceInterval() {\n      return Interval_1.Interval.INVALID;\n    }\n    get ruleContext() {\n      return this;\n    }\n    get parent() {\n      return this._parent;\n    }\n    setParent(parent) {\n      this._parent = parent;\n    }\n    get payload() {\n      return this;\n    }\n    get text() {\n      if (this.childCount === 0) {\n        return \"\";\n      }\n      let builder = \"\";\n      for (let i = 0; i < this.childCount; i++) {\n        builder += this.getChild(i).text;\n      }\n      return builder.toString();\n    }\n    get ruleIndex() {\n      return -1;\n    }\n    get altNumber() {\n      return ATN_1.ATN.INVALID_ALT_NUMBER;\n    }\n    set altNumber(altNumber) {\n    }\n    getChild(i) {\n      throw new RangeError(\"i must be greater than or equal to 0 and less than childCount\");\n    }\n    get childCount() {\n      return 0;\n    }\n    accept(visitor) {\n      return visitor.visitChildren(this);\n    }\n    toStringTree(recog) {\n      return Trees_1.Trees.toStringTree(this, recog);\n    }\n    toString(arg1, stop) {\n      const ruleNames = arg1 instanceof Recognizer_1.Recognizer ? arg1.ruleNames : arg1;\n      stop = stop || ParserRuleContext_1.ParserRuleContext.emptyContext();\n      let buf = \"\";\n      let p = this;\n      buf += \"[\";\n      while (p && p !== stop) {\n        if (!ruleNames) {\n          if (!p.isEmpty) {\n            buf += p.invokingState;\n          }\n        } else {\n          let ruleIndex = p.ruleIndex;\n          let ruleName = ruleIndex >= 0 && ruleIndex < ruleNames.length ? ruleNames[ruleIndex] : ruleIndex.toString();\n          buf += ruleName;\n        }\n        if (p._parent && (ruleNames || !p._parent.isEmpty)) {\n          buf += \" \";\n        }\n        p = p._parent;\n      }\n      buf += \"]\";\n      return buf.toString();\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"sourceInterval\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"ruleContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"parent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"setParent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"payload\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"text\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"getChild\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"childCount\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"accept\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleContext.prototype, \"toStringTree\", null);\n  exports.RuleContext = RuleContext;\n});\n\n// node_modules/antlr4ts/ParserRuleContext.js\nvar require_ParserRuleContext = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParserRuleContext = void 0;\n  var ErrorNode_1 = require_ErrorNode();\n  var Interval_1 = require_Interval();\n  var Decorators_1 = require_Decorators();\n  var RuleContext_1 = require_RuleContext();\n  var TerminalNode_1 = require_TerminalNode();\n  var ParserRuleContext2 = class extends RuleContext_1.RuleContext {\n    constructor(parent, invokingStateNumber) {\n      if (invokingStateNumber == null) {\n        super();\n      } else {\n        super(parent, invokingStateNumber);\n      }\n    }\n    static emptyContext() {\n      return ParserRuleContext2.EMPTY;\n    }\n    copyFrom(ctx) {\n      this._parent = ctx._parent;\n      this.invokingState = ctx.invokingState;\n      this._start = ctx._start;\n      this._stop = ctx._stop;\n      if (ctx.children) {\n        this.children = [];\n        for (let child of ctx.children) {\n          if (child instanceof ErrorNode_1.ErrorNode) {\n            this.addChild(child);\n          }\n        }\n      }\n    }\n    enterRule(listener) {\n    }\n    exitRule(listener) {\n    }\n    addAnyChild(t) {\n      if (!this.children) {\n        this.children = [t];\n      } else {\n        this.children.push(t);\n      }\n      return t;\n    }\n    addChild(t) {\n      let result;\n      if (t instanceof TerminalNode_1.TerminalNode) {\n        t.setParent(this);\n        this.addAnyChild(t);\n        return;\n      } else if (t instanceof RuleContext_1.RuleContext) {\n        this.addAnyChild(t);\n        return;\n      } else {\n        t = new TerminalNode_1.TerminalNode(t);\n        this.addAnyChild(t);\n        t.setParent(this);\n        return t;\n      }\n    }\n    addErrorNode(node) {\n      if (node instanceof ErrorNode_1.ErrorNode) {\n        const errorNode = node;\n        errorNode.setParent(this);\n        return this.addAnyChild(errorNode);\n      } else {\n        const badToken = node;\n        let t = new ErrorNode_1.ErrorNode(badToken);\n        this.addAnyChild(t);\n        t.setParent(this);\n        return t;\n      }\n    }\n    removeLastChild() {\n      if (this.children) {\n        this.children.pop();\n      }\n    }\n    get parent() {\n      let parent = super.parent;\n      if (parent === void 0 || parent instanceof ParserRuleContext2) {\n        return parent;\n      }\n      throw new TypeError(\"Invalid parent type for ParserRuleContext\");\n    }\n    getChild(i, ctxType) {\n      if (!this.children || i < 0 || i >= this.children.length) {\n        throw new RangeError(\"index parameter must be between >= 0 and <= number of children.\");\n      }\n      if (ctxType == null) {\n        return this.children[i];\n      }\n      let result = this.tryGetChild(i, ctxType);\n      if (result === void 0) {\n        throw new Error(\"The specified node does not exist\");\n      }\n      return result;\n    }\n    tryGetChild(i, ctxType) {\n      if (!this.children || i < 0 || i >= this.children.length) {\n        return void 0;\n      }\n      let j = -1;\n      for (let o of this.children) {\n        if (o instanceof ctxType) {\n          j++;\n          if (j === i) {\n            return o;\n          }\n        }\n      }\n      return void 0;\n    }\n    getToken(ttype, i) {\n      let result = this.tryGetToken(ttype, i);\n      if (result === void 0) {\n        throw new Error(\"The specified token does not exist\");\n      }\n      return result;\n    }\n    tryGetToken(ttype, i) {\n      if (!this.children || i < 0 || i >= this.children.length) {\n        return void 0;\n      }\n      let j = -1;\n      for (let o of this.children) {\n        if (o instanceof TerminalNode_1.TerminalNode) {\n          let symbol = o.symbol;\n          if (symbol.type === ttype) {\n            j++;\n            if (j === i) {\n              return o;\n            }\n          }\n        }\n      }\n      return void 0;\n    }\n    getTokens(ttype) {\n      let tokens2 = [];\n      if (!this.children) {\n        return tokens2;\n      }\n      for (let o of this.children) {\n        if (o instanceof TerminalNode_1.TerminalNode) {\n          let symbol = o.symbol;\n          if (symbol.type === ttype) {\n            tokens2.push(o);\n          }\n        }\n      }\n      return tokens2;\n    }\n    get ruleContext() {\n      return this;\n    }\n    getRuleContext(i, ctxType) {\n      return this.getChild(i, ctxType);\n    }\n    tryGetRuleContext(i, ctxType) {\n      return this.tryGetChild(i, ctxType);\n    }\n    getRuleContexts(ctxType) {\n      let contexts = [];\n      if (!this.children) {\n        return contexts;\n      }\n      for (let o of this.children) {\n        if (o instanceof ctxType) {\n          contexts.push(o);\n        }\n      }\n      return contexts;\n    }\n    get childCount() {\n      return this.children ? this.children.length : 0;\n    }\n    get sourceInterval() {\n      if (!this._start) {\n        return Interval_1.Interval.INVALID;\n      }\n      if (!this._stop || this._stop.tokenIndex < this._start.tokenIndex) {\n        return Interval_1.Interval.of(this._start.tokenIndex, this._start.tokenIndex - 1);\n      }\n      return Interval_1.Interval.of(this._start.tokenIndex, this._stop.tokenIndex);\n    }\n    get start() {\n      return this._start;\n    }\n    get stop() {\n      return this._stop;\n    }\n    toInfoString(recognizer) {\n      let rules = recognizer.getRuleInvocationStack(this).reverse();\n      return \"ParserRuleContext\" + rules + \"{start=\" + this._start + \", stop=\" + this._stop + \"}\";\n    }\n  };\n  ParserRuleContext2.EMPTY = new ParserRuleContext2();\n  __decorate([\n    Decorators_1.Override\n  ], ParserRuleContext2.prototype, \"parent\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ParserRuleContext2.prototype, \"childCount\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ParserRuleContext2.prototype, \"sourceInterval\", null);\n  exports.ParserRuleContext = ParserRuleContext2;\n});\n\n// node_modules/antlr4ts/atn/PredictionMode.js\nvar require_PredictionMode = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.PredictionMode = void 0;\n  var Array2DHashMap_1 = require_Array2DHashMap();\n  var MurmurHash_1 = require_MurmurHash();\n  var Decorators_1 = require_Decorators();\n  var RuleStopState_1 = require_RuleStopState();\n  var PredictionMode;\n  (function(PredictionMode2) {\n    PredictionMode2[PredictionMode2[\"SLL\"] = 0] = \"SLL\";\n    PredictionMode2[PredictionMode2[\"LL\"] = 1] = \"LL\";\n    PredictionMode2[PredictionMode2[\"LL_EXACT_AMBIG_DETECTION\"] = 2] = \"LL_EXACT_AMBIG_DETECTION\";\n  })(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));\n  (function(PredictionMode2) {\n    class AltAndContextMap extends Array2DHashMap_1.Array2DHashMap {\n      constructor() {\n        super(AltAndContextConfigEqualityComparator.INSTANCE);\n      }\n    }\n    class AltAndContextConfigEqualityComparator {\n      AltAndContextConfigEqualityComparator() {\n      }\n      hashCode(o) {\n        let hashCode = MurmurHash_1.MurmurHash.initialize(7);\n        hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.state.stateNumber);\n        hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.context);\n        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 2);\n        return hashCode;\n      }\n      equals(a, b) {\n        if (a === b) {\n          return true;\n        }\n        if (a == null || b == null) {\n          return false;\n        }\n        return a.state.stateNumber === b.state.stateNumber && a.context.equals(b.context);\n      }\n    }\n    AltAndContextConfigEqualityComparator.INSTANCE = new AltAndContextConfigEqualityComparator();\n    __decorate([\n      Decorators_1.Override\n    ], AltAndContextConfigEqualityComparator.prototype, \"hashCode\", null);\n    __decorate([\n      Decorators_1.Override\n    ], AltAndContextConfigEqualityComparator.prototype, \"equals\", null);\n    function hasConfigInRuleStopState(configs) {\n      for (let c of configs) {\n        if (c.state instanceof RuleStopState_1.RuleStopState) {\n          return true;\n        }\n      }\n      return false;\n    }\n    PredictionMode2.hasConfigInRuleStopState = hasConfigInRuleStopState;\n    function allConfigsInRuleStopStates(configs) {\n      for (let config of configs) {\n        if (!(config.state instanceof RuleStopState_1.RuleStopState)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    PredictionMode2.allConfigsInRuleStopStates = allConfigsInRuleStopStates;\n  })(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));\n});\n\n// node_modules/antlr4ts/atn/SimulatorState.js\nvar require_SimulatorState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.SimulatorState = void 0;\n  var Decorators_1 = require_Decorators();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var SimulatorState = class SimulatorState {\n    constructor(outerContext, s0, useContext, remainingOuterContext) {\n      this.outerContext = outerContext != null ? outerContext : ParserRuleContext_1.ParserRuleContext.emptyContext();\n      this.s0 = s0;\n      this.useContext = useContext;\n      this.remainingOuterContext = remainingOuterContext;\n    }\n  };\n  SimulatorState = __decorate([\n    __param(1, Decorators_1.NotNull)\n  ], SimulatorState);\n  exports.SimulatorState = SimulatorState;\n});\n\n// node_modules/antlr4ts/atn/ParserATNSimulator.js\nvar require_ParserATNSimulator = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParserATNSimulator = void 0;\n  var AcceptStateInfo_1 = require_AcceptStateInfo();\n  var ActionTransition_1 = require_ActionTransition();\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var Arrays_1 = require_Arrays();\n  var ATN_1 = require_ATN();\n  var ATNConfig_1 = require_ATNConfig();\n  var ATNConfigSet_1 = require_ATNConfigSet();\n  var ATNSimulator_1 = require_ATNSimulator();\n  var ATNStateType_1 = require_ATNStateType();\n  var AtomTransition_1 = require_AtomTransition();\n  var BitSet_1 = require_BitSet();\n  var ConflictInfo_1 = require_ConflictInfo();\n  var DecisionState_1 = require_DecisionState();\n  var DFAState_1 = require_DFAState();\n  var IntegerList_1 = require_IntegerList();\n  var Interval_1 = require_Interval();\n  var IntStream_1 = require_IntStream();\n  var Decorators_1 = require_Decorators();\n  var NotSetTransition_1 = require_NotSetTransition();\n  var NoViableAltException_1 = require_NoViableAltException();\n  var ObjectEqualityComparator_1 = require_ObjectEqualityComparator();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var PredictionContext_1 = require_PredictionContext();\n  var PredictionContextCache_1 = require_PredictionContextCache();\n  var PredictionMode_1 = require_PredictionMode();\n  var RuleStopState_1 = require_RuleStopState();\n  var RuleTransition_1 = require_RuleTransition();\n  var SemanticContext_1 = require_SemanticContext();\n  var SetTransition_1 = require_SetTransition();\n  var SimulatorState_1 = require_SimulatorState();\n  var Token_1 = require_Token();\n  var VocabularyImpl_1 = require_VocabularyImpl();\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var MAX_SHORT_VALUE = 65535;\n  var MIN_INTEGER_VALUE = -(1 << 31 >>> 0);\n  var ParserATNSimulator2 = class ParserATNSimulator3 extends ATNSimulator_1.ATNSimulator {\n    constructor(atn, parser) {\n      super(atn);\n      this.predictionMode = PredictionMode_1.PredictionMode.LL;\n      this.force_global_context = false;\n      this.always_try_local_context = true;\n      this.enable_global_context_dfa = false;\n      this.optimize_unique_closure = true;\n      this.optimize_ll1 = true;\n      this.optimize_tail_calls = true;\n      this.tail_call_preserves_sll = true;\n      this.treat_sllk1_conflict_as_ambiguity = false;\n      this.reportAmbiguities = false;\n      this.userWantsCtxSensitive = true;\n      this._parser = parser;\n    }\n    getPredictionMode() {\n      return this.predictionMode;\n    }\n    setPredictionMode(predictionMode) {\n      this.predictionMode = predictionMode;\n    }\n    reset() {\n    }\n    adaptivePredict(input, decision, outerContext, useContext) {\n      if (useContext === void 0) {\n        useContext = false;\n      }\n      let dfa = this.atn.decisionToDFA[decision];\n      assert(dfa != null);\n      if (this.optimize_ll1 && !dfa.isPrecedenceDfa && !dfa.isEmpty) {\n        let ll_1 = input.LA(1);\n        if (ll_1 >= 0 && ll_1 <= 65535) {\n          let key = (decision << 16 >>> 0) + ll_1;\n          let alt = this.atn.LL1Table.get(key);\n          if (alt != null) {\n            return alt;\n          }\n        }\n      }\n      this.dfa = dfa;\n      if (this.force_global_context) {\n        useContext = true;\n      } else if (!this.always_try_local_context) {\n        useContext = useContext || dfa.isContextSensitive;\n      }\n      this.userWantsCtxSensitive = useContext || this.predictionMode !== PredictionMode_1.PredictionMode.SLL && outerContext != null && !this.atn.decisionToState[decision].sll;\n      if (outerContext == null) {\n        outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();\n      }\n      let state;\n      if (!dfa.isEmpty) {\n        state = this.getStartState(dfa, input, outerContext, useContext);\n      }\n      if (state == null) {\n        if (outerContext == null) {\n          outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();\n        }\n        if (ParserATNSimulator3.debug) {\n          console.log(\"ATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \", outerContext=\" + outerContext.toString(this._parser));\n        }\n        state = this.computeStartState(dfa, outerContext, useContext);\n      }\n      let m = input.mark();\n      let index = input.index;\n      try {\n        let alt = this.execDFA(dfa, input, index, state);\n        if (ParserATNSimulator3.debug) {\n          console.log(\"DFA after predictATN: \" + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));\n        }\n        return alt;\n      } finally {\n        this.dfa = void 0;\n        input.seek(index);\n        input.release(m);\n      }\n    }\n    getStartState(dfa, input, outerContext, useContext) {\n      if (!useContext) {\n        if (dfa.isPrecedenceDfa) {\n          let state = dfa.getPrecedenceStartState(this._parser.precedence, false);\n          if (state == null) {\n            return void 0;\n          }\n          return new SimulatorState_1.SimulatorState(outerContext, state, false, outerContext);\n        } else {\n          if (dfa.s0 == null) {\n            return void 0;\n          }\n          return new SimulatorState_1.SimulatorState(outerContext, dfa.s0, false, outerContext);\n        }\n      }\n      if (!this.enable_global_context_dfa) {\n        return void 0;\n      }\n      let remainingContext = outerContext;\n      assert(outerContext != null);\n      let s0;\n      if (dfa.isPrecedenceDfa) {\n        s0 = dfa.getPrecedenceStartState(this._parser.precedence, true);\n      } else {\n        s0 = dfa.s0full;\n      }\n      while (remainingContext != null && s0 != null && s0.isContextSensitive) {\n        remainingContext = this.skipTailCalls(remainingContext);\n        s0 = s0.getContextTarget(this.getReturnState(remainingContext));\n        if (remainingContext.isEmpty) {\n          assert(s0 == null || !s0.isContextSensitive);\n        } else {\n          remainingContext = remainingContext.parent;\n        }\n      }\n      if (s0 == null) {\n        return void 0;\n      }\n      return new SimulatorState_1.SimulatorState(outerContext, s0, useContext, remainingContext);\n    }\n    execDFA(dfa, input, startIndex, state) {\n      let outerContext = state.outerContext;\n      if (ParserATNSimulator3.dfa_debug) {\n        console.log(\"DFA decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \", outerContext=\" + outerContext.toString(this._parser));\n      }\n      if (ParserATNSimulator3.dfa_debug) {\n        console.log(dfa.toString(this._parser.vocabulary, this._parser.ruleNames));\n      }\n      let s = state.s0;\n      let t = input.LA(1);\n      let remainingOuterContext = state.remainingOuterContext;\n      while (true) {\n        if (ParserATNSimulator3.dfa_debug) {\n          console.log(\"DFA state \" + s.stateNumber + \" LA(1)==\" + this.getLookaheadName(input));\n        }\n        if (state.useContext) {\n          while (s.isContextSymbol(t)) {\n            let next;\n            if (remainingOuterContext != null) {\n              remainingOuterContext = this.skipTailCalls(remainingOuterContext);\n              next = s.getContextTarget(this.getReturnState(remainingOuterContext));\n            }\n            if (next == null) {\n              let initialState = new SimulatorState_1.SimulatorState(state.outerContext, s, state.useContext, remainingOuterContext);\n              return this.execATN(dfa, input, startIndex, initialState);\n            }\n            assert(remainingOuterContext != null);\n            remainingOuterContext = remainingOuterContext.parent;\n            s = next;\n          }\n        }\n        if (this.isAcceptState(s, state.useContext)) {\n          if (s.predicates != null) {\n            if (ParserATNSimulator3.dfa_debug) {\n              console.log(\"accept \" + s);\n            }\n          } else {\n            if (ParserATNSimulator3.dfa_debug) {\n              console.log(\"accept; predict \" + s.prediction + \" in state \" + s.stateNumber);\n            }\n          }\n          break;\n        }\n        assert(!this.isAcceptState(s, state.useContext));\n        let target = this.getExistingTargetState(s, t);\n        if (target == null) {\n          if (ParserATNSimulator3.dfa_debug && t >= 0) {\n            console.log(\"no edge for \" + this._parser.vocabulary.getDisplayName(t));\n          }\n          let alt;\n          if (ParserATNSimulator3.dfa_debug) {\n            let interval = Interval_1.Interval.of(startIndex, this._parser.inputStream.index);\n            console.log(\"ATN exec upon \" + this._parser.inputStream.getText(interval) + \" at DFA state \" + s.stateNumber);\n          }\n          let initialState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);\n          alt = this.execATN(dfa, input, startIndex, initialState);\n          if (ParserATNSimulator3.dfa_debug) {\n            console.log(\"back from DFA update, alt=\" + alt + \", dfa=\\n\" + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));\n          }\n          if (ParserATNSimulator3.dfa_debug) {\n            console.log(\"DFA decision \" + dfa.decision + \" predicts \" + alt);\n          }\n          return alt;\n        } else if (target === ATNSimulator_1.ATNSimulator.ERROR) {\n          let errorState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);\n          return this.handleNoViableAlt(input, startIndex, errorState);\n        }\n        s = target;\n        if (!this.isAcceptState(s, state.useContext) && t !== IntStream_1.IntStream.EOF) {\n          input.consume();\n          t = input.LA(1);\n        }\n      }\n      if (!state.useContext && s.configs.conflictInfo != null) {\n        if (dfa.atnStartState instanceof DecisionState_1.DecisionState) {\n          if (!this.userWantsCtxSensitive || !s.configs.dipsIntoOuterContext && s.configs.isExactConflict || this.treat_sllk1_conflict_as_ambiguity && input.index === startIndex) {\n          } else {\n            assert(!state.useContext);\n            let conflictingAlts;\n            let predicates2 = s.predicates;\n            if (predicates2 != null) {\n              let conflictIndex = input.index;\n              if (conflictIndex !== startIndex) {\n                input.seek(startIndex);\n              }\n              conflictingAlts = this.evalSemanticContext(predicates2, outerContext, true);\n              if (conflictingAlts.cardinality() === 1) {\n                return conflictingAlts.nextSetBit(0);\n              }\n              if (conflictIndex !== startIndex) {\n                input.seek(conflictIndex);\n              }\n            }\n            if (this.reportAmbiguities) {\n              let conflictState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);\n              this.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, input.index);\n            }\n            input.seek(startIndex);\n            return this.adaptivePredict(input, dfa.decision, outerContext, true);\n          }\n        }\n      }\n      let predicates = s.predicates;\n      if (predicates != null) {\n        let stopIndex = input.index;\n        if (startIndex !== stopIndex) {\n          input.seek(startIndex);\n        }\n        let alts = this.evalSemanticContext(predicates, outerContext, this.reportAmbiguities && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION);\n        switch (alts.cardinality()) {\n          case 0:\n            throw this.noViableAlt(input, outerContext, s.configs, startIndex);\n          case 1:\n            return alts.nextSetBit(0);\n          default:\n            if (startIndex !== stopIndex) {\n              input.seek(stopIndex);\n            }\n            this.reportAmbiguity(dfa, s, startIndex, stopIndex, s.configs.isExactConflict, alts, s.configs);\n            return alts.nextSetBit(0);\n        }\n      }\n      if (ParserATNSimulator3.dfa_debug) {\n        console.log(\"DFA decision \" + dfa.decision + \" predicts \" + s.prediction);\n      }\n      return s.prediction;\n    }\n    isAcceptState(state, useContext) {\n      if (!state.isAcceptState) {\n        return false;\n      }\n      if (state.configs.conflictingAlts == null) {\n        return true;\n      }\n      if (useContext && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n        return state.configs.isExactConflict;\n      }\n      return true;\n    }\n    execATN(dfa, input, startIndex, initialState) {\n      if (ParserATNSimulator3.debug) {\n        console.log(\"execATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input));\n      }\n      let outerContext = initialState.outerContext;\n      let useContext = initialState.useContext;\n      let t = input.LA(1);\n      let previous = initialState;\n      let contextCache = new PredictionContextCache_1.PredictionContextCache();\n      while (true) {\n        let nextState = this.computeReachSet(dfa, previous, t, contextCache);\n        if (nextState == null) {\n          this.setDFAEdge(previous.s0, input.LA(1), ATNSimulator_1.ATNSimulator.ERROR);\n          return this.handleNoViableAlt(input, startIndex, previous);\n        }\n        let D = nextState.s0;\n        assert(D.isAcceptState || D.prediction === ATN_1.ATN.INVALID_ALT_NUMBER);\n        assert(D.isAcceptState || D.configs.conflictInfo == null);\n        if (this.isAcceptState(D, useContext)) {\n          let conflictingAlts = D.configs.conflictingAlts;\n          let predictedAlt = conflictingAlts == null ? D.prediction : ATN_1.ATN.INVALID_ALT_NUMBER;\n          if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\n            if (this.optimize_ll1 && input.index === startIndex && !dfa.isPrecedenceDfa && nextState.outerContext === nextState.remainingOuterContext && dfa.decision >= 0 && !D.configs.hasSemanticContext) {\n              if (t >= 0 && t <= MAX_SHORT_VALUE) {\n                let key = (dfa.decision << 16 >>> 0) + t;\n                this.atn.LL1Table.set(key, predictedAlt);\n              }\n            }\n            if (useContext && this.always_try_local_context) {\n              this.reportContextSensitivity(dfa, predictedAlt, nextState, startIndex, input.index);\n            }\n          }\n          predictedAlt = D.prediction;\n          let attemptFullContext = conflictingAlts != null && this.userWantsCtxSensitive;\n          if (attemptFullContext) {\n            attemptFullContext = !useContext && (D.configs.dipsIntoOuterContext || !D.configs.isExactConflict) && (!this.treat_sllk1_conflict_as_ambiguity || input.index !== startIndex);\n          }\n          if (D.configs.hasSemanticContext) {\n            let predPredictions = D.predicates;\n            if (predPredictions != null) {\n              let conflictIndex = input.index;\n              if (conflictIndex !== startIndex) {\n                input.seek(startIndex);\n              }\n              conflictingAlts = this.evalSemanticContext(predPredictions, outerContext, attemptFullContext || this.reportAmbiguities);\n              switch (conflictingAlts.cardinality()) {\n                case 0:\n                  throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n                case 1:\n                  return conflictingAlts.nextSetBit(0);\n                default:\n                  break;\n              }\n              if (conflictIndex !== startIndex) {\n                input.seek(conflictIndex);\n              }\n            }\n          }\n          if (!attemptFullContext) {\n            if (conflictingAlts != null) {\n              if (this.reportAmbiguities && conflictingAlts.cardinality() > 1) {\n                this.reportAmbiguity(dfa, D, startIndex, input.index, D.configs.isExactConflict, conflictingAlts, D.configs);\n              }\n              predictedAlt = conflictingAlts.nextSetBit(0);\n            }\n            return predictedAlt;\n          } else {\n            assert(!useContext);\n            assert(this.isAcceptState(D, false));\n            if (ParserATNSimulator3.debug) {\n              console.log(\"RETRY with outerContext=\" + outerContext);\n            }\n            let fullContextState = this.computeStartState(dfa, outerContext, true);\n            if (this.reportAmbiguities) {\n              this.reportAttemptingFullContext(dfa, conflictingAlts, nextState, startIndex, input.index);\n            }\n            input.seek(startIndex);\n            return this.execATN(dfa, input, startIndex, fullContextState);\n          }\n        }\n        previous = nextState;\n        if (t !== IntStream_1.IntStream.EOF) {\n          input.consume();\n          t = input.LA(1);\n        }\n      }\n    }\n    handleNoViableAlt(input, startIndex, previous) {\n      if (previous.s0 != null) {\n        let alts = new BitSet_1.BitSet();\n        let maxAlt = 0;\n        for (let config of previous.s0.configs) {\n          if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {\n            alts.set(config.alt);\n            maxAlt = Math.max(maxAlt, config.alt);\n          }\n        }\n        switch (alts.cardinality()) {\n          case 0:\n            break;\n          case 1:\n            return alts.nextSetBit(0);\n          default:\n            if (!previous.s0.configs.hasSemanticContext) {\n              return alts.nextSetBit(0);\n            }\n            let filteredConfigs = new ATNConfigSet_1.ATNConfigSet();\n            for (let config of previous.s0.configs) {\n              if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {\n                filteredConfigs.add(config);\n              }\n            }\n            let altToPred = this.getPredsForAmbigAlts(alts, filteredConfigs, maxAlt);\n            if (altToPred != null) {\n              let predicates = this.getPredicatePredictions(alts, altToPred);\n              if (predicates != null) {\n                let stopIndex = input.index;\n                try {\n                  input.seek(startIndex);\n                  let filteredAlts = this.evalSemanticContext(predicates, previous.outerContext, false);\n                  if (!filteredAlts.isEmpty) {\n                    return filteredAlts.nextSetBit(0);\n                  }\n                } finally {\n                  input.seek(stopIndex);\n                }\n              }\n            }\n            return alts.nextSetBit(0);\n        }\n      }\n      throw this.noViableAlt(input, previous.outerContext, previous.s0.configs, startIndex);\n    }\n    computeReachSet(dfa, previous, t, contextCache) {\n      let useContext = previous.useContext;\n      let remainingGlobalContext = previous.remainingOuterContext;\n      let s = previous.s0;\n      if (useContext) {\n        while (s.isContextSymbol(t)) {\n          let next;\n          if (remainingGlobalContext != null) {\n            remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);\n            next = s.getContextTarget(this.getReturnState(remainingGlobalContext));\n          }\n          if (next == null) {\n            break;\n          }\n          assert(remainingGlobalContext != null);\n          remainingGlobalContext = remainingGlobalContext.parent;\n          s = next;\n        }\n      }\n      assert(!this.isAcceptState(s, useContext));\n      if (this.isAcceptState(s, useContext)) {\n        return new SimulatorState_1.SimulatorState(previous.outerContext, s, useContext, remainingGlobalContext);\n      }\n      let s0 = s;\n      let target = this.getExistingTargetState(s0, t);\n      if (target == null) {\n        let result = this.computeTargetState(dfa, s0, remainingGlobalContext, t, useContext, contextCache);\n        target = result[0];\n        remainingGlobalContext = result[1];\n      }\n      if (target === ATNSimulator_1.ATNSimulator.ERROR) {\n        return void 0;\n      }\n      assert(!useContext || !target.configs.dipsIntoOuterContext);\n      return new SimulatorState_1.SimulatorState(previous.outerContext, target, useContext, remainingGlobalContext);\n    }\n    getExistingTargetState(s, t) {\n      return s.getTarget(t);\n    }\n    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {\n      let closureConfigs = s.configs.toArray();\n      let contextElements;\n      let reach = new ATNConfigSet_1.ATNConfigSet();\n      let stepIntoGlobal;\n      do {\n        let hasMoreContext = !useContext || remainingGlobalContext != null;\n        if (!hasMoreContext) {\n          reach.isOutermostConfigSet = true;\n        }\n        let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();\n        let skippedStopStates;\n        for (let c of closureConfigs) {\n          if (ParserATNSimulator3.debug) {\n            console.log(\"testing \" + this.getTokenName(t) + \" at \" + c.toString());\n          }\n          if (c.state instanceof RuleStopState_1.RuleStopState) {\n            assert(c.context.isEmpty);\n            if (useContext && !c.reachesIntoOuterContext || t === IntStream_1.IntStream.EOF) {\n              if (skippedStopStates == null) {\n                skippedStopStates = [];\n              }\n              skippedStopStates.push(c);\n            }\n            continue;\n          }\n          let n = c.state.numberOfOptimizedTransitions;\n          for (let ti = 0; ti < n; ti++) {\n            let trans = c.state.getOptimizedTransition(ti);\n            let target = this.getReachableTarget(c, trans, t);\n            if (target != null) {\n              reachIntermediate.add(c.transform(target, false), contextCache);\n            }\n          }\n        }\n        if (this.optimize_unique_closure && skippedStopStates == null && t !== Token_1.Token.EOF && reachIntermediate.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\n          reachIntermediate.isOutermostConfigSet = reach.isOutermostConfigSet;\n          reach = reachIntermediate;\n          break;\n        }\n        let collectPredicates = false;\n        let treatEofAsEpsilon = t === Token_1.Token.EOF;\n        this.closure(reachIntermediate, reach, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon);\n        stepIntoGlobal = reach.dipsIntoOuterContext;\n        if (t === IntStream_1.IntStream.EOF) {\n          reach = this.removeAllConfigsNotInRuleStopState(reach, contextCache);\n        }\n        if (skippedStopStates != null && (!useContext || !PredictionMode_1.PredictionMode.hasConfigInRuleStopState(reach))) {\n          assert(skippedStopStates.length > 0);\n          for (let c of skippedStopStates) {\n            reach.add(c, contextCache);\n          }\n        }\n        if (useContext && stepIntoGlobal) {\n          reach.clear();\n          remainingGlobalContext = remainingGlobalContext;\n          remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);\n          let nextContextElement = this.getReturnState(remainingGlobalContext);\n          if (contextElements == null) {\n            contextElements = new IntegerList_1.IntegerList();\n          }\n          if (remainingGlobalContext.isEmpty) {\n            remainingGlobalContext = void 0;\n          } else {\n            remainingGlobalContext = remainingGlobalContext.parent;\n          }\n          contextElements.add(nextContextElement);\n          if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n            for (let i = 0; i < closureConfigs.length; i++) {\n              closureConfigs[i] = closureConfigs[i].appendContext(nextContextElement, contextCache);\n            }\n          }\n        }\n      } while (useContext && stepIntoGlobal);\n      if (reach.isEmpty) {\n        this.setDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);\n        return [ATNSimulator_1.ATNSimulator.ERROR, remainingGlobalContext];\n      }\n      let result = this.addDFAEdge(dfa, s, t, contextElements, reach, contextCache);\n      return [result, remainingGlobalContext];\n    }\n    removeAllConfigsNotInRuleStopState(configs, contextCache) {\n      if (PredictionMode_1.PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return configs;\n      }\n      let result = new ATNConfigSet_1.ATNConfigSet();\n      for (let config of configs) {\n        if (!(config.state instanceof RuleStopState_1.RuleStopState)) {\n          continue;\n        }\n        result.add(config, contextCache);\n      }\n      return result;\n    }\n    computeStartState(dfa, globalContext, useContext) {\n      let s0 = dfa.isPrecedenceDfa ? dfa.getPrecedenceStartState(this._parser.precedence, useContext) : useContext ? dfa.s0full : dfa.s0;\n      if (s0 != null) {\n        if (!useContext) {\n          return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, globalContext);\n        }\n        s0.setContextSensitive(this.atn);\n      }\n      let decision = dfa.decision;\n      let p = dfa.atnStartState;\n      let previousContext = 0;\n      let remainingGlobalContext = globalContext;\n      let initialContext = useContext ? PredictionContext_1.PredictionContext.EMPTY_FULL : PredictionContext_1.PredictionContext.EMPTY_LOCAL;\n      let contextCache = new PredictionContextCache_1.PredictionContextCache();\n      if (useContext) {\n        if (!this.enable_global_context_dfa) {\n          while (remainingGlobalContext != null) {\n            if (remainingGlobalContext.isEmpty) {\n              previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;\n              remainingGlobalContext = void 0;\n            } else {\n              previousContext = this.getReturnState(remainingGlobalContext);\n              initialContext = initialContext.appendSingleContext(previousContext, contextCache);\n              remainingGlobalContext = remainingGlobalContext.parent;\n            }\n          }\n        }\n        while (s0 != null && s0.isContextSensitive && remainingGlobalContext != null) {\n          let next;\n          remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);\n          if (remainingGlobalContext.isEmpty) {\n            next = s0.getContextTarget(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY);\n            previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;\n            remainingGlobalContext = void 0;\n          } else {\n            previousContext = this.getReturnState(remainingGlobalContext);\n            next = s0.getContextTarget(previousContext);\n            initialContext = initialContext.appendSingleContext(previousContext, contextCache);\n            remainingGlobalContext = remainingGlobalContext.parent;\n          }\n          if (next == null) {\n            break;\n          }\n          s0 = next;\n        }\n      }\n      if (s0 != null && !s0.isContextSensitive) {\n        return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);\n      }\n      let configs = new ATNConfigSet_1.ATNConfigSet();\n      while (true) {\n        let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();\n        let n = p.numberOfTransitions;\n        for (let ti = 0; ti < n; ti++) {\n          let target = p.transition(ti).target;\n          reachIntermediate.add(ATNConfig_1.ATNConfig.create(target, ti + 1, initialContext));\n        }\n        let hasMoreContext = remainingGlobalContext != null;\n        if (!hasMoreContext) {\n          configs.isOutermostConfigSet = true;\n        }\n        let collectPredicates = true;\n        this.closure(reachIntermediate, configs, collectPredicates, hasMoreContext, contextCache, false);\n        let stepIntoGlobal = configs.dipsIntoOuterContext;\n        let next;\n        if (useContext && !this.enable_global_context_dfa) {\n          s0 = this.addDFAState(dfa, configs, contextCache);\n          break;\n        } else if (s0 == null) {\n          if (!dfa.isPrecedenceDfa) {\n            next = this.addDFAState(dfa, configs, contextCache);\n            if (useContext) {\n              if (!dfa.s0full) {\n                dfa.s0full = next;\n              } else {\n                next = dfa.s0full;\n              }\n            } else {\n              if (!dfa.s0) {\n                dfa.s0 = next;\n              } else {\n                next = dfa.s0;\n              }\n            }\n          } else {\n            configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);\n            next = this.addDFAState(dfa, configs, contextCache);\n            dfa.setPrecedenceStartState(this._parser.precedence, useContext, next);\n          }\n        } else {\n          if (dfa.isPrecedenceDfa) {\n            configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);\n          }\n          next = this.addDFAState(dfa, configs, contextCache);\n          s0.setContextTarget(previousContext, next);\n        }\n        s0 = next;\n        if (!useContext || !stepIntoGlobal) {\n          break;\n        }\n        next.setContextSensitive(this.atn);\n        remainingGlobalContext = remainingGlobalContext;\n        configs.clear();\n        remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);\n        let nextContextElement = this.getReturnState(remainingGlobalContext);\n        if (remainingGlobalContext.isEmpty) {\n          remainingGlobalContext = void 0;\n        } else {\n          remainingGlobalContext = remainingGlobalContext.parent;\n        }\n        if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n          initialContext = initialContext.appendSingleContext(nextContextElement, contextCache);\n        }\n        previousContext = nextContextElement;\n      }\n      return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);\n    }\n    applyPrecedenceFilter(configs, globalContext, contextCache) {\n      let statesFromAlt1 = new Map();\n      let configSet = new ATNConfigSet_1.ATNConfigSet();\n      for (let config of configs) {\n        if (config.alt !== 1) {\n          continue;\n        }\n        let updatedContext = config.semanticContext.evalPrecedence(this._parser, globalContext);\n        if (updatedContext == null) {\n          continue;\n        }\n        statesFromAlt1.set(config.state.stateNumber, config.context);\n        if (updatedContext !== config.semanticContext) {\n          configSet.add(config.transform(config.state, false, updatedContext), contextCache);\n        } else {\n          configSet.add(config, contextCache);\n        }\n      }\n      for (let config of configs) {\n        if (config.alt === 1) {\n          continue;\n        }\n        if (!config.isPrecedenceFilterSuppressed) {\n          let context = statesFromAlt1.get(config.state.stateNumber);\n          if (context != null && context.equals(config.context)) {\n            continue;\n          }\n        }\n        configSet.add(config, contextCache);\n      }\n      return configSet;\n    }\n    getReachableTarget(source, trans, ttype) {\n      if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n        return trans.target;\n      }\n      return void 0;\n    }\n    predicateDFAState(D, configs, nalts) {\n      let conflictingAlts = this.getConflictingAltsFromConfigSet(configs);\n      if (!conflictingAlts) {\n        throw new Error(\"This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.\");\n      }\n      if (ParserATNSimulator3.debug) {\n        console.log(\"predicateDFAState \" + D);\n      }\n      let altToPred = this.getPredsForAmbigAlts(conflictingAlts, configs, nalts);\n      let predPredictions;\n      if (altToPred != null) {\n        predPredictions = this.getPredicatePredictions(conflictingAlts, altToPred);\n        D.predicates = predPredictions;\n      }\n      return predPredictions;\n    }\n    getPredsForAmbigAlts(ambigAlts, configs, nalts) {\n      let altToPred = new Array(nalts + 1);\n      let n = altToPred.length;\n      for (let c of configs) {\n        if (ambigAlts.get(c.alt)) {\n          altToPred[c.alt] = SemanticContext_1.SemanticContext.or(altToPred[c.alt], c.semanticContext);\n        }\n      }\n      let nPredAlts = 0;\n      for (let i = 0; i < n; i++) {\n        if (altToPred[i] == null) {\n          altToPred[i] = SemanticContext_1.SemanticContext.NONE;\n        } else if (altToPred[i] !== SemanticContext_1.SemanticContext.NONE) {\n          nPredAlts++;\n        }\n      }\n      let result = altToPred;\n      if (nPredAlts === 0) {\n        result = void 0;\n      }\n      if (ParserATNSimulator3.debug) {\n        console.log(\"getPredsForAmbigAlts result \" + (result ? Arrays_1.Arrays.toString(result) : \"undefined\"));\n      }\n      return result;\n    }\n    getPredicatePredictions(ambigAlts, altToPred) {\n      let pairs = [];\n      let containsPredicate = false;\n      for (let i = 1; i < altToPred.length; i++) {\n        let pred = altToPred[i];\n        assert(pred != null);\n        if (ambigAlts != null && ambigAlts.get(i) && pred === SemanticContext_1.SemanticContext.NONE) {\n          pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));\n        } else if (pred !== SemanticContext_1.SemanticContext.NONE) {\n          containsPredicate = true;\n          pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));\n        }\n      }\n      if (!containsPredicate) {\n        return void 0;\n      }\n      return pairs;\n    }\n    evalSemanticContext(predPredictions, outerContext, complete) {\n      let predictions = new BitSet_1.BitSet();\n      for (let pair of predPredictions) {\n        if (pair.pred === SemanticContext_1.SemanticContext.NONE) {\n          predictions.set(pair.alt);\n          if (!complete) {\n            break;\n          }\n          continue;\n        }\n        let evaluatedResult = this.evalSemanticContextImpl(pair.pred, outerContext, pair.alt);\n        if (ParserATNSimulator3.debug || ParserATNSimulator3.dfa_debug) {\n          console.log(\"eval pred \" + pair + \"=\" + evaluatedResult);\n        }\n        if (evaluatedResult) {\n          if (ParserATNSimulator3.debug || ParserATNSimulator3.dfa_debug) {\n            console.log(\"PREDICT \" + pair.alt);\n          }\n          predictions.set(pair.alt);\n          if (!complete) {\n            break;\n          }\n        }\n      }\n      return predictions;\n    }\n    evalSemanticContextImpl(pred, parserCallStack, alt) {\n      return pred.eval(this._parser, parserCallStack);\n    }\n    closure(sourceConfigs, configs, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon) {\n      if (contextCache == null) {\n        contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;\n      }\n      let currentConfigs = sourceConfigs;\n      let closureBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n      while (currentConfigs.size > 0) {\n        let intermediate = new ATNConfigSet_1.ATNConfigSet();\n        for (let config of currentConfigs) {\n          this.closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContext, contextCache, 0, treatEofAsEpsilon);\n        }\n        currentConfigs = intermediate;\n      }\n    }\n    closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth, treatEofAsEpsilon) {\n      if (ParserATNSimulator3.debug) {\n        console.log(\"closure(\" + config.toString(this._parser, true) + \")\");\n      }\n      if (config.state instanceof RuleStopState_1.RuleStopState) {\n        if (!config.context.isEmpty) {\n          let hasEmpty = config.context.hasEmpty;\n          let nonEmptySize = config.context.size - (hasEmpty ? 1 : 0);\n          for (let i = 0; i < nonEmptySize; i++) {\n            let newContext = config.context.getParent(i);\n            let returnState = this.atn.states[config.context.getReturnState(i)];\n            let c = ATNConfig_1.ATNConfig.create(returnState, config.alt, newContext, config.semanticContext);\n            c.outerContextDepth = config.outerContextDepth;\n            c.isPrecedenceFilterSuppressed = config.isPrecedenceFilterSuppressed;\n            assert(depth > MIN_INTEGER_VALUE);\n            this.closureImpl(c, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth - 1, treatEofAsEpsilon);\n          }\n          if (!hasEmpty || !hasMoreContexts) {\n            return;\n          }\n          config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);\n        } else if (!hasMoreContexts) {\n          configs.add(config, contextCache);\n          return;\n        } else {\n          if (ParserATNSimulator3.debug) {\n            console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n          }\n          if (config.context === PredictionContext_1.PredictionContext.EMPTY_FULL) {\n            config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);\n          } else if (!config.reachesIntoOuterContext && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {\n            configs.add(config, contextCache);\n          }\n        }\n      }\n      let p = config.state;\n      if (!p.onlyHasEpsilonTransitions) {\n        configs.add(config, contextCache);\n        if (ParserATNSimulator3.debug) {\n          console.log(\"added config \" + configs);\n        }\n      }\n      for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {\n        if (i === 0 && p.stateType === ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY && p.precedenceRuleDecision && !config.context.hasEmpty) {\n          let precedenceDecision = p;\n          let suppress = true;\n          for (let j = 0; j < config.context.size; j++) {\n            if (!precedenceDecision.precedenceLoopbackStates.get(config.context.getReturnState(j))) {\n              suppress = false;\n              break;\n            }\n          }\n          if (suppress) {\n            continue;\n          }\n        }\n        let t = p.getOptimizedTransition(i);\n        let continueCollecting = !(t instanceof ActionTransition_1.ActionTransition) && collectPredicates;\n        let c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, contextCache, treatEofAsEpsilon);\n        if (c != null) {\n          if (t instanceof RuleTransition_1.RuleTransition) {\n            if (intermediate != null && !collectPredicates) {\n              intermediate.add(c, contextCache);\n              continue;\n            }\n          }\n          let newDepth = depth;\n          if (config.state instanceof RuleStopState_1.RuleStopState) {\n            if (this.dfa != null && this.dfa.isPrecedenceDfa) {\n              let outermostPrecedenceReturn = t.outermostPrecedenceReturn;\n              if (outermostPrecedenceReturn === this.dfa.atnStartState.ruleIndex) {\n                c.isPrecedenceFilterSuppressed = true;\n              }\n            }\n            c.outerContextDepth = c.outerContextDepth + 1;\n            if (!closureBusy.add(c)) {\n              continue;\n            }\n            assert(newDepth > MIN_INTEGER_VALUE);\n            newDepth--;\n            if (ParserATNSimulator3.debug) {\n              console.log(\"dips into outer ctx: \" + c);\n            }\n          } else if (t instanceof RuleTransition_1.RuleTransition) {\n            if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {\n              assert(c.context === config.context);\n              if (newDepth === 0) {\n                newDepth--;\n                if (!this.tail_call_preserves_sll && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {\n                  c.outerContextDepth = c.outerContextDepth + 1;\n                }\n              }\n            } else {\n              if (newDepth >= 0) {\n                newDepth++;\n              }\n            }\n          } else {\n            if (!t.isEpsilon && !closureBusy.add(c)) {\n              continue;\n            }\n          }\n          this.closureImpl(c, configs, intermediate, closureBusy, continueCollecting, hasMoreContexts, contextCache, newDepth, treatEofAsEpsilon);\n        }\n      }\n    }\n    getRuleName(index) {\n      if (this._parser != null && index >= 0) {\n        return this._parser.ruleNames[index];\n      }\n      return \"<rule \" + index + \">\";\n    }\n    getEpsilonTarget(config, t, collectPredicates, inContext, contextCache, treatEofAsEpsilon) {\n      switch (t.serializationType) {\n        case 3:\n          return this.ruleTransition(config, t, contextCache);\n        case 10:\n          return this.precedenceTransition(config, t, collectPredicates, inContext);\n        case 4:\n          return this.predTransition(config, t, collectPredicates, inContext);\n        case 6:\n          return this.actionTransition(config, t);\n        case 1:\n          return config.transform(t.target, false);\n        case 5:\n        case 2:\n        case 7:\n          if (treatEofAsEpsilon) {\n            if (t.matches(Token_1.Token.EOF, 0, 1)) {\n              return config.transform(t.target, false);\n            }\n          }\n          return void 0;\n        default:\n          return void 0;\n      }\n    }\n    actionTransition(config, t) {\n      if (ParserATNSimulator3.debug) {\n        console.log(\"ACTION edge \" + t.ruleIndex + \":\" + t.actionIndex);\n      }\n      return config.transform(t.target, false);\n    }\n    precedenceTransition(config, pt, collectPredicates, inContext) {\n      if (ParserATNSimulator3.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.precedence + \">=_p, ctx dependent=true\");\n        if (this._parser != null) {\n          console.log(\"context surrounding pred is \" + this._parser.getRuleInvocationStack());\n        }\n      }\n      let c;\n      if (collectPredicates && inContext) {\n        let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);\n        c = config.transform(pt.target, false, newSemCtx);\n      } else {\n        c = config.transform(pt.target, false);\n      }\n      if (ParserATNSimulator3.debug) {\n        console.log(\"config from pred transition=\" + c);\n      }\n      return c;\n    }\n    predTransition(config, pt, collectPredicates, inContext) {\n      if (ParserATNSimulator3.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex + \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n        if (this._parser != null) {\n          console.log(\"context surrounding pred is \" + this._parser.getRuleInvocationStack());\n        }\n      }\n      let c;\n      if (collectPredicates && (!pt.isCtxDependent || pt.isCtxDependent && inContext)) {\n        let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);\n        c = config.transform(pt.target, false, newSemCtx);\n      } else {\n        c = config.transform(pt.target, false);\n      }\n      if (ParserATNSimulator3.debug) {\n        console.log(\"config from pred transition=\" + c);\n      }\n      return c;\n    }\n    ruleTransition(config, t, contextCache) {\n      if (ParserATNSimulator3.debug) {\n        console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n      }\n      let returnState = t.followState;\n      let newContext;\n      if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {\n        newContext = config.context;\n      } else if (contextCache != null) {\n        newContext = contextCache.getChild(config.context, returnState.stateNumber);\n      } else {\n        newContext = config.context.getChild(returnState.stateNumber);\n      }\n      return config.transform(t.target, false, newContext);\n    }\n    isConflicted(configset, contextCache) {\n      if (configset.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER || configset.size <= 1) {\n        return void 0;\n      }\n      let configs = configset.toArray();\n      configs.sort(ParserATNSimulator3.STATE_ALT_SORT_COMPARATOR);\n      let exact = !configset.dipsIntoOuterContext;\n      let alts = new BitSet_1.BitSet();\n      let minAlt = configs[0].alt;\n      alts.set(minAlt);\n      let currentState = configs[0].state.nonStopStateNumber;\n      for (let config of configs) {\n        let stateNumber = config.state.nonStopStateNumber;\n        if (stateNumber !== currentState) {\n          if (config.alt !== minAlt) {\n            return void 0;\n          }\n          currentState = stateNumber;\n        }\n      }\n      let representedAlts;\n      if (exact) {\n        currentState = configs[0].state.nonStopStateNumber;\n        representedAlts = new BitSet_1.BitSet();\n        let maxAlt = minAlt;\n        for (let config of configs) {\n          if (config.state.nonStopStateNumber !== currentState) {\n            break;\n          }\n          let alt = config.alt;\n          representedAlts.set(alt);\n          maxAlt = alt;\n        }\n        currentState = configs[0].state.nonStopStateNumber;\n        let currentAlt = minAlt;\n        for (let config of configs) {\n          let stateNumber = config.state.nonStopStateNumber;\n          let alt = config.alt;\n          if (stateNumber !== currentState) {\n            if (currentAlt !== maxAlt) {\n              exact = false;\n              break;\n            }\n            currentState = stateNumber;\n            currentAlt = minAlt;\n          } else if (alt !== currentAlt) {\n            if (alt !== representedAlts.nextSetBit(currentAlt + 1)) {\n              exact = false;\n              break;\n            }\n            currentAlt = alt;\n          }\n        }\n      }\n      currentState = configs[0].state.nonStopStateNumber;\n      let firstIndexCurrentState = 0;\n      let lastIndexCurrentStateMinAlt = 0;\n      let joinedCheckContext = configs[0].context;\n      for (let i = 1; i < configs.length; i++) {\n        let config = configs[i];\n        if (config.alt !== minAlt) {\n          break;\n        }\n        if (config.state.nonStopStateNumber !== currentState) {\n          break;\n        }\n        lastIndexCurrentStateMinAlt = i;\n        joinedCheckContext = contextCache.join(joinedCheckContext, configs[i].context);\n      }\n      for (let i = lastIndexCurrentStateMinAlt + 1; i < configs.length; i++) {\n        let config = configs[i];\n        let state = config.state;\n        alts.set(config.alt);\n        if (state.nonStopStateNumber !== currentState) {\n          currentState = state.nonStopStateNumber;\n          firstIndexCurrentState = i;\n          lastIndexCurrentStateMinAlt = i;\n          joinedCheckContext = config.context;\n          for (let j = firstIndexCurrentState + 1; j < configs.length; j++) {\n            let config2 = configs[j];\n            if (config2.alt !== minAlt) {\n              break;\n            }\n            if (config2.state.nonStopStateNumber !== currentState) {\n              break;\n            }\n            lastIndexCurrentStateMinAlt = j;\n            joinedCheckContext = contextCache.join(joinedCheckContext, config2.context);\n          }\n          i = lastIndexCurrentStateMinAlt;\n          continue;\n        }\n        let joinedCheckContext2 = config.context;\n        let currentAlt = config.alt;\n        let lastIndexCurrentStateCurrentAlt = i;\n        for (let j = lastIndexCurrentStateCurrentAlt + 1; j < configs.length; j++) {\n          let config2 = configs[j];\n          if (config2.alt !== currentAlt) {\n            break;\n          }\n          if (config2.state.nonStopStateNumber !== currentState) {\n            break;\n          }\n          lastIndexCurrentStateCurrentAlt = j;\n          joinedCheckContext2 = contextCache.join(joinedCheckContext2, config2.context);\n        }\n        i = lastIndexCurrentStateCurrentAlt;\n        let check = contextCache.join(joinedCheckContext, joinedCheckContext2);\n        if (!joinedCheckContext.equals(check)) {\n          return void 0;\n        }\n        exact = exact && joinedCheckContext.equals(joinedCheckContext2);\n      }\n      return new ConflictInfo_1.ConflictInfo(alts, exact);\n    }\n    getConflictingAltsFromConfigSet(configs) {\n      let conflictingAlts = configs.conflictingAlts;\n      if (conflictingAlts == null && configs.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\n        conflictingAlts = new BitSet_1.BitSet();\n        conflictingAlts.set(configs.uniqueAlt);\n      }\n      return conflictingAlts;\n    }\n    getTokenName(t) {\n      if (t === Token_1.Token.EOF) {\n        return \"EOF\";\n      }\n      let vocabulary = this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;\n      let displayName = vocabulary.getDisplayName(t);\n      if (displayName === String(t)) {\n        return displayName;\n      }\n      return displayName + \"<\" + t + \">\";\n    }\n    getLookaheadName(input) {\n      return this.getTokenName(input.LA(1));\n    }\n    dumpDeadEndConfigs(nvae) {\n      console.log(\"dead end configs: \");\n      let deadEndConfigs = nvae.deadEndConfigs;\n      if (!deadEndConfigs) {\n        return;\n      }\n      for (let c of deadEndConfigs) {\n        let trans = \"no edges\";\n        if (c.state.numberOfOptimizedTransitions > 0) {\n          let t = c.state.getOptimizedTransition(0);\n          if (t instanceof AtomTransition_1.AtomTransition) {\n            trans = \"Atom \" + this.getTokenName(t._label);\n          } else if (t instanceof SetTransition_1.SetTransition) {\n            let not = t instanceof NotSetTransition_1.NotSetTransition;\n            trans = (not ? \"~\" : \"\") + \"Set \" + t.set.toString();\n          }\n        }\n        console.log(c.toString(this._parser, true) + \":\" + trans);\n      }\n    }\n    noViableAlt(input, outerContext, configs, startIndex) {\n      return new NoViableAltException_1.NoViableAltException(this._parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n    }\n    getUniqueAlt(configs) {\n      let alt = ATN_1.ATN.INVALID_ALT_NUMBER;\n      for (let c of configs) {\n        if (alt === ATN_1.ATN.INVALID_ALT_NUMBER) {\n          alt = c.alt;\n        } else if (c.alt !== alt) {\n          return ATN_1.ATN.INVALID_ALT_NUMBER;\n        }\n      }\n      return alt;\n    }\n    configWithAltAtStopState(configs, alt) {\n      for (let c of configs) {\n        if (c.alt === alt) {\n          if (c.state instanceof RuleStopState_1.RuleStopState) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    addDFAEdge(dfa, fromState, t, contextTransitions, toConfigs, contextCache) {\n      assert(contextTransitions == null || contextTransitions.isEmpty || dfa.isContextSensitive);\n      let from = fromState;\n      let to = this.addDFAState(dfa, toConfigs, contextCache);\n      if (contextTransitions != null) {\n        for (let context of contextTransitions.toArray()) {\n          if (context === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n            if (from.configs.isOutermostConfigSet) {\n              continue;\n            }\n          }\n          from.setContextSensitive(this.atn);\n          from.setContextSymbol(t);\n          let next = from.getContextTarget(context);\n          if (next != null) {\n            from = next;\n            continue;\n          }\n          next = this.addDFAContextState(dfa, from.configs, context, contextCache);\n          assert(context !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY || next.configs.isOutermostConfigSet);\n          from.setContextTarget(context, next);\n          from = next;\n        }\n      }\n      if (ParserATNSimulator3.debug) {\n        console.log(\"EDGE \" + from + \" -> \" + to + \" upon \" + this.getTokenName(t));\n      }\n      this.setDFAEdge(from, t, to);\n      if (ParserATNSimulator3.debug) {\n        console.log(\"DFA=\\n\" + dfa.toString(this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY, this._parser != null ? this._parser.ruleNames : void 0));\n      }\n      return to;\n    }\n    setDFAEdge(p, t, q) {\n      if (p != null) {\n        p.setTarget(t, q);\n      }\n    }\n    addDFAContextState(dfa, configs, returnContext, contextCache) {\n      if (returnContext !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n        let contextConfigs = new ATNConfigSet_1.ATNConfigSet();\n        for (let config of configs) {\n          contextConfigs.add(config.appendContext(returnContext, contextCache));\n        }\n        return this.addDFAState(dfa, contextConfigs, contextCache);\n      } else {\n        assert(!configs.isOutermostConfigSet, \"Shouldn't be adding a duplicate edge.\");\n        configs = configs.clone(true);\n        configs.isOutermostConfigSet = true;\n        return this.addDFAState(dfa, configs, contextCache);\n      }\n    }\n    addDFAState(dfa, configs, contextCache) {\n      let enableDfa = this.enable_global_context_dfa || !configs.isOutermostConfigSet;\n      if (enableDfa) {\n        if (!configs.isReadOnly) {\n          configs.optimizeConfigs(this);\n        }\n        let proposed = this.createDFAState(dfa, configs);\n        let existing = dfa.states.get(proposed);\n        if (existing != null) {\n          return existing;\n        }\n      }\n      if (!configs.isReadOnly) {\n        if (configs.conflictInfo == null) {\n          configs.conflictInfo = this.isConflicted(configs, contextCache);\n        }\n      }\n      let newState = this.createDFAState(dfa, configs.clone(true));\n      let decisionState = this.atn.getDecisionState(dfa.decision);\n      let predictedAlt = this.getUniqueAlt(configs);\n      if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\n        newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(predictedAlt);\n      } else if (configs.conflictingAlts != null) {\n        let conflictingAlts = configs.conflictingAlts;\n        if (conflictingAlts) {\n          newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(conflictingAlts.nextSetBit(0));\n        }\n      }\n      if (newState.isAcceptState && configs.hasSemanticContext) {\n        this.predicateDFAState(newState, configs, decisionState.numberOfTransitions);\n      }\n      if (!enableDfa) {\n        return newState;\n      }\n      let added = dfa.addState(newState);\n      if (ParserATNSimulator3.debug && added === newState) {\n        console.log(\"adding new DFA state: \" + newState);\n      }\n      return added;\n    }\n    createDFAState(dfa, configs) {\n      return new DFAState_1.DFAState(configs);\n    }\n    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {\n      if (ParserATNSimulator3.debug || ParserATNSimulator3.retry_debug) {\n        let interval = Interval_1.Interval.of(startIndex, stopIndex);\n        console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + conflictState.s0.configs + \", input=\" + this._parser.inputStream.getText(interval));\n      }\n      if (this._parser != null) {\n        let listener = this._parser.getErrorListenerDispatch();\n        if (listener.reportAttemptingFullContext) {\n          listener.reportAttemptingFullContext(this._parser, dfa, startIndex, stopIndex, conflictingAlts, conflictState);\n        }\n      }\n    }\n    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {\n      if (ParserATNSimulator3.debug || ParserATNSimulator3.retry_debug) {\n        let interval = Interval_1.Interval.of(startIndex, stopIndex);\n        console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + acceptState.s0.configs + \", input=\" + this._parser.inputStream.getText(interval));\n      }\n      if (this._parser != null) {\n        let listener = this._parser.getErrorListenerDispatch();\n        if (listener.reportContextSensitivity) {\n          listener.reportContextSensitivity(this._parser, dfa, startIndex, stopIndex, prediction, acceptState);\n        }\n      }\n    }\n    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n      if (ParserATNSimulator3.debug || ParserATNSimulator3.retry_debug) {\n        let interval = Interval_1.Interval.of(startIndex, stopIndex);\n        console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs + \", input=\" + this._parser.inputStream.getText(interval));\n      }\n      if (this._parser != null) {\n        let listener = this._parser.getErrorListenerDispatch();\n        if (listener.reportAmbiguity) {\n          listener.reportAmbiguity(this._parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n        }\n      }\n    }\n    getReturnState(context) {\n      if (context.isEmpty) {\n        return PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;\n      }\n      let state = this.atn.states[context.invokingState];\n      let transition = state.transition(0);\n      return transition.followState.stateNumber;\n    }\n    skipTailCalls(context) {\n      if (!this.optimize_tail_calls) {\n        return context;\n      }\n      while (!context.isEmpty) {\n        let state = this.atn.states[context.invokingState];\n        assert(state.numberOfTransitions === 1 && state.transition(0).serializationType === 3);\n        let transition = state.transition(0);\n        if (!transition.tailCall) {\n          break;\n        }\n        context = context.parent;\n      }\n      return context;\n    }\n    get parser() {\n      return this._parser;\n    }\n  };\n  ParserATNSimulator2.debug = false;\n  ParserATNSimulator2.dfa_debug = false;\n  ParserATNSimulator2.retry_debug = false;\n  ParserATNSimulator2.STATE_ALT_SORT_COMPARATOR = (o1, o2) => {\n    let diff = o1.state.nonStopStateNumber - o2.state.nonStopStateNumber;\n    if (diff !== 0) {\n      return diff;\n    }\n    diff = o1.alt - o2.alt;\n    if (diff !== 0) {\n      return diff;\n    }\n    return 0;\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ParserATNSimulator2.prototype, \"predictionMode\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParserATNSimulator2.prototype, \"getPredictionMode\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"setPredictionMode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ParserATNSimulator2.prototype, \"reset\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"adaptivePredict\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"getStartState\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"execDFA\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"execATN\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"handleNoViableAlt\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"getExistingTargetState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"computeTargetState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"removeAllConfigsNotInRuleStopState\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParserATNSimulator2.prototype, \"computeStartState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"applyPrecedenceFilter\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"getReachableTarget\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"getPredsForAmbigAlts\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"evalSemanticContext\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"evalSemanticContextImpl\", null);\n  __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(4, Decorators_1.Nullable)\n  ], ParserATNSimulator2.prototype, \"closure\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.Nullable),\n    __param(3, Decorators_1.NotNull),\n    __param(6, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"closureImpl\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParserATNSimulator2.prototype, \"getRuleName\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"getEpsilonTarget\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"actionTransition\", null);\n  __decorate([\n    Decorators_1.Nullable,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"precedenceTransition\", null);\n  __decorate([\n    Decorators_1.Nullable,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"predTransition\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.Nullable)\n  ], ParserATNSimulator2.prototype, \"ruleTransition\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"isConflicted\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParserATNSimulator2.prototype, \"getTokenName\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"dumpDeadEndConfigs\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"noViableAlt\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"getUniqueAlt\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"configWithAltAtStopState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(4, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"addDFAEdge\", null);\n  __decorate([\n    __param(0, Decorators_1.Nullable),\n    __param(2, Decorators_1.Nullable)\n  ], ParserATNSimulator2.prototype, \"setDFAEdge\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"addDFAContextState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"addDFAState\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"createDFAState\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"reportAttemptingFullContext\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"reportContextSensitivity\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(5, Decorators_1.NotNull),\n    __param(6, Decorators_1.NotNull)\n  ], ParserATNSimulator2.prototype, \"reportAmbiguity\", null);\n  ParserATNSimulator2 = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParserATNSimulator2);\n  exports.ParserATNSimulator = ParserATNSimulator2;\n});\n\n// node_modules/antlr4ts/atn/PlusBlockStartState.js\nvar require_PlusBlockStartState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.PlusBlockStartState = void 0;\n  var ATNStateType_1 = require_ATNStateType();\n  var BlockStartState_1 = require_BlockStartState();\n  var Decorators_1 = require_Decorators();\n  var PlusBlockStartState = class extends BlockStartState_1.BlockStartState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.PLUS_BLOCK_START;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], PlusBlockStartState.prototype, \"stateType\", null);\n  exports.PlusBlockStartState = PlusBlockStartState;\n});\n\n// node_modules/antlr4ts/atn/PlusLoopbackState.js\nvar require_PlusLoopbackState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.PlusLoopbackState = void 0;\n  var ATNStateType_1 = require_ATNStateType();\n  var DecisionState_1 = require_DecisionState();\n  var Decorators_1 = require_Decorators();\n  var PlusLoopbackState = class extends DecisionState_1.DecisionState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.PLUS_LOOP_BACK;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], PlusLoopbackState.prototype, \"stateType\", null);\n  exports.PlusLoopbackState = PlusLoopbackState;\n});\n\n// node_modules/antlr4ts/atn/PrecedencePredicateTransition.js\nvar require_PrecedencePredicateTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.PrecedencePredicateTransition = void 0;\n  var AbstractPredicateTransition_1 = require_AbstractPredicateTransition();\n  var Decorators_1 = require_Decorators();\n  var SemanticContext_1 = require_SemanticContext();\n  var PrecedencePredicateTransition = class PrecedencePredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {\n    constructor(target, precedence) {\n      super(target);\n      this.precedence = precedence;\n    }\n    get serializationType() {\n      return 10;\n    }\n    get isEpsilon() {\n      return true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    get predicate() {\n      return new SemanticContext_1.SemanticContext.PrecedencePredicate(this.precedence);\n    }\n    toString() {\n      return this.precedence + \" >= _p\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], PrecedencePredicateTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override\n  ], PrecedencePredicateTransition.prototype, \"isEpsilon\", null);\n  __decorate([\n    Decorators_1.Override\n  ], PrecedencePredicateTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override\n  ], PrecedencePredicateTransition.prototype, \"toString\", null);\n  PrecedencePredicateTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], PrecedencePredicateTransition);\n  exports.PrecedencePredicateTransition = PrecedencePredicateTransition;\n});\n\n// node_modules/antlr4ts/atn/RangeTransition.js\nvar require_RangeTransition = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RangeTransition = void 0;\n  var IntervalSet_1 = require_IntervalSet();\n  var Decorators_1 = require_Decorators();\n  var Transition_1 = require_Transition();\n  var RangeTransition = class RangeTransition extends Transition_1.Transition {\n    constructor(target, from, to) {\n      super(target);\n      this.from = from;\n      this.to = to;\n    }\n    get serializationType() {\n      return 2;\n    }\n    get label() {\n      return IntervalSet_1.IntervalSet.of(this.from, this.to);\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return symbol >= this.from && symbol <= this.to;\n    }\n    toString() {\n      return \"'\" + String.fromCodePoint(this.from) + \"'..'\" + String.fromCodePoint(this.to) + \"'\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], RangeTransition.prototype, \"serializationType\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], RangeTransition.prototype, \"label\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RangeTransition.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n  ], RangeTransition.prototype, \"toString\", null);\n  RangeTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], RangeTransition);\n  exports.RangeTransition = RangeTransition;\n});\n\n// node_modules/antlr4ts/atn/RuleStartState.js\nvar require_RuleStartState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleStartState = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var Decorators_1 = require_Decorators();\n  var RuleStartState = class extends ATNState_1.ATNState {\n    constructor() {\n      super(...arguments);\n      this.isPrecedenceRule = false;\n      this.leftFactored = false;\n    }\n    get stateType() {\n      return ATNStateType_1.ATNStateType.RULE_START;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], RuleStartState.prototype, \"stateType\", null);\n  exports.RuleStartState = RuleStartState;\n});\n\n// node_modules/antlr4ts/atn/StarBlockStartState.js\nvar require_StarBlockStartState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.StarBlockStartState = void 0;\n  var ATNStateType_1 = require_ATNStateType();\n  var BlockStartState_1 = require_BlockStartState();\n  var Decorators_1 = require_Decorators();\n  var StarBlockStartState = class extends BlockStartState_1.BlockStartState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.STAR_BLOCK_START;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], StarBlockStartState.prototype, \"stateType\", null);\n  exports.StarBlockStartState = StarBlockStartState;\n});\n\n// node_modules/antlr4ts/atn/StarLoopbackState.js\nvar require_StarLoopbackState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.StarLoopbackState = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var Decorators_1 = require_Decorators();\n  var StarLoopbackState = class extends ATNState_1.ATNState {\n    get loopEntryState() {\n      return this.transition(0).target;\n    }\n    get stateType() {\n      return ATNStateType_1.ATNStateType.STAR_LOOP_BACK;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], StarLoopbackState.prototype, \"stateType\", null);\n  exports.StarLoopbackState = StarLoopbackState;\n});\n\n// node_modules/antlr4ts/atn/TokensStartState.js\nvar require_TokensStartState = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.TokensStartState = void 0;\n  var ATNStateType_1 = require_ATNStateType();\n  var DecisionState_1 = require_DecisionState();\n  var Decorators_1 = require_Decorators();\n  var TokensStartState = class extends DecisionState_1.DecisionState {\n    get stateType() {\n      return ATNStateType_1.ATNStateType.TOKEN_START;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], TokensStartState.prototype, \"stateType\", null);\n  exports.TokensStartState = TokensStartState;\n});\n\n// node_modules/antlr4ts/misc/UUID.js\nvar require_UUID = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.UUID = void 0;\n  var MurmurHash_1 = require_MurmurHash();\n  var UUID = class {\n    constructor(mostSigBits, moreSigBits, lessSigBits, leastSigBits) {\n      this.data = new Uint32Array(4);\n      this.data[0] = mostSigBits;\n      this.data[1] = moreSigBits;\n      this.data[2] = lessSigBits;\n      this.data[3] = leastSigBits;\n    }\n    static fromString(data) {\n      if (!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(data)) {\n        throw new Error(\"Incorrectly formatted UUID\");\n      }\n      let segments = data.split(\"-\");\n      let mostSigBits = parseInt(segments[0], 16);\n      let moreSigBits = (parseInt(segments[1], 16) << 16 >>> 0) + parseInt(segments[2], 16);\n      let lessSigBits = (parseInt(segments[3], 16) << 16 >>> 0) + parseInt(segments[4].substr(0, 4), 16);\n      let leastSigBits = parseInt(segments[4].substr(-8), 16);\n      return new UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);\n    }\n    hashCode() {\n      return MurmurHash_1.MurmurHash.hashCode([this.data[0], this.data[1], this.data[2], this.data[3]]);\n    }\n    equals(obj) {\n      if (obj === this) {\n        return true;\n      } else if (!(obj instanceof UUID)) {\n        return false;\n      }\n      return this.data[0] === obj.data[0] && this.data[1] === obj.data[1] && this.data[2] === obj.data[2] && this.data[3] === obj.data[3];\n    }\n    toString() {\n      return (\"00000000\" + this.data[0].toString(16)).substr(-8) + \"-\" + (\"0000\" + (this.data[1] >>> 16).toString(16)).substr(-4) + \"-\" + (\"0000\" + this.data[1].toString(16)).substr(-4) + \"-\" + (\"0000\" + (this.data[2] >>> 16).toString(16)).substr(-4) + \"-\" + (\"0000\" + this.data[2].toString(16)).substr(-4) + (\"00000000\" + this.data[3].toString(16)).substr(-8);\n    }\n  };\n  exports.UUID = UUID;\n});\n\n// node_modules/antlr4ts/atn/ATNDeserializer.js\nvar require_ATNDeserializer = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ATNDeserializer = void 0;\n  var ActionTransition_1 = require_ActionTransition();\n  var Array2DHashSet_1 = require_Array2DHashSet();\n  var ATN_1 = require_ATN();\n  var ATNDeserializationOptions_1 = require_ATNDeserializationOptions();\n  var ATNStateType_1 = require_ATNStateType();\n  var AtomTransition_1 = require_AtomTransition();\n  var BasicBlockStartState_1 = require_BasicBlockStartState();\n  var BasicState_1 = require_BasicState();\n  var BitSet_1 = require_BitSet();\n  var BlockEndState_1 = require_BlockEndState();\n  var BlockStartState_1 = require_BlockStartState();\n  var DecisionState_1 = require_DecisionState();\n  var DFA_1 = require_DFA();\n  var EpsilonTransition_1 = require_EpsilonTransition();\n  var IntervalSet_1 = require_IntervalSet();\n  var InvalidState_1 = require_InvalidState();\n  var LexerChannelAction_1 = require_LexerChannelAction();\n  var LexerCustomAction_1 = require_LexerCustomAction();\n  var LexerModeAction_1 = require_LexerModeAction();\n  var LexerMoreAction_1 = require_LexerMoreAction();\n  var LexerPopModeAction_1 = require_LexerPopModeAction();\n  var LexerPushModeAction_1 = require_LexerPushModeAction();\n  var LexerSkipAction_1 = require_LexerSkipAction();\n  var LexerTypeAction_1 = require_LexerTypeAction();\n  var LoopEndState_1 = require_LoopEndState();\n  var Decorators_1 = require_Decorators();\n  var NotSetTransition_1 = require_NotSetTransition();\n  var ParserATNSimulator_1 = require_ParserATNSimulator();\n  var PlusBlockStartState_1 = require_PlusBlockStartState();\n  var PlusLoopbackState_1 = require_PlusLoopbackState();\n  var PrecedencePredicateTransition_1 = require_PrecedencePredicateTransition();\n  var PredicateTransition_1 = require_PredicateTransition();\n  var RangeTransition_1 = require_RangeTransition();\n  var RuleStartState_1 = require_RuleStartState();\n  var RuleStopState_1 = require_RuleStopState();\n  var RuleTransition_1 = require_RuleTransition();\n  var SetTransition_1 = require_SetTransition();\n  var StarBlockStartState_1 = require_StarBlockStartState();\n  var StarLoopbackState_1 = require_StarLoopbackState();\n  var StarLoopEntryState_1 = require_StarLoopEntryState();\n  var Token_1 = require_Token();\n  var TokensStartState_1 = require_TokensStartState();\n  var UUID_1 = require_UUID();\n  var WildcardTransition_1 = require_WildcardTransition();\n  var UnicodeDeserializingMode;\n  (function(UnicodeDeserializingMode2) {\n    UnicodeDeserializingMode2[UnicodeDeserializingMode2[\"UNICODE_BMP\"] = 0] = \"UNICODE_BMP\";\n    UnicodeDeserializingMode2[UnicodeDeserializingMode2[\"UNICODE_SMP\"] = 1] = \"UNICODE_SMP\";\n  })(UnicodeDeserializingMode || (UnicodeDeserializingMode = {}));\n  var ATNDeserializer3 = class {\n    constructor(deserializationOptions) {\n      if (deserializationOptions === void 0) {\n        deserializationOptions = ATNDeserializationOptions_1.ATNDeserializationOptions.defaultOptions;\n      }\n      this.deserializationOptions = deserializationOptions;\n    }\n    static get SERIALIZED_VERSION() {\n      return 3;\n    }\n    static isFeatureSupported(feature, actualUuid) {\n      let featureIndex = ATNDeserializer3.SUPPORTED_UUIDS.findIndex((e) => e.equals(feature));\n      if (featureIndex < 0) {\n        return false;\n      }\n      return ATNDeserializer3.SUPPORTED_UUIDS.findIndex((e) => e.equals(actualUuid)) >= featureIndex;\n    }\n    static getUnicodeDeserializer(mode) {\n      if (mode === 0) {\n        return {\n          readUnicode: (data, p) => {\n            return ATNDeserializer3.toInt(data[p]);\n          },\n          size: 1\n        };\n      } else {\n        return {\n          readUnicode: (data, p) => {\n            return ATNDeserializer3.toInt32(data, p);\n          },\n          size: 2\n        };\n      }\n    }\n    deserialize(data) {\n      data = data.slice(0);\n      for (let i = 1; i < data.length; i++) {\n        data[i] = data[i] - 2 & 65535;\n      }\n      let p = 0;\n      let version = ATNDeserializer3.toInt(data[p++]);\n      if (version !== ATNDeserializer3.SERIALIZED_VERSION) {\n        let reason = `Could not deserialize ATN with version ${version} (expected ${ATNDeserializer3.SERIALIZED_VERSION}).`;\n        throw new Error(reason);\n      }\n      let uuid = ATNDeserializer3.toUUID(data, p);\n      p += 8;\n      if (ATNDeserializer3.SUPPORTED_UUIDS.findIndex((e) => e.equals(uuid)) < 0) {\n        let reason = `Could not deserialize ATN with UUID ${uuid} (expected ${ATNDeserializer3.SERIALIZED_UUID} or a legacy UUID).`;\n        throw new Error(reason);\n      }\n      let supportsLexerActions = ATNDeserializer3.isFeatureSupported(ATNDeserializer3.ADDED_LEXER_ACTIONS, uuid);\n      let grammarType = ATNDeserializer3.toInt(data[p++]);\n      let maxTokenType = ATNDeserializer3.toInt(data[p++]);\n      let atn = new ATN_1.ATN(grammarType, maxTokenType);\n      let loopBackStateNumbers = [];\n      let endStateNumbers = [];\n      let nstates = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 0; i < nstates; i++) {\n        let stype = ATNDeserializer3.toInt(data[p++]);\n        if (stype === ATNStateType_1.ATNStateType.INVALID_TYPE) {\n          atn.addState(new InvalidState_1.InvalidState());\n          continue;\n        }\n        let ruleIndex = ATNDeserializer3.toInt(data[p++]);\n        if (ruleIndex === 65535) {\n          ruleIndex = -1;\n        }\n        let s = this.stateFactory(stype, ruleIndex);\n        if (stype === ATNStateType_1.ATNStateType.LOOP_END) {\n          let loopBackStateNumber = ATNDeserializer3.toInt(data[p++]);\n          loopBackStateNumbers.push([s, loopBackStateNumber]);\n        } else if (s instanceof BlockStartState_1.BlockStartState) {\n          let endStateNumber = ATNDeserializer3.toInt(data[p++]);\n          endStateNumbers.push([s, endStateNumber]);\n        }\n        atn.addState(s);\n      }\n      for (let pair of loopBackStateNumbers) {\n        pair[0].loopBackState = atn.states[pair[1]];\n      }\n      for (let pair of endStateNumbers) {\n        pair[0].endState = atn.states[pair[1]];\n      }\n      let numNonGreedyStates = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 0; i < numNonGreedyStates; i++) {\n        let stateNumber = ATNDeserializer3.toInt(data[p++]);\n        atn.states[stateNumber].nonGreedy = true;\n      }\n      let numSllDecisions = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 0; i < numSllDecisions; i++) {\n        let stateNumber = ATNDeserializer3.toInt(data[p++]);\n        atn.states[stateNumber].sll = true;\n      }\n      let numPrecedenceStates = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 0; i < numPrecedenceStates; i++) {\n        let stateNumber = ATNDeserializer3.toInt(data[p++]);\n        atn.states[stateNumber].isPrecedenceRule = true;\n      }\n      let nrules = ATNDeserializer3.toInt(data[p++]);\n      if (atn.grammarType === 0) {\n        atn.ruleToTokenType = new Int32Array(nrules);\n      }\n      atn.ruleToStartState = new Array(nrules);\n      for (let i = 0; i < nrules; i++) {\n        let s = ATNDeserializer3.toInt(data[p++]);\n        let startState = atn.states[s];\n        startState.leftFactored = ATNDeserializer3.toInt(data[p++]) !== 0;\n        atn.ruleToStartState[i] = startState;\n        if (atn.grammarType === 0) {\n          let tokenType = ATNDeserializer3.toInt(data[p++]);\n          if (tokenType === 65535) {\n            tokenType = Token_1.Token.EOF;\n          }\n          atn.ruleToTokenType[i] = tokenType;\n          if (!ATNDeserializer3.isFeatureSupported(ATNDeserializer3.ADDED_LEXER_ACTIONS, uuid)) {\n            let actionIndexIgnored = ATNDeserializer3.toInt(data[p++]);\n            if (actionIndexIgnored === 65535) {\n              actionIndexIgnored = -1;\n            }\n          }\n        }\n      }\n      atn.ruleToStopState = new Array(nrules);\n      for (let state of atn.states) {\n        if (!(state instanceof RuleStopState_1.RuleStopState)) {\n          continue;\n        }\n        atn.ruleToStopState[state.ruleIndex] = state;\n        atn.ruleToStartState[state.ruleIndex].stopState = state;\n      }\n      let nmodes = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 0; i < nmodes; i++) {\n        let s = ATNDeserializer3.toInt(data[p++]);\n        atn.modeToStartState.push(atn.states[s]);\n      }\n      atn.modeToDFA = new Array(nmodes);\n      for (let i = 0; i < nmodes; i++) {\n        atn.modeToDFA[i] = new DFA_1.DFA(atn.modeToStartState[i]);\n      }\n      let sets = [];\n      p = this.deserializeSets(data, p, sets, ATNDeserializer3.getUnicodeDeserializer(0));\n      if (ATNDeserializer3.isFeatureSupported(ATNDeserializer3.ADDED_UNICODE_SMP, uuid)) {\n        p = this.deserializeSets(data, p, sets, ATNDeserializer3.getUnicodeDeserializer(1));\n      }\n      let nedges = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 0; i < nedges; i++) {\n        let src = ATNDeserializer3.toInt(data[p]);\n        let trg = ATNDeserializer3.toInt(data[p + 1]);\n        let ttype = ATNDeserializer3.toInt(data[p + 2]);\n        let arg1 = ATNDeserializer3.toInt(data[p + 3]);\n        let arg2 = ATNDeserializer3.toInt(data[p + 4]);\n        let arg3 = ATNDeserializer3.toInt(data[p + 5]);\n        let trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n        let srcState = atn.states[src];\n        srcState.addTransition(trans);\n        p += 6;\n      }\n      let returnTransitionsSet = new Array2DHashSet_1.Array2DHashSet({\n        hashCode: (o) => o.stopState ^ o.returnState ^ o.outermostPrecedenceReturn,\n        equals: (a, b) => {\n          return a.stopState === b.stopState && a.returnState === b.returnState && a.outermostPrecedenceReturn === b.outermostPrecedenceReturn;\n        }\n      });\n      let returnTransitions = [];\n      for (let state of atn.states) {\n        let returningToLeftFactored = state.ruleIndex >= 0 && atn.ruleToStartState[state.ruleIndex].leftFactored;\n        for (let i = 0; i < state.numberOfTransitions; i++) {\n          let t = state.transition(i);\n          if (!(t instanceof RuleTransition_1.RuleTransition)) {\n            continue;\n          }\n          let ruleTransition = t;\n          let returningFromLeftFactored = atn.ruleToStartState[ruleTransition.target.ruleIndex].leftFactored;\n          if (!returningFromLeftFactored && returningToLeftFactored) {\n            continue;\n          }\n          let outermostPrecedenceReturn = -1;\n          if (atn.ruleToStartState[ruleTransition.target.ruleIndex].isPrecedenceRule) {\n            if (ruleTransition.precedence === 0) {\n              outermostPrecedenceReturn = ruleTransition.target.ruleIndex;\n            }\n          }\n          let current = {stopState: ruleTransition.target.ruleIndex, returnState: ruleTransition.followState.stateNumber, outermostPrecedenceReturn};\n          if (returnTransitionsSet.add(current)) {\n            returnTransitions.push(current);\n          }\n        }\n      }\n      for (let returnTransition of returnTransitions) {\n        let transition = new EpsilonTransition_1.EpsilonTransition(atn.states[returnTransition.returnState], returnTransition.outermostPrecedenceReturn);\n        atn.ruleToStopState[returnTransition.stopState].addTransition(transition);\n      }\n      for (let state of atn.states) {\n        if (state instanceof BlockStartState_1.BlockStartState) {\n          if (state.endState === void 0) {\n            throw new Error(\"IllegalStateException\");\n          }\n          if (state.endState.startState !== void 0) {\n            throw new Error(\"IllegalStateException\");\n          }\n          state.endState.startState = state;\n        }\n        if (state instanceof PlusLoopbackState_1.PlusLoopbackState) {\n          let loopbackState = state;\n          for (let i = 0; i < loopbackState.numberOfTransitions; i++) {\n            let target = loopbackState.transition(i).target;\n            if (target instanceof PlusBlockStartState_1.PlusBlockStartState) {\n              target.loopBackState = loopbackState;\n            }\n          }\n        } else if (state instanceof StarLoopbackState_1.StarLoopbackState) {\n          let loopbackState = state;\n          for (let i = 0; i < loopbackState.numberOfTransitions; i++) {\n            let target = loopbackState.transition(i).target;\n            if (target instanceof StarLoopEntryState_1.StarLoopEntryState) {\n              target.loopBackState = loopbackState;\n            }\n          }\n        }\n      }\n      let ndecisions = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 1; i <= ndecisions; i++) {\n        let s = ATNDeserializer3.toInt(data[p++]);\n        let decState = atn.states[s];\n        atn.decisionToState.push(decState);\n        decState.decision = i - 1;\n      }\n      if (atn.grammarType === 0) {\n        if (supportsLexerActions) {\n          atn.lexerActions = new Array(ATNDeserializer3.toInt(data[p++]));\n          for (let i = 0; i < atn.lexerActions.length; i++) {\n            let actionType = ATNDeserializer3.toInt(data[p++]);\n            let data1 = ATNDeserializer3.toInt(data[p++]);\n            if (data1 === 65535) {\n              data1 = -1;\n            }\n            let data2 = ATNDeserializer3.toInt(data[p++]);\n            if (data2 === 65535) {\n              data2 = -1;\n            }\n            let lexerAction = this.lexerActionFactory(actionType, data1, data2);\n            atn.lexerActions[i] = lexerAction;\n          }\n        } else {\n          let legacyLexerActions = [];\n          for (let state of atn.states) {\n            for (let i = 0; i < state.numberOfTransitions; i++) {\n              let transition = state.transition(i);\n              if (!(transition instanceof ActionTransition_1.ActionTransition)) {\n                continue;\n              }\n              let ruleIndex = transition.ruleIndex;\n              let actionIndex = transition.actionIndex;\n              let lexerAction = new LexerCustomAction_1.LexerCustomAction(ruleIndex, actionIndex);\n              state.setTransition(i, new ActionTransition_1.ActionTransition(transition.target, ruleIndex, legacyLexerActions.length, false));\n              legacyLexerActions.push(lexerAction);\n            }\n          }\n          atn.lexerActions = legacyLexerActions;\n        }\n      }\n      this.markPrecedenceDecisions(atn);\n      atn.decisionToDFA = new Array(ndecisions);\n      for (let i = 0; i < ndecisions; i++) {\n        atn.decisionToDFA[i] = new DFA_1.DFA(atn.decisionToState[i], i);\n      }\n      if (this.deserializationOptions.isVerifyATN) {\n        this.verifyATN(atn);\n      }\n      if (this.deserializationOptions.isGenerateRuleBypassTransitions && atn.grammarType === 1) {\n        atn.ruleToTokenType = new Int32Array(atn.ruleToStartState.length);\n        for (let i = 0; i < atn.ruleToStartState.length; i++) {\n          atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n        }\n        for (let i = 0; i < atn.ruleToStartState.length; i++) {\n          let bypassStart = new BasicBlockStartState_1.BasicBlockStartState();\n          bypassStart.ruleIndex = i;\n          atn.addState(bypassStart);\n          let bypassStop = new BlockEndState_1.BlockEndState();\n          bypassStop.ruleIndex = i;\n          atn.addState(bypassStop);\n          bypassStart.endState = bypassStop;\n          atn.defineDecisionState(bypassStart);\n          bypassStop.startState = bypassStart;\n          let endState;\n          let excludeTransition;\n          if (atn.ruleToStartState[i].isPrecedenceRule) {\n            endState = void 0;\n            for (let state of atn.states) {\n              if (state.ruleIndex !== i) {\n                continue;\n              }\n              if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {\n                continue;\n              }\n              let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;\n              if (!(maybeLoopEndState instanceof LoopEndState_1.LoopEndState)) {\n                continue;\n              }\n              if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {\n                endState = state;\n                break;\n              }\n            }\n            if (!endState) {\n              throw new Error(\"Couldn't identify final state of the precedence rule prefix section.\");\n            }\n            excludeTransition = endState.loopBackState.transition(0);\n          } else {\n            endState = atn.ruleToStopState[i];\n          }\n          for (let state of atn.states) {\n            for (let i2 = 0; i2 < state.numberOfTransitions; i2++) {\n              let transition = state.transition(i2);\n              if (transition === excludeTransition) {\n                continue;\n              }\n              if (transition.target === endState) {\n                transition.target = bypassStop;\n              }\n            }\n          }\n          while (atn.ruleToStartState[i].numberOfTransitions > 0) {\n            let transition = atn.ruleToStartState[i].removeTransition(atn.ruleToStartState[i].numberOfTransitions - 1);\n            bypassStart.addTransition(transition);\n          }\n          atn.ruleToStartState[i].addTransition(new EpsilonTransition_1.EpsilonTransition(bypassStart));\n          bypassStop.addTransition(new EpsilonTransition_1.EpsilonTransition(endState));\n          let matchState = new BasicState_1.BasicState();\n          atn.addState(matchState);\n          matchState.addTransition(new AtomTransition_1.AtomTransition(bypassStop, atn.ruleToTokenType[i]));\n          bypassStart.addTransition(new EpsilonTransition_1.EpsilonTransition(matchState));\n        }\n        if (this.deserializationOptions.isVerifyATN) {\n          this.verifyATN(atn);\n        }\n      }\n      if (this.deserializationOptions.isOptimize) {\n        while (true) {\n          let optimizationCount = 0;\n          optimizationCount += ATNDeserializer3.inlineSetRules(atn);\n          optimizationCount += ATNDeserializer3.combineChainedEpsilons(atn);\n          let preserveOrder = atn.grammarType === 0;\n          optimizationCount += ATNDeserializer3.optimizeSets(atn, preserveOrder);\n          if (optimizationCount === 0) {\n            break;\n          }\n        }\n        if (this.deserializationOptions.isVerifyATN) {\n          this.verifyATN(atn);\n        }\n      }\n      ATNDeserializer3.identifyTailCalls(atn);\n      return atn;\n    }\n    deserializeSets(data, p, sets, unicodeDeserializer) {\n      let nsets = ATNDeserializer3.toInt(data[p++]);\n      for (let i = 0; i < nsets; i++) {\n        let nintervals = ATNDeserializer3.toInt(data[p]);\n        p++;\n        let set = new IntervalSet_1.IntervalSet();\n        sets.push(set);\n        let containsEof = ATNDeserializer3.toInt(data[p++]) !== 0;\n        if (containsEof) {\n          set.add(-1);\n        }\n        for (let j = 0; j < nintervals; j++) {\n          let a = unicodeDeserializer.readUnicode(data, p);\n          p += unicodeDeserializer.size;\n          let b = unicodeDeserializer.readUnicode(data, p);\n          p += unicodeDeserializer.size;\n          set.add(a, b);\n        }\n      }\n      return p;\n    }\n    markPrecedenceDecisions(atn) {\n      let rulePrecedenceDecisions = new Map();\n      for (let state of atn.states) {\n        if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {\n          continue;\n        }\n        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n          let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;\n          if (maybeLoopEndState instanceof LoopEndState_1.LoopEndState) {\n            if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {\n              rulePrecedenceDecisions.set(state.ruleIndex, state);\n              state.precedenceRuleDecision = true;\n              state.precedenceLoopbackStates = new BitSet_1.BitSet(atn.states.length);\n            }\n          }\n        }\n      }\n      for (let precedenceDecision of rulePrecedenceDecisions) {\n        for (let transition of atn.ruleToStopState[precedenceDecision[0]].getTransitions()) {\n          if (transition.serializationType !== 1) {\n            continue;\n          }\n          let epsilonTransition = transition;\n          if (epsilonTransition.outermostPrecedenceReturn !== -1) {\n            continue;\n          }\n          precedenceDecision[1].precedenceLoopbackStates.set(transition.target.stateNumber);\n        }\n      }\n    }\n    verifyATN(atn) {\n      for (let state of atn.states) {\n        this.checkCondition(state !== void 0, \"ATN states should not be undefined.\");\n        if (state.stateType === ATNStateType_1.ATNStateType.INVALID_TYPE) {\n          continue;\n        }\n        this.checkCondition(state.onlyHasEpsilonTransitions || state.numberOfTransitions <= 1);\n        if (state instanceof PlusBlockStartState_1.PlusBlockStartState) {\n          this.checkCondition(state.loopBackState !== void 0);\n        }\n        if (state instanceof StarLoopEntryState_1.StarLoopEntryState) {\n          let starLoopEntryState = state;\n          this.checkCondition(starLoopEntryState.loopBackState !== void 0);\n          this.checkCondition(starLoopEntryState.numberOfTransitions === 2);\n          if (starLoopEntryState.transition(0).target instanceof StarBlockStartState_1.StarBlockStartState) {\n            this.checkCondition(starLoopEntryState.transition(1).target instanceof LoopEndState_1.LoopEndState);\n            this.checkCondition(!starLoopEntryState.nonGreedy);\n          } else if (starLoopEntryState.transition(0).target instanceof LoopEndState_1.LoopEndState) {\n            this.checkCondition(starLoopEntryState.transition(1).target instanceof StarBlockStartState_1.StarBlockStartState);\n            this.checkCondition(starLoopEntryState.nonGreedy);\n          } else {\n            throw new Error(\"IllegalStateException\");\n          }\n        }\n        if (state instanceof StarLoopbackState_1.StarLoopbackState) {\n          this.checkCondition(state.numberOfTransitions === 1);\n          this.checkCondition(state.transition(0).target instanceof StarLoopEntryState_1.StarLoopEntryState);\n        }\n        if (state instanceof LoopEndState_1.LoopEndState) {\n          this.checkCondition(state.loopBackState !== void 0);\n        }\n        if (state instanceof RuleStartState_1.RuleStartState) {\n          this.checkCondition(state.stopState !== void 0);\n        }\n        if (state instanceof BlockStartState_1.BlockStartState) {\n          this.checkCondition(state.endState !== void 0);\n        }\n        if (state instanceof BlockEndState_1.BlockEndState) {\n          this.checkCondition(state.startState !== void 0);\n        }\n        if (state instanceof DecisionState_1.DecisionState) {\n          let decisionState = state;\n          this.checkCondition(decisionState.numberOfTransitions <= 1 || decisionState.decision >= 0);\n        } else {\n          this.checkCondition(state.numberOfTransitions <= 1 || state instanceof RuleStopState_1.RuleStopState);\n        }\n      }\n    }\n    checkCondition(condition, message) {\n      if (!condition) {\n        throw new Error(\"IllegalStateException: \" + message);\n      }\n    }\n    static inlineSetRules(atn) {\n      let inlinedCalls = 0;\n      let ruleToInlineTransition = new Array(atn.ruleToStartState.length);\n      for (let i = 0; i < atn.ruleToStartState.length; i++) {\n        let startState = atn.ruleToStartState[i];\n        let middleState = startState;\n        while (middleState.onlyHasEpsilonTransitions && middleState.numberOfOptimizedTransitions === 1 && middleState.getOptimizedTransition(0).serializationType === 1) {\n          middleState = middleState.getOptimizedTransition(0).target;\n        }\n        if (middleState.numberOfOptimizedTransitions !== 1) {\n          continue;\n        }\n        let matchTransition = middleState.getOptimizedTransition(0);\n        let matchTarget = matchTransition.target;\n        if (matchTransition.isEpsilon || !matchTarget.onlyHasEpsilonTransitions || matchTarget.numberOfOptimizedTransitions !== 1 || !(matchTarget.getOptimizedTransition(0).target instanceof RuleStopState_1.RuleStopState)) {\n          continue;\n        }\n        switch (matchTransition.serializationType) {\n          case 5:\n          case 2:\n          case 7:\n            ruleToInlineTransition[i] = matchTransition;\n            break;\n          case 8:\n          case 9:\n            continue;\n          default:\n            continue;\n        }\n      }\n      for (let state of atn.states) {\n        if (state.ruleIndex < 0) {\n          continue;\n        }\n        let optimizedTransitions;\n        for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {\n          let transition = state.getOptimizedTransition(i);\n          if (!(transition instanceof RuleTransition_1.RuleTransition)) {\n            if (optimizedTransitions !== void 0) {\n              optimizedTransitions.push(transition);\n            }\n            continue;\n          }\n          let ruleTransition = transition;\n          let effective = ruleToInlineTransition[ruleTransition.target.ruleIndex];\n          if (effective === void 0) {\n            if (optimizedTransitions !== void 0) {\n              optimizedTransitions.push(transition);\n            }\n            continue;\n          }\n          if (optimizedTransitions === void 0) {\n            optimizedTransitions = [];\n            for (let j = 0; j < i; j++) {\n              optimizedTransitions.push(state.getOptimizedTransition(i));\n            }\n          }\n          inlinedCalls++;\n          let target = ruleTransition.followState;\n          let intermediateState = new BasicState_1.BasicState();\n          intermediateState.setRuleIndex(target.ruleIndex);\n          atn.addState(intermediateState);\n          optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(intermediateState));\n          switch (effective.serializationType) {\n            case 5:\n              intermediateState.addTransition(new AtomTransition_1.AtomTransition(target, effective._label));\n              break;\n            case 2:\n              intermediateState.addTransition(new RangeTransition_1.RangeTransition(target, effective.from, effective.to));\n              break;\n            case 7:\n              intermediateState.addTransition(new SetTransition_1.SetTransition(target, effective.label));\n              break;\n            default:\n              throw new Error(\"UnsupportedOperationException\");\n          }\n        }\n        if (optimizedTransitions !== void 0) {\n          if (state.isOptimized) {\n            while (state.numberOfOptimizedTransitions > 0) {\n              state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);\n            }\n          }\n          for (let transition of optimizedTransitions) {\n            state.addOptimizedTransition(transition);\n          }\n        }\n      }\n      if (ParserATNSimulator_1.ParserATNSimulator.debug) {\n        console.log(\"ATN runtime optimizer removed \" + inlinedCalls + \" rule invocations by inlining sets.\");\n      }\n      return inlinedCalls;\n    }\n    static combineChainedEpsilons(atn) {\n      let removedEdges = 0;\n      for (let state of atn.states) {\n        if (!state.onlyHasEpsilonTransitions || state instanceof RuleStopState_1.RuleStopState) {\n          continue;\n        }\n        let optimizedTransitions;\n        nextTransition:\n          for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {\n            let transition = state.getOptimizedTransition(i);\n            let intermediate = transition.target;\n            if (transition.serializationType !== 1 || transition.outermostPrecedenceReturn !== -1 || intermediate.stateType !== ATNStateType_1.ATNStateType.BASIC || !intermediate.onlyHasEpsilonTransitions) {\n              if (optimizedTransitions !== void 0) {\n                optimizedTransitions.push(transition);\n              }\n              continue nextTransition;\n            }\n            for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {\n              if (intermediate.getOptimizedTransition(j).serializationType !== 1 || intermediate.getOptimizedTransition(j).outermostPrecedenceReturn !== -1) {\n                if (optimizedTransitions !== void 0) {\n                  optimizedTransitions.push(transition);\n                }\n                continue nextTransition;\n              }\n            }\n            removedEdges++;\n            if (optimizedTransitions === void 0) {\n              optimizedTransitions = [];\n              for (let j = 0; j < i; j++) {\n                optimizedTransitions.push(state.getOptimizedTransition(j));\n              }\n            }\n            for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {\n              let target = intermediate.getOptimizedTransition(j).target;\n              optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(target));\n            }\n          }\n        if (optimizedTransitions !== void 0) {\n          if (state.isOptimized) {\n            while (state.numberOfOptimizedTransitions > 0) {\n              state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);\n            }\n          }\n          for (let transition of optimizedTransitions) {\n            state.addOptimizedTransition(transition);\n          }\n        }\n      }\n      if (ParserATNSimulator_1.ParserATNSimulator.debug) {\n        console.log(\"ATN runtime optimizer removed \" + removedEdges + \" transitions by combining chained epsilon transitions.\");\n      }\n      return removedEdges;\n    }\n    static optimizeSets(atn, preserveOrder) {\n      if (preserveOrder) {\n        return 0;\n      }\n      let removedPaths = 0;\n      let decisions = atn.decisionToState;\n      for (let decision of decisions) {\n        let setTransitions = new IntervalSet_1.IntervalSet();\n        for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {\n          let epsTransition = decision.getOptimizedTransition(i);\n          if (!(epsTransition instanceof EpsilonTransition_1.EpsilonTransition)) {\n            continue;\n          }\n          if (epsTransition.target.numberOfOptimizedTransitions !== 1) {\n            continue;\n          }\n          let transition = epsTransition.target.getOptimizedTransition(0);\n          if (!(transition.target instanceof BlockEndState_1.BlockEndState)) {\n            continue;\n          }\n          if (transition instanceof NotSetTransition_1.NotSetTransition) {\n            continue;\n          }\n          if (transition instanceof AtomTransition_1.AtomTransition || transition instanceof RangeTransition_1.RangeTransition || transition instanceof SetTransition_1.SetTransition) {\n            setTransitions.add(i);\n          }\n        }\n        if (setTransitions.size <= 1) {\n          continue;\n        }\n        let optimizedTransitions = [];\n        for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {\n          if (!setTransitions.contains(i)) {\n            optimizedTransitions.push(decision.getOptimizedTransition(i));\n          }\n        }\n        let blockEndState = decision.getOptimizedTransition(setTransitions.minElement).target.getOptimizedTransition(0).target;\n        let matchSet = new IntervalSet_1.IntervalSet();\n        for (let interval of setTransitions.intervals) {\n          for (let j = interval.a; j <= interval.b; j++) {\n            let matchTransition = decision.getOptimizedTransition(j).target.getOptimizedTransition(0);\n            if (matchTransition instanceof NotSetTransition_1.NotSetTransition) {\n              throw new Error(\"Not yet implemented.\");\n            } else {\n              matchSet.addAll(matchTransition.label);\n            }\n          }\n        }\n        let newTransition;\n        if (matchSet.intervals.length === 1) {\n          if (matchSet.size === 1) {\n            newTransition = new AtomTransition_1.AtomTransition(blockEndState, matchSet.minElement);\n          } else {\n            let matchInterval = matchSet.intervals[0];\n            newTransition = new RangeTransition_1.RangeTransition(blockEndState, matchInterval.a, matchInterval.b);\n          }\n        } else {\n          newTransition = new SetTransition_1.SetTransition(blockEndState, matchSet);\n        }\n        let setOptimizedState = new BasicState_1.BasicState();\n        setOptimizedState.setRuleIndex(decision.ruleIndex);\n        atn.addState(setOptimizedState);\n        setOptimizedState.addTransition(newTransition);\n        optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(setOptimizedState));\n        removedPaths += decision.numberOfOptimizedTransitions - optimizedTransitions.length;\n        if (decision.isOptimized) {\n          while (decision.numberOfOptimizedTransitions > 0) {\n            decision.removeOptimizedTransition(decision.numberOfOptimizedTransitions - 1);\n          }\n        }\n        for (let transition of optimizedTransitions) {\n          decision.addOptimizedTransition(transition);\n        }\n      }\n      if (ParserATNSimulator_1.ParserATNSimulator.debug) {\n        console.log(\"ATN runtime optimizer removed \" + removedPaths + \" paths by collapsing sets.\");\n      }\n      return removedPaths;\n    }\n    static identifyTailCalls(atn) {\n      for (let state of atn.states) {\n        for (let i = 0; i < state.numberOfTransitions; i++) {\n          let transition = state.transition(i);\n          if (!(transition instanceof RuleTransition_1.RuleTransition)) {\n            continue;\n          }\n          transition.tailCall = this.testTailCall(atn, transition, false);\n          transition.optimizedTailCall = this.testTailCall(atn, transition, true);\n        }\n        if (!state.isOptimized) {\n          continue;\n        }\n        for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {\n          let transition = state.getOptimizedTransition(i);\n          if (!(transition instanceof RuleTransition_1.RuleTransition)) {\n            continue;\n          }\n          transition.tailCall = this.testTailCall(atn, transition, false);\n          transition.optimizedTailCall = this.testTailCall(atn, transition, true);\n        }\n      }\n    }\n    static testTailCall(atn, transition, optimizedPath) {\n      if (!optimizedPath && transition.tailCall) {\n        return true;\n      }\n      if (optimizedPath && transition.optimizedTailCall) {\n        return true;\n      }\n      let reachable = new BitSet_1.BitSet(atn.states.length);\n      let worklist = [];\n      worklist.push(transition.followState);\n      while (true) {\n        let state = worklist.pop();\n        if (!state) {\n          break;\n        }\n        if (reachable.get(state.stateNumber)) {\n          continue;\n        }\n        if (state instanceof RuleStopState_1.RuleStopState) {\n          continue;\n        }\n        if (!state.onlyHasEpsilonTransitions) {\n          return false;\n        }\n        let transitionCount = optimizedPath ? state.numberOfOptimizedTransitions : state.numberOfTransitions;\n        for (let i = 0; i < transitionCount; i++) {\n          let t = optimizedPath ? state.getOptimizedTransition(i) : state.transition(i);\n          if (t.serializationType !== 1) {\n            return false;\n          }\n          worklist.push(t.target);\n        }\n      }\n      return true;\n    }\n    static toInt(c) {\n      return c;\n    }\n    static toInt32(data, offset) {\n      return (data[offset] | data[offset + 1] << 16) >>> 0;\n    }\n    static toUUID(data, offset) {\n      let leastSigBits = ATNDeserializer3.toInt32(data, offset);\n      let lessSigBits = ATNDeserializer3.toInt32(data, offset + 2);\n      let moreSigBits = ATNDeserializer3.toInt32(data, offset + 4);\n      let mostSigBits = ATNDeserializer3.toInt32(data, offset + 6);\n      return new UUID_1.UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);\n    }\n    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {\n      let target = atn.states[trg];\n      switch (type) {\n        case 1:\n          return new EpsilonTransition_1.EpsilonTransition(target);\n        case 2:\n          if (arg3 !== 0) {\n            return new RangeTransition_1.RangeTransition(target, Token_1.Token.EOF, arg2);\n          } else {\n            return new RangeTransition_1.RangeTransition(target, arg1, arg2);\n          }\n        case 3:\n          let rt = new RuleTransition_1.RuleTransition(atn.states[arg1], arg2, arg3, target);\n          return rt;\n        case 4:\n          let pt = new PredicateTransition_1.PredicateTransition(target, arg1, arg2, arg3 !== 0);\n          return pt;\n        case 10:\n          return new PrecedencePredicateTransition_1.PrecedencePredicateTransition(target, arg1);\n        case 5:\n          if (arg3 !== 0) {\n            return new AtomTransition_1.AtomTransition(target, Token_1.Token.EOF);\n          } else {\n            return new AtomTransition_1.AtomTransition(target, arg1);\n          }\n        case 6:\n          let a = new ActionTransition_1.ActionTransition(target, arg1, arg2, arg3 !== 0);\n          return a;\n        case 7:\n          return new SetTransition_1.SetTransition(target, sets[arg1]);\n        case 8:\n          return new NotSetTransition_1.NotSetTransition(target, sets[arg1]);\n        case 9:\n          return new WildcardTransition_1.WildcardTransition(target);\n      }\n      throw new Error(\"The specified transition type is not valid.\");\n    }\n    stateFactory(type, ruleIndex) {\n      let s;\n      switch (type) {\n        case ATNStateType_1.ATNStateType.INVALID_TYPE:\n          return new InvalidState_1.InvalidState();\n        case ATNStateType_1.ATNStateType.BASIC:\n          s = new BasicState_1.BasicState();\n          break;\n        case ATNStateType_1.ATNStateType.RULE_START:\n          s = new RuleStartState_1.RuleStartState();\n          break;\n        case ATNStateType_1.ATNStateType.BLOCK_START:\n          s = new BasicBlockStartState_1.BasicBlockStartState();\n          break;\n        case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:\n          s = new PlusBlockStartState_1.PlusBlockStartState();\n          break;\n        case ATNStateType_1.ATNStateType.STAR_BLOCK_START:\n          s = new StarBlockStartState_1.StarBlockStartState();\n          break;\n        case ATNStateType_1.ATNStateType.TOKEN_START:\n          s = new TokensStartState_1.TokensStartState();\n          break;\n        case ATNStateType_1.ATNStateType.RULE_STOP:\n          s = new RuleStopState_1.RuleStopState();\n          break;\n        case ATNStateType_1.ATNStateType.BLOCK_END:\n          s = new BlockEndState_1.BlockEndState();\n          break;\n        case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:\n          s = new StarLoopbackState_1.StarLoopbackState();\n          break;\n        case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:\n          s = new StarLoopEntryState_1.StarLoopEntryState();\n          break;\n        case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:\n          s = new PlusLoopbackState_1.PlusLoopbackState();\n          break;\n        case ATNStateType_1.ATNStateType.LOOP_END:\n          s = new LoopEndState_1.LoopEndState();\n          break;\n        default:\n          let message = `The specified state type ${type} is not valid.`;\n          throw new Error(message);\n      }\n      s.ruleIndex = ruleIndex;\n      return s;\n    }\n    lexerActionFactory(type, data1, data2) {\n      switch (type) {\n        case 0:\n          return new LexerChannelAction_1.LexerChannelAction(data1);\n        case 1:\n          return new LexerCustomAction_1.LexerCustomAction(data1, data2);\n        case 2:\n          return new LexerModeAction_1.LexerModeAction(data1);\n        case 3:\n          return LexerMoreAction_1.LexerMoreAction.INSTANCE;\n        case 4:\n          return LexerPopModeAction_1.LexerPopModeAction.INSTANCE;\n        case 5:\n          return new LexerPushModeAction_1.LexerPushModeAction(data1);\n        case 6:\n          return LexerSkipAction_1.LexerSkipAction.INSTANCE;\n        case 7:\n          return new LexerTypeAction_1.LexerTypeAction(data1);\n        default:\n          let message = `The specified lexer action type ${type} is not valid.`;\n          throw new Error(message);\n      }\n    }\n  };\n  ATNDeserializer3.BASE_SERIALIZED_UUID = UUID_1.UUID.fromString(\"E4178468-DF95-44D0-AD87-F22A5D5FB6D3\");\n  ATNDeserializer3.ADDED_LEXER_ACTIONS = UUID_1.UUID.fromString(\"AB35191A-1603-487E-B75A-479B831EAF6D\");\n  ATNDeserializer3.ADDED_UNICODE_SMP = UUID_1.UUID.fromString(\"C23FEA89-0605-4f51-AFB8-058BCAB8C91B\");\n  ATNDeserializer3.SUPPORTED_UUIDS = [\n    ATNDeserializer3.BASE_SERIALIZED_UUID,\n    ATNDeserializer3.ADDED_LEXER_ACTIONS,\n    ATNDeserializer3.ADDED_UNICODE_SMP\n  ];\n  ATNDeserializer3.SERIALIZED_UUID = ATNDeserializer3.ADDED_UNICODE_SMP;\n  __decorate([\n    Decorators_1.NotNull\n  ], ATNDeserializer3.prototype, \"deserializationOptions\", void 0);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ATNDeserializer3.prototype, \"deserialize\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ATNDeserializer3.prototype, \"markPrecedenceDecisions\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], ATNDeserializer3.prototype, \"edgeFactory\", null);\n  exports.ATNDeserializer = ATNDeserializer3;\n});\n\n// node_modules/antlr4ts/atn/ParseInfo.js\nvar require_ParseInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParseInfo = void 0;\n  var Decorators_1 = require_Decorators();\n  var ParseInfo = class ParseInfo {\n    constructor(atnSimulator) {\n      this.atnSimulator = atnSimulator;\n    }\n    getDecisionInfo() {\n      return this.atnSimulator.getDecisionInfo();\n    }\n    getLLDecisions() {\n      let decisions = this.atnSimulator.getDecisionInfo();\n      let LL = [];\n      for (let i = 0; i < decisions.length; i++) {\n        let fallBack = decisions[i].LL_Fallback;\n        if (fallBack > 0) {\n          LL.push(i);\n        }\n      }\n      return LL;\n    }\n    getTotalTimeInPrediction() {\n      let decisions = this.atnSimulator.getDecisionInfo();\n      let t = 0;\n      for (let decision of decisions) {\n        t += decision.timeInPrediction;\n      }\n      return t;\n    }\n    getTotalSLLLookaheadOps() {\n      let decisions = this.atnSimulator.getDecisionInfo();\n      let k = 0;\n      for (let decision of decisions) {\n        k += decision.SLL_TotalLook;\n      }\n      return k;\n    }\n    getTotalLLLookaheadOps() {\n      let decisions = this.atnSimulator.getDecisionInfo();\n      let k = 0;\n      for (let decision of decisions) {\n        k += decision.LL_TotalLook;\n      }\n      return k;\n    }\n    getTotalSLLATNLookaheadOps() {\n      let decisions = this.atnSimulator.getDecisionInfo();\n      let k = 0;\n      for (let decision of decisions) {\n        k += decision.SLL_ATNTransitions;\n      }\n      return k;\n    }\n    getTotalLLATNLookaheadOps() {\n      let decisions = this.atnSimulator.getDecisionInfo();\n      let k = 0;\n      for (let decision of decisions) {\n        k += decision.LL_ATNTransitions;\n      }\n      return k;\n    }\n    getTotalATNLookaheadOps() {\n      let decisions = this.atnSimulator.getDecisionInfo();\n      let k = 0;\n      for (let decision of decisions) {\n        k += decision.SLL_ATNTransitions;\n        k += decision.LL_ATNTransitions;\n      }\n      return k;\n    }\n    getDFASize(decision) {\n      if (decision) {\n        let decisionToDFA = this.atnSimulator.atn.decisionToDFA[decision];\n        return decisionToDFA.states.size;\n      } else {\n        let n = 0;\n        let decisionToDFA = this.atnSimulator.atn.decisionToDFA;\n        for (let i = 0; i < decisionToDFA.length; i++) {\n          n += this.getDFASize(i);\n        }\n        return n;\n      }\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseInfo.prototype, \"getDecisionInfo\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseInfo.prototype, \"getLLDecisions\", null);\n  ParseInfo = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParseInfo);\n  exports.ParseInfo = ParseInfo;\n});\n\n// node_modules/antlr4ts/ProxyParserErrorListener.js\nvar require_ProxyParserErrorListener = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ProxyParserErrorListener = void 0;\n  var ProxyErrorListener_1 = require_ProxyErrorListener();\n  var Decorators_1 = require_Decorators();\n  var ProxyParserErrorListener = class extends ProxyErrorListener_1.ProxyErrorListener {\n    constructor(delegates) {\n      super(delegates);\n    }\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n      this.getDelegates().forEach((listener) => {\n        if (listener.reportAmbiguity) {\n          listener.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n        }\n      });\n    }\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {\n      this.getDelegates().forEach((listener) => {\n        if (listener.reportAttemptingFullContext) {\n          listener.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState);\n        }\n      });\n    }\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {\n      this.getDelegates().forEach((listener) => {\n        if (listener.reportContextSensitivity) {\n          listener.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState);\n        }\n      });\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ProxyParserErrorListener.prototype, \"reportAmbiguity\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProxyParserErrorListener.prototype, \"reportAttemptingFullContext\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProxyParserErrorListener.prototype, \"reportContextSensitivity\", null);\n  exports.ProxyParserErrorListener = ProxyParserErrorListener;\n});\n\n// node_modules/antlr4ts/misc/Character.js\nvar require_Character = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.isSupplementaryCodePoint = exports.isLowSurrogate = exports.isHighSurrogate = void 0;\n  function isHighSurrogate(ch) {\n    return ch >= 55296 && ch <= 56319;\n  }\n  exports.isHighSurrogate = isHighSurrogate;\n  function isLowSurrogate(ch) {\n    return ch >= 56320 && ch <= 57343;\n  }\n  exports.isLowSurrogate = isLowSurrogate;\n  function isSupplementaryCodePoint(ch) {\n    return ch >= 65536;\n  }\n  exports.isSupplementaryCodePoint = isSupplementaryCodePoint;\n});\n\n// node_modules/antlr4ts/CodePointBuffer.js\nvar require_CodePointBuffer = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.CodePointBuffer = void 0;\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var Character = require_Character();\n  var CodePointBuffer = class {\n    constructor(buffer, size) {\n      this.buffer = buffer;\n      this._position = 0;\n      this._size = size;\n    }\n    static withArray(buffer) {\n      return new CodePointBuffer(buffer, buffer.length);\n    }\n    get position() {\n      return this._position;\n    }\n    set position(newPosition) {\n      if (newPosition < 0 || newPosition > this._size) {\n        throw new RangeError();\n      }\n      this._position = newPosition;\n    }\n    get remaining() {\n      return this._size - this.position;\n    }\n    get(offset) {\n      return this.buffer[offset];\n    }\n    array() {\n      return this.buffer.slice(0, this._size);\n    }\n    static builder(initialBufferSize) {\n      return new CodePointBuffer.Builder(initialBufferSize);\n    }\n  };\n  exports.CodePointBuffer = CodePointBuffer;\n  (function(CodePointBuffer2) {\n    let Type;\n    (function(Type2) {\n      Type2[Type2[\"BYTE\"] = 0] = \"BYTE\";\n      Type2[Type2[\"CHAR\"] = 1] = \"CHAR\";\n      Type2[Type2[\"INT\"] = 2] = \"INT\";\n    })(Type || (Type = {}));\n    class Builder {\n      constructor(initialBufferSize) {\n        this.type = 0;\n        this.buffer = new Uint8Array(initialBufferSize);\n        this.prevHighSurrogate = -1;\n        this.position = 0;\n      }\n      build() {\n        return new CodePointBuffer2(this.buffer, this.position);\n      }\n      static roundUpToNextPowerOfTwo(i) {\n        let nextPowerOfTwo = 32 - Math.clz32(i - 1);\n        return Math.pow(2, nextPowerOfTwo);\n      }\n      ensureRemaining(remainingNeeded) {\n        switch (this.type) {\n          case 0:\n            if (this.buffer.length - this.position < remainingNeeded) {\n              let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);\n              let newBuffer = new Uint8Array(newCapacity);\n              newBuffer.set(this.buffer.subarray(0, this.position), 0);\n              this.buffer = newBuffer;\n            }\n            break;\n          case 1:\n            if (this.buffer.length - this.position < remainingNeeded) {\n              let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);\n              let newBuffer = new Uint16Array(newCapacity);\n              newBuffer.set(this.buffer.subarray(0, this.position), 0);\n              this.buffer = newBuffer;\n            }\n            break;\n          case 2:\n            if (this.buffer.length - this.position < remainingNeeded) {\n              let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);\n              let newBuffer = new Int32Array(newCapacity);\n              newBuffer.set(this.buffer.subarray(0, this.position), 0);\n              this.buffer = newBuffer;\n            }\n            break;\n        }\n      }\n      append(utf16In) {\n        this.ensureRemaining(utf16In.length);\n        this.appendArray(utf16In);\n      }\n      appendArray(utf16In) {\n        switch (this.type) {\n          case 0:\n            this.appendArrayByte(utf16In);\n            break;\n          case 1:\n            this.appendArrayChar(utf16In);\n            break;\n          case 2:\n            this.appendArrayInt(utf16In);\n            break;\n        }\n      }\n      appendArrayByte(utf16In) {\n        assert(this.prevHighSurrogate === -1);\n        let input = utf16In;\n        let inOffset = 0;\n        let inLimit = utf16In.length;\n        let outByte = this.buffer;\n        let outOffset = this.position;\n        while (inOffset < inLimit) {\n          let c = input[inOffset];\n          if (c <= 255) {\n            outByte[outOffset] = c;\n          } else {\n            utf16In = utf16In.subarray(inOffset, inLimit);\n            this.position = outOffset;\n            if (!Character.isHighSurrogate(c)) {\n              this.byteToCharBuffer(utf16In.length);\n              this.appendArrayChar(utf16In);\n              return;\n            } else {\n              this.byteToIntBuffer(utf16In.length);\n              this.appendArrayInt(utf16In);\n              return;\n            }\n          }\n          inOffset++;\n          outOffset++;\n        }\n        this.position = outOffset;\n      }\n      appendArrayChar(utf16In) {\n        assert(this.prevHighSurrogate === -1);\n        let input = utf16In;\n        let inOffset = 0;\n        let inLimit = utf16In.length;\n        let outChar = this.buffer;\n        let outOffset = this.position;\n        while (inOffset < inLimit) {\n          let c = input[inOffset];\n          if (!Character.isHighSurrogate(c)) {\n            outChar[outOffset] = c;\n          } else {\n            utf16In = utf16In.subarray(inOffset, inLimit);\n            this.position = outOffset;\n            this.charToIntBuffer(utf16In.length);\n            this.appendArrayInt(utf16In);\n            return;\n          }\n          inOffset++;\n          outOffset++;\n        }\n        this.position = outOffset;\n      }\n      appendArrayInt(utf16In) {\n        let input = utf16In;\n        let inOffset = 0;\n        let inLimit = utf16In.length;\n        let outInt = this.buffer;\n        let outOffset = this.position;\n        while (inOffset < inLimit) {\n          let c = input[inOffset];\n          inOffset++;\n          if (this.prevHighSurrogate !== -1) {\n            if (Character.isLowSurrogate(c)) {\n              outInt[outOffset] = String.fromCharCode(this.prevHighSurrogate, c).codePointAt(0);\n              outOffset++;\n              this.prevHighSurrogate = -1;\n            } else {\n              outInt[outOffset] = this.prevHighSurrogate;\n              outOffset++;\n              if (Character.isHighSurrogate(c)) {\n                this.prevHighSurrogate = c;\n              } else {\n                outInt[outOffset] = c;\n                outOffset++;\n                this.prevHighSurrogate = -1;\n              }\n            }\n          } else if (Character.isHighSurrogate(c)) {\n            this.prevHighSurrogate = c;\n          } else {\n            outInt[outOffset] = c;\n            outOffset++;\n          }\n        }\n        if (this.prevHighSurrogate !== -1) {\n          outInt[outOffset] = this.prevHighSurrogate;\n          outOffset++;\n        }\n        this.position = outOffset;\n      }\n      byteToCharBuffer(toAppend) {\n        let newBuffer = new Uint16Array(Math.max(this.position + toAppend, this.buffer.length >> 1));\n        newBuffer.set(this.buffer.subarray(0, this.position), 0);\n        this.type = 1;\n        this.buffer = newBuffer;\n      }\n      byteToIntBuffer(toAppend) {\n        let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 2));\n        newBuffer.set(this.buffer.subarray(0, this.position), 0);\n        this.type = 2;\n        this.buffer = newBuffer;\n      }\n      charToIntBuffer(toAppend) {\n        let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 1));\n        newBuffer.set(this.buffer.subarray(0, this.position), 0);\n        this.type = 2;\n        this.buffer = newBuffer;\n      }\n    }\n    CodePointBuffer2.Builder = Builder;\n  })(CodePointBuffer = exports.CodePointBuffer || (exports.CodePointBuffer = {}));\n});\n\n// node_modules/antlr4ts/CodePointCharStream.js\nvar require_CodePointCharStream = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.CodePointCharStream = void 0;\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var IntStream_1 = require_IntStream();\n  var Interval_1 = require_Interval();\n  var Decorators_1 = require_Decorators();\n  var CodePointCharStream = class {\n    constructor(array, position, remaining, name) {\n      assert(position === 0);\n      this._array = array;\n      this._size = remaining;\n      this._name = name;\n      this._position = 0;\n    }\n    get internalStorage() {\n      return this._array;\n    }\n    static fromBuffer(codePointBuffer, name) {\n      if (name === void 0 || name.length === 0) {\n        name = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;\n      }\n      return new CodePointCharStream(codePointBuffer.array(), codePointBuffer.position, codePointBuffer.remaining, name);\n    }\n    consume() {\n      if (this._size - this._position === 0) {\n        assert(this.LA(1) === IntStream_1.IntStream.EOF);\n        throw new RangeError(\"cannot consume EOF\");\n      }\n      this._position++;\n    }\n    get index() {\n      return this._position;\n    }\n    get size() {\n      return this._size;\n    }\n    mark() {\n      return -1;\n    }\n    release(marker) {\n    }\n    seek(index) {\n      this._position = index;\n    }\n    get sourceName() {\n      return this._name;\n    }\n    toString() {\n      return this.getText(Interval_1.Interval.of(0, this.size - 1));\n    }\n    LA(i) {\n      let offset;\n      switch (Math.sign(i)) {\n        case -1:\n          offset = this.index + i;\n          if (offset < 0) {\n            return IntStream_1.IntStream.EOF;\n          }\n          return this._array[offset];\n        case 0:\n          return 0;\n        case 1:\n          offset = this.index + i - 1;\n          if (offset >= this.size) {\n            return IntStream_1.IntStream.EOF;\n          }\n          return this._array[offset];\n      }\n      throw new RangeError(\"Not reached\");\n    }\n    getText(interval) {\n      const startIdx = Math.min(interval.a, this.size);\n      const len = Math.min(interval.b - interval.a + 1, this.size - startIdx);\n      if (this._array instanceof Int32Array) {\n        return String.fromCodePoint(...Array.from(this._array.subarray(startIdx, startIdx + len)));\n      } else {\n        return String.fromCharCode(...Array.from(this._array.subarray(startIdx, startIdx + len)));\n      }\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"consume\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"index\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"mark\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"release\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"seek\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"sourceName\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"toString\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"LA\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CodePointCharStream.prototype, \"getText\", null);\n  exports.CodePointCharStream = CodePointCharStream;\n});\n\n// node_modules/antlr4ts/CharStreams.js\nvar require_CharStreams = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.CharStreams = void 0;\n  var CodePointBuffer_1 = require_CodePointBuffer();\n  var CodePointCharStream_1 = require_CodePointCharStream();\n  var IntStream_1 = require_IntStream();\n  var CharStreams;\n  (function(CharStreams2) {\n    function fromString(s, sourceName) {\n      if (sourceName === void 0 || sourceName.length === 0) {\n        sourceName = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;\n      }\n      let codePointBufferBuilder = CodePointBuffer_1.CodePointBuffer.builder(s.length);\n      let cb = new Uint16Array(s.length);\n      for (let i = 0; i < s.length; i++) {\n        cb[i] = s.charCodeAt(i);\n      }\n      codePointBufferBuilder.append(cb);\n      return CodePointCharStream_1.CodePointCharStream.fromBuffer(codePointBufferBuilder.build(), sourceName);\n    }\n    CharStreams2.fromString = fromString;\n  })(CharStreams = exports.CharStreams || (exports.CharStreams = {}));\n});\n\n// node_modules/antlr4ts/BufferedTokenStream.js\nvar require_BufferedTokenStream = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.BufferedTokenStream = void 0;\n  var assert = __webpack_require__(/*! assert */ \"assert\");\n  var CommonToken_1 = require_CommonToken();\n  var Interval_1 = require_Interval();\n  var Lexer_1 = require_Lexer();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var BufferedTokenStream = class BufferedTokenStream {\n    constructor(tokenSource) {\n      this.tokens = [];\n      this.p = -1;\n      this.fetchedEOF = false;\n      if (tokenSource == null) {\n        throw new Error(\"tokenSource cannot be null\");\n      }\n      this._tokenSource = tokenSource;\n    }\n    get tokenSource() {\n      return this._tokenSource;\n    }\n    set tokenSource(tokenSource) {\n      this._tokenSource = tokenSource;\n      this.tokens.length = 0;\n      this.p = -1;\n      this.fetchedEOF = false;\n    }\n    get index() {\n      return this.p;\n    }\n    mark() {\n      return 0;\n    }\n    release(marker) {\n    }\n    seek(index) {\n      this.lazyInit();\n      this.p = this.adjustSeekIndex(index);\n    }\n    get size() {\n      return this.tokens.length;\n    }\n    consume() {\n      let skipEofCheck;\n      if (this.p >= 0) {\n        if (this.fetchedEOF) {\n          skipEofCheck = this.p < this.tokens.length - 1;\n        } else {\n          skipEofCheck = this.p < this.tokens.length;\n        }\n      } else {\n        skipEofCheck = false;\n      }\n      if (!skipEofCheck && this.LA(1) === Token_1.Token.EOF) {\n        throw new Error(\"cannot consume EOF\");\n      }\n      if (this.sync(this.p + 1)) {\n        this.p = this.adjustSeekIndex(this.p + 1);\n      }\n    }\n    sync(i) {\n      assert(i >= 0);\n      let n = i - this.tokens.length + 1;\n      if (n > 0) {\n        let fetched = this.fetch(n);\n        return fetched >= n;\n      }\n      return true;\n    }\n    fetch(n) {\n      if (this.fetchedEOF) {\n        return 0;\n      }\n      for (let i = 0; i < n; i++) {\n        let t = this.tokenSource.nextToken();\n        if (this.isWritableToken(t)) {\n          t.tokenIndex = this.tokens.length;\n        }\n        this.tokens.push(t);\n        if (t.type === Token_1.Token.EOF) {\n          this.fetchedEOF = true;\n          return i + 1;\n        }\n      }\n      return n;\n    }\n    get(i) {\n      if (i < 0 || i >= this.tokens.length) {\n        throw new RangeError(\"token index \" + i + \" out of range 0..\" + (this.tokens.length - 1));\n      }\n      return this.tokens[i];\n    }\n    getRange(start, stop) {\n      if (start < 0 || stop < 0) {\n        return [];\n      }\n      this.lazyInit();\n      let subset = new Array();\n      if (stop >= this.tokens.length) {\n        stop = this.tokens.length - 1;\n      }\n      for (let i = start; i <= stop; i++) {\n        let t = this.tokens[i];\n        if (t.type === Token_1.Token.EOF) {\n          break;\n        }\n        subset.push(t);\n      }\n      return subset;\n    }\n    LA(i) {\n      let token = this.LT(i);\n      if (!token) {\n        return Token_1.Token.INVALID_TYPE;\n      }\n      return token.type;\n    }\n    tryLB(k) {\n      if (this.p - k < 0) {\n        return void 0;\n      }\n      return this.tokens[this.p - k];\n    }\n    LT(k) {\n      let result = this.tryLT(k);\n      if (result === void 0) {\n        throw new RangeError(\"requested lookback index out of range\");\n      }\n      return result;\n    }\n    tryLT(k) {\n      this.lazyInit();\n      if (k === 0) {\n        throw new RangeError(\"0 is not a valid lookahead index\");\n      }\n      if (k < 0) {\n        return this.tryLB(-k);\n      }\n      let i = this.p + k - 1;\n      this.sync(i);\n      if (i >= this.tokens.length) {\n        return this.tokens[this.tokens.length - 1];\n      }\n      return this.tokens[i];\n    }\n    adjustSeekIndex(i) {\n      return i;\n    }\n    lazyInit() {\n      if (this.p === -1) {\n        this.setup();\n      }\n    }\n    setup() {\n      this.sync(0);\n      this.p = this.adjustSeekIndex(0);\n    }\n    getTokens(start, stop, types) {\n      this.lazyInit();\n      if (start === void 0) {\n        assert(stop === void 0 && types === void 0);\n        return this.tokens;\n      } else if (stop === void 0) {\n        stop = this.tokens.length - 1;\n      }\n      if (start < 0 || stop >= this.tokens.length || stop < 0 || start >= this.tokens.length) {\n        throw new RangeError(\"start \" + start + \" or stop \" + stop + \" not in 0..\" + (this.tokens.length - 1));\n      }\n      if (start > stop) {\n        return [];\n      }\n      if (types === void 0) {\n        return this.tokens.slice(start, stop + 1);\n      } else if (typeof types === \"number\") {\n        types = new Set().add(types);\n      }\n      let typesSet = types;\n      let filteredTokens = this.tokens.slice(start, stop + 1);\n      filteredTokens = filteredTokens.filter((value) => typesSet.has(value.type));\n      return filteredTokens;\n    }\n    nextTokenOnChannel(i, channel) {\n      this.sync(i);\n      if (i >= this.size) {\n        return this.size - 1;\n      }\n      let token = this.tokens[i];\n      while (token.channel !== channel) {\n        if (token.type === Token_1.Token.EOF) {\n          return i;\n        }\n        i++;\n        this.sync(i);\n        token = this.tokens[i];\n      }\n      return i;\n    }\n    previousTokenOnChannel(i, channel) {\n      this.sync(i);\n      if (i >= this.size) {\n        return this.size - 1;\n      }\n      while (i >= 0) {\n        let token = this.tokens[i];\n        if (token.type === Token_1.Token.EOF || token.channel === channel) {\n          return i;\n        }\n        i--;\n      }\n      return i;\n    }\n    getHiddenTokensToRight(tokenIndex, channel = -1) {\n      this.lazyInit();\n      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n        throw new RangeError(tokenIndex + \" not in 0..\" + (this.tokens.length - 1));\n      }\n      let nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);\n      let to;\n      let from = tokenIndex + 1;\n      if (nextOnChannel === -1) {\n        to = this.size - 1;\n      } else {\n        to = nextOnChannel;\n      }\n      return this.filterForChannel(from, to, channel);\n    }\n    getHiddenTokensToLeft(tokenIndex, channel = -1) {\n      this.lazyInit();\n      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n        throw new RangeError(tokenIndex + \" not in 0..\" + (this.tokens.length - 1));\n      }\n      if (tokenIndex === 0) {\n        return [];\n      }\n      let prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);\n      if (prevOnChannel === tokenIndex - 1) {\n        return [];\n      }\n      let from = prevOnChannel + 1;\n      let to = tokenIndex - 1;\n      return this.filterForChannel(from, to, channel);\n    }\n    filterForChannel(from, to, channel) {\n      let hidden = new Array();\n      for (let i = from; i <= to; i++) {\n        let t = this.tokens[i];\n        if (channel === -1) {\n          if (t.channel !== Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL) {\n            hidden.push(t);\n          }\n        } else {\n          if (t.channel === channel) {\n            hidden.push(t);\n          }\n        }\n      }\n      return hidden;\n    }\n    get sourceName() {\n      return this.tokenSource.sourceName;\n    }\n    getText(interval) {\n      if (interval === void 0) {\n        interval = Interval_1.Interval.of(0, this.size - 1);\n      } else if (!(interval instanceof Interval_1.Interval)) {\n        interval = interval.sourceInterval;\n      }\n      let start = interval.a;\n      let stop = interval.b;\n      if (start < 0 || stop < 0) {\n        return \"\";\n      }\n      this.fill();\n      if (stop >= this.tokens.length) {\n        stop = this.tokens.length - 1;\n      }\n      let buf = \"\";\n      for (let i = start; i <= stop; i++) {\n        let t = this.tokens[i];\n        if (t.type === Token_1.Token.EOF) {\n          break;\n        }\n        buf += t.text;\n      }\n      return buf.toString();\n    }\n    getTextFromRange(start, stop) {\n      if (this.isToken(start) && this.isToken(stop)) {\n        return this.getText(Interval_1.Interval.of(start.tokenIndex, stop.tokenIndex));\n      }\n      return \"\";\n    }\n    fill() {\n      this.lazyInit();\n      const blockSize = 1e3;\n      while (true) {\n        let fetched = this.fetch(blockSize);\n        if (fetched < blockSize) {\n          return;\n        }\n      }\n    }\n    isWritableToken(t) {\n      return t instanceof CommonToken_1.CommonToken;\n    }\n    isToken(t) {\n      return t instanceof CommonToken_1.CommonToken;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], BufferedTokenStream.prototype, \"_tokenSource\", void 0);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"tokenSource\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"index\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"mark\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"release\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"seek\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"size\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"consume\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"get\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"LA\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"LT\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"sourceName\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"getText\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    Decorators_1.Override\n  ], BufferedTokenStream.prototype, \"getTextFromRange\", null);\n  BufferedTokenStream = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], BufferedTokenStream);\n  exports.BufferedTokenStream = BufferedTokenStream;\n});\n\n// node_modules/antlr4ts/CommonTokenStream.js\nvar require_CommonTokenStream = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.CommonTokenStream = void 0;\n  var BufferedTokenStream_1 = require_BufferedTokenStream();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var CommonTokenStream2 = class CommonTokenStream extends BufferedTokenStream_1.BufferedTokenStream {\n    constructor(tokenSource, channel = Token_1.Token.DEFAULT_CHANNEL) {\n      super(tokenSource);\n      this.channel = channel;\n    }\n    adjustSeekIndex(i) {\n      return this.nextTokenOnChannel(i, this.channel);\n    }\n    tryLB(k) {\n      if (this.p - k < 0) {\n        return void 0;\n      }\n      let i = this.p;\n      let n = 1;\n      while (n <= k && i > 0) {\n        i = this.previousTokenOnChannel(i - 1, this.channel);\n        n++;\n      }\n      if (i < 0) {\n        return void 0;\n      }\n      return this.tokens[i];\n    }\n    tryLT(k) {\n      this.lazyInit();\n      if (k === 0) {\n        throw new RangeError(\"0 is not a valid lookahead index\");\n      }\n      if (k < 0) {\n        return this.tryLB(-k);\n      }\n      let i = this.p;\n      let n = 1;\n      while (n < k) {\n        if (this.sync(i + 1)) {\n          i = this.nextTokenOnChannel(i + 1, this.channel);\n        }\n        n++;\n      }\n      return this.tokens[i];\n    }\n    getNumberOfOnChannelTokens() {\n      let n = 0;\n      this.fill();\n      for (let t of this.tokens) {\n        if (t.channel === this.channel) {\n          n++;\n        }\n        if (t.type === Token_1.Token.EOF) {\n          break;\n        }\n      }\n      return n;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], CommonTokenStream2.prototype, \"adjustSeekIndex\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonTokenStream2.prototype, \"tryLB\", null);\n  __decorate([\n    Decorators_1.Override\n  ], CommonTokenStream2.prototype, \"tryLT\", null);\n  CommonTokenStream2 = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], CommonTokenStream2);\n  exports.CommonTokenStream = CommonTokenStream2;\n});\n\n// node_modules/antlr4ts/ListTokenSource.js\nvar require_ListTokenSource = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ListTokenSource = void 0;\n  var CommonTokenFactory_1 = require_CommonTokenFactory();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var ListTokenSource = class ListTokenSource {\n    constructor(tokens2, sourceName) {\n      this.i = 0;\n      this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;\n      if (tokens2 == null) {\n        throw new Error(\"tokens cannot be null\");\n      }\n      this.tokens = tokens2;\n      this._sourceName = sourceName;\n    }\n    get charPositionInLine() {\n      if (this.i < this.tokens.length) {\n        return this.tokens[this.i].charPositionInLine;\n      } else if (this.eofToken != null) {\n        return this.eofToken.charPositionInLine;\n      } else if (this.tokens.length > 0) {\n        let lastToken = this.tokens[this.tokens.length - 1];\n        let tokenText = lastToken.text;\n        if (tokenText != null) {\n          let lastNewLine = tokenText.lastIndexOf(\"\\n\");\n          if (lastNewLine >= 0) {\n            return tokenText.length - lastNewLine - 1;\n          }\n        }\n        return lastToken.charPositionInLine + lastToken.stopIndex - lastToken.startIndex + 1;\n      }\n      return 0;\n    }\n    nextToken() {\n      if (this.i >= this.tokens.length) {\n        if (this.eofToken == null) {\n          let start = -1;\n          if (this.tokens.length > 0) {\n            let previousStop = this.tokens[this.tokens.length - 1].stopIndex;\n            if (previousStop !== -1) {\n              start = previousStop + 1;\n            }\n          }\n          let stop = Math.max(-1, start - 1);\n          this.eofToken = this._factory.create({source: this, stream: this.inputStream}, Token_1.Token.EOF, \"EOF\", Token_1.Token.DEFAULT_CHANNEL, start, stop, this.line, this.charPositionInLine);\n        }\n        return this.eofToken;\n      }\n      let t = this.tokens[this.i];\n      if (this.i === this.tokens.length - 1 && t.type === Token_1.Token.EOF) {\n        this.eofToken = t;\n      }\n      this.i++;\n      return t;\n    }\n    get line() {\n      if (this.i < this.tokens.length) {\n        return this.tokens[this.i].line;\n      } else if (this.eofToken != null) {\n        return this.eofToken.line;\n      } else if (this.tokens.length > 0) {\n        let lastToken = this.tokens[this.tokens.length - 1];\n        let line = lastToken.line;\n        let tokenText = lastToken.text;\n        if (tokenText != null) {\n          for (let i = 0; i < tokenText.length; i++) {\n            if (tokenText.charAt(i) === \"\\n\") {\n              line++;\n            }\n          }\n        }\n        return line;\n      }\n      return 1;\n    }\n    get inputStream() {\n      if (this.i < this.tokens.length) {\n        return this.tokens[this.i].inputStream;\n      } else if (this.eofToken != null) {\n        return this.eofToken.inputStream;\n      } else if (this.tokens.length > 0) {\n        return this.tokens[this.tokens.length - 1].inputStream;\n      }\n      return void 0;\n    }\n    get sourceName() {\n      if (this._sourceName) {\n        return this._sourceName;\n      }\n      let inputStream = this.inputStream;\n      if (inputStream != null) {\n        return inputStream.sourceName;\n      }\n      return \"List\";\n    }\n    set tokenFactory(factory) {\n      this._factory = factory;\n    }\n    get tokenFactory() {\n      return this._factory;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ListTokenSource.prototype, \"charPositionInLine\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ListTokenSource.prototype, \"nextToken\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ListTokenSource.prototype, \"line\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ListTokenSource.prototype, \"inputStream\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ListTokenSource.prototype, \"sourceName\", null);\n  __decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], ListTokenSource.prototype, \"tokenFactory\", null);\n  ListTokenSource = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ListTokenSource);\n  exports.ListTokenSource = ListTokenSource;\n});\n\n// node_modules/antlr4ts/misc/MultiMap.js\nvar require_MultiMap = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.MultiMap = void 0;\n  var MultiMap = class extends Map {\n    constructor() {\n      super();\n    }\n    map(key, value) {\n      let elementsForKey = super.get(key);\n      if (!elementsForKey) {\n        elementsForKey = [];\n        super.set(key, elementsForKey);\n      }\n      elementsForKey.push(value);\n    }\n    getPairs() {\n      let pairs = [];\n      this.forEach((values, key) => {\n        values.forEach((v) => {\n          pairs.push([key, v]);\n        });\n      });\n      return pairs;\n    }\n  };\n  exports.MultiMap = MultiMap;\n});\n\n// node_modules/antlr4ts/misc/ParseCancellationException.js\nvar require_ParseCancellationException = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParseCancellationException = void 0;\n  var ParseCancellationException = class extends Error {\n    constructor(cause) {\n      super(cause.message);\n      this.cause = cause;\n      this.stack = cause.stack;\n    }\n    getCause() {\n      return this.cause;\n    }\n  };\n  exports.ParseCancellationException = ParseCancellationException;\n});\n\n// node_modules/antlr4ts/InterpreterRuleContext.js\nvar require_InterpreterRuleContext = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.InterpreterRuleContext = void 0;\n  var Decorators_1 = require_Decorators();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var InterpreterRuleContext = class extends ParserRuleContext_1.ParserRuleContext {\n    constructor(ruleIndex, parent, invokingStateNumber) {\n      if (invokingStateNumber !== void 0) {\n        super(parent, invokingStateNumber);\n      } else {\n        super();\n      }\n      this._ruleIndex = ruleIndex;\n    }\n    get ruleIndex() {\n      return this._ruleIndex;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], InterpreterRuleContext.prototype, \"ruleIndex\", null);\n  exports.InterpreterRuleContext = InterpreterRuleContext;\n});\n\n// node_modules/antlr4ts/ParserInterpreter.js\nvar require_ParserInterpreter = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParserInterpreter = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var BitSet_1 = require_BitSet();\n  var FailedPredicateException_1 = require_FailedPredicateException();\n  var InputMismatchException_1 = require_InputMismatchException();\n  var InterpreterRuleContext_1 = require_InterpreterRuleContext();\n  var LoopEndState_1 = require_LoopEndState();\n  var Decorators_1 = require_Decorators();\n  var Decorators_2 = require_Decorators();\n  var Parser_1 = require_Parser();\n  var ParserATNSimulator_1 = require_ParserATNSimulator();\n  var RecognitionException_1 = require_RecognitionException();\n  var StarLoopEntryState_1 = require_StarLoopEntryState();\n  var Token_1 = require_Token();\n  var ParserInterpreter = class ParserInterpreter2 extends Parser_1.Parser {\n    constructor(grammarFileName, vocabulary, ruleNames, atn, input) {\n      super(grammarFileName instanceof ParserInterpreter2 ? grammarFileName.inputStream : input);\n      this._parentContextStack = [];\n      this.overrideDecision = -1;\n      this.overrideDecisionInputIndex = -1;\n      this.overrideDecisionAlt = -1;\n      this.overrideDecisionReached = false;\n      this._overrideDecisionRoot = void 0;\n      if (grammarFileName instanceof ParserInterpreter2) {\n        let old = grammarFileName;\n        this._grammarFileName = old._grammarFileName;\n        this._atn = old._atn;\n        this.pushRecursionContextStates = old.pushRecursionContextStates;\n        this._ruleNames = old._ruleNames;\n        this._vocabulary = old._vocabulary;\n        this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this._atn, this);\n      } else {\n        vocabulary = vocabulary;\n        ruleNames = ruleNames;\n        atn = atn;\n        this._grammarFileName = grammarFileName;\n        this._atn = atn;\n        this._ruleNames = ruleNames.slice(0);\n        this._vocabulary = vocabulary;\n        this.pushRecursionContextStates = new BitSet_1.BitSet(atn.states.length);\n        for (let state of atn.states) {\n          if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {\n            continue;\n          }\n          if (state.precedenceRuleDecision) {\n            this.pushRecursionContextStates.set(state.stateNumber);\n          }\n        }\n        this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(atn, this);\n      }\n    }\n    reset(resetInput) {\n      if (resetInput === void 0) {\n        super.reset();\n      } else {\n        super.reset(resetInput);\n      }\n      this.overrideDecisionReached = false;\n      this._overrideDecisionRoot = void 0;\n    }\n    get atn() {\n      return this._atn;\n    }\n    get vocabulary() {\n      return this._vocabulary;\n    }\n    get ruleNames() {\n      return this._ruleNames;\n    }\n    get grammarFileName() {\n      return this._grammarFileName;\n    }\n    parse(startRuleIndex) {\n      let startRuleStartState = this._atn.ruleToStartState[startRuleIndex];\n      this._rootContext = this.createInterpreterRuleContext(void 0, ATNState_1.ATNState.INVALID_STATE_NUMBER, startRuleIndex);\n      if (startRuleStartState.isPrecedenceRule) {\n        this.enterRecursionRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex, 0);\n      } else {\n        this.enterRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex);\n      }\n      while (true) {\n        let p = this.atnState;\n        switch (p.stateType) {\n          case ATNStateType_1.ATNStateType.RULE_STOP:\n            if (this._ctx.isEmpty) {\n              if (startRuleStartState.isPrecedenceRule) {\n                let result = this._ctx;\n                let parentContext = this._parentContextStack.pop();\n                this.unrollRecursionContexts(parentContext[0]);\n                return result;\n              } else {\n                this.exitRule();\n                return this._rootContext;\n              }\n            }\n            this.visitRuleStopState(p);\n            break;\n          default:\n            try {\n              this.visitState(p);\n            } catch (e) {\n              if (e instanceof RecognitionException_1.RecognitionException) {\n                this.state = this._atn.ruleToStopState[p.ruleIndex].stateNumber;\n                this.context.exception = e;\n                this.errorHandler.reportError(this, e);\n                this.recover(e);\n              } else {\n                throw e;\n              }\n            }\n            break;\n        }\n      }\n    }\n    enterRecursionRule(localctx, state, ruleIndex, precedence) {\n      this._parentContextStack.push([this._ctx, localctx.invokingState]);\n      super.enterRecursionRule(localctx, state, ruleIndex, precedence);\n    }\n    get atnState() {\n      return this._atn.states[this.state];\n    }\n    visitState(p) {\n      let predictedAlt = 1;\n      if (p.numberOfTransitions > 1) {\n        predictedAlt = this.visitDecisionState(p);\n      }\n      let transition = p.transition(predictedAlt - 1);\n      switch (transition.serializationType) {\n        case 1:\n          if (this.pushRecursionContextStates.get(p.stateNumber) && !(transition.target instanceof LoopEndState_1.LoopEndState)) {\n            let parentContext = this._parentContextStack[this._parentContextStack.length - 1];\n            let localctx = this.createInterpreterRuleContext(parentContext[0], parentContext[1], this._ctx.ruleIndex);\n            this.pushNewRecursionContext(localctx, this._atn.ruleToStartState[p.ruleIndex].stateNumber, this._ctx.ruleIndex);\n          }\n          break;\n        case 5:\n          this.match(transition._label);\n          break;\n        case 2:\n        case 7:\n        case 8:\n          if (!transition.matches(this._input.LA(1), Token_1.Token.MIN_USER_TOKEN_TYPE, 65535)) {\n            this.recoverInline();\n          }\n          this.matchWildcard();\n          break;\n        case 9:\n          this.matchWildcard();\n          break;\n        case 3:\n          let ruleStartState = transition.target;\n          let ruleIndex = ruleStartState.ruleIndex;\n          let newctx = this.createInterpreterRuleContext(this._ctx, p.stateNumber, ruleIndex);\n          if (ruleStartState.isPrecedenceRule) {\n            this.enterRecursionRule(newctx, ruleStartState.stateNumber, ruleIndex, transition.precedence);\n          } else {\n            this.enterRule(newctx, transition.target.stateNumber, ruleIndex);\n          }\n          break;\n        case 4:\n          let predicateTransition = transition;\n          if (!this.sempred(this._ctx, predicateTransition.ruleIndex, predicateTransition.predIndex)) {\n            throw new FailedPredicateException_1.FailedPredicateException(this);\n          }\n          break;\n        case 6:\n          let actionTransition = transition;\n          this.action(this._ctx, actionTransition.ruleIndex, actionTransition.actionIndex);\n          break;\n        case 10:\n          if (!this.precpred(this._ctx, transition.precedence)) {\n            let precedence = transition.precedence;\n            throw new FailedPredicateException_1.FailedPredicateException(this, `precpred(_ctx, ${precedence})`);\n          }\n          break;\n        default:\n          throw new Error(\"UnsupportedOperationException: Unrecognized ATN transition type.\");\n      }\n      this.state = transition.target.stateNumber;\n    }\n    visitDecisionState(p) {\n      let predictedAlt;\n      this.errorHandler.sync(this);\n      let decision = p.decision;\n      if (decision === this.overrideDecision && this._input.index === this.overrideDecisionInputIndex && !this.overrideDecisionReached) {\n        predictedAlt = this.overrideDecisionAlt;\n        this.overrideDecisionReached = true;\n      } else {\n        predictedAlt = this.interpreter.adaptivePredict(this._input, decision, this._ctx);\n      }\n      return predictedAlt;\n    }\n    createInterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {\n      return new InterpreterRuleContext_1.InterpreterRuleContext(ruleIndex, parent, invokingStateNumber);\n    }\n    visitRuleStopState(p) {\n      let ruleStartState = this._atn.ruleToStartState[p.ruleIndex];\n      if (ruleStartState.isPrecedenceRule) {\n        let parentContext = this._parentContextStack.pop();\n        this.unrollRecursionContexts(parentContext[0]);\n        this.state = parentContext[1];\n      } else {\n        this.exitRule();\n      }\n      let ruleTransition = this._atn.states[this.state].transition(0);\n      this.state = ruleTransition.followState.stateNumber;\n    }\n    addDecisionOverride(decision, tokenIndex, forcedAlt) {\n      this.overrideDecision = decision;\n      this.overrideDecisionInputIndex = tokenIndex;\n      this.overrideDecisionAlt = forcedAlt;\n    }\n    get overrideDecisionRoot() {\n      return this._overrideDecisionRoot;\n    }\n    recover(e) {\n      let i = this._input.index;\n      this.errorHandler.recover(this, e);\n      if (this._input.index === i) {\n        let tok = e.getOffendingToken();\n        if (!tok) {\n          throw new Error(\"Expected exception to have an offending token\");\n        }\n        let source = tok.tokenSource;\n        let stream = source !== void 0 ? source.inputStream : void 0;\n        let sourcePair = {source, stream};\n        if (e instanceof InputMismatchException_1.InputMismatchException) {\n          let expectedTokens = e.expectedTokens;\n          if (expectedTokens === void 0) {\n            throw new Error(\"Expected the exception to provide expected tokens\");\n          }\n          let expectedTokenType = Token_1.Token.INVALID_TYPE;\n          if (!expectedTokens.isNil) {\n            expectedTokenType = expectedTokens.minElement;\n          }\n          let errToken = this.tokenFactory.create(sourcePair, expectedTokenType, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, tok.line, tok.charPositionInLine);\n          this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));\n        } else {\n          let source2 = tok.tokenSource;\n          let errToken = this.tokenFactory.create(sourcePair, Token_1.Token.INVALID_TYPE, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, tok.line, tok.charPositionInLine);\n          this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));\n        }\n      }\n    }\n    recoverInline() {\n      return this._errHandler.recoverInline(this);\n    }\n    get rootContext() {\n      return this._rootContext;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ParserInterpreter.prototype, \"_vocabulary\", void 0);\n  __decorate([\n    Decorators_2.Override\n  ], ParserInterpreter.prototype, \"reset\", null);\n  __decorate([\n    Decorators_2.Override\n  ], ParserInterpreter.prototype, \"atn\", null);\n  __decorate([\n    Decorators_2.Override\n  ], ParserInterpreter.prototype, \"vocabulary\", null);\n  __decorate([\n    Decorators_2.Override\n  ], ParserInterpreter.prototype, \"ruleNames\", null);\n  __decorate([\n    Decorators_2.Override\n  ], ParserInterpreter.prototype, \"grammarFileName\", null);\n  __decorate([\n    Decorators_2.Override\n  ], ParserInterpreter.prototype, \"enterRecursionRule\", null);\n  ParserInterpreter = __decorate([\n    __param(1, Decorators_1.NotNull)\n  ], ParserInterpreter);\n  exports.ParserInterpreter = ParserInterpreter;\n});\n\n// node_modules/antlr4ts/tree/pattern/ParseTreeMatch.js\nvar require_ParseTreeMatch = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParseTreeMatch = void 0;\n  var Decorators_1 = require_Decorators();\n  var ParseTreeMatch = class ParseTreeMatch {\n    constructor(tree, pattern, labels, mismatchedNode) {\n      if (!tree) {\n        throw new Error(\"tree cannot be null\");\n      }\n      if (!pattern) {\n        throw new Error(\"pattern cannot be null\");\n      }\n      if (!labels) {\n        throw new Error(\"labels cannot be null\");\n      }\n      this._tree = tree;\n      this._pattern = pattern;\n      this._labels = labels;\n      this._mismatchedNode = mismatchedNode;\n    }\n    get(label) {\n      let parseTrees = this._labels.get(label);\n      if (!parseTrees || parseTrees.length === 0) {\n        return void 0;\n      }\n      return parseTrees[parseTrees.length - 1];\n    }\n    getAll(label) {\n      const nodes = this._labels.get(label);\n      if (!nodes) {\n        return [];\n      }\n      return nodes;\n    }\n    get labels() {\n      return this._labels;\n    }\n    get mismatchedNode() {\n      return this._mismatchedNode;\n    }\n    get succeeded() {\n      return !this._mismatchedNode;\n    }\n    get pattern() {\n      return this._pattern;\n    }\n    get tree() {\n      return this._tree;\n    }\n    toString() {\n      return `Match ${this.succeeded ? \"succeeded\" : \"failed\"}; found ${this.labels.size} labels`;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], ParseTreeMatch.prototype, \"getAll\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreeMatch.prototype, \"labels\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreeMatch.prototype, \"pattern\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreeMatch.prototype, \"tree\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ParseTreeMatch.prototype, \"toString\", null);\n  ParseTreeMatch = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ParseTreeMatch);\n  exports.ParseTreeMatch = ParseTreeMatch;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathLexer.js\nvar require_XPathLexer = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathLexer = void 0;\n  var ATNDeserializer_1 = require_ATNDeserializer();\n  var Lexer_1 = require_Lexer();\n  var LexerATNSimulator_1 = require_LexerATNSimulator();\n  var VocabularyImpl_1 = require_VocabularyImpl();\n  var Utils3 = require_Utils();\n  var XPathLexer = class extends Lexer_1.Lexer {\n    constructor(input) {\n      super(input);\n      this._interp = new LexerATNSimulator_1.LexerATNSimulator(XPathLexer._ATN, this);\n    }\n    get vocabulary() {\n      return XPathLexer.VOCABULARY;\n    }\n    get grammarFileName() {\n      return \"XPathLexer.g4\";\n    }\n    get ruleNames() {\n      return XPathLexer.ruleNames;\n    }\n    get serializedATN() {\n      return XPathLexer._serializedATN;\n    }\n    get channelNames() {\n      return XPathLexer.channelNames;\n    }\n    get modeNames() {\n      return XPathLexer.modeNames;\n    }\n    action(_localctx, ruleIndex, actionIndex) {\n      switch (ruleIndex) {\n        case 4:\n          this.ID_action(_localctx, actionIndex);\n          break;\n      }\n    }\n    ID_action(_localctx, actionIndex) {\n      switch (actionIndex) {\n        case 0:\n          let text = this.text;\n          if (text.charAt(0) === text.charAt(0).toUpperCase()) {\n            this.type = XPathLexer.TOKEN_REF;\n          } else {\n            this.type = XPathLexer.RULE_REF;\n          }\n          break;\n      }\n    }\n    static get _ATN() {\n      if (!XPathLexer.__ATN) {\n        XPathLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils3.toCharArray(XPathLexer._serializedATN));\n      }\n      return XPathLexer.__ATN;\n    }\n  };\n  exports.XPathLexer = XPathLexer;\n  XPathLexer.TOKEN_REF = 1;\n  XPathLexer.RULE_REF = 2;\n  XPathLexer.ANYWHERE = 3;\n  XPathLexer.ROOT = 4;\n  XPathLexer.WILDCARD = 5;\n  XPathLexer.BANG = 6;\n  XPathLexer.ID = 7;\n  XPathLexer.STRING = 8;\n  XPathLexer.channelNames = [\n    \"DEFAULT_TOKEN_CHANNEL\",\n    \"HIDDEN\"\n  ];\n  XPathLexer.modeNames = [\n    \"DEFAULT_MODE\"\n  ];\n  XPathLexer.ruleNames = [\n    \"ANYWHERE\",\n    \"ROOT\",\n    \"WILDCARD\",\n    \"BANG\",\n    \"ID\",\n    \"NameChar\",\n    \"NameStartChar\",\n    \"STRING\"\n  ];\n  XPathLexer._LITERAL_NAMES = [\n    void 0,\n    void 0,\n    void 0,\n    \"'//'\",\n    \"'/'\",\n    \"'*'\",\n    \"'!'\"\n  ];\n  XPathLexer._SYMBOLIC_NAMES = [\n    void 0,\n    \"TOKEN_REF\",\n    \"RULE_REF\",\n    \"ANYWHERE\",\n    \"ROOT\",\n    \"WILDCARD\",\n    \"BANG\",\n    \"ID\",\n    \"STRING\"\n  ];\n  XPathLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(XPathLexer._LITERAL_NAMES, XPathLexer._SYMBOLIC_NAMES, []);\n  XPathLexer._serializedATNSegments = 2;\n  XPathLexer._serializedATNSegment0 = '\u0003\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\u0002\\n2\\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\\x07\t\\x07\u0004\\b\t\\b\u0004\t\t\t\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\\x07\u0006\u001f\\n\u0006\\f\u0006\u000e\u0006\"\\v\u0006\u0003\u0006\u0003\u0006\u0003\\x07\u0003\\x07\u0003\\b\u0003\\b\u0003\t\u0003\t\\x07\t,\\n\t\\f\t\u000e\t/\\v\t\u0003\t\u0003\t\u0003-\u0002\u0002\\n\u0003\u0002\u0005\u0005\u0002\u0006\\x07\u0002\\x07\t\u0002\\b\\v\u0002\t\\r\u0002\u0002\u000f\u0002\u0002\u0011\u0002\\n\u0003\u0002\u0002\u0004\\u02B6\u0002\u0002\u0002\\n\u0002\u0010\u0002\u001d\u00022\u0002;\u0002C\u0002\\\\\u0002a\u0002a\u0002c\u0002|\u0002\\x81\u0002\\xA1\u0002\\xAC\u0002\\xAC\u0002\\xAF\u0002\\xAF\u0002\\xB7\u0002\\xB7\u0002\\xBC\u0002\\xBC\u0002\\xC2\u0002\\xD8\u0002\\xDA\u0002\\xF8\u0002\\xFA\u0002\\u02C3\u0002\\u02C8\u0002\\u02D3\u0002\\u02E2\u0002\\u02E6\u0002\\u02EE\u0002\\u02EE\u0002\\u02F0\u0002\\u02F0\u0002\\u0302\u0002\\u0376\u0002\\u0378\u0002\\u0379\u0002\\u037C\u0002\\u037F\u0002\\u0381\u0002\\u0381\u0002\\u0388\u0002\\u0388\u0002\\u038A\u0002\\u038C\u0002\\u038E\u0002\\u038E\u0002\\u0390\u0002\\u03A3\u0002\\u03A5\u0002\\u03F7\u0002\\u03F9\u0002\\u0483\u0002\\u0485\u0002\\u0489\u0002\\u048C\u0002\\u0531\u0002\\u0533\u0002\\u0558\u0002\\u055B\u0002\\u055B\u0002\\u0563\u0002\\u0589\u0002\\u0593\u0002\\u05BF\u0002\\u05C1\u0002\\u05C1\u0002\\u05C3\u0002\\u05C4\u0002\\u05C6\u0002\\u05C7\u0002\\u05C9\u0002\\u05C9\u0002\\u05D2\u0002\\u05EC\u0002\\u05F2\u0002\\u05F4\u0002\\u0602\u0002\\u0607\u0002\\u0612\u0002\\u061C\u0002\\u061E\u0002\\u061E\u0002\\u0622\u0002\\u066B\u0002\\u0670\u0002\\u06D5\u0002\\u06D7\u0002\\u06DF\u0002\\u06E1\u0002\\u06EA\u0002\\u06EC\u0002\\u06FE\u0002\\u0701\u0002\\u0701\u0002\\u0711\u0002\\u074C\u0002\\u074F\u0002\\u07B3\u0002\\u07C2\u0002\\u07F7\u0002\\u07FC\u0002\\u07FC\u0002\\u0802\u0002\\u082F\u0002\\u0842\u0002\\u085D\u0002\\u08A2\u0002\\u08B6\u0002\\u08B8\u0002\\u08BF\u0002\\u08D6\u0002\\u0965\u0002\\u0968\u0002\\u0971\u0002\\u0973\u0002\\u0985\u0002\\u0987\u0002\\u098E\u0002\\u0991\u0002\\u0992\u0002\\u0995\u0002\\u09AA\u0002\\u09AC\u0002\\u09B2\u0002\\u09B4\u0002\\u09B4\u0002\\u09B8\u0002\\u09BB\u0002\\u09BE\u0002\\u09C6\u0002\\u09C9\u0002\\u09CA\u0002\\u09CD\u0002\\u09D0\u0002\\u09D9\u0002\\u09D9\u0002\\u09DE\u0002\\u09DF\u0002\\u09E1\u0002\\u09E5\u0002\\u09E8\u0002\\u09F3\u0002\\u0A03\u0002\\u0A05\u0002\\u0A07\u0002\\u0A0C\u0002\\u0A11\u0002\\u0A12\u0002\\u0A15\u0002\\u0A2A\u0002\\u0A2C\u0002\\u0A32\u0002\\u0A34\u0002\\u0A35\u0002\\u0A37\u0002\\u0A38\u0002\\u0A3A\u0002\\u0A3B\u0002\\u0A3E\u0002\\u0A3E\u0002\\u0A40\u0002\\u0A44\u0002\\u0A49\u0002\\u0A4A\u0002\\u0A4D\u0002\\u0A4F\u0002\\u0A53\u0002\\u0A53\u0002\\u0A5B\u0002\\u0A5E\u0002\\u0A60\u0002\\u0A60\u0002\\u0A68\u0002\\u0A77\u0002\\u0A83\u0002\\u0A85\u0002\\u0A87\u0002\\u0A8F\u0002\\u0A91\u0002\\u0A93\u0002\\u0A95\u0002\\u0AAA\u0002\\u0AAC\u0002\\u0AB2\u0002\\u0AB4\u0002\\u0AB5\u0002\\u0AB7\u0002\\u0ABB\u0002\\u0ABE\u0002\\u0AC7\u0002\\u0AC9\u0002\\u0ACB\u0002\\u0ACD\u0002\\u0ACF\u0002\\u0AD2\u0002\\u0AD2\u0002\\u0AE2\u0002\\u0AE5\u0002\\u0AE8\u0002\\u0AF1\u0002\\u0AFB\u0002\\u0AFB\u0002\\u0B03\u0002\\u0B05\u0002\\u0B07\u0002\\u0B0E\u0002\\u0B11\u0002\\u0B12\u0002\\u0B15\u0002\\u0B2A\u0002\\u0B2C\u0002\\u0B32\u0002\\u0B34\u0002\\u0B35\u0002\\u0B37\u0002\\u0B3B\u0002\\u0B3E\u0002\\u0B46\u0002\\u0B49\u0002\\u0B4A\u0002\\u0B4D\u0002\\u0B4F\u0002\\u0B58\u0002\\u0B59\u0002\\u0B5E\u0002\\u0B5F\u0002\\u0B61\u0002\\u0B65\u0002\\u0B68\u0002\\u0B71\u0002\\u0B73\u0002\\u0B73\u0002\\u0B84\u0002\\u0B85\u0002\\u0B87\u0002\\u0B8C\u0002\\u0B90\u0002\\u0B92\u0002\\u0B94\u0002\\u0B97\u0002\\u0B9B\u0002\\u0B9C\u0002\\u0B9E\u0002\\u0B9E\u0002\\u0BA0\u0002\\u0BA1\u0002\\u0BA5\u0002\\u0BA6\u0002\\u0BAA\u0002\\u0BAC\u0002\\u0BB0\u0002\\u0BBB\u0002\\u0BC0\u0002\\u0BC4\u0002\\u0BC8\u0002\\u0BCA\u0002\\u0BCC\u0002\\u0BCF\u0002\\u0BD2\u0002\\u0BD2\u0002\\u0BD9\u0002\\u0BD9\u0002\\u0BE8\u0002\\u0BF1\u0002\\u0C02\u0002\\u0C05\u0002\\u0C07\u0002\\u0C0E\u0002\\u0C10\u0002\\u0C12\u0002\\u0C14\u0002\\u0C2A\u0002\\u0C2C\u0002\\u0C3B\u0002\\u0C3F\u0002\\u0C46\u0002\\u0C48\u0002\\u0C4A\u0002\\u0C4C\u0002\\u0C4F\u0002\\u0C57\u0002\\u0C58\u0002\\u0C5A\u0002\\u0C5C\u0002\\u0C62\u0002\\u0C65\u0002\\u0C68\u0002\\u0C71\u0002\\u0C82\u0002\\u0C85\u0002\\u0C87\u0002\\u0C8E\u0002\\u0C90\u0002\\u0C92\u0002\\u0C94\u0002\\u0CAA\u0002\\u0CAC\u0002\\u0CB5\u0002\\u0CB7\u0002\\u0CBB\u0002\\u0CBE\u0002\\u0CC6\u0002\\u0CC8\u0002\\u0CCA\u0002\\u0CCC\u0002\\u0CCF\u0002\\u0CD7\u0002\\u0CD8\u0002\\u0CE0\u0002\\u0CE0\u0002\\u0CE2\u0002\\u0CE5\u0002\\u0CE8\u0002\\u0CF1\u0002\\u0CF3\u0002\\u0CF4\u0002\\u0D03\u0002\\u0D05\u0002\\u0D07\u0002\\u0D0E\u0002\\u0D10\u0002\\u0D12\u0002\\u0D14\u0002\\u0D3C\u0002\\u0D3F\u0002\\u0D46\u0002\\u0D48\u0002\\u0D4A\u0002\\u0D4C\u0002\\u0D50\u0002\\u0D56\u0002\\u0D59\u0002\\u0D61\u0002\\u0D65\u0002\\u0D68\u0002\\u0D71\u0002\\u0D7C\u0002\\u0D81\u0002\\u0D84\u0002\\u0D85\u0002\\u0D87\u0002\\u0D98\u0002\\u0D9C\u0002\\u0DB3\u0002\\u0DB5\u0002\\u0DBD\u0002\\u0DBF\u0002\\u0DBF\u0002\\u0DC2\u0002\\u0DC8\u0002\\u0DCC\u0002\\u0DCC\u0002\\u0DD1\u0002\\u0DD6\u0002\\u0DD8\u0002\\u0DD8\u0002\\u0DDA\u0002\\u0DE1\u0002\\u0DE8\u0002\\u0DF1\u0002\\u0DF4\u0002\\u0DF5\u0002\\u0E03\u0002\\u0E3C\u0002\\u0E42\u0002\\u0E50\u0002\\u0E52\u0002\\u0E5B\u0002\\u0E83\u0002\\u0E84\u0002\\u0E86\u0002\\u0E86\u0002\\u0E89\u0002\\u0E8A\u0002\\u0E8C\u0002\\u0E8C\u0002\\u0E8F\u0002\\u0E8F\u0002\\u0E96\u0002\\u0E99\u0002\\u0E9B\u0002\\u0EA1\u0002\\u0EA3\u0002\\u0EA5\u0002\\u0EA7\u0002\\u0EA7\u0002\\u0EA9\u0002\\u0EA9\u0002\\u0EAC\u0002\\u0EAD\u0002\\u0EAF\u0002\\u0EBB\u0002\\u0EBD\u0002\\u0EBF\u0002\\u0EC2\u0002\\u0EC6\u0002\\u0EC8\u0002\\u0EC8\u0002\\u0ECA\u0002\\u0ECF\u0002\\u0ED2\u0002\\u0EDB\u0002\\u0EDE\u0002\\u0EE1\u0002\\u0F02\u0002\\u0F02\u0002\\u0F1A\u0002\\u0F1B\u0002\\u0F22\u0002\\u0F2B\u0002\\u0F37\u0002\\u0F37\u0002\\u0F39\u0002\\u0F39\u0002\\u0F3B\u0002\\u0F3B\u0002\\u0F40\u0002\\u0F49\u0002\\u0F4B\u0002\\u0F6E\u0002\\u0F73\u0002\\u0F86\u0002\\u0F88\u0002\\u0F99\u0002\\u0F9B\u0002\\u0FBE\u0002\\u0FC8\u0002\\u0FC8\u0002\\u1002\u0002\\u104B\u0002\\u1052\u0002\\u109F\u0002\\u10A2\u0002\\u10C7\u0002\\u10C9\u0002\\u10C9\u0002\\u10CF\u0002\\u10CF\u0002\\u10D2\u0002\\u10FC\u0002\\u10FE\u0002\\u124A\u0002\\u124C\u0002\\u124F\u0002\\u1252\u0002\\u1258\u0002\\u125A\u0002\\u125A\u0002\\u125C\u0002\\u125F\u0002\\u1262\u0002\\u128A\u0002\\u128C\u0002\\u128F\u0002\\u1292\u0002\\u12B2\u0002\\u12B4\u0002\\u12B7\u0002\\u12BA\u0002\\u12C0\u0002\\u12C2\u0002\\u12C2\u0002\\u12C4\u0002\\u12C7\u0002\\u12CA\u0002\\u12D8\u0002\\u12DA\u0002\\u1312\u0002\\u1314\u0002\\u1317\u0002\\u131A\u0002\\u135C\u0002\\u135F\u0002\\u1361\u0002\\u1382\u0002\\u1391\u0002\\u13A2\u0002\\u13F7\u0002\\u13FA\u0002\\u13FF\u0002\\u1403\u0002\\u166E\u0002\\u1671\u0002\\u1681\u0002\\u1683\u0002\\u169C\u0002\\u16A2\u0002\\u16EC\u0002\\u16F0\u0002\\u16FA\u0002\\u1702\u0002\\u170E\u0002\\u1710\u0002\\u1716\u0002\\u1722\u0002\\u1736\u0002\\u1742\u0002\\u1755\u0002\\u1762\u0002\\u176E\u0002\\u1770\u0002\\u1772\u0002\\u1774\u0002\\u1775\u0002\\u1782\u0002\\u17D5\u0002\\u17D9\u0002\\u17D9\u0002\\u17DE\u0002\\u17DF\u0002\\u17E2\u0002\\u17EB\u0002\\u180D\u0002\\u1810\u0002\\u1812\u0002\\u181B\u0002\\u1822\u0002\\u1879\u0002\\u1882\u0002\\u18AC\u0002\\u18B2\u0002\\u18F7\u0002\\u1902\u0002\\u1920\u0002\\u1922\u0002\\u192D\u0002\\u1932\u0002\\u193D\u0002\\u1948\u0002\\u196F\u0002\\u1972\u0002\\u1976\u0002\\u1982\u0002\\u19AD\u0002\\u19B2\u0002\\u19CB\u0002\\u19D2\u0002\\u19DB\u0002\\u1A02\u0002\\u1A1D\u0002\\u1A22\u0002\\u1A60\u0002\\u1A62\u0002\\u1A7E\u0002\\u1A81\u0002\\u1A8B\u0002\\u1A92\u0002\\u1A9B\u0002\\u1AA9\u0002\\u1AA9\u0002\\u1AB2\u0002\\u1ABF\u0002\\u1B02\u0002\\u1B4D\u0002\\u1B52\u0002\\u1B5B\u0002\\u1B6D\u0002\\u1B75\u0002\\u1B82\u0002\\u1BF5\u0002\\u1C02\u0002\\u1C39\u0002\\u1C42\u0002\\u1C4B\u0002\\u1C4F\u0002\\u1C7F\u0002\\u1C82\u0002\\u1C8A\u0002\\u1CD2\u0002\\u1CD4\u0002\\u1CD6\u0002\\u1CF8\u0002\\u1CFA\u0002\\u1CFB\u0002\\u1D02\u0002\\u1DF7\u0002\\u1DFD\u0002\\u1F17\u0002\\u1F1A\u0002\\u1F1F\u0002\\u1F22\u0002\\u1F47\u0002\\u1F4A\u0002\\u1F4F\u0002\\u1F52\u0002\\u1F59\u0002\\u1F5B\u0002\\u1F5B\u0002\\u1F5D\u0002\\u1F5D\u0002\\u1F5F\u0002\\u1F5F\u0002\\u1F61\u0002\\u1F7F\u0002\\u1F82\u0002\\u1FB6\u0002\\u1FB8\u0002\\u1FBE\u0002\\u1FC0\u0002\\u1FC0\u0002\\u1FC4\u0002\\u1FC6\u0002\\u1FC8\u0002\\u1FCE\u0002\\u1FD2\u0002\\u1FD5\u0002\\u1FD8\u0002\\u1FDD\u0002\\u1FE2\u0002\\u1FEE\u0002\\u1FF4\u0002\\u1FF6\u0002\\u1FF8\u0002\\u1FFE\u0002\\u200D\u0002\\u2011\u0002\\u202C\u0002\\u2030\u0002\\u2041\u0002\\u2042\u0002\\u2056\u0002\\u2056\u0002\\u2062\u0002\\u2066\u0002\\u2068\u0002\\u2071\u0002\\u2073\u0002\\u2073\u0002\\u2081\u0002\\u2081\u0002\\u2092\u0002\\u209E\u0002\\u20D2\u0002\\u20DE\u0002\\u20E3\u0002\\u20E3\u0002\\u20E7\u0002\\u20F2\u0002\\u2104\u0002\\u2104\u0002\\u2109\u0002\\u2109\u0002\\u210C\u0002\\u2115\u0002\\u2117\u0002\\u2117\u0002\\u211B\u0002\\u211F\u0002\\u2126\u0002\\u2126\u0002\\u2128\u0002\\u2128\u0002\\u212A\u0002\\u212A\u0002\\u212C\u0002\\u212F\u0002\\u2131\u0002\\u213B\u0002\\u213E\u0002\\u2141\u0002\\u2147\u0002\\u214B\u0002\\u2150\u0002\\u2150\u0002\\u2162\u0002\\u218A\u0002\\u2C02\u0002\\u2C30\u0002\\u2C32\u0002\\u2C60\u0002\\u2C62\u0002\\u2CE6\u0002\\u2CED\u0002\\u2CF5\u0002\\u2D02\u0002\\u2D27\u0002\\u2D29\u0002\\u2D29\u0002\\u2D2F\u0002\\u2D2F\u0002\\u2D32\u0002\\u2D69\u0002\\u2D71\u0002\\u2D71\u0002\\u2D81\u0002\\u2D98\u0002\\u2DA2\u0002\\u2DA8\u0002\\u2DAA\u0002\\u2DB0\u0002\\u2DB2\u0002\\u2DB8\u0002\\u2DBA\u0002\\u2DC0\u0002\\u2DC2\u0002\\u2DC8\u0002\\u2DCA\u0002\\u2DD0\u0002\\u2DD2\u0002\\u2DD8\u0002\\u2DDA\u0002\\u2DE0\u0002\\u2DE2\u0002\\u2E01\u0002\\u2E31\u0002\\u2E31\u0002\\u3007\u0002\\u3009\u0002\\u3023\u0002\\u3031\u0002\\u3033\u0002\\u3037\u0002\\u303A\u0002\\u303E\u0002\\u3043\u0002\\u3098\u0002\\u309B\u0002\\u309C\u0002\\u309F\u0002\\u30A1\u0002\\u30A3\u0002\\u30FC\u0002\\u30FE\u0002\\u3101\u0002\\u3107\u0002\\u312F\u0002\\u3133\u0002\\u3190\u0002\\u31A2\u0002\\u31BC\u0002\\u31F2\u0002\\u3201\u0002\\u3402\u0002\\u4DB7\u0002\\u4E02\u0002\\u9FD7\u0002\\uA002\u0002\\uA48E\u0002\\uA4D2\u0002\\uA4FF\u0002\\uA502\u0002\\uA60E\u0002\\uA612\u0002\\uA62D\u0002\\uA642\u0002\\uA671\u0002\\uA676\u0002\\uA67F\u0002\\uA681\u0002\\uA6F3\u0002\\uA719\u0002\\uA721\u0002\\uA724\u0002\\uA78A\u0002\\uA78D\u0002\\uA7B0\u0002\\uA7B2\u0002\\uA7B9\u0002\\uA7F9\u0002\\uA829\u0002\\uA842\u0002\\uA875\u0002\\uA882\u0002\\uA8C7\u0002\\uA8D2\u0002\\uA8DB\u0002\\uA8E2\u0002\\uA8F9\u0002\\uA8FD\u0002\\uA8FD\u0002\\uA8FF\u0002\\uA8FF\u0002\\uA902\u0002\\uA92F\u0002\\uA932\u0002\\uA955\u0002\\uA962\u0002\\uA97E\u0002\\uA982\u0002\\uA9C2\u0002\\uA9D1\u0002\\uA9DB\u0002\\uA9E2\u0002\\uAA00\u0002\\uAA02\u0002\\uAA38\u0002\\uAA42\u0002\\uAA4F\u0002\\uAA52\u0002\\uAA5B\u0002\\uAA62\u0002\\uAA78\u0002\\uAA7C\u0002\\uAAC4\u0002\\uAADD\u0002\\uAADF\u0002\\uAAE2\u0002\\uAAF1\u0002\\uAAF4\u0002\\uAAF8\u0002\\uAB03\u0002\\uAB08\u0002\\uAB0B\u0002\\uAB10\u0002\\uAB13\u0002\\uAB18\u0002\\uAB22\u0002\\uAB28\u0002\\uAB2A\u0002\\uAB30\u0002\\uAB32\u0002\\uAB5C\u0002\\uAB5E\u0002\\uAB67\u0002\\uAB72\u0002\\uABEC\u0002\\uABEE\u0002\\uABEF\u0002\\uABF2\u0002\\uABFB\u0002\\uAC02\u0002\\uD7A5\u0002\\uD7B2\u0002\\uD7C8\u0002\\uD7CD\u0002\\uD7FD\u0002\\uF902\u0002\\uFA6F\u0002\\uFA72\u0002\\uFADB\u0002\\uFB02\u0002\\uFB08\u0002\\uFB15\u0002\\uFB19\u0002\\uFB1F\u0002\\uFB2A\u0002\\uFB2C\u0002\\uFB38\u0002\\uFB3A\u0002\\uFB3E\u0002\\uFB40\u0002\\uFB40\u0002\\uFB42\u0002\\uFB43\u0002\\uFB45\u0002\\uFB46\u0002\\uFB48\u0002\\uFBB3\u0002\\uFBD5\u0002\\uFD3F\u0002\\uFD52\u0002\\uFD91\u0002\\uFD94\u0002\\uFDC9\u0002\\uFDF2\u0002\\uFDFD\u0002\\uFE02\u0002\\uFE11\u0002\\uFE22\u0002\\uFE31\u0002\\uFE35\u0002\\uFE36\u0002\\uFE4F\u0002\\uFE51\u0002\\uFE72\u0002\\uFE76\u0002\\uFE78\u0002\\uFEFE\u0002\\uFF01\u0002\\uFF01\u0002\\uFF12\u0002\\uFF1B\u0002\\uFF23\u0002\\uFF3C\u0002\\uFF41\u0002\\uFF41\u0002\\uFF43\u0002\\uFF5C\u0002\\uFF68\u0002\\uFFC0\u0002\\uFFC4\u0002\\uFFC9\u0002\\uFFCC\u0002\\uFFD1\u0002\\uFFD4\u0002\\uFFD9\u0002\\uFFDC\u0002\\uFFDE\u0002\\uFFFB\u0002\\uFFFD\u0002\u0002\u0003\\r\u0003\u000f\u0003(\u0003*\u0003<\u0003>\u0003?\u0003A\u0003O\u0003R\u0003_\u0003\\x82\u0003\\xFC\u0003\\u0142\u0003\\u0176\u0003\\u01FF\u0003\\u01FF\u0003\\u0282\u0003\\u029E\u0003\\u02A2\u0003\\u02D2\u0003\\u02E2\u0003\\u02E2\u0003\\u0302\u0003\\u0321\u0003\\u0332\u0003\\u034C\u0003\\u0352\u0003\\u037C\u0003\\u0382\u0003\\u039F\u0003\\u03A2\u0003\\u03C5\u0003\\u03CA\u0003\\u03D1\u0003\\u03D3\u0003\\u03D7\u0003\\u0402\u0003\\u049F\u0003\\u04A2\u0003\\u04AB\u0003\\u04B2\u0003\\u04D5\u0003\\u04DA\u0003\\u04FD\u0003\\u0502\u0003\\u0529\u0003\\u0532\u0003\\u0565\u0003\\u0602\u0003\\u0738\u0003\\u0742\u0003\\u0757\u0003\\u0762\u0003\\u0769\u0003\\u0802\u0003\\u0807\u0003\\u080A\u0003\\u080A\u0003\\u080C\u0003\\u0837\u0003\\u0839\u0003\\u083A\u0003\\u083E\u0003\\u083E\u0003\\u0841\u0003\\u0857\u0003\\u0862\u0003\\u0878\u0003\\u0882\u0003\\u08A0\u0003\\u08E2\u0003\\u08F4\u0003\\u08F6\u0003\\u08F7\u0003\\u0902\u0003\\u0917\u0003\\u0922\u0003\\u093B\u0003\\u0982\u0003\\u09B9\u0003\\u09C0\u0003\\u09C1\u0003\\u0A02\u0003\\u0A05\u0003\\u0A07\u0003\\u0A08\u0003\\u0A0E\u0003\\u0A15\u0003\\u0A17\u0003\\u0A19\u0003\\u0A1B\u0003\\u0A35\u0003\\u0A3A\u0003\\u0A3C\u0003\\u0A41\u0003\\u0A41\u0003\\u0A62\u0003\\u0A7E\u0003\\u0A82\u0003\\u0A9E\u0003\\u0AC2\u0003\\u0AC9\u0003\\u0ACB\u0003\\u0AE8\u0003\\u0B02\u0003\\u0B37\u0003\\u0B42\u0003\\u0B57\u0003\\u0B62\u0003\\u0B74\u0003\\u0B82\u0003\\u0B93\u0003\\u0C02\u0003\\u0C4A\u0003\\u0C82\u0003\\u0CB4\u0003\\u0CC2\u0003\\u0CF4\u0003\\u1002\u0003\\u1048\u0003\\u1068\u0003\\u1071\u0003\\u1081\u0003\\u10BC\u0003\\u10BF\u0003\\u10BF\u0003\\u10D2\u0003\\u10EA\u0003\\u10F2\u0003\\u10FB\u0003\\u1102\u0003\\u1136\u0003\\u1138\u0003\\u1141\u0003\\u1152\u0003\\u1175\u0003\\u1178\u0003\\u1178\u0003\\u1182\u0003\\u11C6\u0003\\u11CC\u0003\\u11CE\u0003\\u11D2\u0003\\u11DC\u0003\\u11DE\u0003\\u11DE\u0003\\u1202\u0003\\u1213\u0003\\u1215\u0003\\u1239\u0003\\u1240\u0003\\u1240\u0003\\u1282\u0003\\u1288\u0003\\u128A\u0003\\u128A\u0003\\u128C\u0003\\u128F\u0003\\u1291\u0003\\u129F\u0003\\u12A1\u0003\\u12AA\u0003\\u12B2\u0003\\u12EC\u0003\\u12F2\u0003\\u12FB\u0003\\u1302\u0003\\u1305\u0003\\u1307\u0003\\u130E\u0003\\u1311\u0003\\u1312\u0003\\u1315\u0003\\u132A\u0003\\u132C\u0003\\u1332\u0003\\u1334\u0003\\u1335\u0003\\u1337\u0003\\u133B\u0003\\u133E\u0003\\u1346\u0003\\u1349\u0003\\u134A\u0003\\u134D\u0003\\u134F\u0003\\u1352\u0003\\u1352\u0003\\u1359\u0003\\u1359\u0003\\u135F\u0003\\u1365\u0003\\u1368\u0003\\u136E\u0003\\u1372\u0003\\u1376\u0003\\u1402\u0003\\u144C\u0003\\u1452\u0003\\u145B\u0003\\u1482\u0003\\u14C7\u0003\\u14C9\u0003\\u14C9\u0003\\u14D2\u0003\\u14DB\u0003\\u1582\u0003\\u15B7\u0003\\u15BA\u0003\\u15C2\u0003\\u15DA\u0003\\u15DF\u0003\\u1602\u0003\\u1642\u0003\\u1646\u0003\\u1646\u0003\\u1652\u0003\\u165B\u0003\\u1682\u0003\\u16B9\u0003\\u16C2\u0003\\u16CB\u0003\\u1702\u0003\\u171B\u0003\\u171F\u0003\\u172D\u0003\\u1732\u0003\\u173B\u0003\\u18A2\u0003\\u18EB\u0003\\u1901\u0003\\u1901\u0003\\u1AC2\u0003\\u1AFA\u0003\\u1C02\u0003\\u1C0A\u0003\\u1C0C\u0003\\u1C38\u0003\\u1C3A\u0003\\u1C42\u0003\\u1C52\u0003\\u1C5B\u0003\\u1C74\u0003\\u1C91\u0003\\u1C94\u0003\\u1CA9\u0003\\u1CAB\u0003\\u1CB8\u0003\\u2002\u0003\\u239B\u0003\\u2402\u0003\\u2470\u0003\\u2482\u0003\\u2545\u0003\\u3002\u0003\\u3430\u0003\\u4402\u0003\\u4648\u0003\\u6802\u0003\\u6A3A\u0003\\u6A42\u0003\\u6A60\u0003\\u6A62\u0003\\u6A6B\u0003\\u6AD2\u0003\\u6AEF\u0003\\u6AF2\u0003\\u6AF6\u0003\\u6B02\u0003\\u6B38\u0003\\u6B42\u0003\\u6B45\u0003\\u6B52\u0003\\u6B5B\u0003\\u6B65\u0003\\u6B79\u0003\\u6B7F\u0003\\u6B91\u0003\\u6F02\u0003\\u6F46\u0003\\u6F52\u0003\\u6F80\u0003\\u6F91\u0003\\u6FA1\u0003\\u6FE2\u0003\\u6FE2\u0003\\u7002\u0003\\u87EE\u0003\\u8802\u0003\\u8AF4\u0003\\uB002\u0003\\uB003\u0003\\uBC02\u0003\\uBC6C\u0003\\uBC72\u0003\\uBC7E\u0003\\uBC82\u0003\\uBC8A\u0003\\uBC92\u0003\\uBC9B\u0003\\uBC9F\u0003\\uBCA0\u0003\\uBCA2\u0003\\uBCA5\u0003\\uD167\u0003\\uD16B\u0003\\uD16F\u0003\\uD184\u0003\\uD187\u0003\\uD18D\u0003\\uD1AC\u0003\\uD1AF\u0003\\uD244\u0003\\uD246\u0003\\uD402\u0003\\uD456\u0003\\uD458\u0003\\uD49E\u0003\\uD4A0\u0003\\uD4A1\u0003\\uD4A4\u0003\\uD4A4\u0003\\uD4A7\u0003\\uD4A8\u0003\\uD4AB\u0003\\uD4AE\u0003\\uD4B0\u0003\\uD4BB\u0003\\uD4BD\u0003\\uD4BD\u0003\\uD4BF\u0003\\uD4C5\u0003\\uD4C7\u0003\\uD507\u0003\\uD509\u0003\\uD50C\u0003\\uD50F\u0003\\uD516\u0003\\uD518\u0003\\uD51E\u0003\\uD520\u0003\\uD53B\u0003\\uD53D\u0003\\uD540\u0003\\uD542\u0003\\uD546\u0003\\uD548\u0003\\uD548\u0003\\uD54C\u0003\\uD552\u0003\\uD554\u0003\\uD6A7\u0003\\uD6AA\u0003\\uD6C2\u0003\\uD6C4\u0003\\uD6DC\u0003\\uD6DE\u0003\\uD6FC\u0003\\uD6FE\u0003\\uD716\u0003\\uD718\u0003\\uD736\u0003\\uD738\u0003\\uD750\u0003\\uD752\u0003\\uD770\u0003\\uD772\u0003\\uD78A\u0003\\uD78C\u0003\\uD7AA\u0003\\uD7AC\u0003\\uD7C4\u0003\\uD7C6\u0003\\uD7CD\u0003\\uD7D0\u0003\\uD801\u0003\\uDA02\u0003\\uDA38\u0003\\uDA3D\u0003\\uDA6E\u0003\\uDA77\u0003\\uDA77\u0003\\uDA86\u0003\\uDA86\u0003\\uDA9D\u0003\\uDAA1\u0003\\uDAA3\u0003\\uDAB1\u0003\\uE002\u0003\\uE008\u0003\\uE00A\u0003\\uE01A\u0003\\uE01D\u0003\\uE023\u0003\\uE025\u0003\\uE026\u0003\\uE028\u0003\\uE02C\u0003\\uE802\u0003\\uE8C6\u0003\\uE8D2\u0003\\uE8D8\u0003\\uE902\u0003\\uE94C\u0003\\uE952\u0003\\uE95B\u0003\\uEE02\u0003\\uEE05\u0003\\uEE07\u0003\\uEE21\u0003\\uEE23\u0003\\uEE24\u0003\\uEE26\u0003\\uEE26\u0003\\uEE29\u0003\\uEE29\u0003\\uEE2B\u0003\\uEE34\u0003\\uEE36\u0003\\uEE39\u0003\\uEE3B\u0003\\uEE3B\u0003\\uEE3D\u0003\\uEE3D\u0003\\uEE44\u0003\\uEE44\u0003\\uEE49\u0003\\uEE49\u0003\\uEE4B\u0003\\uEE4B\u0003\\uEE4D\u0003\\uEE4D\u0003\\uEE4F\u0003\\uEE51\u0003\\uEE53\u0003\\uEE54\u0003\\uEE56\u0003\\uEE56\u0003\\uEE59\u0003\\uEE59\u0003\\uEE5B\u0003\\uEE5B\u0003\\uEE5D\u0003\\uEE5D\u0003\\uEE5F\u0003\\uEE5F\u0003\\uEE61\u0003\\uEE61\u0003\\uEE63\u0003\\uEE64\u0003\\uEE66\u0003\\uEE66\u0003\\uEE69\u0003\\uEE6C\u0003\\uEE6E\u0003\\uEE74\u0003\\uEE76\u0003\\uEE79\u0003\\uEE7B\u0003\\uEE7E\u0003\\uEE80\u0003\\uEE80\u0003\\uEE82\u0003\\uEE8B\u0003\\uEE8D\u0003\\uEE9D\u0003\\uEEA3\u0003\\uEEA5\u0003\\uEEA7\u0003\\uEEAB\u0003\\uEEAD\u0003\\uEEBD\u0003\u0002\u0004\\uA6D8\u0004\\uA702\u0004\\uB736\u0004\\uB742\u0004\\uB81F\u0004\\uB822\u0004\\uCEA3\u0004\\uF802\u0004\\uFA1F\u0004\u0003\u0010\u0003\u0010\"\u0010\\x81\u0010\\u0102\u0010\\u01F1\u0010\\u0240\u0002C\u0002\\\\\u0002c\u0002|\u0002\\xAC\u0002\\xAC\u0002\\xB7\u0002\\xB7\u0002\\xBC\u0002\\xBC\u0002\\xC2\u0002\\xD8\u0002\\xDA\u0002\\xF8\u0002\\xFA\u0002\\u02C3\u0002\\u02C8\u0002\\u02D3\u0002\\u02E2\u0002\\u02E6\u0002\\u02EE\u0002\\u02EE\u0002\\u02F0\u0002\\u02F0\u0002\\u0372\u0002\\u0376\u0002\\u0378\u0002\\u0379\u0002\\u037C\u0002\\u037F\u0002\\u0381\u0002\\u0381\u0002\\u0388\u0002\\u0388\u0002\\u038A\u0002\\u038C\u0002\\u038E\u0002\\u038E\u0002\\u0390\u0002\\u03A3\u0002\\u03A5\u0002\\u03F7\u0002\\u03F9\u0002\\u0483\u0002\\u048C\u0002\\u0531\u0002\\u0533\u0002\\u0558\u0002\\u055B\u0002\\u055B\u0002\\u0563\u0002\\u0589\u0002\\u05D2\u0002\\u05EC\u0002\\u05F2\u0002\\u05F4\u0002\\u0622\u0002\\u064C\u0002\\u0670\u0002\\u0671\u0002\\u0673\u0002\\u06D5\u0002\\u06D7\u0002\\u06D7\u0002\\u06E7\u0002\\u06E8\u0002\\u06F0\u0002\\u06F1\u0002\\u06FC\u0002\\u06FE\u0002\\u0701\u0002\\u0701\u0002\\u0712\u0002\\u0712\u0002\\u0714\u0002\\u0731\u0002\\u074F\u0002\\u07A7\u0002\\u07B3\u0002\\u07B3\u0002\\u07CC\u0002\\u07EC\u0002\\u07F6\u0002\\u07F7\u0002\\u07FC\u0002\\u07FC\u0002\\u0802\u0002\\u0817\u0002\\u081C\u0002\\u081C\u0002\\u0826\u0002\\u0826\u0002\\u082A\u0002\\u082A\u0002\\u0842\u0002\\u085A\u0002\\u08A2\u0002\\u08B6\u0002\\u08B8\u0002\\u08BF\u0002\\u0906\u0002\\u093B\u0002\\u093F\u0002\\u093F\u0002\\u0952\u0002\\u0952\u0002\\u095A\u0002\\u0963\u0002\\u0973\u0002\\u0982\u0002\\u0987\u0002\\u098E\u0002\\u0991\u0002\\u0992\u0002\\u0995\u0002\\u09AA\u0002\\u09AC\u0002\\u09B2\u0002\\u09B4\u0002\\u09B4\u0002\\u09B8\u0002\\u09BB\u0002\\u09BF\u0002\\u09BF\u0002\\u09D0\u0002\\u09D0\u0002\\u09DE\u0002\\u09DF\u0002\\u09E1\u0002\\u09E3\u0002\\u09F2\u0002\\u09F3\u0002\\u0A07\u0002\\u0A0C\u0002\\u0A11\u0002\\u0A12\u0002\\u0A15\u0002\\u0A2A\u0002\\u0A2C\u0002\\u0A32\u0002\\u0A34\u0002\\u0A35\u0002\\u0A37\u0002\\u0A38\u0002\\u0A3A\u0002\\u0A3B\u0002\\u0A5B\u0002\\u0A5E\u0002\\u0A60\u0002\\u0A60\u0002\\u0A74\u0002\\u0A76\u0002\\u0A87\u0002\\u0A8F\u0002\\u0A91\u0002\\u0A93\u0002\\u0A95\u0002\\u0AAA\u0002\\u0AAC\u0002\\u0AB2\u0002\\u0AB4\u0002\\u0AB5\u0002\\u0AB7\u0002\\u0ABB\u0002\\u0ABF\u0002\\u0ABF\u0002\\u0AD2\u0002\\u0AD2\u0002\\u0AE2\u0002\\u0AE3\u0002\\u0AFB\u0002\\u0AFB\u0002\\u0B07\u0002\\u0B0E\u0002\\u0B11\u0002\\u0B12\u0002\\u0B15\u0002\\u0B2A\u0002\\u0B2C\u0002\\u0B32\u0002\\u0B34\u0002\\u0B35\u0002\\u0B37\u0002\\u0B3B\u0002\\u0B3F\u0002\\u0B3F\u0002\\u0B5E\u0002\\u0B5F\u0002\\u0B61\u0002\\u0B63\u0002\\u0B73\u0002\\u0B73\u0002\\u0B85\u0002\\u0B85\u0002\\u0B87\u0002\\u0B8C\u0002\\u0B90\u0002\\u0B92\u0002\\u0B94\u0002\\u0B97\u0002\\u0B9B\u0002\\u0B9C\u0002\\u0B9E\u0002\\u0B9E\u0002\\u0BA0\u0002\\u0BA1\u0002\\u0BA5\u0002\\u0BA6\u0002\\u0BAA\u0002\\u0BAC\u0002\\u0BB0\u0002\\u0BBB\u0002\\u0BD2\u0002\\u0BD2\u0002\\u0C07\u0002\\u0C0E\u0002\\u0C10\u0002\\u0C12\u0002\\u0C14\u0002\\u0C2A\u0002\\u0C2C\u0002\\u0C3B\u0002\\u0C3F\u0002\\u0C3F\u0002\\u0C5A\u0002\\u0C5C\u0002\\u0C62\u0002\\u0C63\u0002\\u0C82\u0002\\u0C82\u0002\\u0C87\u0002\\u0C8E\u0002\\u0C90\u0002\\u0C92\u0002\\u0C94\u0002\\u0CAA\u0002\\u0CAC\u0002\\u0CB5\u0002\\u0CB7\u0002\\u0CBB\u0002\\u0CBF\u0002\\u0CBF\u0002\\u0CE0\u0002\\u0CE0\u0002\\u0CE2\u0002\\u0CE3\u0002\\u0CF3\u0002\\u0CF4\u0002\\u0D07\u0002\\u0D0E\u0002\\u0D10\u0002\\u0D12\u0002\\u0D14\u0002\\u0D3C\u0002\\u0D3F\u0002\\u0D3F\u0002\\u0D50\u0002\\u0D50\u0002\\u0D56\u0002\\u0D58\u0002\\u0D61\u0002\\u0D63\u0002\\u0D7C\u0002\\u0D81\u0002\\u0D87\u0002\\u0D98\u0002\\u0D9C\u0002\\u0DB3\u0002\\u0DB5\u0002\\u0DBD\u0002\\u0DBF\u0002\\u0DBF\u0002\\u0DC2\u0002\\u0DC8\u0002\\u0E03\u0002\\u0E32\u0002\\u0E34\u0002\\u0E35\u0002\\u0E42\u0002\\u0E48\u0002\\u0E83\u0002\\u0E84\u0002\\u0E86\u0002\\u0E86\u0002\\u0E89\u0002\\u0E8A\u0002\\u0E8C\u0002\\u0E8C\u0002\\u0E8F\u0002\\u0E8F\u0002\\u0E96\u0002\\u0E99\u0002\\u0E9B\u0002\\u0EA1\u0002\\u0EA3\u0002\\u0EA5\u0002\\u0EA7\u0002\\u0EA7\u0002\\u0EA9\u0002\\u0EA9\u0002\\u0EAC\u0002\\u0EAD\u0002\\u0EAF\u0002\\u0EB2\u0002\\u0EB4\u0002\\u0EB5\u0002\\u0EBF\u0002\\u0EBF\u0002\\u0EC2\u0002\\u0EC6\u0002\\u0EC8\u0002\\u0EC8\u0002\\u0EDE\u0002\\u0EE1\u0002\\u0F02\u0002\\u0F02\u0002\\u0F42\u0002\\u0F49\u0002\\u0F4B\u0002\\u0F6E\u0002\\u0F8A\u0002\\u0F8E\u0002\\u1002\u0002\\u102C\u0002\\u1041\u0002\\u1041\u0002\\u1052\u0002\\u1057\u0002\\u105C\u0002\\u105F\u0002\\u1063\u0002\\u1063\u0002\\u1067\u0002\\u1068\u0002\\u1070\u0002\\u1072\u0002\\u1077\u0002\\u1083\u0002\\u1090\u0002\\u1090\u0002\\u10A2\u0002\\u10C7\u0002\\u10C9\u0002\\u10C9\u0002\\u10CF\u0002\\u10CF\u0002\\u10D2\u0002\\u10FC\u0002\\u10FE\u0002\\u124A\u0002\\u124C\u0002\\u124F\u0002\\u1252\u0002\\u1258\u0002\\u125A\u0002\\u125A\u0002\\u125C\u0002\\u125F\u0002\\u1262\u0002\\u128A\u0002\\u128C\u0002\\u128F\u0002\\u1292\u0002\\u12B2\u0002\\u12B4\u0002\\u12B7\u0002\\u12BA\u0002\\u12C0\u0002\\u12C2\u0002\\u12C2\u0002\\u12C4\u0002\\u12C7\u0002\\u12CA\u0002\\u12D8\u0002\\u12DA\u0002\\u1312\u0002\\u1314\u0002\\u1317\u0002\\u131A\u0002\\u135C\u0002\\u1382\u0002\\u1391\u0002\\u13A2\u0002\\u13F7\u0002\\u13FA\u0002\\u13FF\u0002\\u1403\u0002\\u166E\u0002\\u1671\u0002\\u1681\u0002\\u1683\u0002\\u169C\u0002\\u16A2\u0002\\u16EC\u0002\\u16F0\u0002\\u16FA\u0002\\u1702\u0002\\u170E\u0002\\u1710\u0002\\u1713\u0002\\u1722\u0002\\u1733\u0002\\u1742\u0002\\u1753\u0002\\u1762\u0002\\u176E\u0002\\u1770\u0002\\u1772\u0002\\u1782\u0002\\u17B5\u0002\\u17D9\u0002\\u17D9\u0002\\u17DE\u0002\\u17DE\u0002\\u1822\u0002\\u1879\u0002\\u1882\u0002\\u1886\u0002\\u1889\u0002\\u18AA\u0002\\u18AC\u0002\\u18AC\u0002\\u18B2\u0002\\u18F7\u0002\\u1902\u0002\\u1920\u0002\\u1952\u0002\\u196F\u0002\\u1972\u0002\\u1976\u0002\\u1982\u0002\\u19AD\u0002\\u19B2\u0002\\u19CB\u0002\\u1A02\u0002\\u1A18\u0002\\u1A22\u0002\\u1A56\u0002\\u1AA9\u0002\\u1AA9\u0002\\u1B07\u0002\\u1B35\u0002\\u1B47\u0002\\u1B4D\u0002\\u1B85\u0002\\u1BA2\u0002\\u1BB0\u0002\\u1BB1\u0002\\u1BBC\u0002\\u1BE7\u0002\\u1C02\u0002\\u1C25\u0002\\u1C4F\u0002\\u1C51\u0002\\u1C5C\u0002\\u1C7F\u0002\\u1C82\u0002\\u1C8A\u0002\\u1CEB\u0002\\u1CEE\u0002\\u1CF0\u0002\\u1CF3\u0002\\u1CF7\u0002\\u1CF8\u0002\\u1D02\u0002\\u1DC1\u0002\\u1E02\u0002\\u1F17\u0002\\u1F1A\u0002\\u1F1F\u0002\\u1F22\u0002\\u1F47\u0002\\u1F4A\u0002\\u1F4F\u0002\\u1F52\u0002\\u1F59\u0002\\u1F5B\u0002\\u1F5B\u0002\\u1F5D\u0002\\u1F5D\u0002\\u1F5F\u0002\\u1F5F\u0002\\u1F61\u0002\\u1F7F\u0002\\u1F82\u0002\\u1FB6\u0002\\u1FB8\u0002\\u1FBE\u0002\\u1FC0\u0002\\u1FC0\u0002\\u1FC4\u0002\\u1FC6\u0002\\u1FC8\u0002\\u1FCE\u0002\\u1FD2\u0002\\u1FD5\u0002\\u1FD8\u0002\\u1FDD\u0002\\u1FE2\u0002\\u1FEE\u0002\\u1FF4\u0002\\u1FF6\u0002\\u1FF8\u0002\\u1FFE\u0002\\u2073\u0002\\u2073\u0002\\u2081\u0002\\u2081\u0002\\u2092\u0002\\u209E\u0002\\u2104\u0002\\u2104\u0002\\u2109\u0002\\u2109\u0002\\u210C\u0002\\u2115\u0002\\u2117\u0002\\u2117\u0002\\u211B\u0002\\u211F\u0002\\u2126\u0002\\u2126\u0002\\u2128\u0002\\u2128\u0002\\u212A\u0002\\u212A\u0002\\u212C\u0002\\u212F\u0002\\u2131\u0002\\u213B\u0002\\u213E\u0002\\u2141\u0002\\u2147\u0002\\u214B\u0002\\u2150\u0002\\u2150\u0002\\u2162\u0002\\u218A\u0002\\u2C02\u0002\\u2C30\u0002\\u2C32\u0002\\u2C60\u0002\\u2C62\u0002\\u2CE6\u0002\\u2CED\u0002\\u2CF0\u0002\\u2CF4\u0002\\u2CF5\u0002\\u2D02\u0002\\u2D27\u0002\\u2D29\u0002\\u2D29\u0002\\u2D2F\u0002\\u2D2F\u0002\\u2D32\u0002\\u2D69\u0002\\u2D71\u0002\\u2D71\u0002\\u2D82\u0002\\u2D98\u0002\\u2DA2\u0002\\u2DA8\u0002\\u2DAA\u0002\\u2DB0\u0002\\u2DB2\u0002\\u2DB8\u0002\\u2DBA\u0002\\u2DC0\u0002\\u2DC2\u0002\\u2DC8\u0002\\u2DCA\u0002\\u2DD0\u0002\\u2DD2\u0002\\u2DD8\u0002\\u2DDA\u0002\\u2DE0\u0002\\u2E31\u0002\\u2E31\u0002\\u3007\u0002\\u3009\u0002\\u3023\u0002\\u302B\u0002\\u3033\u0002\\u3037\u0002\\u303A\u0002\\u303E\u0002\\u3043\u0002\\u3098\u0002\\u309F\u0002\\u30A1\u0002\\u30A3\u0002\\u30FC\u0002\\u30FE\u0002\\u3101\u0002\\u3107\u0002\\u312F\u0002\\u3133\u0002\\u3190\u0002\\u31A2\u0002\\u31BC\u0002\\u31F2\u0002\\u3201\u0002\\u3402\u0002\\u4DB7\u0002\\u4E02\u0002\\u9FD7\u0002\\uA002\u0002\\uA48E\u0002\\uA4D2\u0002\\uA4FF\u0002\\uA502\u0002\\uA60E\u0002\\uA612\u0002\\uA621\u0002\\uA62C\u0002\\uA62D\u0002\\uA642\u0002\\uA670\u0002\\uA681\u0002\\uA69F\u0002\\uA6A2\u0002\\uA6F1\u0002\\uA719\u0002\\uA721\u0002\\uA724\u0002\\uA78A\u0002\\uA78D\u0002\\uA7B0\u0002\\uA7B2\u0002\\uA7B9\u0002\\uA7F9\u0002\\uA803\u0002\\uA805\u0002\\uA807\u0002\\uA809\u0002\\uA80C\u0002\\uA80E\u0002\\uA824\u0002\\uA842\u0002\\uA875\u0002\\uA884\u0002\\uA8B5\u0002\\uA8F4\u0002\\uA8F9\u0002\\uA8FD\u0002\\uA8FD\u0002\\uA8FF\u0002\\uA8FF\u0002\\uA90C\u0002\\uA927\u0002\\uA932\u0002\\uA948\u0002\\uA962\u0002\\uA97E\u0002\\uA986\u0002\\uA9B4\u0002\\uA9D1\u0002\\uA9D1\u0002\\uA9E2\u0002\\uA9E6\u0002\\uA9E8\u0002\\uA9F1\u0002\\uA9FC\u0002\\uAA00\u0002\\uAA02\u0002\\uAA2A\u0002\\uAA42\u0002\\uAA44\u0002\\uAA46\u0002\\uAA4D\u0002\\uAA62\u0002\\uAA78\u0002\\uAA7C\u0002\\uAA7C\u0002\\uAA80\u0002\\uAAB1\u0002\\uAAB3\u0002\\uAAB3\u0002\\uAAB7\u0002\\uAAB8\u0002\\uAABB\u0002\\uAABF\u0002\\uAAC2\u0002\\uAAC2\u0002\\uAAC4\u0002\\uAAC4\u0002\\uAADD\u0002\\uAADF\u0002\\uAAE2\u0002\\uAAEC\u0002\\uAAF4\u0002\\uAAF6\u0002\\uAB03\u0002\\uAB08\u0002\\uAB0B\u0002\\uAB10\u0002\\uAB13\u0002\\uAB18\u0002\\uAB22\u0002\\uAB28\u0002\\uAB2A\u0002\\uAB30\u0002\\uAB32\u0002\\uAB5C\u0002\\uAB5E\u0002\\uAB67\u0002\\uAB72\u0002\\uABE4\u0002\\uAC02\u0002\\uD7A5\u0002\\uD7B2\u0002\\uD7C8\u0002\\uD7CD\u0002\\uD7FD\u0002\\uF902\u0002\\uFA6F\u0002\\uFA72\u0002\\uFADB\u0002\\uFB02\u0002\\uFB08\u0002\\uFB15\u0002\\uFB19\u0002\\uFB1F\u0002\\uFB1F\u0002\\uFB21\u0002\\uFB2A\u0002\\uFB2C\u0002\\uFB38\u0002\\uFB3A\u0002\\uFB3E\u0002\\uFB40\u0002\\uFB40\u0002\\uFB42\u0002\\uFB43\u0002\\uFB45\u0002\\uFB46\u0002\\uFB48\u0002\\uFBB3\u0002\\uFBD5\u0002\\uFD3F\u0002\\uFD52\u0002\\uFD91\u0002\\uFD94\u0002\\uFDC9\u0002\\uFDF2\u0002\\uFDFD\u0002\\uFE72\u0002\\uFE76\u0002\\uFE78\u0002\\uFEFE\u0002\\uFF23\u0002\\uFF3C\u0002\\uFF43\u0002\\uFF5C\u0002\\uFF68\u0002\\uFFC0\u0002\\uFFC4\u0002\\uFFC9\u0002\\uFFCC\u0002\\uFFD1\u0002\\uFFD4\u0002\\uFFD9\u0002\\uFFDC\u0002\\uFFDE\u0002\u0002\u0003\\r\u0003\u000f\u0003(\u0003*\u0003<\u0003>\u0003?\u0003A\u0003O\u0003R\u0003_\u0003\\x82\u0003\\xFC\u0003\\u0142\u0003\\u0176\u0003\\u0282\u0003\\u029E\u0003\\u02A2\u0003\\u02D2\u0003\\u0302\u0003\\u0321\u0003\\u0332\u0003\\u034C\u0003\\u0352\u0003\\u0377\u0003\\u0382\u0003\\u039F\u0003\\u03A2\u0003\\u03C5\u0003\\u03CA\u0003\\u03D1\u0003\\u03D3\u0003\\u03D7\u0003\\u0402\u0003\\u049F\u0003\\u04B2\u0003\\u04D5\u0003\\u04DA\u0003\\u04FD\u0003\\u0502\u0003\\u0529\u0003\\u0532\u0003\\u0565\u0003\\u0602\u0003\\u0738\u0003\\u0742\u0003\\u0757\u0003\\u0762\u0003\\u0769\u0003\\u0802\u0003\\u0807\u0003\\u080A\u0003\\u080A\u0003\\u080C\u0003\\u0837\u0003\\u0839\u0003\\u083A\u0003\\u083E\u0003\\u083E\u0003\\u0841\u0003\\u0857\u0003\\u0862\u0003\\u0878\u0003\\u0882\u0003\\u08A0\u0003\\u08E2\u0003\\u08F4\u0003\\u08F6\u0003\\u08F7\u0003\\u0902\u0003\\u0917\u0003\\u0922\u0003\\u093B\u0003\\u0982\u0003\\u09B9\u0003\\u09C0\u0003\\u09C1\u0003\\u0A02\u0003\\u0A02\u0003\\u0A12\u0003\\u0A15\u0003\\u0A17\u0003\\u0A19\u0003\\u0A1B\u0003\\u0A35\u0003\\u0A62\u0003\\u0A7E\u0003\\u0A82\u0003\\u0A9E\u0003\\u0AC2\u0003\\u0AC9\u0003\\u0ACB\u0003\\u0AE6\u0003\\u0B02\u0003\\u0B37\u0003\\u0B42\u0003\\u0B57\u0003\\u0B62\u0003\\u0B74\u0003\\u0B82\u0003\\u0B93\u0003\\u0C02\u0003\\u0C4A\u0003\\u0C82\u0003\\u0CB4\u0003\\u0CC2\u0003\\u0CF4\u0003\\u1005\u0003\\u1039\u0003\\u1085\u0003\\u10B1\u0003\\u10D2\u0003\\u10EA\u0003\\u1105\u0003\\u1128\u0003\\u1152\u0003\\u1174\u0003\\u1178\u0003\\u1178\u0003\\u1185\u0003\\u11B4\u0003\\u11C3\u0003\\u11C6\u0003\\u11DC\u0003\\u11DC\u0003\\u11DE\u0003\\u11DE\u0003\\u1202\u0003\\u1213\u0003\\u1215\u0003\\u122D\u0003\\u1282\u0003\\u1288\u0003\\u128A\u0003\\u128A\u0003\\u128C\u0003\\u128F\u0003\\u1291\u0003\\u129F\u0003\\u12A1\u0003\\u12AA\u0003\\u12B2\u0003\\u12E0\u0003\\u1307\u0003\\u130E\u0003\\u1311\u0003\\u1312\u0003\\u1315\u0003\\u132A\u0003\\u132C\u0003\\u1332\u0003\\u1334\u0003\\u1335\u0003\\u1337\u0003\\u133B\u0003\\u133F\u0003\\u133F\u0003\\u1352\u0003\\u1352\u0003\\u135F\u0003\\u1363\u0003\\u1402\u0003\\u1436\u0003\\u1449\u0003\\u144C\u0003\\u1482\u0003\\u14B1\u0003\\u14C6\u0003\\u14C7\u0003\\u14C9\u0003\\u14C9\u0003\\u1582\u0003\\u15B0\u0003\\u15DA\u0003\\u15DD\u0003\\u1602\u0003\\u1631\u0003\\u1646\u0003\\u1646\u0003\\u1682\u0003\\u16AC\u0003\\u1702\u0003\\u171B\u0003\\u18A2\u0003\\u18E1\u0003\\u1901\u0003\\u1901\u0003\\u1AC2\u0003\\u1AFA\u0003\\u1C02\u0003\\u1C0A\u0003\\u1C0C\u0003\\u1C30\u0003\\u1C42\u0003\\u1C42\u0003\\u1C74\u0003\\u1C91\u0003\\u2002\u0003\\u239B\u0003\\u2402\u0003\\u2470\u0003\\u2482\u0003\\u2545\u0003\\u3002\u0003\\u3430\u0003\\u4402\u0003\\u4648\u0003\\u6802\u0003\\u6A3A\u0003\\u6A42\u0003\\u6A60\u0003\\u6AD2\u0003\\u6AEF\u0003\\u6B02\u0003\\u6B31\u0003\\u6B42\u0003\\u6B45\u0003\\u6B65\u0003\\u6B79\u0003\\u6B7F\u0003\\u6B91\u0003\\u6F02\u0003\\u6F46\u0003\\u6F52\u0003\\u6F52\u0003\\u6F95\u0003\\u6FA1\u0003\\u6FE2\u0003\\u6FE2\u0003\\u7002\u0003\\u87EE\u0003\\u8802\u0003\\u8AF4\u0003\\uB002\u0003\\uB003\u0003\\uBC02\u0003\\uBC6C\u0003\\uBC72\u0003\\uBC7E\u0003\\uBC82\u0003\\uBC8A\u0003\\uBC92\u0003\\uBC9B\u0003\\uD402\u0003\\uD456\u0003\\uD458\u0003\\uD49E\u0003\\uD4A0\u0003\\uD4A1\u0003\\uD4A4\u0003\\uD4A4\u0003\\uD4A7\u0003\\uD4A8\u0003\\uD4AB\u0003\\uD4AE\u0003\\uD4B0\u0003\\uD4BB\u0003\\uD4BD\u0003\\uD4BD\u0003\\uD4BF\u0003\\uD4C5\u0003\\uD4C7\u0003\\uD507\u0003\\uD509\u0003\\uD50C\u0003\\uD50F\u0003\\uD516\u0003\\uD518\u0003\\uD51E\u0003\\uD520\u0003\\uD53B\u0003\\uD53D\u0003\\uD540\u0003\\uD542\u0003\\uD546\u0003\\uD548\u0003\\uD548';\n  XPathLexer._serializedATNSegment1 = `\u0003\\uD54C\u0003\\uD552\u0003\\uD554\u0003\\uD6A7\u0003\\uD6AA\u0003\\uD6C2\u0003\\uD6C4\u0003\\uD6DC\u0003\\uD6DE\u0003\\uD6FC\u0003\\uD6FE\u0003\\uD716\u0003\\uD718\u0003\\uD736\u0003\\uD738\u0003\\uD750\u0003\\uD752\u0003\\uD770\u0003\\uD772\u0003\\uD78A\u0003\\uD78C\u0003\\uD7AA\u0003\\uD7AC\u0003\\uD7C4\u0003\\uD7C6\u0003\\uD7CD\u0003\\uE802\u0003\\uE8C6\u0003\\uE902\u0003\\uE945\u0003\\uEE02\u0003\\uEE05\u0003\\uEE07\u0003\\uEE21\u0003\\uEE23\u0003\\uEE24\u0003\\uEE26\u0003\\uEE26\u0003\\uEE29\u0003\\uEE29\u0003\\uEE2B\u0003\\uEE34\u0003\\uEE36\u0003\\uEE39\u0003\\uEE3B\u0003\\uEE3B\u0003\\uEE3D\u0003\\uEE3D\u0003\\uEE44\u0003\\uEE44\u0003\\uEE49\u0003\\uEE49\u0003\\uEE4B\u0003\\uEE4B\u0003\\uEE4D\u0003\\uEE4D\u0003\\uEE4F\u0003\\uEE51\u0003\\uEE53\u0003\\uEE54\u0003\\uEE56\u0003\\uEE56\u0003\\uEE59\u0003\\uEE59\u0003\\uEE5B\u0003\\uEE5B\u0003\\uEE5D\u0003\\uEE5D\u0003\\uEE5F\u0003\\uEE5F\u0003\\uEE61\u0003\\uEE61\u0003\\uEE63\u0003\\uEE64\u0003\\uEE66\u0003\\uEE66\u0003\\uEE69\u0003\\uEE6C\u0003\\uEE6E\u0003\\uEE74\u0003\\uEE76\u0003\\uEE79\u0003\\uEE7B\u0003\\uEE7E\u0003\\uEE80\u0003\\uEE80\u0003\\uEE82\u0003\\uEE8B\u0003\\uEE8D\u0003\\uEE9D\u0003\\uEEA3\u0003\\uEEA5\u0003\\uEEA7\u0003\\uEEAB\u0003\\uEEAD\u0003\\uEEBD\u0003\u0002\u0004\\uA6D8\u0004\\uA702\u0004\\uB736\u0004\\uB742\u0004\\uB81F\u0004\\uB822\u0004\\uCEA3\u0004\\uF802\u0004\\uFA1F\u00041\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002\\x07\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002\\v\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0003\u0013\u0003\u0002\u0002\u0002\u0005\u0016\u0003\u0002\u0002\u0002\\x07\u0018\u0003\u0002\u0002\u0002\t\u001a\u0003\u0002\u0002\u0002\\v\u001c\u0003\u0002\u0002\u0002\\r%\u0003\u0002\u0002\u0002\u000f'\u0003\u0002\u0002\u0002\u0011)\u0003\u0002\u0002\u0002\u0013\u0014\\x071\u0002\u0002\u0014\u0015\\x071\u0002\u0002\u0015\u0004\u0003\u0002\u0002\u0002\u0016\u0017\\x071\u0002\u0002\u0017\u0006\u0003\u0002\u0002\u0002\u0018\u0019\\x07,\u0002\u0002\u0019\\b\u0003\u0002\u0002\u0002\u001a\u001b\\x07#\u0002\u0002\u001b\n\u0003\u0002\u0002\u0002\u001c \u0005\u000f\\b\u0002\u001d\u001f\u0005\\r\\x07\u0002\u001e\u001d\u0003\u0002\u0002\u0002\u001f\"\u0003\u0002\u0002\u0002 \u001e\u0003\u0002\u0002\u0002 !\u0003\u0002\u0002\u0002!#\u0003\u0002\u0002\u0002\" \u0003\u0002\u0002\u0002#$\\b\u0006\u0002\u0002$\\f\u0003\u0002\u0002\u0002%&\t\u0002\u0002\u0002&\u000e\u0003\u0002\u0002\u0002'(\t\u0003\u0002\u0002(\u0010\u0003\u0002\u0002\u0002)-\\x07)\u0002\u0002*,\\v\u0002\u0002\u0002+*\u0003\u0002\u0002\u0002,/\u0003\u0002\u0002\u0002-.\u0003\u0002\u0002\u0002-+\u0003\u0002\u0002\u0002.0\u0003\u0002\u0002\u0002/-\u0003\u0002\u0002\u000201\\x07)\u0002\u00021\u0012\u0003\u0002\u0002\u0002\u0005\u0002 -\u0003\u0003\u0006\u0002`;\n  XPathLexer._serializedATN = Utils3.join([\n    XPathLexer._serializedATNSegment0,\n    XPathLexer._serializedATNSegment1\n  ], \"\");\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathLexerErrorListener.js\nvar require_XPathLexerErrorListener = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathLexerErrorListener = void 0;\n  var Decorators_1 = require_Decorators();\n  var XPathLexerErrorListener = class {\n    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathLexerErrorListener.prototype, \"syntaxError\", null);\n  exports.XPathLexerErrorListener = XPathLexerErrorListener;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathElement.js\nvar require_XPathElement = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathElement = void 0;\n  var Decorators_1 = require_Decorators();\n  var XPathElement = class {\n    constructor(nodeName) {\n      this.nodeName = nodeName;\n      this.invert = false;\n    }\n    toString() {\n      let inv = this.invert ? \"!\" : \"\";\n      let className = Object.constructor.name;\n      return className + \"[\" + inv + this.nodeName + \"]\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathElement.prototype, \"toString\", null);\n  exports.XPathElement = XPathElement;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathRuleAnywhereElement.js\nvar require_XPathRuleAnywhereElement = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathRuleAnywhereElement = void 0;\n  var Decorators_1 = require_Decorators();\n  var Trees_1 = require_Trees();\n  var XPathElement_1 = require_XPathElement();\n  var XPathRuleAnywhereElement = class extends XPathElement_1.XPathElement {\n    constructor(ruleName, ruleIndex) {\n      super(ruleName);\n      this.ruleIndex = ruleIndex;\n    }\n    evaluate(t) {\n      return Trees_1.Trees.findAllRuleNodes(t, this.ruleIndex);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathRuleAnywhereElement.prototype, \"evaluate\", null);\n  exports.XPathRuleAnywhereElement = XPathRuleAnywhereElement;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathRuleElement.js\nvar require_XPathRuleElement = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathRuleElement = void 0;\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var Decorators_1 = require_Decorators();\n  var Trees_1 = require_Trees();\n  var XPathElement_1 = require_XPathElement();\n  var XPathRuleElement = class extends XPathElement_1.XPathElement {\n    constructor(ruleName, ruleIndex) {\n      super(ruleName);\n      this.ruleIndex = ruleIndex;\n    }\n    evaluate(t) {\n      let nodes = [];\n      for (let c of Trees_1.Trees.getChildren(t)) {\n        if (c instanceof ParserRuleContext_1.ParserRuleContext) {\n          if (c.ruleIndex === this.ruleIndex && !this.invert || c.ruleIndex !== this.ruleIndex && this.invert) {\n            nodes.push(c);\n          }\n        }\n      }\n      return nodes;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathRuleElement.prototype, \"evaluate\", null);\n  exports.XPathRuleElement = XPathRuleElement;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathTokenAnywhereElement.js\nvar require_XPathTokenAnywhereElement = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathTokenAnywhereElement = void 0;\n  var Decorators_1 = require_Decorators();\n  var Trees_1 = require_Trees();\n  var XPathElement_1 = require_XPathElement();\n  var XPathTokenAnywhereElement = class extends XPathElement_1.XPathElement {\n    constructor(tokenName, tokenType) {\n      super(tokenName);\n      this.tokenType = tokenType;\n    }\n    evaluate(t) {\n      return Trees_1.Trees.findAllTokenNodes(t, this.tokenType);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathTokenAnywhereElement.prototype, \"evaluate\", null);\n  exports.XPathTokenAnywhereElement = XPathTokenAnywhereElement;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathTokenElement.js\nvar require_XPathTokenElement = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathTokenElement = void 0;\n  var Decorators_1 = require_Decorators();\n  var TerminalNode_1 = require_TerminalNode();\n  var Trees_1 = require_Trees();\n  var XPathElement_1 = require_XPathElement();\n  var XPathTokenElement = class extends XPathElement_1.XPathElement {\n    constructor(tokenName, tokenType) {\n      super(tokenName);\n      this.tokenType = tokenType;\n    }\n    evaluate(t) {\n      let nodes = [];\n      for (let c of Trees_1.Trees.getChildren(t)) {\n        if (c instanceof TerminalNode_1.TerminalNode) {\n          if (c.symbol.type === this.tokenType && !this.invert || c.symbol.type !== this.tokenType && this.invert) {\n            nodes.push(c);\n          }\n        }\n      }\n      return nodes;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathTokenElement.prototype, \"evaluate\", null);\n  exports.XPathTokenElement = XPathTokenElement;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathWildcardAnywhereElement.js\nvar require_XPathWildcardAnywhereElement = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathWildcardAnywhereElement = void 0;\n  var Decorators_1 = require_Decorators();\n  var Trees_1 = require_Trees();\n  var XPath_1 = require_XPath();\n  var XPathElement_1 = require_XPathElement();\n  var XPathWildcardAnywhereElement = class extends XPathElement_1.XPathElement {\n    constructor() {\n      super(XPath_1.XPath.WILDCARD);\n    }\n    evaluate(t) {\n      if (this.invert) {\n        return [];\n      }\n      return Trees_1.Trees.getDescendants(t);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathWildcardAnywhereElement.prototype, \"evaluate\", null);\n  exports.XPathWildcardAnywhereElement = XPathWildcardAnywhereElement;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPathWildcardElement.js\nvar require_XPathWildcardElement = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPathWildcardElement = void 0;\n  var Decorators_1 = require_Decorators();\n  var Trees_1 = require_Trees();\n  var XPath_1 = require_XPath();\n  var XPathElement_1 = require_XPathElement();\n  var XPathWildcardElement = class extends XPathElement_1.XPathElement {\n    constructor() {\n      super(XPath_1.XPath.WILDCARD);\n    }\n    evaluate(t) {\n      let kids = [];\n      if (this.invert) {\n        return kids;\n      }\n      for (let c of Trees_1.Trees.getChildren(t)) {\n        kids.push(c);\n      }\n      return kids;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], XPathWildcardElement.prototype, \"evaluate\", null);\n  exports.XPathWildcardElement = XPathWildcardElement;\n});\n\n// node_modules/antlr4ts/tree/xpath/XPath.js\nvar require_XPath = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.XPath = void 0;\n  var CharStreams_1 = require_CharStreams();\n  var CommonTokenStream_1 = require_CommonTokenStream();\n  var LexerNoViableAltException_1 = require_LexerNoViableAltException();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var Token_1 = require_Token();\n  var XPathLexer_1 = require_XPathLexer();\n  var XPathLexerErrorListener_1 = require_XPathLexerErrorListener();\n  var XPathRuleAnywhereElement_1 = require_XPathRuleAnywhereElement();\n  var XPathRuleElement_1 = require_XPathRuleElement();\n  var XPathTokenAnywhereElement_1 = require_XPathTokenAnywhereElement();\n  var XPathTokenElement_1 = require_XPathTokenElement();\n  var XPathWildcardAnywhereElement_1 = require_XPathWildcardAnywhereElement();\n  var XPathWildcardElement_1 = require_XPathWildcardElement();\n  var XPath = class {\n    constructor(parser, path) {\n      this.parser = parser;\n      this.path = path;\n      this.elements = this.split(path);\n    }\n    split(path) {\n      let lexer = new XPathLexer_1.XPathLexer(CharStreams_1.CharStreams.fromString(path));\n      lexer.recover = (e) => {\n        throw e;\n      };\n      lexer.removeErrorListeners();\n      lexer.addErrorListener(new XPathLexerErrorListener_1.XPathLexerErrorListener());\n      let tokenStream = new CommonTokenStream_1.CommonTokenStream(lexer);\n      try {\n        tokenStream.fill();\n      } catch (e) {\n        if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {\n          let pos = lexer.charPositionInLine;\n          let msg = \"Invalid tokens or characters at index \" + pos + \" in path '\" + path + \"' -- \" + e.message;\n          throw new RangeError(msg);\n        }\n        throw e;\n      }\n      let tokens2 = tokenStream.getTokens();\n      let elements = [];\n      let n = tokens2.length;\n      let i = 0;\n      loop:\n        while (i < n) {\n          let el = tokens2[i];\n          let next;\n          switch (el.type) {\n            case XPathLexer_1.XPathLexer.ROOT:\n            case XPathLexer_1.XPathLexer.ANYWHERE:\n              let anywhere = el.type === XPathLexer_1.XPathLexer.ANYWHERE;\n              i++;\n              next = tokens2[i];\n              let invert = next.type === XPathLexer_1.XPathLexer.BANG;\n              if (invert) {\n                i++;\n                next = tokens2[i];\n              }\n              let pathElement = this.getXPathElement(next, anywhere);\n              pathElement.invert = invert;\n              elements.push(pathElement);\n              i++;\n              break;\n            case XPathLexer_1.XPathLexer.TOKEN_REF:\n            case XPathLexer_1.XPathLexer.RULE_REF:\n            case XPathLexer_1.XPathLexer.WILDCARD:\n              elements.push(this.getXPathElement(el, false));\n              i++;\n              break;\n            case Token_1.Token.EOF:\n              break loop;\n            default:\n              throw new Error(\"Unknowth path element \" + el);\n          }\n        }\n      return elements;\n    }\n    getXPathElement(wordToken, anywhere) {\n      if (wordToken.type === Token_1.Token.EOF) {\n        throw new Error(\"Missing path element at end of path\");\n      }\n      let word = wordToken.text;\n      if (word == null) {\n        throw new Error(\"Expected wordToken to have text content.\");\n      }\n      let ttype = this.parser.getTokenType(word);\n      let ruleIndex = this.parser.getRuleIndex(word);\n      switch (wordToken.type) {\n        case XPathLexer_1.XPathLexer.WILDCARD:\n          return anywhere ? new XPathWildcardAnywhereElement_1.XPathWildcardAnywhereElement() : new XPathWildcardElement_1.XPathWildcardElement();\n        case XPathLexer_1.XPathLexer.TOKEN_REF:\n        case XPathLexer_1.XPathLexer.STRING:\n          if (ttype === Token_1.Token.INVALID_TYPE) {\n            throw new Error(word + \" at index \" + wordToken.startIndex + \" isn't a valid token name\");\n          }\n          return anywhere ? new XPathTokenAnywhereElement_1.XPathTokenAnywhereElement(word, ttype) : new XPathTokenElement_1.XPathTokenElement(word, ttype);\n        default:\n          if (ruleIndex === -1) {\n            throw new Error(word + \" at index \" + wordToken.startIndex + \" isn't a valid rule name\");\n          }\n          return anywhere ? new XPathRuleAnywhereElement_1.XPathRuleAnywhereElement(word, ruleIndex) : new XPathRuleElement_1.XPathRuleElement(word, ruleIndex);\n      }\n    }\n    static findAll(tree, xpath, parser) {\n      let p = new XPath(parser, xpath);\n      return p.evaluate(tree);\n    }\n    evaluate(t) {\n      let dummyRoot = new ParserRuleContext_1.ParserRuleContext();\n      dummyRoot.addChild(t);\n      let work = new Set([dummyRoot]);\n      let i = 0;\n      while (i < this.elements.length) {\n        let next = new Set();\n        for (let node of work) {\n          if (node.childCount > 0) {\n            let matching = this.elements[i].evaluate(node);\n            matching.forEach(next.add, next);\n          }\n        }\n        i++;\n        work = next;\n      }\n      return work;\n    }\n  };\n  exports.XPath = XPath;\n  XPath.WILDCARD = \"*\";\n  XPath.NOT = \"!\";\n});\n\n// node_modules/antlr4ts/tree/pattern/ParseTreePattern.js\nvar require_ParseTreePattern = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParseTreePattern = void 0;\n  var Decorators_1 = require_Decorators();\n  var XPath_1 = require_XPath();\n  var ParseTreePattern = class ParseTreePattern {\n    constructor(matcher, pattern, patternRuleIndex, patternTree) {\n      this._matcher = matcher;\n      this._patternRuleIndex = patternRuleIndex;\n      this._pattern = pattern;\n      this._patternTree = patternTree;\n    }\n    match(tree) {\n      return this._matcher.match(tree, this);\n    }\n    matches(tree) {\n      return this._matcher.match(tree, this).succeeded;\n    }\n    findAll(tree, xpath) {\n      let subtrees = XPath_1.XPath.findAll(tree, xpath, this._matcher.parser);\n      let matches = [];\n      for (let t of subtrees) {\n        let match = this.match(t);\n        if (match.succeeded) {\n          matches.push(match);\n        }\n      }\n      return matches;\n    }\n    get matcher() {\n      return this._matcher;\n    }\n    get pattern() {\n      return this._pattern;\n    }\n    get patternRuleIndex() {\n      return this._patternRuleIndex;\n    }\n    get patternTree() {\n      return this._patternTree;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePattern.prototype, \"_pattern\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePattern.prototype, \"_patternTree\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePattern.prototype, \"_matcher\", void 0);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], ParseTreePattern.prototype, \"match\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], ParseTreePattern.prototype, \"matches\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], ParseTreePattern.prototype, \"findAll\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePattern.prototype, \"matcher\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePattern.prototype, \"pattern\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePattern.prototype, \"patternTree\", null);\n  ParseTreePattern = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n  ], ParseTreePattern);\n  exports.ParseTreePattern = ParseTreePattern;\n});\n\n// node_modules/antlr4ts/tree/pattern/RuleTagToken.js\nvar require_RuleTagToken = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleTagToken = void 0;\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var RuleTagToken = class RuleTagToken {\n    constructor(ruleName, bypassTokenType, label) {\n      if (ruleName == null || ruleName.length === 0) {\n        throw new Error(\"ruleName cannot be null or empty.\");\n      }\n      this._ruleName = ruleName;\n      this.bypassTokenType = bypassTokenType;\n      this._label = label;\n    }\n    get ruleName() {\n      return this._ruleName;\n    }\n    get label() {\n      return this._label;\n    }\n    get channel() {\n      return Token_1.Token.DEFAULT_CHANNEL;\n    }\n    get text() {\n      if (this._label != null) {\n        return \"<\" + this._label + \":\" + this._ruleName + \">\";\n      }\n      return \"<\" + this._ruleName + \">\";\n    }\n    get type() {\n      return this.bypassTokenType;\n    }\n    get line() {\n      return 0;\n    }\n    get charPositionInLine() {\n      return -1;\n    }\n    get tokenIndex() {\n      return -1;\n    }\n    get startIndex() {\n      return -1;\n    }\n    get stopIndex() {\n      return -1;\n    }\n    get tokenSource() {\n      return void 0;\n    }\n    get inputStream() {\n      return void 0;\n    }\n    toString() {\n      return this._ruleName + \":\" + this.bypassTokenType;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], RuleTagToken.prototype, \"ruleName\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"channel\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"text\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"type\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"line\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"charPositionInLine\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"tokenIndex\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"startIndex\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"stopIndex\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"tokenSource\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"inputStream\", null);\n  __decorate([\n    Decorators_1.Override\n  ], RuleTagToken.prototype, \"toString\", null);\n  RuleTagToken = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], RuleTagToken);\n  exports.RuleTagToken = RuleTagToken;\n});\n\n// node_modules/antlr4ts/tree/pattern/Chunk.js\nvar require_Chunk = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Chunk = void 0;\n  var Chunk = class {\n  };\n  exports.Chunk = Chunk;\n});\n\n// node_modules/antlr4ts/tree/pattern/TagChunk.js\nvar require_TagChunk = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.TagChunk = void 0;\n  var Chunk_1 = require_Chunk();\n  var Decorators_1 = require_Decorators();\n  var TagChunk = class extends Chunk_1.Chunk {\n    constructor(tag, label) {\n      super();\n      if (tag == null || tag.length === 0) {\n        throw new Error(\"tag cannot be null or empty\");\n      }\n      this._tag = tag;\n      this._label = label;\n    }\n    get tag() {\n      return this._tag;\n    }\n    get label() {\n      return this._label;\n    }\n    toString() {\n      if (this._label != null) {\n        return this._label + \":\" + this._tag;\n      }\n      return this._tag;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], TagChunk.prototype, \"tag\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TagChunk.prototype, \"toString\", null);\n  exports.TagChunk = TagChunk;\n});\n\n// node_modules/antlr4ts/tree/pattern/TextChunk.js\nvar require_TextChunk = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.TextChunk = void 0;\n  var Chunk_1 = require_Chunk();\n  var Decorators_1 = require_Decorators();\n  var TextChunk = class TextChunk extends Chunk_1.Chunk {\n    constructor(text) {\n      super();\n      if (text == null) {\n        throw new Error(\"text cannot be null\");\n      }\n      this._text = text;\n    }\n    get text() {\n      return this._text;\n    }\n    toString() {\n      return \"'\" + this._text + \"'\";\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], TextChunk.prototype, \"_text\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], TextChunk.prototype, \"text\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TextChunk.prototype, \"toString\", null);\n  TextChunk = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], TextChunk);\n  exports.TextChunk = TextChunk;\n});\n\n// node_modules/antlr4ts/tree/pattern/TokenTagToken.js\nvar require_TokenTagToken = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.TokenTagToken = void 0;\n  var CommonToken_1 = require_CommonToken();\n  var Decorators_1 = require_Decorators();\n  var TokenTagToken = class TokenTagToken extends CommonToken_1.CommonToken {\n    constructor(tokenName, type, label) {\n      super(type);\n      this._tokenName = tokenName;\n      this._label = label;\n    }\n    get tokenName() {\n      return this._tokenName;\n    }\n    get label() {\n      return this._label;\n    }\n    get text() {\n      if (this._label != null) {\n        return \"<\" + this._label + \":\" + this._tokenName + \">\";\n      }\n      return \"<\" + this._tokenName + \">\";\n    }\n    toString() {\n      return this._tokenName + \":\" + this.type;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], TokenTagToken.prototype, \"_tokenName\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], TokenTagToken.prototype, \"tokenName\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TokenTagToken.prototype, \"text\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TokenTagToken.prototype, \"toString\", null);\n  TokenTagToken = __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], TokenTagToken);\n  exports.TokenTagToken = TokenTagToken;\n});\n\n// node_modules/antlr4ts/tree/pattern/ParseTreePatternMatcher.js\nvar require_ParseTreePatternMatcher = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ParseTreePatternMatcher = void 0;\n  var BailErrorStrategy_1 = require_BailErrorStrategy();\n  var CharStreams_1 = require_CharStreams();\n  var CommonTokenStream_1 = require_CommonTokenStream();\n  var ListTokenSource_1 = require_ListTokenSource();\n  var MultiMap_1 = require_MultiMap();\n  var Decorators_1 = require_Decorators();\n  var ParseCancellationException_1 = require_ParseCancellationException();\n  var ParserInterpreter_1 = require_ParserInterpreter();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var ParseTreeMatch_1 = require_ParseTreeMatch();\n  var ParseTreePattern_1 = require_ParseTreePattern();\n  var RecognitionException_1 = require_RecognitionException();\n  var RuleNode_1 = require_RuleNode();\n  var RuleTagToken_1 = require_RuleTagToken();\n  var TagChunk_1 = require_TagChunk();\n  var TerminalNode_1 = require_TerminalNode();\n  var TextChunk_1 = require_TextChunk();\n  var Token_1 = require_Token();\n  var TokenTagToken_1 = require_TokenTagToken();\n  var ParseTreePatternMatcher2 = class {\n    constructor(lexer, parser) {\n      this.start = \"<\";\n      this.stop = \">\";\n      this.escape = \"\\\\\";\n      this.escapeRE = /\\\\/g;\n      this._lexer = lexer;\n      this._parser = parser;\n    }\n    setDelimiters(start, stop, escapeLeft) {\n      if (!start) {\n        throw new Error(\"start cannot be null or empty\");\n      }\n      if (!stop) {\n        throw new Error(\"stop cannot be null or empty\");\n      }\n      this.start = start;\n      this.stop = stop;\n      this.escape = escapeLeft;\n      this.escapeRE = new RegExp(escapeLeft.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"), \"g\");\n    }\n    matches(tree, pattern, patternRuleIndex = 0) {\n      if (typeof pattern === \"string\") {\n        let p = this.compile(pattern, patternRuleIndex);\n        return this.matches(tree, p);\n      } else {\n        let labels = new MultiMap_1.MultiMap();\n        let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);\n        return !mismatchedNode;\n      }\n    }\n    match(tree, pattern, patternRuleIndex = 0) {\n      if (typeof pattern === \"string\") {\n        let p = this.compile(pattern, patternRuleIndex);\n        return this.match(tree, p);\n      } else {\n        let labels = new MultiMap_1.MultiMap();\n        let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);\n        return new ParseTreeMatch_1.ParseTreeMatch(tree, pattern, labels, mismatchedNode);\n      }\n    }\n    compile(pattern, patternRuleIndex) {\n      let tokenList = this.tokenize(pattern);\n      let tokenSrc = new ListTokenSource_1.ListTokenSource(tokenList);\n      let tokens2 = new CommonTokenStream_1.CommonTokenStream(tokenSrc);\n      const parser = this._parser;\n      let parserInterp = new ParserInterpreter_1.ParserInterpreter(parser.grammarFileName, parser.vocabulary, parser.ruleNames, parser.getATNWithBypassAlts(), tokens2);\n      let tree;\n      try {\n        parserInterp.errorHandler = new BailErrorStrategy_1.BailErrorStrategy();\n        tree = parserInterp.parse(patternRuleIndex);\n      } catch (e) {\n        if (e instanceof ParseCancellationException_1.ParseCancellationException) {\n          throw e.getCause();\n        } else if (e instanceof RecognitionException_1.RecognitionException) {\n          throw e;\n        } else if (e instanceof Error) {\n          throw new ParseTreePatternMatcher2.CannotInvokeStartRule(e);\n        } else {\n          throw e;\n        }\n      }\n      if (tokens2.LA(1) !== Token_1.Token.EOF) {\n        throw new ParseTreePatternMatcher2.StartRuleDoesNotConsumeFullPattern();\n      }\n      return new ParseTreePattern_1.ParseTreePattern(this, pattern, patternRuleIndex, tree);\n    }\n    get lexer() {\n      return this._lexer;\n    }\n    get parser() {\n      return this._parser;\n    }\n    matchImpl(tree, patternTree, labels) {\n      if (!tree) {\n        throw new TypeError(\"tree cannot be null\");\n      }\n      if (!patternTree) {\n        throw new TypeError(\"patternTree cannot be null\");\n      }\n      if (tree instanceof TerminalNode_1.TerminalNode && patternTree instanceof TerminalNode_1.TerminalNode) {\n        let mismatchedNode;\n        if (tree.symbol.type === patternTree.symbol.type) {\n          if (patternTree.symbol instanceof TokenTagToken_1.TokenTagToken) {\n            let tokenTagToken = patternTree.symbol;\n            labels.map(tokenTagToken.tokenName, tree);\n            const l = tokenTagToken.label;\n            if (l) {\n              labels.map(l, tree);\n            }\n          } else if (tree.text === patternTree.text) {\n          } else {\n            if (!mismatchedNode) {\n              mismatchedNode = tree;\n            }\n          }\n        } else {\n          if (!mismatchedNode) {\n            mismatchedNode = tree;\n          }\n        }\n        return mismatchedNode;\n      }\n      if (tree instanceof ParserRuleContext_1.ParserRuleContext && patternTree instanceof ParserRuleContext_1.ParserRuleContext) {\n        let mismatchedNode;\n        let ruleTagToken = this.getRuleTagToken(patternTree);\n        if (ruleTagToken) {\n          let m;\n          if (tree.ruleContext.ruleIndex === patternTree.ruleContext.ruleIndex) {\n            labels.map(ruleTagToken.ruleName, tree);\n            const l = ruleTagToken.label;\n            if (l) {\n              labels.map(l, tree);\n            }\n          } else {\n            if (!mismatchedNode) {\n              mismatchedNode = tree;\n            }\n          }\n          return mismatchedNode;\n        }\n        if (tree.childCount !== patternTree.childCount) {\n          if (!mismatchedNode) {\n            mismatchedNode = tree;\n          }\n          return mismatchedNode;\n        }\n        let n = tree.childCount;\n        for (let i = 0; i < n; i++) {\n          let childMatch = this.matchImpl(tree.getChild(i), patternTree.getChild(i), labels);\n          if (childMatch) {\n            return childMatch;\n          }\n        }\n        return mismatchedNode;\n      }\n      return tree;\n    }\n    getRuleTagToken(t) {\n      if (t instanceof RuleNode_1.RuleNode) {\n        if (t.childCount === 1 && t.getChild(0) instanceof TerminalNode_1.TerminalNode) {\n          let c = t.getChild(0);\n          if (c.symbol instanceof RuleTagToken_1.RuleTagToken) {\n            return c.symbol;\n          }\n        }\n      }\n      return void 0;\n    }\n    tokenize(pattern) {\n      let chunks = this.split(pattern);\n      let tokens2 = [];\n      for (let chunk of chunks) {\n        if (chunk instanceof TagChunk_1.TagChunk) {\n          let tagChunk = chunk;\n          const firstChar = tagChunk.tag.substr(0, 1);\n          if (firstChar === firstChar.toUpperCase()) {\n            let ttype = this._parser.getTokenType(tagChunk.tag);\n            if (ttype === Token_1.Token.INVALID_TYPE) {\n              throw new Error(\"Unknown token \" + tagChunk.tag + \" in pattern: \" + pattern);\n            }\n            let t = new TokenTagToken_1.TokenTagToken(tagChunk.tag, ttype, tagChunk.label);\n            tokens2.push(t);\n          } else if (firstChar === firstChar.toLowerCase()) {\n            let ruleIndex = this._parser.getRuleIndex(tagChunk.tag);\n            if (ruleIndex === -1) {\n              throw new Error(\"Unknown rule \" + tagChunk.tag + \" in pattern: \" + pattern);\n            }\n            let ruleImaginaryTokenType = this._parser.getATNWithBypassAlts().ruleToTokenType[ruleIndex];\n            tokens2.push(new RuleTagToken_1.RuleTagToken(tagChunk.tag, ruleImaginaryTokenType, tagChunk.label));\n          } else {\n            throw new Error(\"invalid tag: \" + tagChunk.tag + \" in pattern: \" + pattern);\n          }\n        } else {\n          let textChunk = chunk;\n          this._lexer.inputStream = CharStreams_1.CharStreams.fromString(textChunk.text);\n          let t = this._lexer.nextToken();\n          while (t.type !== Token_1.Token.EOF) {\n            tokens2.push(t);\n            t = this._lexer.nextToken();\n          }\n        }\n      }\n      return tokens2;\n    }\n    split(pattern) {\n      let p = 0;\n      let n = pattern.length;\n      let chunks = [];\n      let buf;\n      let starts = [];\n      let stops = [];\n      while (p < n) {\n        if (p === pattern.indexOf(this.escape + this.start, p)) {\n          p += this.escape.length + this.start.length;\n        } else if (p === pattern.indexOf(this.escape + this.stop, p)) {\n          p += this.escape.length + this.stop.length;\n        } else if (p === pattern.indexOf(this.start, p)) {\n          starts.push(p);\n          p += this.start.length;\n        } else if (p === pattern.indexOf(this.stop, p)) {\n          stops.push(p);\n          p += this.stop.length;\n        } else {\n          p++;\n        }\n      }\n      if (starts.length > stops.length) {\n        throw new Error(\"unterminated tag in pattern: \" + pattern);\n      }\n      if (starts.length < stops.length) {\n        throw new Error(\"missing start tag in pattern: \" + pattern);\n      }\n      let ntags = starts.length;\n      for (let i = 0; i < ntags; i++) {\n        if (starts[i] >= stops[i]) {\n          throw new Error(\"tag delimiters out of order in pattern: \" + pattern);\n        }\n      }\n      if (ntags === 0) {\n        let text = pattern.substring(0, n);\n        chunks.push(new TextChunk_1.TextChunk(text));\n      }\n      if (ntags > 0 && starts[0] > 0) {\n        let text = pattern.substring(0, starts[0]);\n        chunks.push(new TextChunk_1.TextChunk(text));\n      }\n      for (let i = 0; i < ntags; i++) {\n        let tag = pattern.substring(starts[i] + this.start.length, stops[i]);\n        let ruleOrToken = tag;\n        let label;\n        let colon = tag.indexOf(\":\");\n        if (colon >= 0) {\n          label = tag.substring(0, colon);\n          ruleOrToken = tag.substring(colon + 1, tag.length);\n        }\n        chunks.push(new TagChunk_1.TagChunk(ruleOrToken, label));\n        if (i + 1 < ntags) {\n          let text = pattern.substring(stops[i] + this.stop.length, starts[i + 1]);\n          chunks.push(new TextChunk_1.TextChunk(text));\n        }\n      }\n      if (ntags > 0) {\n        let afterLastTag = stops[ntags - 1] + this.stop.length;\n        if (afterLastTag < n) {\n          let text = pattern.substring(afterLastTag, n);\n          chunks.push(new TextChunk_1.TextChunk(text));\n        }\n      }\n      for (let i = 0; i < chunks.length; i++) {\n        let c = chunks[i];\n        if (c instanceof TextChunk_1.TextChunk) {\n          let unescaped = c.text.replace(this.escapeRE, \"\");\n          if (unescaped.length < c.text.length) {\n            chunks[i] = new TextChunk_1.TextChunk(unescaped);\n          }\n        }\n      }\n      return chunks;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull,\n    __param(1, Decorators_1.NotNull)\n  ], ParseTreePatternMatcher2.prototype, \"match\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePatternMatcher2.prototype, \"lexer\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], ParseTreePatternMatcher2.prototype, \"parser\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ParseTreePatternMatcher2.prototype, \"matchImpl\", null);\n  exports.ParseTreePatternMatcher = ParseTreePatternMatcher2;\n  (function(ParseTreePatternMatcher3) {\n    class CannotInvokeStartRule extends Error {\n      constructor(error) {\n        super(`CannotInvokeStartRule: ${error}`);\n        this.error = error;\n      }\n    }\n    ParseTreePatternMatcher3.CannotInvokeStartRule = CannotInvokeStartRule;\n    class StartRuleDoesNotConsumeFullPattern extends Error {\n      constructor() {\n        super(\"StartRuleDoesNotConsumeFullPattern\");\n      }\n    }\n    ParseTreePatternMatcher3.StartRuleDoesNotConsumeFullPattern = StartRuleDoesNotConsumeFullPattern;\n  })(ParseTreePatternMatcher2 = exports.ParseTreePatternMatcher || (exports.ParseTreePatternMatcher = {}));\n});\n\n// node_modules/antlr4ts/atn/DecisionEventInfo.js\nvar require_DecisionEventInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DecisionEventInfo = void 0;\n  var Decorators_1 = require_Decorators();\n  var DecisionEventInfo = class DecisionEventInfo {\n    constructor(decision, state, input, startIndex, stopIndex, fullCtx) {\n      this.decision = decision;\n      this.fullCtx = fullCtx;\n      this.stopIndex = stopIndex;\n      this.input = input;\n      this.startIndex = startIndex;\n      this.state = state;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], DecisionEventInfo.prototype, \"input\", void 0);\n  DecisionEventInfo = __decorate([\n    __param(2, Decorators_1.NotNull)\n  ], DecisionEventInfo);\n  exports.DecisionEventInfo = DecisionEventInfo;\n});\n\n// node_modules/antlr4ts/atn/AmbiguityInfo.js\nvar require_AmbiguityInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.AmbiguityInfo = void 0;\n  var DecisionEventInfo_1 = require_DecisionEventInfo();\n  var Decorators_1 = require_Decorators();\n  var AmbiguityInfo = class AmbiguityInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    constructor(decision, state, ambigAlts, input, startIndex, stopIndex) {\n      super(decision, state, input, startIndex, stopIndex, state.useContext);\n      this.ambigAlts = ambigAlts;\n    }\n    get ambiguousAlternatives() {\n      return this.ambigAlts;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], AmbiguityInfo.prototype, \"ambigAlts\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], AmbiguityInfo.prototype, \"ambiguousAlternatives\", null);\n  AmbiguityInfo = __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n  ], AmbiguityInfo);\n  exports.AmbiguityInfo = AmbiguityInfo;\n});\n\n// node_modules/antlr4ts/atn/ContextSensitivityInfo.js\nvar require_ContextSensitivityInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ContextSensitivityInfo = void 0;\n  var DecisionEventInfo_1 = require_DecisionEventInfo();\n  var Decorators_1 = require_Decorators();\n  var ContextSensitivityInfo = class ContextSensitivityInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    constructor(decision, state, input, startIndex, stopIndex) {\n      super(decision, state, input, startIndex, stopIndex, true);\n    }\n  };\n  ContextSensitivityInfo = __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ContextSensitivityInfo);\n  exports.ContextSensitivityInfo = ContextSensitivityInfo;\n});\n\n// node_modules/antlr4ts/atn/DecisionInfo.js\nvar require_DecisionInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DecisionInfo = void 0;\n  var Decorators_1 = require_Decorators();\n  var DecisionInfo = class {\n    constructor(decision) {\n      this.invocations = 0;\n      this.timeInPrediction = 0;\n      this.SLL_TotalLook = 0;\n      this.SLL_MinLook = 0;\n      this.SLL_MaxLook = 0;\n      this.LL_TotalLook = 0;\n      this.LL_MinLook = 0;\n      this.LL_MaxLook = 0;\n      this.contextSensitivities = [];\n      this.errors = [];\n      this.ambiguities = [];\n      this.predicateEvals = [];\n      this.SLL_ATNTransitions = 0;\n      this.SLL_DFATransitions = 0;\n      this.LL_Fallback = 0;\n      this.LL_ATNTransitions = 0;\n      this.LL_DFATransitions = 0;\n      this.decision = decision;\n    }\n    toString() {\n      return \"{decision=\" + this.decision + \", contextSensitivities=\" + this.contextSensitivities.length + \", errors=\" + this.errors.length + \", ambiguities=\" + this.ambiguities.length + \", SLL_lookahead=\" + this.SLL_TotalLook + \", SLL_ATNTransitions=\" + this.SLL_ATNTransitions + \", SLL_DFATransitions=\" + this.SLL_DFATransitions + \", LL_Fallback=\" + this.LL_Fallback + \", LL_lookahead=\" + this.LL_TotalLook + \", LL_ATNTransitions=\" + this.LL_ATNTransitions + \"}\";\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], DecisionInfo.prototype, \"toString\", null);\n  exports.DecisionInfo = DecisionInfo;\n});\n\n// node_modules/antlr4ts/atn/ErrorInfo.js\nvar require_ErrorInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ErrorInfo = void 0;\n  var DecisionEventInfo_1 = require_DecisionEventInfo();\n  var Decorators_1 = require_Decorators();\n  var ErrorInfo = class ErrorInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    constructor(decision, state, input, startIndex, stopIndex) {\n      super(decision, state, input, startIndex, stopIndex, state.useContext);\n    }\n  };\n  ErrorInfo = __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n  ], ErrorInfo);\n  exports.ErrorInfo = ErrorInfo;\n});\n\n// node_modules/antlr4ts/atn/LookaheadEventInfo.js\nvar require_LookaheadEventInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LookaheadEventInfo = void 0;\n  var DecisionEventInfo_1 = require_DecisionEventInfo();\n  var Decorators_1 = require_Decorators();\n  var LookaheadEventInfo = class LookaheadEventInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    constructor(decision, state, predictedAlt, input, startIndex, stopIndex, fullCtx) {\n      super(decision, state, input, startIndex, stopIndex, fullCtx);\n      this.predictedAlt = predictedAlt;\n    }\n  };\n  LookaheadEventInfo = __decorate([\n    __param(3, Decorators_1.NotNull)\n  ], LookaheadEventInfo);\n  exports.LookaheadEventInfo = LookaheadEventInfo;\n});\n\n// node_modules/antlr4ts/atn/PredicateEvalInfo.js\nvar require_PredicateEvalInfo = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.PredicateEvalInfo = void 0;\n  var DecisionEventInfo_1 = require_DecisionEventInfo();\n  var Decorators_1 = require_Decorators();\n  var PredicateEvalInfo = class PredicateEvalInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    constructor(state, decision, input, startIndex, stopIndex, semctx, evalResult, predictedAlt) {\n      super(decision, state, input, startIndex, stopIndex, state.useContext);\n      this.semctx = semctx;\n      this.evalResult = evalResult;\n      this.predictedAlt = predictedAlt;\n    }\n  };\n  PredicateEvalInfo = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull),\n    __param(5, Decorators_1.NotNull)\n  ], PredicateEvalInfo);\n  exports.PredicateEvalInfo = PredicateEvalInfo;\n});\n\n// node_modules/antlr4ts/atn/ProfilingATNSimulator.js\nvar require_ProfilingATNSimulator = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.ProfilingATNSimulator = void 0;\n  var AmbiguityInfo_1 = require_AmbiguityInfo();\n  var ATN_1 = require_ATN();\n  var ATNSimulator_1 = require_ATNSimulator();\n  var ContextSensitivityInfo_1 = require_ContextSensitivityInfo();\n  var DecisionInfo_1 = require_DecisionInfo();\n  var ErrorInfo_1 = require_ErrorInfo();\n  var Decorators_1 = require_Decorators();\n  var LookaheadEventInfo_1 = require_LookaheadEventInfo();\n  var ParserATNSimulator_1 = require_ParserATNSimulator();\n  var PredicateEvalInfo_1 = require_PredicateEvalInfo();\n  var SemanticContext_1 = require_SemanticContext();\n  var SimulatorState_1 = require_SimulatorState();\n  var ProfilingATNSimulator = class extends ParserATNSimulator_1.ParserATNSimulator {\n    constructor(parser) {\n      super(parser.interpreter.atn, parser);\n      this._startIndex = 0;\n      this._sllStopIndex = 0;\n      this._llStopIndex = 0;\n      this.currentDecision = 0;\n      this.conflictingAltResolvedBySLL = 0;\n      this.optimize_ll1 = false;\n      this.reportAmbiguities = true;\n      this.numDecisions = this.atn.decisionToState.length;\n      this.decisions = [];\n      for (let i = 0; i < this.numDecisions; i++) {\n        this.decisions.push(new DecisionInfo_1.DecisionInfo(i));\n      }\n    }\n    adaptivePredict(input, decision, outerContext, useContext) {\n      if (useContext !== void 0) {\n        return super.adaptivePredict(input, decision, outerContext, useContext);\n      }\n      try {\n        this._input = input;\n        this._startIndex = input.index;\n        this._sllStopIndex = this._startIndex - 1;\n        this._llStopIndex = -1;\n        this.currentDecision = decision;\n        this.currentState = void 0;\n        this.conflictingAltResolvedBySLL = ATN_1.ATN.INVALID_ALT_NUMBER;\n        let start = process.hrtime();\n        let alt = super.adaptivePredict(input, decision, outerContext);\n        let stop = process.hrtime();\n        let nanoseconds = (stop[0] - start[0]) * 1e9;\n        if (nanoseconds === 0) {\n          nanoseconds = stop[1] - start[1];\n        } else {\n          nanoseconds += 1e9 - start[1] + stop[1];\n        }\n        this.decisions[decision].timeInPrediction += nanoseconds;\n        this.decisions[decision].invocations++;\n        let SLL_k = this._sllStopIndex - this._startIndex + 1;\n        this.decisions[decision].SLL_TotalLook += SLL_k;\n        this.decisions[decision].SLL_MinLook = this.decisions[decision].SLL_MinLook === 0 ? SLL_k : Math.min(this.decisions[decision].SLL_MinLook, SLL_k);\n        if (SLL_k > this.decisions[decision].SLL_MaxLook) {\n          this.decisions[decision].SLL_MaxLook = SLL_k;\n          this.decisions[decision].SLL_MaxLookEvent = new LookaheadEventInfo_1.LookaheadEventInfo(decision, void 0, alt, input, this._startIndex, this._sllStopIndex, false);\n        }\n        if (this._llStopIndex >= 0) {\n          let LL_k = this._llStopIndex - this._startIndex + 1;\n          this.decisions[decision].LL_TotalLook += LL_k;\n          this.decisions[decision].LL_MinLook = this.decisions[decision].LL_MinLook === 0 ? LL_k : Math.min(this.decisions[decision].LL_MinLook, LL_k);\n          if (LL_k > this.decisions[decision].LL_MaxLook) {\n            this.decisions[decision].LL_MaxLook = LL_k;\n            this.decisions[decision].LL_MaxLookEvent = new LookaheadEventInfo_1.LookaheadEventInfo(decision, void 0, alt, input, this._startIndex, this._llStopIndex, true);\n          }\n        }\n        return alt;\n      } finally {\n        this._input = void 0;\n        this.currentDecision = -1;\n      }\n    }\n    getStartState(dfa, input, outerContext, useContext) {\n      let state = super.getStartState(dfa, input, outerContext, useContext);\n      this.currentState = state;\n      return state;\n    }\n    computeStartState(dfa, globalContext, useContext) {\n      let state = super.computeStartState(dfa, globalContext, useContext);\n      this.currentState = state;\n      return state;\n    }\n    computeReachSet(dfa, previous, t, contextCache) {\n      if (this._input === void 0) {\n        throw new Error(\"Invalid state\");\n      }\n      let reachState = super.computeReachSet(dfa, previous, t, contextCache);\n      if (reachState == null) {\n        this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, previous, this._input, this._startIndex, this._input.index));\n      }\n      this.currentState = reachState;\n      return reachState;\n    }\n    getExistingTargetState(previousD, t) {\n      if (this.currentState === void 0 || this._input === void 0) {\n        throw new Error(\"Invalid state\");\n      }\n      if (this.currentState.useContext) {\n        this._llStopIndex = this._input.index;\n      } else {\n        this._sllStopIndex = this._input.index;\n      }\n      let existingTargetState = super.getExistingTargetState(previousD, t);\n      if (existingTargetState != null) {\n        this.currentState = new SimulatorState_1.SimulatorState(this.currentState.outerContext, existingTargetState, this.currentState.useContext, this.currentState.remainingOuterContext);\n        if (this.currentState.useContext) {\n          this.decisions[this.currentDecision].LL_DFATransitions++;\n        } else {\n          this.decisions[this.currentDecision].SLL_DFATransitions++;\n        }\n        if (existingTargetState === ATNSimulator_1.ATNSimulator.ERROR) {\n          let state = new SimulatorState_1.SimulatorState(this.currentState.outerContext, previousD, this.currentState.useContext, this.currentState.remainingOuterContext);\n          this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, state, this._input, this._startIndex, this._input.index));\n        }\n      }\n      return existingTargetState;\n    }\n    computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache) {\n      let targetState = super.computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache);\n      if (useContext) {\n        this.decisions[this.currentDecision].LL_ATNTransitions++;\n      } else {\n        this.decisions[this.currentDecision].SLL_ATNTransitions++;\n      }\n      return targetState;\n    }\n    evalSemanticContextImpl(pred, parserCallStack, alt) {\n      if (this.currentState === void 0 || this._input === void 0) {\n        throw new Error(\"Invalid state\");\n      }\n      let result = super.evalSemanticContextImpl(pred, parserCallStack, alt);\n      if (!(pred instanceof SemanticContext_1.SemanticContext.PrecedencePredicate)) {\n        let fullContext = this._llStopIndex >= 0;\n        let stopIndex = fullContext ? this._llStopIndex : this._sllStopIndex;\n        this.decisions[this.currentDecision].predicateEvals.push(new PredicateEvalInfo_1.PredicateEvalInfo(this.currentState, this.currentDecision, this._input, this._startIndex, stopIndex, pred, result, alt));\n      }\n      return result;\n    }\n    reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex) {\n      if (this._input === void 0) {\n        throw new Error(\"Invalid state\");\n      }\n      if (prediction !== this.conflictingAltResolvedBySLL) {\n        this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, acceptState, this._input, startIndex, stopIndex));\n      }\n      super.reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex);\n    }\n    reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex) {\n      if (conflictingAlts != null) {\n        this.conflictingAltResolvedBySLL = conflictingAlts.nextSetBit(0);\n      } else {\n        this.conflictingAltResolvedBySLL = conflictState.s0.configs.getRepresentedAlternatives().nextSetBit(0);\n      }\n      this.decisions[this.currentDecision].LL_Fallback++;\n      super.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex);\n    }\n    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n      if (this.currentState === void 0 || this._input === void 0) {\n        throw new Error(\"Invalid state\");\n      }\n      let prediction;\n      if (ambigAlts != null) {\n        prediction = ambigAlts.nextSetBit(0);\n      } else {\n        prediction = configs.getRepresentedAlternatives().nextSetBit(0);\n      }\n      if (this.conflictingAltResolvedBySLL !== ATN_1.ATN.INVALID_ALT_NUMBER && prediction !== this.conflictingAltResolvedBySLL) {\n        this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, this.currentState, this._input, startIndex, stopIndex));\n      }\n      this.decisions[this.currentDecision].ambiguities.push(new AmbiguityInfo_1.AmbiguityInfo(this.currentDecision, this.currentState, ambigAlts, this._input, startIndex, stopIndex));\n      super.reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs);\n    }\n    getDecisionInfo() {\n      return this.decisions;\n    }\n    getCurrentState() {\n      return this.currentState;\n    }\n  };\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], ProfilingATNSimulator.prototype, \"adaptivePredict\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"getStartState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"computeStartState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"computeReachSet\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"getExistingTargetState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"computeTargetState\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"evalSemanticContextImpl\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"reportContextSensitivity\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ProfilingATNSimulator.prototype, \"reportAttemptingFullContext\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull),\n    __param(5, Decorators_1.NotNull),\n    __param(6, Decorators_1.NotNull)\n  ], ProfilingATNSimulator.prototype, \"reportAmbiguity\", null);\n  exports.ProfilingATNSimulator = ProfilingATNSimulator;\n});\n\n// node_modules/antlr4ts/Parser.js\nvar require_Parser = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function(resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Parser = void 0;\n  var Utils3 = require_Utils();\n  var ATNDeserializationOptions_1 = require_ATNDeserializationOptions();\n  var ATNDeserializer_1 = require_ATNDeserializer();\n  var DefaultErrorStrategy_1 = require_DefaultErrorStrategy();\n  var ErrorNode_1 = require_ErrorNode();\n  var IntegerStack_1 = require_IntegerStack();\n  var Lexer_1 = require_Lexer();\n  var Decorators_1 = require_Decorators();\n  var ParseInfo_1 = require_ParseInfo();\n  var ParserATNSimulator_1 = require_ParserATNSimulator();\n  var ProxyParserErrorListener_1 = require_ProxyParserErrorListener();\n  var Recognizer_1 = require_Recognizer();\n  var TerminalNode_1 = require_TerminalNode();\n  var Token_1 = require_Token();\n  var TraceListener = class {\n    constructor(ruleNames, tokenStream) {\n      this.ruleNames = ruleNames;\n      this.tokenStream = tokenStream;\n    }\n    enterEveryRule(ctx) {\n      console.log(\"enter   \" + this.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.tokenStream.LT(1).text);\n    }\n    exitEveryRule(ctx) {\n      console.log(\"exit    \" + this.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.tokenStream.LT(1).text);\n    }\n    visitErrorNode(node) {\n    }\n    visitTerminal(node) {\n      let parent = node.parent.ruleContext;\n      let token = node.symbol;\n      console.log(\"consume \" + token + \" rule \" + this.ruleNames[parent.ruleIndex]);\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], TraceListener.prototype, \"enterEveryRule\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TraceListener.prototype, \"exitEveryRule\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TraceListener.prototype, \"visitErrorNode\", null);\n  __decorate([\n    Decorators_1.Override\n  ], TraceListener.prototype, \"visitTerminal\", null);\n  var Parser2 = class extends Recognizer_1.Recognizer {\n    constructor(input) {\n      super();\n      this._errHandler = new DefaultErrorStrategy_1.DefaultErrorStrategy();\n      this._precedenceStack = new IntegerStack_1.IntegerStack();\n      this._buildParseTrees = true;\n      this._parseListeners = [];\n      this._syntaxErrors = 0;\n      this.matchedEOF = false;\n      this._precedenceStack.push(0);\n      this.inputStream = input;\n    }\n    reset(resetInput) {\n      if (resetInput === void 0 || resetInput) {\n        this.inputStream.seek(0);\n      }\n      this._errHandler.reset(this);\n      this._ctx = void 0;\n      this._syntaxErrors = 0;\n      this.matchedEOF = false;\n      this.isTrace = false;\n      this._precedenceStack.clear();\n      this._precedenceStack.push(0);\n      let interpreter = this.interpreter;\n      if (interpreter != null) {\n        interpreter.reset();\n      }\n    }\n    match(ttype) {\n      let t = this.currentToken;\n      if (t.type === ttype) {\n        if (ttype === Token_1.Token.EOF) {\n          this.matchedEOF = true;\n        }\n        this._errHandler.reportMatch(this);\n        this.consume();\n      } else {\n        t = this._errHandler.recoverInline(this);\n        if (this._buildParseTrees && t.tokenIndex === -1) {\n          this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));\n        }\n      }\n      return t;\n    }\n    matchWildcard() {\n      let t = this.currentToken;\n      if (t.type > 0) {\n        this._errHandler.reportMatch(this);\n        this.consume();\n      } else {\n        t = this._errHandler.recoverInline(this);\n        if (this._buildParseTrees && t.tokenIndex === -1) {\n          this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));\n        }\n      }\n      return t;\n    }\n    set buildParseTree(buildParseTrees) {\n      this._buildParseTrees = buildParseTrees;\n    }\n    get buildParseTree() {\n      return this._buildParseTrees;\n    }\n    getParseListeners() {\n      return this._parseListeners;\n    }\n    addParseListener(listener) {\n      if (listener == null) {\n        throw new TypeError(\"listener cannot be null\");\n      }\n      this._parseListeners.push(listener);\n    }\n    removeParseListener(listener) {\n      let index = this._parseListeners.findIndex((l) => l === listener);\n      if (index !== -1) {\n        this._parseListeners.splice(index, 1);\n      }\n    }\n    removeParseListeners() {\n      this._parseListeners.length = 0;\n    }\n    triggerEnterRuleEvent() {\n      for (let listener of this._parseListeners) {\n        if (listener.enterEveryRule) {\n          listener.enterEveryRule(this._ctx);\n        }\n        this._ctx.enterRule(listener);\n      }\n    }\n    triggerExitRuleEvent() {\n      for (let i = this._parseListeners.length - 1; i >= 0; i--) {\n        let listener = this._parseListeners[i];\n        this._ctx.exitRule(listener);\n        if (listener.exitEveryRule) {\n          listener.exitEveryRule(this._ctx);\n        }\n      }\n    }\n    get numberOfSyntaxErrors() {\n      return this._syntaxErrors;\n    }\n    get tokenFactory() {\n      return this._input.tokenSource.tokenFactory;\n    }\n    getATNWithBypassAlts() {\n      let serializedAtn = this.serializedATN;\n      if (serializedAtn == null) {\n        throw new Error(\"The current parser does not support an ATN with bypass alternatives.\");\n      }\n      let result = Parser2.bypassAltsAtnCache.get(serializedAtn);\n      if (result == null) {\n        let deserializationOptions = new ATNDeserializationOptions_1.ATNDeserializationOptions();\n        deserializationOptions.isGenerateRuleBypassTransitions = true;\n        result = new ATNDeserializer_1.ATNDeserializer(deserializationOptions).deserialize(Utils3.toCharArray(serializedAtn));\n        Parser2.bypassAltsAtnCache.set(serializedAtn, result);\n      }\n      return result;\n    }\n    compileParseTreePattern(pattern, patternRuleIndex, lexer) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!lexer) {\n          if (this.inputStream) {\n            let tokenSource = this.inputStream.tokenSource;\n            if (tokenSource instanceof Lexer_1.Lexer) {\n              lexer = tokenSource;\n            }\n          }\n          if (!lexer) {\n            throw new Error(\"Parser can't discover a lexer to use\");\n          }\n        }\n        let currentLexer = lexer;\n        let m = yield Promise.resolve().then(() => require_ParseTreePatternMatcher());\n        let matcher = new m.ParseTreePatternMatcher(currentLexer, this);\n        return matcher.compile(pattern, patternRuleIndex);\n      });\n    }\n    get errorHandler() {\n      return this._errHandler;\n    }\n    set errorHandler(handler) {\n      this._errHandler = handler;\n    }\n    get inputStream() {\n      return this._input;\n    }\n    set inputStream(input) {\n      this.reset(false);\n      this._input = input;\n    }\n    get currentToken() {\n      return this._input.LT(1);\n    }\n    notifyErrorListeners(msg, offendingToken, e) {\n      if (offendingToken === void 0) {\n        offendingToken = this.currentToken;\n      } else if (offendingToken === null) {\n        offendingToken = void 0;\n      }\n      this._syntaxErrors++;\n      let line = -1;\n      let charPositionInLine = -1;\n      if (offendingToken != null) {\n        line = offendingToken.line;\n        charPositionInLine = offendingToken.charPositionInLine;\n      }\n      let listener = this.getErrorListenerDispatch();\n      if (listener.syntaxError) {\n        listener.syntaxError(this, offendingToken, line, charPositionInLine, msg, e);\n      }\n    }\n    consume() {\n      let o = this.currentToken;\n      if (o.type !== Parser2.EOF) {\n        this.inputStream.consume();\n      }\n      let hasListener = this._parseListeners.length !== 0;\n      if (this._buildParseTrees || hasListener) {\n        if (this._errHandler.inErrorRecoveryMode(this)) {\n          let node = this._ctx.addErrorNode(this.createErrorNode(this._ctx, o));\n          if (hasListener) {\n            for (let listener of this._parseListeners) {\n              if (listener.visitErrorNode) {\n                listener.visitErrorNode(node);\n              }\n            }\n          }\n        } else {\n          let node = this.createTerminalNode(this._ctx, o);\n          this._ctx.addChild(node);\n          if (hasListener) {\n            for (let listener of this._parseListeners) {\n              if (listener.visitTerminal) {\n                listener.visitTerminal(node);\n              }\n            }\n          }\n        }\n      }\n      return o;\n    }\n    createTerminalNode(parent, t) {\n      return new TerminalNode_1.TerminalNode(t);\n    }\n    createErrorNode(parent, t) {\n      return new ErrorNode_1.ErrorNode(t);\n    }\n    addContextToParseTree() {\n      let parent = this._ctx._parent;\n      if (parent != null) {\n        parent.addChild(this._ctx);\n      }\n    }\n    enterRule(localctx, state, ruleIndex) {\n      this.state = state;\n      this._ctx = localctx;\n      this._ctx._start = this._input.LT(1);\n      if (this._buildParseTrees) {\n        this.addContextToParseTree();\n      }\n      this.triggerEnterRuleEvent();\n    }\n    enterLeftFactoredRule(localctx, state, ruleIndex) {\n      this.state = state;\n      if (this._buildParseTrees) {\n        let factoredContext = this._ctx.getChild(this._ctx.childCount - 1);\n        this._ctx.removeLastChild();\n        factoredContext._parent = localctx;\n        localctx.addChild(factoredContext);\n      }\n      this._ctx = localctx;\n      this._ctx._start = this._input.LT(1);\n      if (this._buildParseTrees) {\n        this.addContextToParseTree();\n      }\n      this.triggerEnterRuleEvent();\n    }\n    exitRule() {\n      if (this.matchedEOF) {\n        this._ctx._stop = this._input.LT(1);\n      } else {\n        this._ctx._stop = this._input.tryLT(-1);\n      }\n      this.triggerExitRuleEvent();\n      this.state = this._ctx.invokingState;\n      this._ctx = this._ctx._parent;\n    }\n    enterOuterAlt(localctx, altNum) {\n      localctx.altNumber = altNum;\n      if (this._buildParseTrees && this._ctx !== localctx) {\n        let parent = this._ctx._parent;\n        if (parent != null) {\n          parent.removeLastChild();\n          parent.addChild(localctx);\n        }\n      }\n      this._ctx = localctx;\n    }\n    get precedence() {\n      if (this._precedenceStack.isEmpty) {\n        return -1;\n      }\n      return this._precedenceStack.peek();\n    }\n    enterRecursionRule(localctx, state, ruleIndex, precedence) {\n      this.state = state;\n      this._precedenceStack.push(precedence);\n      this._ctx = localctx;\n      this._ctx._start = this._input.LT(1);\n      this.triggerEnterRuleEvent();\n    }\n    pushNewRecursionContext(localctx, state, ruleIndex) {\n      let previous = this._ctx;\n      previous._parent = localctx;\n      previous.invokingState = state;\n      previous._stop = this._input.tryLT(-1);\n      this._ctx = localctx;\n      this._ctx._start = previous._start;\n      if (this._buildParseTrees) {\n        this._ctx.addChild(previous);\n      }\n      this.triggerEnterRuleEvent();\n    }\n    unrollRecursionContexts(_parentctx) {\n      this._precedenceStack.pop();\n      this._ctx._stop = this._input.tryLT(-1);\n      let retctx = this._ctx;\n      if (this._parseListeners.length > 0) {\n        while (this._ctx !== _parentctx) {\n          this.triggerExitRuleEvent();\n          this._ctx = this._ctx._parent;\n        }\n      } else {\n        this._ctx = _parentctx;\n      }\n      retctx._parent = _parentctx;\n      if (this._buildParseTrees && _parentctx != null) {\n        _parentctx.addChild(retctx);\n      }\n    }\n    getInvokingContext(ruleIndex) {\n      let p = this._ctx;\n      while (p && p.ruleIndex !== ruleIndex) {\n        p = p._parent;\n      }\n      return p;\n    }\n    get context() {\n      return this._ctx;\n    }\n    set context(ctx) {\n      this._ctx = ctx;\n    }\n    precpred(localctx, precedence) {\n      return precedence >= this._precedenceStack.peek();\n    }\n    getErrorListenerDispatch() {\n      return new ProxyParserErrorListener_1.ProxyParserErrorListener(this.getErrorListeners());\n    }\n    inContext(context) {\n      return false;\n    }\n    isExpectedToken(symbol) {\n      let atn = this.interpreter.atn;\n      let ctx = this._ctx;\n      let s = atn.states[this.state];\n      let following = atn.nextTokens(s);\n      if (following.contains(symbol)) {\n        return true;\n      }\n      if (!following.contains(Token_1.Token.EPSILON)) {\n        return false;\n      }\n      while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {\n        let invokingState = atn.states[ctx.invokingState];\n        let rt = invokingState.transition(0);\n        following = atn.nextTokens(rt.followState);\n        if (following.contains(symbol)) {\n          return true;\n        }\n        ctx = ctx._parent;\n      }\n      if (following.contains(Token_1.Token.EPSILON) && symbol === Token_1.Token.EOF) {\n        return true;\n      }\n      return false;\n    }\n    get isMatchedEOF() {\n      return this.matchedEOF;\n    }\n    getExpectedTokens() {\n      return this.atn.getExpectedTokens(this.state, this.context);\n    }\n    getExpectedTokensWithinCurrentRule() {\n      let atn = this.interpreter.atn;\n      let s = atn.states[this.state];\n      return atn.nextTokens(s);\n    }\n    getRuleIndex(ruleName) {\n      let ruleIndex = this.getRuleIndexMap().get(ruleName);\n      if (ruleIndex != null) {\n        return ruleIndex;\n      }\n      return -1;\n    }\n    get ruleContext() {\n      return this._ctx;\n    }\n    getRuleInvocationStack(ctx = this._ctx) {\n      let p = ctx;\n      let ruleNames = this.ruleNames;\n      let stack = [];\n      while (p != null) {\n        let ruleIndex = p.ruleIndex;\n        if (ruleIndex < 0) {\n          stack.push(\"n/a\");\n        } else {\n          stack.push(ruleNames[ruleIndex]);\n        }\n        p = p._parent;\n      }\n      return stack;\n    }\n    getDFAStrings() {\n      let s = [];\n      for (let dfa of this._interp.atn.decisionToDFA) {\n        s.push(dfa.toString(this.vocabulary, this.ruleNames));\n      }\n      return s;\n    }\n    dumpDFA() {\n      let seenOne = false;\n      for (let dfa of this._interp.atn.decisionToDFA) {\n        if (!dfa.isEmpty) {\n          if (seenOne) {\n            console.log();\n          }\n          console.log(\"Decision \" + dfa.decision + \":\");\n          process.stdout.write(dfa.toString(this.vocabulary, this.ruleNames));\n          seenOne = true;\n        }\n      }\n    }\n    get sourceName() {\n      return this._input.sourceName;\n    }\n    get parseInfo() {\n      return Promise.resolve().then(() => require_ProfilingATNSimulator()).then((m) => {\n        let interp = this.interpreter;\n        if (interp instanceof m.ProfilingATNSimulator) {\n          return new ParseInfo_1.ParseInfo(interp);\n        }\n        return void 0;\n      });\n    }\n    setProfile(profile) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let m = yield Promise.resolve().then(() => require_ProfilingATNSimulator());\n        let interp = this.interpreter;\n        if (profile) {\n          if (!(interp instanceof m.ProfilingATNSimulator)) {\n            this.interpreter = new m.ProfilingATNSimulator(this);\n          }\n        } else if (interp instanceof m.ProfilingATNSimulator) {\n          this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this.atn, this);\n        }\n        this.interpreter.setPredictionMode(interp.getPredictionMode());\n      });\n    }\n    set isTrace(trace) {\n      if (!trace) {\n        if (this._tracer) {\n          this.removeParseListener(this._tracer);\n          this._tracer = void 0;\n        }\n      } else {\n        if (this._tracer) {\n          this.removeParseListener(this._tracer);\n        } else {\n          this._tracer = new TraceListener(this.ruleNames, this._input);\n        }\n        this.addParseListener(this._tracer);\n      }\n    }\n    get isTrace() {\n      return this._tracer != null;\n    }\n  };\n  Parser2.bypassAltsAtnCache = new Map();\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"_errHandler\", void 0);\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"match\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"matchWildcard\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"getParseListeners\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], Parser2.prototype, \"addParseListener\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"getATNWithBypassAlts\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], Parser2.prototype, \"errorHandler\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Parser2.prototype, \"inputStream\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"currentToken\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], Parser2.prototype, \"enterRule\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.Nullable)\n  ], Parser2.prototype, \"precpred\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Parser2.prototype, \"getErrorListenerDispatch\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"getExpectedTokens\", null);\n  __decorate([\n    Decorators_1.NotNull\n  ], Parser2.prototype, \"getExpectedTokensWithinCurrentRule\", null);\n  __decorate([\n    Decorators_1.Override\n  ], Parser2.prototype, \"parseInfo\", null);\n  exports.Parser = Parser2;\n});\n\n// node_modules/antlr4ts/NoViableAltException.js\nvar require_NoViableAltException = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.NoViableAltException = void 0;\n  var Parser_1 = require_Parser();\n  var RecognitionException_1 = require_RecognitionException();\n  var Decorators_1 = require_Decorators();\n  var NoViableAltException2 = class extends RecognitionException_1.RecognitionException {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n      if (recognizer instanceof Parser_1.Parser) {\n        if (input === void 0) {\n          input = recognizer.inputStream;\n        }\n        if (startToken === void 0) {\n          startToken = recognizer.currentToken;\n        }\n        if (offendingToken === void 0) {\n          offendingToken = recognizer.currentToken;\n        }\n        if (ctx === void 0) {\n          ctx = recognizer.context;\n        }\n      }\n      super(recognizer, input, ctx);\n      this._deadEndConfigs = deadEndConfigs;\n      this._startToken = startToken;\n      this.setOffendingToken(recognizer, offendingToken);\n    }\n    get startToken() {\n      return this._startToken;\n    }\n    get deadEndConfigs() {\n      return this._deadEndConfigs;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], NoViableAltException2.prototype, \"_startToken\", void 0);\n  exports.NoViableAltException = NoViableAltException2;\n});\n\n// node_modules/antlr4ts/DefaultErrorStrategy.js\nvar require_DefaultErrorStrategy = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DefaultErrorStrategy = void 0;\n  var ATNState_1 = require_ATNState();\n  var ATNStateType_1 = require_ATNStateType();\n  var FailedPredicateException_1 = require_FailedPredicateException();\n  var InputMismatchException_1 = require_InputMismatchException();\n  var IntervalSet_1 = require_IntervalSet();\n  var NoViableAltException_1 = require_NoViableAltException();\n  var PredictionContext_1 = require_PredictionContext();\n  var Token_1 = require_Token();\n  var Decorators_1 = require_Decorators();\n  var DefaultErrorStrategy = class {\n    constructor() {\n      this.errorRecoveryMode = false;\n      this.lastErrorIndex = -1;\n      this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;\n    }\n    reset(recognizer) {\n      this.endErrorCondition(recognizer);\n    }\n    beginErrorCondition(recognizer) {\n      this.errorRecoveryMode = true;\n    }\n    inErrorRecoveryMode(recognizer) {\n      return this.errorRecoveryMode;\n    }\n    endErrorCondition(recognizer) {\n      this.errorRecoveryMode = false;\n      this.lastErrorStates = void 0;\n      this.lastErrorIndex = -1;\n    }\n    reportMatch(recognizer) {\n      this.endErrorCondition(recognizer);\n    }\n    reportError(recognizer, e) {\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      this.beginErrorCondition(recognizer);\n      if (e instanceof NoViableAltException_1.NoViableAltException) {\n        this.reportNoViableAlternative(recognizer, e);\n      } else if (e instanceof InputMismatchException_1.InputMismatchException) {\n        this.reportInputMismatch(recognizer, e);\n      } else if (e instanceof FailedPredicateException_1.FailedPredicateException) {\n        this.reportFailedPredicate(recognizer, e);\n      } else {\n        console.error(`unknown recognition error type: ${e}`);\n        this.notifyErrorListeners(recognizer, e.toString(), e);\n      }\n    }\n    notifyErrorListeners(recognizer, message, e) {\n      let offendingToken = e.getOffendingToken(recognizer);\n      if (offendingToken === void 0) {\n        offendingToken = null;\n      }\n      recognizer.notifyErrorListeners(message, offendingToken, e);\n    }\n    recover(recognizer, e) {\n      if (this.lastErrorIndex === recognizer.inputStream.index && this.lastErrorStates && this.lastErrorStates.contains(recognizer.state)) {\n        recognizer.consume();\n      }\n      this.lastErrorIndex = recognizer.inputStream.index;\n      if (!this.lastErrorStates) {\n        this.lastErrorStates = new IntervalSet_1.IntervalSet();\n      }\n      this.lastErrorStates.add(recognizer.state);\n      let followSet = this.getErrorRecoverySet(recognizer);\n      this.consumeUntil(recognizer, followSet);\n    }\n    sync(recognizer) {\n      let s = recognizer.interpreter.atn.states[recognizer.state];\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      let tokens2 = recognizer.inputStream;\n      let la = tokens2.LA(1);\n      let nextTokens = recognizer.atn.nextTokens(s);\n      if (nextTokens.contains(la)) {\n        this.nextTokensContext = void 0;\n        this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;\n        return;\n      }\n      if (nextTokens.contains(Token_1.Token.EPSILON)) {\n        if (this.nextTokensContext === void 0) {\n          this.nextTokensContext = recognizer.context;\n          this.nextTokensState = recognizer.state;\n        }\n        return;\n      }\n      switch (s.stateType) {\n        case ATNStateType_1.ATNStateType.BLOCK_START:\n        case ATNStateType_1.ATNStateType.STAR_BLOCK_START:\n        case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:\n        case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:\n          if (this.singleTokenDeletion(recognizer)) {\n            return;\n          }\n          throw new InputMismatchException_1.InputMismatchException(recognizer);\n        case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:\n        case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:\n          this.reportUnwantedToken(recognizer);\n          let expecting = recognizer.getExpectedTokens();\n          let whatFollowsLoopIterationOrRule = expecting.or(this.getErrorRecoverySet(recognizer));\n          this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n          break;\n        default:\n          break;\n      }\n    }\n    reportNoViableAlternative(recognizer, e) {\n      let tokens2 = recognizer.inputStream;\n      let input;\n      if (tokens2) {\n        if (e.startToken.type === Token_1.Token.EOF) {\n          input = \"<EOF>\";\n        } else {\n          input = tokens2.getTextFromRange(e.startToken, e.getOffendingToken());\n        }\n      } else {\n        input = \"<unknown input>\";\n      }\n      let msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n      this.notifyErrorListeners(recognizer, msg, e);\n    }\n    reportInputMismatch(recognizer, e) {\n      let expected = e.expectedTokens;\n      let expectedString = expected ? expected.toStringVocabulary(recognizer.vocabulary) : \"\";\n      let msg = \"mismatched input \" + this.getTokenErrorDisplay(e.getOffendingToken(recognizer)) + \" expecting \" + expectedString;\n      this.notifyErrorListeners(recognizer, msg, e);\n    }\n    reportFailedPredicate(recognizer, e) {\n      let ruleName = recognizer.ruleNames[recognizer.context.ruleIndex];\n      let msg = \"rule \" + ruleName + \" \" + e.message;\n      this.notifyErrorListeners(recognizer, msg, e);\n    }\n    reportUnwantedToken(recognizer) {\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      this.beginErrorCondition(recognizer);\n      let t = recognizer.currentToken;\n      let tokenName = this.getTokenErrorDisplay(t);\n      let expecting = this.getExpectedTokens(recognizer);\n      let msg = \"extraneous input \" + tokenName + \" expecting \" + expecting.toStringVocabulary(recognizer.vocabulary);\n      recognizer.notifyErrorListeners(msg, t, void 0);\n    }\n    reportMissingToken(recognizer) {\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      this.beginErrorCondition(recognizer);\n      let t = recognizer.currentToken;\n      let expecting = this.getExpectedTokens(recognizer);\n      let msg = \"missing \" + expecting.toStringVocabulary(recognizer.vocabulary) + \" at \" + this.getTokenErrorDisplay(t);\n      recognizer.notifyErrorListeners(msg, t, void 0);\n    }\n    recoverInline(recognizer) {\n      let matchedSymbol = this.singleTokenDeletion(recognizer);\n      if (matchedSymbol) {\n        recognizer.consume();\n        return matchedSymbol;\n      }\n      if (this.singleTokenInsertion(recognizer)) {\n        return this.getMissingSymbol(recognizer);\n      }\n      if (this.nextTokensContext === void 0) {\n        throw new InputMismatchException_1.InputMismatchException(recognizer);\n      } else {\n        throw new InputMismatchException_1.InputMismatchException(recognizer, this.nextTokensState, this.nextTokensContext);\n      }\n    }\n    singleTokenInsertion(recognizer) {\n      let currentSymbolType = recognizer.inputStream.LA(1);\n      let currentState = recognizer.interpreter.atn.states[recognizer.state];\n      let next = currentState.transition(0).target;\n      let atn = recognizer.interpreter.atn;\n      let expectingAtLL2 = atn.nextTokens(next, PredictionContext_1.PredictionContext.fromRuleContext(atn, recognizer.context));\n      if (expectingAtLL2.contains(currentSymbolType)) {\n        this.reportMissingToken(recognizer);\n        return true;\n      }\n      return false;\n    }\n    singleTokenDeletion(recognizer) {\n      let nextTokenType = recognizer.inputStream.LA(2);\n      let expecting = this.getExpectedTokens(recognizer);\n      if (expecting.contains(nextTokenType)) {\n        this.reportUnwantedToken(recognizer);\n        recognizer.consume();\n        let matchedSymbol = recognizer.currentToken;\n        this.reportMatch(recognizer);\n        return matchedSymbol;\n      }\n      return void 0;\n    }\n    getMissingSymbol(recognizer) {\n      let currentSymbol = recognizer.currentToken;\n      let expecting = this.getExpectedTokens(recognizer);\n      let expectedTokenType = Token_1.Token.INVALID_TYPE;\n      if (!expecting.isNil) {\n        expectedTokenType = expecting.minElement;\n      }\n      let tokenText;\n      if (expectedTokenType === Token_1.Token.EOF) {\n        tokenText = \"<missing EOF>\";\n      } else {\n        tokenText = \"<missing \" + recognizer.vocabulary.getDisplayName(expectedTokenType) + \">\";\n      }\n      let current = currentSymbol;\n      let lookback = recognizer.inputStream.tryLT(-1);\n      if (current.type === Token_1.Token.EOF && lookback != null) {\n        current = lookback;\n      }\n      return this.constructToken(recognizer.inputStream.tokenSource, expectedTokenType, tokenText, current);\n    }\n    constructToken(tokenSource, expectedTokenType, tokenText, current) {\n      let factory = tokenSource.tokenFactory;\n      let x = current.tokenSource;\n      let stream = x ? x.inputStream : void 0;\n      return factory.create({source: tokenSource, stream}, expectedTokenType, tokenText, Token_1.Token.DEFAULT_CHANNEL, -1, -1, current.line, current.charPositionInLine);\n    }\n    getExpectedTokens(recognizer) {\n      return recognizer.getExpectedTokens();\n    }\n    getTokenErrorDisplay(t) {\n      if (!t) {\n        return \"<no token>\";\n      }\n      let s = this.getSymbolText(t);\n      if (!s) {\n        if (this.getSymbolType(t) === Token_1.Token.EOF) {\n          s = \"<EOF>\";\n        } else {\n          s = `<${this.getSymbolType(t)}>`;\n        }\n      }\n      return this.escapeWSAndQuote(s);\n    }\n    getSymbolText(symbol) {\n      return symbol.text;\n    }\n    getSymbolType(symbol) {\n      return symbol.type;\n    }\n    escapeWSAndQuote(s) {\n      s = s.replace(\"\\n\", \"\\\\n\");\n      s = s.replace(\"\\r\", \"\\\\r\");\n      s = s.replace(\"\t\", \"\\\\t\");\n      return \"'\" + s + \"'\";\n    }\n    getErrorRecoverySet(recognizer) {\n      let atn = recognizer.interpreter.atn;\n      let ctx = recognizer.context;\n      let recoverSet = new IntervalSet_1.IntervalSet();\n      while (ctx && ctx.invokingState >= 0) {\n        let invokingState = atn.states[ctx.invokingState];\n        let rt = invokingState.transition(0);\n        let follow = atn.nextTokens(rt.followState);\n        recoverSet.addAll(follow);\n        ctx = ctx._parent;\n      }\n      recoverSet.remove(Token_1.Token.EPSILON);\n      return recoverSet;\n    }\n    consumeUntil(recognizer, set) {\n      let ttype = recognizer.inputStream.LA(1);\n      while (ttype !== Token_1.Token.EOF && !set.contains(ttype)) {\n        recognizer.consume();\n        ttype = recognizer.inputStream.LA(1);\n      }\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], DefaultErrorStrategy.prototype, \"reset\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"beginErrorCondition\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DefaultErrorStrategy.prototype, \"inErrorRecoveryMode\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"endErrorCondition\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DefaultErrorStrategy.prototype, \"reportMatch\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DefaultErrorStrategy.prototype, \"reportError\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"notifyErrorListeners\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DefaultErrorStrategy.prototype, \"recover\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DefaultErrorStrategy.prototype, \"sync\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"reportNoViableAlternative\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"reportInputMismatch\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"reportFailedPredicate\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"reportUnwantedToken\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"reportMissingToken\", null);\n  __decorate([\n    Decorators_1.Override\n  ], DefaultErrorStrategy.prototype, \"recoverInline\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"singleTokenInsertion\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"singleTokenDeletion\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"getMissingSymbol\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"getExpectedTokens\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"getSymbolText\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"getSymbolType\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"escapeWSAndQuote\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"getErrorRecoverySet\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], DefaultErrorStrategy.prototype, \"consumeUntil\", null);\n  exports.DefaultErrorStrategy = DefaultErrorStrategy;\n});\n\n// node_modules/antlr4ts/BailErrorStrategy.js\nvar require_BailErrorStrategy = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.BailErrorStrategy = void 0;\n  var DefaultErrorStrategy_1 = require_DefaultErrorStrategy();\n  var InputMismatchException_1 = require_InputMismatchException();\n  var Decorators_1 = require_Decorators();\n  var ParseCancellationException_1 = require_ParseCancellationException();\n  var BailErrorStrategy = class extends DefaultErrorStrategy_1.DefaultErrorStrategy {\n    recover(recognizer, e) {\n      for (let context = recognizer.context; context; context = context.parent) {\n        context.exception = e;\n      }\n      throw new ParseCancellationException_1.ParseCancellationException(e);\n    }\n    recoverInline(recognizer) {\n      let e = new InputMismatchException_1.InputMismatchException(recognizer);\n      for (let context = recognizer.context; context; context = context.parent) {\n        context.exception = e;\n      }\n      throw new ParseCancellationException_1.ParseCancellationException(e);\n    }\n    sync(recognizer) {\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], BailErrorStrategy.prototype, \"recover\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BailErrorStrategy.prototype, \"recoverInline\", null);\n  __decorate([\n    Decorators_1.Override\n  ], BailErrorStrategy.prototype, \"sync\", null);\n  exports.BailErrorStrategy = BailErrorStrategy;\n});\n\n// node_modules/antlr4ts/CharStream.js\nvar require_CharStream = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/Dependents.js\nvar require_Dependents = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.Dependents = void 0;\n  var Dependents;\n  (function(Dependents2) {\n    Dependents2[Dependents2[\"SELF\"] = 0] = \"SELF\";\n    Dependents2[Dependents2[\"PARENTS\"] = 1] = \"PARENTS\";\n    Dependents2[Dependents2[\"CHILDREN\"] = 2] = \"CHILDREN\";\n    Dependents2[Dependents2[\"ANCESTORS\"] = 3] = \"ANCESTORS\";\n    Dependents2[Dependents2[\"DESCENDANTS\"] = 4] = \"DESCENDANTS\";\n    Dependents2[Dependents2[\"SIBLINGS\"] = 5] = \"SIBLINGS\";\n    Dependents2[Dependents2[\"PRECEEDING_SIBLINGS\"] = 6] = \"PRECEEDING_SIBLINGS\";\n    Dependents2[Dependents2[\"FOLLOWING_SIBLINGS\"] = 7] = \"FOLLOWING_SIBLINGS\";\n    Dependents2[Dependents2[\"PRECEEDING\"] = 8] = \"PRECEEDING\";\n    Dependents2[Dependents2[\"FOLLOWING\"] = 9] = \"FOLLOWING\";\n  })(Dependents = exports.Dependents || (exports.Dependents = {}));\n});\n\n// node_modules/antlr4ts/DiagnosticErrorListener.js\nvar require_DiagnosticErrorListener = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.DiagnosticErrorListener = void 0;\n  var BitSet_1 = require_BitSet();\n  var Decorators_1 = require_Decorators();\n  var Interval_1 = require_Interval();\n  var DiagnosticErrorListener = class {\n    constructor(exactOnly = true) {\n      this.exactOnly = exactOnly;\n      this.exactOnly = exactOnly;\n    }\n    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {\n    }\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n      if (this.exactOnly && !exact) {\n        return;\n      }\n      let decision = this.getDecisionDescription(recognizer, dfa);\n      let conflictingAlts = this.getConflictingAlts(ambigAlts, configs);\n      let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));\n      let message = `reportAmbiguity d=${decision}: ambigAlts=${conflictingAlts}, input='${text}'`;\n      recognizer.notifyErrorListeners(message);\n    }\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {\n      let format = \"reportAttemptingFullContext d=%s, input='%s'\";\n      let decision = this.getDecisionDescription(recognizer, dfa);\n      let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));\n      let message = `reportAttemptingFullContext d=${decision}, input='${text}'`;\n      recognizer.notifyErrorListeners(message);\n    }\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {\n      let format = \"reportContextSensitivity d=%s, input='%s'\";\n      let decision = this.getDecisionDescription(recognizer, dfa);\n      let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));\n      let message = `reportContextSensitivity d=${decision}, input='${text}'`;\n      recognizer.notifyErrorListeners(message);\n    }\n    getDecisionDescription(recognizer, dfa) {\n      let decision = dfa.decision;\n      let ruleIndex = dfa.atnStartState.ruleIndex;\n      let ruleNames = recognizer.ruleNames;\n      if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n        return decision.toString();\n      }\n      let ruleName = ruleNames[ruleIndex];\n      if (!ruleName) {\n        return decision.toString();\n      }\n      return `${decision} (${ruleName})`;\n    }\n    getConflictingAlts(reportedAlts, configs) {\n      if (reportedAlts != null) {\n        return reportedAlts;\n      }\n      let result = new BitSet_1.BitSet();\n      for (let config of configs) {\n        result.set(config.alt);\n      }\n      return result;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], DiagnosticErrorListener.prototype, \"syntaxError\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(6, Decorators_1.NotNull)\n  ], DiagnosticErrorListener.prototype, \"reportAmbiguity\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(5, Decorators_1.NotNull)\n  ], DiagnosticErrorListener.prototype, \"reportAttemptingFullContext\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(5, Decorators_1.NotNull)\n  ], DiagnosticErrorListener.prototype, \"reportContextSensitivity\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull)\n  ], DiagnosticErrorListener.prototype, \"getDecisionDescription\", null);\n  __decorate([\n    Decorators_1.NotNull,\n    __param(1, Decorators_1.NotNull)\n  ], DiagnosticErrorListener.prototype, \"getConflictingAlts\", null);\n  exports.DiagnosticErrorListener = DiagnosticErrorListener;\n});\n\n// node_modules/antlr4ts/LexerInterpreter.js\nvar require_LexerInterpreter = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.LexerInterpreter = void 0;\n  var Lexer_1 = require_Lexer();\n  var LexerATNSimulator_1 = require_LexerATNSimulator();\n  var Decorators_1 = require_Decorators();\n  var Decorators_2 = require_Decorators();\n  var LexerInterpreter = class LexerInterpreter extends Lexer_1.Lexer {\n    constructor(grammarFileName, vocabulary, ruleNames, channelNames, modeNames, atn, input) {\n      super(input);\n      if (atn.grammarType !== 0) {\n        throw new Error(\"IllegalArgumentException: The ATN must be a lexer ATN.\");\n      }\n      this._grammarFileName = grammarFileName;\n      this._atn = atn;\n      this._ruleNames = ruleNames.slice(0);\n      this._channelNames = channelNames.slice(0);\n      this._modeNames = modeNames.slice(0);\n      this._vocabulary = vocabulary;\n      this._interp = new LexerATNSimulator_1.LexerATNSimulator(atn, this);\n    }\n    get atn() {\n      return this._atn;\n    }\n    get grammarFileName() {\n      return this._grammarFileName;\n    }\n    get ruleNames() {\n      return this._ruleNames;\n    }\n    get channelNames() {\n      return this._channelNames;\n    }\n    get modeNames() {\n      return this._modeNames;\n    }\n    get vocabulary() {\n      return this._vocabulary;\n    }\n  };\n  __decorate([\n    Decorators_1.NotNull\n  ], LexerInterpreter.prototype, \"_vocabulary\", void 0);\n  __decorate([\n    Decorators_2.Override\n  ], LexerInterpreter.prototype, \"atn\", null);\n  __decorate([\n    Decorators_2.Override\n  ], LexerInterpreter.prototype, \"grammarFileName\", null);\n  __decorate([\n    Decorators_2.Override\n  ], LexerInterpreter.prototype, \"ruleNames\", null);\n  __decorate([\n    Decorators_2.Override\n  ], LexerInterpreter.prototype, \"channelNames\", null);\n  __decorate([\n    Decorators_2.Override\n  ], LexerInterpreter.prototype, \"modeNames\", null);\n  __decorate([\n    Decorators_2.Override\n  ], LexerInterpreter.prototype, \"vocabulary\", null);\n  LexerInterpreter = __decorate([\n    __param(1, Decorators_1.NotNull)\n  ], LexerInterpreter);\n  exports.LexerInterpreter = LexerInterpreter;\n});\n\n// node_modules/antlr4ts/ParserErrorListener.js\nvar require_ParserErrorListener = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/RuleContextWithAltNum.js\nvar require_RuleContextWithAltNum = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleContextWithAltNum = void 0;\n  var ATN_1 = require_ATN();\n  var Decorators_1 = require_Decorators();\n  var ParserRuleContext_1 = require_ParserRuleContext();\n  var RuleContextWithAltNum = class extends ParserRuleContext_1.ParserRuleContext {\n    constructor(parent, invokingStateNumber) {\n      if (invokingStateNumber !== void 0) {\n        super(parent, invokingStateNumber);\n      } else {\n        super();\n      }\n      this._altNumber = ATN_1.ATN.INVALID_ALT_NUMBER;\n    }\n    get altNumber() {\n      return this._altNumber;\n    }\n    set altNumber(altNum) {\n      this._altNumber = altNum;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], RuleContextWithAltNum.prototype, \"altNumber\", null);\n  exports.RuleContextWithAltNum = RuleContextWithAltNum;\n});\n\n// node_modules/antlr4ts/RuleDependency.js\nvar require_RuleDependency = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleDependency = void 0;\n  function RuleDependency(dependency) {\n    return (target, propertyKey, propertyDescriptor) => {\n    };\n  }\n  exports.RuleDependency = RuleDependency;\n});\n\n// node_modules/antlr4ts/RuleVersion.js\nvar require_RuleVersion = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RuleVersion = void 0;\n  function RuleVersion(version) {\n    return (target, propertyKey, propertyDescriptor) => {\n    };\n  }\n  exports.RuleVersion = RuleVersion;\n});\n\n// node_modules/antlr4ts/TokenFactory.js\nvar require_TokenFactory = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/TokenSource.js\nvar require_TokenSource = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/TokenStream.js\nvar require_TokenStream = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/TokenStreamRewriter.js\nvar require_TokenStreamRewriter = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.RewriteOperation = exports.TokenStreamRewriter = void 0;\n  var Interval_1 = require_Interval();\n  var Decorators_1 = require_Decorators();\n  var Token_1 = require_Token();\n  var TokenStreamRewriter = class {\n    constructor(tokens2) {\n      this.tokens = tokens2;\n      this.programs = new Map();\n      this.programs.set(TokenStreamRewriter.DEFAULT_PROGRAM_NAME, []);\n      this.lastRewriteTokenIndexes = new Map();\n    }\n    getTokenStream() {\n      return this.tokens;\n    }\n    rollback(instructionIndex, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      let is = this.programs.get(programName);\n      if (is != null) {\n        this.programs.set(programName, is.slice(TokenStreamRewriter.MIN_TOKEN_INDEX, instructionIndex));\n      }\n    }\n    deleteProgram(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      this.rollback(TokenStreamRewriter.MIN_TOKEN_INDEX, programName);\n    }\n    insertAfter(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      let index;\n      if (typeof tokenOrIndex === \"number\") {\n        index = tokenOrIndex;\n      } else {\n        index = tokenOrIndex.tokenIndex;\n      }\n      let rewrites = this.getProgram(programName);\n      let op = new InsertAfterOp(this.tokens, index, rewrites.length, text);\n      rewrites.push(op);\n    }\n    insertBefore(tokenOrIndex, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      let index;\n      if (typeof tokenOrIndex === \"number\") {\n        index = tokenOrIndex;\n      } else {\n        index = tokenOrIndex.tokenIndex;\n      }\n      let rewrites = this.getProgram(programName);\n      let op = new InsertBeforeOp(this.tokens, index, rewrites.length, text);\n      rewrites.push(op);\n    }\n    replaceSingle(index, text) {\n      if (typeof index === \"number\") {\n        this.replace(index, index, text);\n      } else {\n        this.replace(index, index, text);\n      }\n    }\n    replace(from, to, text, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      if (typeof from !== \"number\") {\n        from = from.tokenIndex;\n      }\n      if (typeof to !== \"number\") {\n        to = to.tokenIndex;\n      }\n      if (from > to || from < 0 || to < 0 || to >= this.tokens.size) {\n        throw new RangeError(`replace: range invalid: ${from}..${to}(size=${this.tokens.size})`);\n      }\n      let rewrites = this.getProgram(programName);\n      let op = new ReplaceOp(this.tokens, from, to, rewrites.length, text);\n      rewrites.push(op);\n    }\n    delete(from, to, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      if (to === void 0) {\n        to = from;\n      }\n      if (typeof from === \"number\") {\n        this.replace(from, to, \"\", programName);\n      } else {\n        this.replace(from, to, \"\", programName);\n      }\n    }\n    getLastRewriteTokenIndex(programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      let I = this.lastRewriteTokenIndexes.get(programName);\n      if (I == null) {\n        return -1;\n      }\n      return I;\n    }\n    setLastRewriteTokenIndex(programName, i) {\n      this.lastRewriteTokenIndexes.set(programName, i);\n    }\n    getProgram(name) {\n      let is = this.programs.get(name);\n      if (is == null) {\n        is = this.initializeProgram(name);\n      }\n      return is;\n    }\n    initializeProgram(name) {\n      let is = [];\n      this.programs.set(name, is);\n      return is;\n    }\n    getText(intervalOrProgram, programName = TokenStreamRewriter.DEFAULT_PROGRAM_NAME) {\n      let interval;\n      if (intervalOrProgram instanceof Interval_1.Interval) {\n        interval = intervalOrProgram;\n      } else {\n        interval = Interval_1.Interval.of(0, this.tokens.size - 1);\n      }\n      if (typeof intervalOrProgram === \"string\") {\n        programName = intervalOrProgram;\n      }\n      let rewrites = this.programs.get(programName);\n      let start = interval.a;\n      let stop = interval.b;\n      if (stop > this.tokens.size - 1) {\n        stop = this.tokens.size - 1;\n      }\n      if (start < 0) {\n        start = 0;\n      }\n      if (rewrites == null || rewrites.length === 0) {\n        return this.tokens.getText(interval);\n      }\n      let buf = [];\n      let indexToOp = this.reduceToSingleOperationPerIndex(rewrites);\n      let i = start;\n      while (i <= stop && i < this.tokens.size) {\n        let op = indexToOp.get(i);\n        indexToOp.delete(i);\n        let t = this.tokens.get(i);\n        if (op == null) {\n          if (t.type !== Token_1.Token.EOF) {\n            buf.push(String(t.text));\n          }\n          i++;\n        } else {\n          i = op.execute(buf);\n        }\n      }\n      if (stop === this.tokens.size - 1) {\n        for (let op of indexToOp.values()) {\n          if (op.index >= this.tokens.size - 1) {\n            buf.push(op.text.toString());\n          }\n        }\n      }\n      return buf.join(\"\");\n    }\n    reduceToSingleOperationPerIndex(rewrites) {\n      for (let i = 0; i < rewrites.length; i++) {\n        let op = rewrites[i];\n        if (op == null) {\n          continue;\n        }\n        if (!(op instanceof ReplaceOp)) {\n          continue;\n        }\n        let rop = op;\n        let inserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);\n        for (let iop of inserts) {\n          if (iop.index === rop.index) {\n            rewrites[iop.instructionIndex] = void 0;\n            rop.text = iop.text.toString() + (rop.text != null ? rop.text.toString() : \"\");\n          } else if (iop.index > rop.index && iop.index <= rop.lastIndex) {\n            rewrites[iop.instructionIndex] = void 0;\n          }\n        }\n        let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);\n        for (let prevRop of prevReplaces) {\n          if (prevRop.index >= rop.index && prevRop.lastIndex <= rop.lastIndex) {\n            rewrites[prevRop.instructionIndex] = void 0;\n            continue;\n          }\n          let disjoint = prevRop.lastIndex < rop.index || prevRop.index > rop.lastIndex;\n          if (prevRop.text == null && rop.text == null && !disjoint) {\n            rewrites[prevRop.instructionIndex] = void 0;\n            rop.index = Math.min(prevRop.index, rop.index);\n            rop.lastIndex = Math.max(prevRop.lastIndex, rop.lastIndex);\n          } else if (!disjoint) {\n            throw new Error(`replace op boundaries of ${rop} overlap with previous ${prevRop}`);\n          }\n        }\n      }\n      for (let i = 0; i < rewrites.length; i++) {\n        let op = rewrites[i];\n        if (op == null) {\n          continue;\n        }\n        if (!(op instanceof InsertBeforeOp)) {\n          continue;\n        }\n        let iop = op;\n        let prevInserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);\n        for (let prevIop of prevInserts) {\n          if (prevIop.index === iop.index) {\n            if (prevIop instanceof InsertAfterOp) {\n              iop.text = this.catOpText(prevIop.text, iop.text);\n              rewrites[prevIop.instructionIndex] = void 0;\n            } else if (prevIop instanceof InsertBeforeOp) {\n              iop.text = this.catOpText(iop.text, prevIop.text);\n              rewrites[prevIop.instructionIndex] = void 0;\n            }\n          }\n        }\n        let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);\n        for (let rop of prevReplaces) {\n          if (iop.index === rop.index) {\n            rop.text = this.catOpText(iop.text, rop.text);\n            rewrites[i] = void 0;\n            continue;\n          }\n          if (iop.index >= rop.index && iop.index <= rop.lastIndex) {\n            throw new Error(`insert op ${iop} within boundaries of previous ${rop}`);\n          }\n        }\n      }\n      let m = new Map();\n      for (let op of rewrites) {\n        if (op == null) {\n          continue;\n        }\n        if (m.get(op.index) != null) {\n          throw new Error(\"should only be one op per index\");\n        }\n        m.set(op.index, op);\n      }\n      return m;\n    }\n    catOpText(a, b) {\n      let x = \"\";\n      let y = \"\";\n      if (a != null) {\n        x = a.toString();\n      }\n      if (b != null) {\n        y = b.toString();\n      }\n      return x + y;\n    }\n    getKindOfOps(rewrites, kind, before) {\n      let ops = [];\n      for (let i = 0; i < before && i < rewrites.length; i++) {\n        let op = rewrites[i];\n        if (op == null) {\n          continue;\n        }\n        if (op instanceof kind) {\n          ops.push(op);\n        }\n      }\n      return ops;\n    }\n  };\n  exports.TokenStreamRewriter = TokenStreamRewriter;\n  TokenStreamRewriter.DEFAULT_PROGRAM_NAME = \"default\";\n  TokenStreamRewriter.PROGRAM_INIT_SIZE = 100;\n  TokenStreamRewriter.MIN_TOKEN_INDEX = 0;\n  var RewriteOperation = class {\n    constructor(tokens2, index, instructionIndex, text) {\n      this.tokens = tokens2;\n      this.instructionIndex = instructionIndex;\n      this.index = index;\n      this.text = text === void 0 ? \"\" : text;\n    }\n    execute(buf) {\n      return this.index;\n    }\n    toString() {\n      let opName = this.constructor.name;\n      let $index = opName.indexOf(\"$\");\n      opName = opName.substring($index + 1, opName.length);\n      return \"<\" + opName + \"@\" + this.tokens.get(this.index) + ':\"' + this.text + '\">';\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], RewriteOperation.prototype, \"toString\", null);\n  exports.RewriteOperation = RewriteOperation;\n  var InsertBeforeOp = class extends RewriteOperation {\n    constructor(tokens2, index, instructionIndex, text) {\n      super(tokens2, index, instructionIndex, text);\n    }\n    execute(buf) {\n      buf.push(this.text.toString());\n      if (this.tokens.get(this.index).type !== Token_1.Token.EOF) {\n        buf.push(String(this.tokens.get(this.index).text));\n      }\n      return this.index + 1;\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], InsertBeforeOp.prototype, \"execute\", null);\n  var InsertAfterOp = class extends InsertBeforeOp {\n    constructor(tokens2, index, instructionIndex, text) {\n      super(tokens2, index + 1, instructionIndex, text);\n    }\n  };\n  var ReplaceOp = class extends RewriteOperation {\n    constructor(tokens2, from, to, instructionIndex, text) {\n      super(tokens2, from, instructionIndex, text);\n      this.lastIndex = to;\n    }\n    execute(buf) {\n      if (this.text != null) {\n        buf.push(this.text.toString());\n      }\n      return this.lastIndex + 1;\n    }\n    toString() {\n      if (this.text == null) {\n        return \"<DeleteOp@\" + this.tokens.get(this.index) + \"..\" + this.tokens.get(this.lastIndex) + \">\";\n      }\n      return \"<ReplaceOp@\" + this.tokens.get(this.index) + \"..\" + this.tokens.get(this.lastIndex) + ':\"' + this.text + '\">';\n    }\n  };\n  __decorate([\n    Decorators_1.Override\n  ], ReplaceOp.prototype, \"execute\", null);\n  __decorate([\n    Decorators_1.Override\n  ], ReplaceOp.prototype, \"toString\", null);\n});\n\n// node_modules/antlr4ts/Vocabulary.js\nvar require_Vocabulary = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/WritableToken.js\nvar require_WritableToken = __commonJS((exports) => {\n  \"use strict\";\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n});\n\n// node_modules/antlr4ts/index.js\nvar require_antlr4ts = __commonJS((exports) => {\n  \"use strict\";\n  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === void 0)\n      k2 = k;\n    Object.defineProperty(o, k2, {enumerable: true, get: function() {\n      return m[k];\n    }});\n  } : function(o, m, k, k2) {\n    if (k2 === void 0)\n      k2 = k;\n    o[k2] = m[k];\n  });\n  var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n    for (var p in m)\n      if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n        __createBinding(exports2, m, p);\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  __exportStar(require_ANTLRErrorListener(), exports);\n  __exportStar(require_ANTLRErrorStrategy(), exports);\n  __exportStar(require_ANTLRInputStream(), exports);\n  __exportStar(require_BailErrorStrategy(), exports);\n  __exportStar(require_BufferedTokenStream(), exports);\n  __exportStar(require_CharStream(), exports);\n  __exportStar(require_CharStreams(), exports);\n  __exportStar(require_CodePointBuffer(), exports);\n  __exportStar(require_CodePointCharStream(), exports);\n  __exportStar(require_CommonToken(), exports);\n  __exportStar(require_CommonTokenFactory(), exports);\n  __exportStar(require_CommonTokenStream(), exports);\n  __exportStar(require_ConsoleErrorListener(), exports);\n  __exportStar(require_DefaultErrorStrategy(), exports);\n  __exportStar(require_Dependents(), exports);\n  __exportStar(require_DiagnosticErrorListener(), exports);\n  __exportStar(require_FailedPredicateException(), exports);\n  __exportStar(require_InputMismatchException(), exports);\n  __exportStar(require_InterpreterRuleContext(), exports);\n  __exportStar(require_IntStream(), exports);\n  __exportStar(require_Lexer(), exports);\n  __exportStar(require_LexerInterpreter(), exports);\n  __exportStar(require_LexerNoViableAltException(), exports);\n  __exportStar(require_ListTokenSource(), exports);\n  __exportStar(require_NoViableAltException(), exports);\n  __exportStar(require_Parser(), exports);\n  __exportStar(require_ParserErrorListener(), exports);\n  __exportStar(require_ParserInterpreter(), exports);\n  __exportStar(require_ParserRuleContext(), exports);\n  __exportStar(require_ProxyErrorListener(), exports);\n  __exportStar(require_ProxyParserErrorListener(), exports);\n  __exportStar(require_RecognitionException(), exports);\n  __exportStar(require_Recognizer(), exports);\n  __exportStar(require_RuleContext(), exports);\n  __exportStar(require_RuleContextWithAltNum(), exports);\n  __exportStar(require_RuleDependency(), exports);\n  __exportStar(require_RuleVersion(), exports);\n  __exportStar(require_Token(), exports);\n  __exportStar(require_TokenFactory(), exports);\n  __exportStar(require_TokenSource(), exports);\n  __exportStar(require_TokenStream(), exports);\n  __exportStar(require_TokenStreamRewriter(), exports);\n  __exportStar(require_Vocabulary(), exports);\n  __exportStar(require_VocabularyImpl(), exports);\n  __exportStar(require_WritableToken(), exports);\n});\n\n// node_modules/antlr4ts/tree/AbstractParseTreeVisitor.js\nvar require_AbstractParseTreeVisitor = __commonJS((exports) => {\n  \"use strict\";\n  var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if (d = decorators[i])\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\n  var __param = exports && exports.__param || function(paramIndex, decorator) {\n    return function(target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {value: true});\n  exports.AbstractParseTreeVisitor = void 0;\n  var Decorators_1 = require_Decorators();\n  var AbstractParseTreeVisitor2 = class {\n    visit(tree) {\n      return tree.accept(this);\n    }\n    visitChildren(node) {\n      let result = this.defaultResult();\n      let n = node.childCount;\n      for (let i = 0; i < n; i++) {\n        if (!this.shouldVisitNextChild(node, result)) {\n          break;\n        }\n        let c = node.getChild(i);\n        let childResult = c.accept(this);\n        result = this.aggregateResult(result, childResult);\n      }\n      return result;\n    }\n    visitTerminal(node) {\n      return this.defaultResult();\n    }\n    visitErrorNode(node) {\n      return this.defaultResult();\n    }\n    aggregateResult(aggregate, nextResult) {\n      return nextResult;\n    }\n    shouldVisitNextChild(node, currentResult) {\n      return true;\n    }\n  };\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], AbstractParseTreeVisitor2.prototype, \"visit\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], AbstractParseTreeVisitor2.prototype, \"visitChildren\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], AbstractParseTreeVisitor2.prototype, \"visitTerminal\", null);\n  __decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n  ], AbstractParseTreeVisitor2.prototype, \"visitErrorNode\", null);\n  __decorate([\n    __param(0, Decorators_1.NotNull)\n  ], AbstractParseTreeVisitor2.prototype, \"shouldVisitNextChild\", null);\n  exports.AbstractParseTreeVisitor = AbstractParseTreeVisitor2;\n});\n\n// node_modules/antlr4/src/antlr4/Utils.js\nvar require_Utils2 = __commonJS((exports, module2) => {\n  function arrayToString(a) {\n    return Array.isArray(a) ? \"[\" + a.join(\", \") + \"]\" : \"null\";\n  }\n  String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n  String.prototype.hashCode = function() {\n    const key = this.toString();\n    let h1b, k1;\n    const remainder = key.length & 3;\n    const bytes = key.length - remainder;\n    let h1 = String.prototype.seed;\n    const c1 = 3432918353;\n    const c2 = 461845907;\n    let i = 0;\n    while (i < bytes) {\n      k1 = key.charCodeAt(i) & 255 | (key.charCodeAt(++i) & 255) << 8 | (key.charCodeAt(++i) & 255) << 16 | (key.charCodeAt(++i) & 255) << 24;\n      ++i;\n      k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;\n      h1 ^= k1;\n      h1 = h1 << 13 | h1 >>> 19;\n      h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;\n      h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);\n    }\n    k1 = 0;\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 255) << 16;\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 255) << 8;\n      case 1:\n        k1 ^= key.charCodeAt(i) & 255;\n        k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;\n        h1 ^= k1;\n    }\n    h1 ^= key.length;\n    h1 ^= h1 >>> 16;\n    h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;\n    h1 ^= h1 >>> 13;\n    h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;\n    h1 ^= h1 >>> 16;\n    return h1 >>> 0;\n  };\n  function standardEqualsFunction(a, b) {\n    return a ? a.equals(b) : a == b;\n  }\n  function standardHashCodeFunction(a) {\n    return a ? a.hashCode() : -1;\n  }\n  var Set2 = class {\n    constructor(hashFunction, equalsFunction) {\n      this.data = {};\n      this.hashFunction = hashFunction || standardHashCodeFunction;\n      this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n    add(value) {\n      const hash = this.hashFunction(value);\n      const key = \"hash_\" + hash;\n      if (key in this.data) {\n        const values = this.data[key];\n        for (let i = 0; i < values.length; i++) {\n          if (this.equalsFunction(value, values[i])) {\n            return values[i];\n          }\n        }\n        values.push(value);\n        return value;\n      } else {\n        this.data[key] = [value];\n        return value;\n      }\n    }\n    contains(value) {\n      return this.get(value) != null;\n    }\n    get(value) {\n      const hash = this.hashFunction(value);\n      const key = \"hash_\" + hash;\n      if (key in this.data) {\n        const values = this.data[key];\n        for (let i = 0; i < values.length; i++) {\n          if (this.equalsFunction(value, values[i])) {\n            return values[i];\n          }\n        }\n      }\n      return null;\n    }\n    values() {\n      let l = [];\n      for (const key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n          l = l.concat(this.data[key]);\n        }\n      }\n      return l;\n    }\n    toString() {\n      return arrayToString(this.values());\n    }\n    get length() {\n      let l = 0;\n      for (const key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n          l = l + this.data[key].length;\n        }\n      }\n      return l;\n    }\n  };\n  var BitSet = class {\n    constructor() {\n      this.data = [];\n    }\n    add(value) {\n      this.data[value] = true;\n    }\n    or(set) {\n      const bits = this;\n      Object.keys(set.data).map(function(alt) {\n        bits.add(alt);\n      });\n    }\n    remove(value) {\n      delete this.data[value];\n    }\n    contains(value) {\n      return this.data[value] === true;\n    }\n    values() {\n      return Object.keys(this.data);\n    }\n    minValue() {\n      return Math.min.apply(null, this.values());\n    }\n    hashCode() {\n      const hash = new Hash2();\n      hash.update(this.values());\n      return hash.finish();\n    }\n    equals(other) {\n      if (!(other instanceof BitSet)) {\n        return false;\n      }\n      return this.hashCode() === other.hashCode();\n    }\n    toString() {\n      return \"{\" + this.values().join(\", \") + \"}\";\n    }\n    get length() {\n      return this.values().length;\n    }\n  };\n  var Map2 = class {\n    constructor(hashFunction, equalsFunction) {\n      this.data = {};\n      this.hashFunction = hashFunction || standardHashCodeFunction;\n      this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n    put(key, value) {\n      const hashKey = \"hash_\" + this.hashFunction(key);\n      if (hashKey in this.data) {\n        const entries = this.data[hashKey];\n        for (let i = 0; i < entries.length; i++) {\n          const entry = entries[i];\n          if (this.equalsFunction(key, entry.key)) {\n            const oldValue = entry.value;\n            entry.value = value;\n            return oldValue;\n          }\n        }\n        entries.push({key, value});\n        return value;\n      } else {\n        this.data[hashKey] = [{key, value}];\n        return value;\n      }\n    }\n    containsKey(key) {\n      const hashKey = \"hash_\" + this.hashFunction(key);\n      if (hashKey in this.data) {\n        const entries = this.data[hashKey];\n        for (let i = 0; i < entries.length; i++) {\n          const entry = entries[i];\n          if (this.equalsFunction(key, entry.key))\n            return true;\n        }\n      }\n      return false;\n    }\n    get(key) {\n      const hashKey = \"hash_\" + this.hashFunction(key);\n      if (hashKey in this.data) {\n        const entries = this.data[hashKey];\n        for (let i = 0; i < entries.length; i++) {\n          const entry = entries[i];\n          if (this.equalsFunction(key, entry.key))\n            return entry.value;\n        }\n      }\n      return null;\n    }\n    entries() {\n      let l = [];\n      for (const key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n          l = l.concat(this.data[key]);\n        }\n      }\n      return l;\n    }\n    getKeys() {\n      return this.entries().map(function(e) {\n        return e.key;\n      });\n    }\n    getValues() {\n      return this.entries().map(function(e) {\n        return e.value;\n      });\n    }\n    toString() {\n      const ss = this.entries().map(function(entry) {\n        return \"{\" + entry.key + \":\" + entry.value + \"}\";\n      });\n      return \"[\" + ss.join(\", \") + \"]\";\n    }\n    get length() {\n      let l = 0;\n      for (const hashKey in this.data) {\n        if (hashKey.indexOf(\"hash_\") === 0) {\n          l = l + this.data[hashKey].length;\n        }\n      }\n      return l;\n    }\n  };\n  var AltDict = class {\n    constructor() {\n      this.data = {};\n    }\n    get(key) {\n      key = \"k-\" + key;\n      if (key in this.data) {\n        return this.data[key];\n      } else {\n        return null;\n      }\n    }\n    put(key, value) {\n      key = \"k-\" + key;\n      this.data[key] = value;\n    }\n    values() {\n      const data = this.data;\n      const keys = Object.keys(this.data);\n      return keys.map(function(key) {\n        return data[key];\n      });\n    }\n  };\n  var DoubleDict = class {\n    constructor(defaultMapCtor) {\n      this.defaultMapCtor = defaultMapCtor || Map2;\n      this.cacheMap = new this.defaultMapCtor();\n    }\n    get(a, b) {\n      const d = this.cacheMap.get(a) || null;\n      return d === null ? null : d.get(b) || null;\n    }\n    set(a, b, o) {\n      let d = this.cacheMap.get(a) || null;\n      if (d === null) {\n        d = new this.defaultMapCtor();\n        this.cacheMap.put(a, d);\n      }\n      d.put(b, o);\n    }\n  };\n  var Hash2 = class {\n    constructor() {\n      this.count = 0;\n      this.hash = 0;\n    }\n    update() {\n      for (let i = 0; i < arguments.length; i++) {\n        const value = arguments[i];\n        if (value == null)\n          continue;\n        if (Array.isArray(value))\n          this.update.apply(this, value);\n        else {\n          let k = 0;\n          switch (typeof value) {\n            case \"undefined\":\n            case \"function\":\n              continue;\n            case \"number\":\n            case \"boolean\":\n              k = value;\n              break;\n            case \"string\":\n              k = value.hashCode();\n              break;\n            default:\n              if (value.updateHashCode)\n                value.updateHashCode(this);\n              else\n                console.log(\"No updateHashCode for \" + value.toString());\n              continue;\n          }\n          k = k * 3432918353;\n          k = k << 15 | k >>> 32 - 15;\n          k = k * 461845907;\n          this.count = this.count + 1;\n          let hash = this.hash ^ k;\n          hash = hash << 13 | hash >>> 32 - 13;\n          hash = hash * 5 + 3864292196;\n          this.hash = hash;\n        }\n      }\n    }\n    finish() {\n      let hash = this.hash ^ this.count * 4;\n      hash = hash ^ hash >>> 16;\n      hash = hash * 2246822507;\n      hash = hash ^ hash >>> 13;\n      hash = hash * 3266489909;\n      hash = hash ^ hash >>> 16;\n      return hash;\n    }\n  };\n  function hashStuff() {\n    const hash = new Hash2();\n    hash.update.apply(hash, arguments);\n    return hash.finish();\n  }\n  function escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n      s = s.replace(/ /g, \"\\xB7\");\n    }\n    return s;\n  }\n  function titleCase(str) {\n    return str.replace(/\\w\\S*/g, function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n  }\n  function equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b))\n      return false;\n    if (a === b)\n      return true;\n    if (a.length !== b.length)\n      return false;\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === b[i])\n        continue;\n      if (!a[i].equals || !a[i].equals(b[i]))\n        return false;\n    }\n    return true;\n  }\n  module2.exports = {\n    Hash: Hash2,\n    Set: Set2,\n    Map: Map2,\n    BitSet,\n    AltDict,\n    DoubleDict,\n    hashStuff,\n    escapeWhitespace,\n    arrayToString,\n    titleCase,\n    equalArrays\n  };\n});\n\n// node_modules/antlr4/src/antlr4/Token.js\nvar require_Token2 = __commonJS((exports, module2) => {\n  var Token2 = class {\n    constructor() {\n      this.source = null;\n      this.type = null;\n      this.channel = null;\n      this.start = null;\n      this.stop = null;\n      this.tokenIndex = null;\n      this.line = null;\n      this.column = null;\n      this._text = null;\n    }\n    getTokenSource() {\n      return this.source[0];\n    }\n    getInputStream() {\n      return this.source[1];\n    }\n    get text() {\n      return this._text;\n    }\n    set text(text) {\n      this._text = text;\n    }\n  };\n  Token2.INVALID_TYPE = 0;\n  Token2.EPSILON = -2;\n  Token2.MIN_USER_TOKEN_TYPE = 1;\n  Token2.EOF = -1;\n  Token2.DEFAULT_CHANNEL = 0;\n  Token2.HIDDEN_CHANNEL = 1;\n  var CommonToken = class extends Token2 {\n    constructor(source, type, channel, start, stop) {\n      super();\n      this.source = source !== void 0 ? source : CommonToken.EMPTY_SOURCE;\n      this.type = type !== void 0 ? type : null;\n      this.channel = channel !== void 0 ? channel : Token2.DEFAULT_CHANNEL;\n      this.start = start !== void 0 ? start : -1;\n      this.stop = stop !== void 0 ? stop : -1;\n      this.tokenIndex = -1;\n      if (this.source[0] !== null) {\n        this.line = source[0].line;\n        this.column = source[0].column;\n      } else {\n        this.column = -1;\n      }\n    }\n    clone() {\n      const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n      t.tokenIndex = this.tokenIndex;\n      t.line = this.line;\n      t.column = this.column;\n      t.text = this.text;\n      return t;\n    }\n    toString() {\n      let txt = this.text;\n      if (txt !== null) {\n        txt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n      } else {\n        txt = \"<no text>\";\n      }\n      return \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + txt + \"',<\" + this.type + \">\" + (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" + this.line + \":\" + this.column + \"]\";\n    }\n    get text() {\n      if (this._text !== null) {\n        return this._text;\n      }\n      const input = this.getInputStream();\n      if (input === null) {\n        return null;\n      }\n      const n = input.size;\n      if (this.start < n && this.stop < n) {\n        return input.getText(this.start, this.stop);\n      } else {\n        return \"<EOF>\";\n      }\n    }\n    set text(text) {\n      this._text = text;\n    }\n  };\n  CommonToken.EMPTY_SOURCE = [null, null];\n  module2.exports = {\n    Token: Token2,\n    CommonToken\n  };\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATNState.js\nvar require_ATNState2 = __commonJS((exports, module2) => {\n  var ATNState = class {\n    constructor() {\n      this.atn = null;\n      this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n      this.stateType = null;\n      this.ruleIndex = 0;\n      this.epsilonOnlyTransitions = false;\n      this.transitions = [];\n      this.nextTokenWithinRule = null;\n    }\n    toString() {\n      return this.stateNumber;\n    }\n    equals(other) {\n      if (other instanceof ATNState) {\n        return this.stateNumber === other.stateNumber;\n      } else {\n        return false;\n      }\n    }\n    isNonGreedyExitState() {\n      return false;\n    }\n    addTransition(trans, index) {\n      if (index === void 0) {\n        index = -1;\n      }\n      if (this.transitions.length === 0) {\n        this.epsilonOnlyTransitions = trans.isEpsilon;\n      } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {\n        this.epsilonOnlyTransitions = false;\n      }\n      if (index === -1) {\n        this.transitions.push(trans);\n      } else {\n        this.transitions.splice(index, 1, trans);\n      }\n    }\n  };\n  ATNState.INVALID_TYPE = 0;\n  ATNState.BASIC = 1;\n  ATNState.RULE_START = 2;\n  ATNState.BLOCK_START = 3;\n  ATNState.PLUS_BLOCK_START = 4;\n  ATNState.STAR_BLOCK_START = 5;\n  ATNState.TOKEN_START = 6;\n  ATNState.RULE_STOP = 7;\n  ATNState.BLOCK_END = 8;\n  ATNState.STAR_LOOP_BACK = 9;\n  ATNState.STAR_LOOP_ENTRY = 10;\n  ATNState.PLUS_LOOP_BACK = 11;\n  ATNState.LOOP_END = 12;\n  ATNState.serializationNames = [\n    \"INVALID\",\n    \"BASIC\",\n    \"RULE_START\",\n    \"BLOCK_START\",\n    \"PLUS_BLOCK_START\",\n    \"STAR_BLOCK_START\",\n    \"TOKEN_START\",\n    \"RULE_STOP\",\n    \"BLOCK_END\",\n    \"STAR_LOOP_BACK\",\n    \"STAR_LOOP_ENTRY\",\n    \"PLUS_LOOP_BACK\",\n    \"LOOP_END\"\n  ];\n  ATNState.INVALID_STATE_NUMBER = -1;\n  var BasicState = class extends ATNState {\n    constructor() {\n      super();\n      this.stateType = ATNState.BASIC;\n    }\n  };\n  var DecisionState = class extends ATNState {\n    constructor() {\n      super();\n      this.decision = -1;\n      this.nonGreedy = false;\n      return this;\n    }\n  };\n  var BlockStartState = class extends DecisionState {\n    constructor() {\n      super();\n      this.endState = null;\n      return this;\n    }\n  };\n  var BasicBlockStartState = class extends BlockStartState {\n    constructor() {\n      super();\n      this.stateType = ATNState.BLOCK_START;\n      return this;\n    }\n  };\n  var BlockEndState = class extends ATNState {\n    constructor() {\n      super();\n      this.stateType = ATNState.BLOCK_END;\n      this.startState = null;\n      return this;\n    }\n  };\n  var RuleStopState = class extends ATNState {\n    constructor() {\n      super();\n      this.stateType = ATNState.RULE_STOP;\n      return this;\n    }\n  };\n  var RuleStartState = class extends ATNState {\n    constructor() {\n      super();\n      this.stateType = ATNState.RULE_START;\n      this.stopState = null;\n      this.isPrecedenceRule = false;\n      return this;\n    }\n  };\n  var PlusLoopbackState = class extends DecisionState {\n    constructor() {\n      super();\n      this.stateType = ATNState.PLUS_LOOP_BACK;\n      return this;\n    }\n  };\n  var PlusBlockStartState = class extends BlockStartState {\n    constructor() {\n      super();\n      this.stateType = ATNState.PLUS_BLOCK_START;\n      this.loopBackState = null;\n      return this;\n    }\n  };\n  var StarBlockStartState = class extends BlockStartState {\n    constructor() {\n      super();\n      this.stateType = ATNState.STAR_BLOCK_START;\n      return this;\n    }\n  };\n  var StarLoopbackState = class extends ATNState {\n    constructor() {\n      super();\n      this.stateType = ATNState.STAR_LOOP_BACK;\n      return this;\n    }\n  };\n  var StarLoopEntryState = class extends DecisionState {\n    constructor() {\n      super();\n      this.stateType = ATNState.STAR_LOOP_ENTRY;\n      this.loopBackState = null;\n      this.isPrecedenceDecision = null;\n      return this;\n    }\n  };\n  var LoopEndState = class extends ATNState {\n    constructor() {\n      super();\n      this.stateType = ATNState.LOOP_END;\n      this.loopBackState = null;\n      return this;\n    }\n  };\n  var TokensStartState = class extends DecisionState {\n    constructor() {\n      super();\n      this.stateType = ATNState.TOKEN_START;\n      return this;\n    }\n  };\n  module2.exports = {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n  };\n});\n\n// node_modules/antlr4/src/antlr4/atn/SemanticContext.js\nvar require_SemanticContext2 = __commonJS((exports, module2) => {\n  var {Set: Set2, Hash: Hash2, equalArrays} = require_Utils2();\n  var SemanticContext = class {\n    hashCode() {\n      const hash = new Hash2();\n      this.updateHashCode(hash);\n      return hash.finish();\n    }\n    evaluate(parser, outerContext) {\n    }\n    evalPrecedence(parser, outerContext) {\n      return this;\n    }\n    static andContext(a, b) {\n      if (a === null || a === SemanticContext.NONE) {\n        return b;\n      }\n      if (b === null || b === SemanticContext.NONE) {\n        return a;\n      }\n      const result = new AND(a, b);\n      if (result.opnds.length === 1) {\n        return result.opnds[0];\n      } else {\n        return result;\n      }\n    }\n    static orContext(a, b) {\n      if (a === null) {\n        return b;\n      }\n      if (b === null) {\n        return a;\n      }\n      if (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n        return SemanticContext.NONE;\n      }\n      const result = new OR(a, b);\n      if (result.opnds.length === 1) {\n        return result.opnds[0];\n      } else {\n        return result;\n      }\n    }\n  };\n  var Predicate = class extends SemanticContext {\n    constructor(ruleIndex, predIndex, isCtxDependent) {\n      super();\n      this.ruleIndex = ruleIndex === void 0 ? -1 : ruleIndex;\n      this.predIndex = predIndex === void 0 ? -1 : predIndex;\n      this.isCtxDependent = isCtxDependent === void 0 ? false : isCtxDependent;\n    }\n    evaluate(parser, outerContext) {\n      const localctx = this.isCtxDependent ? outerContext : null;\n      return parser.sempred(localctx, this.ruleIndex, this.predIndex);\n    }\n    updateHashCode(hash) {\n      hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof Predicate)) {\n        return false;\n      } else {\n        return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;\n      }\n    }\n    toString() {\n      return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n    }\n  };\n  SemanticContext.NONE = new Predicate();\n  var PrecedencePredicate = class extends SemanticContext {\n    constructor(precedence) {\n      super();\n      this.precedence = precedence === void 0 ? 0 : precedence;\n    }\n    evaluate(parser, outerContext) {\n      return parser.precpred(outerContext, this.precedence);\n    }\n    evalPrecedence(parser, outerContext) {\n      if (parser.precpred(outerContext, this.precedence)) {\n        return SemanticContext.NONE;\n      } else {\n        return null;\n      }\n    }\n    compareTo(other) {\n      return this.precedence - other.precedence;\n    }\n    updateHashCode(hash) {\n      hash.update(this.precedence);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof PrecedencePredicate)) {\n        return false;\n      } else {\n        return this.precedence === other.precedence;\n      }\n    }\n    toString() {\n      return \"{\" + this.precedence + \">=prec}?\";\n    }\n    static filterPrecedencePredicates(set) {\n      const result = [];\n      set.values().map(function(context) {\n        if (context instanceof PrecedencePredicate) {\n          result.push(context);\n        }\n      });\n      return result;\n    }\n  };\n  var AND = class extends SemanticContext {\n    constructor(a, b) {\n      super();\n      const operands = new Set2();\n      if (a instanceof AND) {\n        a.opnds.map(function(o) {\n          operands.add(o);\n        });\n      } else {\n        operands.add(a);\n      }\n      if (b instanceof AND) {\n        b.opnds.map(function(o) {\n          operands.add(o);\n        });\n      } else {\n        operands.add(b);\n      }\n      const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n      if (precedencePredicates.length > 0) {\n        let reduced = null;\n        precedencePredicates.map(function(p) {\n          if (reduced === null || p.precedence < reduced.precedence) {\n            reduced = p;\n          }\n        });\n        operands.add(reduced);\n      }\n      this.opnds = Array.from(operands.values());\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof AND)) {\n        return false;\n      } else {\n        return equalArrays(this.opnds, other.opnds);\n      }\n    }\n    updateHashCode(hash) {\n      hash.update(this.opnds, \"AND\");\n    }\n    evaluate(parser, outerContext) {\n      for (let i = 0; i < this.opnds.length; i++) {\n        if (!this.opnds[i].evaluate(parser, outerContext)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    evalPrecedence(parser, outerContext) {\n      let differs = false;\n      const operands = [];\n      for (let i = 0; i < this.opnds.length; i++) {\n        const context = this.opnds[i];\n        const evaluated = context.evalPrecedence(parser, outerContext);\n        differs |= evaluated !== context;\n        if (evaluated === null) {\n          return null;\n        } else if (evaluated !== SemanticContext.NONE) {\n          operands.push(evaluated);\n        }\n      }\n      if (!differs) {\n        return this;\n      }\n      if (operands.length === 0) {\n        return SemanticContext.NONE;\n      }\n      let result = null;\n      operands.map(function(o) {\n        result = result === null ? o : SemanticContext.andContext(result, o);\n      });\n      return result;\n    }\n    toString() {\n      const s = this.opnds.map((o) => o.toString());\n      return (s.length > 3 ? s.slice(3) : s).join(\"&&\");\n    }\n  };\n  var OR = class extends SemanticContext {\n    constructor(a, b) {\n      super();\n      const operands = new Set2();\n      if (a instanceof OR) {\n        a.opnds.map(function(o) {\n          operands.add(o);\n        });\n      } else {\n        operands.add(a);\n      }\n      if (b instanceof OR) {\n        b.opnds.map(function(o) {\n          operands.add(o);\n        });\n      } else {\n        operands.add(b);\n      }\n      const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n      if (precedencePredicates.length > 0) {\n        const s = precedencePredicates.sort(function(a2, b2) {\n          return a2.compareTo(b2);\n        });\n        const reduced = s[s.length - 1];\n        operands.add(reduced);\n      }\n      this.opnds = Array.from(operands.values());\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof OR)) {\n        return false;\n      } else {\n        return equalArrays(this.opnds, other.opnds);\n      }\n    }\n    updateHashCode(hash) {\n      hash.update(this.opnds, \"OR\");\n    }\n    evaluate(parser, outerContext) {\n      for (let i = 0; i < this.opnds.length; i++) {\n        if (this.opnds[i].evaluate(parser, outerContext)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    evalPrecedence(parser, outerContext) {\n      let differs = false;\n      const operands = [];\n      for (let i = 0; i < this.opnds.length; i++) {\n        const context = this.opnds[i];\n        const evaluated = context.evalPrecedence(parser, outerContext);\n        differs |= evaluated !== context;\n        if (evaluated === SemanticContext.NONE) {\n          return SemanticContext.NONE;\n        } else if (evaluated !== null) {\n          operands.push(evaluated);\n        }\n      }\n      if (!differs) {\n        return this;\n      }\n      if (operands.length === 0) {\n        return null;\n      }\n      const result = null;\n      operands.map(function(o) {\n        return result === null ? o : SemanticContext.orContext(result, o);\n      });\n      return result;\n    }\n    toString() {\n      const s = this.opnds.map((o) => o.toString());\n      return (s.length > 3 ? s.slice(3) : s).join(\"||\");\n    }\n  };\n  module2.exports = {\n    SemanticContext,\n    PrecedencePredicate,\n    Predicate\n  };\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATNConfig.js\nvar require_ATNConfig2 = __commonJS((exports, module2) => {\n  var {DecisionState} = require_ATNState2();\n  var {SemanticContext} = require_SemanticContext2();\n  var {Hash: Hash2} = require_Utils2();\n  function checkParams(params, isCfg) {\n    if (params === null) {\n      const result = {state: null, alt: null, context: null, semanticContext: null};\n      if (isCfg) {\n        result.reachesIntoOuterContext = 0;\n      }\n      return result;\n    } else {\n      const props = {};\n      props.state = params.state || null;\n      props.alt = params.alt === void 0 ? null : params.alt;\n      props.context = params.context || null;\n      props.semanticContext = params.semanticContext || null;\n      if (isCfg) {\n        props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n        props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n      }\n      return props;\n    }\n  }\n  var ATNConfig = class {\n    constructor(params, config) {\n      this.checkContext(params, config);\n      params = checkParams(params);\n      config = checkParams(config, true);\n      this.state = params.state !== null ? params.state : config.state;\n      this.alt = params.alt !== null ? params.alt : config.alt;\n      this.context = params.context !== null ? params.context : config.context;\n      this.semanticContext = params.semanticContext !== null ? params.semanticContext : config.semanticContext !== null ? config.semanticContext : SemanticContext.NONE;\n      this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n      this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    }\n    checkContext(params, config) {\n      if ((params.context === null || params.context === void 0) && (config === null || config.context === null || config.context === void 0)) {\n        this.context = null;\n      }\n    }\n    hashCode() {\n      const hash = new Hash2();\n      this.updateHashCode(hash);\n      return hash.finish();\n    }\n    updateHashCode(hash) {\n      hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof ATNConfig)) {\n        return false;\n      } else {\n        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;\n      }\n    }\n    hashCodeForConfigSet() {\n      const hash = new Hash2();\n      hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n      return hash.finish();\n    }\n    equalsForConfigSet(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof ATNConfig)) {\n        return false;\n      } else {\n        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);\n      }\n    }\n    toString() {\n      return \"(\" + this.state + \",\" + this.alt + (this.context !== null ? \",[\" + this.context.toString() + \"]\" : \"\") + (this.semanticContext !== SemanticContext.NONE ? \",\" + this.semanticContext.toString() : \"\") + (this.reachesIntoOuterContext > 0 ? \",up=\" + this.reachesIntoOuterContext : \"\") + \")\";\n    }\n  };\n  var LexerATNConfig = class extends ATNConfig {\n    constructor(params, config) {\n      super(params, config);\n      const lexerActionExecutor = params.lexerActionExecutor || null;\n      this.lexerActionExecutor = lexerActionExecutor || (config !== null ? config.lexerActionExecutor : null);\n      this.passedThroughNonGreedyDecision = config !== null ? this.checkNonGreedyDecision(config, this.state) : false;\n      this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n      this.equalsForConfigSet = LexerATNConfig.prototype.equals;\n      return this;\n    }\n    updateHashCode(hash) {\n      hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n    }\n    equals(other) {\n      return this === other || other instanceof LexerATNConfig && this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && super.equals(other);\n    }\n    checkNonGreedyDecision(source, target) {\n      return source.passedThroughNonGreedyDecision || target instanceof DecisionState && target.nonGreedy;\n    }\n  };\n  module2.exports.ATNConfig = ATNConfig;\n  module2.exports.LexerATNConfig = LexerATNConfig;\n});\n\n// node_modules/antlr4/src/antlr4/IntervalSet.js\nvar require_IntervalSet2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var Interval = class {\n    constructor(start, stop) {\n      this.start = start;\n      this.stop = stop;\n    }\n    contains(item) {\n      return item >= this.start && item < this.stop;\n    }\n    toString() {\n      if (this.start === this.stop - 1) {\n        return this.start.toString();\n      } else {\n        return this.start.toString() + \"..\" + (this.stop - 1).toString();\n      }\n    }\n    get length() {\n      return this.stop - this.start;\n    }\n  };\n  var IntervalSet = class {\n    constructor() {\n      this.intervals = null;\n      this.readOnly = false;\n    }\n    first(v) {\n      if (this.intervals === null || this.intervals.length === 0) {\n        return Token2.INVALID_TYPE;\n      } else {\n        return this.intervals[0].start;\n      }\n    }\n    addOne(v) {\n      this.addInterval(new Interval(v, v + 1));\n    }\n    addRange(l, h) {\n      this.addInterval(new Interval(l, h + 1));\n    }\n    addInterval(toAdd) {\n      if (this.intervals === null) {\n        this.intervals = [];\n        this.intervals.push(toAdd);\n      } else {\n        for (let pos = 0; pos < this.intervals.length; pos++) {\n          const existing = this.intervals[pos];\n          if (toAdd.stop < existing.start) {\n            this.intervals.splice(pos, 0, toAdd);\n            return;\n          } else if (toAdd.stop === existing.start) {\n            this.intervals[pos].start = toAdd.start;\n            return;\n          } else if (toAdd.start <= existing.stop) {\n            this.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));\n            this.reduce(pos);\n            return;\n          }\n        }\n        this.intervals.push(toAdd);\n      }\n    }\n    addSet(other) {\n      if (other.intervals !== null) {\n        other.intervals.forEach((toAdd) => this.addInterval(toAdd), this);\n      }\n      return this;\n    }\n    reduce(pos) {\n      if (pos < this.intervals.length - 1) {\n        const current = this.intervals[pos];\n        const next = this.intervals[pos + 1];\n        if (current.stop >= next.stop) {\n          this.intervals.splice(pos + 1, 1);\n          this.reduce(pos);\n        } else if (current.stop >= next.start) {\n          this.intervals[pos] = new Interval(current.start, next.stop);\n          this.intervals.splice(pos + 1, 1);\n        }\n      }\n    }\n    complement(start, stop) {\n      const result = new IntervalSet();\n      result.addInterval(new Interval(start, stop + 1));\n      if (this.intervals !== null)\n        this.intervals.forEach((toRemove) => result.removeRange(toRemove));\n      return result;\n    }\n    contains(item) {\n      if (this.intervals === null) {\n        return false;\n      } else {\n        for (let k = 0; k < this.intervals.length; k++) {\n          if (this.intervals[k].contains(item)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n    removeRange(toRemove) {\n      if (toRemove.start === toRemove.stop - 1) {\n        this.removeOne(toRemove.start);\n      } else if (this.intervals !== null) {\n        let pos = 0;\n        for (let n = 0; n < this.intervals.length; n++) {\n          const existing = this.intervals[pos];\n          if (toRemove.stop <= existing.start) {\n            return;\n          } else if (toRemove.start > existing.start && toRemove.stop < existing.stop) {\n            this.intervals[pos] = new Interval(existing.start, toRemove.start);\n            const x = new Interval(toRemove.stop, existing.stop);\n            this.intervals.splice(pos, 0, x);\n            return;\n          } else if (toRemove.start <= existing.start && toRemove.stop >= existing.stop) {\n            this.intervals.splice(pos, 1);\n            pos = pos - 1;\n          } else if (toRemove.start < existing.stop) {\n            this.intervals[pos] = new Interval(existing.start, toRemove.start);\n          } else if (toRemove.stop < existing.stop) {\n            this.intervals[pos] = new Interval(toRemove.stop, existing.stop);\n          }\n          pos += 1;\n        }\n      }\n    }\n    removeOne(value) {\n      if (this.intervals !== null) {\n        for (let i = 0; i < this.intervals.length; i++) {\n          const existing = this.intervals[i];\n          if (value < existing.start) {\n            return;\n          } else if (value === existing.start && value === existing.stop - 1) {\n            this.intervals.splice(i, 1);\n            return;\n          } else if (value === existing.start) {\n            this.intervals[i] = new Interval(existing.start + 1, existing.stop);\n            return;\n          } else if (value === existing.stop - 1) {\n            this.intervals[i] = new Interval(existing.start, existing.stop - 1);\n            return;\n          } else if (value < existing.stop - 1) {\n            const replace = new Interval(existing.start, value);\n            existing.start = value + 1;\n            this.intervals.splice(i, 0, replace);\n            return;\n          }\n        }\n      }\n    }\n    toString(literalNames, symbolicNames, elemsAreChar) {\n      literalNames = literalNames || null;\n      symbolicNames = symbolicNames || null;\n      elemsAreChar = elemsAreChar || false;\n      if (this.intervals === null) {\n        return \"{}\";\n      } else if (literalNames !== null || symbolicNames !== null) {\n        return this.toTokenString(literalNames, symbolicNames);\n      } else if (elemsAreChar) {\n        return this.toCharString();\n      } else {\n        return this.toIndexString();\n      }\n    }\n    toCharString() {\n      const names = [];\n      for (let i = 0; i < this.intervals.length; i++) {\n        const existing = this.intervals[i];\n        if (existing.stop === existing.start + 1) {\n          if (existing.start === Token2.EOF) {\n            names.push(\"<EOF>\");\n          } else {\n            names.push(\"'\" + String.fromCharCode(existing.start) + \"'\");\n          }\n        } else {\n          names.push(\"'\" + String.fromCharCode(existing.start) + \"'..'\" + String.fromCharCode(existing.stop - 1) + \"'\");\n        }\n      }\n      if (names.length > 1) {\n        return \"{\" + names.join(\", \") + \"}\";\n      } else {\n        return names[0];\n      }\n    }\n    toIndexString() {\n      const names = [];\n      for (let i = 0; i < this.intervals.length; i++) {\n        const existing = this.intervals[i];\n        if (existing.stop === existing.start + 1) {\n          if (existing.start === Token2.EOF) {\n            names.push(\"<EOF>\");\n          } else {\n            names.push(existing.start.toString());\n          }\n        } else {\n          names.push(existing.start.toString() + \"..\" + (existing.stop - 1).toString());\n        }\n      }\n      if (names.length > 1) {\n        return \"{\" + names.join(\", \") + \"}\";\n      } else {\n        return names[0];\n      }\n    }\n    toTokenString(literalNames, symbolicNames) {\n      const names = [];\n      for (let i = 0; i < this.intervals.length; i++) {\n        const existing = this.intervals[i];\n        for (let j = existing.start; j < existing.stop; j++) {\n          names.push(this.elementName(literalNames, symbolicNames, j));\n        }\n      }\n      if (names.length > 1) {\n        return \"{\" + names.join(\", \") + \"}\";\n      } else {\n        return names[0];\n      }\n    }\n    elementName(literalNames, symbolicNames, token) {\n      if (token === Token2.EOF) {\n        return \"<EOF>\";\n      } else if (token === Token2.EPSILON) {\n        return \"<EPSILON>\";\n      } else {\n        return literalNames[token] || symbolicNames[token];\n      }\n    }\n    get length() {\n      return this.intervals.map((interval) => interval.length).reduce((acc, val) => acc + val);\n    }\n  };\n  module2.exports = {\n    Interval,\n    IntervalSet\n  };\n});\n\n// node_modules/antlr4/src/antlr4/atn/Transition.js\nvar require_Transition2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var {IntervalSet} = require_IntervalSet2();\n  var {Predicate, PrecedencePredicate} = require_SemanticContext2();\n  var Transition = class {\n    constructor(target) {\n      if (target === void 0 || target === null) {\n        throw \"target cannot be null.\";\n      }\n      this.target = target;\n      this.isEpsilon = false;\n      this.label = null;\n    }\n  };\n  Transition.EPSILON = 1;\n  Transition.RANGE = 2;\n  Transition.RULE = 3;\n  Transition.PREDICATE = 4;\n  Transition.ATOM = 5;\n  Transition.ACTION = 6;\n  Transition.SET = 7;\n  Transition.NOT_SET = 8;\n  Transition.WILDCARD = 9;\n  Transition.PRECEDENCE = 10;\n  Transition.serializationNames = [\n    \"INVALID\",\n    \"EPSILON\",\n    \"RANGE\",\n    \"RULE\",\n    \"PREDICATE\",\n    \"ATOM\",\n    \"ACTION\",\n    \"SET\",\n    \"NOT_SET\",\n    \"WILDCARD\",\n    \"PRECEDENCE\"\n  ];\n  Transition.serializationTypes = {\n    EpsilonTransition: Transition.EPSILON,\n    RangeTransition: Transition.RANGE,\n    RuleTransition: Transition.RULE,\n    PredicateTransition: Transition.PREDICATE,\n    AtomTransition: Transition.ATOM,\n    ActionTransition: Transition.ACTION,\n    SetTransition: Transition.SET,\n    NotSetTransition: Transition.NOT_SET,\n    WildcardTransition: Transition.WILDCARD,\n    PrecedencePredicateTransition: Transition.PRECEDENCE\n  };\n  var AtomTransition2 = class extends Transition {\n    constructor(target, label) {\n      super(target);\n      this.label_ = label;\n      this.label = this.makeLabel();\n      this.serializationType = Transition.ATOM;\n    }\n    makeLabel() {\n      const s = new IntervalSet();\n      s.addOne(this.label_);\n      return s;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return this.label_ === symbol;\n    }\n    toString() {\n      return this.label_;\n    }\n  };\n  var RuleTransition = class extends Transition {\n    constructor(ruleStart, ruleIndex, precedence, followState) {\n      super(ruleStart);\n      this.ruleIndex = ruleIndex;\n      this.precedence = precedence;\n      this.followState = followState;\n      this.serializationType = Transition.RULE;\n      this.isEpsilon = true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n  };\n  var EpsilonTransition = class extends Transition {\n    constructor(target, outermostPrecedenceReturn) {\n      super(target);\n      this.serializationType = Transition.EPSILON;\n      this.isEpsilon = true;\n      this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    toString() {\n      return \"epsilon\";\n    }\n  };\n  var RangeTransition = class extends Transition {\n    constructor(target, start, stop) {\n      super(target);\n      this.serializationType = Transition.RANGE;\n      this.start = start;\n      this.stop = stop;\n      this.label = this.makeLabel();\n    }\n    makeLabel() {\n      const s = new IntervalSet();\n      s.addRange(this.start, this.stop);\n      return s;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return symbol >= this.start && symbol <= this.stop;\n    }\n    toString() {\n      return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n    }\n  };\n  var AbstractPredicateTransition = class extends Transition {\n    constructor(target) {\n      super(target);\n    }\n  };\n  var PredicateTransition = class extends AbstractPredicateTransition {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n      super(target);\n      this.serializationType = Transition.PREDICATE;\n      this.ruleIndex = ruleIndex;\n      this.predIndex = predIndex;\n      this.isCtxDependent = isCtxDependent;\n      this.isEpsilon = true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    getPredicate() {\n      return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n    toString() {\n      return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n  };\n  var ActionTransition = class extends Transition {\n    constructor(target, ruleIndex, actionIndex, isCtxDependent) {\n      super(target);\n      this.serializationType = Transition.ACTION;\n      this.ruleIndex = ruleIndex;\n      this.actionIndex = actionIndex === void 0 ? -1 : actionIndex;\n      this.isCtxDependent = isCtxDependent === void 0 ? false : isCtxDependent;\n      this.isEpsilon = true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    toString() {\n      return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n    }\n  };\n  var SetTransition = class extends Transition {\n    constructor(target, set) {\n      super(target);\n      this.serializationType = Transition.SET;\n      if (set !== void 0 && set !== null) {\n        this.label = set;\n      } else {\n        this.label = new IntervalSet();\n        this.label.addOne(Token2.INVALID_TYPE);\n      }\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return this.label.contains(symbol);\n    }\n    toString() {\n      return this.label.toString();\n    }\n  };\n  var NotSetTransition = class extends SetTransition {\n    constructor(target, set) {\n      super(target, set);\n      this.serializationType = Transition.NOT_SET;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n    }\n    toString() {\n      return \"~\" + super.toString();\n    }\n  };\n  var WildcardTransition = class extends Transition {\n    constructor(target) {\n      super(target);\n      this.serializationType = Transition.WILDCARD;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n    }\n    toString() {\n      return \".\";\n    }\n  };\n  var PrecedencePredicateTransition = class extends AbstractPredicateTransition {\n    constructor(target, precedence) {\n      super(target);\n      this.serializationType = Transition.PRECEDENCE;\n      this.precedence = precedence;\n      this.isEpsilon = true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n      return false;\n    }\n    getPredicate() {\n      return new PrecedencePredicate(this.precedence);\n    }\n    toString() {\n      return this.precedence + \" >= _p\";\n    }\n  };\n  module2.exports = {\n    Transition,\n    AtomTransition: AtomTransition2,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    ActionTransition,\n    EpsilonTransition,\n    RangeTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition,\n    AbstractPredicateTransition\n  };\n});\n\n// node_modules/antlr4/src/antlr4/tree/Tree.js\nvar require_Tree = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var {Interval} = require_IntervalSet2();\n  var INVALID_INTERVAL = new Interval(-1, -2);\n  var Tree = class {\n  };\n  var SyntaxTree = class extends Tree {\n    constructor() {\n      super();\n    }\n  };\n  var ParseTree = class extends SyntaxTree {\n    constructor() {\n      super();\n    }\n  };\n  var RuleNode = class extends ParseTree {\n    constructor() {\n      super();\n    }\n    getRuleContext() {\n      throw new Error(\"missing interface implementation\");\n    }\n  };\n  var TerminalNode = class extends ParseTree {\n    constructor() {\n      super();\n    }\n  };\n  var ErrorNode2 = class extends TerminalNode {\n    constructor() {\n      super();\n    }\n  };\n  var ParseTreeVisitor = class {\n    visit(ctx) {\n      if (Array.isArray(ctx)) {\n        return ctx.map(function(child) {\n          return child.accept(this);\n        }, this);\n      } else {\n        return ctx.accept(this);\n      }\n    }\n    visitChildren(ctx) {\n      if (ctx.children) {\n        return this.visit(ctx.children);\n      } else {\n        return null;\n      }\n    }\n    visitTerminal(node) {\n    }\n    visitErrorNode(node) {\n    }\n  };\n  var ParseTreeListener = class {\n    visitTerminal(node) {\n    }\n    visitErrorNode(node) {\n    }\n    enterEveryRule(node) {\n    }\n    exitEveryRule(node) {\n    }\n  };\n  var TerminalNodeImpl = class extends TerminalNode {\n    constructor(symbol) {\n      super();\n      this.parentCtx = null;\n      this.symbol = symbol;\n    }\n    getChild(i) {\n      return null;\n    }\n    getSymbol() {\n      return this.symbol;\n    }\n    getParent() {\n      return this.parentCtx;\n    }\n    getPayload() {\n      return this.symbol;\n    }\n    getSourceInterval() {\n      if (this.symbol === null) {\n        return INVALID_INTERVAL;\n      }\n      const tokenIndex = this.symbol.tokenIndex;\n      return new Interval(tokenIndex, tokenIndex);\n    }\n    getChildCount() {\n      return 0;\n    }\n    accept(visitor) {\n      return visitor.visitTerminal(this);\n    }\n    getText() {\n      return this.symbol.text;\n    }\n    toString() {\n      if (this.symbol.type === Token2.EOF) {\n        return \"<EOF>\";\n      } else {\n        return this.symbol.text;\n      }\n    }\n  };\n  var ErrorNodeImpl = class extends TerminalNodeImpl {\n    constructor(token) {\n      super(token);\n    }\n    isErrorNode() {\n      return true;\n    }\n    accept(visitor) {\n      return visitor.visitErrorNode(this);\n    }\n  };\n  var ParseTreeWalker = class {\n    walk(listener, t) {\n      const errorNode = t instanceof ErrorNode2 || t.isErrorNode !== void 0 && t.isErrorNode();\n      if (errorNode) {\n        listener.visitErrorNode(t);\n      } else if (t instanceof TerminalNode) {\n        listener.visitTerminal(t);\n      } else {\n        this.enterRule(listener, t);\n        for (let i = 0; i < t.getChildCount(); i++) {\n          const child = t.getChild(i);\n          this.walk(listener, child);\n        }\n        this.exitRule(listener, t);\n      }\n    }\n    enterRule(listener, r) {\n      const ctx = r.getRuleContext();\n      listener.enterEveryRule(ctx);\n      ctx.enterRule(listener);\n    }\n    exitRule(listener, r) {\n      const ctx = r.getRuleContext();\n      ctx.exitRule(listener);\n      listener.exitEveryRule(ctx);\n    }\n  };\n  ParseTreeWalker.DEFAULT = new ParseTreeWalker();\n  module2.exports = {\n    RuleNode,\n    ErrorNode: ErrorNode2,\n    TerminalNode,\n    ErrorNodeImpl,\n    TerminalNodeImpl,\n    ParseTreeListener,\n    ParseTreeVisitor,\n    ParseTreeWalker,\n    INVALID_INTERVAL\n  };\n});\n\n// node_modules/antlr4/src/antlr4/tree/Trees.js\nvar require_Trees2 = __commonJS((exports, module2) => {\n  var Utils3 = require_Utils2();\n  var {Token: Token2} = require_Token2();\n  var {ErrorNode: ErrorNode2, TerminalNode, RuleNode} = require_Tree();\n  var Trees = {\n    toStringTree: function(tree, ruleNames, recog) {\n      ruleNames = ruleNames || null;\n      recog = recog || null;\n      if (recog !== null) {\n        ruleNames = recog.ruleNames;\n      }\n      let s = Trees.getNodeText(tree, ruleNames);\n      s = Utils3.escapeWhitespace(s, false);\n      const c = tree.getChildCount();\n      if (c === 0) {\n        return s;\n      }\n      let res = \"(\" + s + \" \";\n      if (c > 0) {\n        s = Trees.toStringTree(tree.getChild(0), ruleNames);\n        res = res.concat(s);\n      }\n      for (let i = 1; i < c; i++) {\n        s = Trees.toStringTree(tree.getChild(i), ruleNames);\n        res = res.concat(\" \" + s);\n      }\n      res = res.concat(\")\");\n      return res;\n    },\n    getNodeText: function(t, ruleNames, recog) {\n      ruleNames = ruleNames || null;\n      recog = recog || null;\n      if (recog !== null) {\n        ruleNames = recog.ruleNames;\n      }\n      if (ruleNames !== null) {\n        if (t instanceof RuleNode) {\n          const context = t.getRuleContext();\n          const altNumber = context.getAltNumber();\n          if (altNumber != 0) {\n            return ruleNames[t.ruleIndex] + \":\" + altNumber;\n          }\n          return ruleNames[t.ruleIndex];\n        } else if (t instanceof ErrorNode2) {\n          return t.toString();\n        } else if (t instanceof TerminalNode) {\n          if (t.symbol !== null) {\n            return t.symbol.text;\n          }\n        }\n      }\n      const payload = t.getPayload();\n      if (payload instanceof Token2) {\n        return payload.text;\n      }\n      return t.getPayload().toString();\n    },\n    getChildren: function(t) {\n      const list = [];\n      for (let i = 0; i < t.getChildCount(); i++) {\n        list.push(t.getChild(i));\n      }\n      return list;\n    },\n    getAncestors: function(t) {\n      let ancestors = [];\n      t = t.getParent();\n      while (t !== null) {\n        ancestors = [t].concat(ancestors);\n        t = t.getParent();\n      }\n      return ancestors;\n    },\n    findAllTokenNodes: function(t, ttype) {\n      return Trees.findAllNodes(t, ttype, true);\n    },\n    findAllRuleNodes: function(t, ruleIndex) {\n      return Trees.findAllNodes(t, ruleIndex, false);\n    },\n    findAllNodes: function(t, index, findTokens) {\n      const nodes = [];\n      Trees._findAllNodes(t, index, findTokens, nodes);\n      return nodes;\n    },\n    _findAllNodes: function(t, index, findTokens, nodes) {\n      if (findTokens && t instanceof TerminalNode) {\n        if (t.symbol.type === index) {\n          nodes.push(t);\n        }\n      } else if (!findTokens && t instanceof RuleNode) {\n        if (t.ruleIndex === index) {\n          nodes.push(t);\n        }\n      }\n      for (let i = 0; i < t.getChildCount(); i++) {\n        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n      }\n    },\n    descendants: function(t) {\n      let nodes = [t];\n      for (let i = 0; i < t.getChildCount(); i++) {\n        nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n      }\n      return nodes;\n    }\n  };\n  module2.exports = Trees;\n});\n\n// node_modules/antlr4/src/antlr4/RuleContext.js\nvar require_RuleContext2 = __commonJS((exports, module2) => {\n  var {RuleNode} = require_Tree();\n  var {INVALID_INTERVAL} = require_Tree();\n  var Trees = require_Trees2();\n  var RuleContext = class extends RuleNode {\n    constructor(parent, invokingState) {\n      super();\n      this.parentCtx = parent || null;\n      this.invokingState = invokingState || -1;\n    }\n    depth() {\n      let n = 0;\n      let p = this;\n      while (p !== null) {\n        p = p.parentCtx;\n        n += 1;\n      }\n      return n;\n    }\n    isEmpty() {\n      return this.invokingState === -1;\n    }\n    getSourceInterval() {\n      return INVALID_INTERVAL;\n    }\n    getRuleContext() {\n      return this;\n    }\n    getPayload() {\n      return this;\n    }\n    getText() {\n      if (this.getChildCount() === 0) {\n        return \"\";\n      } else {\n        return this.children.map(function(child) {\n          return child.getText();\n        }).join(\"\");\n      }\n    }\n    getAltNumber() {\n      return 0;\n    }\n    setAltNumber(altNumber) {\n    }\n    getChild(i) {\n      return null;\n    }\n    getChildCount() {\n      return 0;\n    }\n    accept(visitor) {\n      return visitor.visitChildren(this);\n    }\n    toStringTree(ruleNames, recog) {\n      return Trees.toStringTree(this, ruleNames, recog);\n    }\n    toString(ruleNames, stop) {\n      ruleNames = ruleNames || null;\n      stop = stop || null;\n      let p = this;\n      let s = \"[\";\n      while (p !== null && p !== stop) {\n        if (ruleNames === null) {\n          if (!p.isEmpty()) {\n            s += p.invokingState;\n          }\n        } else {\n          const ri = p.ruleIndex;\n          const ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : \"\" + ri;\n          s += ruleName;\n        }\n        if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n          s += \" \";\n        }\n        p = p.parentCtx;\n      }\n      s += \"]\";\n      return s;\n    }\n  };\n  module2.exports = RuleContext;\n});\n\n// node_modules/antlr4/src/antlr4/PredictionContext.js\nvar require_PredictionContext2 = __commonJS((exports, module2) => {\n  var RuleContext = require_RuleContext2();\n  var {Hash: Hash2, Map: Map2, equalArrays} = require_Utils2();\n  var PredictionContext = class {\n    constructor(cachedHashCode) {\n      this.cachedHashCode = cachedHashCode;\n    }\n    isEmpty() {\n      return this === PredictionContext.EMPTY;\n    }\n    hasEmptyPath() {\n      return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n    }\n    hashCode() {\n      return this.cachedHashCode;\n    }\n    updateHashCode(hash) {\n      hash.update(this.cachedHashCode);\n    }\n  };\n  PredictionContext.EMPTY = null;\n  PredictionContext.EMPTY_RETURN_STATE = 2147483647;\n  PredictionContext.globalNodeCount = 1;\n  PredictionContext.id = PredictionContext.globalNodeCount;\n  var PredictionContextCache = class {\n    constructor() {\n      this.cache = new Map2();\n    }\n    add(ctx) {\n      if (ctx === PredictionContext.EMPTY) {\n        return PredictionContext.EMPTY;\n      }\n      const existing = this.cache.get(ctx) || null;\n      if (existing !== null) {\n        return existing;\n      }\n      this.cache.put(ctx, ctx);\n      return ctx;\n    }\n    get(ctx) {\n      return this.cache.get(ctx) || null;\n    }\n    get length() {\n      return this.cache.length;\n    }\n  };\n  var SingletonPredictionContext = class extends PredictionContext {\n    constructor(parent, returnState) {\n      let hashCode = 0;\n      const hash = new Hash2();\n      if (parent !== null) {\n        hash.update(parent, returnState);\n      } else {\n        hash.update(1);\n      }\n      hashCode = hash.finish();\n      super(hashCode);\n      this.parentCtx = parent;\n      this.returnState = returnState;\n    }\n    getParent(index) {\n      return this.parentCtx;\n    }\n    getReturnState(index) {\n      return this.returnState;\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof SingletonPredictionContext)) {\n        return false;\n      } else if (this.hashCode() !== other.hashCode()) {\n        return false;\n      } else {\n        if (this.returnState !== other.returnState)\n          return false;\n        else if (this.parentCtx == null)\n          return other.parentCtx == null;\n        else\n          return this.parentCtx.equals(other.parentCtx);\n      }\n    }\n    toString() {\n      const up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n      if (up.length === 0) {\n        if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n          return \"$\";\n        } else {\n          return \"\" + this.returnState;\n        }\n      } else {\n        return \"\" + this.returnState + \" \" + up;\n      }\n    }\n    get length() {\n      return 1;\n    }\n    static create(parent, returnState) {\n      if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n        return PredictionContext.EMPTY;\n      } else {\n        return new SingletonPredictionContext(parent, returnState);\n      }\n    }\n  };\n  var EmptyPredictionContext = class extends SingletonPredictionContext {\n    constructor() {\n      super(null, PredictionContext.EMPTY_RETURN_STATE);\n    }\n    isEmpty() {\n      return true;\n    }\n    getParent(index) {\n      return null;\n    }\n    getReturnState(index) {\n      return this.returnState;\n    }\n    equals(other) {\n      return this === other;\n    }\n    toString() {\n      return \"$\";\n    }\n  };\n  PredictionContext.EMPTY = new EmptyPredictionContext();\n  var ArrayPredictionContext = class extends PredictionContext {\n    constructor(parents, returnStates) {\n      const h = new Hash2();\n      h.update(parents, returnStates);\n      const hashCode = h.finish();\n      super(hashCode);\n      this.parents = parents;\n      this.returnStates = returnStates;\n      return this;\n    }\n    isEmpty() {\n      return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n    }\n    getParent(index) {\n      return this.parents[index];\n    }\n    getReturnState(index) {\n      return this.returnStates[index];\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof ArrayPredictionContext)) {\n        return false;\n      } else if (this.hashCode() !== other.hashCode()) {\n        return false;\n      } else {\n        return equalArrays(this.returnStates, other.returnStates) && equalArrays(this.parents, other.parents);\n      }\n    }\n    toString() {\n      if (this.isEmpty()) {\n        return \"[]\";\n      } else {\n        let s = \"[\";\n        for (let i = 0; i < this.returnStates.length; i++) {\n          if (i > 0) {\n            s = s + \", \";\n          }\n          if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n            s = s + \"$\";\n            continue;\n          }\n          s = s + this.returnStates[i];\n          if (this.parents[i] !== null) {\n            s = s + \" \" + this.parents[i];\n          } else {\n            s = s + \"null\";\n          }\n        }\n        return s + \"]\";\n      }\n    }\n    get length() {\n      return this.returnStates.length;\n    }\n  };\n  function predictionContextFromRuleContext(atn, outerContext) {\n    if (outerContext === void 0 || outerContext === null) {\n      outerContext = RuleContext.EMPTY;\n    }\n    if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n      return PredictionContext.EMPTY;\n    }\n    const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n    const state = atn.states[outerContext.invokingState];\n    const transition = state.transitions[0];\n    return SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n  }\n  function merge(a, b, rootIsWildcard, mergeCache) {\n    if (a === b) {\n      return a;\n    }\n    if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n      return mergeSingletons(a, b, rootIsWildcard, mergeCache);\n    }\n    if (rootIsWildcard) {\n      if (a instanceof EmptyPredictionContext) {\n        return a;\n      }\n      if (b instanceof EmptyPredictionContext) {\n        return b;\n      }\n    }\n    if (a instanceof SingletonPredictionContext) {\n      a = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n    }\n    if (b instanceof SingletonPredictionContext) {\n      b = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n    }\n    return mergeArrays(a, b, rootIsWildcard, mergeCache);\n  }\n  function mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n    if (mergeCache !== null) {\n      let previous = mergeCache.get(a, b);\n      if (previous !== null) {\n        return previous;\n      }\n      previous = mergeCache.get(b, a);\n      if (previous !== null) {\n        return previous;\n      }\n    }\n    const rootMerge = mergeRoot(a, b, rootIsWildcard);\n    if (rootMerge !== null) {\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, rootMerge);\n      }\n      return rootMerge;\n    }\n    if (a.returnState === b.returnState) {\n      const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n      if (parent === a.parentCtx) {\n        return a;\n      }\n      if (parent === b.parentCtx) {\n        return b;\n      }\n      const spc = SingletonPredictionContext.create(parent, a.returnState);\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, spc);\n      }\n      return spc;\n    } else {\n      let singleParent = null;\n      if (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {\n        singleParent = a.parentCtx;\n      }\n      if (singleParent !== null) {\n        const payloads2 = [a.returnState, b.returnState];\n        if (a.returnState > b.returnState) {\n          payloads2[0] = b.returnState;\n          payloads2[1] = a.returnState;\n        }\n        const parents2 = [singleParent, singleParent];\n        const apc = new ArrayPredictionContext(parents2, payloads2);\n        if (mergeCache !== null) {\n          mergeCache.set(a, b, apc);\n        }\n        return apc;\n      }\n      const payloads = [a.returnState, b.returnState];\n      let parents = [a.parentCtx, b.parentCtx];\n      if (a.returnState > b.returnState) {\n        payloads[0] = b.returnState;\n        payloads[1] = a.returnState;\n        parents = [b.parentCtx, a.parentCtx];\n      }\n      const a_ = new ArrayPredictionContext(parents, payloads);\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, a_);\n      }\n      return a_;\n    }\n  }\n  function mergeRoot(a, b, rootIsWildcard) {\n    if (rootIsWildcard) {\n      if (a === PredictionContext.EMPTY) {\n        return PredictionContext.EMPTY;\n      }\n      if (b === PredictionContext.EMPTY) {\n        return PredictionContext.EMPTY;\n      }\n    } else {\n      if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n        return PredictionContext.EMPTY;\n      } else if (a === PredictionContext.EMPTY) {\n        const payloads = [\n          b.returnState,\n          PredictionContext.EMPTY_RETURN_STATE\n        ];\n        const parents = [b.parentCtx, null];\n        return new ArrayPredictionContext(parents, payloads);\n      } else if (b === PredictionContext.EMPTY) {\n        const payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];\n        const parents = [a.parentCtx, null];\n        return new ArrayPredictionContext(parents, payloads);\n      }\n    }\n    return null;\n  }\n  function mergeArrays(a, b, rootIsWildcard, mergeCache) {\n    if (mergeCache !== null) {\n      let previous = mergeCache.get(a, b);\n      if (previous !== null) {\n        return previous;\n      }\n      previous = mergeCache.get(b, a);\n      if (previous !== null) {\n        return previous;\n      }\n    }\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let mergedReturnStates = [];\n    let mergedParents = [];\n    while (i < a.returnStates.length && j < b.returnStates.length) {\n      const a_parent = a.parents[i];\n      const b_parent = b.parents[j];\n      if (a.returnStates[i] === b.returnStates[j]) {\n        const payload = a.returnStates[i];\n        const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;\n        const ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent;\n        if (bothDollars || ax_ax) {\n          mergedParents[k] = a_parent;\n          mergedReturnStates[k] = payload;\n        } else {\n          mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n          mergedReturnStates[k] = payload;\n        }\n        i += 1;\n        j += 1;\n      } else if (a.returnStates[i] < b.returnStates[j]) {\n        mergedParents[k] = a_parent;\n        mergedReturnStates[k] = a.returnStates[i];\n        i += 1;\n      } else {\n        mergedParents[k] = b_parent;\n        mergedReturnStates[k] = b.returnStates[j];\n        j += 1;\n      }\n      k += 1;\n    }\n    if (i < a.returnStates.length) {\n      for (let p = i; p < a.returnStates.length; p++) {\n        mergedParents[k] = a.parents[p];\n        mergedReturnStates[k] = a.returnStates[p];\n        k += 1;\n      }\n    } else {\n      for (let p = j; p < b.returnStates.length; p++) {\n        mergedParents[k] = b.parents[p];\n        mergedReturnStates[k] = b.returnStates[p];\n        k += 1;\n      }\n    }\n    if (k < mergedParents.length) {\n      if (k === 1) {\n        const a_ = SingletonPredictionContext.create(mergedParents[0], mergedReturnStates[0]);\n        if (mergeCache !== null) {\n          mergeCache.set(a, b, a_);\n        }\n        return a_;\n      }\n      mergedParents = mergedParents.slice(0, k);\n      mergedReturnStates = mergedReturnStates.slice(0, k);\n    }\n    const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n    if (M === a) {\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, a);\n      }\n      return a;\n    }\n    if (M === b) {\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, b);\n      }\n      return b;\n    }\n    combineCommonParents(mergedParents);\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, M);\n    }\n    return M;\n  }\n  function combineCommonParents(parents) {\n    const uniqueParents = new Map2();\n    for (let p = 0; p < parents.length; p++) {\n      const parent = parents[p];\n      if (!uniqueParents.containsKey(parent)) {\n        uniqueParents.put(parent, parent);\n      }\n    }\n    for (let q = 0; q < parents.length; q++) {\n      parents[q] = uniqueParents.get(parents[q]);\n    }\n  }\n  function getCachedPredictionContext(context, contextCache, visited) {\n    if (context.isEmpty()) {\n      return context;\n    }\n    let existing = visited.get(context) || null;\n    if (existing !== null) {\n      return existing;\n    }\n    existing = contextCache.get(context);\n    if (existing !== null) {\n      visited.put(context, existing);\n      return existing;\n    }\n    let changed = false;\n    let parents = [];\n    for (let i = 0; i < parents.length; i++) {\n      const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n      if (changed || parent !== context.getParent(i)) {\n        if (!changed) {\n          parents = [];\n          for (let j = 0; j < context.length; j++) {\n            parents[j] = context.getParent(j);\n          }\n          changed = true;\n        }\n        parents[i] = parent;\n      }\n    }\n    if (!changed) {\n      contextCache.add(context);\n      visited.put(context, context);\n      return context;\n    }\n    let updated = null;\n    if (parents.length === 0) {\n      updated = PredictionContext.EMPTY;\n    } else if (parents.length === 1) {\n      updated = SingletonPredictionContext.create(parents[0], context.getReturnState(0));\n    } else {\n      updated = new ArrayPredictionContext(parents, context.returnStates);\n    }\n    contextCache.add(updated);\n    visited.put(updated, updated);\n    visited.put(context, updated);\n    return updated;\n  }\n  module2.exports = {\n    merge,\n    PredictionContext,\n    PredictionContextCache,\n    SingletonPredictionContext,\n    predictionContextFromRuleContext,\n    getCachedPredictionContext\n  };\n});\n\n// node_modules/antlr4/src/antlr4/LL1Analyzer.js\nvar require_LL1Analyzer2 = __commonJS((exports, module2) => {\n  var {Set: Set2, BitSet} = require_Utils2();\n  var {Token: Token2} = require_Token2();\n  var {ATNConfig} = require_ATNConfig2();\n  var {IntervalSet} = require_IntervalSet2();\n  var {RuleStopState} = require_ATNState2();\n  var {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = require_Transition2();\n  var {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = require_PredictionContext2();\n  var LL1Analyzer = class {\n    constructor(atn) {\n      this.atn = atn;\n    }\n    getDecisionLookahead(s) {\n      if (s === null) {\n        return null;\n      }\n      const count = s.transitions.length;\n      const look = [];\n      for (let alt = 0; alt < count; alt++) {\n        look[alt] = new IntervalSet();\n        const lookBusy = new Set2();\n        const seeThruPreds = false;\n        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY, look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n        if (look[alt].length === 0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n          look[alt] = null;\n        }\n      }\n      return look;\n    }\n    LOOK(s, stopState, ctx) {\n      const r = new IntervalSet();\n      const seeThruPreds = true;\n      ctx = ctx || null;\n      const lookContext = ctx !== null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n      this._LOOK(s, stopState, lookContext, r, new Set2(), new BitSet(), seeThruPreds, true);\n      return r;\n    }\n    _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n      const c = new ATNConfig({state: s, alt: 0, context: ctx}, null);\n      if (lookBusy.contains(c)) {\n        return;\n      }\n      lookBusy.add(c);\n      if (s === stopState) {\n        if (ctx === null) {\n          look.addOne(Token2.EPSILON);\n          return;\n        } else if (ctx.isEmpty() && addEOF) {\n          look.addOne(Token2.EOF);\n          return;\n        }\n      }\n      if (s instanceof RuleStopState) {\n        if (ctx === null) {\n          look.addOne(Token2.EPSILON);\n          return;\n        } else if (ctx.isEmpty() && addEOF) {\n          look.addOne(Token2.EOF);\n          return;\n        }\n        if (ctx !== PredictionContext.EMPTY) {\n          const removed = calledRuleStack.contains(s.ruleIndex);\n          try {\n            calledRuleStack.remove(s.ruleIndex);\n            for (let i = 0; i < ctx.length; i++) {\n              const returnState = this.atn.states[ctx.getReturnState(i)];\n              this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            }\n          } finally {\n            if (removed) {\n              calledRuleStack.add(s.ruleIndex);\n            }\n          }\n          return;\n        }\n      }\n      for (let j = 0; j < s.transitions.length; j++) {\n        const t = s.transitions[j];\n        if (t.constructor === RuleTransition) {\n          if (calledRuleStack.contains(t.target.ruleIndex)) {\n            continue;\n          }\n          const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n          try {\n            calledRuleStack.add(t.target.ruleIndex);\n            this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n          } finally {\n            calledRuleStack.remove(t.target.ruleIndex);\n          }\n        } else if (t instanceof AbstractPredicateTransition) {\n          if (seeThruPreds) {\n            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n          } else {\n            look.addOne(LL1Analyzer.HIT_PRED);\n          }\n        } else if (t.isEpsilon) {\n          this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n        } else if (t.constructor === WildcardTransition) {\n          look.addRange(Token2.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n        } else {\n          let set = t.label;\n          if (set !== null) {\n            if (t instanceof NotSetTransition) {\n              set = set.complement(Token2.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n            }\n            look.addSet(set);\n          }\n        }\n      }\n    }\n  };\n  LL1Analyzer.HIT_PRED = Token2.INVALID_TYPE;\n  module2.exports = LL1Analyzer;\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATN.js\nvar require_ATN2 = __commonJS((exports, module2) => {\n  var LL1Analyzer = require_LL1Analyzer2();\n  var {IntervalSet} = require_IntervalSet2();\n  var {Token: Token2} = require_Token2();\n  var ATN2 = class {\n    constructor(grammarType, maxTokenType) {\n      this.grammarType = grammarType;\n      this.maxTokenType = maxTokenType;\n      this.states = [];\n      this.decisionToState = [];\n      this.ruleToStartState = [];\n      this.ruleToStopState = null;\n      this.modeNameToStartState = {};\n      this.ruleToTokenType = null;\n      this.lexerActions = null;\n      this.modeToStartState = [];\n    }\n    nextTokensInContext(s, ctx) {\n      const anal = new LL1Analyzer(this);\n      return anal.LOOK(s, null, ctx);\n    }\n    nextTokensNoContext(s) {\n      if (s.nextTokenWithinRule !== null) {\n        return s.nextTokenWithinRule;\n      }\n      s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n      s.nextTokenWithinRule.readOnly = true;\n      return s.nextTokenWithinRule;\n    }\n    nextTokens(s, ctx) {\n      if (ctx === void 0) {\n        return this.nextTokensNoContext(s);\n      } else {\n        return this.nextTokensInContext(s, ctx);\n      }\n    }\n    addState(state) {\n      if (state !== null) {\n        state.atn = this;\n        state.stateNumber = this.states.length;\n      }\n      this.states.push(state);\n    }\n    removeState(state) {\n      this.states[state.stateNumber] = null;\n    }\n    defineDecisionState(s) {\n      this.decisionToState.push(s);\n      s.decision = this.decisionToState.length - 1;\n      return s.decision;\n    }\n    getDecisionState(decision) {\n      if (this.decisionToState.length === 0) {\n        return null;\n      } else {\n        return this.decisionToState[decision];\n      }\n    }\n    getExpectedTokens(stateNumber, ctx) {\n      if (stateNumber < 0 || stateNumber >= this.states.length) {\n        throw \"Invalid state number.\";\n      }\n      const s = this.states[stateNumber];\n      let following = this.nextTokens(s);\n      if (!following.contains(Token2.EPSILON)) {\n        return following;\n      }\n      const expected = new IntervalSet();\n      expected.addSet(following);\n      expected.removeOne(Token2.EPSILON);\n      while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token2.EPSILON)) {\n        const invokingState = this.states[ctx.invokingState];\n        const rt = invokingState.transitions[0];\n        following = this.nextTokens(rt.followState);\n        expected.addSet(following);\n        expected.removeOne(Token2.EPSILON);\n        ctx = ctx.parentCtx;\n      }\n      if (following.contains(Token2.EPSILON)) {\n        expected.addOne(Token2.EOF);\n      }\n      return expected;\n    }\n  };\n  ATN2.INVALID_ALT_NUMBER = 0;\n  module2.exports = ATN2;\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATNType.js\nvar require_ATNType = __commonJS((exports, module2) => {\n  module2.exports = {\n    LEXER: 0,\n    PARSER: 1\n  };\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\nvar require_ATNDeserializationOptions2 = __commonJS((exports, module2) => {\n  var ATNDeserializationOptions = class {\n    constructor(copyFrom) {\n      if (copyFrom === void 0) {\n        copyFrom = null;\n      }\n      this.readOnly = false;\n      this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;\n      this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;\n    }\n  };\n  ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\n  ATNDeserializationOptions.defaultOptions.readOnly = true;\n  module2.exports = ATNDeserializationOptions;\n});\n\n// node_modules/antlr4/src/antlr4/atn/LexerAction.js\nvar require_LexerAction = __commonJS((exports, module2) => {\n  var LexerActionType = {\n    CHANNEL: 0,\n    CUSTOM: 1,\n    MODE: 2,\n    MORE: 3,\n    POP_MODE: 4,\n    PUSH_MODE: 5,\n    SKIP: 6,\n    TYPE: 7\n  };\n  var LexerAction = class {\n    constructor(action) {\n      this.actionType = action;\n      this.isPositionDependent = false;\n    }\n    hashCode() {\n      const hash = new Hash();\n      this.updateHashCode(hash);\n      return hash.finish();\n    }\n    updateHashCode(hash) {\n      hash.update(this.actionType);\n    }\n    equals(other) {\n      return this === other;\n    }\n  };\n  var LexerSkipAction = class extends LexerAction {\n    constructor() {\n      super(LexerActionType.SKIP);\n    }\n    execute(lexer) {\n      lexer.skip();\n    }\n    toString() {\n      return \"skip\";\n    }\n  };\n  LexerSkipAction.INSTANCE = new LexerSkipAction();\n  var LexerTypeAction = class extends LexerAction {\n    constructor(type) {\n      super(LexerActionType.TYPE);\n      this.type = type;\n    }\n    execute(lexer) {\n      lexer.type = this.type;\n    }\n    updateHashCode(hash) {\n      hash.update(this.actionType, this.type);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof LexerTypeAction)) {\n        return false;\n      } else {\n        return this.type === other.type;\n      }\n    }\n    toString() {\n      return \"type(\" + this.type + \")\";\n    }\n  };\n  var LexerPushModeAction = class extends LexerAction {\n    constructor(mode) {\n      super(LexerActionType.PUSH_MODE);\n      this.mode = mode;\n    }\n    execute(lexer) {\n      lexer.pushMode(this.mode);\n    }\n    updateHashCode(hash) {\n      hash.update(this.actionType, this.mode);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof LexerPushModeAction)) {\n        return false;\n      } else {\n        return this.mode === other.mode;\n      }\n    }\n    toString() {\n      return \"pushMode(\" + this.mode + \")\";\n    }\n  };\n  var LexerPopModeAction = class extends LexerAction {\n    constructor() {\n      super(LexerActionType.POP_MODE);\n    }\n    execute(lexer) {\n      lexer.popMode();\n    }\n    toString() {\n      return \"popMode\";\n    }\n  };\n  LexerPopModeAction.INSTANCE = new LexerPopModeAction();\n  var LexerMoreAction = class extends LexerAction {\n    constructor() {\n      super(LexerActionType.MORE);\n    }\n    execute(lexer) {\n      lexer.more();\n    }\n    toString() {\n      return \"more\";\n    }\n  };\n  LexerMoreAction.INSTANCE = new LexerMoreAction();\n  var LexerModeAction = class extends LexerAction {\n    constructor(mode) {\n      super(LexerActionType.MODE);\n      this.mode = mode;\n    }\n    execute(lexer) {\n      lexer.mode(this.mode);\n    }\n    updateHashCode(hash) {\n      hash.update(this.actionType, this.mode);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof LexerModeAction)) {\n        return false;\n      } else {\n        return this.mode === other.mode;\n      }\n    }\n    toString() {\n      return \"mode(\" + this.mode + \")\";\n    }\n  };\n  var LexerCustomAction = class extends LexerAction {\n    constructor(ruleIndex, actionIndex) {\n      super(LexerActionType.CUSTOM);\n      this.ruleIndex = ruleIndex;\n      this.actionIndex = actionIndex;\n      this.isPositionDependent = true;\n    }\n    execute(lexer) {\n      lexer.action(null, this.ruleIndex, this.actionIndex);\n    }\n    updateHashCode(hash) {\n      hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof LexerCustomAction)) {\n        return false;\n      } else {\n        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n      }\n    }\n  };\n  var LexerChannelAction = class extends LexerAction {\n    constructor(channel) {\n      super(LexerActionType.CHANNEL);\n      this.channel = channel;\n    }\n    execute(lexer) {\n      lexer._channel = this.channel;\n    }\n    updateHashCode(hash) {\n      hash.update(this.actionType, this.channel);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof LexerChannelAction)) {\n        return false;\n      } else {\n        return this.channel === other.channel;\n      }\n    }\n    toString() {\n      return \"channel(\" + this.channel + \")\";\n    }\n  };\n  var LexerIndexedCustomAction = class extends LexerAction {\n    constructor(offset, action) {\n      super(action.actionType);\n      this.offset = offset;\n      this.action = action;\n      this.isPositionDependent = true;\n    }\n    execute(lexer) {\n      this.action.execute(lexer);\n    }\n    updateHashCode(hash) {\n      hash.update(this.actionType, this.offset, this.action);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof LexerIndexedCustomAction)) {\n        return false;\n      } else {\n        return this.offset === other.offset && this.action === other.action;\n      }\n    }\n  };\n  module2.exports = {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerIndexedCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction\n  };\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\nvar require_ATNDeserializer2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var ATN2 = require_ATN2();\n  var ATNType = require_ATNType();\n  var {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n  } = require_ATNState2();\n  var {\n    Transition,\n    AtomTransition: AtomTransition2,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    RangeTransition,\n    ActionTransition,\n    EpsilonTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition\n  } = require_Transition2();\n  var {IntervalSet} = require_IntervalSet2();\n  var ATNDeserializationOptions = require_ATNDeserializationOptions2();\n  var {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction\n  } = require_LexerAction();\n  var BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n  var ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n  var SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP];\n  var SERIALIZED_VERSION = 3;\n  var SERIALIZED_UUID = ADDED_UNICODE_SMP;\n  function initArray(length, value) {\n    const tmp = [];\n    tmp[length - 1] = value;\n    return tmp.map(function(i) {\n      return value;\n    });\n  }\n  var ATNDeserializer3 = class {\n    constructor(options) {\n      if (options === void 0 || options === null) {\n        options = ATNDeserializationOptions.defaultOptions;\n      }\n      this.deserializationOptions = options;\n      this.stateFactories = null;\n      this.actionFactories = null;\n    }\n    isFeatureSupported(feature, actualUuid) {\n      const idx1 = SUPPORTED_UUIDS.indexOf(feature);\n      if (idx1 < 0) {\n        return false;\n      }\n      const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n      return idx2 >= idx1;\n    }\n    deserialize(data) {\n      this.reset(data);\n      this.checkVersion();\n      this.checkUUID();\n      const atn = this.readATN();\n      this.readStates(atn);\n      this.readRules(atn);\n      this.readModes(atn);\n      const sets = [];\n      this.readSets(atn, sets, this.readInt.bind(this));\n      if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n        this.readSets(atn, sets, this.readInt32.bind(this));\n      }\n      this.readEdges(atn, sets);\n      this.readDecisions(atn);\n      this.readLexerActions(atn);\n      this.markPrecedenceDecisions(atn);\n      this.verifyATN(atn);\n      if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {\n        this.generateRuleBypassTransitions(atn);\n        this.verifyATN(atn);\n      }\n      return atn;\n    }\n    reset(data) {\n      const adjust = function(c) {\n        const v = c.charCodeAt(0);\n        return v > 1 ? v - 2 : v + 65534;\n      };\n      const temp = data.split(\"\").map(adjust);\n      temp[0] = data.charCodeAt(0);\n      this.data = temp;\n      this.pos = 0;\n    }\n    checkVersion() {\n      const version = this.readInt();\n      if (version !== SERIALIZED_VERSION) {\n        throw \"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\";\n      }\n    }\n    checkUUID() {\n      const uuid = this.readUUID();\n      if (SUPPORTED_UUIDS.indexOf(uuid) < 0) {\n        throw \"Could not deserialize ATN with UUID: \" + uuid + \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID;\n      }\n      this.uuid = uuid;\n    }\n    readATN() {\n      const grammarType = this.readInt();\n      const maxTokenType = this.readInt();\n      return new ATN2(grammarType, maxTokenType);\n    }\n    readStates(atn) {\n      let j, pair, stateNumber;\n      const loopBackStateNumbers = [];\n      const endStateNumbers = [];\n      const nstates = this.readInt();\n      for (let i = 0; i < nstates; i++) {\n        const stype = this.readInt();\n        if (stype === ATNState.INVALID_TYPE) {\n          atn.addState(null);\n          continue;\n        }\n        let ruleIndex = this.readInt();\n        if (ruleIndex === 65535) {\n          ruleIndex = -1;\n        }\n        const s = this.stateFactory(stype, ruleIndex);\n        if (stype === ATNState.LOOP_END) {\n          const loopBackStateNumber = this.readInt();\n          loopBackStateNumbers.push([s, loopBackStateNumber]);\n        } else if (s instanceof BlockStartState) {\n          const endStateNumber = this.readInt();\n          endStateNumbers.push([s, endStateNumber]);\n        }\n        atn.addState(s);\n      }\n      for (j = 0; j < loopBackStateNumbers.length; j++) {\n        pair = loopBackStateNumbers[j];\n        pair[0].loopBackState = atn.states[pair[1]];\n      }\n      for (j = 0; j < endStateNumbers.length; j++) {\n        pair = endStateNumbers[j];\n        pair[0].endState = atn.states[pair[1]];\n      }\n      let numNonGreedyStates = this.readInt();\n      for (j = 0; j < numNonGreedyStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].nonGreedy = true;\n      }\n      let numPrecedenceStates = this.readInt();\n      for (j = 0; j < numPrecedenceStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].isPrecedenceRule = true;\n      }\n    }\n    readRules(atn) {\n      let i;\n      const nrules = this.readInt();\n      if (atn.grammarType === ATNType.LEXER) {\n        atn.ruleToTokenType = initArray(nrules, 0);\n      }\n      atn.ruleToStartState = initArray(nrules, 0);\n      for (i = 0; i < nrules; i++) {\n        const s = this.readInt();\n        atn.ruleToStartState[i] = atn.states[s];\n        if (atn.grammarType === ATNType.LEXER) {\n          let tokenType = this.readInt();\n          if (tokenType === 65535) {\n            tokenType = Token2.EOF;\n          }\n          atn.ruleToTokenType[i] = tokenType;\n        }\n      }\n      atn.ruleToStopState = initArray(nrules, 0);\n      for (i = 0; i < atn.states.length; i++) {\n        const state = atn.states[i];\n        if (!(state instanceof RuleStopState)) {\n          continue;\n        }\n        atn.ruleToStopState[state.ruleIndex] = state;\n        atn.ruleToStartState[state.ruleIndex].stopState = state;\n      }\n    }\n    readModes(atn) {\n      const nmodes = this.readInt();\n      for (let i = 0; i < nmodes; i++) {\n        let s = this.readInt();\n        atn.modeToStartState.push(atn.states[s]);\n      }\n    }\n    readSets(atn, sets, readUnicode) {\n      const m = this.readInt();\n      for (let i = 0; i < m; i++) {\n        const iset = new IntervalSet();\n        sets.push(iset);\n        const n = this.readInt();\n        const containsEof = this.readInt();\n        if (containsEof !== 0) {\n          iset.addOne(-1);\n        }\n        for (let j = 0; j < n; j++) {\n          const i1 = readUnicode();\n          const i2 = readUnicode();\n          iset.addRange(i1, i2);\n        }\n      }\n    }\n    readEdges(atn, sets) {\n      let i, j, state, trans, target;\n      const nedges = this.readInt();\n      for (i = 0; i < nedges; i++) {\n        const src = this.readInt();\n        const trg = this.readInt();\n        const ttype = this.readInt();\n        const arg1 = this.readInt();\n        const arg2 = this.readInt();\n        const arg3 = this.readInt();\n        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n        const srcState = atn.states[src];\n        srcState.addTransition(trans);\n      }\n      for (i = 0; i < atn.states.length; i++) {\n        state = atn.states[i];\n        for (j = 0; j < state.transitions.length; j++) {\n          const t = state.transitions[j];\n          if (!(t instanceof RuleTransition)) {\n            continue;\n          }\n          let outermostPrecedenceReturn = -1;\n          if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n            if (t.precedence === 0) {\n              outermostPrecedenceReturn = t.target.ruleIndex;\n            }\n          }\n          trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n          atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n        }\n      }\n      for (i = 0; i < atn.states.length; i++) {\n        state = atn.states[i];\n        if (state instanceof BlockStartState) {\n          if (state.endState === null) {\n            throw \"IllegalState\";\n          }\n          if (state.endState.startState !== null) {\n            throw \"IllegalState\";\n          }\n          state.endState.startState = state;\n        }\n        if (state instanceof PlusLoopbackState) {\n          for (j = 0; j < state.transitions.length; j++) {\n            target = state.transitions[j].target;\n            if (target instanceof PlusBlockStartState) {\n              target.loopBackState = state;\n            }\n          }\n        } else if (state instanceof StarLoopbackState) {\n          for (j = 0; j < state.transitions.length; j++) {\n            target = state.transitions[j].target;\n            if (target instanceof StarLoopEntryState) {\n              target.loopBackState = state;\n            }\n          }\n        }\n      }\n    }\n    readDecisions(atn) {\n      const ndecisions = this.readInt();\n      for (let i = 0; i < ndecisions; i++) {\n        const s = this.readInt();\n        const decState = atn.states[s];\n        atn.decisionToState.push(decState);\n        decState.decision = i;\n      }\n    }\n    readLexerActions(atn) {\n      if (atn.grammarType === ATNType.LEXER) {\n        const count = this.readInt();\n        atn.lexerActions = initArray(count, null);\n        for (let i = 0; i < count; i++) {\n          const actionType = this.readInt();\n          let data1 = this.readInt();\n          if (data1 === 65535) {\n            data1 = -1;\n          }\n          let data2 = this.readInt();\n          if (data2 === 65535) {\n            data2 = -1;\n          }\n          atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);\n        }\n      }\n    }\n    generateRuleBypassTransitions(atn) {\n      let i;\n      const count = atn.ruleToStartState.length;\n      for (i = 0; i < count; i++) {\n        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n      }\n      for (i = 0; i < count; i++) {\n        this.generateRuleBypassTransition(atn, i);\n      }\n    }\n    generateRuleBypassTransition(atn, idx) {\n      let i, state;\n      const bypassStart = new BasicBlockStartState();\n      bypassStart.ruleIndex = idx;\n      atn.addState(bypassStart);\n      const bypassStop = new BlockEndState();\n      bypassStop.ruleIndex = idx;\n      atn.addState(bypassStop);\n      bypassStart.endState = bypassStop;\n      atn.defineDecisionState(bypassStart);\n      bypassStop.startState = bypassStart;\n      let excludeTransition = null;\n      let endState = null;\n      if (atn.ruleToStartState[idx].isPrecedenceRule) {\n        endState = null;\n        for (i = 0; i < atn.states.length; i++) {\n          state = atn.states[i];\n          if (this.stateIsEndStateFor(state, idx)) {\n            endState = state;\n            excludeTransition = state.loopBackState.transitions[0];\n            break;\n          }\n        }\n        if (excludeTransition === null) {\n          throw \"Couldn't identify final state of the precedence rule prefix section.\";\n        }\n      } else {\n        endState = atn.ruleToStopState[idx];\n      }\n      for (i = 0; i < atn.states.length; i++) {\n        state = atn.states[i];\n        for (let j = 0; j < state.transitions.length; j++) {\n          const transition = state.transitions[j];\n          if (transition === excludeTransition) {\n            continue;\n          }\n          if (transition.target === endState) {\n            transition.target = bypassStop;\n          }\n        }\n      }\n      const ruleToStartState = atn.ruleToStartState[idx];\n      const count = ruleToStartState.transitions.length;\n      while (count > 0) {\n        bypassStart.addTransition(ruleToStartState.transitions[count - 1]);\n        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n      }\n      atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n      bypassStop.addTransition(new EpsilonTransition(endState));\n      const matchState = new BasicState();\n      atn.addState(matchState);\n      matchState.addTransition(new AtomTransition2(bypassStop, atn.ruleToTokenType[idx]));\n      bypassStart.addTransition(new EpsilonTransition(matchState));\n    }\n    stateIsEndStateFor(state, idx) {\n      if (state.ruleIndex !== idx) {\n        return null;\n      }\n      if (!(state instanceof StarLoopEntryState)) {\n        return null;\n      }\n      const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n      if (!(maybeLoopEndState instanceof LoopEndState)) {\n        return null;\n      }\n      if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n        return state;\n      } else {\n        return null;\n      }\n    }\n    markPrecedenceDecisions(atn) {\n      for (let i = 0; i < atn.states.length; i++) {\n        const state = atn.states[i];\n        if (!(state instanceof StarLoopEntryState)) {\n          continue;\n        }\n        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n          const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n          if (maybeLoopEndState instanceof LoopEndState) {\n            if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n              state.isPrecedenceDecision = true;\n            }\n          }\n        }\n      }\n    }\n    verifyATN(atn) {\n      if (!this.deserializationOptions.verifyATN) {\n        return;\n      }\n      for (let i = 0; i < atn.states.length; i++) {\n        const state = atn.states[i];\n        if (state === null) {\n          continue;\n        }\n        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n        if (state instanceof PlusBlockStartState) {\n          this.checkCondition(state.loopBackState !== null);\n        } else if (state instanceof StarLoopEntryState) {\n          this.checkCondition(state.loopBackState !== null);\n          this.checkCondition(state.transitions.length === 2);\n          if (state.transitions[0].target instanceof StarBlockStartState) {\n            this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n            this.checkCondition(!state.nonGreedy);\n          } else if (state.transitions[0].target instanceof LoopEndState) {\n            this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n            this.checkCondition(state.nonGreedy);\n          } else {\n            throw \"IllegalState\";\n          }\n        } else if (state instanceof StarLoopbackState) {\n          this.checkCondition(state.transitions.length === 1);\n          this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n        } else if (state instanceof LoopEndState) {\n          this.checkCondition(state.loopBackState !== null);\n        } else if (state instanceof RuleStartState) {\n          this.checkCondition(state.stopState !== null);\n        } else if (state instanceof BlockStartState) {\n          this.checkCondition(state.endState !== null);\n        } else if (state instanceof BlockEndState) {\n          this.checkCondition(state.startState !== null);\n        } else if (state instanceof DecisionState) {\n          this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n        } else {\n          this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);\n        }\n      }\n    }\n    checkCondition(condition, message) {\n      if (!condition) {\n        if (message === void 0 || message === null) {\n          message = \"IllegalState\";\n        }\n        throw message;\n      }\n    }\n    readInt() {\n      return this.data[this.pos++];\n    }\n    readInt32() {\n      const low = this.readInt();\n      const high = this.readInt();\n      return low | high << 16;\n    }\n    readLong() {\n      const low = this.readInt32();\n      const high = this.readInt32();\n      return low & 4294967295 | high << 32;\n    }\n    readUUID() {\n      const bb = [];\n      for (let i = 7; i >= 0; i--) {\n        const int = this.readInt();\n        bb[2 * i + 1] = int & 255;\n        bb[2 * i] = int >> 8 & 255;\n      }\n      return byteToHex[bb[0]] + byteToHex[bb[1]] + byteToHex[bb[2]] + byteToHex[bb[3]] + \"-\" + byteToHex[bb[4]] + byteToHex[bb[5]] + \"-\" + byteToHex[bb[6]] + byteToHex[bb[7]] + \"-\" + byteToHex[bb[8]] + byteToHex[bb[9]] + \"-\" + byteToHex[bb[10]] + byteToHex[bb[11]] + byteToHex[bb[12]] + byteToHex[bb[13]] + byteToHex[bb[14]] + byteToHex[bb[15]];\n    }\n    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {\n      const target = atn.states[trg];\n      switch (type) {\n        case Transition.EPSILON:\n          return new EpsilonTransition(target);\n        case Transition.RANGE:\n          return arg3 !== 0 ? new RangeTransition(target, Token2.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n        case Transition.RULE:\n          return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n        case Transition.PREDICATE:\n          return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.PRECEDENCE:\n          return new PrecedencePredicateTransition(target, arg1);\n        case Transition.ATOM:\n          return arg3 !== 0 ? new AtomTransition2(target, Token2.EOF) : new AtomTransition2(target, arg1);\n        case Transition.ACTION:\n          return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.SET:\n          return new SetTransition(target, sets[arg1]);\n        case Transition.NOT_SET:\n          return new NotSetTransition(target, sets[arg1]);\n        case Transition.WILDCARD:\n          return new WildcardTransition(target);\n        default:\n          throw \"The specified transition type: \" + type + \" is not valid.\";\n      }\n    }\n    stateFactory(type, ruleIndex) {\n      if (this.stateFactories === null) {\n        const sf = [];\n        sf[ATNState.INVALID_TYPE] = null;\n        sf[ATNState.BASIC] = () => new BasicState();\n        sf[ATNState.RULE_START] = () => new RuleStartState();\n        sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();\n        sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();\n        sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();\n        sf[ATNState.TOKEN_START] = () => new TokensStartState();\n        sf[ATNState.RULE_STOP] = () => new RuleStopState();\n        sf[ATNState.BLOCK_END] = () => new BlockEndState();\n        sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();\n        sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();\n        sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();\n        sf[ATNState.LOOP_END] = () => new LoopEndState();\n        this.stateFactories = sf;\n      }\n      if (type > this.stateFactories.length || this.stateFactories[type] === null) {\n        throw \"The specified state type \" + type + \" is not valid.\";\n      } else {\n        const s = this.stateFactories[type]();\n        if (s !== null) {\n          s.ruleIndex = ruleIndex;\n          return s;\n        }\n      }\n    }\n    lexerActionFactory(type, data1, data2) {\n      if (this.actionFactories === null) {\n        const af = [];\n        af[LexerActionType.CHANNEL] = (data12, data22) => new LexerChannelAction(data12);\n        af[LexerActionType.CUSTOM] = (data12, data22) => new LexerCustomAction(data12, data22);\n        af[LexerActionType.MODE] = (data12, data22) => new LexerModeAction(data12);\n        af[LexerActionType.MORE] = (data12, data22) => LexerMoreAction.INSTANCE;\n        af[LexerActionType.POP_MODE] = (data12, data22) => LexerPopModeAction.INSTANCE;\n        af[LexerActionType.PUSH_MODE] = (data12, data22) => new LexerPushModeAction(data12);\n        af[LexerActionType.SKIP] = (data12, data22) => LexerSkipAction.INSTANCE;\n        af[LexerActionType.TYPE] = (data12, data22) => new LexerTypeAction(data12);\n        this.actionFactories = af;\n      }\n      if (type > this.actionFactories.length || this.actionFactories[type] === null) {\n        throw \"The specified lexer action type \" + type + \" is not valid.\";\n      } else {\n        return this.actionFactories[type](data1, data2);\n      }\n    }\n  };\n  function createByteToHex() {\n    const bth = [];\n    for (let i = 0; i < 256; i++) {\n      bth[i] = (i + 256).toString(16).substr(1).toUpperCase();\n    }\n    return bth;\n  }\n  var byteToHex = createByteToHex();\n  module2.exports = ATNDeserializer3;\n});\n\n// node_modules/antlr4/src/antlr4/error/ErrorListener.js\nvar require_ErrorListener = __commonJS((exports, module2) => {\n  var ErrorListener2 = class {\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    }\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    }\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    }\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    }\n  };\n  var ConsoleErrorListener = class extends ErrorListener2 {\n    constructor() {\n      super();\n    }\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n      console.error(\"line \" + line + \":\" + column + \" \" + msg);\n    }\n  };\n  ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n  var ProxyErrorListener = class extends ErrorListener2 {\n    constructor(delegates) {\n      super();\n      if (delegates === null) {\n        throw \"delegates\";\n      }\n      this.delegates = delegates;\n      return this;\n    }\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n      this.delegates.map((d) => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n    }\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n      this.delegates.map((d) => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n    }\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n      this.delegates.map((d) => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n    }\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n      this.delegates.map((d) => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n    }\n  };\n  module2.exports = {ErrorListener: ErrorListener2, ConsoleErrorListener, ProxyErrorListener};\n});\n\n// node_modules/antlr4/src/antlr4/Recognizer.js\nvar require_Recognizer2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var {ConsoleErrorListener} = require_ErrorListener();\n  var {ProxyErrorListener} = require_ErrorListener();\n  var Recognizer = class {\n    constructor() {\n      this._listeners = [ConsoleErrorListener.INSTANCE];\n      this._interp = null;\n      this._stateNumber = -1;\n    }\n    checkVersion(toolVersion) {\n      const runtimeVersion = \"4.9.2\";\n      if (runtimeVersion !== toolVersion) {\n        console.log(\"ANTLR runtime and generated code versions disagree: \" + runtimeVersion + \"!=\" + toolVersion);\n      }\n    }\n    addErrorListener(listener) {\n      this._listeners.push(listener);\n    }\n    removeErrorListeners() {\n      this._listeners = [];\n    }\n    getTokenTypeMap() {\n      const tokenNames = this.getTokenNames();\n      if (tokenNames === null) {\n        throw \"The current recognizer does not provide a list of token names.\";\n      }\n      let result = this.tokenTypeMapCache[tokenNames];\n      if (result === void 0) {\n        result = tokenNames.reduce(function(o, k, i) {\n          o[k] = i;\n        });\n        result.EOF = Token2.EOF;\n        this.tokenTypeMapCache[tokenNames] = result;\n      }\n      return result;\n    }\n    getRuleIndexMap() {\n      const ruleNames = this.ruleNames;\n      if (ruleNames === null) {\n        throw \"The current recognizer does not provide a list of rule names.\";\n      }\n      let result = this.ruleIndexMapCache[ruleNames];\n      if (result === void 0) {\n        result = ruleNames.reduce(function(o, k, i) {\n          o[k] = i;\n        });\n        this.ruleIndexMapCache[ruleNames] = result;\n      }\n      return result;\n    }\n    getTokenType(tokenName) {\n      const ttype = this.getTokenTypeMap()[tokenName];\n      if (ttype !== void 0) {\n        return ttype;\n      } else {\n        return Token2.INVALID_TYPE;\n      }\n    }\n    getErrorHeader(e) {\n      const line = e.getOffendingToken().line;\n      const column = e.getOffendingToken().column;\n      return \"line \" + line + \":\" + column;\n    }\n    getTokenErrorDisplay(t) {\n      if (t === null) {\n        return \"<no token>\";\n      }\n      let s = t.text;\n      if (s === null) {\n        if (t.type === Token2.EOF) {\n          s = \"<EOF>\";\n        } else {\n          s = \"<\" + t.type + \">\";\n        }\n      }\n      s = s.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\t\", \"\\\\t\");\n      return \"'\" + s + \"'\";\n    }\n    getErrorListenerDispatch() {\n      return new ProxyErrorListener(this._listeners);\n    }\n    sempred(localctx, ruleIndex, actionIndex) {\n      return true;\n    }\n    precpred(localctx, precedence) {\n      return true;\n    }\n    get state() {\n      return this._stateNumber;\n    }\n    set state(state) {\n      this._stateNumber = state;\n    }\n  };\n  Recognizer.tokenTypeMapCache = {};\n  Recognizer.ruleIndexMapCache = {};\n  module2.exports = Recognizer;\n});\n\n// node_modules/antlr4/src/antlr4/CommonTokenFactory.js\nvar require_CommonTokenFactory2 = __commonJS((exports, module2) => {\n  var CommonToken = require_Token2().CommonToken;\n  var TokenFactory = class {\n  };\n  var CommonTokenFactory = class extends TokenFactory {\n    constructor(copyText) {\n      super();\n      this.copyText = copyText === void 0 ? false : copyText;\n    }\n    create(source, type, text, channel, start, stop, line, column) {\n      const t = new CommonToken(source, type, channel, start, stop);\n      t.line = line;\n      t.column = column;\n      if (text !== null) {\n        t.text = text;\n      } else if (this.copyText && source[1] !== null) {\n        t.text = source[1].getText(start, stop);\n      }\n      return t;\n    }\n    createThin(type, text) {\n      const t = new CommonToken(null, type);\n      t.text = text;\n      return t;\n    }\n  };\n  CommonTokenFactory.DEFAULT = new CommonTokenFactory();\n  module2.exports = CommonTokenFactory;\n});\n\n// node_modules/antlr4/src/antlr4/error/Errors.js\nvar require_Errors = __commonJS((exports, module2) => {\n  var {PredicateTransition} = require_Transition2();\n  var {Interval} = require_IntervalSet2().Interval;\n  var RecognitionException2 = class extends Error {\n    constructor(params) {\n      super(params.message);\n      if (!!Error.captureStackTrace) {\n        Error.captureStackTrace(this, RecognitionException2);\n      } else {\n        var stack = new Error().stack;\n      }\n      this.message = params.message;\n      this.recognizer = params.recognizer;\n      this.input = params.input;\n      this.ctx = params.ctx;\n      this.offendingToken = null;\n      this.offendingState = -1;\n      if (this.recognizer !== null) {\n        this.offendingState = this.recognizer.state;\n      }\n    }\n    getExpectedTokens() {\n      if (this.recognizer !== null) {\n        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n      } else {\n        return null;\n      }\n    }\n    toString() {\n      return this.message;\n    }\n  };\n  var LexerNoViableAltException = class extends RecognitionException2 {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n      super({message: \"\", recognizer: lexer, input, ctx: null});\n      this.startIndex = startIndex;\n      this.deadEndConfigs = deadEndConfigs;\n    }\n    toString() {\n      let symbol = \"\";\n      if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n        symbol = this.input.getText(new Interval(this.startIndex, this.startIndex));\n      }\n      return \"LexerNoViableAltException\" + symbol;\n    }\n  };\n  var NoViableAltException2 = class extends RecognitionException2 {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n      ctx = ctx || recognizer._ctx;\n      offendingToken = offendingToken || recognizer.getCurrentToken();\n      startToken = startToken || recognizer.getCurrentToken();\n      input = input || recognizer.getInputStream();\n      super({message: \"\", recognizer, input, ctx});\n      this.deadEndConfigs = deadEndConfigs;\n      this.startToken = startToken;\n      this.offendingToken = offendingToken;\n    }\n  };\n  var InputMismatchException = class extends RecognitionException2 {\n    constructor(recognizer) {\n      super({message: \"\", recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});\n      this.offendingToken = recognizer.getCurrentToken();\n    }\n  };\n  function formatMessage(predicate, message) {\n    if (message !== null) {\n      return message;\n    } else {\n      return \"failed predicate: {\" + predicate + \"}?\";\n    }\n  }\n  var FailedPredicateException2 = class extends RecognitionException2 {\n    constructor(recognizer, predicate, message) {\n      super({\n        message: formatMessage(predicate, message || null),\n        recognizer,\n        input: recognizer.getInputStream(),\n        ctx: recognizer._ctx\n      });\n      const s = recognizer._interp.atn.states[recognizer.state];\n      const trans = s.transitions[0];\n      if (trans instanceof PredicateTransition) {\n        this.ruleIndex = trans.ruleIndex;\n        this.predicateIndex = trans.predIndex;\n      } else {\n        this.ruleIndex = 0;\n        this.predicateIndex = 0;\n      }\n      this.predicate = predicate;\n      this.offendingToken = recognizer.getCurrentToken();\n    }\n  };\n  var ParseCancellationException = class extends Error {\n    constructor() {\n      super();\n      Error.captureStackTrace(this, ParseCancellationException);\n    }\n  };\n  module2.exports = {\n    RecognitionException: RecognitionException2,\n    NoViableAltException: NoViableAltException2,\n    LexerNoViableAltException,\n    InputMismatchException,\n    FailedPredicateException: FailedPredicateException2,\n    ParseCancellationException\n  };\n});\n\n// node_modules/antlr4/src/antlr4/Lexer.js\nvar require_Lexer2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var Recognizer = require_Recognizer2();\n  var CommonTokenFactory = require_CommonTokenFactory2();\n  var {RecognitionException: RecognitionException2} = require_Errors();\n  var {LexerNoViableAltException} = require_Errors();\n  var Lexer2 = class extends Recognizer {\n    constructor(input) {\n      super();\n      this._input = input;\n      this._factory = CommonTokenFactory.DEFAULT;\n      this._tokenFactorySourcePair = [this, input];\n      this._interp = null;\n      this._token = null;\n      this._tokenStartCharIndex = -1;\n      this._tokenStartLine = -1;\n      this._tokenStartColumn = -1;\n      this._hitEOF = false;\n      this._channel = Token2.DEFAULT_CHANNEL;\n      this._type = Token2.INVALID_TYPE;\n      this._modeStack = [];\n      this._mode = Lexer2.DEFAULT_MODE;\n      this._text = null;\n    }\n    reset() {\n      if (this._input !== null) {\n        this._input.seek(0);\n      }\n      this._token = null;\n      this._type = Token2.INVALID_TYPE;\n      this._channel = Token2.DEFAULT_CHANNEL;\n      this._tokenStartCharIndex = -1;\n      this._tokenStartColumn = -1;\n      this._tokenStartLine = -1;\n      this._text = null;\n      this._hitEOF = false;\n      this._mode = Lexer2.DEFAULT_MODE;\n      this._modeStack = [];\n      this._interp.reset();\n    }\n    nextToken() {\n      if (this._input === null) {\n        throw \"nextToken requires a non-null input stream.\";\n      }\n      const tokenStartMarker = this._input.mark();\n      try {\n        while (true) {\n          if (this._hitEOF) {\n            this.emitEOF();\n            return this._token;\n          }\n          this._token = null;\n          this._channel = Token2.DEFAULT_CHANNEL;\n          this._tokenStartCharIndex = this._input.index;\n          this._tokenStartColumn = this._interp.column;\n          this._tokenStartLine = this._interp.line;\n          this._text = null;\n          let continueOuter = false;\n          while (true) {\n            this._type = Token2.INVALID_TYPE;\n            let ttype = Lexer2.SKIP;\n            try {\n              ttype = this._interp.match(this._input, this._mode);\n            } catch (e) {\n              if (e instanceof RecognitionException2) {\n                this.notifyListeners(e);\n                this.recover(e);\n              } else {\n                console.log(e.stack);\n                throw e;\n              }\n            }\n            if (this._input.LA(1) === Token2.EOF) {\n              this._hitEOF = true;\n            }\n            if (this._type === Token2.INVALID_TYPE) {\n              this._type = ttype;\n            }\n            if (this._type === Lexer2.SKIP) {\n              continueOuter = true;\n              break;\n            }\n            if (this._type !== Lexer2.MORE) {\n              break;\n            }\n          }\n          if (continueOuter) {\n            continue;\n          }\n          if (this._token === null) {\n            this.emit();\n          }\n          return this._token;\n        }\n      } finally {\n        this._input.release(tokenStartMarker);\n      }\n    }\n    skip() {\n      this._type = Lexer2.SKIP;\n    }\n    more() {\n      this._type = Lexer2.MORE;\n    }\n    mode(m) {\n      this._mode = m;\n    }\n    pushMode(m) {\n      if (this._interp.debug) {\n        console.log(\"pushMode \" + m);\n      }\n      this._modeStack.push(this._mode);\n      this.mode(m);\n    }\n    popMode() {\n      if (this._modeStack.length === 0) {\n        throw \"Empty Stack\";\n      }\n      if (this._interp.debug) {\n        console.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n      }\n      this.mode(this._modeStack.pop());\n      return this._mode;\n    }\n    emitToken(token) {\n      this._token = token;\n    }\n    emit() {\n      const t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);\n      this.emitToken(t);\n      return t;\n    }\n    emitEOF() {\n      const cpos = this.column;\n      const lpos = this.line;\n      const eof = this._factory.create(this._tokenFactorySourcePair, Token2.EOF, null, Token2.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, lpos, cpos);\n      this.emitToken(eof);\n      return eof;\n    }\n    getCharIndex() {\n      return this._input.index;\n    }\n    getAllTokens() {\n      const tokens2 = [];\n      let t = this.nextToken();\n      while (t.type !== Token2.EOF) {\n        tokens2.push(t);\n        t = this.nextToken();\n      }\n      return tokens2;\n    }\n    notifyListeners(e) {\n      const start = this._tokenStartCharIndex;\n      const stop = this._input.index;\n      const text = this._input.getText(start, stop);\n      const msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n      const listener = this.getErrorListenerDispatch();\n      listener.syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, msg, e);\n    }\n    getErrorDisplay(s) {\n      const d = [];\n      for (let i = 0; i < s.length; i++) {\n        d.push(s[i]);\n      }\n      return d.join(\"\");\n    }\n    getErrorDisplayForChar(c) {\n      if (c.charCodeAt(0) === Token2.EOF) {\n        return \"<EOF>\";\n      } else if (c === \"\\n\") {\n        return \"\\\\n\";\n      } else if (c === \"\t\") {\n        return \"\\\\t\";\n      } else if (c === \"\\r\") {\n        return \"\\\\r\";\n      } else {\n        return c;\n      }\n    }\n    getCharErrorDisplay(c) {\n      return \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n    }\n    recover(re) {\n      if (this._input.LA(1) !== Token2.EOF) {\n        if (re instanceof LexerNoViableAltException) {\n          this._interp.consume(this._input);\n        } else {\n          this._input.consume();\n        }\n      }\n    }\n    get inputStream() {\n      return this._input;\n    }\n    set inputStream(input) {\n      this._input = null;\n      this._tokenFactorySourcePair = [this, this._input];\n      this.reset();\n      this._input = input;\n      this._tokenFactorySourcePair = [this, this._input];\n    }\n    get sourceName() {\n      return this._input.sourceName;\n    }\n    get type() {\n      return this.type;\n    }\n    set type(type) {\n      this._type = type;\n    }\n    get line() {\n      return this._interp.line;\n    }\n    set line(line) {\n      this._interp.line = line;\n    }\n    get column() {\n      return this._interp.column;\n    }\n    set column(column) {\n      this._interp.column = column;\n    }\n    get text() {\n      if (this._text !== null) {\n        return this._text;\n      } else {\n        return this._interp.getText(this._input);\n      }\n    }\n    set text(text) {\n      this._text = text;\n    }\n  };\n  Lexer2.DEFAULT_MODE = 0;\n  Lexer2.MORE = -2;\n  Lexer2.SKIP = -3;\n  Lexer2.DEFAULT_TOKEN_CHANNEL = Token2.DEFAULT_CHANNEL;\n  Lexer2.HIDDEN = Token2.HIDDEN_CHANNEL;\n  Lexer2.MIN_CHAR_VALUE = 0;\n  Lexer2.MAX_CHAR_VALUE = 1114111;\n  module2.exports = Lexer2;\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\nvar require_ATNConfigSet2 = __commonJS((exports, module2) => {\n  var ATN2 = require_ATN2();\n  var Utils3 = require_Utils2();\n  var {SemanticContext} = require_SemanticContext2();\n  var {merge} = require_PredictionContext2();\n  function hashATNConfig(c) {\n    return c.hashCodeForConfigSet();\n  }\n  function equalATNConfigs(a, b) {\n    if (a === b) {\n      return true;\n    } else if (a === null || b === null) {\n      return false;\n    } else\n      return a.equalsForConfigSet(b);\n  }\n  var ATNConfigSet = class {\n    constructor(fullCtx) {\n      this.configLookup = new Utils3.Set(hashATNConfig, equalATNConfigs);\n      this.fullCtx = fullCtx === void 0 ? true : fullCtx;\n      this.readOnly = false;\n      this.configs = [];\n      this.uniqueAlt = 0;\n      this.conflictingAlts = null;\n      this.hasSemanticContext = false;\n      this.dipsIntoOuterContext = false;\n      this.cachedHashCode = -1;\n    }\n    add(config, mergeCache) {\n      if (mergeCache === void 0) {\n        mergeCache = null;\n      }\n      if (this.readOnly) {\n        throw \"This set is readonly\";\n      }\n      if (config.semanticContext !== SemanticContext.NONE) {\n        this.hasSemanticContext = true;\n      }\n      if (config.reachesIntoOuterContext > 0) {\n        this.dipsIntoOuterContext = true;\n      }\n      const existing = this.configLookup.add(config);\n      if (existing === config) {\n        this.cachedHashCode = -1;\n        this.configs.push(config);\n        return true;\n      }\n      const rootIsWildcard = !this.fullCtx;\n      const merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n      existing.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n      if (config.precedenceFilterSuppressed) {\n        existing.precedenceFilterSuppressed = true;\n      }\n      existing.context = merged;\n      return true;\n    }\n    getStates() {\n      const states = new Utils3.Set();\n      for (let i = 0; i < this.configs.length; i++) {\n        states.add(this.configs[i].state);\n      }\n      return states;\n    }\n    getPredicates() {\n      const preds = [];\n      for (let i = 0; i < this.configs.length; i++) {\n        const c = this.configs[i].semanticContext;\n        if (c !== SemanticContext.NONE) {\n          preds.push(c.semanticContext);\n        }\n      }\n      return preds;\n    }\n    optimizeConfigs(interpreter) {\n      if (this.readOnly) {\n        throw \"This set is readonly\";\n      }\n      if (this.configLookup.length === 0) {\n        return;\n      }\n      for (let i = 0; i < this.configs.length; i++) {\n        const config = this.configs[i];\n        config.context = interpreter.getCachedContext(config.context);\n      }\n    }\n    addAll(coll) {\n      for (let i = 0; i < coll.length; i++) {\n        this.add(coll[i]);\n      }\n      return false;\n    }\n    equals(other) {\n      return this === other || other instanceof ATNConfigSet && Utils3.equalArrays(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;\n    }\n    hashCode() {\n      const hash = new Utils3.Hash();\n      hash.update(this.configs);\n      return hash.finish();\n    }\n    updateHashCode(hash) {\n      if (this.readOnly) {\n        if (this.cachedHashCode === -1) {\n          this.cachedHashCode = this.hashCode();\n        }\n        hash.update(this.cachedHashCode);\n      } else {\n        hash.update(this.hashCode());\n      }\n    }\n    isEmpty() {\n      return this.configs.length === 0;\n    }\n    contains(item) {\n      if (this.configLookup === null) {\n        throw \"This method is not implemented for readonly sets.\";\n      }\n      return this.configLookup.contains(item);\n    }\n    containsFast(item) {\n      if (this.configLookup === null) {\n        throw \"This method is not implemented for readonly sets.\";\n      }\n      return this.configLookup.containsFast(item);\n    }\n    clear() {\n      if (this.readOnly) {\n        throw \"This set is readonly\";\n      }\n      this.configs = [];\n      this.cachedHashCode = -1;\n      this.configLookup = new Utils3.Set();\n    }\n    setReadonly(readOnly) {\n      this.readOnly = readOnly;\n      if (readOnly) {\n        this.configLookup = null;\n      }\n    }\n    toString() {\n      return Utils3.arrayToString(this.configs) + (this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") + (this.uniqueAlt !== ATN2.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") + (this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") + (this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n    }\n    get items() {\n      return this.configs;\n    }\n    get length() {\n      return this.configs.length;\n    }\n  };\n  var OrderedATNConfigSet = class extends ATNConfigSet {\n    constructor() {\n      super();\n      this.configLookup = new Utils3.Set();\n    }\n  };\n  module2.exports = {\n    ATNConfigSet,\n    OrderedATNConfigSet\n  };\n});\n\n// node_modules/antlr4/src/antlr4/dfa/DFAState.js\nvar require_DFAState2 = __commonJS((exports, module2) => {\n  var {ATNConfigSet} = require_ATNConfigSet2();\n  var {Hash: Hash2, Set: Set2} = require_Utils2();\n  var PredPrediction = class {\n    constructor(pred, alt) {\n      this.alt = alt;\n      this.pred = pred;\n    }\n    toString() {\n      return \"(\" + this.pred + \", \" + this.alt + \")\";\n    }\n  };\n  var DFAState = class {\n    constructor(stateNumber, configs) {\n      if (stateNumber === null) {\n        stateNumber = -1;\n      }\n      if (configs === null) {\n        configs = new ATNConfigSet();\n      }\n      this.stateNumber = stateNumber;\n      this.configs = configs;\n      this.edges = null;\n      this.isAcceptState = false;\n      this.prediction = 0;\n      this.lexerActionExecutor = null;\n      this.requiresFullContext = false;\n      this.predicates = null;\n      return this;\n    }\n    getAltSet() {\n      const alts = new Set2();\n      if (this.configs !== null) {\n        for (let i = 0; i < this.configs.length; i++) {\n          const c = this.configs[i];\n          alts.add(c.alt);\n        }\n      }\n      if (alts.length === 0) {\n        return null;\n      } else {\n        return alts;\n      }\n    }\n    equals(other) {\n      return this === other || other instanceof DFAState && this.configs.equals(other.configs);\n    }\n    toString() {\n      let s = \"\" + this.stateNumber + \":\" + this.configs;\n      if (this.isAcceptState) {\n        s = s + \"=>\";\n        if (this.predicates !== null)\n          s = s + this.predicates;\n        else\n          s = s + this.prediction;\n      }\n      return s;\n    }\n    hashCode() {\n      const hash = new Hash2();\n      hash.update(this.configs);\n      return hash.finish();\n    }\n  };\n  module2.exports = {DFAState, PredPrediction};\n});\n\n// node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\nvar require_ATNSimulator2 = __commonJS((exports, module2) => {\n  var {DFAState} = require_DFAState2();\n  var {ATNConfigSet} = require_ATNConfigSet2();\n  var {getCachedPredictionContext} = require_PredictionContext2();\n  var {Map: Map2} = require_Utils2();\n  var ATNSimulator = class {\n    constructor(atn, sharedContextCache) {\n      this.atn = atn;\n      this.sharedContextCache = sharedContextCache;\n      return this;\n    }\n    getCachedContext(context) {\n      if (this.sharedContextCache === null) {\n        return context;\n      }\n      const visited = new Map2();\n      return getCachedPredictionContext(context, this.sharedContextCache, visited);\n    }\n  };\n  ATNSimulator.ERROR = new DFAState(2147483647, new ATNConfigSet());\n  module2.exports = ATNSimulator;\n});\n\n// node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js\nvar require_LexerActionExecutor2 = __commonJS((exports, module2) => {\n  var {hashStuff} = require_Utils2();\n  var {LexerIndexedCustomAction} = require_LexerAction();\n  var LexerActionExecutor = class {\n    constructor(lexerActions) {\n      this.lexerActions = lexerActions === null ? [] : lexerActions;\n      this.cachedHashCode = hashStuff(lexerActions);\n      return this;\n    }\n    fixOffsetBeforeMatch(offset) {\n      let updatedLexerActions = null;\n      for (let i = 0; i < this.lexerActions.length; i++) {\n        if (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n          if (updatedLexerActions === null) {\n            updatedLexerActions = this.lexerActions.concat([]);\n          }\n          updatedLexerActions[i] = new LexerIndexedCustomAction(offset, this.lexerActions[i]);\n        }\n      }\n      if (updatedLexerActions === null) {\n        return this;\n      } else {\n        return new LexerActionExecutor(updatedLexerActions);\n      }\n    }\n    execute(lexer, input, startIndex) {\n      let requiresSeek = false;\n      const stopIndex = input.index;\n      try {\n        for (let i = 0; i < this.lexerActions.length; i++) {\n          let lexerAction = this.lexerActions[i];\n          if (lexerAction instanceof LexerIndexedCustomAction) {\n            const offset = lexerAction.offset;\n            input.seek(startIndex + offset);\n            lexerAction = lexerAction.action;\n            requiresSeek = startIndex + offset !== stopIndex;\n          } else if (lexerAction.isPositionDependent) {\n            input.seek(stopIndex);\n            requiresSeek = false;\n          }\n          lexerAction.execute(lexer);\n        }\n      } finally {\n        if (requiresSeek) {\n          input.seek(stopIndex);\n        }\n      }\n    }\n    hashCode() {\n      return this.cachedHashCode;\n    }\n    updateHashCode(hash) {\n      hash.update(this.cachedHashCode);\n    }\n    equals(other) {\n      if (this === other) {\n        return true;\n      } else if (!(other instanceof LexerActionExecutor)) {\n        return false;\n      } else if (this.cachedHashCode != other.cachedHashCode) {\n        return false;\n      } else if (this.lexerActions.length != other.lexerActions.length) {\n        return false;\n      } else {\n        const numActions = this.lexerActions.length;\n        for (let idx = 0; idx < numActions; ++idx) {\n          if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    static append(lexerActionExecutor, lexerAction) {\n      if (lexerActionExecutor === null) {\n        return new LexerActionExecutor([lexerAction]);\n      }\n      const lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);\n      return new LexerActionExecutor(lexerActions);\n    }\n  };\n  module2.exports = LexerActionExecutor;\n});\n\n// node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js\nvar require_LexerATNSimulator2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var Lexer2 = require_Lexer2();\n  var ATN2 = require_ATN2();\n  var ATNSimulator = require_ATNSimulator2();\n  var {DFAState} = require_DFAState2();\n  var {OrderedATNConfigSet} = require_ATNConfigSet2();\n  var {PredictionContext} = require_PredictionContext2();\n  var {SingletonPredictionContext} = require_PredictionContext2();\n  var {RuleStopState} = require_ATNState2();\n  var {LexerATNConfig} = require_ATNConfig2();\n  var {Transition} = require_Transition2();\n  var LexerActionExecutor = require_LexerActionExecutor2();\n  var {LexerNoViableAltException} = require_Errors();\n  function resetSimState(sim) {\n    sim.index = -1;\n    sim.line = 0;\n    sim.column = -1;\n    sim.dfaState = null;\n  }\n  var SimState = class {\n    constructor() {\n      resetSimState(this);\n    }\n    reset() {\n      resetSimState(this);\n    }\n  };\n  var LexerATNSimulator2 = class extends ATNSimulator {\n    constructor(recog, atn, decisionToDFA, sharedContextCache) {\n      super(atn, sharedContextCache);\n      this.decisionToDFA = decisionToDFA;\n      this.recog = recog;\n      this.startIndex = -1;\n      this.line = 1;\n      this.column = 0;\n      this.mode = Lexer2.DEFAULT_MODE;\n      this.prevAccept = new SimState();\n    }\n    copyState(simulator) {\n      this.column = simulator.column;\n      this.line = simulator.line;\n      this.mode = simulator.mode;\n      this.startIndex = simulator.startIndex;\n    }\n    match(input, mode) {\n      this.match_calls += 1;\n      this.mode = mode;\n      const mark = input.mark();\n      try {\n        this.startIndex = input.index;\n        this.prevAccept.reset();\n        const dfa = this.decisionToDFA[mode];\n        if (dfa.s0 === null) {\n          return this.matchATN(input);\n        } else {\n          return this.execATN(input, dfa.s0);\n        }\n      } finally {\n        input.release(mark);\n      }\n    }\n    reset() {\n      this.prevAccept.reset();\n      this.startIndex = -1;\n      this.line = 1;\n      this.column = 0;\n      this.mode = Lexer2.DEFAULT_MODE;\n    }\n    matchATN(input) {\n      const startState = this.atn.modeToStartState[this.mode];\n      if (LexerATNSimulator2.debug) {\n        console.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n      }\n      const old_mode = this.mode;\n      const s0_closure = this.computeStartState(input, startState);\n      const suppressEdge = s0_closure.hasSemanticContext;\n      s0_closure.hasSemanticContext = false;\n      const next = this.addDFAState(s0_closure);\n      if (!suppressEdge) {\n        this.decisionToDFA[this.mode].s0 = next;\n      }\n      const predict = this.execATN(input, next);\n      if (LexerATNSimulator2.debug) {\n        console.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n      }\n      return predict;\n    }\n    execATN(input, ds0) {\n      if (LexerATNSimulator2.debug) {\n        console.log(\"start state closure=\" + ds0.configs);\n      }\n      if (ds0.isAcceptState) {\n        this.captureSimState(this.prevAccept, input, ds0);\n      }\n      let t = input.LA(1);\n      let s = ds0;\n      while (true) {\n        if (LexerATNSimulator2.debug) {\n          console.log(\"execATN loop starting closure: \" + s.configs);\n        }\n        let target = this.getExistingTargetState(s, t);\n        if (target === null) {\n          target = this.computeTargetState(input, s, t);\n        }\n        if (target === ATNSimulator.ERROR) {\n          break;\n        }\n        if (t !== Token2.EOF) {\n          this.consume(input);\n        }\n        if (target.isAcceptState) {\n          this.captureSimState(this.prevAccept, input, target);\n          if (t === Token2.EOF) {\n            break;\n          }\n        }\n        t = input.LA(1);\n        s = target;\n      }\n      return this.failOrAccept(this.prevAccept, input, s.configs, t);\n    }\n    getExistingTargetState(s, t) {\n      if (s.edges === null || t < LexerATNSimulator2.MIN_DFA_EDGE || t > LexerATNSimulator2.MAX_DFA_EDGE) {\n        return null;\n      }\n      let target = s.edges[t - LexerATNSimulator2.MIN_DFA_EDGE];\n      if (target === void 0) {\n        target = null;\n      }\n      if (LexerATNSimulator2.debug && target !== null) {\n        console.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n      }\n      return target;\n    }\n    computeTargetState(input, s, t) {\n      const reach = new OrderedATNConfigSet();\n      this.getReachableConfigSet(input, s.configs, reach, t);\n      if (reach.items.length === 0) {\n        if (!reach.hasSemanticContext) {\n          this.addDFAEdge(s, t, ATNSimulator.ERROR);\n        }\n        return ATNSimulator.ERROR;\n      }\n      return this.addDFAEdge(s, t, null, reach);\n    }\n    failOrAccept(prevAccept, input, reach, t) {\n      if (this.prevAccept.dfaState !== null) {\n        const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n        this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.column);\n        return prevAccept.dfaState.prediction;\n      } else {\n        if (t === Token2.EOF && input.index === this.startIndex) {\n          return Token2.EOF;\n        }\n        throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n      }\n    }\n    getReachableConfigSet(input, closure, reach, t) {\n      let skipAlt = ATN2.INVALID_ALT_NUMBER;\n      for (let i = 0; i < closure.items.length; i++) {\n        const cfg = closure.items[i];\n        const currentAltReachedAcceptState = cfg.alt === skipAlt;\n        if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n          continue;\n        }\n        if (LexerATNSimulator2.debug) {\n          console.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg.toString(this.recog, true));\n        }\n        for (let j = 0; j < cfg.state.transitions.length; j++) {\n          const trans = cfg.state.transitions[j];\n          const target = this.getReachableTarget(trans, t);\n          if (target !== null) {\n            let lexerActionExecutor = cfg.lexerActionExecutor;\n            if (lexerActionExecutor !== null) {\n              lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n            }\n            const treatEofAsEpsilon = t === Token2.EOF;\n            const config = new LexerATNConfig({state: target, lexerActionExecutor}, cfg);\n            if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n              skipAlt = cfg.alt;\n            }\n          }\n        }\n      }\n    }\n    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {\n      if (LexerATNSimulator2.debug) {\n        console.log(\"ACTION %s\\n\", lexerActionExecutor);\n      }\n      input.seek(index);\n      this.line = line;\n      this.column = charPos;\n      if (lexerActionExecutor !== null && this.recog !== null) {\n        lexerActionExecutor.execute(this.recog, input, startIndex);\n      }\n    }\n    getReachableTarget(trans, t) {\n      if (trans.matches(t, 0, Lexer2.MAX_CHAR_VALUE)) {\n        return trans.target;\n      } else {\n        return null;\n      }\n    }\n    computeStartState(input, p) {\n      const initialContext = PredictionContext.EMPTY;\n      const configs = new OrderedATNConfigSet();\n      for (let i = 0; i < p.transitions.length; i++) {\n        const target = p.transitions[i].target;\n        const cfg = new LexerATNConfig({state: target, alt: i + 1, context: initialContext}, null);\n        this.closure(input, cfg, configs, false, false, false);\n      }\n      return configs;\n    }\n    closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n      let cfg = null;\n      if (LexerATNSimulator2.debug) {\n        console.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n      }\n      if (config.state instanceof RuleStopState) {\n        if (LexerATNSimulator2.debug) {\n          if (this.recog !== null) {\n            console.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n          } else {\n            console.log(\"closure at rule stop %s\\n\", config);\n          }\n        }\n        if (config.context === null || config.context.hasEmptyPath()) {\n          if (config.context === null || config.context.isEmpty()) {\n            configs.add(config);\n            return true;\n          } else {\n            configs.add(new LexerATNConfig({state: config.state, context: PredictionContext.EMPTY}, config));\n            currentAltReachedAcceptState = true;\n          }\n        }\n        if (config.context !== null && !config.context.isEmpty()) {\n          for (let i = 0; i < config.context.length; i++) {\n            if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n              const newContext = config.context.getParent(i);\n              const returnState = this.atn.states[config.context.getReturnState(i)];\n              cfg = new LexerATNConfig({state: returnState, context: newContext}, config);\n              currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n            }\n          }\n        }\n        return currentAltReachedAcceptState;\n      }\n      if (!config.state.epsilonOnlyTransitions) {\n        if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n          configs.add(config);\n        }\n      }\n      for (let j = 0; j < config.state.transitions.length; j++) {\n        const trans = config.state.transitions[j];\n        cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n        if (cfg !== null) {\n          currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n        }\n      }\n      return currentAltReachedAcceptState;\n    }\n    getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon) {\n      let cfg = null;\n      if (trans.serializationType === Transition.RULE) {\n        const newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n        cfg = new LexerATNConfig({state: trans.target, context: newContext}, config);\n      } else if (trans.serializationType === Transition.PRECEDENCE) {\n        throw \"Precedence predicates are not supported in lexers.\";\n      } else if (trans.serializationType === Transition.PREDICATE) {\n        if (LexerATNSimulator2.debug) {\n          console.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n        }\n        configs.hasSemanticContext = true;\n        if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n          cfg = new LexerATNConfig({state: trans.target}, config);\n        }\n      } else if (trans.serializationType === Transition.ACTION) {\n        if (config.context === null || config.context.hasEmptyPath()) {\n          const lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[trans.actionIndex]);\n          cfg = new LexerATNConfig({state: trans.target, lexerActionExecutor}, config);\n        } else {\n          cfg = new LexerATNConfig({state: trans.target}, config);\n        }\n      } else if (trans.serializationType === Transition.EPSILON) {\n        cfg = new LexerATNConfig({state: trans.target}, config);\n      } else if (trans.serializationType === Transition.ATOM || trans.serializationType === Transition.RANGE || trans.serializationType === Transition.SET) {\n        if (treatEofAsEpsilon) {\n          if (trans.matches(Token2.EOF, 0, Lexer2.MAX_CHAR_VALUE)) {\n            cfg = new LexerATNConfig({state: trans.target}, config);\n          }\n        }\n      }\n      return cfg;\n    }\n    evaluatePredicate(input, ruleIndex, predIndex, speculative) {\n      if (this.recog === null) {\n        return true;\n      }\n      if (!speculative) {\n        return this.recog.sempred(null, ruleIndex, predIndex);\n      }\n      const savedcolumn = this.column;\n      const savedLine = this.line;\n      const index = input.index;\n      const marker = input.mark();\n      try {\n        this.consume(input);\n        return this.recog.sempred(null, ruleIndex, predIndex);\n      } finally {\n        this.column = savedcolumn;\n        this.line = savedLine;\n        input.seek(index);\n        input.release(marker);\n      }\n    }\n    captureSimState(settings, input, dfaState) {\n      settings.index = input.index;\n      settings.line = this.line;\n      settings.column = this.column;\n      settings.dfaState = dfaState;\n    }\n    addDFAEdge(from_, tk, to, cfgs) {\n      if (to === void 0) {\n        to = null;\n      }\n      if (cfgs === void 0) {\n        cfgs = null;\n      }\n      if (to === null && cfgs !== null) {\n        const suppressEdge = cfgs.hasSemanticContext;\n        cfgs.hasSemanticContext = false;\n        to = this.addDFAState(cfgs);\n        if (suppressEdge) {\n          return to;\n        }\n      }\n      if (tk < LexerATNSimulator2.MIN_DFA_EDGE || tk > LexerATNSimulator2.MAX_DFA_EDGE) {\n        return to;\n      }\n      if (LexerATNSimulator2.debug) {\n        console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n      }\n      if (from_.edges === null) {\n        from_.edges = [];\n      }\n      from_.edges[tk - LexerATNSimulator2.MIN_DFA_EDGE] = to;\n      return to;\n    }\n    addDFAState(configs) {\n      const proposed = new DFAState(null, configs);\n      let firstConfigWithRuleStopState = null;\n      for (let i = 0; i < configs.items.length; i++) {\n        const cfg = configs.items[i];\n        if (cfg.state instanceof RuleStopState) {\n          firstConfigWithRuleStopState = cfg;\n          break;\n        }\n      }\n      if (firstConfigWithRuleStopState !== null) {\n        proposed.isAcceptState = true;\n        proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n        proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n      }\n      const dfa = this.decisionToDFA[this.mode];\n      const existing = dfa.states.get(proposed);\n      if (existing !== null) {\n        return existing;\n      }\n      const newState = proposed;\n      newState.stateNumber = dfa.states.length;\n      configs.setReadonly(true);\n      newState.configs = configs;\n      dfa.states.add(newState);\n      return newState;\n    }\n    getDFA(mode) {\n      return this.decisionToDFA[mode];\n    }\n    getText(input) {\n      return input.getText(this.startIndex, input.index - 1);\n    }\n    consume(input) {\n      const curChar = input.LA(1);\n      if (curChar === \"\\n\".charCodeAt(0)) {\n        this.line += 1;\n        this.column = 0;\n      } else {\n        this.column += 1;\n      }\n      input.consume();\n    }\n    getTokenName(tt) {\n      if (tt === -1) {\n        return \"EOF\";\n      } else {\n        return \"'\" + String.fromCharCode(tt) + \"'\";\n      }\n    }\n  };\n  LexerATNSimulator2.debug = false;\n  LexerATNSimulator2.dfa_debug = false;\n  LexerATNSimulator2.MIN_DFA_EDGE = 0;\n  LexerATNSimulator2.MAX_DFA_EDGE = 127;\n  LexerATNSimulator2.match_calls = 0;\n  module2.exports = LexerATNSimulator2;\n});\n\n// node_modules/antlr4/src/antlr4/atn/PredictionMode.js\nvar require_PredictionMode2 = __commonJS((exports, module2) => {\n  var {Map: Map2, BitSet, AltDict, hashStuff} = require_Utils2();\n  var ATN2 = require_ATN2();\n  var {RuleStopState} = require_ATNState2();\n  var {ATNConfigSet} = require_ATNConfigSet2();\n  var {ATNConfig} = require_ATNConfig2();\n  var {SemanticContext} = require_SemanticContext2();\n  var PredictionMode = {\n    SLL: 0,\n    LL: 1,\n    LL_EXACT_AMBIG_DETECTION: 2,\n    hasSLLConflictTerminatingPrediction: function(mode, configs) {\n      if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return true;\n      }\n      if (mode === PredictionMode.SLL) {\n        if (configs.hasSemanticContext) {\n          const dup = new ATNConfigSet();\n          for (let i = 0; i < configs.items.length; i++) {\n            let c = configs.items[i];\n            c = new ATNConfig({semanticContext: SemanticContext.NONE}, c);\n            dup.add(c);\n          }\n          configs = dup;\n        }\n      }\n      const altsets = PredictionMode.getConflictingAltSubsets(configs);\n      return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n    },\n    hasConfigInRuleStopState: function(configs) {\n      for (let i = 0; i < configs.items.length; i++) {\n        const c = configs.items[i];\n        if (c.state instanceof RuleStopState) {\n          return true;\n        }\n      }\n      return false;\n    },\n    allConfigsInRuleStopStates: function(configs) {\n      for (let i = 0; i < configs.items.length; i++) {\n        const c = configs.items[i];\n        if (!(c.state instanceof RuleStopState)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    resolvesToJustOneViableAlt: function(altsets) {\n      return PredictionMode.getSingleViableAlt(altsets);\n    },\n    allSubsetsConflict: function(altsets) {\n      return !PredictionMode.hasNonConflictingAltSet(altsets);\n    },\n    hasNonConflictingAltSet: function(altsets) {\n      for (let i = 0; i < altsets.length; i++) {\n        const alts = altsets[i];\n        if (alts.length === 1) {\n          return true;\n        }\n      }\n      return false;\n    },\n    hasConflictingAltSet: function(altsets) {\n      for (let i = 0; i < altsets.length; i++) {\n        const alts = altsets[i];\n        if (alts.length > 1) {\n          return true;\n        }\n      }\n      return false;\n    },\n    allSubsetsEqual: function(altsets) {\n      let first = null;\n      for (let i = 0; i < altsets.length; i++) {\n        const alts = altsets[i];\n        if (first === null) {\n          first = alts;\n        } else if (alts !== first) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getUniqueAlt: function(altsets) {\n      const all = PredictionMode.getAlts(altsets);\n      if (all.length === 1) {\n        return all.minValue();\n      } else {\n        return ATN2.INVALID_ALT_NUMBER;\n      }\n    },\n    getAlts: function(altsets) {\n      const all = new BitSet();\n      altsets.map(function(alts) {\n        all.or(alts);\n      });\n      return all;\n    },\n    getConflictingAltSubsets: function(configs) {\n      const configToAlts = new Map2();\n      configToAlts.hashFunction = function(cfg) {\n        hashStuff(cfg.state.stateNumber, cfg.context);\n      };\n      configToAlts.equalsFunction = function(c1, c2) {\n        return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);\n      };\n      configs.items.map(function(cfg) {\n        let alts = configToAlts.get(cfg);\n        if (alts === null) {\n          alts = new BitSet();\n          configToAlts.put(cfg, alts);\n        }\n        alts.add(cfg.alt);\n      });\n      return configToAlts.getValues();\n    },\n    getStateToAltMap: function(configs) {\n      const m = new AltDict();\n      configs.items.map(function(c) {\n        let alts = m.get(c.state);\n        if (alts === null) {\n          alts = new BitSet();\n          m.put(c.state, alts);\n        }\n        alts.add(c.alt);\n      });\n      return m;\n    },\n    hasStateAssociatedWithOneAlt: function(configs) {\n      const values = PredictionMode.getStateToAltMap(configs).values();\n      for (let i = 0; i < values.length; i++) {\n        if (values[i].length === 1) {\n          return true;\n        }\n      }\n      return false;\n    },\n    getSingleViableAlt: function(altsets) {\n      let result = null;\n      for (let i = 0; i < altsets.length; i++) {\n        const alts = altsets[i];\n        const minAlt = alts.minValue();\n        if (result === null) {\n          result = minAlt;\n        } else if (result !== minAlt) {\n          return ATN2.INVALID_ALT_NUMBER;\n        }\n      }\n      return result;\n    }\n  };\n  module2.exports = PredictionMode;\n});\n\n// node_modules/antlr4/src/antlr4/ParserRuleContext.js\nvar require_ParserRuleContext2 = __commonJS((exports, module2) => {\n  var RuleContext = require_RuleContext2();\n  var Tree = require_Tree();\n  var INVALID_INTERVAL = Tree.INVALID_INTERVAL;\n  var TerminalNode = Tree.TerminalNode;\n  var TerminalNodeImpl = Tree.TerminalNodeImpl;\n  var ErrorNodeImpl = Tree.ErrorNodeImpl;\n  var Interval = require_IntervalSet2().Interval;\n  var ParserRuleContext2 = class extends RuleContext {\n    constructor(parent, invokingStateNumber) {\n      parent = parent || null;\n      invokingStateNumber = invokingStateNumber || null;\n      super(parent, invokingStateNumber);\n      this.ruleIndex = -1;\n      this.children = null;\n      this.start = null;\n      this.stop = null;\n      this.exception = null;\n    }\n    copyFrom(ctx) {\n      this.parentCtx = ctx.parentCtx;\n      this.invokingState = ctx.invokingState;\n      this.children = null;\n      this.start = ctx.start;\n      this.stop = ctx.stop;\n      if (ctx.children) {\n        this.children = [];\n        ctx.children.map(function(child) {\n          if (child instanceof ErrorNodeImpl) {\n            this.children.push(child);\n            child.parentCtx = this;\n          }\n        }, this);\n      }\n    }\n    enterRule(listener) {\n    }\n    exitRule(listener) {\n    }\n    addChild(child) {\n      if (this.children === null) {\n        this.children = [];\n      }\n      this.children.push(child);\n      return child;\n    }\n    removeLastChild() {\n      if (this.children !== null) {\n        this.children.pop();\n      }\n    }\n    addTokenNode(token) {\n      const node = new TerminalNodeImpl(token);\n      this.addChild(node);\n      node.parentCtx = this;\n      return node;\n    }\n    addErrorNode(badToken) {\n      const node = new ErrorNodeImpl(badToken);\n      this.addChild(node);\n      node.parentCtx = this;\n      return node;\n    }\n    getChild(i, type) {\n      type = type || null;\n      if (this.children === null || i < 0 || i >= this.children.length) {\n        return null;\n      }\n      if (type === null) {\n        return this.children[i];\n      } else {\n        for (let j = 0; j < this.children.length; j++) {\n          const child = this.children[j];\n          if (child instanceof type) {\n            if (i === 0) {\n              return child;\n            } else {\n              i -= 1;\n            }\n          }\n        }\n        return null;\n      }\n    }\n    getToken(ttype, i) {\n      if (this.children === null || i < 0 || i >= this.children.length) {\n        return null;\n      }\n      for (let j = 0; j < this.children.length; j++) {\n        const child = this.children[j];\n        if (child instanceof TerminalNode) {\n          if (child.symbol.type === ttype) {\n            if (i === 0) {\n              return child;\n            } else {\n              i -= 1;\n            }\n          }\n        }\n      }\n      return null;\n    }\n    getTokens(ttype) {\n      if (this.children === null) {\n        return [];\n      } else {\n        const tokens2 = [];\n        for (let j = 0; j < this.children.length; j++) {\n          const child = this.children[j];\n          if (child instanceof TerminalNode) {\n            if (child.symbol.type === ttype) {\n              tokens2.push(child);\n            }\n          }\n        }\n        return tokens2;\n      }\n    }\n    getTypedRuleContext(ctxType, i) {\n      return this.getChild(i, ctxType);\n    }\n    getTypedRuleContexts(ctxType) {\n      if (this.children === null) {\n        return [];\n      } else {\n        const contexts = [];\n        for (let j = 0; j < this.children.length; j++) {\n          const child = this.children[j];\n          if (child instanceof ctxType) {\n            contexts.push(child);\n          }\n        }\n        return contexts;\n      }\n    }\n    getChildCount() {\n      if (this.children === null) {\n        return 0;\n      } else {\n        return this.children.length;\n      }\n    }\n    getSourceInterval() {\n      if (this.start === null || this.stop === null) {\n        return INVALID_INTERVAL;\n      } else {\n        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n      }\n    }\n  };\n  RuleContext.EMPTY = new ParserRuleContext2();\n  module2.exports = ParserRuleContext2;\n});\n\n// node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js\nvar require_ParserATNSimulator2 = __commonJS((exports, module2) => {\n  var Utils3 = require_Utils2();\n  var {Set: Set2, BitSet, DoubleDict} = Utils3;\n  var ATN2 = require_ATN2();\n  var {ATNState, RuleStopState} = require_ATNState2();\n  var {ATNConfig} = require_ATNConfig2();\n  var {ATNConfigSet} = require_ATNConfigSet2();\n  var {Token: Token2} = require_Token2();\n  var {DFAState, PredPrediction} = require_DFAState2();\n  var ATNSimulator = require_ATNSimulator2();\n  var PredictionMode = require_PredictionMode2();\n  var RuleContext = require_RuleContext2();\n  var ParserRuleContext2 = require_ParserRuleContext2();\n  var {SemanticContext} = require_SemanticContext2();\n  var {PredictionContext} = require_PredictionContext2();\n  var {Interval} = require_IntervalSet2();\n  var {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = require_Transition2();\n  var {NoViableAltException: NoViableAltException2} = require_Errors();\n  var {SingletonPredictionContext, predictionContextFromRuleContext} = require_PredictionContext2();\n  var ParserATNSimulator2 = class extends ATNSimulator {\n    constructor(parser, atn, decisionToDFA, sharedContextCache) {\n      super(atn, sharedContextCache);\n      this.parser = parser;\n      this.decisionToDFA = decisionToDFA;\n      this.predictionMode = PredictionMode.LL;\n      this._input = null;\n      this._startIndex = 0;\n      this._outerContext = null;\n      this._dfa = null;\n      this.mergeCache = null;\n      this.debug = false;\n      this.debug_closure = false;\n      this.debug_add = false;\n      this.debug_list_atn_decisions = false;\n      this.dfa_debug = false;\n      this.retry_debug = false;\n    }\n    reset() {\n    }\n    adaptivePredict(input, decision, outerContext) {\n      if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"adaptivePredict decision \" + decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n      }\n      this._input = input;\n      this._startIndex = input.index;\n      this._outerContext = outerContext;\n      const dfa = this.decisionToDFA[decision];\n      this._dfa = dfa;\n      const m = input.mark();\n      const index = input.index;\n      try {\n        let s0;\n        if (dfa.precedenceDfa) {\n          s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n        } else {\n          s0 = dfa.s0;\n        }\n        if (s0 === null) {\n          if (outerContext === null) {\n            outerContext = RuleContext.EMPTY;\n          }\n          if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"predictATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n          }\n          const fullCtx = false;\n          let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n          if (dfa.precedenceDfa) {\n            dfa.s0.configs = s0_closure;\n            s0_closure = this.applyPrecedenceFilter(s0_closure);\n            s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n            dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n          } else {\n            s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n            dfa.s0 = s0;\n          }\n        }\n        const alt = this.execATN(dfa, s0, input, index, outerContext);\n        if (this.debug) {\n          console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n        }\n        return alt;\n      } finally {\n        this._dfa = null;\n        this.mergeCache = null;\n        input.seek(index);\n        input.release(m);\n      }\n    }\n    execATN(dfa, s0, input, startIndex, outerContext) {\n      if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n      }\n      let alt;\n      let previousD = s0;\n      if (this.debug) {\n        console.log(\"s0 = \" + s0);\n      }\n      let t = input.LA(1);\n      while (true) {\n        let D = this.getExistingTargetState(previousD, t);\n        if (D === null) {\n          D = this.computeTargetState(dfa, previousD, t);\n        }\n        if (D === ATNSimulator.ERROR) {\n          const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n          input.seek(startIndex);\n          alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n          if (alt !== ATN2.INVALID_ALT_NUMBER) {\n            return alt;\n          } else {\n            throw e;\n          }\n        }\n        if (D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n          let conflictingAlts = null;\n          if (D.predicates !== null) {\n            if (this.debug) {\n              console.log(\"DFA state has preds in DFA sim LL failover\");\n            }\n            const conflictIndex = input.index;\n            if (conflictIndex !== startIndex) {\n              input.seek(startIndex);\n            }\n            conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n            if (conflictingAlts.length === 1) {\n              if (this.debug) {\n                console.log(\"Full LL avoided\");\n              }\n              return conflictingAlts.minValue();\n            }\n            if (conflictIndex !== startIndex) {\n              input.seek(conflictIndex);\n            }\n          }\n          if (this.dfa_debug) {\n            console.log(\"ctx sensitive state \" + outerContext + \" in \" + D);\n          }\n          const fullCtx = true;\n          const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n          this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n          alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n          return alt;\n        }\n        if (D.isAcceptState) {\n          if (D.predicates === null) {\n            return D.prediction;\n          }\n          const stopIndex = input.index;\n          input.seek(startIndex);\n          const alts = this.evalSemanticContext(D.predicates, outerContext, true);\n          if (alts.length === 0) {\n            throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n          } else if (alts.length === 1) {\n            return alts.minValue();\n          } else {\n            this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n            return alts.minValue();\n          }\n        }\n        previousD = D;\n        if (t !== Token2.EOF) {\n          input.consume();\n          t = input.LA(1);\n        }\n      }\n    }\n    getExistingTargetState(previousD, t) {\n      const edges = previousD.edges;\n      if (edges === null) {\n        return null;\n      } else {\n        return edges[t + 1] || null;\n      }\n    }\n    computeTargetState(dfa, previousD, t) {\n      const reach = this.computeReachSet(previousD.configs, t, false);\n      if (reach === null) {\n        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n        return ATNSimulator.ERROR;\n      }\n      let D = new DFAState(null, reach);\n      const predictedAlt = this.getUniqueAlt(reach);\n      if (this.debug) {\n        const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        console.log(\"SLL altSubSets=\" + Utils3.arrayToString(altSubSets) + \", previous=\" + previousD.configs + \", configs=\" + reach + \", predict=\" + predictedAlt + \", allSubsetsConflict=\" + PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" + this.getConflictingAlts(reach));\n      }\n      if (predictedAlt !== ATN2.INVALID_ALT_NUMBER) {\n        D.isAcceptState = true;\n        D.configs.uniqueAlt = predictedAlt;\n        D.prediction = predictedAlt;\n      } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n        D.configs.conflictingAlts = this.getConflictingAlts(reach);\n        D.requiresFullContext = true;\n        D.isAcceptState = true;\n        D.prediction = D.configs.conflictingAlts.minValue();\n      }\n      if (D.isAcceptState && D.configs.hasSemanticContext) {\n        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n        if (D.predicates !== null) {\n          D.prediction = ATN2.INVALID_ALT_NUMBER;\n        }\n      }\n      D = this.addDFAEdge(dfa, previousD, t, D);\n      return D;\n    }\n    predicateDFAState(dfaState, decisionState) {\n      const nalts = decisionState.transitions.length;\n      const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n      const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n      if (altToPred !== null) {\n        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n        dfaState.prediction = ATN2.INVALID_ALT_NUMBER;\n      } else {\n        dfaState.prediction = altsToCollectPredsFrom.minValue();\n      }\n    }\n    execATNWithFullContext(dfa, D, s0, input, startIndex, outerContext) {\n      if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATNWithFullContext \" + s0);\n      }\n      const fullCtx = true;\n      let foundExactAmbig = false;\n      let reach;\n      let previous = s0;\n      input.seek(startIndex);\n      let t = input.LA(1);\n      let predictedAlt = -1;\n      while (true) {\n        reach = this.computeReachSet(previous, t, fullCtx);\n        if (reach === null) {\n          const e = this.noViableAlt(input, outerContext, previous, startIndex);\n          input.seek(startIndex);\n          const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n          if (alt !== ATN2.INVALID_ALT_NUMBER) {\n            return alt;\n          } else {\n            throw e;\n          }\n        }\n        const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        if (this.debug) {\n          console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" + PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" + PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n        }\n        reach.uniqueAlt = this.getUniqueAlt(reach);\n        if (reach.uniqueAlt !== ATN2.INVALID_ALT_NUMBER) {\n          predictedAlt = reach.uniqueAlt;\n          break;\n        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n          predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n          if (predictedAlt !== ATN2.INVALID_ALT_NUMBER) {\n            break;\n          }\n        } else {\n          if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n            foundExactAmbig = true;\n            predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n            break;\n          }\n        }\n        previous = reach;\n        if (t !== Token2.EOF) {\n          input.consume();\n          t = input.LA(1);\n        }\n      }\n      if (reach.uniqueAlt !== ATN2.INVALID_ALT_NUMBER) {\n        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n        return predictedAlt;\n      }\n      this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n      return predictedAlt;\n    }\n    computeReachSet(closure, t, fullCtx) {\n      if (this.debug) {\n        console.log(\"in computeReachSet, starting closure: \" + closure);\n      }\n      if (this.mergeCache === null) {\n        this.mergeCache = new DoubleDict();\n      }\n      const intermediate = new ATNConfigSet(fullCtx);\n      let skippedStopStates = null;\n      for (let i = 0; i < closure.items.length; i++) {\n        const c = closure.items[i];\n        if (this.debug) {\n          console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n        }\n        if (c.state instanceof RuleStopState) {\n          if (fullCtx || t === Token2.EOF) {\n            if (skippedStopStates === null) {\n              skippedStopStates = [];\n            }\n            skippedStopStates.push(c);\n            if (this.debug_add) {\n              console.log(\"added \" + c + \" to skippedStopStates\");\n            }\n          }\n          continue;\n        }\n        for (let j = 0; j < c.state.transitions.length; j++) {\n          const trans = c.state.transitions[j];\n          const target = this.getReachableTarget(trans, t);\n          if (target !== null) {\n            const cfg = new ATNConfig({state: target}, c);\n            intermediate.add(cfg, this.mergeCache);\n            if (this.debug_add) {\n              console.log(\"added \" + cfg + \" to intermediate\");\n            }\n          }\n        }\n      }\n      let reach = null;\n      if (skippedStopStates === null && t !== Token2.EOF) {\n        if (intermediate.items.length === 1) {\n          reach = intermediate;\n        } else if (this.getUniqueAlt(intermediate) !== ATN2.INVALID_ALT_NUMBER) {\n          reach = intermediate;\n        }\n      }\n      if (reach === null) {\n        reach = new ATNConfigSet(fullCtx);\n        const closureBusy = new Set2();\n        const treatEofAsEpsilon = t === Token2.EOF;\n        for (let k = 0; k < intermediate.items.length; k++) {\n          this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n        }\n      }\n      if (t === Token2.EOF) {\n        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n      }\n      if (skippedStopStates !== null && (!fullCtx || !PredictionMode.hasConfigInRuleStopState(reach))) {\n        for (let l = 0; l < skippedStopStates.length; l++) {\n          reach.add(skippedStopStates[l], this.mergeCache);\n        }\n      }\n      if (reach.items.length === 0) {\n        return null;\n      } else {\n        return reach;\n      }\n    }\n    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {\n      if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return configs;\n      }\n      const result = new ATNConfigSet(configs.fullCtx);\n      for (let i = 0; i < configs.items.length; i++) {\n        const config = configs.items[i];\n        if (config.state instanceof RuleStopState) {\n          result.add(config, this.mergeCache);\n          continue;\n        }\n        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n          const nextTokens = this.atn.nextTokens(config.state);\n          if (nextTokens.contains(Token2.EPSILON)) {\n            const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n            result.add(new ATNConfig({state: endOfRuleState}, config), this.mergeCache);\n          }\n        }\n      }\n      return result;\n    }\n    computeStartState(p, ctx, fullCtx) {\n      const initialContext = predictionContextFromRuleContext(this.atn, ctx);\n      const configs = new ATNConfigSet(fullCtx);\n      for (let i = 0; i < p.transitions.length; i++) {\n        const target = p.transitions[i].target;\n        const c = new ATNConfig({state: target, alt: i + 1, context: initialContext}, null);\n        const closureBusy = new Set2();\n        this.closure(c, configs, closureBusy, true, fullCtx, false);\n      }\n      return configs;\n    }\n    applyPrecedenceFilter(configs) {\n      let config;\n      const statesFromAlt1 = [];\n      const configSet = new ATNConfigSet(configs.fullCtx);\n      for (let i = 0; i < configs.items.length; i++) {\n        config = configs.items[i];\n        if (config.alt !== 1) {\n          continue;\n        }\n        const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n        if (updatedContext === null) {\n          continue;\n        }\n        statesFromAlt1[config.state.stateNumber] = config.context;\n        if (updatedContext !== config.semanticContext) {\n          configSet.add(new ATNConfig({semanticContext: updatedContext}, config), this.mergeCache);\n        } else {\n          configSet.add(config, this.mergeCache);\n        }\n      }\n      for (let i = 0; i < configs.items.length; i++) {\n        config = configs.items[i];\n        if (config.alt === 1) {\n          continue;\n        }\n        if (!config.precedenceFilterSuppressed) {\n          const context = statesFromAlt1[config.state.stateNumber] || null;\n          if (context !== null && context.equals(config.context)) {\n            continue;\n          }\n        }\n        configSet.add(config, this.mergeCache);\n      }\n      return configSet;\n    }\n    getReachableTarget(trans, ttype) {\n      if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n        return trans.target;\n      } else {\n        return null;\n      }\n    }\n    getPredsForAmbigAlts(ambigAlts, configs, nalts) {\n      let altToPred = [];\n      for (let i = 0; i < configs.items.length; i++) {\n        const c = configs.items[i];\n        if (ambigAlts.contains(c.alt)) {\n          altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n        }\n      }\n      let nPredAlts = 0;\n      for (let i = 1; i < nalts + 1; i++) {\n        const pred = altToPred[i] || null;\n        if (pred === null) {\n          altToPred[i] = SemanticContext.NONE;\n        } else if (pred !== SemanticContext.NONE) {\n          nPredAlts += 1;\n        }\n      }\n      if (nPredAlts === 0) {\n        altToPred = null;\n      }\n      if (this.debug) {\n        console.log(\"getPredsForAmbigAlts result \" + Utils3.arrayToString(altToPred));\n      }\n      return altToPred;\n    }\n    getPredicatePredictions(ambigAlts, altToPred) {\n      const pairs = [];\n      let containsPredicate = false;\n      for (let i = 1; i < altToPred.length; i++) {\n        const pred = altToPred[i];\n        if (ambigAlts !== null && ambigAlts.contains(i)) {\n          pairs.push(new PredPrediction(pred, i));\n        }\n        if (pred !== SemanticContext.NONE) {\n          containsPredicate = true;\n        }\n      }\n      if (!containsPredicate) {\n        return null;\n      }\n      return pairs;\n    }\n    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {\n      const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n      const semValidConfigs = cfgs[0];\n      const semInvalidConfigs = cfgs[1];\n      let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n      if (alt !== ATN2.INVALID_ALT_NUMBER) {\n        return alt;\n      }\n      if (semInvalidConfigs.items.length > 0) {\n        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n        if (alt !== ATN2.INVALID_ALT_NUMBER) {\n          return alt;\n        }\n      }\n      return ATN2.INVALID_ALT_NUMBER;\n    }\n    getAltThatFinishedDecisionEntryRule(configs) {\n      const alts = [];\n      for (let i = 0; i < configs.items.length; i++) {\n        const c = configs.items[i];\n        if (c.reachesIntoOuterContext > 0 || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {\n          if (alts.indexOf(c.alt) < 0) {\n            alts.push(c.alt);\n          }\n        }\n      }\n      if (alts.length === 0) {\n        return ATN2.INVALID_ALT_NUMBER;\n      } else {\n        return Math.min.apply(null, alts);\n      }\n    }\n    splitAccordingToSemanticValidity(configs, outerContext) {\n      const succeeded = new ATNConfigSet(configs.fullCtx);\n      const failed = new ATNConfigSet(configs.fullCtx);\n      for (let i = 0; i < configs.items.length; i++) {\n        const c = configs.items[i];\n        if (c.semanticContext !== SemanticContext.NONE) {\n          const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n          if (predicateEvaluationResult) {\n            succeeded.add(c);\n          } else {\n            failed.add(c);\n          }\n        } else {\n          succeeded.add(c);\n        }\n      }\n      return [succeeded, failed];\n    }\n    evalSemanticContext(predPredictions, outerContext, complete) {\n      const predictions = new BitSet();\n      for (let i = 0; i < predPredictions.length; i++) {\n        const pair = predPredictions[i];\n        if (pair.pred === SemanticContext.NONE) {\n          predictions.add(pair.alt);\n          if (!complete) {\n            break;\n          }\n          continue;\n        }\n        const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n        if (this.debug || this.dfa_debug) {\n          console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n        }\n        if (predicateEvaluationResult) {\n          if (this.debug || this.dfa_debug) {\n            console.log(\"PREDICT \" + pair.alt);\n          }\n          predictions.add(pair.alt);\n          if (!complete) {\n            break;\n          }\n        }\n      }\n      return predictions;\n    }\n    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n      const initialDepth = 0;\n      this.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEofAsEpsilon);\n    }\n    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n      if (this.debug || this.debug_closure) {\n        console.log(\"closure(\" + config.toString(this.parser, true) + \")\");\n        if (config.reachesIntoOuterContext > 50) {\n          throw \"problem\";\n        }\n      }\n      if (config.state instanceof RuleStopState) {\n        if (!config.context.isEmpty()) {\n          for (let i = 0; i < config.context.length; i++) {\n            if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n              if (fullCtx) {\n                configs.add(new ATNConfig({state: config.state, context: PredictionContext.EMPTY}, config), this.mergeCache);\n                continue;\n              } else {\n                if (this.debug) {\n                  console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                }\n                this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n              }\n              continue;\n            }\n            const returnState = this.atn.states[config.context.getReturnState(i)];\n            const newContext = config.context.getParent(i);\n            const parms = {state: returnState, alt: config.alt, context: newContext, semanticContext: config.semanticContext};\n            const c = new ATNConfig(parms, null);\n            c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n            this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n          }\n          return;\n        } else if (fullCtx) {\n          configs.add(config, this.mergeCache);\n          return;\n        } else {\n          if (this.debug) {\n            console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n          }\n        }\n      }\n      this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n    }\n    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n      const p = config.state;\n      if (!p.epsilonOnlyTransitions) {\n        configs.add(config, this.mergeCache);\n      }\n      for (let i = 0; i < p.transitions.length; i++) {\n        if (i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n          continue;\n        const t = p.transitions[i];\n        const continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n        const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n        if (c !== null) {\n          let newDepth = depth;\n          if (config.state instanceof RuleStopState) {\n            if (this._dfa !== null && this._dfa.precedenceDfa) {\n              if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n                c.precedenceFilterSuppressed = true;\n              }\n            }\n            c.reachesIntoOuterContext += 1;\n            if (closureBusy.add(c) !== c) {\n              continue;\n            }\n            configs.dipsIntoOuterContext = true;\n            newDepth -= 1;\n            if (this.debug) {\n              console.log(\"dips into outer ctx: \" + c);\n            }\n          } else {\n            if (!t.isEpsilon && closureBusy.add(c) !== c) {\n              continue;\n            }\n            if (t instanceof RuleTransition) {\n              if (newDepth >= 0) {\n                newDepth += 1;\n              }\n            }\n          }\n          this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n        }\n      }\n    }\n    canDropLoopEntryEdgeInLeftRecursiveRule(config) {\n      const p = config.state;\n      if (p.stateType !== ATNState.STAR_LOOP_ENTRY)\n        return false;\n      if (p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config.context.isEmpty() || config.context.hasEmptyPath())\n        return false;\n      const numCtxs = config.context.length;\n      for (let i = 0; i < numCtxs; i++) {\n        const returnState = this.atn.states[config.context.getReturnState(i)];\n        if (returnState.ruleIndex !== p.ruleIndex)\n          return false;\n      }\n      const decisionStartState = p.transitions[0].target;\n      const blockEndStateNum = decisionStartState.endState.stateNumber;\n      const blockEndState = this.atn.states[blockEndStateNum];\n      for (let i = 0; i < numCtxs; i++) {\n        const returnStateNumber = config.context.getReturnState(i);\n        const returnState = this.atn.states[returnStateNumber];\n        if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)\n          return false;\n        const returnStateTarget = returnState.transitions[0].target;\n        if (returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p)\n          continue;\n        if (returnState === blockEndState)\n          continue;\n        if (returnStateTarget === blockEndState)\n          continue;\n        if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)\n          continue;\n        return false;\n      }\n      return true;\n    }\n    getRuleName(index) {\n      if (this.parser !== null && index >= 0) {\n        return this.parser.ruleNames[index];\n      } else {\n        return \"<rule \" + index + \">\";\n      }\n    }\n    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n      switch (t.serializationType) {\n        case Transition.RULE:\n          return this.ruleTransition(config, t);\n        case Transition.PRECEDENCE:\n          return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.PREDICATE:\n          return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.ACTION:\n          return this.actionTransition(config, t);\n        case Transition.EPSILON:\n          return new ATNConfig({state: t.target}, config);\n        case Transition.ATOM:\n        case Transition.RANGE:\n        case Transition.SET:\n          if (treatEofAsEpsilon) {\n            if (t.matches(Token2.EOF, 0, 1)) {\n              return new ATNConfig({state: t.target}, config);\n            }\n          }\n          return null;\n        default:\n          return null;\n      }\n    }\n    actionTransition(config, t) {\n      if (this.debug) {\n        const index = t.actionIndex === -1 ? 65535 : t.actionIndex;\n        console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n      }\n      return new ATNConfig({state: t.target}, config);\n    }\n    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {\n      if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.precedence + \">=_p, ctx dependent=true\");\n        if (this.parser !== null) {\n          console.log(\"context surrounding pred is \" + Utils3.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n      }\n      let c = null;\n      if (collectPredicates && inContext) {\n        if (fullCtx) {\n          const currentPosition = this._input.index;\n          this._input.seek(this._startIndex);\n          const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n          this._input.seek(currentPosition);\n          if (predSucceeds) {\n            c = new ATNConfig({state: pt.target}, config);\n          }\n        } else {\n          const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n          c = new ATNConfig({state: pt.target, semanticContext: newSemCtx}, config);\n        }\n      } else {\n        c = new ATNConfig({state: pt.target}, config);\n      }\n      if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n      }\n      return c;\n    }\n    predTransition(config, pt, collectPredicates, inContext, fullCtx) {\n      if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex + \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n        if (this.parser !== null) {\n          console.log(\"context surrounding pred is \" + Utils3.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n      }\n      let c = null;\n      if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {\n        if (fullCtx) {\n          const currentPosition = this._input.index;\n          this._input.seek(this._startIndex);\n          const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n          this._input.seek(currentPosition);\n          if (predSucceeds) {\n            c = new ATNConfig({state: pt.target}, config);\n          }\n        } else {\n          const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n          c = new ATNConfig({state: pt.target, semanticContext: newSemCtx}, config);\n        }\n      } else {\n        c = new ATNConfig({state: pt.target}, config);\n      }\n      if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n      }\n      return c;\n    }\n    ruleTransition(config, t) {\n      if (this.debug) {\n        console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n      }\n      const returnState = t.followState;\n      const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n      return new ATNConfig({state: t.target, context: newContext}, config);\n    }\n    getConflictingAlts(configs) {\n      const altsets = PredictionMode.getConflictingAltSubsets(configs);\n      return PredictionMode.getAlts(altsets);\n    }\n    getConflictingAltsOrUniqueAlt(configs) {\n      let conflictingAlts = null;\n      if (configs.uniqueAlt !== ATN2.INVALID_ALT_NUMBER) {\n        conflictingAlts = new BitSet();\n        conflictingAlts.add(configs.uniqueAlt);\n      } else {\n        conflictingAlts = configs.conflictingAlts;\n      }\n      return conflictingAlts;\n    }\n    getTokenName(t) {\n      if (t === Token2.EOF) {\n        return \"EOF\";\n      }\n      if (this.parser !== null && this.parser.literalNames !== null) {\n        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n          console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n          console.log(\"\" + this.parser.getInputStream().getTokens());\n        } else {\n          const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n          return name + \"<\" + t + \">\";\n        }\n      }\n      return \"\" + t;\n    }\n    getLookaheadName(input) {\n      return this.getTokenName(input.LA(1));\n    }\n    dumpDeadEndConfigs(nvae) {\n      console.log(\"dead end configs: \");\n      const decs = nvae.getDeadEndConfigs();\n      for (let i = 0; i < decs.length; i++) {\n        const c = decs[i];\n        let trans = \"no edges\";\n        if (c.state.transitions.length > 0) {\n          const t = c.state.transitions[0];\n          if (t instanceof AtomTransition) {\n            trans = \"Atom \" + this.getTokenName(t.label);\n          } else if (t instanceof SetTransition) {\n            const neg = t instanceof NotSetTransition;\n            trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n          }\n        }\n        console.error(c.toString(this.parser, true) + \":\" + trans);\n      }\n    }\n    noViableAlt(input, outerContext, configs, startIndex) {\n      return new NoViableAltException2(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n    }\n    getUniqueAlt(configs) {\n      let alt = ATN2.INVALID_ALT_NUMBER;\n      for (let i = 0; i < configs.items.length; i++) {\n        const c = configs.items[i];\n        if (alt === ATN2.INVALID_ALT_NUMBER) {\n          alt = c.alt;\n        } else if (c.alt !== alt) {\n          return ATN2.INVALID_ALT_NUMBER;\n        }\n      }\n      return alt;\n    }\n    addDFAEdge(dfa, from_, t, to) {\n      if (this.debug) {\n        console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n      }\n      if (to === null) {\n        return null;\n      }\n      to = this.addDFAState(dfa, to);\n      if (from_ === null || t < -1 || t > this.atn.maxTokenType) {\n        return to;\n      }\n      if (from_.edges === null) {\n        from_.edges = [];\n      }\n      from_.edges[t + 1] = to;\n      if (this.debug) {\n        const literalNames = this.parser === null ? null : this.parser.literalNames;\n        const symbolicNames = this.parser === null ? null : this.parser.symbolicNames;\n        console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n      }\n      return to;\n    }\n    addDFAState(dfa, D) {\n      if (D === ATNSimulator.ERROR) {\n        return D;\n      }\n      const existing = dfa.states.get(D);\n      if (existing !== null) {\n        return existing;\n      }\n      D.stateNumber = dfa.states.length;\n      if (!D.configs.readOnly) {\n        D.configs.optimizeConfigs(this);\n        D.configs.setReadonly(true);\n      }\n      dfa.states.add(D);\n      if (this.debug) {\n        console.log(\"adding new DFA state: \" + D);\n      }\n      return D;\n    }\n    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n      if (this.debug || this.retry_debug) {\n        const interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n      }\n      if (this.parser !== null) {\n        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n      }\n    }\n    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n      if (this.debug || this.retry_debug) {\n        const interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n      }\n      if (this.parser !== null) {\n        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n      }\n    }\n    reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n      if (this.debug || this.retry_debug) {\n        const interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n      }\n      if (this.parser !== null) {\n        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n      }\n    }\n  };\n  module2.exports = ParserATNSimulator2;\n});\n\n// node_modules/antlr4/src/antlr4/atn/index.js\nvar require_atn = __commonJS((exports) => {\n  exports.ATN = require_ATN2();\n  exports.ATNDeserializer = require_ATNDeserializer2();\n  exports.LexerATNSimulator = require_LexerATNSimulator2();\n  exports.ParserATNSimulator = require_ParserATNSimulator2();\n  exports.PredictionMode = require_PredictionMode2();\n});\n\n// node_modules/antlr4/src/antlr4/polyfills/codepointat.js\nvar require_codepointat = __commonJS(() => {\n  if (!String.prototype.codePointAt) {\n    (function() {\n      \"use strict\";\n      var defineProperty = function() {\n        let result;\n        try {\n          const object = {};\n          const $defineProperty = Object.defineProperty;\n          result = $defineProperty(object, object, object) && $defineProperty;\n        } catch (error) {\n        }\n        return result;\n      }();\n      const codePointAt = function(position) {\n        if (this == null) {\n          throw TypeError();\n        }\n        const string = String(this);\n        const size = string.length;\n        let index = position ? Number(position) : 0;\n        if (index !== index) {\n          index = 0;\n        }\n        if (index < 0 || index >= size) {\n          return void 0;\n        }\n        const first = string.charCodeAt(index);\n        let second;\n        if (first >= 55296 && first <= 56319 && size > index + 1) {\n          second = string.charCodeAt(index + 1);\n          if (second >= 56320 && second <= 57343) {\n            return (first - 55296) * 1024 + second - 56320 + 65536;\n          }\n        }\n        return first;\n      };\n      if (defineProperty) {\n        defineProperty(String.prototype, \"codePointAt\", {\n          value: codePointAt,\n          configurable: true,\n          writable: true\n        });\n      } else {\n        String.prototype.codePointAt = codePointAt;\n      }\n    })();\n  }\n});\n\n// node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\nvar require_DFASerializer2 = __commonJS((exports, module2) => {\n  var DFASerializer = class {\n    constructor(dfa, literalNames, symbolicNames) {\n      this.dfa = dfa;\n      this.literalNames = literalNames || [];\n      this.symbolicNames = symbolicNames || [];\n    }\n    toString() {\n      if (this.dfa.s0 === null) {\n        return null;\n      }\n      let buf = \"\";\n      const states = this.dfa.sortedStates();\n      for (let i = 0; i < states.length; i++) {\n        const s = states[i];\n        if (s.edges !== null) {\n          const n = s.edges.length;\n          for (let j = 0; j < n; j++) {\n            const t = s.edges[j] || null;\n            if (t !== null && t.stateNumber !== 2147483647) {\n              buf = buf.concat(this.getStateString(s));\n              buf = buf.concat(\"-\");\n              buf = buf.concat(this.getEdgeLabel(j));\n              buf = buf.concat(\"->\");\n              buf = buf.concat(this.getStateString(t));\n              buf = buf.concat(\"\\n\");\n            }\n          }\n        }\n      }\n      return buf.length === 0 ? null : buf;\n    }\n    getEdgeLabel(i) {\n      if (i === 0) {\n        return \"EOF\";\n      } else if (this.literalNames !== null || this.symbolicNames !== null) {\n        return this.literalNames[i - 1] || this.symbolicNames[i - 1];\n      } else {\n        return String.fromCharCode(i - 1);\n      }\n    }\n    getStateString(s) {\n      const baseStateStr = (s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + (s.requiresFullContext ? \"^\" : \"\");\n      if (s.isAcceptState) {\n        if (s.predicates !== null) {\n          return baseStateStr + \"=>\" + s.predicates.toString();\n        } else {\n          return baseStateStr + \"=>\" + s.prediction.toString();\n        }\n      } else {\n        return baseStateStr;\n      }\n    }\n  };\n  var LexerDFASerializer = class extends DFASerializer {\n    constructor(dfa) {\n      super(dfa, null);\n    }\n    getEdgeLabel(i) {\n      return \"'\" + String.fromCharCode(i) + \"'\";\n    }\n  };\n  module2.exports = {DFASerializer, LexerDFASerializer};\n});\n\n// node_modules/antlr4/src/antlr4/dfa/DFA.js\nvar require_DFA2 = __commonJS((exports, module2) => {\n  var {Set: Set2} = require_Utils2();\n  var {DFAState} = require_DFAState2();\n  var {StarLoopEntryState} = require_ATNState2();\n  var {ATNConfigSet} = require_ATNConfigSet2();\n  var {DFASerializer} = require_DFASerializer2();\n  var {LexerDFASerializer} = require_DFASerializer2();\n  var DFA = class {\n    constructor(atnStartState, decision) {\n      if (decision === void 0) {\n        decision = 0;\n      }\n      this.atnStartState = atnStartState;\n      this.decision = decision;\n      this._states = new Set2();\n      this.s0 = null;\n      this.precedenceDfa = false;\n      if (atnStartState instanceof StarLoopEntryState) {\n        if (atnStartState.isPrecedenceDecision) {\n          this.precedenceDfa = true;\n          const precedenceState = new DFAState(null, new ATNConfigSet());\n          precedenceState.edges = [];\n          precedenceState.isAcceptState = false;\n          precedenceState.requiresFullContext = false;\n          this.s0 = precedenceState;\n        }\n      }\n    }\n    getPrecedenceStartState(precedence) {\n      if (!this.precedenceDfa) {\n        throw \"Only precedence DFAs may contain a precedence start state.\";\n      }\n      if (precedence < 0 || precedence >= this.s0.edges.length) {\n        return null;\n      }\n      return this.s0.edges[precedence] || null;\n    }\n    setPrecedenceStartState(precedence, startState) {\n      if (!this.precedenceDfa) {\n        throw \"Only precedence DFAs may contain a precedence start state.\";\n      }\n      if (precedence < 0) {\n        return;\n      }\n      this.s0.edges[precedence] = startState;\n    }\n    setPrecedenceDfa(precedenceDfa) {\n      if (this.precedenceDfa !== precedenceDfa) {\n        this._states = new Set2();\n        if (precedenceDfa) {\n          const precedenceState = new DFAState(null, new ATNConfigSet());\n          precedenceState.edges = [];\n          precedenceState.isAcceptState = false;\n          precedenceState.requiresFullContext = false;\n          this.s0 = precedenceState;\n        } else {\n          this.s0 = null;\n        }\n        this.precedenceDfa = precedenceDfa;\n      }\n    }\n    sortedStates() {\n      const list = this._states.values();\n      return list.sort(function(a, b) {\n        return a.stateNumber - b.stateNumber;\n      });\n    }\n    toString(literalNames, symbolicNames) {\n      literalNames = literalNames || null;\n      symbolicNames = symbolicNames || null;\n      if (this.s0 === null) {\n        return \"\";\n      }\n      const serializer = new DFASerializer(this, literalNames, symbolicNames);\n      return serializer.toString();\n    }\n    toLexerString() {\n      if (this.s0 === null) {\n        return \"\";\n      }\n      const serializer = new LexerDFASerializer(this);\n      return serializer.toString();\n    }\n    get states() {\n      return this._states;\n    }\n  };\n  module2.exports = DFA;\n});\n\n// node_modules/antlr4/src/antlr4/dfa/index.js\nvar require_dfa = __commonJS((exports) => {\n  exports.DFA = require_DFA2();\n  exports.DFASerializer = require_DFASerializer2().DFASerializer;\n  exports.LexerDFASerializer = require_DFASerializer2().LexerDFASerializer;\n  exports.PredPrediction = require_DFAState2().PredPrediction;\n});\n\n// node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\nvar require_fromcodepoint = __commonJS(() => {\n  if (!String.fromCodePoint) {\n    (function() {\n      const defineProperty = function() {\n        let result;\n        try {\n          const object = {};\n          const $defineProperty = Object.defineProperty;\n          result = $defineProperty(object, object, object) && $defineProperty;\n        } catch (error) {\n        }\n        return result;\n      }();\n      const stringFromCharCode = String.fromCharCode;\n      const floor = Math.floor;\n      const fromCodePoint = function(_) {\n        const MAX_SIZE = 16384;\n        const codeUnits = [];\n        let highSurrogate;\n        let lowSurrogate;\n        let index = -1;\n        const length = arguments.length;\n        if (!length) {\n          return \"\";\n        }\n        let result = \"\";\n        while (++index < length) {\n          let codePoint = Number(arguments[index]);\n          if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor(codePoint) !== codePoint) {\n            throw RangeError(\"Invalid code point: \" + codePoint);\n          }\n          if (codePoint <= 65535) {\n            codeUnits.push(codePoint);\n          } else {\n            codePoint -= 65536;\n            highSurrogate = (codePoint >> 10) + 55296;\n            lowSurrogate = codePoint % 1024 + 56320;\n            codeUnits.push(highSurrogate, lowSurrogate);\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits);\n            codeUnits.length = 0;\n          }\n        }\n        return result;\n      };\n      if (defineProperty) {\n        defineProperty(String, \"fromCodePoint\", {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        });\n      } else {\n        String.fromCodePoint = fromCodePoint;\n      }\n    })();\n  }\n});\n\n// node_modules/antlr4/src/antlr4/tree/index.js\nvar require_tree = __commonJS((exports, module2) => {\n  var Tree = require_Tree();\n  var Trees = require_Trees2();\n  module2.exports = __objSpread(__objSpread({}, Tree), {Trees});\n});\n\n// node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js\nvar require_DiagnosticErrorListener2 = __commonJS((exports, module2) => {\n  var {BitSet} = require_Utils2();\n  var {ErrorListener: ErrorListener2} = require_ErrorListener();\n  var {Interval} = require_IntervalSet2();\n  var DiagnosticErrorListener = class extends ErrorListener2 {\n    constructor(exactOnly) {\n      super();\n      exactOnly = exactOnly || true;\n      this.exactOnly = exactOnly;\n    }\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n      if (this.exactOnly && !exact) {\n        return;\n      }\n      const msg = \"reportAmbiguity d=\" + this.getDecisionDescription(recognizer, dfa) + \": ambigAlts=\" + this.getConflictingAlts(ambigAlts, configs) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n      recognizer.notifyErrorListeners(msg);\n    }\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n      const msg = \"reportAttemptingFullContext d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n      recognizer.notifyErrorListeners(msg);\n    }\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n      const msg = \"reportContextSensitivity d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n      recognizer.notifyErrorListeners(msg);\n    }\n    getDecisionDescription(recognizer, dfa) {\n      const decision = dfa.decision;\n      const ruleIndex = dfa.atnStartState.ruleIndex;\n      const ruleNames = recognizer.ruleNames;\n      if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n        return \"\" + decision;\n      }\n      const ruleName = ruleNames[ruleIndex] || null;\n      if (ruleName === null || ruleName.length === 0) {\n        return \"\" + decision;\n      }\n      return `${decision} (${ruleName})`;\n    }\n    getConflictingAlts(reportedAlts, configs) {\n      if (reportedAlts !== null) {\n        return reportedAlts;\n      }\n      const result = new BitSet();\n      for (let i = 0; i < configs.items.length; i++) {\n        result.add(configs.items[i].alt);\n      }\n      return `{${result.values().join(\", \")}}`;\n    }\n  };\n  module2.exports = DiagnosticErrorListener;\n});\n\n// node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\nvar require_ErrorStrategy = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var {NoViableAltException: NoViableAltException2, InputMismatchException, FailedPredicateException: FailedPredicateException2, ParseCancellationException} = require_Errors();\n  var {ATNState} = require_ATNState2();\n  var {Interval, IntervalSet} = require_IntervalSet2();\n  var ErrorStrategy = class {\n    reset(recognizer) {\n    }\n    recoverInline(recognizer) {\n    }\n    recover(recognizer, e) {\n    }\n    sync(recognizer) {\n    }\n    inErrorRecoveryMode(recognizer) {\n    }\n    reportError(recognizer) {\n    }\n  };\n  var DefaultErrorStrategy = class extends ErrorStrategy {\n    constructor() {\n      super();\n      this.errorRecoveryMode = false;\n      this.lastErrorIndex = -1;\n      this.lastErrorStates = null;\n      this.nextTokensContext = null;\n      this.nextTokenState = 0;\n    }\n    reset(recognizer) {\n      this.endErrorCondition(recognizer);\n    }\n    beginErrorCondition(recognizer) {\n      this.errorRecoveryMode = true;\n    }\n    inErrorRecoveryMode(recognizer) {\n      return this.errorRecoveryMode;\n    }\n    endErrorCondition(recognizer) {\n      this.errorRecoveryMode = false;\n      this.lastErrorStates = null;\n      this.lastErrorIndex = -1;\n    }\n    reportMatch(recognizer) {\n      this.endErrorCondition(recognizer);\n    }\n    reportError(recognizer, e) {\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      this.beginErrorCondition(recognizer);\n      if (e instanceof NoViableAltException2) {\n        this.reportNoViableAlternative(recognizer, e);\n      } else if (e instanceof InputMismatchException) {\n        this.reportInputMismatch(recognizer, e);\n      } else if (e instanceof FailedPredicateException2) {\n        this.reportFailedPredicate(recognizer, e);\n      } else {\n        console.log(\"unknown recognition error type: \" + e.constructor.name);\n        console.log(e.stack);\n        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n      }\n    }\n    recover(recognizer, e) {\n      if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {\n        recognizer.consume();\n      }\n      this.lastErrorIndex = recognizer._input.index;\n      if (this.lastErrorStates === null) {\n        this.lastErrorStates = [];\n      }\n      this.lastErrorStates.push(recognizer.state);\n      const followSet = this.getErrorRecoverySet(recognizer);\n      this.consumeUntil(recognizer, followSet);\n    }\n    sync(recognizer) {\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      const s = recognizer._interp.atn.states[recognizer.state];\n      const la = recognizer.getTokenStream().LA(1);\n      const nextTokens = recognizer.atn.nextTokens(s);\n      if (nextTokens.contains(la)) {\n        this.nextTokensContext = null;\n        this.nextTokenState = ATNState.INVALID_STATE_NUMBER;\n        return;\n      } else if (nextTokens.contains(Token2.EPSILON)) {\n        if (this.nextTokensContext === null) {\n          this.nextTokensContext = recognizer._ctx;\n          this.nextTokensState = recognizer._stateNumber;\n        }\n        return;\n      }\n      switch (s.stateType) {\n        case ATNState.BLOCK_START:\n        case ATNState.STAR_BLOCK_START:\n        case ATNState.PLUS_BLOCK_START:\n        case ATNState.STAR_LOOP_ENTRY:\n          if (this.singleTokenDeletion(recognizer) !== null) {\n            return;\n          } else {\n            throw new InputMismatchException(recognizer);\n          }\n        case ATNState.PLUS_LOOP_BACK:\n        case ATNState.STAR_LOOP_BACK:\n          this.reportUnwantedToken(recognizer);\n          const expecting = new IntervalSet();\n          expecting.addSet(recognizer.getExpectedTokens());\n          const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n          this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n          break;\n        default:\n      }\n    }\n    reportNoViableAlternative(recognizer, e) {\n      const tokens2 = recognizer.getTokenStream();\n      let input;\n      if (tokens2 !== null) {\n        if (e.startToken.type === Token2.EOF) {\n          input = \"<EOF>\";\n        } else {\n          input = tokens2.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n        }\n      } else {\n        input = \"<unknown input>\";\n      }\n      const msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n      recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n    reportInputMismatch(recognizer, e) {\n      const msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) + \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);\n      recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n    reportFailedPredicate(recognizer, e) {\n      const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];\n      const msg = \"rule \" + ruleName + \" \" + e.message;\n      recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n    reportUnwantedToken(recognizer) {\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      this.beginErrorCondition(recognizer);\n      const t = recognizer.getCurrentToken();\n      const tokenName = this.getTokenErrorDisplay(t);\n      const expecting = this.getExpectedTokens(recognizer);\n      const msg = \"extraneous input \" + tokenName + \" expecting \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);\n      recognizer.notifyErrorListeners(msg, t, null);\n    }\n    reportMissingToken(recognizer) {\n      if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n      }\n      this.beginErrorCondition(recognizer);\n      const t = recognizer.getCurrentToken();\n      const expecting = this.getExpectedTokens(recognizer);\n      const msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + \" at \" + this.getTokenErrorDisplay(t);\n      recognizer.notifyErrorListeners(msg, t, null);\n    }\n    recoverInline(recognizer) {\n      const matchedSymbol = this.singleTokenDeletion(recognizer);\n      if (matchedSymbol !== null) {\n        recognizer.consume();\n        return matchedSymbol;\n      }\n      if (this.singleTokenInsertion(recognizer)) {\n        return this.getMissingSymbol(recognizer);\n      }\n      throw new InputMismatchException(recognizer);\n    }\n    singleTokenInsertion(recognizer) {\n      const currentSymbolType = recognizer.getTokenStream().LA(1);\n      const atn = recognizer._interp.atn;\n      const currentState = atn.states[recognizer.state];\n      const next = currentState.transitions[0].target;\n      const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);\n      if (expectingAtLL2.contains(currentSymbolType)) {\n        this.reportMissingToken(recognizer);\n        return true;\n      } else {\n        return false;\n      }\n    }\n    singleTokenDeletion(recognizer) {\n      const nextTokenType = recognizer.getTokenStream().LA(2);\n      const expecting = this.getExpectedTokens(recognizer);\n      if (expecting.contains(nextTokenType)) {\n        this.reportUnwantedToken(recognizer);\n        recognizer.consume();\n        const matchedSymbol = recognizer.getCurrentToken();\n        this.reportMatch(recognizer);\n        return matchedSymbol;\n      } else {\n        return null;\n      }\n    }\n    getMissingSymbol(recognizer) {\n      const currentSymbol = recognizer.getCurrentToken();\n      const expecting = this.getExpectedTokens(recognizer);\n      const expectedTokenType = expecting.first();\n      let tokenText;\n      if (expectedTokenType === Token2.EOF) {\n        tokenText = \"<missing EOF>\";\n      } else {\n        tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n      }\n      let current = currentSymbol;\n      const lookback = recognizer.getTokenStream().LT(-1);\n      if (current.type === Token2.EOF && lookback !== null) {\n        current = lookback;\n      }\n      return recognizer.getTokenFactory().create(current.source, expectedTokenType, tokenText, Token2.DEFAULT_CHANNEL, -1, -1, current.line, current.column);\n    }\n    getExpectedTokens(recognizer) {\n      return recognizer.getExpectedTokens();\n    }\n    getTokenErrorDisplay(t) {\n      if (t === null) {\n        return \"<no token>\";\n      }\n      let s = t.text;\n      if (s === null) {\n        if (t.type === Token2.EOF) {\n          s = \"<EOF>\";\n        } else {\n          s = \"<\" + t.type + \">\";\n        }\n      }\n      return this.escapeWSAndQuote(s);\n    }\n    escapeWSAndQuote(s) {\n      s = s.replace(/\\n/g, \"\\\\n\");\n      s = s.replace(/\\r/g, \"\\\\r\");\n      s = s.replace(/\\t/g, \"\\\\t\");\n      return \"'\" + s + \"'\";\n    }\n    getErrorRecoverySet(recognizer) {\n      const atn = recognizer._interp.atn;\n      let ctx = recognizer._ctx;\n      const recoverSet = new IntervalSet();\n      while (ctx !== null && ctx.invokingState >= 0) {\n        const invokingState = atn.states[ctx.invokingState];\n        const rt = invokingState.transitions[0];\n        const follow = atn.nextTokens(rt.followState);\n        recoverSet.addSet(follow);\n        ctx = ctx.parentCtx;\n      }\n      recoverSet.removeOne(Token2.EPSILON);\n      return recoverSet;\n    }\n    consumeUntil(recognizer, set) {\n      let ttype = recognizer.getTokenStream().LA(1);\n      while (ttype !== Token2.EOF && !set.contains(ttype)) {\n        recognizer.consume();\n        ttype = recognizer.getTokenStream().LA(1);\n      }\n    }\n  };\n  var BailErrorStrategy = class extends DefaultErrorStrategy {\n    constructor() {\n      super();\n    }\n    recover(recognizer, e) {\n      let context = recognizer._ctx;\n      while (context !== null) {\n        context.exception = e;\n        context = context.parentCtx;\n      }\n      throw new ParseCancellationException(e);\n    }\n    recoverInline(recognizer) {\n      this.recover(recognizer, new InputMismatchException(recognizer));\n    }\n    sync(recognizer) {\n    }\n  };\n  module2.exports = {BailErrorStrategy, DefaultErrorStrategy};\n});\n\n// node_modules/antlr4/src/antlr4/error/index.js\nvar require_error = __commonJS((exports, module2) => {\n  module2.exports.RecognitionException = require_Errors().RecognitionException;\n  module2.exports.NoViableAltException = require_Errors().NoViableAltException;\n  module2.exports.LexerNoViableAltException = require_Errors().LexerNoViableAltException;\n  module2.exports.InputMismatchException = require_Errors().InputMismatchException;\n  module2.exports.FailedPredicateException = require_Errors().FailedPredicateException;\n  module2.exports.DiagnosticErrorListener = require_DiagnosticErrorListener2();\n  module2.exports.BailErrorStrategy = require_ErrorStrategy().BailErrorStrategy;\n  module2.exports.DefaultErrorStrategy = require_ErrorStrategy().DefaultErrorStrategy;\n  module2.exports.ErrorListener = require_ErrorListener().ErrorListener;\n});\n\n// node_modules/antlr4/src/antlr4/InputStream.js\nvar require_InputStream = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  require_codepointat();\n  require_fromcodepoint();\n  var InputStream = class {\n    constructor(data, decodeToUnicodeCodePoints) {\n      this.name = \"<empty>\";\n      this.strdata = data;\n      this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n      this._index = 0;\n      this.data = [];\n      if (this.decodeToUnicodeCodePoints) {\n        for (let i = 0; i < this.strdata.length; ) {\n          const codePoint = this.strdata.codePointAt(i);\n          this.data.push(codePoint);\n          i += codePoint <= 65535 ? 1 : 2;\n        }\n      } else {\n        for (let i = 0; i < this.strdata.length; i++) {\n          const codeUnit = this.strdata.charCodeAt(i);\n          this.data.push(codeUnit);\n        }\n      }\n      this._size = this.data.length;\n    }\n    reset() {\n      this._index = 0;\n    }\n    consume() {\n      if (this._index >= this._size) {\n        throw \"cannot consume EOF\";\n      }\n      this._index += 1;\n    }\n    LA(offset) {\n      if (offset === 0) {\n        return 0;\n      }\n      if (offset < 0) {\n        offset += 1;\n      }\n      const pos = this._index + offset - 1;\n      if (pos < 0 || pos >= this._size) {\n        return Token2.EOF;\n      }\n      return this.data[pos];\n    }\n    LT(offset) {\n      return this.LA(offset);\n    }\n    mark() {\n      return -1;\n    }\n    release(marker) {\n    }\n    seek(_index) {\n      if (_index <= this._index) {\n        this._index = _index;\n        return;\n      }\n      this._index = Math.min(_index, this._size);\n    }\n    getText(start, stop) {\n      if (stop >= this._size) {\n        stop = this._size - 1;\n      }\n      if (start >= this._size) {\n        return \"\";\n      } else {\n        if (this.decodeToUnicodeCodePoints) {\n          let result = \"\";\n          for (let i = start; i <= stop; i++) {\n            result += String.fromCodePoint(this.data[i]);\n          }\n          return result;\n        } else {\n          return this.strdata.slice(start, stop + 1);\n        }\n      }\n    }\n    toString() {\n      return this.strdata;\n    }\n    get index() {\n      return this._index;\n    }\n    get size() {\n      return this._size;\n    }\n  };\n  module2.exports = InputStream;\n});\n\n// node_modules/antlr4/src/antlr4/CharStreams.js\nvar require_CharStreams2 = __commonJS((exports, module2) => {\n  var InputStream = require_InputStream();\n  var fs = __webpack_require__(/*! fs */ \"fs\");\n  var CharStreams = {\n    fromString: function(str) {\n      return new InputStream(str, true);\n    },\n    fromBlob: function(blob, encoding, onLoad, onError) {\n      const reader = new window.FileReader();\n      reader.onload = function(e) {\n        const is = new InputStream(e.target.result, true);\n        onLoad(is);\n      };\n      reader.onerror = onError;\n      reader.readAsText(blob, encoding);\n    },\n    fromBuffer: function(buffer, encoding) {\n      return new InputStream(buffer.toString(encoding), true);\n    },\n    fromPath: function(path, encoding, callback) {\n      fs.readFile(path, encoding, function(err, data) {\n        let is = null;\n        if (data !== null) {\n          is = new InputStream(data, true);\n        }\n        callback(err, is);\n      });\n    },\n    fromPathSync: function(path, encoding) {\n      const data = fs.readFileSync(path, encoding);\n      return new InputStream(data, true);\n    }\n  };\n  module2.exports = CharStreams;\n});\n\n// node_modules/antlr4/src/antlr4/FileStream.js\nvar require_FileStream = __commonJS((exports, module2) => {\n  var InputStream = require_InputStream();\n  var fs = __webpack_require__(/*! fs */ \"fs\");\n  var FileStream = class extends InputStream {\n    constructor(fileName, decodeToUnicodeCodePoints) {\n      const data = fs.readFileSync(fileName, \"utf8\");\n      super(data, decodeToUnicodeCodePoints);\n      this.fileName = fileName;\n    }\n  };\n  module2.exports = FileStream;\n});\n\n// node_modules/antlr4/src/antlr4/BufferedTokenStream.js\nvar require_BufferedTokenStream2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var Lexer2 = require_Lexer2();\n  var {Interval} = require_IntervalSet2();\n  var TokenStream = class {\n  };\n  var BufferedTokenStream = class extends TokenStream {\n    constructor(tokenSource) {\n      super();\n      this.tokenSource = tokenSource;\n      this.tokens = [];\n      this.index = -1;\n      this.fetchedEOF = false;\n    }\n    mark() {\n      return 0;\n    }\n    release(marker) {\n    }\n    reset() {\n      this.seek(0);\n    }\n    seek(index) {\n      this.lazyInit();\n      this.index = this.adjustSeekIndex(index);\n    }\n    get(index) {\n      this.lazyInit();\n      return this.tokens[index];\n    }\n    consume() {\n      let skipEofCheck = false;\n      if (this.index >= 0) {\n        if (this.fetchedEOF) {\n          skipEofCheck = this.index < this.tokens.length - 1;\n        } else {\n          skipEofCheck = this.index < this.tokens.length;\n        }\n      } else {\n        skipEofCheck = false;\n      }\n      if (!skipEofCheck && this.LA(1) === Token2.EOF) {\n        throw \"cannot consume EOF\";\n      }\n      if (this.sync(this.index + 1)) {\n        this.index = this.adjustSeekIndex(this.index + 1);\n      }\n    }\n    sync(i) {\n      const n = i - this.tokens.length + 1;\n      if (n > 0) {\n        const fetched = this.fetch(n);\n        return fetched >= n;\n      }\n      return true;\n    }\n    fetch(n) {\n      if (this.fetchedEOF) {\n        return 0;\n      }\n      for (let i = 0; i < n; i++) {\n        const t = this.tokenSource.nextToken();\n        t.tokenIndex = this.tokens.length;\n        this.tokens.push(t);\n        if (t.type === Token2.EOF) {\n          this.fetchedEOF = true;\n          return i + 1;\n        }\n      }\n      return n;\n    }\n    getTokens(start, stop, types) {\n      if (types === void 0) {\n        types = null;\n      }\n      if (start < 0 || stop < 0) {\n        return null;\n      }\n      this.lazyInit();\n      const subset = [];\n      if (stop >= this.tokens.length) {\n        stop = this.tokens.length - 1;\n      }\n      for (let i = start; i < stop; i++) {\n        const t = this.tokens[i];\n        if (t.type === Token2.EOF) {\n          break;\n        }\n        if (types === null || types.contains(t.type)) {\n          subset.push(t);\n        }\n      }\n      return subset;\n    }\n    LA(i) {\n      return this.LT(i).type;\n    }\n    LB(k) {\n      if (this.index - k < 0) {\n        return null;\n      }\n      return this.tokens[this.index - k];\n    }\n    LT(k) {\n      this.lazyInit();\n      if (k === 0) {\n        return null;\n      }\n      if (k < 0) {\n        return this.LB(-k);\n      }\n      const i = this.index + k - 1;\n      this.sync(i);\n      if (i >= this.tokens.length) {\n        return this.tokens[this.tokens.length - 1];\n      }\n      return this.tokens[i];\n    }\n    adjustSeekIndex(i) {\n      return i;\n    }\n    lazyInit() {\n      if (this.index === -1) {\n        this.setup();\n      }\n    }\n    setup() {\n      this.sync(0);\n      this.index = this.adjustSeekIndex(0);\n    }\n    setTokenSource(tokenSource) {\n      this.tokenSource = tokenSource;\n      this.tokens = [];\n      this.index = -1;\n      this.fetchedEOF = false;\n    }\n    nextTokenOnChannel(i, channel) {\n      this.sync(i);\n      if (i >= this.tokens.length) {\n        return -1;\n      }\n      let token = this.tokens[i];\n      while (token.channel !== this.channel) {\n        if (token.type === Token2.EOF) {\n          return -1;\n        }\n        i += 1;\n        this.sync(i);\n        token = this.tokens[i];\n      }\n      return i;\n    }\n    previousTokenOnChannel(i, channel) {\n      while (i >= 0 && this.tokens[i].channel !== channel) {\n        i -= 1;\n      }\n      return i;\n    }\n    getHiddenTokensToRight(tokenIndex, channel) {\n      if (channel === void 0) {\n        channel = -1;\n      }\n      this.lazyInit();\n      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n        throw \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n      }\n      const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer2.DEFAULT_TOKEN_CHANNEL);\n      const from_ = tokenIndex + 1;\n      const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n      return this.filterForChannel(from_, to, channel);\n    }\n    getHiddenTokensToLeft(tokenIndex, channel) {\n      if (channel === void 0) {\n        channel = -1;\n      }\n      this.lazyInit();\n      if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n        throw \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n      }\n      const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer2.DEFAULT_TOKEN_CHANNEL);\n      if (prevOnChannel === tokenIndex - 1) {\n        return null;\n      }\n      const from_ = prevOnChannel + 1;\n      const to = tokenIndex - 1;\n      return this.filterForChannel(from_, to, channel);\n    }\n    filterForChannel(left, right, channel) {\n      const hidden = [];\n      for (let i = left; i < right + 1; i++) {\n        const t = this.tokens[i];\n        if (channel === -1) {\n          if (t.channel !== Lexer2.DEFAULT_TOKEN_CHANNEL) {\n            hidden.push(t);\n          }\n        } else if (t.channel === channel) {\n          hidden.push(t);\n        }\n      }\n      if (hidden.length === 0) {\n        return null;\n      }\n      return hidden;\n    }\n    getSourceName() {\n      return this.tokenSource.getSourceName();\n    }\n    getText(interval) {\n      this.lazyInit();\n      this.fill();\n      if (interval === void 0 || interval === null) {\n        interval = new Interval(0, this.tokens.length - 1);\n      }\n      let start = interval.start;\n      if (start instanceof Token2) {\n        start = start.tokenIndex;\n      }\n      let stop = interval.stop;\n      if (stop instanceof Token2) {\n        stop = stop.tokenIndex;\n      }\n      if (start === null || stop === null || start < 0 || stop < 0) {\n        return \"\";\n      }\n      if (stop >= this.tokens.length) {\n        stop = this.tokens.length - 1;\n      }\n      let s = \"\";\n      for (let i = start; i < stop + 1; i++) {\n        const t = this.tokens[i];\n        if (t.type === Token2.EOF) {\n          break;\n        }\n        s = s + t.text;\n      }\n      return s;\n    }\n    fill() {\n      this.lazyInit();\n      while (this.fetch(1e3) === 1e3) {\n        continue;\n      }\n    }\n  };\n  module2.exports = BufferedTokenStream;\n});\n\n// node_modules/antlr4/src/antlr4/CommonTokenStream.js\nvar require_CommonTokenStream2 = __commonJS((exports, module2) => {\n  var Token2 = require_Token2().Token;\n  var BufferedTokenStream = require_BufferedTokenStream2();\n  var CommonTokenStream2 = class extends BufferedTokenStream {\n    constructor(lexer, channel) {\n      super(lexer);\n      this.channel = channel === void 0 ? Token2.DEFAULT_CHANNEL : channel;\n    }\n    adjustSeekIndex(i) {\n      return this.nextTokenOnChannel(i, this.channel);\n    }\n    LB(k) {\n      if (k === 0 || this.index - k < 0) {\n        return null;\n      }\n      let i = this.index;\n      let n = 1;\n      while (n <= k) {\n        i = this.previousTokenOnChannel(i - 1, this.channel);\n        n += 1;\n      }\n      if (i < 0) {\n        return null;\n      }\n      return this.tokens[i];\n    }\n    LT(k) {\n      this.lazyInit();\n      if (k === 0) {\n        return null;\n      }\n      if (k < 0) {\n        return this.LB(-k);\n      }\n      let i = this.index;\n      let n = 1;\n      while (n < k) {\n        if (this.sync(i + 1)) {\n          i = this.nextTokenOnChannel(i + 1, this.channel);\n        }\n        n += 1;\n      }\n      return this.tokens[i];\n    }\n    getNumberOfOnChannelTokens() {\n      let n = 0;\n      this.fill();\n      for (let i = 0; i < this.tokens.length; i++) {\n        const t = this.tokens[i];\n        if (t.channel === this.channel) {\n          n += 1;\n        }\n        if (t.type === Token2.EOF) {\n          break;\n        }\n      }\n      return n;\n    }\n  };\n  module2.exports = CommonTokenStream2;\n});\n\n// node_modules/antlr4/src/antlr4/Parser.js\nvar require_Parser2 = __commonJS((exports, module2) => {\n  var {Token: Token2} = require_Token2();\n  var {ParseTreeListener, TerminalNode, ErrorNode: ErrorNode2} = require_Tree();\n  var Recognizer = require_Recognizer2();\n  var {DefaultErrorStrategy} = require_ErrorStrategy();\n  var ATNDeserializer3 = require_ATNDeserializer2();\n  var ATNDeserializationOptions = require_ATNDeserializationOptions2();\n  var Lexer2 = require_Lexer2();\n  var TraceListener = class extends ParseTreeListener {\n    constructor(parser) {\n      super();\n      this.parser = parser;\n    }\n    enterEveryRule(ctx) {\n      console.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n    }\n    visitTerminal(node) {\n      console.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n    }\n    exitEveryRule(ctx) {\n      console.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n    }\n  };\n  var Parser2 = class extends Recognizer {\n    constructor(input) {\n      super();\n      this._input = null;\n      this._errHandler = new DefaultErrorStrategy();\n      this._precedenceStack = [];\n      this._precedenceStack.push(0);\n      this._ctx = null;\n      this.buildParseTrees = true;\n      this._tracer = null;\n      this._parseListeners = null;\n      this._syntaxErrors = 0;\n      this.setInputStream(input);\n    }\n    reset() {\n      if (this._input !== null) {\n        this._input.seek(0);\n      }\n      this._errHandler.reset(this);\n      this._ctx = null;\n      this._syntaxErrors = 0;\n      this.setTrace(false);\n      this._precedenceStack = [];\n      this._precedenceStack.push(0);\n      if (this._interp !== null) {\n        this._interp.reset();\n      }\n    }\n    match(ttype) {\n      let t = this.getCurrentToken();\n      if (t.type === ttype) {\n        this._errHandler.reportMatch(this);\n        this.consume();\n      } else {\n        t = this._errHandler.recoverInline(this);\n        if (this.buildParseTrees && t.tokenIndex === -1) {\n          this._ctx.addErrorNode(t);\n        }\n      }\n      return t;\n    }\n    matchWildcard() {\n      let t = this.getCurrentToken();\n      if (t.type > 0) {\n        this._errHandler.reportMatch(this);\n        this.consume();\n      } else {\n        t = this._errHandler.recoverInline(this);\n        if (this._buildParseTrees && t.tokenIndex === -1) {\n          this._ctx.addErrorNode(t);\n        }\n      }\n      return t;\n    }\n    getParseListeners() {\n      return this._parseListeners || [];\n    }\n    addParseListener(listener) {\n      if (listener === null) {\n        throw \"listener\";\n      }\n      if (this._parseListeners === null) {\n        this._parseListeners = [];\n      }\n      this._parseListeners.push(listener);\n    }\n    removeParseListener(listener) {\n      if (this._parseListeners !== null) {\n        const idx = this._parseListeners.indexOf(listener);\n        if (idx >= 0) {\n          this._parseListeners.splice(idx, 1);\n        }\n        if (this._parseListeners.length === 0) {\n          this._parseListeners = null;\n        }\n      }\n    }\n    removeParseListeners() {\n      this._parseListeners = null;\n    }\n    triggerEnterRuleEvent() {\n      if (this._parseListeners !== null) {\n        const ctx = this._ctx;\n        this._parseListeners.map(function(listener) {\n          listener.enterEveryRule(ctx);\n          ctx.enterRule(listener);\n        });\n      }\n    }\n    triggerExitRuleEvent() {\n      if (this._parseListeners !== null) {\n        const ctx = this._ctx;\n        this._parseListeners.slice(0).reverse().map(function(listener) {\n          ctx.exitRule(listener);\n          listener.exitEveryRule(ctx);\n        });\n      }\n    }\n    getTokenFactory() {\n      return this._input.tokenSource._factory;\n    }\n    setTokenFactory(factory) {\n      this._input.tokenSource._factory = factory;\n    }\n    getATNWithBypassAlts() {\n      const serializedAtn = this.getSerializedATN();\n      if (serializedAtn === null) {\n        throw \"The current parser does not support an ATN with bypass alternatives.\";\n      }\n      let result = this.bypassAltsAtnCache[serializedAtn];\n      if (result === null) {\n        const deserializationOptions = new ATNDeserializationOptions();\n        deserializationOptions.generateRuleBypassTransitions = true;\n        result = new ATNDeserializer3(deserializationOptions).deserialize(serializedAtn);\n        this.bypassAltsAtnCache[serializedAtn] = result;\n      }\n      return result;\n    }\n    compileParseTreePattern(pattern, patternRuleIndex, lexer) {\n      lexer = lexer || null;\n      if (lexer === null) {\n        if (this.getTokenStream() !== null) {\n          const tokenSource = this.getTokenStream().tokenSource;\n          if (tokenSource instanceof Lexer2) {\n            lexer = tokenSource;\n          }\n        }\n      }\n      if (lexer === null) {\n        throw \"Parser can't discover a lexer to use\";\n      }\n      const m = new ParseTreePatternMatcher(lexer, this);\n      return m.compile(pattern, patternRuleIndex);\n    }\n    getInputStream() {\n      return this.getTokenStream();\n    }\n    setInputStream(input) {\n      this.setTokenStream(input);\n    }\n    getTokenStream() {\n      return this._input;\n    }\n    setTokenStream(input) {\n      this._input = null;\n      this.reset();\n      this._input = input;\n    }\n    getCurrentToken() {\n      return this._input.LT(1);\n    }\n    notifyErrorListeners(msg, offendingToken, err) {\n      offendingToken = offendingToken || null;\n      err = err || null;\n      if (offendingToken === null) {\n        offendingToken = this.getCurrentToken();\n      }\n      this._syntaxErrors += 1;\n      const line = offendingToken.line;\n      const column = offendingToken.column;\n      const listener = this.getErrorListenerDispatch();\n      listener.syntaxError(this, offendingToken, line, column, msg, err);\n    }\n    consume() {\n      const o = this.getCurrentToken();\n      if (o.type !== Token2.EOF) {\n        this.getInputStream().consume();\n      }\n      const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n      if (this.buildParseTrees || hasListener) {\n        let node;\n        if (this._errHandler.inErrorRecoveryMode(this)) {\n          node = this._ctx.addErrorNode(o);\n        } else {\n          node = this._ctx.addTokenNode(o);\n        }\n        node.invokingState = this.state;\n        if (hasListener) {\n          this._parseListeners.map(function(listener) {\n            if (node instanceof ErrorNode2 || node.isErrorNode !== void 0 && node.isErrorNode()) {\n              listener.visitErrorNode(node);\n            } else if (node instanceof TerminalNode) {\n              listener.visitTerminal(node);\n            }\n          });\n        }\n      }\n      return o;\n    }\n    addContextToParseTree() {\n      if (this._ctx.parentCtx !== null) {\n        this._ctx.parentCtx.addChild(this._ctx);\n      }\n    }\n    enterRule(localctx, state, ruleIndex) {\n      this.state = state;\n      this._ctx = localctx;\n      this._ctx.start = this._input.LT(1);\n      if (this.buildParseTrees) {\n        this.addContextToParseTree();\n      }\n      if (this._parseListeners !== null) {\n        this.triggerEnterRuleEvent();\n      }\n    }\n    exitRule() {\n      this._ctx.stop = this._input.LT(-1);\n      if (this._parseListeners !== null) {\n        this.triggerExitRuleEvent();\n      }\n      this.state = this._ctx.invokingState;\n      this._ctx = this._ctx.parentCtx;\n    }\n    enterOuterAlt(localctx, altNum) {\n      localctx.setAltNumber(altNum);\n      if (this.buildParseTrees && this._ctx !== localctx) {\n        if (this._ctx.parentCtx !== null) {\n          this._ctx.parentCtx.removeLastChild();\n          this._ctx.parentCtx.addChild(localctx);\n        }\n      }\n      this._ctx = localctx;\n    }\n    getPrecedence() {\n      if (this._precedenceStack.length === 0) {\n        return -1;\n      } else {\n        return this._precedenceStack[this._precedenceStack.length - 1];\n      }\n    }\n    enterRecursionRule(localctx, state, ruleIndex, precedence) {\n      this.state = state;\n      this._precedenceStack.push(precedence);\n      this._ctx = localctx;\n      this._ctx.start = this._input.LT(1);\n      if (this._parseListeners !== null) {\n        this.triggerEnterRuleEvent();\n      }\n    }\n    pushNewRecursionContext(localctx, state, ruleIndex) {\n      const previous = this._ctx;\n      previous.parentCtx = localctx;\n      previous.invokingState = state;\n      previous.stop = this._input.LT(-1);\n      this._ctx = localctx;\n      this._ctx.start = previous.start;\n      if (this.buildParseTrees) {\n        this._ctx.addChild(previous);\n      }\n      if (this._parseListeners !== null) {\n        this.triggerEnterRuleEvent();\n      }\n    }\n    unrollRecursionContexts(parentCtx) {\n      this._precedenceStack.pop();\n      this._ctx.stop = this._input.LT(-1);\n      const retCtx = this._ctx;\n      if (this._parseListeners !== null) {\n        while (this._ctx !== parentCtx) {\n          this.triggerExitRuleEvent();\n          this._ctx = this._ctx.parentCtx;\n        }\n      } else {\n        this._ctx = parentCtx;\n      }\n      retCtx.parentCtx = parentCtx;\n      if (this.buildParseTrees && parentCtx !== null) {\n        parentCtx.addChild(retCtx);\n      }\n    }\n    getInvokingContext(ruleIndex) {\n      let ctx = this._ctx;\n      while (ctx !== null) {\n        if (ctx.ruleIndex === ruleIndex) {\n          return ctx;\n        }\n        ctx = ctx.parentCtx;\n      }\n      return null;\n    }\n    precpred(localctx, precedence) {\n      return precedence >= this._precedenceStack[this._precedenceStack.length - 1];\n    }\n    inContext(context) {\n      return false;\n    }\n    isExpectedToken(symbol) {\n      const atn = this._interp.atn;\n      let ctx = this._ctx;\n      const s = atn.states[this.state];\n      let following = atn.nextTokens(s);\n      if (following.contains(symbol)) {\n        return true;\n      }\n      if (!following.contains(Token2.EPSILON)) {\n        return false;\n      }\n      while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token2.EPSILON)) {\n        const invokingState = atn.states[ctx.invokingState];\n        const rt = invokingState.transitions[0];\n        following = atn.nextTokens(rt.followState);\n        if (following.contains(symbol)) {\n          return true;\n        }\n        ctx = ctx.parentCtx;\n      }\n      if (following.contains(Token2.EPSILON) && symbol === Token2.EOF) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    getExpectedTokens() {\n      return this._interp.atn.getExpectedTokens(this.state, this._ctx);\n    }\n    getExpectedTokensWithinCurrentRule() {\n      const atn = this._interp.atn;\n      const s = atn.states[this.state];\n      return atn.nextTokens(s);\n    }\n    getRuleIndex(ruleName) {\n      const ruleIndex = this.getRuleIndexMap()[ruleName];\n      if (ruleIndex !== null) {\n        return ruleIndex;\n      } else {\n        return -1;\n      }\n    }\n    getRuleInvocationStack(p) {\n      p = p || null;\n      if (p === null) {\n        p = this._ctx;\n      }\n      const stack = [];\n      while (p !== null) {\n        const ruleIndex = p.ruleIndex;\n        if (ruleIndex < 0) {\n          stack.push(\"n/a\");\n        } else {\n          stack.push(this.ruleNames[ruleIndex]);\n        }\n        p = p.parentCtx;\n      }\n      return stack;\n    }\n    getDFAStrings() {\n      return this._interp.decisionToDFA.toString();\n    }\n    dumpDFA() {\n      let seenOne = false;\n      for (let i = 0; i < this._interp.decisionToDFA.length; i++) {\n        const dfa = this._interp.decisionToDFA[i];\n        if (dfa.states.length > 0) {\n          if (seenOne) {\n            console.log();\n          }\n          this.printer.println(\"Decision \" + dfa.decision + \":\");\n          this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n          seenOne = true;\n        }\n      }\n    }\n    getSourceName() {\n      return this._input.sourceName;\n    }\n    setTrace(trace) {\n      if (!trace) {\n        this.removeParseListener(this._tracer);\n        this._tracer = null;\n      } else {\n        if (this._tracer !== null) {\n          this.removeParseListener(this._tracer);\n        }\n        this._tracer = new TraceListener(this);\n        this.addParseListener(this._tracer);\n      }\n    }\n  };\n  Parser2.bypassAltsAtnCache = {};\n  module2.exports = Parser2;\n});\n\n// node_modules/antlr4/src/antlr4/index.js\nvar require_antlr4 = __commonJS((exports) => {\n  exports.atn = require_atn();\n  exports.codepointat = require_codepointat();\n  exports.dfa = require_dfa();\n  exports.fromcodepoint = require_fromcodepoint();\n  exports.tree = require_tree();\n  exports.error = require_error();\n  exports.Token = require_Token2().Token;\n  exports.CharStreams = require_CharStreams2();\n  exports.CommonToken = require_Token2().CommonToken;\n  exports.InputStream = require_InputStream();\n  exports.FileStream = require_FileStream();\n  exports.CommonTokenStream = require_CommonTokenStream2();\n  exports.Lexer = require_Lexer2();\n  exports.Parser = require_Parser2();\n  var pc = require_PredictionContext2();\n  exports.PredictionContextCache = pc.PredictionContextCache;\n  exports.ParserRuleContext = require_ParserRuleContext2();\n  exports.Interval = require_IntervalSet2().Interval;\n  exports.IntervalSet = require_IntervalSet2().IntervalSet;\n  exports.Utils = require_Utils2();\n  exports.LL1Analyzer = require_LL1Analyzer2().LL1Analyzer;\n});\n\n// src/antlr/Solidity.tokens\nvar require_Solidity = __commonJS((exports, module2) => {\n  module2.exports = \"./Solidity-EZVQ6AE4.tokens\";\n});\n\n// src/tokens-string.js\nvar require_tokens_string = __commonJS((exports, module2) => {\n  if (typeof BROWSER !== \"undefined\") {\n    module2.exports = require_Solidity();\n  } else {\n    module2.exports = (__webpack_require__(/*! fs */ \"fs\").readFileSync)((__webpack_require__(/*! path */ \"path\").join)(__dirname, \"./antlr/Solidity.tokens\")).toString();\n  }\n});\n\n// src/index.ts\n__markAsModule(exports);\n__export(exports, {\n  ParserError: () => ParserError,\n  parse: () => parse,\n  tokenize: () => tokenize,\n  visit: () => visit\n});\n\n// src/parser.ts\nvar import_antlr4ts = __toModule(require_antlr4ts());\n\n// src/antlr/SolidityLexer.ts\nvar import_ATNDeserializer = __toModule(require_ATNDeserializer());\nvar import_Lexer = __toModule(require_Lexer());\nvar import_LexerATNSimulator = __toModule(require_LexerATNSimulator());\nvar import_VocabularyImpl = __toModule(require_VocabularyImpl());\nvar Utils = __toModule(require_Utils());\nvar _SolidityLexer = class extends import_Lexer.Lexer {\n  get vocabulary() {\n    return _SolidityLexer.VOCABULARY;\n  }\n  constructor(input) {\n    super(input);\n    this._interp = new import_LexerATNSimulator.LexerATNSimulator(_SolidityLexer._ATN, this);\n  }\n  get grammarFileName() {\n    return \"Solidity.g4\";\n  }\n  get ruleNames() {\n    return _SolidityLexer.ruleNames;\n  }\n  get serializedATN() {\n    return _SolidityLexer._serializedATN;\n  }\n  get channelNames() {\n    return _SolidityLexer.channelNames;\n  }\n  get modeNames() {\n    return _SolidityLexer.modeNames;\n  }\n  static get _ATN() {\n    if (!_SolidityLexer.__ATN) {\n      _SolidityLexer.__ATN = new import_ATNDeserializer.ATNDeserializer().deserialize(Utils.toCharArray(_SolidityLexer._serializedATN));\n    }\n    return _SolidityLexer.__ATN;\n  }\n};\nvar SolidityLexer = _SolidityLexer;\nSolidityLexer.T__0 = 1;\nSolidityLexer.T__1 = 2;\nSolidityLexer.T__2 = 3;\nSolidityLexer.T__3 = 4;\nSolidityLexer.T__4 = 5;\nSolidityLexer.T__5 = 6;\nSolidityLexer.T__6 = 7;\nSolidityLexer.T__7 = 8;\nSolidityLexer.T__8 = 9;\nSolidityLexer.T__9 = 10;\nSolidityLexer.T__10 = 11;\nSolidityLexer.T__11 = 12;\nSolidityLexer.T__12 = 13;\nSolidityLexer.T__13 = 14;\nSolidityLexer.T__14 = 15;\nSolidityLexer.T__15 = 16;\nSolidityLexer.T__16 = 17;\nSolidityLexer.T__17 = 18;\nSolidityLexer.T__18 = 19;\nSolidityLexer.T__19 = 20;\nSolidityLexer.T__20 = 21;\nSolidityLexer.T__21 = 22;\nSolidityLexer.T__22 = 23;\nSolidityLexer.T__23 = 24;\nSolidityLexer.T__24 = 25;\nSolidityLexer.T__25 = 26;\nSolidityLexer.T__26 = 27;\nSolidityLexer.T__27 = 28;\nSolidityLexer.T__28 = 29;\nSolidityLexer.T__29 = 30;\nSolidityLexer.T__30 = 31;\nSolidityLexer.T__31 = 32;\nSolidityLexer.T__32 = 33;\nSolidityLexer.T__33 = 34;\nSolidityLexer.T__34 = 35;\nSolidityLexer.T__35 = 36;\nSolidityLexer.T__36 = 37;\nSolidityLexer.T__37 = 38;\nSolidityLexer.T__38 = 39;\nSolidityLexer.T__39 = 40;\nSolidityLexer.T__40 = 41;\nSolidityLexer.T__41 = 42;\nSolidityLexer.T__42 = 43;\nSolidityLexer.T__43 = 44;\nSolidityLexer.T__44 = 45;\nSolidityLexer.T__45 = 46;\nSolidityLexer.T__46 = 47;\nSolidityLexer.T__47 = 48;\nSolidityLexer.T__48 = 49;\nSolidityLexer.T__49 = 50;\nSolidityLexer.T__50 = 51;\nSolidityLexer.T__51 = 52;\nSolidityLexer.T__52 = 53;\nSolidityLexer.T__53 = 54;\nSolidityLexer.T__54 = 55;\nSolidityLexer.T__55 = 56;\nSolidityLexer.T__56 = 57;\nSolidityLexer.T__57 = 58;\nSolidityLexer.T__58 = 59;\nSolidityLexer.T__59 = 60;\nSolidityLexer.T__60 = 61;\nSolidityLexer.T__61 = 62;\nSolidityLexer.T__62 = 63;\nSolidityLexer.T__63 = 64;\nSolidityLexer.T__64 = 65;\nSolidityLexer.T__65 = 66;\nSolidityLexer.T__66 = 67;\nSolidityLexer.T__67 = 68;\nSolidityLexer.T__68 = 69;\nSolidityLexer.T__69 = 70;\nSolidityLexer.T__70 = 71;\nSolidityLexer.T__71 = 72;\nSolidityLexer.T__72 = 73;\nSolidityLexer.T__73 = 74;\nSolidityLexer.T__74 = 75;\nSolidityLexer.T__75 = 76;\nSolidityLexer.T__76 = 77;\nSolidityLexer.T__77 = 78;\nSolidityLexer.T__78 = 79;\nSolidityLexer.T__79 = 80;\nSolidityLexer.T__80 = 81;\nSolidityLexer.T__81 = 82;\nSolidityLexer.T__82 = 83;\nSolidityLexer.T__83 = 84;\nSolidityLexer.T__84 = 85;\nSolidityLexer.T__85 = 86;\nSolidityLexer.T__86 = 87;\nSolidityLexer.T__87 = 88;\nSolidityLexer.T__88 = 89;\nSolidityLexer.T__89 = 90;\nSolidityLexer.T__90 = 91;\nSolidityLexer.T__91 = 92;\nSolidityLexer.T__92 = 93;\nSolidityLexer.T__93 = 94;\nSolidityLexer.T__94 = 95;\nSolidityLexer.T__95 = 96;\nSolidityLexer.T__96 = 97;\nSolidityLexer.Int = 98;\nSolidityLexer.Uint = 99;\nSolidityLexer.Byte = 100;\nSolidityLexer.Fixed = 101;\nSolidityLexer.Ufixed = 102;\nSolidityLexer.BooleanLiteral = 103;\nSolidityLexer.DecimalNumber = 104;\nSolidityLexer.HexNumber = 105;\nSolidityLexer.NumberUnit = 106;\nSolidityLexer.HexLiteralFragment = 107;\nSolidityLexer.ReservedKeyword = 108;\nSolidityLexer.AnonymousKeyword = 109;\nSolidityLexer.BreakKeyword = 110;\nSolidityLexer.ConstantKeyword = 111;\nSolidityLexer.ImmutableKeyword = 112;\nSolidityLexer.ContinueKeyword = 113;\nSolidityLexer.LeaveKeyword = 114;\nSolidityLexer.ExternalKeyword = 115;\nSolidityLexer.IndexedKeyword = 116;\nSolidityLexer.InternalKeyword = 117;\nSolidityLexer.PayableKeyword = 118;\nSolidityLexer.PrivateKeyword = 119;\nSolidityLexer.PublicKeyword = 120;\nSolidityLexer.VirtualKeyword = 121;\nSolidityLexer.PureKeyword = 122;\nSolidityLexer.TypeKeyword = 123;\nSolidityLexer.ViewKeyword = 124;\nSolidityLexer.GlobalKeyword = 125;\nSolidityLexer.ConstructorKeyword = 126;\nSolidityLexer.FallbackKeyword = 127;\nSolidityLexer.ReceiveKeyword = 128;\nSolidityLexer.Identifier = 129;\nSolidityLexer.StringLiteralFragment = 130;\nSolidityLexer.VersionLiteral = 131;\nSolidityLexer.WS = 132;\nSolidityLexer.COMMENT = 133;\nSolidityLexer.LINE_COMMENT = 134;\nSolidityLexer.channelNames = [\n  \"DEFAULT_TOKEN_CHANNEL\",\n  \"HIDDEN\"\n];\nSolidityLexer.modeNames = [\n  \"DEFAULT_MODE\"\n];\nSolidityLexer.ruleNames = [\n  \"T__0\",\n  \"T__1\",\n  \"T__2\",\n  \"T__3\",\n  \"T__4\",\n  \"T__5\",\n  \"T__6\",\n  \"T__7\",\n  \"T__8\",\n  \"T__9\",\n  \"T__10\",\n  \"T__11\",\n  \"T__12\",\n  \"T__13\",\n  \"T__14\",\n  \"T__15\",\n  \"T__16\",\n  \"T__17\",\n  \"T__18\",\n  \"T__19\",\n  \"T__20\",\n  \"T__21\",\n  \"T__22\",\n  \"T__23\",\n  \"T__24\",\n  \"T__25\",\n  \"T__26\",\n  \"T__27\",\n  \"T__28\",\n  \"T__29\",\n  \"T__30\",\n  \"T__31\",\n  \"T__32\",\n  \"T__33\",\n  \"T__34\",\n  \"T__35\",\n  \"T__36\",\n  \"T__37\",\n  \"T__38\",\n  \"T__39\",\n  \"T__40\",\n  \"T__41\",\n  \"T__42\",\n  \"T__43\",\n  \"T__44\",\n  \"T__45\",\n  \"T__46\",\n  \"T__47\",\n  \"T__48\",\n  \"T__49\",\n  \"T__50\",\n  \"T__51\",\n  \"T__52\",\n  \"T__53\",\n  \"T__54\",\n  \"T__55\",\n  \"T__56\",\n  \"T__57\",\n  \"T__58\",\n  \"T__59\",\n  \"T__60\",\n  \"T__61\",\n  \"T__62\",\n  \"T__63\",\n  \"T__64\",\n  \"T__65\",\n  \"T__66\",\n  \"T__67\",\n  \"T__68\",\n  \"T__69\",\n  \"T__70\",\n  \"T__71\",\n  \"T__72\",\n  \"T__73\",\n  \"T__74\",\n  \"T__75\",\n  \"T__76\",\n  \"T__77\",\n  \"T__78\",\n  \"T__79\",\n  \"T__80\",\n  \"T__81\",\n  \"T__82\",\n  \"T__83\",\n  \"T__84\",\n  \"T__85\",\n  \"T__86\",\n  \"T__87\",\n  \"T__88\",\n  \"T__89\",\n  \"T__90\",\n  \"T__91\",\n  \"T__92\",\n  \"T__93\",\n  \"T__94\",\n  \"T__95\",\n  \"T__96\",\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"Ufixed\",\n  \"BooleanLiteral\",\n  \"DecimalNumber\",\n  \"DecimalDigits\",\n  \"HexNumber\",\n  \"HexDigits\",\n  \"NumberUnit\",\n  \"HexLiteralFragment\",\n  \"HexPair\",\n  \"HexCharacter\",\n  \"ReservedKeyword\",\n  \"AnonymousKeyword\",\n  \"BreakKeyword\",\n  \"ConstantKeyword\",\n  \"ImmutableKeyword\",\n  \"ContinueKeyword\",\n  \"LeaveKeyword\",\n  \"ExternalKeyword\",\n  \"IndexedKeyword\",\n  \"InternalKeyword\",\n  \"PayableKeyword\",\n  \"PrivateKeyword\",\n  \"PublicKeyword\",\n  \"VirtualKeyword\",\n  \"PureKeyword\",\n  \"TypeKeyword\",\n  \"ViewKeyword\",\n  \"GlobalKeyword\",\n  \"ConstructorKeyword\",\n  \"FallbackKeyword\",\n  \"ReceiveKeyword\",\n  \"Identifier\",\n  \"IdentifierStart\",\n  \"IdentifierPart\",\n  \"StringLiteralFragment\",\n  \"DoubleQuotedStringCharacter\",\n  \"SingleQuotedStringCharacter\",\n  \"VersionLiteral\",\n  \"WS\",\n  \"COMMENT\",\n  \"LINE_COMMENT\"\n];\nSolidityLexer._LITERAL_NAMES = [\n  void 0,\n  \"'pragma'\",\n  \"';'\",\n  \"'*'\",\n  \"'||'\",\n  \"'^'\",\n  \"'~'\",\n  \"'>='\",\n  \"'>'\",\n  \"'<'\",\n  \"'<='\",\n  \"'='\",\n  \"'as'\",\n  \"'import'\",\n  \"'from'\",\n  \"'{'\",\n  \"','\",\n  \"'}'\",\n  \"'abstract'\",\n  \"'contract'\",\n  \"'interface'\",\n  \"'library'\",\n  \"'is'\",\n  \"'('\",\n  \"')'\",\n  \"'error'\",\n  \"'using'\",\n  \"'for'\",\n  \"'struct'\",\n  \"'modifier'\",\n  \"'function'\",\n  \"'returns'\",\n  \"'event'\",\n  \"'enum'\",\n  \"'['\",\n  \"']'\",\n  \"'address'\",\n  \"'.'\",\n  \"'mapping'\",\n  \"'=>'\",\n  \"'memory'\",\n  \"'storage'\",\n  \"'calldata'\",\n  \"'if'\",\n  \"'else'\",\n  \"'try'\",\n  \"'catch'\",\n  \"'while'\",\n  \"'unchecked'\",\n  \"'assembly'\",\n  \"'do'\",\n  \"'return'\",\n  \"'throw'\",\n  \"'emit'\",\n  \"'revert'\",\n  \"'var'\",\n  \"'bool'\",\n  \"'string'\",\n  \"'byte'\",\n  \"'++'\",\n  \"'--'\",\n  \"'new'\",\n  \"':'\",\n  \"'+'\",\n  \"'-'\",\n  \"'after'\",\n  \"'delete'\",\n  \"'!'\",\n  \"'**'\",\n  \"'/'\",\n  \"'%'\",\n  \"'<<'\",\n  \"'>>'\",\n  \"'&'\",\n  \"'|'\",\n  \"'=='\",\n  \"'!='\",\n  \"'&&'\",\n  \"'?'\",\n  \"'|='\",\n  \"'^='\",\n  \"'&='\",\n  \"'<<='\",\n  \"'>>='\",\n  \"'+='\",\n  \"'-='\",\n  \"'*='\",\n  \"'/='\",\n  \"'%='\",\n  \"'let'\",\n  \"':='\",\n  \"'=:'\",\n  \"'switch'\",\n  \"'case'\",\n  \"'default'\",\n  \"'->'\",\n  \"'callback'\",\n  \"'override'\",\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  \"'anonymous'\",\n  \"'break'\",\n  \"'constant'\",\n  \"'immutable'\",\n  \"'continue'\",\n  \"'leave'\",\n  \"'external'\",\n  \"'indexed'\",\n  \"'internal'\",\n  \"'payable'\",\n  \"'private'\",\n  \"'public'\",\n  \"'virtual'\",\n  \"'pure'\",\n  \"'type'\",\n  \"'view'\",\n  \"'global'\",\n  \"'constructor'\",\n  \"'fallback'\",\n  \"'receive'\"\n];\nSolidityLexer._SYMBOLIC_NAMES = [\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"Ufixed\",\n  \"BooleanLiteral\",\n  \"DecimalNumber\",\n  \"HexNumber\",\n  \"NumberUnit\",\n  \"HexLiteralFragment\",\n  \"ReservedKeyword\",\n  \"AnonymousKeyword\",\n  \"BreakKeyword\",\n  \"ConstantKeyword\",\n  \"ImmutableKeyword\",\n  \"ContinueKeyword\",\n  \"LeaveKeyword\",\n  \"ExternalKeyword\",\n  \"IndexedKeyword\",\n  \"InternalKeyword\",\n  \"PayableKeyword\",\n  \"PrivateKeyword\",\n  \"PublicKeyword\",\n  \"VirtualKeyword\",\n  \"PureKeyword\",\n  \"TypeKeyword\",\n  \"ViewKeyword\",\n  \"GlobalKeyword\",\n  \"ConstructorKeyword\",\n  \"FallbackKeyword\",\n  \"ReceiveKeyword\",\n  \"Identifier\",\n  \"StringLiteralFragment\",\n  \"VersionLiteral\",\n  \"WS\",\n  \"COMMENT\",\n  \"LINE_COMMENT\"\n];\nSolidityLexer.VOCABULARY = new import_VocabularyImpl.VocabularyImpl(_SolidityLexer._LITERAL_NAMES, _SolidityLexer._SYMBOLIC_NAMES, []);\nSolidityLexer._serializedATNSegments = 4;\nSolidityLexer._serializedATNSegment0 = `\u0003\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\u0002\\x88\\u0757\\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\\x07\t\\x07\u0004\\b\t\\b\u0004\t\t\t\u0004\n\t\n\u0004\\v\t\\v\u0004\\f\t\\f\u0004\\r\t\\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\\\t\\\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004\\`\t\\`\u0004a\ta\u0004b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\\x7F\t\\x7F\u0004\\x80\t\\x80\u0004\\x81\t\\x81\u0004\\x82\t\\x82\u0004\\x83\t\\x83\u0004\\x84\t\\x84\u0004\\x85\t\\x85\u0004\\x86\t\\x86\u0004\\x87\t\\x87\u0004\\x88\t\\x88\u0004\\x89\t\\x89\u0004\\x8A\t\\x8A\u0004\\x8B\t\\x8B\u0004\\x8C\t\\x8C\u0004\\x8D\t\\x8D\u0004\\x8E\t\\x8E\u0004\\x8F\t\\x8F\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\\x07\u0003\\x07\u0003\\b\u0003\\b\u0003\\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\\v\u0003\\v\u0003\\v\u0003\\f\u0003\\f\u0003\\r\u0003\\r\u0003\\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00035\u00035\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003@\u0003@\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003E\u0003F\u0003F\u0003G\u0003G\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003J\u0003J\u0003K\u0003K\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003N\u0003N\u0003N\u0003O\u0003O\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003\\\\\u0003\\\\\u0003\\\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003\\`\u0003\\`\u0003\\`\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\\u038B\nc\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0005d\\u0464\nd\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\\u0542\ne\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0006f\\u0550\nf\\rf\u000ef\\u0551\u0003f\u0003f\u0006f\\u0556\nf\\rf\u000ef\\u0557\u0005f\\u055A\nf\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0006g\\u056A\ng\\rg\u000eg\\u056B\u0003g\u0003g\u0006g\\u0570\ng\\rg\u000eg\\u0571\u0005g\\u0574\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\\u057F\nh\u0003i\u0003i\u0005i\\u0583\ni\u0003i\u0003i\u0005i\\u0587\ni\u0003i\u0003i\u0005i\\u058B\ni\u0003j\u0003j\u0005j\\u058F\nj\u0003j\\x07j\\u0592\nj\\fj\u000ej\\u0595\\vj\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0005l\\u059D\nl\u0003l\\x07l\\u05A0\nl\\fl\u000el\\u05A3\\vl\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\\u05DD\nm\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0005n\\u05E5\nn\u0003n\u0003n\u0003n\u0005n\\u05EA\nn\u0003n\u0005n\\u05ED\nn\u0003o\u0003o\u0003o\u0003p\u0003p\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0005q\\u064C\nq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003\\x7F\u0003\\x7F\u0003\\x7F\u0003\\x7F\u0003\\x7F\u0003\\x80\u0003\\x80\u0003\\x80\u0003\\x80\u0003\\x80\u0003\\x81\u0003\\x81\u0003\\x81\u0003\\x81\u0003\\x81\u0003\\x82\u0003\\x82\u0003\\x82\u0003\\x82\u0003\\x82\u0003\\x82\u0003\\x82\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x83\u0003\\x84\u0003\\x84\u0003\\x84\u0003\\x84\u0003\\x84\u0003\\x84\u0003\\x84\u0003\\x84\u0003\\x84\u0003\\x85\u0003\\x85\u0003\\x85\u0003\\x85\u0003\\x85\u0003\\x85\u0003\\x85\u0003\\x85\u0003\\x86\u0003\\x86\\x07\\x86\\u06EE\n\\x86\\f\\x86\u000e\\x86\\u06F1\\v\\x86\u0003\\x87\u0003\\x87\u0003\\x88\u0003\\x88\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0005\\x89\\u06FE\n\\x89\u0003\\x89\u0003\\x89\\x07\\x89\\u0702\n\\x89\\f\\x89\u000e\\x89\\u0705\\v\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0003\\x89\u0005\\x89\\u070F\n\\x89\u0003\\x89\u0003\\x89\\x07\\x89\\u0713\n\\x89\\f\\x89\u000e\\x89\\u0716\\v\\x89\u0003\\x89\u0005\\x89\\u0719\n\\x89\u0003\\x8A\u0003\\x8A\u0003\\x8A\u0005\\x8A\\u071E\n\\x8A\u0003\\x8B\u0003\\x8B\u0003\\x8B\u0005\\x8B\\u0723\n\\x8B\u0003\\x8C\u0006\\x8C\\u0726\n\\x8C\\r\\x8C\u000e\\x8C\\u0727\u0003\\x8C\u0003\\x8C\u0006\\x8C\\u072C\n\\x8C\\r\\x8C\u000e\\x8C\\u072D\u0003\\x8C\u0003\\x8C\u0006\\x8C\\u0732\n\\x8C\\r\\x8C\u000e\\x8C\\u0733\u0005\\x8C\\u0736\n\\x8C\u0003\\x8D\u0006\\x8D\\u0739\n\\x8D\\r\\x8D\u000e\\x8D\\u073A\u0003\\x8D\u0003\\x8D\u0003\\x8E\u0003\\x8E\u0003\\x8E\u0003\\x8E\\x07\\x8E\\u0743\n\\x8E\\f\\x8E\u000e\\x8E\\u0746\\v\\x8E\u0003\\x8E\u0003\\x8E\u0003\\x8E\u0003\\x8E\u0003\\x8E\u0003\\x8F\u0003\\x8F\u0003\\x8F\u0003\\x8F\\x07\\x8F\\u0751\n\\x8F\\f\\x8F\u000e\\x8F\\u0754\\v\\x8F\u0003\\x8F\u0003\\x8F\u0003\\u0744\u0002\u0002\\x90\u0003\u0002\u0003\u0005\u0002\u0004\\x07\u0002\u0005\t\u0002\u0006\\v\u0002\\x07\\r\u0002\\b\u000f\u0002\t\u0011\u0002\n\u0013\u0002\\v\u0015\u0002\\f\u0017\u0002\\r\u0019\u0002\u000e\u001b\u0002\u000f\u001d\u0002\u0010\u001f\u0002\u0011!\u0002\u0012#\u0002\u0013%\u0002\u0014'\u0002\u0015)\u0002\u0016+\u0002\u0017-\u0002\u0018/\u0002\u00191\u0002\u001a3\u0002\u001b5\u0002\u001c7\u0002\u001d9\u0002\u001e;\u0002\u001f=\u0002 ?\u0002!A\u0002\"C\u0002#E\u0002$G\u0002%I\u0002&K\u0002'M\u0002(O\u0002)Q\u0002*S\u0002+U\u0002,W\u0002-Y\u0002.[\u0002/]\u00020_\u00021a\u00022c\u00023e\u00024g\u00025i\u00026k\u00027m\u00028o\u00029q\u0002:s\u0002;u\u0002<w\u0002=y\u0002>{\u0002?}\u0002@\\x7F\u0002A\\x81\u0002B\\x83\u0002C\\x85\u0002D\\x87\u0002E\\x89\u0002F\\x8B\u0002G\\x8D\u0002H\\x8F\u0002I\\x91\u0002J\\x93\u0002K\\x95\u0002L\\x97\u0002M\\x99\u0002N\\x9B\u0002O\\x9D\u0002P\\x9F\u0002Q\\xA1\u0002R\\xA3\u0002S\\xA5\u0002T\\xA7\u0002U\\xA9\u0002V\\xAB\u0002W\\xAD\u0002X\\xAF\u0002Y\\xB1\u0002Z\\xB3\u0002[\\xB5\u0002\\\\\\xB7\u0002]\\xB9\u0002^\\xBB\u0002_\\xBD\u0002\\`\\xBF\u0002a\\xC1\u0002b\\xC3\u0002c\\xC5\u0002d\\xC7\u0002e\\xC9\u0002f\\xCB\u0002g\\xCD\u0002h\\xCF\u0002i\\xD1\u0002j\\xD3\u0002\u0002\\xD5\u0002k\\xD7\u0002\u0002\\xD9\u0002l\\xDB\u0002m\\xDD\u0002\u0002\\xDF\u0002\u0002\\xE1\u0002n\\xE3\u0002o\\xE5\u0002p\\xE7\u0002q\\xE9\u0002r\\xEB\u0002s\\xED\u0002t\\xEF\u0002u\\xF1\u0002v\\xF3\u0002w\\xF5\u0002x\\xF7\u0002y\\xF9\u0002z\\xFB\u0002{\\xFD\u0002|\\xFF\u0002}\\u0101\u0002~\\u0103\u0002\\x7F\\u0105\u0002\\x80\\u0107\u0002\\x81\\u0109\u0002\\x82\\u010B\u0002\\x83\\u010D\u0002\u0002\\u010F\u0002\u0002\\u0111\u0002\\x84\\u0113\u0002\u0002\\u0115\u0002\u0002\\u0117\u0002\\x85\\u0119\u0002\\x86\\u011B\u0002\\x87\\u011D\u0002\\x88\u0003\u0002\\f\u0003\u00022;\u0004\u0002GGgg\u0004\u0002ZZzz\u0005\u00022;CHch\u0006\u0002&&C\\\\aac|\\x07\u0002&&2;C\\\\aac|\u0006\u0002\\f\\f\u000f\u000f$$^^\u0006\u0002\\f\\f\u000f\u000f))^^\u0005\u0002\\v\\f\u000e\u000f\"\"\u0004\u0002\\f\\f\u000f\u000f\u0002\\u07E8\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002\\x07\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002\\v\u0003\u0002\u0002\u0002\u0002\\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u00027\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003\u0002\u0002\u0002\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002\u0002\u0002\u0002A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002\u0002\u0002\u0002E\u0003\u0002\u0002\u0002\u0002G\u0003\u0002\u0002\u0002\u0002I\u0003\u0002\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002M\u0003\u0002\u0002\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003\u0002\u0002\u0002\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002\u0002\u0002\u0002W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002\u0002\u0002[\u0003\u0002\u0002\u0002\u0002]\u0003\u0002\u0002\u0002\u0002_\u0003\u0002\u0002\u0002\u0002a\u0003\u0002\u0002\u0002\u0002c\u0003\u0002\u0002\u0002\u0002e\u0003\u0002\u0002\u0002\u0002g\u0003\u0002\u0002\u0002\u0002i\u0003\u0002\u0002\u0002\u0002k\u0003\u0002\u0002\u0002\u0002m\u0003\u0002\u0002\u0002\u0002o\u0003\u0002\u0002\u0002\u0002q\u0003\u0002\u0002\u0002\u0002s\u0003\u0002\u0002\u0002\u0002u\u0003\u0002\u0002\u0002\u0002w\u0003\u0002\u0002\u0002\u0002y\u0003\u0002\u0002\u0002\u0002{\u0003\u0002\u0002\u0002\u0002}\u0003\u0002\u0002\u0002\u0002\\x7F\u0003\u0002\u0002\u0002\u0002\\x81\u0003\u0002\u0002\u0002\u0002\\x83\u0003\u0002\u0002\u0002\u0002\\x85\u0003\u0002\u0002\u0002\u0002\\x87\u0003\u0002\u0002\u0002\u0002\\x89\u0003\u0002\u0002\u0002\u0002\\x8B\u0003\u0002\u0002\u0002\u0002\\x8D\u0003\u0002\u0002\u0002\u0002\\x8F\u0003\u0002\u0002\u0002\u0002\\x91\u0003\u0002\u0002\u0002\u0002\\x93\u0003\u0002\u0002\u0002\u0002\\x95\u0003\u0002\u0002\u0002\u0002\\x97\u0003\u0002\u0002\u0002\u0002\\x99\u0003\u0002\u0002\u0002\u0002\\x9B\u0003\u0002\u0002\u0002\u0002\\x9D\u0003\u0002\u0002\u0002\u0002\\x9F\u0003\u0002\u0002\u0002\u0002\\xA1\u0003\u0002\u0002\u0002\u0002\\xA3\u0003\u0002\u0002\u0002\u0002\\xA5\u0003\u0002\u0002\u0002\u0002\\xA7\u0003\u0002\u0002\u0002\u0002\\xA9\u0003\u0002\u0002\u0002\u0002\\xAB\u0003\u0002\u0002\u0002\u0002\\xAD\u0003\u0002\u0002\u0002\u0002\\xAF\u0003\u0002\u0002\u0002\u0002\\xB1\u0003\u0002\u0002\u0002\u0002\\xB3\u0003\u0002\u0002\u0002\u0002\\xB5\u0003\u0002\u0002\u0002\u0002\\xB7\u0003\u0002\u0002\u0002\u0002\\xB9\u0003\u0002\u0002\u0002\u0002\\xBB\u0003\u0002\u0002\u0002\u0002\\xBD\u0003\u0002\u0002\u0002\u0002\\xBF\u0003\u0002\u0002\u0002\u0002\\xC1\u0003\u0002\u0002\u0002\u0002\\xC3\u0003\u0002\u0002\u0002\u0002\\xC5\u0003\u0002\u0002\u0002\u0002\\xC7\u0003\u0002\u0002\u0002\u0002\\xC9\u0003\u0002\u0002\u0002\u0002\\xCB\u0003\u0002\u0002\u0002\u0002\\xCD\u0003\u0002\u0002\u0002\u0002\\xCF\u0003\u0002\u0002\u0002\u0002\\xD1\u0003\u0002\u0002\u0002\u0002\\xD5\u0003\u0002\u0002\u0002\u0002\\xD9\u0003\u0002\u0002\u0002\u0002\\xDB\u0003\u0002\u0002\u0002\u0002\\xE1\u0003\u0002\u0002\u0002\u0002\\xE3\u0003\u0002\u0002\u0002\u0002\\xE5\u0003\u0002\u0002\u0002\u0002\\xE7\u0003\u0002\u0002\u0002`;\nSolidityLexer._serializedATNSegment1 = \"\u0002\\xE9\u0003\u0002\u0002\u0002\u0002\\xEB\u0003\u0002\u0002\u0002\u0002\\xED\u0003\u0002\u0002\u0002\u0002\\xEF\u0003\u0002\u0002\u0002\u0002\\xF1\u0003\u0002\u0002\u0002\u0002\\xF3\u0003\u0002\u0002\u0002\u0002\\xF5\u0003\u0002\u0002\u0002\u0002\\xF7\u0003\u0002\u0002\u0002\u0002\\xF9\u0003\u0002\u0002\u0002\u0002\\xFB\u0003\u0002\u0002\u0002\u0002\\xFD\u0003\u0002\u0002\u0002\u0002\\xFF\u0003\u0002\u0002\u0002\u0002\\u0101\u0003\u0002\u0002\u0002\u0002\\u0103\u0003\u0002\u0002\u0002\u0002\\u0105\u0003\u0002\u0002\u0002\u0002\\u0107\u0003\u0002\u0002\u0002\u0002\\u0109\u0003\u0002\u0002\u0002\u0002\\u010B\u0003\u0002\u0002\u0002\u0002\\u0111\u0003\u0002\u0002\u0002\u0002\\u0117\u0003\u0002\u0002\u0002\u0002\\u0119\u0003\u0002\u0002\u0002\u0002\\u011B\u0003\u0002\u0002\u0002\u0002\\u011D\u0003\u0002\u0002\u0002\u0003\\u011F\u0003\u0002\u0002\u0002\u0005\\u0126\u0003\u0002\u0002\u0002\\x07\\u0128\u0003\u0002\u0002\u0002\t\\u012A\u0003\u0002\u0002\u0002\\v\\u012D\u0003\u0002\u0002\u0002\\r\\u012F\u0003\u0002\u0002\u0002\u000f\\u0131\u0003\u0002\u0002\u0002\u0011\\u0134\u0003\u0002\u0002\u0002\u0013\\u0136\u0003\u0002\u0002\u0002\u0015\\u0138\u0003\u0002\u0002\u0002\u0017\\u013B\u0003\u0002\u0002\u0002\u0019\\u013D\u0003\u0002\u0002\u0002\u001b\\u0140\u0003\u0002\u0002\u0002\u001d\\u0147\u0003\u0002\u0002\u0002\u001f\\u014C\u0003\u0002\u0002\u0002!\\u014E\u0003\u0002\u0002\u0002#\\u0150\u0003\u0002\u0002\u0002%\\u0152\u0003\u0002\u0002\u0002'\\u015B\u0003\u0002\u0002\u0002)\\u0164\u0003\u0002\u0002\u0002+\\u016E\u0003\u0002\u0002\u0002-\\u0176\u0003\u0002\u0002\u0002/\\u0179\u0003\u0002\u0002\u00021\\u017B\u0003\u0002\u0002\u00023\\u017D\u0003\u0002\u0002\u00025\\u0183\u0003\u0002\u0002\u00027\\u0189\u0003\u0002\u0002\u00029\\u018D\u0003\u0002\u0002\u0002;\\u0194\u0003\u0002\u0002\u0002=\\u019D\u0003\u0002\u0002\u0002?\\u01A6\u0003\u0002\u0002\u0002A\\u01AE\u0003\u0002\u0002\u0002C\\u01B4\u0003\u0002\u0002\u0002E\\u01B9\u0003\u0002\u0002\u0002G\\u01BB\u0003\u0002\u0002\u0002I\\u01BD\u0003\u0002\u0002\u0002K\\u01C5\u0003\u0002\u0002\u0002M\\u01C7\u0003\u0002\u0002\u0002O\\u01CF\u0003\u0002\u0002\u0002Q\\u01D2\u0003\u0002\u0002\u0002S\\u01D9\u0003\u0002\u0002\u0002U\\u01E1\u0003\u0002\u0002\u0002W\\u01EA\u0003\u0002\u0002\u0002Y\\u01ED\u0003\u0002\u0002\u0002[\\u01F2\u0003\u0002\u0002\u0002]\\u01F6\u0003\u0002\u0002\u0002_\\u01FC\u0003\u0002\u0002\u0002a\\u0202\u0003\u0002\u0002\u0002c\\u020C\u0003\u0002\u0002\u0002e\\u0215\u0003\u0002\u0002\u0002g\\u0218\u0003\u0002\u0002\u0002i\\u021F\u0003\u0002\u0002\u0002k\\u0225\u0003\u0002\u0002\u0002m\\u022A\u0003\u0002\u0002\u0002o\\u0231\u0003\u0002\u0002\u0002q\\u0235\u0003\u0002\u0002\u0002s\\u023A\u0003\u0002\u0002\u0002u\\u0241\u0003\u0002\u0002\u0002w\\u0246\u0003\u0002\u0002\u0002y\\u0249\u0003\u0002\u0002\u0002{\\u024C\u0003\u0002\u0002\u0002}\\u0250\u0003\u0002\u0002\u0002\\x7F\\u0252\u0003\u0002\u0002\u0002\\x81\\u0254\u0003\u0002\u0002\u0002\\x83\\u0256\u0003\u0002\u0002\u0002\\x85\\u025C\u0003\u0002\u0002\u0002\\x87\\u0263\u0003\u0002\u0002\u0002\\x89\\u0265\u0003\u0002\u0002\u0002\\x8B\\u0268\u0003\u0002\u0002\u0002\\x8D\\u026A\u0003\u0002\u0002\u0002\\x8F\\u026C\u0003\u0002\u0002\u0002\\x91\\u026F\u0003\u0002\u0002\u0002\\x93\\u0272\u0003\u0002\u0002\u0002\\x95\\u0274\u0003\u0002\u0002\u0002\\x97\\u0276\u0003\u0002\u0002\u0002\\x99\\u0279\u0003\u0002\u0002\u0002\\x9B\\u027C\u0003\u0002\u0002\u0002\\x9D\\u027F\u0003\u0002\u0002\u0002\\x9F\\u0281\u0003\u0002\u0002\u0002\\xA1\\u0284\u0003\u0002\u0002\u0002\\xA3\\u0287\u0003\u0002\u0002\u0002\\xA5\\u028A\u0003\u0002\u0002\u0002\\xA7\\u028E\u0003\u0002\u0002\u0002\\xA9\\u0292\u0003\u0002\u0002\u0002\\xAB\\u0295\u0003\u0002\u0002\u0002\\xAD\\u0298\u0003\u0002\u0002\u0002\\xAF\\u029B\u0003\u0002\u0002\u0002\\xB1\\u029E\u0003\u0002\u0002\u0002\\xB3\\u02A1\u0003\u0002\u0002\u0002\\xB5\\u02A5\u0003\u0002\u0002\u0002\\xB7\\u02A8\u0003\u0002\u0002\u0002\\xB9\\u02AB\u0003\u0002\u0002\u0002\\xBB\\u02B2\u0003\u0002\u0002\u0002\\xBD\\u02B7\u0003\u0002\u0002\u0002\\xBF\\u02BF\u0003\u0002\u0002\u0002\\xC1\\u02C2\u0003\u0002\u0002\u0002\\xC3\\u02CB\u0003\u0002\u0002\u0002\\xC5\\u038A\u0003\u0002\u0002\u0002\\xC7\\u0463\u0003\u0002\u0002\u0002\\xC9\\u0541\u0003\u0002\u0002\u0002\\xCB\\u0559\u0003\u0002\u0002\u0002\\xCD\\u0573\u0003\u0002\u0002\u0002\\xCF\\u057E\u0003\u0002\u0002\u0002\\xD1\\u0586\u0003\u0002\u0002\u0002\\xD3\\u058C\u0003\u0002\u0002\u0002\\xD5\\u0596\u0003\u0002\u0002\u0002\\xD7\\u059A\u0003\u0002\u0002\u0002\\xD9\\u05DC\u0003\u0002\u0002\u0002\\xDB\\u05DE\u0003\u0002\u0002\u0002\\xDD\\u05EE\u0003\u0002\u0002\u0002\\xDF\\u05F1\u0003\u0002\u0002\u0002\\xE1\\u064B\u0003\u0002\u0002\u0002\\xE3\\u064D\u0003\u0002\u0002\u0002\\xE5\\u0657\u0003\u0002\u0002\u0002\\xE7\\u065D\u0003\u0002\u0002\u0002\\xE9\\u0666\u0003\u0002\u0002\u0002\\xEB\\u0670\u0003\u0002\u0002\u0002\\xED\\u0679\u0003\u0002\u0002\u0002\\xEF\\u067F\u0003\u0002\u0002\u0002\\xF1\\u0688\u0003\u0002\u0002\u0002\\xF3\\u0690\u0003\u0002\u0002\u0002\\xF5\\u0699\u0003\u0002\u0002\u0002\\xF7\\u06A1\u0003\u0002\u0002\u0002\\xF9\\u06A9\u0003\u0002\u0002\u0002\\xFB\\u06B0\u0003\u0002\u0002\u0002\\xFD\\u06B8\u0003\u0002\u0002\u0002\\xFF\\u06BD\u0003\u0002\u0002\u0002\\u0101\\u06C2\u0003\u0002\u0002\u0002\\u0103\\u06C7\u0003\u0002\u0002\u0002\\u0105\\u06CE\u0003\u0002\u0002\u0002\\u0107\\u06DA\u0003\u0002\u0002\u0002\\u0109\\u06E3\u0003\u0002\u0002\u0002\\u010B\\u06EB\u0003\u0002\u0002\u0002\\u010D\\u06F2\u0003\u0002\u0002\u0002\\u010F\\u06F4\u0003\u0002\u0002\u0002\\u0111\\u0718\u0003\u0002\u0002\u0002\\u0113\\u071D\u0003\u0002\u0002\u0002\\u0115\\u0722\u0003\u0002\u0002\u0002\\u0117\\u0725\u0003\u0002\u0002\u0002\\u0119\\u0738\u0003\u0002\u0002\u0002\\u011B\\u073E\u0003\u0002\u0002\u0002\\u011D\\u074C\u0003\u0002\u0002\u0002\\u011F\\u0120\\x07r\u0002\u0002\\u0120\\u0121\\x07t\u0002\u0002\\u0121\\u0122\\x07c\u0002\u0002\\u0122\\u0123\\x07i\u0002\u0002\\u0123\\u0124\\x07o\u0002\u0002\\u0124\\u0125\\x07c\u0002\u0002\\u0125\u0004\u0003\u0002\u0002\u0002\\u0126\\u0127\\x07=\u0002\u0002\\u0127\u0006\u0003\u0002\u0002\u0002\\u0128\\u0129\\x07,\u0002\u0002\\u0129\\b\u0003\u0002\u0002\u0002\\u012A\\u012B\\x07~\u0002\u0002\\u012B\\u012C\\x07~\u0002\u0002\\u012C\\n\u0003\u0002\u0002\u0002\\u012D\\u012E\\x07`\u0002\u0002\\u012E\\f\u0003\u0002\u0002\u0002\\u012F\\u0130\\x07\\x80\u0002\u0002\\u0130\u000e\u0003\u0002\u0002\u0002\\u0131\\u0132\\x07@\u0002\u0002\\u0132\\u0133\\x07?\u0002\u0002\\u0133\u0010\u0003\u0002\u0002\u0002\\u0134\\u0135\\x07@\u0002\u0002\\u0135\u0012\u0003\u0002\u0002\u0002\\u0136\\u0137\\x07>\u0002\u0002\\u0137\u0014\u0003\u0002\u0002\u0002\\u0138\\u0139\\x07>\u0002\u0002\\u0139\\u013A\\x07?\u0002\u0002\\u013A\u0016\u0003\u0002\u0002\u0002\\u013B\\u013C\\x07?\u0002\u0002\\u013C\u0018\u0003\u0002\u0002\u0002\\u013D\\u013E\\x07c\u0002\u0002\\u013E\\u013F\\x07u\u0002\u0002\\u013F\u001a\u0003\u0002\u0002\u0002\\u0140\\u0141\\x07k\u0002\u0002\\u0141\\u0142\\x07o\u0002\u0002\\u0142\\u0143\\x07r\u0002\u0002\\u0143\\u0144\\x07q\u0002\u0002\\u0144\\u0145\\x07t\u0002\u0002\\u0145\\u0146\\x07v\u0002\u0002\\u0146\u001c\u0003\u0002\u0002\u0002\\u0147\\u0148\\x07h\u0002\u0002\\u0148\\u0149\\x07t\u0002\u0002\\u0149\\u014A\\x07q\u0002\u0002\\u014A\\u014B\\x07o\u0002\u0002\\u014B\u001e\u0003\u0002\u0002\u0002\\u014C\\u014D\\x07}\u0002\u0002\\u014D \u0003\u0002\u0002\u0002\\u014E\\u014F\\x07.\u0002\u0002\\u014F\\\"\u0003\u0002\u0002\u0002\\u0150\\u0151\\x07\\x7F\u0002\u0002\\u0151$\u0003\u0002\u0002\u0002\\u0152\\u0153\\x07c\u0002\u0002\\u0153\\u0154\\x07d\u0002\u0002\\u0154\\u0155\\x07u\u0002\u0002\\u0155\\u0156\\x07v\u0002\u0002\\u0156\\u0157\\x07t\u0002\u0002\\u0157\\u0158\\x07c\u0002\u0002\\u0158\\u0159\\x07e\u0002\u0002\\u0159\\u015A\\x07v\u0002\u0002\\u015A&\u0003\u0002\u0002\u0002\\u015B\\u015C\\x07e\u0002\u0002\\u015C\\u015D\\x07q\u0002\u0002\\u015D\\u015E\\x07p\u0002\u0002\\u015E\\u015F\\x07v\u0002\u0002\\u015F\\u0160\\x07t\u0002\u0002\\u0160\\u0161\\x07c\u0002\u0002\\u0161\\u0162\\x07e\u0002\u0002\\u0162\\u0163\\x07v\u0002\u0002\\u0163(\u0003\u0002\u0002\u0002\\u0164\\u0165\\x07k\u0002\u0002\\u0165\\u0166\\x07p\u0002\u0002\\u0166\\u0167\\x07v\u0002\u0002\\u0167\\u0168\\x07g\u0002\u0002\\u0168\\u0169\\x07t\u0002\u0002\\u0169\\u016A\\x07h\u0002\u0002\\u016A\\u016B\\x07c\u0002\u0002\\u016B\\u016C\\x07e\u0002\u0002\\u016C\\u016D\\x07g\u0002\u0002\\u016D*\u0003\u0002\u0002\u0002\\u016E\\u016F\\x07n\u0002\u0002\\u016F\\u0170\\x07k\u0002\u0002\\u0170\\u0171\\x07d\u0002\u0002\\u0171\\u0172\\x07t\u0002\u0002\\u0172\\u0173\\x07c\u0002\u0002\\u0173\\u0174\\x07t\u0002\u0002\\u0174\\u0175\\x07{\u0002\u0002\\u0175,\u0003\u0002\u0002\u0002\\u0176\\u0177\\x07k\u0002\u0002\\u0177\\u0178\\x07u\u0002\u0002\\u0178.\u0003\u0002\u0002\u0002\\u0179\\u017A\\x07*\u0002\u0002\\u017A0\u0003\u0002\u0002\u0002\\u017B\\u017C\\x07+\u0002\u0002\\u017C2\u0003\u0002\u0002\u0002\\u017D\\u017E\\x07g\u0002\u0002\\u017E\\u017F\\x07t\u0002\u0002\\u017F\\u0180\\x07t\u0002\u0002\\u0180\\u0181\\x07q\u0002\u0002\\u0181\\u0182\\x07t\u0002\u0002\\u01824\u0003\u0002\u0002\u0002\\u0183\\u0184\\x07w\u0002\u0002\\u0184\\u0185\\x07u\u0002\u0002\\u0185\\u0186\\x07k\u0002\u0002\\u0186\\u0187\\x07p\u0002\u0002\\u0187\\u0188\\x07i\u0002\u0002\\u01886\u0003\u0002\u0002\u0002\\u0189\\u018A\\x07h\u0002\u0002\\u018A\\u018B\\x07q\u0002\u0002\\u018B\\u018C\\x07t\u0002\u0002\\u018C8\u0003\u0002\u0002\u0002\\u018D\\u018E\\x07u\u0002\u0002\\u018E\\u018F\\x07v\u0002\u0002\\u018F\\u0190\\x07t\u0002\u0002\\u0190\\u0191\\x07w\u0002\u0002\\u0191\\u0192\\x07e\u0002\u0002\\u0192\\u0193\\x07v\u0002\u0002\\u0193:\u0003\u0002\u0002\u0002\\u0194\\u0195\\x07o\u0002\u0002\\u0195\\u0196\\x07q\u0002\u0002\\u0196\\u0197\\x07f\u0002\u0002\\u0197\\u0198\\x07k\u0002\u0002\\u0198\\u0199\\x07h\u0002\u0002\\u0199\\u019A\\x07k\u0002\u0002\\u019A\\u019B\\x07g\u0002\u0002\\u019B\\u019C\\x07t\u0002\u0002\\u019C<\u0003\u0002\u0002\u0002\\u019D\\u019E\\x07h\u0002\u0002\\u019E\\u019F\\x07w\u0002\u0002\\u019F\\u01A0\\x07p\u0002\u0002\\u01A0\\u01A1\\x07e\u0002\u0002\\u01A1\\u01A2\\x07v\u0002\u0002\\u01A2\\u01A3\\x07k\u0002\u0002\\u01A3\\u01A4\\x07q\u0002\u0002\\u01A4\\u01A5\\x07p\u0002\u0002\\u01A5>\u0003\u0002\u0002\u0002\\u01A6\\u01A7\\x07t\u0002\u0002\\u01A7\\u01A8\\x07g\u0002\u0002\\u01A8\\u01A9\\x07v\u0002\u0002\\u01A9\\u01AA\\x07w\u0002\u0002\\u01AA\\u01AB\\x07t\u0002\u0002\\u01AB\\u01AC\\x07p\u0002\u0002\\u01AC\\u01AD\\x07u\u0002\u0002\\u01AD@\u0003\u0002\u0002\u0002\\u01AE\\u01AF\\x07g\u0002\u0002\\u01AF\\u01B0\\x07x\u0002\u0002\\u01B0\\u01B1\\x07g\u0002\u0002\\u01B1\\u01B2\\x07p\u0002\u0002\\u01B2\\u01B3\\x07v\u0002\u0002\\u01B3B\u0003\u0002\u0002\u0002\\u01B4\\u01B5\\x07g\u0002\u0002\\u01B5\\u01B6\\x07p\u0002\u0002\\u01B6\\u01B7\\x07w\u0002\u0002\\u01B7\\u01B8\\x07o\u0002\u0002\\u01B8D\u0003\u0002\u0002\u0002\\u01B9\\u01BA\\x07]\u0002\u0002\\u01BAF\u0003\u0002\u0002\u0002\\u01BB\\u01BC\\x07_\u0002\u0002\\u01BCH\u0003\u0002\u0002\u0002\\u01BD\\u01BE\\x07c\u0002\u0002\\u01BE\\u01BF\\x07f\u0002\u0002\\u01BF\\u01C0\\x07f\u0002\u0002\\u01C0\\u01C1\\x07t\u0002\u0002\\u01C1\\u01C2\\x07g\u0002\u0002\\u01C2\\u01C3\\x07u\u0002\u0002\\u01C3\\u01C4\\x07u\u0002\u0002\\u01C4J\u0003\u0002\u0002\u0002\\u01C5\\u01C6\\x070\u0002\u0002\\u01C6L\u0003\u0002\u0002\u0002\\u01C7\\u01C8\\x07o\u0002\u0002\\u01C8\\u01C9\\x07c\u0002\u0002\\u01C9\\u01CA\\x07r\u0002\u0002\\u01CA\\u01CB\\x07r\u0002\u0002\\u01CB\\u01CC\\x07k\u0002\u0002\\u01CC\\u01CD\\x07p\u0002\u0002\\u01CD\\u01CE\\x07i\u0002\u0002\\u01CEN\u0003\u0002\u0002\u0002\\u01CF\\u01D0\\x07?\u0002\u0002\\u01D0\\u01D1\\x07@\u0002\u0002\\u01D1P\u0003\u0002\u0002\u0002\\u01D2\\u01D3\\x07o\u0002\u0002\\u01D3\\u01D4\\x07g\u0002\u0002\\u01D4\\u01D5\\x07o\u0002\u0002\\u01D5\\u01D6\\x07q\u0002\u0002\\u01D6\\u01D7\\x07t\u0002\u0002\\u01D7\\u01D8\\x07{\u0002\u0002\\u01D8R\u0003\u0002\u0002\u0002\\u01D9\\u01DA\\x07u\u0002\u0002\\u01DA\\u01DB\\x07v\u0002\u0002\\u01DB\\u01DC\\x07q\u0002\u0002\\u01DC\\u01DD\\x07t\u0002\u0002\\u01DD\\u01DE\\x07c\u0002\u0002\\u01DE\\u01DF\\x07i\u0002\u0002\\u01DF\\u01E0\\x07g\u0002\u0002\\u01E0T\u0003\u0002\u0002\u0002\\u01E1\\u01E2\\x07e\u0002\u0002\\u01E2\\u01E3\\x07c\u0002\u0002\\u01E3\\u01E4\\x07n\u0002\u0002\\u01E4\\u01E5\\x07n\u0002\u0002\\u01E5\\u01E6\\x07f\u0002\u0002\\u01E6\\u01E7\\x07c\u0002\u0002\\u01E7\\u01E8\\x07v\u0002\u0002\\u01E8\\u01E9\\x07c\u0002\u0002\\u01E9V\u0003\u0002\u0002\u0002\\u01EA\\u01EB\\x07k\u0002\u0002\\u01EB\\u01EC\\x07h\u0002\u0002\\u01ECX\u0003\u0002\u0002\u0002\\u01ED\\u01EE\\x07g\u0002\u0002\\u01EE\\u01EF\\x07n\u0002\u0002\\u01EF\\u01F0\\x07u\u0002\u0002\\u01F0\\u01F1\\x07g\u0002\u0002\\u01F1Z\u0003\u0002\u0002\u0002\\u01F2\\u01F3\\x07v\u0002\u0002\\u01F3\\u01F4\\x07t\u0002\u0002\\u01F4\\u01F5\\x07{\u0002\u0002\\u01F5\\\\\u0003\u0002\u0002\u0002\\u01F6\\u01F7\\x07e\u0002\u0002\\u01F7\\u01F8\\x07c\u0002\u0002\\u01F8\\u01F9\\x07v\u0002\u0002\\u01F9\\u01FA\\x07e\u0002\u0002\\u01FA\\u01FB\\x07j\u0002\u0002\\u01FB^\u0003\u0002\u0002\u0002\\u01FC\\u01FD\\x07y\u0002\u0002\\u01FD\\u01FE\\x07j\u0002\u0002\\u01FE\\u01FF\\x07k\u0002\u0002\\u01FF\\u0200\\x07n\u0002\u0002\\u0200\\u0201\\x07g\u0002\u0002\\u0201`\u0003\u0002\u0002\u0002\\u0202\\u0203\\x07w\u0002\u0002\\u0203\\u0204\\x07p\u0002\u0002\\u0204\\u0205\\x07e\u0002\u0002\\u0205\\u0206\\x07j\u0002\u0002\\u0206\\u0207\\x07g\u0002\u0002\\u0207\\u0208\\x07e\u0002\u0002\\u0208\\u0209\\x07m\u0002\u0002\\u0209\\u020A\\x07g\u0002\u0002\\u020A\\u020B\\x07f\u0002\u0002\\u020Bb\u0003\u0002\u0002\u0002\\u020C\\u020D\\x07c\u0002\u0002\\u020D\\u020E\\x07u\u0002\u0002\\u020E\\u020F\\x07u\u0002\u0002\\u020F\\u0210\\x07g\u0002\u0002\\u0210\\u0211\\x07o\u0002\u0002\\u0211\\u0212\\x07d\u0002\u0002\\u0212\\u0213\\x07n\u0002\u0002\\u0213\\u0214\\x07{\u0002\u0002\\u0214d\u0003\u0002\u0002\u0002\\u0215\\u0216\\x07f\u0002\u0002\\u0216\\u0217\\x07q\u0002\u0002\\u0217f\u0003\u0002\u0002\u0002\\u0218\\u0219\\x07t\u0002\u0002\\u0219\\u021A\\x07g\u0002\u0002\\u021A\\u021B\\x07v\u0002\u0002\\u021B\\u021C\\x07w\u0002\u0002\\u021C\\u021D\\x07t\u0002\u0002\\u021D\\u021E\\x07p\u0002\u0002\\u021Eh\u0003\u0002\u0002\u0002\\u021F\\u0220\\x07v\u0002\u0002\\u0220\\u0221\\x07j\u0002\u0002\\u0221\\u0222\\x07t\u0002\u0002\\u0222\\u0223\\x07q\u0002\u0002\\u0223\\u0224\\x07y\u0002\u0002\\u0224j\u0003\u0002\u0002\u0002\\u0225\\u0226\\x07g\u0002\u0002\\u0226\\u0227\\x07o\u0002\u0002\\u0227\\u0228\\x07k\u0002\u0002\\u0228\\u0229\\x07v\u0002\u0002\\u0229l\u0003\u0002\u0002\u0002\\u022A\\u022B\\x07t\u0002\u0002\\u022B\\u022C\\x07g\u0002\u0002\\u022C\\u022D\\x07x\u0002\u0002\\u022D\\u022E\\x07g\u0002\u0002\\u022E\\u022F\\x07t\u0002\u0002\\u022F\\u0230\\x07v\u0002\u0002\\u0230n\u0003\u0002\u0002\u0002\\u0231\\u0232\\x07x\u0002\u0002\\u0232\\u0233\\x07c\u0002\u0002\\u0233\\u0234\\x07t\u0002\u0002\\u0234p\u0003\u0002\u0002\u0002\\u0235\\u0236\\x07d\u0002\u0002\\u0236\\u0237\\x07q\u0002\u0002\\u0237\\u0238\\x07q\u0002\u0002\\u0238\\u0239\\x07n\u0002\u0002\\u0239r\u0003\u0002\u0002\u0002\\u023A\\u023B\\x07u\u0002\u0002\\u023B\\u023C\\x07v\u0002\u0002\\u023C\\u023D\\x07t\u0002\u0002\\u023D\\u023E\\x07k\u0002\u0002\\u023E\\u023F\\x07p\u0002\u0002\\u023F\\u0240\\x07i\u0002\u0002\\u0240t\u0003\u0002\u0002\u0002\\u0241\\u0242\\x07d\u0002\u0002\\u0242\\u0243\\x07{\u0002\u0002\\u0243\\u0244\\x07v\u0002\u0002\\u0244\\u0245\\x07g\u0002\u0002\\u0245v\u0003\u0002\u0002\u0002\\u0246\\u0247\\x07-\u0002\u0002\\u0247\\u0248\\x07-\u0002\u0002\\u0248x\u0003\u0002\u0002\u0002\\u0249\\u024A\\x07/\u0002\u0002\\u024A\\u024B\\x07/\u0002\u0002\\u024Bz\u0003\u0002\u0002\u0002\\u024C\\u024D\\x07p\u0002\u0002\\u024D\\u024E\\x07g\u0002\u0002\\u024E\\u024F\\x07y\u0002\u0002\\u024F|\u0003\u0002\u0002\u0002\\u0250\\u0251\\x07<\u0002\u0002\\u0251~\u0003\u0002\u0002\u0002\\u0252\\u0253\\x07-\u0002\u0002\\u0253\\x80\u0003\u0002\u0002\u0002\\u0254\\u0255\\x07/\u0002\u0002\\u0255\\x82\u0003\u0002\u0002\u0002\\u0256\\u0257\\x07c\u0002\u0002\\u0257\\u0258\\x07h\u0002\u0002\\u0258\\u0259\\x07v\u0002\u0002\\u0259\\u025A\\x07g\u0002\u0002\\u025A\\u025B\\x07t\u0002\u0002\\u025B\\x84\u0003\u0002\u0002\u0002\\u025C\\u025D\\x07f\u0002\u0002\\u025D\\u025E\\x07g\u0002\u0002\\u025E\\u025F\\x07n\u0002\u0002\\u025F\\u0260\\x07g\u0002\u0002\\u0260\\u0261\\x07v\u0002\u0002\\u0261\\u0262\\x07g\u0002\u0002\\u0262\\x86\u0003\u0002\u0002\u0002\\u0263\\u0264\\x07#\u0002\u0002\\u0264\\x88\u0003\u0002\u0002\u0002\\u0265\\u0266\\x07,\u0002\u0002\\u0266\\u0267\\x07,\u0002\u0002\\u0267\\x8A\u0003\u0002\u0002\u0002\\u0268\\u0269\\x071\u0002\u0002\\u0269\\x8C\u0003\u0002\u0002\u0002\\u026A\\u026B\\x07'\u0002\u0002\\u026B\\x8E\u0003\u0002\u0002\u0002\\u026C\\u026D\\x07>\u0002\u0002\\u026D\\u026E\\x07>\u0002\u0002\\u026E\\x90\u0003\u0002\u0002\u0002\\u026F\\u0270\\x07@\u0002\u0002\\u0270\\u0271\\x07@\u0002\u0002\\u0271\\x92\u0003\u0002\u0002\u0002\\u0272\\u0273\\x07(\u0002\u0002\\u0273\\x94\u0003\u0002\u0002\u0002\\u0274\\u0275\\x07~\u0002\u0002\\u0275\\x96\u0003\u0002\u0002\u0002\\u0276\\u0277\\x07?\u0002\u0002\\u0277\\u0278\\x07?\u0002\u0002\\u0278\\x98\u0003\u0002\u0002\u0002\\u0279\\u027A\\x07#\u0002\u0002\\u027A\\u027B\\x07?\u0002\u0002\\u027B\\x9A\u0003\u0002\u0002\u0002\\u027C\\u027D\\x07(\u0002\u0002\\u027D\\u027E\\x07(\u0002\u0002\\u027E\\x9C\u0003\u0002\u0002\u0002\\u027F\\u0280\\x07A\u0002\u0002\\u0280\\x9E\u0003\u0002\u0002\u0002\\u0281\\u0282\\x07~\u0002\u0002\\u0282\\u0283\\x07?\u0002\u0002\\u0283\\xA0\u0003\u0002\u0002\u0002\\u0284\\u0285\\x07`\u0002\u0002\\u0285\\u0286\\x07?\u0002\u0002\\u0286\\xA2\u0003\u0002\u0002\u0002\\u0287\\u0288\\x07(\u0002\u0002\\u0288\\u0289\\x07?\u0002\u0002\\u0289\\xA4\u0003\u0002\u0002\u0002\\u028A\\u028B\\x07>\u0002\u0002\\u028B\\u028C\\x07>\u0002\u0002\\u028C\\u028D\\x07?\u0002\u0002\\u028D\\xA6\u0003\u0002\u0002\u0002\\u028E\\u028F\\x07@\u0002\u0002\\u028F\\u0290\\x07@\u0002\u0002\\u0290\\u0291\\x07?\u0002\u0002\\u0291\\xA8\u0003\u0002\u0002\u0002\\u0292\\u0293\\x07-\u0002\u0002\\u0293\\u0294\\x07?\u0002\u0002\\u0294\\xAA\u0003\u0002\u0002\u0002\\u0295\\u0296\\x07/\u0002\u0002\\u0296\\u0297\\x07?\u0002\u0002\\u0297\\xAC\u0003\u0002\u0002\u0002\\u0298\\u0299\\x07,\u0002\u0002\\u0299\\u029A\\x07?\u0002\u0002\\u029A\\xAE\u0003\u0002\u0002\u0002\\u029B\\u029C\\x071\u0002\u0002\\u029C\\u029D\\x07?\u0002\u0002\\u029D\\xB0\u0003\u0002\u0002\u0002\\u029E\\u029F\\x07'\u0002\u0002\\u029F\\u02A0\\x07?\u0002\u0002\\u02A0\\xB2\u0003\u0002\u0002\u0002\\u02A1\\u02A2\\x07n\u0002\u0002\\u02A2\\u02A3\\x07g\u0002\u0002\\u02A3\\u02A4\\x07v\u0002\u0002\\u02A4\\xB4\u0003\u0002\u0002\u0002\\u02A5\\u02A6\\x07<\u0002\u0002\\u02A6\\u02A7\\x07?\u0002\u0002\\u02A7\\xB6\u0003\u0002\u0002\u0002\\u02A8\\u02A9\\x07?\u0002\u0002\\u02A9\\u02AA\\x07<\u0002\u0002\\u02AA\\xB8\u0003\u0002\u0002\u0002\\u02AB\\u02AC\\x07u\u0002\u0002\\u02AC\\u02AD\\x07y\u0002\u0002\\u02AD\\u02AE\\x07k\u0002\u0002\\u02AE\\u02AF\\x07v\u0002\u0002\\u02AF\\u02B0\\x07e\u0002\u0002\\u02B0\\u02B1\\x07j\u0002\u0002\\u02B1\\xBA\u0003\u0002\u0002\u0002\\u02B2\\u02B3\\x07e\u0002\u0002\\u02B3\\u02B4\\x07c\u0002\u0002\\u02B4\\u02B5\\x07u\u0002\u0002\\u02B5\\u02B6\\x07g\u0002\u0002\\u02B6\\xBC\u0003\u0002\u0002\u0002\\u02B7\\u02B8\\x07f\u0002\u0002\\u02B8\\u02B9\\x07g\u0002\u0002\\u02B9\\u02BA\\x07h\u0002\u0002\\u02BA\\u02BB\\x07c\u0002\u0002\\u02BB\\u02BC\\x07w\u0002\u0002\\u02BC\\u02BD\\x07n\u0002\u0002\\u02BD\\u02BE\\x07v\u0002\u0002\\u02BE\\xBE\u0003\u0002\u0002\u0002\\u02BF\\u02C0\\x07/\u0002\u0002\\u02C0\\u02C1\\x07@\u0002\u0002\\u02C1\\xC0\u0003\u0002\u0002\u0002\\u02C2\\u02C3\\x07e\u0002\u0002\\u02C3\\u02C4\\x07c\u0002\u0002\\u02C4\\u02C5\\x07n\u0002\u0002\\u02C5\\u02C6\\x07n\u0002\u0002\\u02C6\\u02C7\\x07d\u0002\u0002\\u02C7\\u02C8\\x07c\u0002\u0002\\u02C8\\u02C9\\x07e\u0002\u0002\\u02C9\\u02CA\\x07m\u0002\u0002\\u02CA\\xC2\u0003\u0002\u0002\u0002\\u02CB\\u02CC\\x07q\u0002\u0002\\u02CC\\u02CD\\x07x\u0002\u0002\\u02CD\\u02CE\\x07g\u0002\u0002\\u02CE\\u02CF\\x07t\u0002\u0002\\u02CF\\u02D0\\x07t\u0002\u0002\\u02D0\\u02D1\\x07k\u0002\u0002\\u02D1\\u02D2\\x07f\u0002\u0002\\u02D2\\u02D3\\x07g\u0002\u0002\\u02D3\\xC4\u0003\u0002\u0002\u0002\\u02D4\\u02D5\\x07k\u0002\u0002\\u02D5\\u02D6\\x07p\u0002\u0002\\u02D6\\u038B\\x07v\u0002\u0002\\u02D7\\u02D8\\x07k\u0002\u0002\\u02D8\\u02D9\\x07p\u0002\u0002\\u02D9\\u02DA\\x07v\u0002\u0002\\u02DA\\u038B\\x07:\u0002\u0002\\u02DB\\u02DC\\x07k\u0002\u0002\\u02DC\\u02DD\\x07p\u0002\u0002\\u02DD\\u02DE\\x07v\u0002\u0002\\u02DE\\u02DF\\x073\u0002\u0002\\u02DF\\u038B\\x078\u0002\u0002\\u02E0\\u02E1\\x07k\u0002\u0002\\u02E1\\u02E2\\x07p\u0002\u0002\\u02E2\\u02E3\\x07v\u0002\u0002\\u02E3\\u02E4\\x074\u0002\u0002\\u02E4\\u038B\\x076\u0002\u0002\\u02E5\\u02E6\\x07k\u0002\u0002\\u02E6\\u02E7\\x07p\u0002\u0002\\u02E7\\u02E8\\x07v\u0002\u0002\\u02E8\\u02E9\\x075\u0002\u0002\\u02E9\\u038B\\x074\u0002\u0002\\u02EA\\u02EB\\x07k\u0002\u0002\\u02EB\\u02EC\\x07p\u0002\u0002\\u02EC\\u02ED\\x07v\u0002\u0002\\u02ED\\u02EE\\x076\u0002\u0002\\u02EE\\u038B\\x072\u0002\u0002\\u02EF\\u02F0\\x07k\u0002\u0002\\u02F0\\u02F1\\x07p\u0002\u0002\\u02F1\\u02F2\\x07v\u0002\u0002\\u02F2\\u02F3\\x076\u0002\u0002\\u02F3\\u038B\\x07:\u0002\u0002\\u02F4\\u02F5\\x07k\u0002\u0002\\u02F5\\u02F6\\x07p\u0002\u0002\\u02F6\\u02F7\\x07v\u0002\u0002\\u02F7\\u02F8\\x077\u0002\u0002\\u02F8\\u038B\\x078\u0002\u0002\\u02F9\\u02FA\\x07k\u0002\u0002\\u02FA\\u02FB\\x07p\u0002\u0002\\u02FB\\u02FC\\x07v\u0002\u0002\\u02FC\\u02FD\\x078\u0002\u0002\\u02FD\\u038B\\x076\u0002\u0002\\u02FE\\u02FF\\x07k\u0002\u0002\\u02FF\\u0300\\x07p\u0002\u0002\\u0300\\u0301\\x07v\u0002\u0002\\u0301\\u0302\\x079\u0002\u0002\\u0302\\u038B\\x074\u0002\u0002\\u0303\\u0304\\x07k\u0002\u0002\\u0304\\u0305\\x07p\u0002\u0002\\u0305\\u0306\\x07v\u0002\u0002\\u0306\\u0307\\x07:\u0002\u0002\\u0307\\u038B\\x072\u0002\u0002\\u0308\\u0309\\x07k\u0002\u0002\\u0309\\u030A\\x07p\u0002\u0002\\u030A\\u030B\\x07v\u0002\u0002\\u030B\\u030C\\x07:\u0002\u0002\\u030C\\u038B\\x07:\u0002\u0002\\u030D\\u030E\\x07k\u0002\u0002\\u030E\\u030F\\x07p\u0002\u0002\\u030F\\u0310\\x07v\u0002\u0002\\u0310\\u0311\\x07;\u0002\u0002\\u0311\\u038B\\x078\u0002\u0002\\u0312\\u0313\\x07k\u0002\u0002\\u0313\\u0314\\x07p\u0002\u0002\\u0314\\u0315\\x07v\u0002\u0002\\u0315\\u0316\\x073\u0002\u0002\\u0316\\u0317\\x072\u0002\u0002\\u0317\\u038B\\x076\u0002\u0002\\u0318\\u0319\\x07k\u0002\u0002\\u0319\\u031A\\x07p\u0002\u0002\\u031A\\u031B\\x07v\u0002\u0002\\u031B\\u031C\\x073\u0002\u0002\\u031C\\u031D\\x073\u0002\u0002\\u031D\\u038B\\x074\u0002\u0002\\u031E\\u031F\\x07k\u0002\u0002\\u031F\\u0320\\x07p\u0002\u0002\\u0320\\u0321\\x07v\u0002\u0002\\u0321\\u0322\\x073\u0002\u0002\\u0322\\u0323\\x074\u0002\u0002\\u0323\\u038B\\x072\u0002\u0002\\u0324\\u0325\\x07k\u0002\u0002\\u0325\\u0326\\x07p\u0002\u0002\\u0326\\u0327\\x07v\u0002\u0002\\u0327\\u0328\\x073\u0002\u0002\\u0328\\u0329\\x074\u0002\u0002\\u0329\\u038B\\x07:\u0002\u0002\\u032A\\u032B\\x07k\u0002\u0002\\u032B\\u032C\\x07p\u0002\u0002\\u032C\\u032D\\x07v\u0002\u0002\\u032D\\u032E\\x073\u0002\u0002\\u032E\\u032F\\x075\u0002\u0002\\u032F\\u038B\\x078\u0002\u0002\\u0330\\u0331\\x07k\u0002\u0002\\u0331\\u0332\\x07p\u0002\u0002\\u0332\\u0333\\x07v\u0002\u0002\\u0333\\u0334\\x073\u0002\u0002\\u0334\\u0335\\x076\u0002\u0002\\u0335\\u038B\\x076\u0002\u0002\\u0336\\u0337\\x07k\u0002\u0002\\u0337\\u0338\\x07p\u0002\u0002\\u0338\\u0339\\x07v\u0002\u0002\\u0339\\u033A\\x073\u0002\u0002\\u033A\\u033B\\x077\u0002\u0002\\u033B\\u038B\\x074\u0002\u0002\\u033C\\u033D\\x07k\u0002\u0002\\u033D\\u033E\\x07p\u0002\u0002\\u033E\\u033F\\x07v\u0002\u0002\\u033F\\u0340\\x073\u0002\u0002\\u0340\\u0341\\x078\u0002\u0002\\u0341\\u038B\\x072\u0002\u0002\\u0342\\u0343\\x07k\u0002\u0002\\u0343\\u0344\\x07p\u0002\u0002\\u0344\\u0345\\x07v\u0002\u0002\\u0345\\u0346\\x073\u0002\u0002\\u0346\\u0347\\x078\u0002\u0002\\u0347\\u038B\\x07:\u0002\u0002\\u0348\\u0349\\x07k\u0002\u0002\\u0349\\u034A\\x07p\u0002\u0002\\u034A\\u034B\\x07v\u0002\u0002\\u034B\\u034C\\x073\u0002\u0002\\u034C\\u034D\\x079\u0002\u0002\\u034D\\u038B\\x078\u0002\u0002\\u034E\\u034F\\x07k\u0002\u0002\\u034F\\u0350\\x07p\u0002\u0002\\u0350\\u0351\\x07v\u0002\u0002\\u0351\\u0352\\x073\u0002\u0002\\u0352\\u0353\\x07:\u0002\u0002\\u0353\\u038B\\x076\u0002\u0002\\u0354\\u0355\\x07k\u0002\u0002\\u0355\\u0356\\x07p\u0002\u0002\\u0356\\u0357\\x07v\u0002\u0002\\u0357\\u0358\\x073\u0002\u0002\\u0358\\u0359\\x07;\u0002\u0002\\u0359\\u038B\\x074\u0002\u0002\\u035A\\u035B\\x07k\u0002\u0002\\u035B\\u035C\\x07p\u0002\u0002\\u035C\\u035D\\x07v\u0002\u0002\\u035D\\u035E\\x074\u0002\u0002\\u035E\\u035F\\x072\u0002\u0002\\u035F\\u038B\\x072\u0002\u0002\\u0360\\u0361\\x07k\u0002\u0002\\u0361\\u0362\\x07p\u0002\u0002\\u0362\\u0363\\x07v\u0002\u0002\\u0363\\u0364\\x074\u0002\u0002\\u0364\\u0365\\x072\u0002\u0002\\u0365\\u038B\\x07:\u0002\u0002\\u0366\\u0367\\x07k\u0002\u0002\\u0367\\u0368\\x07p\u0002\u0002\\u0368\\u0369\\x07v\u0002\u0002\\u0369\\u036A\\x074\u0002\u0002\\u036A\\u036B\\x073\u0002\u0002\\u036B\\u038B\\x078\u0002\u0002\\u036C\\u036D\\x07k\u0002\u0002\\u036D\\u036E\\x07p\u0002\u0002\\u036E\\u036F\\x07v\u0002\u0002\\u036F\\u0370\\x074\u0002\u0002\\u0370\\u0371\\x074\u0002\u0002\\u0371\\u038B\\x076\u0002\u0002\\u0372\\u0373\\x07k\u0002\u0002\\u0373\\u0374\\x07p\u0002\u0002\\u0374\\u0375\\x07v\u0002\u0002\\u0375\\u0376\\x074\u0002\u0002\\u0376\\u0377\\x075\u0002\u0002\\u0377\\u038B\\x074\u0002\u0002\\u0378\\u0379\\x07k\u0002\u0002\\u0379\\u037A\\x07p\u0002\u0002\\u037A\\u037B\\x07v\u0002\u0002\\u037B\\u037C\\x074\u0002\u0002\\u037C\\u037D\\x076\u0002\u0002\\u037D\\u038B\\x072\u0002\u0002\\u037E\\u037F\\x07k\u0002\u0002\\u037F\\u0380\\x07p\u0002\u0002\\u0380\\u0381\\x07v\u0002\u0002\\u0381\\u0382\\x074\u0002\u0002\\u0382\\u0383\\x076\u0002\u0002\\u0383\\u038B\\x07:\u0002\u0002\\u0384\\u0385\\x07k\u0002\u0002\\u0385\\u0386\\x07p\u0002\u0002\\u0386\\u0387\\x07v\u0002\u0002\\u0387\\u0388\\x074\u0002\u0002\\u0388\\u0389\\x077\u0002\u0002\\u0389\\u038B\\x078\u0002\u0002\\u038A\\u02D4\u0003\u0002\u0002\u0002\\u038A\\u02D7\u0003\u0002\u0002\u0002\\u038A\\u02DB\u0003\u0002\u0002\u0002\\u038A\\u02E0\u0003\u0002\u0002\u0002\\u038A\\u02E5\u0003\u0002\u0002\u0002\\u038A\\u02EA\u0003\u0002\u0002\u0002\\u038A\\u02EF\u0003\u0002\u0002\u0002\\u038A\\u02F4\u0003\u0002\u0002\u0002\\u038A\\u02F9\u0003\u0002\u0002\u0002\\u038A\\u02FE\u0003\u0002\u0002\u0002\\u038A\\u0303\u0003\u0002\u0002\u0002\\u038A\\u0308\u0003\u0002\u0002\u0002\\u038A\\u030D\u0003\u0002\u0002\u0002\\u038A\\u0312\u0003\u0002\u0002\u0002\\u038A\\u0318\u0003\u0002\u0002\u0002\\u038A\\u031E\u0003\u0002\u0002\u0002\\u038A\\u0324\u0003\u0002\u0002\u0002\\u038A\\u032A\u0003\u0002\u0002\u0002\\u038A\\u0330\u0003\u0002\u0002\u0002\\u038A\\u0336\u0003\u0002\u0002\u0002\\u038A\\u033C\u0003\u0002\u0002\u0002\\u038A\\u0342\u0003\u0002\u0002\u0002\\u038A\\u0348\u0003\u0002\u0002\u0002\\u038A\\u034E\u0003\u0002\u0002\u0002\\u038A\\u0354\u0003\u0002\u0002\u0002\\u038A\\u035A\u0003\u0002\u0002\u0002\\u038A\\u0360\u0003\u0002\u0002\u0002\\u038A\\u0366\u0003\u0002\u0002\u0002\\u038A\\u036C\u0003\u0002\u0002\u0002\\u038A\\u0372\u0003\u0002\u0002\u0002\\u038A\\u0378\u0003\u0002\u0002\u0002\\u038A\\u037E\u0003\u0002\u0002\u0002\\u038A\\u0384\u0003\u0002\u0002\u0002\\u038B\\xC6\u0003\u0002\u0002\u0002\\u038C\\u038D\\x07w\u0002\u0002\\u038D\\u038E\\x07k\u0002\u0002\\u038E\\u038F\\x07p\u0002\u0002\\u038F\\u0464\\x07v\u0002\u0002\\u0390\\u0391\\x07w\u0002\u0002\\u0391\\u0392\\x07k\u0002\u0002\\u0392\\u0393\\x07p\u0002\u0002\\u0393\\u0394\\x07v\u0002\u0002\\u0394\\u0464\\x07:\u0002\u0002\\u0395\\u0396\\x07w\u0002\u0002\\u0396\\u0397\\x07k\u0002\u0002\\u0397\\u0398\\x07p\u0002\u0002\\u0398\\u0399\\x07v\u0002\u0002\\u0399\\u039A\\x073\u0002\u0002\\u039A\\u0464\\x078\u0002\u0002\\u039B\\u039C\";\nSolidityLexer._serializedATNSegment2 = \"\\x07w\u0002\u0002\\u039C\\u039D\\x07k\u0002\u0002\\u039D\\u039E\\x07p\u0002\u0002\\u039E\\u039F\\x07v\u0002\u0002\\u039F\\u03A0\\x074\u0002\u0002\\u03A0\\u0464\\x076\u0002\u0002\\u03A1\\u03A2\\x07w\u0002\u0002\\u03A2\\u03A3\\x07k\u0002\u0002\\u03A3\\u03A4\\x07p\u0002\u0002\\u03A4\\u03A5\\x07v\u0002\u0002\\u03A5\\u03A6\\x075\u0002\u0002\\u03A6\\u0464\\x074\u0002\u0002\\u03A7\\u03A8\\x07w\u0002\u0002\\u03A8\\u03A9\\x07k\u0002\u0002\\u03A9\\u03AA\\x07p\u0002\u0002\\u03AA\\u03AB\\x07v\u0002\u0002\\u03AB\\u03AC\\x076\u0002\u0002\\u03AC\\u0464\\x072\u0002\u0002\\u03AD\\u03AE\\x07w\u0002\u0002\\u03AE\\u03AF\\x07k\u0002\u0002\\u03AF\\u03B0\\x07p\u0002\u0002\\u03B0\\u03B1\\x07v\u0002\u0002\\u03B1\\u03B2\\x076\u0002\u0002\\u03B2\\u0464\\x07:\u0002\u0002\\u03B3\\u03B4\\x07w\u0002\u0002\\u03B4\\u03B5\\x07k\u0002\u0002\\u03B5\\u03B6\\x07p\u0002\u0002\\u03B6\\u03B7\\x07v\u0002\u0002\\u03B7\\u03B8\\x077\u0002\u0002\\u03B8\\u0464\\x078\u0002\u0002\\u03B9\\u03BA\\x07w\u0002\u0002\\u03BA\\u03BB\\x07k\u0002\u0002\\u03BB\\u03BC\\x07p\u0002\u0002\\u03BC\\u03BD\\x07v\u0002\u0002\\u03BD\\u03BE\\x078\u0002\u0002\\u03BE\\u0464\\x076\u0002\u0002\\u03BF\\u03C0\\x07w\u0002\u0002\\u03C0\\u03C1\\x07k\u0002\u0002\\u03C1\\u03C2\\x07p\u0002\u0002\\u03C2\\u03C3\\x07v\u0002\u0002\\u03C3\\u03C4\\x079\u0002\u0002\\u03C4\\u0464\\x074\u0002\u0002\\u03C5\\u03C6\\x07w\u0002\u0002\\u03C6\\u03C7\\x07k\u0002\u0002\\u03C7\\u03C8\\x07p\u0002\u0002\\u03C8\\u03C9\\x07v\u0002\u0002\\u03C9\\u03CA\\x07:\u0002\u0002\\u03CA\\u0464\\x072\u0002\u0002\\u03CB\\u03CC\\x07w\u0002\u0002\\u03CC\\u03CD\\x07k\u0002\u0002\\u03CD\\u03CE\\x07p\u0002\u0002\\u03CE\\u03CF\\x07v\u0002\u0002\\u03CF\\u03D0\\x07:\u0002\u0002\\u03D0\\u0464\\x07:\u0002\u0002\\u03D1\\u03D2\\x07w\u0002\u0002\\u03D2\\u03D3\\x07k\u0002\u0002\\u03D3\\u03D4\\x07p\u0002\u0002\\u03D4\\u03D5\\x07v\u0002\u0002\\u03D5\\u03D6\\x07;\u0002\u0002\\u03D6\\u0464\\x078\u0002\u0002\\u03D7\\u03D8\\x07w\u0002\u0002\\u03D8\\u03D9\\x07k\u0002\u0002\\u03D9\\u03DA\\x07p\u0002\u0002\\u03DA\\u03DB\\x07v\u0002\u0002\\u03DB\\u03DC\\x073\u0002\u0002\\u03DC\\u03DD\\x072\u0002\u0002\\u03DD\\u0464\\x076\u0002\u0002\\u03DE\\u03DF\\x07w\u0002\u0002\\u03DF\\u03E0\\x07k\u0002\u0002\\u03E0\\u03E1\\x07p\u0002\u0002\\u03E1\\u03E2\\x07v\u0002\u0002\\u03E2\\u03E3\\x073\u0002\u0002\\u03E3\\u03E4\\x073\u0002\u0002\\u03E4\\u0464\\x074\u0002\u0002\\u03E5\\u03E6\\x07w\u0002\u0002\\u03E6\\u03E7\\x07k\u0002\u0002\\u03E7\\u03E8\\x07p\u0002\u0002\\u03E8\\u03E9\\x07v\u0002\u0002\\u03E9\\u03EA\\x073\u0002\u0002\\u03EA\\u03EB\\x074\u0002\u0002\\u03EB\\u0464\\x072\u0002\u0002\\u03EC\\u03ED\\x07w\u0002\u0002\\u03ED\\u03EE\\x07k\u0002\u0002\\u03EE\\u03EF\\x07p\u0002\u0002\\u03EF\\u03F0\\x07v\u0002\u0002\\u03F0\\u03F1\\x073\u0002\u0002\\u03F1\\u03F2\\x074\u0002\u0002\\u03F2\\u0464\\x07:\u0002\u0002\\u03F3\\u03F4\\x07w\u0002\u0002\\u03F4\\u03F5\\x07k\u0002\u0002\\u03F5\\u03F6\\x07p\u0002\u0002\\u03F6\\u03F7\\x07v\u0002\u0002\\u03F7\\u03F8\\x073\u0002\u0002\\u03F8\\u03F9\\x075\u0002\u0002\\u03F9\\u0464\\x078\u0002\u0002\\u03FA\\u03FB\\x07w\u0002\u0002\\u03FB\\u03FC\\x07k\u0002\u0002\\u03FC\\u03FD\\x07p\u0002\u0002\\u03FD\\u03FE\\x07v\u0002\u0002\\u03FE\\u03FF\\x073\u0002\u0002\\u03FF\\u0400\\x076\u0002\u0002\\u0400\\u0464\\x076\u0002\u0002\\u0401\\u0402\\x07w\u0002\u0002\\u0402\\u0403\\x07k\u0002\u0002\\u0403\\u0404\\x07p\u0002\u0002\\u0404\\u0405\\x07v\u0002\u0002\\u0405\\u0406\\x073\u0002\u0002\\u0406\\u0407\\x077\u0002\u0002\\u0407\\u0464\\x074\u0002\u0002\\u0408\\u0409\\x07w\u0002\u0002\\u0409\\u040A\\x07k\u0002\u0002\\u040A\\u040B\\x07p\u0002\u0002\\u040B\\u040C\\x07v\u0002\u0002\\u040C\\u040D\\x073\u0002\u0002\\u040D\\u040E\\x078\u0002\u0002\\u040E\\u0464\\x072\u0002\u0002\\u040F\\u0410\\x07w\u0002\u0002\\u0410\\u0411\\x07k\u0002\u0002\\u0411\\u0412\\x07p\u0002\u0002\\u0412\\u0413\\x07v\u0002\u0002\\u0413\\u0414\\x073\u0002\u0002\\u0414\\u0415\\x078\u0002\u0002\\u0415\\u0464\\x07:\u0002\u0002\\u0416\\u0417\\x07w\u0002\u0002\\u0417\\u0418\\x07k\u0002\u0002\\u0418\\u0419\\x07p\u0002\u0002\\u0419\\u041A\\x07v\u0002\u0002\\u041A\\u041B\\x073\u0002\u0002\\u041B\\u041C\\x079\u0002\u0002\\u041C\\u0464\\x078\u0002\u0002\\u041D\\u041E\\x07w\u0002\u0002\\u041E\\u041F\\x07k\u0002\u0002\\u041F\\u0420\\x07p\u0002\u0002\\u0420\\u0421\\x07v\u0002\u0002\\u0421\\u0422\\x073\u0002\u0002\\u0422\\u0423\\x07:\u0002\u0002\\u0423\\u0464\\x076\u0002\u0002\\u0424\\u0425\\x07w\u0002\u0002\\u0425\\u0426\\x07k\u0002\u0002\\u0426\\u0427\\x07p\u0002\u0002\\u0427\\u0428\\x07v\u0002\u0002\\u0428\\u0429\\x073\u0002\u0002\\u0429\\u042A\\x07;\u0002\u0002\\u042A\\u0464\\x074\u0002\u0002\\u042B\\u042C\\x07w\u0002\u0002\\u042C\\u042D\\x07k\u0002\u0002\\u042D\\u042E\\x07p\u0002\u0002\\u042E\\u042F\\x07v\u0002\u0002\\u042F\\u0430\\x074\u0002\u0002\\u0430\\u0431\\x072\u0002\u0002\\u0431\\u0464\\x072\u0002\u0002\\u0432\\u0433\\x07w\u0002\u0002\\u0433\\u0434\\x07k\u0002\u0002\\u0434\\u0435\\x07p\u0002\u0002\\u0435\\u0436\\x07v\u0002\u0002\\u0436\\u0437\\x074\u0002\u0002\\u0437\\u0438\\x072\u0002\u0002\\u0438\\u0464\\x07:\u0002\u0002\\u0439\\u043A\\x07w\u0002\u0002\\u043A\\u043B\\x07k\u0002\u0002\\u043B\\u043C\\x07p\u0002\u0002\\u043C\\u043D\\x07v\u0002\u0002\\u043D\\u043E\\x074\u0002\u0002\\u043E\\u043F\\x073\u0002\u0002\\u043F\\u0464\\x078\u0002\u0002\\u0440\\u0441\\x07w\u0002\u0002\\u0441\\u0442\\x07k\u0002\u0002\\u0442\\u0443\\x07p\u0002\u0002\\u0443\\u0444\\x07v\u0002\u0002\\u0444\\u0445\\x074\u0002\u0002\\u0445\\u0446\\x074\u0002\u0002\\u0446\\u0464\\x076\u0002\u0002\\u0447\\u0448\\x07w\u0002\u0002\\u0448\\u0449\\x07k\u0002\u0002\\u0449\\u044A\\x07p\u0002\u0002\\u044A\\u044B\\x07v\u0002\u0002\\u044B\\u044C\\x074\u0002\u0002\\u044C\\u044D\\x075\u0002\u0002\\u044D\\u0464\\x074\u0002\u0002\\u044E\\u044F\\x07w\u0002\u0002\\u044F\\u0450\\x07k\u0002\u0002\\u0450\\u0451\\x07p\u0002\u0002\\u0451\\u0452\\x07v\u0002\u0002\\u0452\\u0453\\x074\u0002\u0002\\u0453\\u0454\\x076\u0002\u0002\\u0454\\u0464\\x072\u0002\u0002\\u0455\\u0456\\x07w\u0002\u0002\\u0456\\u0457\\x07k\u0002\u0002\\u0457\\u0458\\x07p\u0002\u0002\\u0458\\u0459\\x07v\u0002\u0002\\u0459\\u045A\\x074\u0002\u0002\\u045A\\u045B\\x076\u0002\u0002\\u045B\\u0464\\x07:\u0002\u0002\\u045C\\u045D\\x07w\u0002\u0002\\u045D\\u045E\\x07k\u0002\u0002\\u045E\\u045F\\x07p\u0002\u0002\\u045F\\u0460\\x07v\u0002\u0002\\u0460\\u0461\\x074\u0002\u0002\\u0461\\u0462\\x077\u0002\u0002\\u0462\\u0464\\x078\u0002\u0002\\u0463\\u038C\u0003\u0002\u0002\u0002\\u0463\\u0390\u0003\u0002\u0002\u0002\\u0463\\u0395\u0003\u0002\u0002\u0002\\u0463\\u039B\u0003\u0002\u0002\u0002\\u0463\\u03A1\u0003\u0002\u0002\u0002\\u0463\\u03A7\u0003\u0002\u0002\u0002\\u0463\\u03AD\u0003\u0002\u0002\u0002\\u0463\\u03B3\u0003\u0002\u0002\u0002\\u0463\\u03B9\u0003\u0002\u0002\u0002\\u0463\\u03BF\u0003\u0002\u0002\u0002\\u0463\\u03C5\u0003\u0002\u0002\u0002\\u0463\\u03CB\u0003\u0002\u0002\u0002\\u0463\\u03D1\u0003\u0002\u0002\u0002\\u0463\\u03D7\u0003\u0002\u0002\u0002\\u0463\\u03DE\u0003\u0002\u0002\u0002\\u0463\\u03E5\u0003\u0002\u0002\u0002\\u0463\\u03EC\u0003\u0002\u0002\u0002\\u0463\\u03F3\u0003\u0002\u0002\u0002\\u0463\\u03FA\u0003\u0002\u0002\u0002\\u0463\\u0401\u0003\u0002\u0002\u0002\\u0463\\u0408\u0003\u0002\u0002\u0002\\u0463\\u040F\u0003\u0002\u0002\u0002\\u0463\\u0416\u0003\u0002\u0002\u0002\\u0463\\u041D\u0003\u0002\u0002\u0002\\u0463\\u0424\u0003\u0002\u0002\u0002\\u0463\\u042B\u0003\u0002\u0002\u0002\\u0463\\u0432\u0003\u0002\u0002\u0002\\u0463\\u0439\u0003\u0002\u0002\u0002\\u0463\\u0440\u0003\u0002\u0002\u0002\\u0463\\u0447\u0003\u0002\u0002\u0002\\u0463\\u044E\u0003\u0002\u0002\u0002\\u0463\\u0455\u0003\u0002\u0002\u0002\\u0463\\u045C\u0003\u0002\u0002\u0002\\u0464\\xC8\u0003\u0002\u0002\u0002\\u0465\\u0466\\x07d\u0002\u0002\\u0466\\u0467\\x07{\u0002\u0002\\u0467\\u0468\\x07v\u0002\u0002\\u0468\\u0469\\x07g\u0002\u0002\\u0469\\u0542\\x07u\u0002\u0002\\u046A\\u046B\\x07d\u0002\u0002\\u046B\\u046C\\x07{\u0002\u0002\\u046C\\u046D\\x07v\u0002\u0002\\u046D\\u046E\\x07g\u0002\u0002\\u046E\\u046F\\x07u\u0002\u0002\\u046F\\u0542\\x073\u0002\u0002\\u0470\\u0471\\x07d\u0002\u0002\\u0471\\u0472\\x07{\u0002\u0002\\u0472\\u0473\\x07v\u0002\u0002\\u0473\\u0474\\x07g\u0002\u0002\\u0474\\u0475\\x07u\u0002\u0002\\u0475\\u0542\\x074\u0002\u0002\\u0476\\u0477\\x07d\u0002\u0002\\u0477\\u0478\\x07{\u0002\u0002\\u0478\\u0479\\x07v\u0002\u0002\\u0479\\u047A\\x07g\u0002\u0002\\u047A\\u047B\\x07u\u0002\u0002\\u047B\\u0542\\x075\u0002\u0002\\u047C\\u047D\\x07d\u0002\u0002\\u047D\\u047E\\x07{\u0002\u0002\\u047E\\u047F\\x07v\u0002\u0002\\u047F\\u0480\\x07g\u0002\u0002\\u0480\\u0481\\x07u\u0002\u0002\\u0481\\u0542\\x076\u0002\u0002\\u0482\\u0483\\x07d\u0002\u0002\\u0483\\u0484\\x07{\u0002\u0002\\u0484\\u0485\\x07v\u0002\u0002\\u0485\\u0486\\x07g\u0002\u0002\\u0486\\u0487\\x07u\u0002\u0002\\u0487\\u0542\\x077\u0002\u0002\\u0488\\u0489\\x07d\u0002\u0002\\u0489\\u048A\\x07{\u0002\u0002\\u048A\\u048B\\x07v\u0002\u0002\\u048B\\u048C\\x07g\u0002\u0002\\u048C\\u048D\\x07u\u0002\u0002\\u048D\\u0542\\x078\u0002\u0002\\u048E\\u048F\\x07d\u0002\u0002\\u048F\\u0490\\x07{\u0002\u0002\\u0490\\u0491\\x07v\u0002\u0002\\u0491\\u0492\\x07g\u0002\u0002\\u0492\\u0493\\x07u\u0002\u0002\\u0493\\u0542\\x079\u0002\u0002\\u0494\\u0495\\x07d\u0002\u0002\\u0495\\u0496\\x07{\u0002\u0002\\u0496\\u0497\\x07v\u0002\u0002\\u0497\\u0498\\x07g\u0002\u0002\\u0498\\u0499\\x07u\u0002\u0002\\u0499\\u0542\\x07:\u0002\u0002\\u049A\\u049B\\x07d\u0002\u0002\\u049B\\u049C\\x07{\u0002\u0002\\u049C\\u049D\\x07v\u0002\u0002\\u049D\\u049E\\x07g\u0002\u0002\\u049E\\u049F\\x07u\u0002\u0002\\u049F\\u0542\\x07;\u0002\u0002\\u04A0\\u04A1\\x07d\u0002\u0002\\u04A1\\u04A2\\x07{\u0002\u0002\\u04A2\\u04A3\\x07v\u0002\u0002\\u04A3\\u04A4\\x07g\u0002\u0002\\u04A4\\u04A5\\x07u\u0002\u0002\\u04A5\\u04A6\\x073\u0002\u0002\\u04A6\\u0542\\x072\u0002\u0002\\u04A7\\u04A8\\x07d\u0002\u0002\\u04A8\\u04A9\\x07{\u0002\u0002\\u04A9\\u04AA\\x07v\u0002\u0002\\u04AA\\u04AB\\x07g\u0002\u0002\\u04AB\\u04AC\\x07u\u0002\u0002\\u04AC\\u04AD\\x073\u0002\u0002\\u04AD\\u0542\\x073\u0002\u0002\\u04AE\\u04AF\\x07d\u0002\u0002\\u04AF\\u04B0\\x07{\u0002\u0002\\u04B0\\u04B1\\x07v\u0002\u0002\\u04B1\\u04B2\\x07g\u0002\u0002\\u04B2\\u04B3\\x07u\u0002\u0002\\u04B3\\u04B4\\x073\u0002\u0002\\u04B4\\u0542\\x074\u0002\u0002\\u04B5\\u04B6\\x07d\u0002\u0002\\u04B6\\u04B7\\x07{\u0002\u0002\\u04B7\\u04B8\\x07v\u0002\u0002\\u04B8\\u04B9\\x07g\u0002\u0002\\u04B9\\u04BA\\x07u\u0002\u0002\\u04BA\\u04BB\\x073\u0002\u0002\\u04BB\\u0542\\x075\u0002\u0002\\u04BC\\u04BD\\x07d\u0002\u0002\\u04BD\\u04BE\\x07{\u0002\u0002\\u04BE\\u04BF\\x07v\u0002\u0002\\u04BF\\u04C0\\x07g\u0002\u0002\\u04C0\\u04C1\\x07u\u0002\u0002\\u04C1\\u04C2\\x073\u0002\u0002\\u04C2\\u0542\\x076\u0002\u0002\\u04C3\\u04C4\\x07d\u0002\u0002\\u04C4\\u04C5\\x07{\u0002\u0002\\u04C5\\u04C6\\x07v\u0002\u0002\\u04C6\\u04C7\\x07g\u0002\u0002\\u04C7\\u04C8\\x07u\u0002\u0002\\u04C8\\u04C9\\x073\u0002\u0002\\u04C9\\u0542\\x077\u0002\u0002\\u04CA\\u04CB\\x07d\u0002\u0002\\u04CB\\u04CC\\x07{\u0002\u0002\\u04CC\\u04CD\\x07v\u0002\u0002\\u04CD\\u04CE\\x07g\u0002\u0002\\u04CE\\u04CF\\x07u\u0002\u0002\\u04CF\\u04D0\\x073\u0002\u0002\\u04D0\\u0542\\x078\u0002\u0002\\u04D1\\u04D2\\x07d\u0002\u0002\\u04D2\\u04D3\\x07{\u0002\u0002\\u04D3\\u04D4\\x07v\u0002\u0002\\u04D4\\u04D5\\x07g\u0002\u0002\\u04D5\\u04D6\\x07u\u0002\u0002\\u04D6\\u04D7\\x073\u0002\u0002\\u04D7\\u0542\\x079\u0002\u0002\\u04D8\\u04D9\\x07d\u0002\u0002\\u04D9\\u04DA\\x07{\u0002\u0002\\u04DA\\u04DB\\x07v\u0002\u0002\\u04DB\\u04DC\\x07g\u0002\u0002\\u04DC\\u04DD\\x07u\u0002\u0002\\u04DD\\u04DE\\x073\u0002\u0002\\u04DE\\u0542\\x07:\u0002\u0002\\u04DF\\u04E0\\x07d\u0002\u0002\\u04E0\\u04E1\\x07{\u0002\u0002\\u04E1\\u04E2\\x07v\u0002\u0002\\u04E2\\u04E3\\x07g\u0002\u0002\\u04E3\\u04E4\\x07u\u0002\u0002\\u04E4\\u04E5\\x073\u0002\u0002\\u04E5\\u0542\\x07;\u0002\u0002\\u04E6\\u04E7\\x07d\u0002\u0002\\u04E7\\u04E8\\x07{\u0002\u0002\\u04E8\\u04E9\\x07v\u0002\u0002\\u04E9\\u04EA\\x07g\u0002\u0002\\u04EA\\u04EB\\x07u\u0002\u0002\\u04EB\\u04EC\\x074\u0002\u0002\\u04EC\\u0542\\x072\u0002\u0002\\u04ED\\u04EE\\x07d\u0002\u0002\\u04EE\\u04EF\\x07{\u0002\u0002\\u04EF\\u04F0\\x07v\u0002\u0002\\u04F0\\u04F1\\x07g\u0002\u0002\\u04F1\\u04F2\\x07u\u0002\u0002\\u04F2\\u04F3\\x074\u0002\u0002\\u04F3\\u0542\\x073\u0002\u0002\\u04F4\\u04F5\\x07d\u0002\u0002\\u04F5\\u04F6\\x07{\u0002\u0002\\u04F6\\u04F7\\x07v\u0002\u0002\\u04F7\\u04F8\\x07g\u0002\u0002\\u04F8\\u04F9\\x07u\u0002\u0002\\u04F9\\u04FA\\x074\u0002\u0002\\u04FA\\u0542\\x074\u0002\u0002\\u04FB\\u04FC\\x07d\u0002\u0002\\u04FC\\u04FD\\x07{\u0002\u0002\\u04FD\\u04FE\\x07v\u0002\u0002\\u04FE\\u04FF\\x07g\u0002\u0002\\u04FF\\u0500\\x07u\u0002\u0002\\u0500\\u0501\\x074\u0002\u0002\\u0501\\u0542\\x075\u0002\u0002\\u0502\\u0503\\x07d\u0002\u0002\\u0503\\u0504\\x07{\u0002\u0002\\u0504\\u0505\\x07v\u0002\u0002\\u0505\\u0506\\x07g\u0002\u0002\\u0506\\u0507\\x07u\u0002\u0002\\u0507\\u0508\\x074\u0002\u0002\\u0508\\u0542\\x076\u0002\u0002\\u0509\\u050A\\x07d\u0002\u0002\\u050A\\u050B\\x07{\u0002\u0002\\u050B\\u050C\\x07v\u0002\u0002\\u050C\\u050D\\x07g\u0002\u0002\\u050D\\u050E\\x07u\u0002\u0002\\u050E\\u050F\\x074\u0002\u0002\\u050F\\u0542\\x077\u0002\u0002\\u0510\\u0511\\x07d\u0002\u0002\\u0511\\u0512\\x07{\u0002\u0002\\u0512\\u0513\\x07v\u0002\u0002\\u0513\\u0514\\x07g\u0002\u0002\\u0514\\u0515\\x07u\u0002\u0002\\u0515\\u0516\\x074\u0002\u0002\\u0516\\u0542\\x078\u0002\u0002\\u0517\\u0518\\x07d\u0002\u0002\\u0518\\u0519\\x07{\u0002\u0002\\u0519\\u051A\\x07v\u0002\u0002\\u051A\\u051B\\x07g\u0002\u0002\\u051B\\u051C\\x07u\u0002\u0002\\u051C\\u051D\\x074\u0002\u0002\\u051D\\u0542\\x079\u0002\u0002\\u051E\\u051F\\x07d\u0002\u0002\\u051F\\u0520\\x07{\u0002\u0002\\u0520\\u0521\\x07v\u0002\u0002\\u0521\\u0522\\x07g\u0002\u0002\\u0522\\u0523\\x07u\u0002\u0002\\u0523\\u0524\\x074\u0002\u0002\\u0524\\u0542\\x07:\u0002\u0002\\u0525\\u0526\\x07d\u0002\u0002\\u0526\\u0527\\x07{\u0002\u0002\\u0527\\u0528\\x07v\u0002\u0002\\u0528\\u0529\\x07g\u0002\u0002\\u0529\\u052A\\x07u\u0002\u0002\\u052A\\u052B\\x074\u0002\u0002\\u052B\\u0542\\x07;\u0002\u0002\\u052C\\u052D\\x07d\u0002\u0002\\u052D\\u052E\\x07{\u0002\u0002\\u052E\\u052F\\x07v\u0002\u0002\\u052F\\u0530\\x07g\u0002\u0002\\u0530\\u0531\\x07u\u0002\u0002\\u0531\\u0532\\x075\u0002\u0002\\u0532\\u0542\\x072\u0002\u0002\\u0533\\u0534\\x07d\u0002\u0002\\u0534\\u0535\\x07{\u0002\u0002\\u0535\\u0536\\x07v\u0002\u0002\\u0536\\u0537\\x07g\u0002\u0002\\u0537\\u0538\\x07u\u0002\u0002\\u0538\\u0539\\x075\u0002\u0002\\u0539\\u0542\\x073\u0002\u0002\\u053A\\u053B\\x07d\u0002\u0002\\u053B\\u053C\\x07{\u0002\u0002\\u053C\\u053D\\x07v\u0002\u0002\\u053D\\u053E\\x07g\u0002\u0002\\u053E\\u053F\\x07u\u0002\u0002\\u053F\\u0540\\x075\u0002\u0002\\u0540\\u0542\\x074\u0002\u0002\\u0541\\u0465\u0003\u0002\u0002\u0002\\u0541\\u046A\u0003\u0002\u0002\u0002\\u0541\\u0470\u0003\u0002\u0002\u0002\\u0541\\u0476\u0003\u0002\u0002\u0002\\u0541\\u047C\u0003\u0002\u0002\u0002\\u0541\\u0482\u0003\u0002\u0002\u0002\\u0541\\u0488\u0003\u0002\u0002\u0002\\u0541\\u048E\u0003\u0002\u0002\u0002\\u0541\\u0494\u0003\u0002\u0002\u0002\\u0541\\u049A\u0003\u0002\u0002\u0002\\u0541\\u04A0\u0003\u0002\u0002\u0002\\u0541\\u04A7\u0003\u0002\u0002\u0002\\u0541\\u04AE\u0003\u0002\u0002\u0002\\u0541\\u04B5\u0003\u0002\u0002\u0002\\u0541\\u04BC\u0003\u0002\u0002\u0002\\u0541\\u04C3\u0003\u0002\u0002\u0002\\u0541\\u04CA\u0003\u0002\u0002\u0002\\u0541\\u04D1\u0003\u0002\u0002\u0002\\u0541\\u04D8\u0003\u0002\u0002\u0002\\u0541\\u04DF\u0003\u0002\u0002\u0002\\u0541\\u04E6\u0003\u0002\u0002\u0002\\u0541\\u04ED\u0003\u0002\u0002\u0002\\u0541\\u04F4\u0003\u0002\u0002\u0002\\u0541\\u04FB\u0003\u0002\u0002\u0002\\u0541\\u0502\u0003\u0002\u0002\u0002\\u0541\\u0509\u0003\u0002\u0002\u0002\\u0541\\u0510\u0003\u0002\u0002\u0002\\u0541\\u0517\u0003\u0002\u0002\u0002\\u0541\\u051E\u0003\u0002\u0002\u0002\\u0541\\u0525\u0003\u0002\u0002\u0002\\u0541\\u052C\u0003\u0002\u0002\u0002\\u0541\\u0533\u0003\u0002\u0002\u0002\\u0541\\u053A\u0003\u0002\u0002\u0002\\u0542\\xCA\u0003\u0002\u0002\u0002\\u0543\\u0544\\x07h\u0002\u0002\\u0544\\u0545\\x07k\u0002\u0002\\u0545\\u0546\\x07z\u0002\u0002\\u0546\\u0547\\x07g\u0002\u0002\\u0547\\u055A\\x07f\u0002\u0002\\u0548\\u0549\\x07h\u0002\u0002\\u0549\\u054A\\x07k\u0002\u0002\\u054A\\u054B\\x07z\u0002\u0002\\u054B\\u054C\\x07g\u0002\u0002\\u054C\\u054D\\x07f\u0002\u0002\\u054D\\u054F\u0003\u0002\u0002\u0002\\u054E\\u0550\t\u0002\u0002\u0002\\u054F\\u054E\u0003\u0002\u0002\u0002\\u0550\\u0551\u0003\u0002\u0002\u0002\\u0551\\u054F\u0003\u0002\u0002\u0002\\u0551\\u0552\u0003\u0002\u0002\u0002\\u0552\\u0553\u0003\u0002\u0002\u0002\\u0553\\u0555\\x07z\u0002\u0002\\u0554\\u0556\t\u0002\u0002\u0002\\u0555\\u0554\u0003\u0002\u0002\u0002\\u0556\\u0557\u0003\u0002\u0002\u0002\\u0557\\u0555\u0003\u0002\u0002\u0002\\u0557\\u0558\u0003\u0002\u0002\u0002\\u0558\\u055A\u0003\u0002\u0002\u0002\\u0559\\u0543\u0003\u0002\u0002\u0002\\u0559\\u0548\u0003\u0002\u0002\u0002\\u055A\\xCC\u0003\u0002\u0002\u0002\\u055B\\u055C\\x07w\u0002\u0002\\u055C\\u055D\\x07h\u0002\u0002\\u055D\\u055E\\x07k\u0002\u0002\\u055E\\u055F\\x07z\u0002\u0002\\u055F\\u0560\\x07g\u0002\u0002\\u0560\\u0574\\x07f\u0002\u0002\\u0561\\u0562\\x07w\u0002\u0002\\u0562\\u0563\\x07h\u0002\u0002\\u0563\\u0564\\x07k\u0002\u0002\\u0564\\u0565\\x07z\u0002\u0002\\u0565\\u0566\\x07g\u0002\u0002\\u0566\\u0567\\x07f\u0002\u0002\\u0567\\u0569\u0003\u0002\u0002\u0002\\u0568\\u056A\t\u0002\u0002\u0002\\u0569\\u0568\u0003\u0002\u0002\u0002\\u056A\\u056B\u0003\u0002\u0002\u0002\\u056B\\u0569\u0003\u0002\u0002\u0002\\u056B\\u056C\u0003\u0002\u0002\u0002\\u056C\\u056D\u0003\u0002\u0002\u0002\\u056D\\u056F\\x07z\u0002\u0002\\u056E\\u0570\t\u0002\u0002\u0002\\u056F\\u056E\u0003\u0002\u0002\u0002\\u0570\\u0571\u0003\u0002\u0002\u0002\\u0571\\u056F\u0003\u0002\u0002\u0002\\u0571\\u0572\u0003\u0002\u0002\u0002\\u0572\\u0574\u0003\u0002\u0002\u0002\\u0573\\u055B\u0003\u0002\u0002\u0002\\u0573\\u0561\u0003\u0002\u0002\u0002\\u0574\\xCE\u0003\u0002\u0002\u0002\\u0575\\u0576\\x07v\u0002\u0002\\u0576\\u0577\\x07t\u0002\u0002\\u0577\\u0578\\x07w\u0002\u0002\\u0578\\u057F\\x07g\u0002\u0002\\u0579\\u057A\\x07h\u0002\u0002\\u057A\\u057B\\x07c\u0002\u0002\\u057B\\u057C\\x07n\u0002\u0002\\u057C\\u057D\\x07u\u0002\u0002\\u057D\\u057F\\x07g\u0002\u0002\\u057E\\u0575\u0003\u0002\u0002\u0002\\u057E\\u0579\u0003\u0002\u0002\u0002\\u057F\\xD0\u0003\u0002\u0002\u0002\\u0580\\u0587\u0005\\xD3j\u0002\\u0581\\u0583\u0005\\xD3j\u0002\\u0582\\u0581\u0003\u0002\u0002\u0002\\u0582\\u0583\u0003\u0002\u0002\u0002\\u0583\\u0584\u0003\u0002\u0002\u0002\\u0584\\u0585\\x070\u0002\u0002\\u0585\\u0587\u0005\\xD3j\u0002\\u0586\\u0580\u0003\u0002\u0002\u0002\\u0586\\u0582\u0003\u0002\u0002\u0002\\u0587\\u058A\u0003\u0002\u0002\u0002\\u0588\\u0589\t\u0003\u0002\u0002\\u0589\\u058B\u0005\\xD3j\u0002\\u058A\\u0588\u0003\u0002\u0002\u0002\\u058A\\u058B\u0003\u0002\u0002\u0002\\u058B\\xD2\u0003\u0002\u0002\u0002\\u058C\\u0593\t\u0002\u0002\u0002\\u058D\\u058F\\x07a\u0002\u0002\\u058E\\u058D\u0003\u0002\u0002\u0002\\u058E\\u058F\u0003\u0002\u0002\u0002\\u058F\\u0590\u0003\u0002\u0002\u0002\\u0590\\u0592\t\u0002\u0002\u0002\\u0591\\u058E\u0003\u0002\u0002\u0002\\u0592\\u0595\u0003\u0002\u0002\u0002\\u0593\\u0591\u0003\u0002\u0002\u0002\\u0593\\u0594\u0003\u0002\u0002\u0002\\u0594\\xD4\u0003\u0002\u0002\u0002\\u0595\\u0593\u0003\u0002\u0002\u0002\\u0596\\u0597\\x072\u0002\u0002\\u0597\\u0598\t\u0004\u0002\u0002\\u0598\\u0599\u0005\\xD7l\u0002\\u0599\\xD6\u0003\u0002\u0002\u0002\\u059A\\u05A1\u0005\\xDFp\u0002\\u059B\\u059D\\x07a\u0002\u0002\\u059C\\u059B\u0003\u0002\u0002\u0002\\u059C\\u059D\u0003\u0002\u0002\u0002\\u059D\\u059E\u0003\u0002\u0002\u0002\\u059E\\u05A0\u0005\\xDFp\u0002\\u059F\\u059C\u0003\u0002\u0002\u0002\\u05A0\\u05A3\u0003\u0002\u0002\u0002\\u05A1\\u059F\u0003\u0002\u0002\u0002\\u05A1\\u05A2\u0003\u0002\u0002\u0002\\u05A2\\xD8\u0003\u0002\u0002\u0002\\u05A3\\u05A1\u0003\u0002\u0002\u0002\\u05A4\\u05A5\\x07y\u0002\u0002\\u05A5\\u05A6\\x07g\u0002\u0002\\u05A6\\u05DD\\x07k\u0002\u0002\\u05A7\\u05A8\\x07i\u0002\u0002\\u05A8\\u05A9\\x07y\u0002\u0002\\u05A9\\u05AA\\x07g\u0002\u0002\\u05AA\\u05DD\\x07k\u0002\u0002\\u05AB\\u05AC\\x07u\u0002\u0002\\u05AC\\u05AD\\x07|\u0002\u0002\\u05AD\\u05AE\\x07c\u0002\u0002\\u05AE\\u05AF\\x07d\u0002\u0002\\u05AF\\u05DD\\x07q\u0002\u0002\\u05B0\\u05B1\\x07h\u0002\u0002\\u05B1\\u05B2\\x07k\u0002\u0002\\u05B2\\u05B3\\x07p\u0002\u0002\\u05B3\\u05B4\\x07p\u0002\u0002\\u05B4\\u05B5\\x07g\u0002\u0002\\u05B5\\u05DD\\x07{\u0002\u0002\\u05B6\\u05B7\\x07g\u0002\u0002\\u05B7\\u05B8\\x07v\u0002\u0002\\u05B8\\u05B9\\x07j\u0002\u0002\\u05B9\\u05BA\\x07g\u0002\u0002\\u05BA\\u05DD\\x07t\u0002\u0002\\u05BB\\u05BC\\x07u\u0002\u0002\\u05BC\\u05BD\\x07g\u0002\u0002\\u05BD\\u05BE\\x07e\u0002\u0002\\u05BE\\u05BF\\x07q\u0002\u0002\\u05BF\\u05C0\\x07p\u0002\u0002\\u05C0\\u05C1\\x07f\u0002\u0002\\u05C1\\u05DD\\x07u\u0002\u0002\\u05C2\\u05C3\\x07o\u0002\u0002\\u05C3\\u05C4\\x07k\u0002\u0002\\u05C4\\u05C5\\x07p\u0002\u0002\\u05C5\\u05C6\\x07w\u0002\u0002\\u05C6\\u05C7\\x07v\u0002\u0002\\u05C7\\u05C8\\x07g\u0002\u0002\\u05C8\\u05DD\\x07u\u0002\u0002\\u05C9\\u05CA\\x07j\u0002\u0002\\u05CA\\u05CB\\x07q\u0002\u0002\\u05CB\\u05CC\\x07w\u0002\u0002\\u05CC\\u05CD\\x07t\u0002\u0002\\u05CD\\u05DD\\x07u\u0002\u0002\\u05CE\\u05CF\\x07f\u0002\u0002\\u05CF\\u05D0\\x07c\u0002\u0002\\u05D0\\u05D1\\x07{\u0002\u0002\\u05D1\\u05DD\\x07u\u0002\u0002\\u05D2\\u05D3\\x07y\u0002\u0002\\u05D3\\u05D4\\x07g\u0002\u0002\\u05D4\\u05D5\\x07g\u0002\u0002\\u05D5\\u05D6\\x07m\u0002\u0002\\u05D6\\u05DD\\x07u\u0002\u0002\\u05D7\\u05D8\\x07{\u0002\u0002\\u05D8\\u05D9\\x07g\u0002\u0002\\u05D9\\u05DA\\x07c\u0002\u0002\\u05DA\\u05DB\\x07t\u0002\u0002\\u05DB\\u05DD\\x07u\u0002\u0002\\u05DC\\u05A4\u0003\u0002\u0002\u0002\\u05DC\\u05A7\u0003\u0002\u0002\u0002\\u05DC\\u05AB\u0003\u0002\u0002\u0002\\u05DC\\u05B0\u0003\u0002\u0002\u0002\\u05DC\\u05B6\u0003\u0002\u0002\u0002\\u05DC\\u05BB\u0003\u0002\u0002\u0002\\u05DC\\u05C2\u0003\u0002\u0002\u0002\\u05DC\\u05C9\u0003\u0002\u0002\u0002\\u05DC\\u05CE\u0003\u0002\u0002\u0002\\u05DC\\u05D2\u0003\u0002\u0002\u0002\\u05DC\\u05D7\u0003\u0002\u0002\u0002\\u05DD\\xDA\u0003\u0002\u0002\u0002\\u05DE\\u05DF\\x07j\u0002\u0002\\u05DF\\u05E0\\x07g\u0002\u0002\\u05E0\\u05E1\\x07z\u0002\u0002\\u05E1\\u05EC\u0003\u0002\u0002\u0002\\u05E2\\u05E4\\x07$\u0002\u0002\\u05E3\\u05E5\u0005\\xD7l\u0002\\u05E4\\u05E3\u0003\u0002\u0002\u0002\\u05E4\\u05E5\u0003\u0002\u0002\u0002\\u05E5\\u05E6\u0003\u0002\u0002\u0002\\u05E6\\u05ED\\x07$\u0002\u0002\\u05E7\\u05E9\\x07)\u0002\u0002\\u05E8\\u05EA\u0005\\xD7l\u0002\\u05E9\\u05E8\u0003\u0002\u0002\u0002\\u05E9\\u05EA\u0003\u0002\u0002\u0002\\u05EA\\u05EB\u0003\u0002\u0002\u0002\\u05EB\\u05ED\\x07)\u0002\u0002\\u05EC\\u05E2\u0003\u0002\u0002\u0002\\u05EC\\u05E7\u0003\u0002\u0002\u0002\\u05ED\\xDC\u0003\u0002\u0002\u0002\\u05EE\\u05EF\u0005\\xDFp\u0002\\u05EF\\u05F0\u0005\\xDFp\u0002\\u05F0\\xDE\u0003\u0002\u0002\u0002\\u05F1\\u05F2\t\u0005\u0002\u0002\\u05F2\\xE0\u0003\u0002\u0002\u0002\\u05F3\\u05F4\\x07c\u0002\u0002\\u05F4\\u05F5\\x07d\u0002\u0002\\u05F5\\u05F6\\x07u\u0002\u0002\\u05F6\\u05F7\\x07v\u0002\u0002\\u05F7\\u05F8\\x07t\u0002\u0002\\u05F8\\u05F9\\x07c\u0002\u0002\\u05F9\\u05FA\\x07e\u0002\u0002\\u05FA\\u064C\\x07v\u0002\u0002\\u05FB\\u05FC\\x07c\u0002\u0002\\u05FC\\u05FD\\x07h\u0002\u0002\\u05FD\\u05FE\\x07v\u0002\u0002\\u05FE\\u05FF\\x07g\u0002\u0002\\u05FF\\u064C\\x07t\u0002\u0002\\u0600\\u0601\\x07e\u0002\u0002\\u0601\\u0602\\x07c\u0002\u0002\\u0602\\u0603\\x07u\u0002\u0002\\u0603\\u064C\\x07g\u0002\u0002\\u0604\\u0605\\x07e\u0002\u0002\\u0605\\u0606\\x07c\u0002\u0002\\u0606\\u0607\\x07v\u0002\u0002\\u0607\\u0608\\x07e\u0002\u0002\\u0608\\u064C\\x07j\u0002\u0002\\u0609\\u060A\\x07f\u0002\u0002\\u060A\\u060B\\x07g\u0002\u0002\\u060B\\u060C\\x07h\u0002\u0002\\u060C\\u060D\\x07c\u0002\u0002\\u060D\\u060E\\x07w\u0002\u0002\\u060E\\u060F\\x07n\u0002\u0002\\u060F\\u064C\\x07v\u0002\u0002\\u0610\\u0611\\x07h\u0002\u0002\\u0611\\u0612\\x07k\u0002\u0002\\u0612\\u0613\\x07p\u0002\u0002\\u0613\\u0614\\x07c\u0002\u0002\\u0614\\u064C\\x07n\u0002\u0002\\u0615\\u0616\\x07k\u0002\u0002\\u0616\\u064C\\x07p\u0002\u0002\\u0617\\u0618\\x07k\u0002\u0002\\u0618\\u0619\\x07p\u0002\u0002\\u0619\\u061A\\x07n\u0002\u0002\\u061A\\u061B\\x07k\u0002\u0002\\u061B\\u061C\\x07p\u0002\u0002\\u061C\\u064C\\x07g\u0002\u0002\\u061D\\u061E\\x07n\u0002\u0002\\u061E\\u061F\\x07g\u0002\u0002\\u061F\\u064C\\x07v\u0002\u0002\\u0620\\u0621\\x07o\u0002\u0002\\u0621\\u0622\\x07c\u0002\u0002\\u0622\\u0623\\x07v\u0002\u0002\\u0623\\u0624\\x07e\u0002\u0002\\u0624\\u064C\\x07j\u0002\u0002\\u0625\\u0626\\x07p\u0002\u0002\\u0626\\u0627\\x07w\u0002\u0002\\u0627\\u0628\\x07n\u0002\u0002\\u0628\\u064C\\x07n\u0002\u0002\\u0629\\u062A\\x07q\u0002\u0002\\u062A\\u064C\\x07h\u0002\u0002\\u062B\\u062C\\x07t\u0002\u0002\\u062C\\u062D\\x07g\u0002\u0002\\u062D\\u062E\\x07n\u0002\u0002\\u062E\\u062F\\x07q\u0002\u0002\\u062F\\u0630\\x07e\u0002\u0002\\u0630\\u0631\\x07c\u0002\u0002\\u0631\\u0632\\x07v\u0002\u0002\\u0632\\u0633\\x07c\u0002\u0002\\u0633\\u0634\\x07d\u0002\u0002\\u0634\\u0635\\x07n\u0002\u0002\\u0635\\u064C\\x07g\u0002\u0002\\u0636\\u0637\\x07u\u0002\u0002\\u0637\\u0638\\x07v\u0002\u0002\\u0638\\u0639\\x07c\u0002\u0002\\u0639\\u063A\\x07v\u0002\u0002\\u063A\\u063B\\x07k\u0002\u0002\\u063B\\u064C\\x07e\u0002\u0002\\u063C\\u063D\\x07u\u0002\u0002\\u063D\\u063E\\x07y\u0002\u0002\\u063E\\u063F\\x07k\u0002\u0002\\u063F\\u0640\\x07v\u0002\u0002\\u0640\\u0641\\x07e\u0002\u0002\\u0641\\u064C\\x07j\u0002\u0002\\u0642\\u0643\\x07v\u0002\u0002\\u0643\\u0644\\x07t\u0002\u0002\\u0644\\u064C\\x07{\u0002\u0002\\u0645\\u0646\\x07v\u0002\u0002\\u0646\\u0647\\x07{\u0002\u0002\\u0647\\u0648\\x07r\u0002\u0002\\u0648\\u0649\\x07g\u0002\u0002\\u0649\\u064A\\x07q\u0002\u0002\\u064A\\u064C\\x07h\u0002\u0002\\u064B\\u05F3\u0003\u0002\u0002\u0002\\u064B\\u05FB\u0003\u0002\u0002\u0002\\u064B\\u0600\u0003\u0002\u0002\u0002\\u064B\\u0604\u0003\u0002\u0002\u0002\\u064B\\u0609\u0003\u0002\u0002\u0002\\u064B\\u0610\u0003\u0002\u0002\u0002\\u064B\\u0615\u0003\u0002\u0002\u0002\\u064B\\u0617\u0003\u0002\u0002\u0002\\u064B\\u061D\u0003\u0002\u0002\u0002\\u064B\\u0620\u0003\u0002\u0002\u0002\\u064B\\u0625\u0003\u0002\u0002\u0002\\u064B\\u0629\u0003\u0002\u0002\u0002\\u064B\\u062B\u0003\u0002\u0002\u0002\\u064B\\u0636\u0003\u0002\u0002\u0002\\u064B\\u063C\u0003\u0002\u0002\u0002\\u064B\\u0642\u0003\u0002\u0002\u0002\\u064B\\u0645\u0003\u0002\u0002\u0002\\u064C\\xE2\u0003\u0002\u0002\u0002\\u064D\\u064E\\x07c\u0002\u0002\\u064E\\u064F\\x07p\u0002\u0002\\u064F\\u0650\\x07q\u0002\u0002\\u0650\\u0651\\x07p\u0002\u0002\\u0651\\u0652\\x07{\u0002\u0002\\u0652\\u0653\\x07o\u0002\u0002\\u0653\\u0654\\x07q\u0002\u0002\\u0654\\u0655\\x07w\u0002\u0002\\u0655\\u0656\\x07u\u0002\u0002\\u0656\\xE4\u0003\u0002\u0002\u0002\\u0657\\u0658\\x07d\u0002\u0002\\u0658\\u0659\\x07t\u0002\u0002\\u0659\\u065A\\x07g\u0002\u0002\\u065A\\u065B\\x07c\u0002\u0002\\u065B\\u065C\\x07m\u0002\u0002\\u065C\\xE6\u0003\u0002\u0002\u0002\\u065D\\u065E\\x07e\u0002\u0002\\u065E\\u065F\\x07q\u0002\u0002\\u065F\\u0660\\x07p\u0002\u0002\\u0660\\u0661\\x07u\u0002\u0002\\u0661\\u0662\\x07v\u0002\u0002\\u0662\\u0663\\x07c\u0002\u0002\\u0663\\u0664\\x07p\u0002\u0002\\u0664\\u0665\\x07v\u0002\u0002\\u0665\\xE8\u0003\u0002\u0002\u0002\\u0666\\u0667\\x07k\u0002\u0002\\u0667\\u0668\\x07o\u0002\u0002\\u0668\\u0669\\x07o\u0002\u0002\\u0669\\u066A\\x07w\u0002\u0002\\u066A\\u066B\\x07v\u0002\u0002\\u066B\\u066C\\x07c\u0002\u0002\\u066C\\u066D\\x07d\u0002\u0002\\u066D\\u066E\\x07n\u0002\u0002\\u066E\\u066F\\x07g\u0002\u0002\\u066F\\xEA\u0003\u0002\u0002\u0002\\u0670\\u0671\\x07e\u0002\u0002\\u0671\\u0672\\x07q\";\nSolidityLexer._serializedATNSegment3 = \"\u0002\u0002\\u0672\\u0673\\x07p\u0002\u0002\\u0673\\u0674\\x07v\u0002\u0002\\u0674\\u0675\\x07k\u0002\u0002\\u0675\\u0676\\x07p\u0002\u0002\\u0676\\u0677\\x07w\u0002\u0002\\u0677\\u0678\\x07g\u0002\u0002\\u0678\\xEC\u0003\u0002\u0002\u0002\\u0679\\u067A\\x07n\u0002\u0002\\u067A\\u067B\\x07g\u0002\u0002\\u067B\\u067C\\x07c\u0002\u0002\\u067C\\u067D\\x07x\u0002\u0002\\u067D\\u067E\\x07g\u0002\u0002\\u067E\\xEE\u0003\u0002\u0002\u0002\\u067F\\u0680\\x07g\u0002\u0002\\u0680\\u0681\\x07z\u0002\u0002\\u0681\\u0682\\x07v\u0002\u0002\\u0682\\u0683\\x07g\u0002\u0002\\u0683\\u0684\\x07t\u0002\u0002\\u0684\\u0685\\x07p\u0002\u0002\\u0685\\u0686\\x07c\u0002\u0002\\u0686\\u0687\\x07n\u0002\u0002\\u0687\\xF0\u0003\u0002\u0002\u0002\\u0688\\u0689\\x07k\u0002\u0002\\u0689\\u068A\\x07p\u0002\u0002\\u068A\\u068B\\x07f\u0002\u0002\\u068B\\u068C\\x07g\u0002\u0002\\u068C\\u068D\\x07z\u0002\u0002\\u068D\\u068E\\x07g\u0002\u0002\\u068E\\u068F\\x07f\u0002\u0002\\u068F\\xF2\u0003\u0002\u0002\u0002\\u0690\\u0691\\x07k\u0002\u0002\\u0691\\u0692\\x07p\u0002\u0002\\u0692\\u0693\\x07v\u0002\u0002\\u0693\\u0694\\x07g\u0002\u0002\\u0694\\u0695\\x07t\u0002\u0002\\u0695\\u0696\\x07p\u0002\u0002\\u0696\\u0697\\x07c\u0002\u0002\\u0697\\u0698\\x07n\u0002\u0002\\u0698\\xF4\u0003\u0002\u0002\u0002\\u0699\\u069A\\x07r\u0002\u0002\\u069A\\u069B\\x07c\u0002\u0002\\u069B\\u069C\\x07{\u0002\u0002\\u069C\\u069D\\x07c\u0002\u0002\\u069D\\u069E\\x07d\u0002\u0002\\u069E\\u069F\\x07n\u0002\u0002\\u069F\\u06A0\\x07g\u0002\u0002\\u06A0\\xF6\u0003\u0002\u0002\u0002\\u06A1\\u06A2\\x07r\u0002\u0002\\u06A2\\u06A3\\x07t\u0002\u0002\\u06A3\\u06A4\\x07k\u0002\u0002\\u06A4\\u06A5\\x07x\u0002\u0002\\u06A5\\u06A6\\x07c\u0002\u0002\\u06A6\\u06A7\\x07v\u0002\u0002\\u06A7\\u06A8\\x07g\u0002\u0002\\u06A8\\xF8\u0003\u0002\u0002\u0002\\u06A9\\u06AA\\x07r\u0002\u0002\\u06AA\\u06AB\\x07w\u0002\u0002\\u06AB\\u06AC\\x07d\u0002\u0002\\u06AC\\u06AD\\x07n\u0002\u0002\\u06AD\\u06AE\\x07k\u0002\u0002\\u06AE\\u06AF\\x07e\u0002\u0002\\u06AF\\xFA\u0003\u0002\u0002\u0002\\u06B0\\u06B1\\x07x\u0002\u0002\\u06B1\\u06B2\\x07k\u0002\u0002\\u06B2\\u06B3\\x07t\u0002\u0002\\u06B3\\u06B4\\x07v\u0002\u0002\\u06B4\\u06B5\\x07w\u0002\u0002\\u06B5\\u06B6\\x07c\u0002\u0002\\u06B6\\u06B7\\x07n\u0002\u0002\\u06B7\\xFC\u0003\u0002\u0002\u0002\\u06B8\\u06B9\\x07r\u0002\u0002\\u06B9\\u06BA\\x07w\u0002\u0002\\u06BA\\u06BB\\x07t\u0002\u0002\\u06BB\\u06BC\\x07g\u0002\u0002\\u06BC\\xFE\u0003\u0002\u0002\u0002\\u06BD\\u06BE\\x07v\u0002\u0002\\u06BE\\u06BF\\x07{\u0002\u0002\\u06BF\\u06C0\\x07r\u0002\u0002\\u06C0\\u06C1\\x07g\u0002\u0002\\u06C1\\u0100\u0003\u0002\u0002\u0002\\u06C2\\u06C3\\x07x\u0002\u0002\\u06C3\\u06C4\\x07k\u0002\u0002\\u06C4\\u06C5\\x07g\u0002\u0002\\u06C5\\u06C6\\x07y\u0002\u0002\\u06C6\\u0102\u0003\u0002\u0002\u0002\\u06C7\\u06C8\\x07i\u0002\u0002\\u06C8\\u06C9\\x07n\u0002\u0002\\u06C9\\u06CA\\x07q\u0002\u0002\\u06CA\\u06CB\\x07d\u0002\u0002\\u06CB\\u06CC\\x07c\u0002\u0002\\u06CC\\u06CD\\x07n\u0002\u0002\\u06CD\\u0104\u0003\u0002\u0002\u0002\\u06CE\\u06CF\\x07e\u0002\u0002\\u06CF\\u06D0\\x07q\u0002\u0002\\u06D0\\u06D1\\x07p\u0002\u0002\\u06D1\\u06D2\\x07u\u0002\u0002\\u06D2\\u06D3\\x07v\u0002\u0002\\u06D3\\u06D4\\x07t\u0002\u0002\\u06D4\\u06D5\\x07w\u0002\u0002\\u06D5\\u06D6\\x07e\u0002\u0002\\u06D6\\u06D7\\x07v\u0002\u0002\\u06D7\\u06D8\\x07q\u0002\u0002\\u06D8\\u06D9\\x07t\u0002\u0002\\u06D9\\u0106\u0003\u0002\u0002\u0002\\u06DA\\u06DB\\x07h\u0002\u0002\\u06DB\\u06DC\\x07c\u0002\u0002\\u06DC\\u06DD\\x07n\u0002\u0002\\u06DD\\u06DE\\x07n\u0002\u0002\\u06DE\\u06DF\\x07d\u0002\u0002\\u06DF\\u06E0\\x07c\u0002\u0002\\u06E0\\u06E1\\x07e\u0002\u0002\\u06E1\\u06E2\\x07m\u0002\u0002\\u06E2\\u0108\u0003\u0002\u0002\u0002\\u06E3\\u06E4\\x07t\u0002\u0002\\u06E4\\u06E5\\x07g\u0002\u0002\\u06E5\\u06E6\\x07e\u0002\u0002\\u06E6\\u06E7\\x07g\u0002\u0002\\u06E7\\u06E8\\x07k\u0002\u0002\\u06E8\\u06E9\\x07x\u0002\u0002\\u06E9\\u06EA\\x07g\u0002\u0002\\u06EA\\u010A\u0003\u0002\u0002\u0002\\u06EB\\u06EF\u0005\\u010D\\x87\u0002\\u06EC\\u06EE\u0005\\u010F\\x88\u0002\\u06ED\\u06EC\u0003\u0002\u0002\u0002\\u06EE\\u06F1\u0003\u0002\u0002\u0002\\u06EF\\u06ED\u0003\u0002\u0002\u0002\\u06EF\\u06F0\u0003\u0002\u0002\u0002\\u06F0\\u010C\u0003\u0002\u0002\u0002\\u06F1\\u06EF\u0003\u0002\u0002\u0002\\u06F2\\u06F3\t\u0006\u0002\u0002\\u06F3\\u010E\u0003\u0002\u0002\u0002\\u06F4\\u06F5\t\\x07\u0002\u0002\\u06F5\\u0110\u0003\u0002\u0002\u0002\\u06F6\\u06F7\\x07w\u0002\u0002\\u06F7\\u06F8\\x07p\u0002\u0002\\u06F8\\u06F9\\x07k\u0002\u0002\\u06F9\\u06FA\\x07e\u0002\u0002\\u06FA\\u06FB\\x07q\u0002\u0002\\u06FB\\u06FC\\x07f\u0002\u0002\\u06FC\\u06FE\\x07g\u0002\u0002\\u06FD\\u06F6\u0003\u0002\u0002\u0002\\u06FD\\u06FE\u0003\u0002\u0002\u0002\\u06FE\\u06FF\u0003\u0002\u0002\u0002\\u06FF\\u0703\\x07$\u0002\u0002\\u0700\\u0702\u0005\\u0113\\x8A\u0002\\u0701\\u0700\u0003\u0002\u0002\u0002\\u0702\\u0705\u0003\u0002\u0002\u0002\\u0703\\u0701\u0003\u0002\u0002\u0002\\u0703\\u0704\u0003\u0002\u0002\u0002\\u0704\\u0706\u0003\u0002\u0002\u0002\\u0705\\u0703\u0003\u0002\u0002\u0002\\u0706\\u0719\\x07$\u0002\u0002\\u0707\\u0708\\x07w\u0002\u0002\\u0708\\u0709\\x07p\u0002\u0002\\u0709\\u070A\\x07k\u0002\u0002\\u070A\\u070B\\x07e\u0002\u0002\\u070B\\u070C\\x07q\u0002\u0002\\u070C\\u070D\\x07f\u0002\u0002\\u070D\\u070F\\x07g\u0002\u0002\\u070E\\u0707\u0003\u0002\u0002\u0002\\u070E\\u070F\u0003\u0002\u0002\u0002\\u070F\\u0710\u0003\u0002\u0002\u0002\\u0710\\u0714\\x07)\u0002\u0002\\u0711\\u0713\u0005\\u0115\\x8B\u0002\\u0712\\u0711\u0003\u0002\u0002\u0002\\u0713\\u0716\u0003\u0002\u0002\u0002\\u0714\\u0712\u0003\u0002\u0002\u0002\\u0714\\u0715\u0003\u0002\u0002\u0002\\u0715\\u0717\u0003\u0002\u0002\u0002\\u0716\\u0714\u0003\u0002\u0002\u0002\\u0717\\u0719\\x07)\u0002\u0002\\u0718\\u06FD\u0003\u0002\u0002\u0002\\u0718\\u070E\u0003\u0002\u0002\u0002\\u0719\\u0112\u0003\u0002\u0002\u0002\\u071A\\u071E\\n\\b\u0002\u0002\\u071B\\u071C\\x07^\u0002\u0002\\u071C\\u071E\\v\u0002\u0002\u0002\\u071D\\u071A\u0003\u0002\u0002\u0002\\u071D\\u071B\u0003\u0002\u0002\u0002\\u071E\\u0114\u0003\u0002\u0002\u0002\\u071F\\u0723\\n\t\u0002\u0002\\u0720\\u0721\\x07^\u0002\u0002\\u0721\\u0723\\v\u0002\u0002\u0002\\u0722\\u071F\u0003\u0002\u0002\u0002\\u0722\\u0720\u0003\u0002\u0002\u0002\\u0723\\u0116\u0003\u0002\u0002\u0002\\u0724\\u0726\t\u0002\u0002\u0002\\u0725\\u0724\u0003\u0002\u0002\u0002\\u0726\\u0727\u0003\u0002\u0002\u0002\\u0727\\u0725\u0003\u0002\u0002\u0002\\u0727\\u0728\u0003\u0002\u0002\u0002\\u0728\\u0729\u0003\u0002\u0002\u0002\\u0729\\u072B\\x070\u0002\u0002\\u072A\\u072C\t\u0002\u0002\u0002\\u072B\\u072A\u0003\u0002\u0002\u0002\\u072C\\u072D\u0003\u0002\u0002\u0002\\u072D\\u072B\u0003\u0002\u0002\u0002\\u072D\\u072E\u0003\u0002\u0002\u0002\\u072E\\u0735\u0003\u0002\u0002\u0002\\u072F\\u0731\\x070\u0002\u0002\\u0730\\u0732\t\u0002\u0002\u0002\\u0731\\u0730\u0003\u0002\u0002\u0002\\u0732\\u0733\u0003\u0002\u0002\u0002\\u0733\\u0731\u0003\u0002\u0002\u0002\\u0733\\u0734\u0003\u0002\u0002\u0002\\u0734\\u0736\u0003\u0002\u0002\u0002\\u0735\\u072F\u0003\u0002\u0002\u0002\\u0735\\u0736\u0003\u0002\u0002\u0002\\u0736\\u0118\u0003\u0002\u0002\u0002\\u0737\\u0739\t\\n\u0002\u0002\\u0738\\u0737\u0003\u0002\u0002\u0002\\u0739\\u073A\u0003\u0002\u0002\u0002\\u073A\\u0738\u0003\u0002\u0002\u0002\\u073A\\u073B\u0003\u0002\u0002\u0002\\u073B\\u073C\u0003\u0002\u0002\u0002\\u073C\\u073D\\b\\x8D\u0002\u0002\\u073D\\u011A\u0003\u0002\u0002\u0002\\u073E\\u073F\\x071\u0002\u0002\\u073F\\u0740\\x07,\u0002\u0002\\u0740\\u0744\u0003\u0002\u0002\u0002\\u0741\\u0743\\v\u0002\u0002\u0002\\u0742\\u0741\u0003\u0002\u0002\u0002\\u0743\\u0746\u0003\u0002\u0002\u0002\\u0744\\u0745\u0003\u0002\u0002\u0002\\u0744\\u0742\u0003\u0002\u0002\u0002\\u0745\\u0747\u0003\u0002\u0002\u0002\\u0746\\u0744\u0003\u0002\u0002\u0002\\u0747\\u0748\\x07,\u0002\u0002\\u0748\\u0749\\x071\u0002\u0002\\u0749\\u074A\u0003\u0002\u0002\u0002\\u074A\\u074B\\b\\x8E\u0003\u0002\\u074B\\u011C\u0003\u0002\u0002\u0002\\u074C\\u074D\\x071\u0002\u0002\\u074D\\u074E\\x071\u0002\u0002\\u074E\\u0752\u0003\u0002\u0002\u0002\\u074F\\u0751\\n\\v\u0002\u0002\\u0750\\u074F\u0003\u0002\u0002\u0002\\u0751\\u0754\u0003\u0002\u0002\u0002\\u0752\\u0750\u0003\u0002\u0002\u0002\\u0752\\u0753\u0003\u0002\u0002\u0002\\u0753\\u0755\u0003\u0002\u0002\u0002\\u0754\\u0752\u0003\u0002\u0002\u0002\\u0755\\u0756\\b\\x8F\u0003\u0002\\u0756\\u011E\u0003\u0002\u0002\u0002(\u0002\\u038A\\u0463\\u0541\\u0551\\u0557\\u0559\\u056B\\u0571\\u0573\\u057E\\u0582\\u0586\\u058A\\u058E\\u0593\\u059C\\u05A1\\u05DC\\u05E4\\u05E9\\u05EC\\u064B\\u06EF\\u06FD\\u0703\\u070E\\u0714\\u0718\\u071D\\u0722\\u0727\\u072D\\u0733\\u0735\\u073A\\u0744\\u0752\u0004\\b\u0002\u0002\u0002\u0003\u0002\";\nSolidityLexer._serializedATN = Utils.join([\n  _SolidityLexer._serializedATNSegment0,\n  _SolidityLexer._serializedATNSegment1,\n  _SolidityLexer._serializedATNSegment2,\n  _SolidityLexer._serializedATNSegment3\n], \"\");\n\n// src/antlr/SolidityParser.ts\nvar import_ATN = __toModule(require_ATN());\nvar import_ATNDeserializer2 = __toModule(require_ATNDeserializer());\nvar import_FailedPredicateException = __toModule(require_FailedPredicateException());\nvar import_NoViableAltException = __toModule(require_NoViableAltException());\nvar import_Parser = __toModule(require_Parser());\nvar import_ParserRuleContext = __toModule(require_ParserRuleContext());\nvar import_ParserATNSimulator = __toModule(require_ParserATNSimulator());\nvar import_RecognitionException = __toModule(require_RecognitionException());\nvar import_Token = __toModule(require_Token());\nvar import_VocabularyImpl2 = __toModule(require_VocabularyImpl());\nvar Utils2 = __toModule(require_Utils());\nvar _SolidityParser = class extends import_Parser.Parser {\n  get vocabulary() {\n    return _SolidityParser.VOCABULARY;\n  }\n  get grammarFileName() {\n    return \"Solidity.g4\";\n  }\n  get ruleNames() {\n    return _SolidityParser.ruleNames;\n  }\n  get serializedATN() {\n    return _SolidityParser._serializedATN;\n  }\n  createFailedPredicateException(predicate, message) {\n    return new import_FailedPredicateException.FailedPredicateException(this, predicate, message);\n  }\n  constructor(input) {\n    super(input);\n    this._interp = new import_ParserATNSimulator.ParserATNSimulator(_SolidityParser._ATN, this);\n  }\n  sourceUnit() {\n    let _localctx = new SourceUnitContext(this._ctx, this.state);\n    this.enterRule(_localctx, 0, _SolidityParser.RULE_sourceUnit);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 208;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__0 | 1 << _SolidityParser.T__12 | 1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__17 | 1 << _SolidityParser.T__18 | 1 << _SolidityParser.T__19 | 1 << _SolidityParser.T__20 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__25 | 1 << _SolidityParser.T__27 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 33 & ~31) === 0 && (1 << _la - 33 & (1 << _SolidityParser.T__32 - 33 | 1 << _SolidityParser.T__35 - 33 | 1 << _SolidityParser.T__37 - 33 | 1 << _SolidityParser.T__41 - 33 | 1 << _SolidityParser.T__53 - 33 | 1 << _SolidityParser.T__54 - 33 | 1 << _SolidityParser.T__55 - 33 | 1 << _SolidityParser.T__56 - 33 | 1 << _SolidityParser.T__57 - 33)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96 | 1 << _SolidityParser.FallbackKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 206;\n            this._errHandler.sync(this);\n            switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {\n              case 1:\n                {\n                  this.state = 196;\n                  this.pragmaDirective();\n                }\n                break;\n              case 2:\n                {\n                  this.state = 197;\n                  this.importDirective();\n                }\n                break;\n              case 3:\n                {\n                  this.state = 198;\n                  this.contractDefinition();\n                }\n                break;\n              case 4:\n                {\n                  this.state = 199;\n                  this.enumDefinition();\n                }\n                break;\n              case 5:\n                {\n                  this.state = 200;\n                  this.structDefinition();\n                }\n                break;\n              case 6:\n                {\n                  this.state = 201;\n                  this.functionDefinition();\n                }\n                break;\n              case 7:\n                {\n                  this.state = 202;\n                  this.fileLevelConstant();\n                }\n                break;\n              case 8:\n                {\n                  this.state = 203;\n                  this.customErrorDefinition();\n                }\n                break;\n              case 9:\n                {\n                  this.state = 204;\n                  this.typeDefinition();\n                }\n                break;\n              case 10:\n                {\n                  this.state = 205;\n                  this.usingForDeclaration();\n                }\n                break;\n            }\n          }\n          this.state = 210;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 211;\n        this.match(_SolidityParser.EOF);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  pragmaDirective() {\n    let _localctx = new PragmaDirectiveContext(this._ctx, this.state);\n    this.enterRule(_localctx, 2, _SolidityParser.RULE_pragmaDirective);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 213;\n        this.match(_SolidityParser.T__0);\n        this.state = 214;\n        this.pragmaName();\n        this.state = 215;\n        this.pragmaValue();\n        this.state = 216;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  pragmaName() {\n    let _localctx = new PragmaNameContext(this._ctx, this.state);\n    this.enterRule(_localctx, 4, _SolidityParser.RULE_pragmaName);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 218;\n        this.identifier();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  pragmaValue() {\n    let _localctx = new PragmaValueContext(this._ctx, this.state);\n    this.enterRule(_localctx, 6, _SolidityParser.RULE_pragmaValue);\n    try {\n      this.state = 223;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 220;\n            this.match(_SolidityParser.T__2);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 221;\n            this.version();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 222;\n            this.expression(0);\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  version() {\n    let _localctx = new VersionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 8, _SolidityParser.RULE_version);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 225;\n        this.versionConstraint();\n        this.state = 232;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__3 | 1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0 || _la === _SolidityParser.DecimalNumber || _la === _SolidityParser.VersionLiteral) {\n          {\n            {\n              this.state = 227;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if (_la === _SolidityParser.T__3) {\n                {\n                  this.state = 226;\n                  this.match(_SolidityParser.T__3);\n                }\n              }\n              this.state = 229;\n              this.versionConstraint();\n            }\n          }\n          this.state = 234;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  versionOperator() {\n    let _localctx = new VersionOperatorContext(this._ctx, this.state);\n    this.enterRule(_localctx, 10, _SolidityParser.RULE_versionOperator);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 235;\n        _la = this._input.LA(1);\n        if (!((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === import_Token.Token.EOF) {\n            this.matchedEOF = true;\n          }\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  versionConstraint() {\n    let _localctx = new VersionConstraintContext(this._ctx, this.state);\n    this.enterRule(_localctx, 12, _SolidityParser.RULE_versionConstraint);\n    let _la;\n    try {\n      this.state = 245;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 238;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0) {\n              {\n                this.state = 237;\n                this.versionOperator();\n              }\n            }\n            this.state = 240;\n            this.match(_SolidityParser.VersionLiteral);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 242;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__4 | 1 << _SolidityParser.T__5 | 1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9 | 1 << _SolidityParser.T__10)) !== 0) {\n              {\n                this.state = 241;\n                this.versionOperator();\n              }\n            }\n            this.state = 244;\n            this.match(_SolidityParser.DecimalNumber);\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  importDeclaration() {\n    let _localctx = new ImportDeclarationContext(this._ctx, this.state);\n    this.enterRule(_localctx, 14, _SolidityParser.RULE_importDeclaration);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 247;\n        this.identifier();\n        this.state = 250;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__11) {\n          {\n            this.state = 248;\n            this.match(_SolidityParser.T__11);\n            this.state = 249;\n            this.identifier();\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  importDirective() {\n    let _localctx = new ImportDirectiveContext(this._ctx, this.state);\n    this.enterRule(_localctx, 16, _SolidityParser.RULE_importDirective);\n    let _la;\n    try {\n      this.state = 288;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 252;\n            this.match(_SolidityParser.T__12);\n            this.state = 253;\n            this.importPath();\n            this.state = 256;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === _SolidityParser.T__11) {\n              {\n                this.state = 254;\n                this.match(_SolidityParser.T__11);\n                this.state = 255;\n                this.identifier();\n              }\n            }\n            this.state = 258;\n            this.match(_SolidityParser.T__1);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 260;\n            this.match(_SolidityParser.T__12);\n            this.state = 263;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n              case _SolidityParser.T__2:\n                {\n                  this.state = 261;\n                  this.match(_SolidityParser.T__2);\n                }\n                break;\n              case _SolidityParser.T__13:\n              case _SolidityParser.T__24:\n              case _SolidityParser.T__35:\n              case _SolidityParser.T__41:\n              case _SolidityParser.T__53:\n              case _SolidityParser.T__95:\n              case _SolidityParser.LeaveKeyword:\n              case _SolidityParser.PayableKeyword:\n              case _SolidityParser.ConstructorKeyword:\n              case _SolidityParser.ReceiveKeyword:\n              case _SolidityParser.Identifier:\n                {\n                  this.state = 262;\n                  this.identifier();\n                }\n                break;\n              default:\n                throw new import_NoViableAltException.NoViableAltException(this);\n            }\n            this.state = 267;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === _SolidityParser.T__11) {\n              {\n                this.state = 265;\n                this.match(_SolidityParser.T__11);\n                this.state = 266;\n                this.identifier();\n              }\n            }\n            this.state = 269;\n            this.match(_SolidityParser.T__13);\n            this.state = 270;\n            this.importPath();\n            this.state = 271;\n            this.match(_SolidityParser.T__1);\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 273;\n            this.match(_SolidityParser.T__12);\n            this.state = 274;\n            this.match(_SolidityParser.T__14);\n            this.state = 275;\n            this.importDeclaration();\n            this.state = 280;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === _SolidityParser.T__15) {\n              {\n                {\n                  this.state = 276;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 277;\n                  this.importDeclaration();\n                }\n              }\n              this.state = 282;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n            this.state = 283;\n            this.match(_SolidityParser.T__16);\n            this.state = 284;\n            this.match(_SolidityParser.T__13);\n            this.state = 285;\n            this.importPath();\n            this.state = 286;\n            this.match(_SolidityParser.T__1);\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  importPath() {\n    let _localctx = new ImportPathContext(this._ctx, this.state);\n    this.enterRule(_localctx, 18, _SolidityParser.RULE_importPath);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 290;\n        this.match(_SolidityParser.StringLiteralFragment);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  contractDefinition() {\n    let _localctx = new ContractDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 20, _SolidityParser.RULE_contractDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 293;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__17) {\n          {\n            this.state = 292;\n            this.match(_SolidityParser.T__17);\n          }\n        }\n        this.state = 295;\n        _la = this._input.LA(1);\n        if (!((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__18 | 1 << _SolidityParser.T__19 | 1 << _SolidityParser.T__20)) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === import_Token.Token.EOF) {\n            this.matchedEOF = true;\n          }\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n        this.state = 296;\n        this.identifier();\n        this.state = 306;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__21) {\n          {\n            this.state = 297;\n            this.match(_SolidityParser.T__21);\n            this.state = 298;\n            this.inheritanceSpecifier();\n            this.state = 303;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === _SolidityParser.T__15) {\n              {\n                {\n                  this.state = 299;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 300;\n                  this.inheritanceSpecifier();\n                }\n              }\n              this.state = 305;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 308;\n        this.match(_SolidityParser.T__14);\n        this.state = 312;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__25 | 1 << _SolidityParser.T__27 | 1 << _SolidityParser.T__28 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 32 & ~31) === 0 && (1 << _la - 32 & (1 << _SolidityParser.T__31 - 32 | 1 << _SolidityParser.T__32 - 32 | 1 << _SolidityParser.T__35 - 32 | 1 << _SolidityParser.T__37 - 32 | 1 << _SolidityParser.T__41 - 32 | 1 << _SolidityParser.T__53 - 32 | 1 << _SolidityParser.T__54 - 32 | 1 << _SolidityParser.T__55 - 32 | 1 << _SolidityParser.T__56 - 32 | 1 << _SolidityParser.T__57 - 32)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96 | 1 << _SolidityParser.FallbackKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            {\n              this.state = 309;\n              this.contractPart();\n            }\n          }\n          this.state = 314;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 315;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  inheritanceSpecifier() {\n    let _localctx = new InheritanceSpecifierContext(this._ctx, this.state);\n    this.enterRule(_localctx, 22, _SolidityParser.RULE_inheritanceSpecifier);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 317;\n        this.userDefinedTypeName();\n        this.state = 323;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__22) {\n          {\n            this.state = 318;\n            this.match(_SolidityParser.T__22);\n            this.state = 320;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n              {\n                this.state = 319;\n                this.expressionList();\n              }\n            }\n            this.state = 322;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  contractPart() {\n    let _localctx = new ContractPartContext(this._ctx, this.state);\n    this.enterRule(_localctx, 24, _SolidityParser.RULE_contractPart);\n    try {\n      this.state = 334;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 20, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 325;\n            this.stateVariableDeclaration();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 326;\n            this.usingForDeclaration();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 327;\n            this.structDefinition();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 328;\n            this.modifierDefinition();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(_localctx, 5);\n          {\n            this.state = 329;\n            this.functionDefinition();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(_localctx, 6);\n          {\n            this.state = 330;\n            this.eventDefinition();\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(_localctx, 7);\n          {\n            this.state = 331;\n            this.enumDefinition();\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(_localctx, 8);\n          {\n            this.state = 332;\n            this.customErrorDefinition();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(_localctx, 9);\n          {\n            this.state = 333;\n            this.typeDefinition();\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  stateVariableDeclaration() {\n    let _localctx = new StateVariableDeclarationContext(this._ctx, this.state);\n    this.enterRule(_localctx, 26, _SolidityParser.RULE_stateVariableDeclaration);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 336;\n        this.typeName(0);\n        this.state = 345;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la - 97 & ~31) === 0 && (1 << _la - 97 & (1 << _SolidityParser.T__96 - 97 | 1 << _SolidityParser.ConstantKeyword - 97 | 1 << _SolidityParser.ImmutableKeyword - 97 | 1 << _SolidityParser.InternalKeyword - 97 | 1 << _SolidityParser.PrivateKeyword - 97 | 1 << _SolidityParser.PublicKeyword - 97)) !== 0) {\n          {\n            this.state = 343;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n              case _SolidityParser.PublicKeyword:\n                {\n                  this.state = 337;\n                  this.match(_SolidityParser.PublicKeyword);\n                }\n                break;\n              case _SolidityParser.InternalKeyword:\n                {\n                  this.state = 338;\n                  this.match(_SolidityParser.InternalKeyword);\n                }\n                break;\n              case _SolidityParser.PrivateKeyword:\n                {\n                  this.state = 339;\n                  this.match(_SolidityParser.PrivateKeyword);\n                }\n                break;\n              case _SolidityParser.ConstantKeyword:\n                {\n                  this.state = 340;\n                  this.match(_SolidityParser.ConstantKeyword);\n                }\n                break;\n              case _SolidityParser.ImmutableKeyword:\n                {\n                  this.state = 341;\n                  this.match(_SolidityParser.ImmutableKeyword);\n                }\n                break;\n              case _SolidityParser.T__96:\n                {\n                  this.state = 342;\n                  this.overrideSpecifier();\n                }\n                break;\n              default:\n                throw new import_NoViableAltException.NoViableAltException(this);\n            }\n          }\n          this.state = 347;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 348;\n        this.identifier();\n        this.state = 351;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__10) {\n          {\n            this.state = 349;\n            this.match(_SolidityParser.T__10);\n            this.state = 350;\n            this.expression(0);\n          }\n        }\n        this.state = 353;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  fileLevelConstant() {\n    let _localctx = new FileLevelConstantContext(this._ctx, this.state);\n    this.enterRule(_localctx, 28, _SolidityParser.RULE_fileLevelConstant);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 355;\n        this.typeName(0);\n        this.state = 356;\n        this.match(_SolidityParser.ConstantKeyword);\n        this.state = 357;\n        this.identifier();\n        this.state = 358;\n        this.match(_SolidityParser.T__10);\n        this.state = 359;\n        this.expression(0);\n        this.state = 360;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  customErrorDefinition() {\n    let _localctx = new CustomErrorDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 30, _SolidityParser.RULE_customErrorDefinition);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 362;\n        this.match(_SolidityParser.T__24);\n        this.state = 363;\n        this.identifier();\n        this.state = 364;\n        this.parameterList();\n        this.state = 365;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  typeDefinition() {\n    let _localctx = new TypeDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 32, _SolidityParser.RULE_typeDefinition);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 367;\n        this.match(_SolidityParser.TypeKeyword);\n        this.state = 368;\n        this.identifier();\n        this.state = 369;\n        this.match(_SolidityParser.T__21);\n        this.state = 370;\n        this.elementaryTypeName();\n        this.state = 371;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  usingForDeclaration() {\n    let _localctx = new UsingForDeclarationContext(this._ctx, this.state);\n    this.enterRule(_localctx, 34, _SolidityParser.RULE_usingForDeclaration);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 373;\n        this.match(_SolidityParser.T__25);\n        this.state = 374;\n        this.usingForObject();\n        this.state = 375;\n        this.match(_SolidityParser.T__26);\n        this.state = 378;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case _SolidityParser.T__2:\n            {\n              this.state = 376;\n              this.match(_SolidityParser.T__2);\n            }\n            break;\n          case _SolidityParser.T__13:\n          case _SolidityParser.T__24:\n          case _SolidityParser.T__29:\n          case _SolidityParser.T__35:\n          case _SolidityParser.T__37:\n          case _SolidityParser.T__41:\n          case _SolidityParser.T__53:\n          case _SolidityParser.T__54:\n          case _SolidityParser.T__55:\n          case _SolidityParser.T__56:\n          case _SolidityParser.T__57:\n          case _SolidityParser.T__95:\n          case _SolidityParser.Int:\n          case _SolidityParser.Uint:\n          case _SolidityParser.Byte:\n          case _SolidityParser.Fixed:\n          case _SolidityParser.Ufixed:\n          case _SolidityParser.LeaveKeyword:\n          case _SolidityParser.PayableKeyword:\n          case _SolidityParser.ConstructorKeyword:\n          case _SolidityParser.ReceiveKeyword:\n          case _SolidityParser.Identifier:\n            {\n              this.state = 377;\n              this.typeName(0);\n            }\n            break;\n          default:\n            throw new import_NoViableAltException.NoViableAltException(this);\n        }\n        this.state = 381;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.GlobalKeyword) {\n          {\n            this.state = 380;\n            this.match(_SolidityParser.GlobalKeyword);\n          }\n        }\n        this.state = 383;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  usingForObject() {\n    let _localctx = new UsingForObjectContext(this._ctx, this.state);\n    this.enterRule(_localctx, 36, _SolidityParser.RULE_usingForObject);\n    let _la;\n    try {\n      this.state = 397;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case _SolidityParser.T__13:\n        case _SolidityParser.T__24:\n        case _SolidityParser.T__35:\n        case _SolidityParser.T__41:\n        case _SolidityParser.T__53:\n        case _SolidityParser.T__95:\n        case _SolidityParser.LeaveKeyword:\n        case _SolidityParser.PayableKeyword:\n        case _SolidityParser.ConstructorKeyword:\n        case _SolidityParser.ReceiveKeyword:\n        case _SolidityParser.Identifier:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 385;\n            this.userDefinedTypeName();\n          }\n          break;\n        case _SolidityParser.T__14:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 386;\n            this.match(_SolidityParser.T__14);\n            this.state = 387;\n            this.userDefinedTypeName();\n            this.state = 392;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === _SolidityParser.T__15) {\n              {\n                {\n                  this.state = 388;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 389;\n                  this.userDefinedTypeName();\n                }\n              }\n              this.state = 394;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n            this.state = 395;\n            this.match(_SolidityParser.T__16);\n          }\n          break;\n        default:\n          throw new import_NoViableAltException.NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  structDefinition() {\n    let _localctx = new StructDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 38, _SolidityParser.RULE_structDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 399;\n        this.match(_SolidityParser.T__27);\n        this.state = 400;\n        this.identifier();\n        this.state = 401;\n        this.match(_SolidityParser.T__14);\n        this.state = 412;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 402;\n            this.variableDeclaration();\n            this.state = 403;\n            this.match(_SolidityParser.T__1);\n            this.state = 409;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n              {\n                {\n                  this.state = 404;\n                  this.variableDeclaration();\n                  this.state = 405;\n                  this.match(_SolidityParser.T__1);\n                }\n              }\n              this.state = 411;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 414;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  modifierDefinition() {\n    let _localctx = new ModifierDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 40, _SolidityParser.RULE_modifierDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 416;\n        this.match(_SolidityParser.T__28);\n        this.state = 417;\n        this.identifier();\n        this.state = 419;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__22) {\n          {\n            this.state = 418;\n            this.parameterList();\n          }\n        }\n        this.state = 425;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === _SolidityParser.T__96 || _la === _SolidityParser.VirtualKeyword) {\n          {\n            this.state = 423;\n            this._errHandler.sync(this);\n            switch (this._input.LA(1)) {\n              case _SolidityParser.VirtualKeyword:\n                {\n                  this.state = 421;\n                  this.match(_SolidityParser.VirtualKeyword);\n                }\n                break;\n              case _SolidityParser.T__96:\n                {\n                  this.state = 422;\n                  this.overrideSpecifier();\n                }\n                break;\n              default:\n                throw new import_NoViableAltException.NoViableAltException(this);\n            }\n          }\n          this.state = 427;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 430;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case _SolidityParser.T__1:\n            {\n              this.state = 428;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          case _SolidityParser.T__14:\n            {\n              this.state = 429;\n              this.block();\n            }\n            break;\n          default:\n            throw new import_NoViableAltException.NoViableAltException(this);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  modifierInvocation() {\n    let _localctx = new ModifierInvocationContext(this._ctx, this.state);\n    this.enterRule(_localctx, 42, _SolidityParser.RULE_modifierInvocation);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 432;\n        this.identifier();\n        this.state = 438;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__22) {\n          {\n            this.state = 433;\n            this.match(_SolidityParser.T__22);\n            this.state = 435;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n              {\n                this.state = 434;\n                this.expressionList();\n              }\n            }\n            this.state = 437;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  functionDefinition() {\n    let _localctx = new FunctionDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 44, _SolidityParser.RULE_functionDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 440;\n        this.functionDescriptor();\n        this.state = 441;\n        this.parameterList();\n        this.state = 442;\n        this.modifierList();\n        this.state = 444;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__30) {\n          {\n            this.state = 443;\n            this.returnParameters();\n          }\n        }\n        this.state = 448;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case _SolidityParser.T__1:\n            {\n              this.state = 446;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          case _SolidityParser.T__14:\n            {\n              this.state = 447;\n              this.block();\n            }\n            break;\n          default:\n            throw new import_NoViableAltException.NoViableAltException(this);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  functionDescriptor() {\n    let _localctx = new FunctionDescriptorContext(this._ctx, this.state);\n    this.enterRule(_localctx, 46, _SolidityParser.RULE_functionDescriptor);\n    let _la;\n    try {\n      this.state = 457;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case _SolidityParser.T__29:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 450;\n            this.match(_SolidityParser.T__29);\n            this.state = 452;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n              {\n                this.state = 451;\n                this.identifier();\n              }\n            }\n          }\n          break;\n        case _SolidityParser.ConstructorKeyword:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 454;\n            this.match(_SolidityParser.ConstructorKeyword);\n          }\n          break;\n        case _SolidityParser.FallbackKeyword:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 455;\n            this.match(_SolidityParser.FallbackKeyword);\n          }\n          break;\n        case _SolidityParser.ReceiveKeyword:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 456;\n            this.match(_SolidityParser.ReceiveKeyword);\n          }\n          break;\n        default:\n          throw new import_NoViableAltException.NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  returnParameters() {\n    let _localctx = new ReturnParametersContext(this._ctx, this.state);\n    this.enterRule(_localctx, 48, _SolidityParser.RULE_returnParameters);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 459;\n        this.match(_SolidityParser.T__30);\n        this.state = 460;\n        this.parameterList();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  modifierList() {\n    let _localctx = new ModifierListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 50, _SolidityParser.RULE_modifierList);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 472;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.T__96 - 96 | 1 << _SolidityParser.ConstantKeyword - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.ExternalKeyword - 96 | 1 << _SolidityParser.InternalKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.PrivateKeyword - 96 | 1 << _SolidityParser.PublicKeyword - 96 | 1 << _SolidityParser.VirtualKeyword - 96 | 1 << _SolidityParser.PureKeyword - 96 | 1 << _SolidityParser.ViewKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 470;\n            this._errHandler.sync(this);\n            switch (this.interpreter.adaptivePredict(this._input, 40, this._ctx)) {\n              case 1:\n                {\n                  this.state = 462;\n                  this.match(_SolidityParser.ExternalKeyword);\n                }\n                break;\n              case 2:\n                {\n                  this.state = 463;\n                  this.match(_SolidityParser.PublicKeyword);\n                }\n                break;\n              case 3:\n                {\n                  this.state = 464;\n                  this.match(_SolidityParser.InternalKeyword);\n                }\n                break;\n              case 4:\n                {\n                  this.state = 465;\n                  this.match(_SolidityParser.PrivateKeyword);\n                }\n                break;\n              case 5:\n                {\n                  this.state = 466;\n                  this.match(_SolidityParser.VirtualKeyword);\n                }\n                break;\n              case 6:\n                {\n                  this.state = 467;\n                  this.stateMutability();\n                }\n                break;\n              case 7:\n                {\n                  this.state = 468;\n                  this.modifierInvocation();\n                }\n                break;\n              case 8:\n                {\n                  this.state = 469;\n                  this.overrideSpecifier();\n                }\n                break;\n            }\n          }\n          this.state = 474;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  eventDefinition() {\n    let _localctx = new EventDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 52, _SolidityParser.RULE_eventDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 475;\n        this.match(_SolidityParser.T__31);\n        this.state = 476;\n        this.identifier();\n        this.state = 477;\n        this.eventParameterList();\n        this.state = 479;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.AnonymousKeyword) {\n          {\n            this.state = 478;\n            this.match(_SolidityParser.AnonymousKeyword);\n          }\n        }\n        this.state = 481;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  enumValue() {\n    let _localctx = new EnumValueContext(this._ctx, this.state);\n    this.enterRule(_localctx, 54, _SolidityParser.RULE_enumValue);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 483;\n        this.identifier();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  enumDefinition() {\n    let _localctx = new EnumDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 56, _SolidityParser.RULE_enumDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 485;\n        this.match(_SolidityParser.T__32);\n        this.state = 486;\n        this.identifier();\n        this.state = 487;\n        this.match(_SolidityParser.T__14);\n        this.state = 489;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 488;\n            this.enumValue();\n          }\n        }\n        this.state = 495;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === _SolidityParser.T__15) {\n          {\n            {\n              this.state = 491;\n              this.match(_SolidityParser.T__15);\n              this.state = 492;\n              this.enumValue();\n            }\n          }\n          this.state = 497;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 498;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  parameterList() {\n    let _localctx = new ParameterListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 58, _SolidityParser.RULE_parameterList);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 500;\n        this.match(_SolidityParser.T__22);\n        this.state = 509;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 501;\n            this.parameter();\n            this.state = 506;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === _SolidityParser.T__15) {\n              {\n                {\n                  this.state = 502;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 503;\n                  this.parameter();\n                }\n              }\n              this.state = 508;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 511;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  parameter() {\n    let _localctx = new ParameterContext(this._ctx, this.state);\n    this.enterRule(_localctx, 60, _SolidityParser.RULE_parameter);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 513;\n        this.typeName(0);\n        this.state = 515;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {\n          case 1:\n            {\n              this.state = 514;\n              this.storageLocation();\n            }\n            break;\n        }\n        this.state = 518;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 517;\n            this.identifier();\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  eventParameterList() {\n    let _localctx = new EventParameterListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 62, _SolidityParser.RULE_eventParameterList);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 520;\n        this.match(_SolidityParser.T__22);\n        this.state = 529;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 521;\n            this.eventParameter();\n            this.state = 526;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === _SolidityParser.T__15) {\n              {\n                {\n                  this.state = 522;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 523;\n                  this.eventParameter();\n                }\n              }\n              this.state = 528;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 531;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  eventParameter() {\n    let _localctx = new EventParameterContext(this._ctx, this.state);\n    this.enterRule(_localctx, 64, _SolidityParser.RULE_eventParameter);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 533;\n        this.typeName(0);\n        this.state = 535;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.IndexedKeyword) {\n          {\n            this.state = 534;\n            this.match(_SolidityParser.IndexedKeyword);\n          }\n        }\n        this.state = 538;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 537;\n            this.identifier();\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  functionTypeParameterList() {\n    let _localctx = new FunctionTypeParameterListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 66, _SolidityParser.RULE_functionTypeParameterList);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 540;\n        this.match(_SolidityParser.T__22);\n        this.state = 549;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 541;\n            this.functionTypeParameter();\n            this.state = 546;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === _SolidityParser.T__15) {\n              {\n                {\n                  this.state = 542;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 543;\n                  this.functionTypeParameter();\n                }\n              }\n              this.state = 548;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n          }\n        }\n        this.state = 551;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  functionTypeParameter() {\n    let _localctx = new FunctionTypeParameterContext(this._ctx, this.state);\n    this.enterRule(_localctx, 68, _SolidityParser.RULE_functionTypeParameter);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 553;\n        this.typeName(0);\n        this.state = 555;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la - 40 & ~31) === 0 && (1 << _la - 40 & (1 << _SolidityParser.T__39 - 40 | 1 << _SolidityParser.T__40 - 40 | 1 << _SolidityParser.T__41 - 40)) !== 0) {\n          {\n            this.state = 554;\n            this.storageLocation();\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  variableDeclaration() {\n    let _localctx = new VariableDeclarationContext(this._ctx, this.state);\n    this.enterRule(_localctx, 70, _SolidityParser.RULE_variableDeclaration);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 557;\n        this.typeName(0);\n        this.state = 559;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 56, this._ctx)) {\n          case 1:\n            {\n              this.state = 558;\n              this.storageLocation();\n            }\n            break;\n        }\n        this.state = 561;\n        this.identifier();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  typeName(_p) {\n    if (_p === void 0) {\n      _p = 0;\n    }\n    let _parentctx = this._ctx;\n    let _parentState = this.state;\n    let _localctx = new TypeNameContext(this._ctx, _parentState);\n    let _prevctx = _localctx;\n    let _startState = 72;\n    this.enterRecursionRule(_localctx, 72, _SolidityParser.RULE_typeName, _p);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 570;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {\n          case 1:\n            {\n              this.state = 564;\n              this.elementaryTypeName();\n            }\n            break;\n          case 2:\n            {\n              this.state = 565;\n              this.userDefinedTypeName();\n            }\n            break;\n          case 3:\n            {\n              this.state = 566;\n              this.mapping();\n            }\n            break;\n          case 4:\n            {\n              this.state = 567;\n              this.functionTypeName();\n            }\n            break;\n          case 5:\n            {\n              this.state = 568;\n              this.match(_SolidityParser.T__35);\n              this.state = 569;\n              this.match(_SolidityParser.PayableKeyword);\n            }\n            break;\n        }\n        this._ctx._stop = this._input.tryLT(-1);\n        this.state = 580;\n        this._errHandler.sync(this);\n        _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);\n        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            if (this._parseListeners != null) {\n              this.triggerExitRuleEvent();\n            }\n            _prevctx = _localctx;\n            {\n              {\n                _localctx = new TypeNameContext(_parentctx, _parentState);\n                this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_typeName);\n                this.state = 572;\n                if (!this.precpred(this._ctx, 3)) {\n                  throw this.createFailedPredicateException(\"this.precpred(this._ctx, 3)\");\n                }\n                this.state = 573;\n                this.match(_SolidityParser.T__33);\n                this.state = 575;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n                  {\n                    this.state = 574;\n                    this.expression(0);\n                  }\n                }\n                this.state = 577;\n                this.match(_SolidityParser.T__34);\n              }\n            }\n          }\n          this.state = 582;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 59, this._ctx);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n  userDefinedTypeName() {\n    let _localctx = new UserDefinedTypeNameContext(this._ctx, this.state);\n    this.enterRule(_localctx, 74, _SolidityParser.RULE_userDefinedTypeName);\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 583;\n        this.identifier();\n        this.state = 588;\n        this._errHandler.sync(this);\n        _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);\n        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              {\n                this.state = 584;\n                this.match(_SolidityParser.T__36);\n                this.state = 585;\n                this.identifier();\n              }\n            }\n          }\n          this.state = 590;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  mappingKey() {\n    let _localctx = new MappingKeyContext(this._ctx, this.state);\n    this.enterRule(_localctx, 76, _SolidityParser.RULE_mappingKey);\n    try {\n      this.state = 593;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 591;\n            this.elementaryTypeName();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 592;\n            this.userDefinedTypeName();\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  mapping() {\n    let _localctx = new MappingContext(this._ctx, this.state);\n    this.enterRule(_localctx, 78, _SolidityParser.RULE_mapping);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 595;\n        this.match(_SolidityParser.T__37);\n        this.state = 596;\n        this.match(_SolidityParser.T__22);\n        this.state = 597;\n        this.mappingKey();\n        this.state = 598;\n        this.match(_SolidityParser.T__38);\n        this.state = 599;\n        this.typeName(0);\n        this.state = 600;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  functionTypeName() {\n    let _localctx = new FunctionTypeNameContext(this._ctx, this.state);\n    this.enterRule(_localctx, 80, _SolidityParser.RULE_functionTypeName);\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 602;\n        this.match(_SolidityParser.T__29);\n        this.state = 603;\n        this.functionTypeParameterList();\n        this.state = 609;\n        this._errHandler.sync(this);\n        _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);\n        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              this.state = 607;\n              this._errHandler.sync(this);\n              switch (this._input.LA(1)) {\n                case _SolidityParser.InternalKeyword:\n                  {\n                    this.state = 604;\n                    this.match(_SolidityParser.InternalKeyword);\n                  }\n                  break;\n                case _SolidityParser.ExternalKeyword:\n                  {\n                    this.state = 605;\n                    this.match(_SolidityParser.ExternalKeyword);\n                  }\n                  break;\n                case _SolidityParser.ConstantKeyword:\n                case _SolidityParser.PayableKeyword:\n                case _SolidityParser.PureKeyword:\n                case _SolidityParser.ViewKeyword:\n                  {\n                    this.state = 606;\n                    this.stateMutability();\n                  }\n                  break;\n                default:\n                  throw new import_NoViableAltException.NoViableAltException(this);\n              }\n            }\n          }\n          this.state = 611;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 63, this._ctx);\n        }\n        this.state = 614;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 64, this._ctx)) {\n          case 1:\n            {\n              this.state = 612;\n              this.match(_SolidityParser.T__30);\n              this.state = 613;\n              this.functionTypeParameterList();\n            }\n            break;\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  storageLocation() {\n    let _localctx = new StorageLocationContext(this._ctx, this.state);\n    this.enterRule(_localctx, 82, _SolidityParser.RULE_storageLocation);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 616;\n        _la = this._input.LA(1);\n        if (!((_la - 40 & ~31) === 0 && (1 << _la - 40 & (1 << _SolidityParser.T__39 - 40 | 1 << _SolidityParser.T__40 - 40 | 1 << _SolidityParser.T__41 - 40)) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === import_Token.Token.EOF) {\n            this.matchedEOF = true;\n          }\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  stateMutability() {\n    let _localctx = new StateMutabilityContext(this._ctx, this.state);\n    this.enterRule(_localctx, 84, _SolidityParser.RULE_stateMutability);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 618;\n        _la = this._input.LA(1);\n        if (!((_la - 111 & ~31) === 0 && (1 << _la - 111 & (1 << _SolidityParser.ConstantKeyword - 111 | 1 << _SolidityParser.PayableKeyword - 111 | 1 << _SolidityParser.PureKeyword - 111 | 1 << _SolidityParser.ViewKeyword - 111)) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === import_Token.Token.EOF) {\n            this.matchedEOF = true;\n          }\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  block() {\n    let _localctx = new BlockContext(this._ctx, this.state);\n    this.enterRule(_localctx, 86, _SolidityParser.RULE_block);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 620;\n        this.match(_SolidityParser.T__14);\n        this.state = 624;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__14 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__26 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__42 - 38 | 1 << _SolidityParser.T__44 - 38 | 1 << _SolidityParser.T__46 - 38 | 1 << _SolidityParser.T__47 - 38 | 1 << _SolidityParser.T__48 - 38 | 1 << _SolidityParser.T__49 - 38 | 1 << _SolidityParser.T__50 - 38 | 1 << _SolidityParser.T__51 - 38 | 1 << _SolidityParser.T__52 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.BreakKeyword - 96 | 1 << _SolidityParser.ContinueKeyword - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n          {\n            {\n              this.state = 621;\n              this.statement();\n            }\n          }\n          this.state = 626;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 627;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  statement() {\n    let _localctx = new StatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 88, _SolidityParser.RULE_statement);\n    try {\n      this.state = 644;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 66, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 629;\n            this.ifStatement();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 630;\n            this.tryStatement();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 631;\n            this.whileStatement();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 632;\n            this.forStatement();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(_localctx, 5);\n          {\n            this.state = 633;\n            this.block();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(_localctx, 6);\n          {\n            this.state = 634;\n            this.inlineAssemblyStatement();\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(_localctx, 7);\n          {\n            this.state = 635;\n            this.doWhileStatement();\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(_localctx, 8);\n          {\n            this.state = 636;\n            this.continueStatement();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(_localctx, 9);\n          {\n            this.state = 637;\n            this.breakStatement();\n          }\n          break;\n        case 10:\n          this.enterOuterAlt(_localctx, 10);\n          {\n            this.state = 638;\n            this.returnStatement();\n          }\n          break;\n        case 11:\n          this.enterOuterAlt(_localctx, 11);\n          {\n            this.state = 639;\n            this.throwStatement();\n          }\n          break;\n        case 12:\n          this.enterOuterAlt(_localctx, 12);\n          {\n            this.state = 640;\n            this.emitStatement();\n          }\n          break;\n        case 13:\n          this.enterOuterAlt(_localctx, 13);\n          {\n            this.state = 641;\n            this.simpleStatement();\n          }\n          break;\n        case 14:\n          this.enterOuterAlt(_localctx, 14);\n          {\n            this.state = 642;\n            this.uncheckedStatement();\n          }\n          break;\n        case 15:\n          this.enterOuterAlt(_localctx, 15);\n          {\n            this.state = 643;\n            this.revertStatement();\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  expressionStatement() {\n    let _localctx = new ExpressionStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 90, _SolidityParser.RULE_expressionStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 646;\n        this.expression(0);\n        this.state = 647;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  ifStatement() {\n    let _localctx = new IfStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 92, _SolidityParser.RULE_ifStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 649;\n        this.match(_SolidityParser.T__42);\n        this.state = 650;\n        this.match(_SolidityParser.T__22);\n        this.state = 651;\n        this.expression(0);\n        this.state = 652;\n        this.match(_SolidityParser.T__23);\n        this.state = 653;\n        this.statement();\n        this.state = 656;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 67, this._ctx)) {\n          case 1:\n            {\n              this.state = 654;\n              this.match(_SolidityParser.T__43);\n              this.state = 655;\n              this.statement();\n            }\n            break;\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  tryStatement() {\n    let _localctx = new TryStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 94, _SolidityParser.RULE_tryStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 658;\n        this.match(_SolidityParser.T__44);\n        this.state = 659;\n        this.expression(0);\n        this.state = 661;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__30) {\n          {\n            this.state = 660;\n            this.returnParameters();\n          }\n        }\n        this.state = 663;\n        this.block();\n        this.state = 665;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        do {\n          {\n            {\n              this.state = 664;\n              this.catchClause();\n            }\n          }\n          this.state = 667;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        } while (_la === _SolidityParser.T__45);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  catchClause() {\n    let _localctx = new CatchClauseContext(this._ctx, this.state);\n    this.enterRule(_localctx, 96, _SolidityParser.RULE_catchClause);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 669;\n        this.match(_SolidityParser.T__45);\n        this.state = 674;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__22 | 1 << _SolidityParser.T__24)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 671;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n              {\n                this.state = 670;\n                this.identifier();\n              }\n            }\n            this.state = 673;\n            this.parameterList();\n          }\n        }\n        this.state = 676;\n        this.block();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  whileStatement() {\n    let _localctx = new WhileStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 98, _SolidityParser.RULE_whileStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 678;\n        this.match(_SolidityParser.T__46);\n        this.state = 679;\n        this.match(_SolidityParser.T__22);\n        this.state = 680;\n        this.expression(0);\n        this.state = 681;\n        this.match(_SolidityParser.T__23);\n        this.state = 682;\n        this.statement();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  simpleStatement() {\n    let _localctx = new SimpleStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 100, _SolidityParser.RULE_simpleStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 686;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {\n          case 1:\n            {\n              this.state = 684;\n              this.variableDeclarationStatement();\n            }\n            break;\n          case 2:\n            {\n              this.state = 685;\n              this.expressionStatement();\n            }\n            break;\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  uncheckedStatement() {\n    let _localctx = new UncheckedStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 102, _SolidityParser.RULE_uncheckedStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 688;\n        this.match(_SolidityParser.T__47);\n        this.state = 689;\n        this.block();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  forStatement() {\n    let _localctx = new ForStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 104, _SolidityParser.RULE_forStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 691;\n        this.match(_SolidityParser.T__26);\n        this.state = 692;\n        this.match(_SolidityParser.T__22);\n        this.state = 695;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case _SolidityParser.T__5:\n          case _SolidityParser.T__13:\n          case _SolidityParser.T__22:\n          case _SolidityParser.T__24:\n          case _SolidityParser.T__29:\n          case _SolidityParser.T__33:\n          case _SolidityParser.T__35:\n          case _SolidityParser.T__37:\n          case _SolidityParser.T__41:\n          case _SolidityParser.T__53:\n          case _SolidityParser.T__54:\n          case _SolidityParser.T__55:\n          case _SolidityParser.T__56:\n          case _SolidityParser.T__57:\n          case _SolidityParser.T__58:\n          case _SolidityParser.T__59:\n          case _SolidityParser.T__60:\n          case _SolidityParser.T__62:\n          case _SolidityParser.T__63:\n          case _SolidityParser.T__64:\n          case _SolidityParser.T__65:\n          case _SolidityParser.T__66:\n          case _SolidityParser.T__95:\n          case _SolidityParser.Int:\n          case _SolidityParser.Uint:\n          case _SolidityParser.Byte:\n          case _SolidityParser.Fixed:\n          case _SolidityParser.Ufixed:\n          case _SolidityParser.BooleanLiteral:\n          case _SolidityParser.DecimalNumber:\n          case _SolidityParser.HexNumber:\n          case _SolidityParser.HexLiteralFragment:\n          case _SolidityParser.LeaveKeyword:\n          case _SolidityParser.PayableKeyword:\n          case _SolidityParser.TypeKeyword:\n          case _SolidityParser.ConstructorKeyword:\n          case _SolidityParser.ReceiveKeyword:\n          case _SolidityParser.Identifier:\n          case _SolidityParser.StringLiteralFragment:\n            {\n              this.state = 693;\n              this.simpleStatement();\n            }\n            break;\n          case _SolidityParser.T__1:\n            {\n              this.state = 694;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          default:\n            throw new import_NoViableAltException.NoViableAltException(this);\n        }\n        this.state = 699;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case _SolidityParser.T__5:\n          case _SolidityParser.T__13:\n          case _SolidityParser.T__22:\n          case _SolidityParser.T__24:\n          case _SolidityParser.T__29:\n          case _SolidityParser.T__33:\n          case _SolidityParser.T__35:\n          case _SolidityParser.T__37:\n          case _SolidityParser.T__41:\n          case _SolidityParser.T__53:\n          case _SolidityParser.T__54:\n          case _SolidityParser.T__55:\n          case _SolidityParser.T__56:\n          case _SolidityParser.T__57:\n          case _SolidityParser.T__58:\n          case _SolidityParser.T__59:\n          case _SolidityParser.T__60:\n          case _SolidityParser.T__62:\n          case _SolidityParser.T__63:\n          case _SolidityParser.T__64:\n          case _SolidityParser.T__65:\n          case _SolidityParser.T__66:\n          case _SolidityParser.T__95:\n          case _SolidityParser.Int:\n          case _SolidityParser.Uint:\n          case _SolidityParser.Byte:\n          case _SolidityParser.Fixed:\n          case _SolidityParser.Ufixed:\n          case _SolidityParser.BooleanLiteral:\n          case _SolidityParser.DecimalNumber:\n          case _SolidityParser.HexNumber:\n          case _SolidityParser.HexLiteralFragment:\n          case _SolidityParser.LeaveKeyword:\n          case _SolidityParser.PayableKeyword:\n          case _SolidityParser.TypeKeyword:\n          case _SolidityParser.ConstructorKeyword:\n          case _SolidityParser.ReceiveKeyword:\n          case _SolidityParser.Identifier:\n          case _SolidityParser.StringLiteralFragment:\n            {\n              this.state = 697;\n              this.expressionStatement();\n            }\n            break;\n          case _SolidityParser.T__1:\n            {\n              this.state = 698;\n              this.match(_SolidityParser.T__1);\n            }\n            break;\n          default:\n            throw new import_NoViableAltException.NoViableAltException(this);\n        }\n        this.state = 702;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n          {\n            this.state = 701;\n            this.expression(0);\n          }\n        }\n        this.state = 704;\n        this.match(_SolidityParser.T__23);\n        this.state = 705;\n        this.statement();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  inlineAssemblyStatement() {\n    let _localctx = new InlineAssemblyStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 106, _SolidityParser.RULE_inlineAssemblyStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 707;\n        this.match(_SolidityParser.T__48);\n        this.state = 709;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.StringLiteralFragment) {\n          {\n            this.state = 708;\n            this.match(_SolidityParser.StringLiteralFragment);\n          }\n        }\n        this.state = 715;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__22) {\n          {\n            this.state = 711;\n            this.match(_SolidityParser.T__22);\n            this.state = 712;\n            this.inlineAssemblyStatementFlag();\n            this.state = 713;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n        this.state = 717;\n        this.assemblyBlock();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  inlineAssemblyStatementFlag() {\n    let _localctx = new InlineAssemblyStatementFlagContext(this._ctx, this.state);\n    this.enterRule(_localctx, 108, _SolidityParser.RULE_inlineAssemblyStatementFlag);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 719;\n        this.stringLiteral();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  doWhileStatement() {\n    let _localctx = new DoWhileStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 110, _SolidityParser.RULE_doWhileStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 721;\n        this.match(_SolidityParser.T__49);\n        this.state = 722;\n        this.statement();\n        this.state = 723;\n        this.match(_SolidityParser.T__46);\n        this.state = 724;\n        this.match(_SolidityParser.T__22);\n        this.state = 725;\n        this.expression(0);\n        this.state = 726;\n        this.match(_SolidityParser.T__23);\n        this.state = 727;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  continueStatement() {\n    let _localctx = new ContinueStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 112, _SolidityParser.RULE_continueStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 729;\n        this.match(_SolidityParser.ContinueKeyword);\n        this.state = 730;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  breakStatement() {\n    let _localctx = new BreakStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 114, _SolidityParser.RULE_breakStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 732;\n        this.match(_SolidityParser.BreakKeyword);\n        this.state = 733;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  returnStatement() {\n    let _localctx = new ReturnStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 116, _SolidityParser.RULE_returnStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 735;\n        this.match(_SolidityParser.T__50);\n        this.state = 737;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n          {\n            this.state = 736;\n            this.expression(0);\n          }\n        }\n        this.state = 739;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  throwStatement() {\n    let _localctx = new ThrowStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 118, _SolidityParser.RULE_throwStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 741;\n        this.match(_SolidityParser.T__51);\n        this.state = 742;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  emitStatement() {\n    let _localctx = new EmitStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 120, _SolidityParser.RULE_emitStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 744;\n        this.match(_SolidityParser.T__52);\n        this.state = 745;\n        this.functionCall();\n        this.state = 746;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  revertStatement() {\n    let _localctx = new RevertStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 122, _SolidityParser.RULE_revertStatement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 748;\n        this.match(_SolidityParser.T__53);\n        this.state = 749;\n        this.functionCall();\n        this.state = 750;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  variableDeclarationStatement() {\n    let _localctx = new VariableDeclarationStatementContext(this._ctx, this.state);\n    this.enterRule(_localctx, 124, _SolidityParser.RULE_variableDeclarationStatement);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 759;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 79, this._ctx)) {\n          case 1:\n            {\n              this.state = 752;\n              this.match(_SolidityParser.T__54);\n              this.state = 753;\n              this.identifierList();\n            }\n            break;\n          case 2:\n            {\n              this.state = 754;\n              this.variableDeclaration();\n            }\n            break;\n          case 3:\n            {\n              this.state = 755;\n              this.match(_SolidityParser.T__22);\n              this.state = 756;\n              this.variableDeclarationList();\n              this.state = 757;\n              this.match(_SolidityParser.T__23);\n            }\n            break;\n        }\n        this.state = 763;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__10) {\n          {\n            this.state = 761;\n            this.match(_SolidityParser.T__10);\n            this.state = 762;\n            this.expression(0);\n          }\n        }\n        this.state = 765;\n        this.match(_SolidityParser.T__1);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  variableDeclarationList() {\n    let _localctx = new VariableDeclarationListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 126, _SolidityParser.RULE_variableDeclarationList);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 768;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 767;\n            this.variableDeclaration();\n          }\n        }\n        this.state = 776;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === _SolidityParser.T__15) {\n          {\n            {\n              this.state = 770;\n              this.match(_SolidityParser.T__15);\n              this.state = 772;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__37 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n                {\n                  this.state = 771;\n                  this.variableDeclaration();\n                }\n              }\n            }\n          }\n          this.state = 778;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  identifierList() {\n    let _localctx = new IdentifierListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 128, _SolidityParser.RULE_identifierList);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 779;\n        this.match(_SolidityParser.T__22);\n        this.state = 786;\n        this._errHandler.sync(this);\n        _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);\n        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              {\n                this.state = 781;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n                  {\n                    this.state = 780;\n                    this.identifier();\n                  }\n                }\n                this.state = 783;\n                this.match(_SolidityParser.T__15);\n              }\n            }\n          }\n          this.state = 788;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 85, this._ctx);\n        }\n        this.state = 790;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 789;\n            this.identifier();\n          }\n        }\n        this.state = 792;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  elementaryTypeName() {\n    let _localctx = new ElementaryTypeNameContext(this._ctx, this.state);\n    this.enterRule(_localctx, 130, _SolidityParser.RULE_elementaryTypeName);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 794;\n        _la = this._input.LA(1);\n        if (!((_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__54 - 36 | 1 << _SolidityParser.T__55 - 36 | 1 << _SolidityParser.T__56 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 98 & ~31) === 0 && (1 << _la - 98 & (1 << _SolidityParser.Int - 98 | 1 << _SolidityParser.Uint - 98 | 1 << _SolidityParser.Byte - 98 | 1 << _SolidityParser.Fixed - 98 | 1 << _SolidityParser.Ufixed - 98)) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === import_Token.Token.EOF) {\n            this.matchedEOF = true;\n          }\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  expression(_p) {\n    if (_p === void 0) {\n      _p = 0;\n    }\n    let _parentctx = this._ctx;\n    let _parentState = this.state;\n    let _localctx = new ExpressionContext(this._ctx, _parentState);\n    let _prevctx = _localctx;\n    let _startState = 132;\n    this.enterRecursionRule(_localctx, 132, _SolidityParser.RULE_expression, _p);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 814;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 87, this._ctx)) {\n          case 1:\n            {\n              this.state = 797;\n              this.match(_SolidityParser.T__60);\n              this.state = 798;\n              this.typeName(0);\n            }\n            break;\n          case 2:\n            {\n              this.state = 799;\n              this.match(_SolidityParser.T__22);\n              this.state = 800;\n              this.expression(0);\n              this.state = 801;\n              this.match(_SolidityParser.T__23);\n            }\n            break;\n          case 3:\n            {\n              this.state = 803;\n              _la = this._input.LA(1);\n              if (!(_la === _SolidityParser.T__58 || _la === _SolidityParser.T__59)) {\n                this._errHandler.recoverInline(this);\n              } else {\n                if (this._input.LA(1) === import_Token.Token.EOF) {\n                  this.matchedEOF = true;\n                }\n                this._errHandler.reportMatch(this);\n                this.consume();\n              }\n              this.state = 804;\n              this.expression(19);\n            }\n            break;\n          case 4:\n            {\n              this.state = 805;\n              _la = this._input.LA(1);\n              if (!(_la === _SolidityParser.T__62 || _la === _SolidityParser.T__63)) {\n                this._errHandler.recoverInline(this);\n              } else {\n                if (this._input.LA(1) === import_Token.Token.EOF) {\n                  this.matchedEOF = true;\n                }\n                this._errHandler.reportMatch(this);\n                this.consume();\n              }\n              this.state = 806;\n              this.expression(18);\n            }\n            break;\n          case 5:\n            {\n              this.state = 807;\n              _la = this._input.LA(1);\n              if (!(_la === _SolidityParser.T__64 || _la === _SolidityParser.T__65)) {\n                this._errHandler.recoverInline(this);\n              } else {\n                if (this._input.LA(1) === import_Token.Token.EOF) {\n                  this.matchedEOF = true;\n                }\n                this._errHandler.reportMatch(this);\n                this.consume();\n              }\n              this.state = 808;\n              this.expression(17);\n            }\n            break;\n          case 6:\n            {\n              this.state = 809;\n              this.match(_SolidityParser.T__66);\n              this.state = 810;\n              this.expression(16);\n            }\n            break;\n          case 7:\n            {\n              this.state = 811;\n              this.match(_SolidityParser.T__5);\n              this.state = 812;\n              this.expression(15);\n            }\n            break;\n          case 8:\n            {\n              this.state = 813;\n              this.primaryExpression();\n            }\n            break;\n        }\n        this._ctx._stop = this._input.tryLT(-1);\n        this.state = 890;\n        this._errHandler.sync(this);\n        _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);\n        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            if (this._parseListeners != null) {\n              this.triggerExitRuleEvent();\n            }\n            _prevctx = _localctx;\n            {\n              this.state = 888;\n              this._errHandler.sync(this);\n              switch (this.interpreter.adaptivePredict(this._input, 90, this._ctx)) {\n                case 1:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 816;\n                    if (!this.precpred(this._ctx, 14)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 14)\");\n                    }\n                    this.state = 817;\n                    this.match(_SolidityParser.T__67);\n                    this.state = 818;\n                    this.expression(15);\n                  }\n                  break;\n                case 2:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 819;\n                    if (!this.precpred(this._ctx, 13)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 13)\");\n                    }\n                    this.state = 820;\n                    _la = this._input.LA(1);\n                    if (!(_la === _SolidityParser.T__2 || _la === _SolidityParser.T__68 || _la === _SolidityParser.T__69)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      if (this._input.LA(1) === import_Token.Token.EOF) {\n                        this.matchedEOF = true;\n                      }\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 821;\n                    this.expression(14);\n                  }\n                  break;\n                case 3:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 822;\n                    if (!this.precpred(this._ctx, 12)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 12)\");\n                    }\n                    this.state = 823;\n                    _la = this._input.LA(1);\n                    if (!(_la === _SolidityParser.T__62 || _la === _SolidityParser.T__63)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      if (this._input.LA(1) === import_Token.Token.EOF) {\n                        this.matchedEOF = true;\n                      }\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 824;\n                    this.expression(13);\n                  }\n                  break;\n                case 4:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 825;\n                    if (!this.precpred(this._ctx, 11)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 11)\");\n                    }\n                    this.state = 826;\n                    _la = this._input.LA(1);\n                    if (!(_la === _SolidityParser.T__70 || _la === _SolidityParser.T__71)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      if (this._input.LA(1) === import_Token.Token.EOF) {\n                        this.matchedEOF = true;\n                      }\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 827;\n                    this.expression(12);\n                  }\n                  break;\n                case 5:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 828;\n                    if (!this.precpred(this._ctx, 10)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 10)\");\n                    }\n                    this.state = 829;\n                    this.match(_SolidityParser.T__72);\n                    this.state = 830;\n                    this.expression(11);\n                  }\n                  break;\n                case 6:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 831;\n                    if (!this.precpred(this._ctx, 9)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 9)\");\n                    }\n                    this.state = 832;\n                    this.match(_SolidityParser.T__4);\n                    this.state = 833;\n                    this.expression(10);\n                  }\n                  break;\n                case 7:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 834;\n                    if (!this.precpred(this._ctx, 8)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 8)\");\n                    }\n                    this.state = 835;\n                    this.match(_SolidityParser.T__73);\n                    this.state = 836;\n                    this.expression(9);\n                  }\n                  break;\n                case 8:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 837;\n                    if (!this.precpred(this._ctx, 7)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 7)\");\n                    }\n                    this.state = 838;\n                    _la = this._input.LA(1);\n                    if (!((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__6 | 1 << _SolidityParser.T__7 | 1 << _SolidityParser.T__8 | 1 << _SolidityParser.T__9)) !== 0)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      if (this._input.LA(1) === import_Token.Token.EOF) {\n                        this.matchedEOF = true;\n                      }\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 839;\n                    this.expression(8);\n                  }\n                  break;\n                case 9:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 840;\n                    if (!this.precpred(this._ctx, 6)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 6)\");\n                    }\n                    this.state = 841;\n                    _la = this._input.LA(1);\n                    if (!(_la === _SolidityParser.T__74 || _la === _SolidityParser.T__75)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      if (this._input.LA(1) === import_Token.Token.EOF) {\n                        this.matchedEOF = true;\n                      }\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 842;\n                    this.expression(7);\n                  }\n                  break;\n                case 10:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 843;\n                    if (!this.precpred(this._ctx, 5)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 5)\");\n                    }\n                    this.state = 844;\n                    this.match(_SolidityParser.T__76);\n                    this.state = 845;\n                    this.expression(6);\n                  }\n                  break;\n                case 11:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 846;\n                    if (!this.precpred(this._ctx, 4)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 4)\");\n                    }\n                    this.state = 847;\n                    this.match(_SolidityParser.T__3);\n                    this.state = 848;\n                    this.expression(5);\n                  }\n                  break;\n                case 12:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 849;\n                    if (!this.precpred(this._ctx, 3)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 3)\");\n                    }\n                    this.state = 850;\n                    this.match(_SolidityParser.T__77);\n                    this.state = 851;\n                    this.expression(0);\n                    this.state = 852;\n                    this.match(_SolidityParser.T__61);\n                    this.state = 853;\n                    this.expression(4);\n                  }\n                  break;\n                case 13:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 855;\n                    if (!this.precpred(this._ctx, 2)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 2)\");\n                    }\n                    this.state = 856;\n                    _la = this._input.LA(1);\n                    if (!(_la === _SolidityParser.T__10 || (_la - 79 & ~31) === 0 && (1 << _la - 79 & (1 << _SolidityParser.T__78 - 79 | 1 << _SolidityParser.T__79 - 79 | 1 << _SolidityParser.T__80 - 79 | 1 << _SolidityParser.T__81 - 79 | 1 << _SolidityParser.T__82 - 79 | 1 << _SolidityParser.T__83 - 79 | 1 << _SolidityParser.T__84 - 79 | 1 << _SolidityParser.T__85 - 79 | 1 << _SolidityParser.T__86 - 79 | 1 << _SolidityParser.T__87 - 79)) !== 0)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      if (this._input.LA(1) === import_Token.Token.EOF) {\n                        this.matchedEOF = true;\n                      }\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                    this.state = 857;\n                    this.expression(3);\n                  }\n                  break;\n                case 14:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 858;\n                    if (!this.precpred(this._ctx, 27)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 27)\");\n                    }\n                    this.state = 859;\n                    _la = this._input.LA(1);\n                    if (!(_la === _SolidityParser.T__58 || _la === _SolidityParser.T__59)) {\n                      this._errHandler.recoverInline(this);\n                    } else {\n                      if (this._input.LA(1) === import_Token.Token.EOF) {\n                        this.matchedEOF = true;\n                      }\n                      this._errHandler.reportMatch(this);\n                      this.consume();\n                    }\n                  }\n                  break;\n                case 15:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 860;\n                    if (!this.precpred(this._ctx, 25)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 25)\");\n                    }\n                    this.state = 861;\n                    this.match(_SolidityParser.T__33);\n                    this.state = 862;\n                    this.expression(0);\n                    this.state = 863;\n                    this.match(_SolidityParser.T__34);\n                  }\n                  break;\n                case 16:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 865;\n                    if (!this.precpred(this._ctx, 24)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 24)\");\n                    }\n                    this.state = 866;\n                    this.match(_SolidityParser.T__33);\n                    this.state = 868;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n                      {\n                        this.state = 867;\n                        this.expression(0);\n                      }\n                    }\n                    this.state = 870;\n                    this.match(_SolidityParser.T__61);\n                    this.state = 872;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n                      {\n                        this.state = 871;\n                        this.expression(0);\n                      }\n                    }\n                    this.state = 874;\n                    this.match(_SolidityParser.T__34);\n                  }\n                  break;\n                case 17:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 875;\n                    if (!this.precpred(this._ctx, 23)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 23)\");\n                    }\n                    this.state = 876;\n                    this.match(_SolidityParser.T__36);\n                    this.state = 877;\n                    this.identifier();\n                  }\n                  break;\n                case 18:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 878;\n                    if (!this.precpred(this._ctx, 22)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 22)\");\n                    }\n                    this.state = 879;\n                    this.match(_SolidityParser.T__14);\n                    this.state = 880;\n                    this.nameValueList();\n                    this.state = 881;\n                    this.match(_SolidityParser.T__16);\n                  }\n                  break;\n                case 19:\n                  {\n                    _localctx = new ExpressionContext(_parentctx, _parentState);\n                    this.pushNewRecursionContext(_localctx, _startState, _SolidityParser.RULE_expression);\n                    this.state = 883;\n                    if (!this.precpred(this._ctx, 21)) {\n                      throw this.createFailedPredicateException(\"this.precpred(this._ctx, 21)\");\n                    }\n                    this.state = 884;\n                    this.match(_SolidityParser.T__22);\n                    this.state = 885;\n                    this.functionCallArguments();\n                    this.state = 886;\n                    this.match(_SolidityParser.T__23);\n                  }\n                  break;\n              }\n            }\n          }\n          this.state = 892;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 91, this._ctx);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n  primaryExpression() {\n    let _localctx = new PrimaryExpressionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 134, _SolidityParser.RULE_primaryExpression);\n    try {\n      this.state = 902;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 92, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 893;\n            this.match(_SolidityParser.BooleanLiteral);\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 894;\n            this.numberLiteral();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 895;\n            this.hexLiteral();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 896;\n            this.stringLiteral();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(_localctx, 5);\n          {\n            this.state = 897;\n            this.identifier();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(_localctx, 6);\n          {\n            this.state = 898;\n            this.match(_SolidityParser.TypeKeyword);\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(_localctx, 7);\n          {\n            this.state = 899;\n            this.match(_SolidityParser.PayableKeyword);\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(_localctx, 8);\n          {\n            this.state = 900;\n            this.tupleExpression();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(_localctx, 9);\n          {\n            this.state = 901;\n            this.typeName(0);\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  expressionList() {\n    let _localctx = new ExpressionListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 136, _SolidityParser.RULE_expressionList);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 904;\n        this.expression(0);\n        this.state = 909;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === _SolidityParser.T__15) {\n          {\n            {\n              this.state = 905;\n              this.match(_SolidityParser.T__15);\n              this.state = 906;\n              this.expression(0);\n            }\n          }\n          this.state = 911;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  nameValueList() {\n    let _localctx = new NameValueListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 138, _SolidityParser.RULE_nameValueList);\n    let _la;\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 912;\n        this.nameValue();\n        this.state = 917;\n        this._errHandler.sync(this);\n        _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);\n        while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            {\n              {\n                this.state = 913;\n                this.match(_SolidityParser.T__15);\n                this.state = 914;\n                this.nameValue();\n              }\n            }\n          }\n          this.state = 919;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);\n        }\n        this.state = 921;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__15) {\n          {\n            this.state = 920;\n            this.match(_SolidityParser.T__15);\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  nameValue() {\n    let _localctx = new NameValueContext(this._ctx, this.state);\n    this.enterRule(_localctx, 140, _SolidityParser.RULE_nameValue);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 923;\n        this.identifier();\n        this.state = 924;\n        this.match(_SolidityParser.T__61);\n        this.state = 925;\n        this.expression(0);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  functionCallArguments() {\n    let _localctx = new FunctionCallArgumentsContext(this._ctx, this.state);\n    this.enterRule(_localctx, 142, _SolidityParser.RULE_functionCallArguments);\n    let _la;\n    try {\n      this.state = 935;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case _SolidityParser.T__14:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 927;\n            this.match(_SolidityParser.T__14);\n            this.state = 929;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n              {\n                this.state = 928;\n                this.nameValueList();\n              }\n            }\n            this.state = 931;\n            this.match(_SolidityParser.T__16);\n          }\n          break;\n        case _SolidityParser.T__5:\n        case _SolidityParser.T__13:\n        case _SolidityParser.T__22:\n        case _SolidityParser.T__23:\n        case _SolidityParser.T__24:\n        case _SolidityParser.T__29:\n        case _SolidityParser.T__33:\n        case _SolidityParser.T__35:\n        case _SolidityParser.T__37:\n        case _SolidityParser.T__41:\n        case _SolidityParser.T__53:\n        case _SolidityParser.T__54:\n        case _SolidityParser.T__55:\n        case _SolidityParser.T__56:\n        case _SolidityParser.T__57:\n        case _SolidityParser.T__58:\n        case _SolidityParser.T__59:\n        case _SolidityParser.T__60:\n        case _SolidityParser.T__62:\n        case _SolidityParser.T__63:\n        case _SolidityParser.T__64:\n        case _SolidityParser.T__65:\n        case _SolidityParser.T__66:\n        case _SolidityParser.T__95:\n        case _SolidityParser.Int:\n        case _SolidityParser.Uint:\n        case _SolidityParser.Byte:\n        case _SolidityParser.Fixed:\n        case _SolidityParser.Ufixed:\n        case _SolidityParser.BooleanLiteral:\n        case _SolidityParser.DecimalNumber:\n        case _SolidityParser.HexNumber:\n        case _SolidityParser.HexLiteralFragment:\n        case _SolidityParser.LeaveKeyword:\n        case _SolidityParser.PayableKeyword:\n        case _SolidityParser.TypeKeyword:\n        case _SolidityParser.ConstructorKeyword:\n        case _SolidityParser.ReceiveKeyword:\n        case _SolidityParser.Identifier:\n        case _SolidityParser.StringLiteralFragment:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 933;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n              {\n                this.state = 932;\n                this.expressionList();\n              }\n            }\n          }\n          break;\n        default:\n          throw new import_NoViableAltException.NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  functionCall() {\n    let _localctx = new FunctionCallContext(this._ctx, this.state);\n    this.enterRule(_localctx, 144, _SolidityParser.RULE_functionCall);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 937;\n        this.expression(0);\n        this.state = 938;\n        this.match(_SolidityParser.T__22);\n        this.state = 939;\n        this.functionCallArguments();\n        this.state = 940;\n        this.match(_SolidityParser.T__23);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyBlock() {\n    let _localctx = new AssemblyBlockContext(this._ctx, this.state);\n    this.enterRule(_localctx, 146, _SolidityParser.RULE_assemblyBlock);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 942;\n        this.match(_SolidityParser.T__14);\n        this.state = 946;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while ((_la & ~31) === 0 && (1 << _la & (1 << _SolidityParser.T__13 | 1 << _SolidityParser.T__14 | 1 << _SolidityParser.T__22 | 1 << _SolidityParser.T__24 | 1 << _SolidityParser.T__26 | 1 << _SolidityParser.T__29)) !== 0 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__42 - 36 | 1 << _SolidityParser.T__48 - 36 | 1 << _SolidityParser.T__50 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 89 & ~31) === 0 && (1 << _la - 89 & (1 << _SolidityParser.T__88 - 89 | 1 << _SolidityParser.T__91 - 89 | 1 << _SolidityParser.T__95 - 89 | 1 << _SolidityParser.BooleanLiteral - 89 | 1 << _SolidityParser.DecimalNumber - 89 | 1 << _SolidityParser.HexNumber - 89 | 1 << _SolidityParser.HexLiteralFragment - 89 | 1 << _SolidityParser.BreakKeyword - 89 | 1 << _SolidityParser.ContinueKeyword - 89 | 1 << _SolidityParser.LeaveKeyword - 89 | 1 << _SolidityParser.PayableKeyword - 89)) !== 0 || (_la - 126 & ~31) === 0 && (1 << _la - 126 & (1 << _SolidityParser.ConstructorKeyword - 126 | 1 << _SolidityParser.ReceiveKeyword - 126 | 1 << _SolidityParser.Identifier - 126 | 1 << _SolidityParser.StringLiteralFragment - 126)) !== 0) {\n          {\n            {\n              this.state = 943;\n              this.assemblyItem();\n            }\n          }\n          this.state = 948;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 949;\n        this.match(_SolidityParser.T__16);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyItem() {\n    let _localctx = new AssemblyItemContext(this._ctx, this.state);\n    this.enterRule(_localctx, 148, _SolidityParser.RULE_assemblyItem);\n    try {\n      this.state = 969;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 100, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 951;\n            this.identifier();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 952;\n            this.assemblyBlock();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 953;\n            this.assemblyExpression();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 954;\n            this.assemblyLocalDefinition();\n          }\n          break;\n        case 5:\n          this.enterOuterAlt(_localctx, 5);\n          {\n            this.state = 955;\n            this.assemblyAssignment();\n          }\n          break;\n        case 6:\n          this.enterOuterAlt(_localctx, 6);\n          {\n            this.state = 956;\n            this.assemblyStackAssignment();\n          }\n          break;\n        case 7:\n          this.enterOuterAlt(_localctx, 7);\n          {\n            this.state = 957;\n            this.labelDefinition();\n          }\n          break;\n        case 8:\n          this.enterOuterAlt(_localctx, 8);\n          {\n            this.state = 958;\n            this.assemblySwitch();\n          }\n          break;\n        case 9:\n          this.enterOuterAlt(_localctx, 9);\n          {\n            this.state = 959;\n            this.assemblyFunctionDefinition();\n          }\n          break;\n        case 10:\n          this.enterOuterAlt(_localctx, 10);\n          {\n            this.state = 960;\n            this.assemblyFor();\n          }\n          break;\n        case 11:\n          this.enterOuterAlt(_localctx, 11);\n          {\n            this.state = 961;\n            this.assemblyIf();\n          }\n          break;\n        case 12:\n          this.enterOuterAlt(_localctx, 12);\n          {\n            this.state = 962;\n            this.match(_SolidityParser.BreakKeyword);\n          }\n          break;\n        case 13:\n          this.enterOuterAlt(_localctx, 13);\n          {\n            this.state = 963;\n            this.match(_SolidityParser.ContinueKeyword);\n          }\n          break;\n        case 14:\n          this.enterOuterAlt(_localctx, 14);\n          {\n            this.state = 964;\n            this.match(_SolidityParser.LeaveKeyword);\n          }\n          break;\n        case 15:\n          this.enterOuterAlt(_localctx, 15);\n          {\n            this.state = 965;\n            this.subAssembly();\n          }\n          break;\n        case 16:\n          this.enterOuterAlt(_localctx, 16);\n          {\n            this.state = 966;\n            this.numberLiteral();\n          }\n          break;\n        case 17:\n          this.enterOuterAlt(_localctx, 17);\n          {\n            this.state = 967;\n            this.stringLiteral();\n          }\n          break;\n        case 18:\n          this.enterOuterAlt(_localctx, 18);\n          {\n            this.state = 968;\n            this.hexLiteral();\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyExpression() {\n    let _localctx = new AssemblyExpressionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 150, _SolidityParser.RULE_assemblyExpression);\n    try {\n      this.state = 974;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 101, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 971;\n            this.assemblyCall();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 972;\n            this.assemblyLiteral();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 973;\n            this.assemblyMember();\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyMember() {\n    let _localctx = new AssemblyMemberContext(this._ctx, this.state);\n    this.enterRule(_localctx, 152, _SolidityParser.RULE_assemblyMember);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 976;\n        this.identifier();\n        this.state = 977;\n        this.match(_SolidityParser.T__36);\n        this.state = 978;\n        this.identifier();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyCall() {\n    let _localctx = new AssemblyCallContext(this._ctx, this.state);\n    this.enterRule(_localctx, 154, _SolidityParser.RULE_assemblyCall);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 984;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {\n          case 1:\n            {\n              this.state = 980;\n              this.match(_SolidityParser.T__50);\n            }\n            break;\n          case 2:\n            {\n              this.state = 981;\n              this.match(_SolidityParser.T__35);\n            }\n            break;\n          case 3:\n            {\n              this.state = 982;\n              this.match(_SolidityParser.T__57);\n            }\n            break;\n          case 4:\n            {\n              this.state = 983;\n              this.identifier();\n            }\n            break;\n        }\n        this.state = 998;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 105, this._ctx)) {\n          case 1:\n            {\n              this.state = 986;\n              this.match(_SolidityParser.T__22);\n              this.state = 988;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__50 - 36 | 1 << _SolidityParser.T__53 - 36 | 1 << _SolidityParser.T__57 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n                {\n                  this.state = 987;\n                  this.assemblyExpression();\n                }\n              }\n              this.state = 994;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              while (_la === _SolidityParser.T__15) {\n                {\n                  {\n                    this.state = 990;\n                    this.match(_SolidityParser.T__15);\n                    this.state = 991;\n                    this.assemblyExpression();\n                  }\n                }\n                this.state = 996;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n              }\n              this.state = 997;\n              this.match(_SolidityParser.T__23);\n            }\n            break;\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyLocalDefinition() {\n    let _localctx = new AssemblyLocalDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 156, _SolidityParser.RULE_assemblyLocalDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1e3;\n        this.match(_SolidityParser.T__88);\n        this.state = 1001;\n        this.assemblyIdentifierOrList();\n        this.state = 1004;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__89) {\n          {\n            this.state = 1002;\n            this.match(_SolidityParser.T__89);\n            this.state = 1003;\n            this.assemblyExpression();\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyAssignment() {\n    let _localctx = new AssemblyAssignmentContext(this._ctx, this.state);\n    this.enterRule(_localctx, 158, _SolidityParser.RULE_assemblyAssignment);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1006;\n        this.assemblyIdentifierOrList();\n        this.state = 1007;\n        this.match(_SolidityParser.T__89);\n        this.state = 1008;\n        this.assemblyExpression();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyIdentifierOrList() {\n    let _localctx = new AssemblyIdentifierOrListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 160, _SolidityParser.RULE_assemblyIdentifierOrList);\n    try {\n      this.state = 1017;\n      this._errHandler.sync(this);\n      switch (this.interpreter.adaptivePredict(this._input, 107, this._ctx)) {\n        case 1:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 1010;\n            this.identifier();\n          }\n          break;\n        case 2:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 1011;\n            this.assemblyMember();\n          }\n          break;\n        case 3:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 1012;\n            this.assemblyIdentifierList();\n          }\n          break;\n        case 4:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 1013;\n            this.match(_SolidityParser.T__22);\n            this.state = 1014;\n            this.assemblyIdentifierList();\n            this.state = 1015;\n            this.match(_SolidityParser.T__23);\n          }\n          break;\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyIdentifierList() {\n    let _localctx = new AssemblyIdentifierListContext(this._ctx, this.state);\n    this.enterRule(_localctx, 162, _SolidityParser.RULE_assemblyIdentifierList);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1019;\n        this.identifier();\n        this.state = 1024;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === _SolidityParser.T__15) {\n          {\n            {\n              this.state = 1020;\n              this.match(_SolidityParser.T__15);\n              this.state = 1021;\n              this.identifier();\n            }\n          }\n          this.state = 1026;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyStackAssignment() {\n    let _localctx = new AssemblyStackAssignmentContext(this._ctx, this.state);\n    this.enterRule(_localctx, 164, _SolidityParser.RULE_assemblyStackAssignment);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1027;\n        this.assemblyExpression();\n        this.state = 1028;\n        this.match(_SolidityParser.T__90);\n        this.state = 1029;\n        this.identifier();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  labelDefinition() {\n    let _localctx = new LabelDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 166, _SolidityParser.RULE_labelDefinition);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1031;\n        this.identifier();\n        this.state = 1032;\n        this.match(_SolidityParser.T__61);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblySwitch() {\n    let _localctx = new AssemblySwitchContext(this._ctx, this.state);\n    this.enterRule(_localctx, 168, _SolidityParser.RULE_assemblySwitch);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1034;\n        this.match(_SolidityParser.T__91);\n        this.state = 1035;\n        this.assemblyExpression();\n        this.state = 1039;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === _SolidityParser.T__92 || _la === _SolidityParser.T__93) {\n          {\n            {\n              this.state = 1036;\n              this.assemblyCase();\n            }\n          }\n          this.state = 1041;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyCase() {\n    let _localctx = new AssemblyCaseContext(this._ctx, this.state);\n    this.enterRule(_localctx, 170, _SolidityParser.RULE_assemblyCase);\n    try {\n      this.state = 1048;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case _SolidityParser.T__92:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 1042;\n            this.match(_SolidityParser.T__92);\n            this.state = 1043;\n            this.assemblyLiteral();\n            this.state = 1044;\n            this.assemblyBlock();\n          }\n          break;\n        case _SolidityParser.T__93:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 1046;\n            this.match(_SolidityParser.T__93);\n            this.state = 1047;\n            this.assemblyBlock();\n          }\n          break;\n        default:\n          throw new import_NoViableAltException.NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyFunctionDefinition() {\n    let _localctx = new AssemblyFunctionDefinitionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 172, _SolidityParser.RULE_assemblyFunctionDefinition);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1050;\n        this.match(_SolidityParser.T__29);\n        this.state = 1051;\n        this.identifier();\n        this.state = 1052;\n        this.match(_SolidityParser.T__22);\n        this.state = 1054;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier) {\n          {\n            this.state = 1053;\n            this.assemblyIdentifierList();\n          }\n        }\n        this.state = 1056;\n        this.match(_SolidityParser.T__23);\n        this.state = 1058;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__94) {\n          {\n            this.state = 1057;\n            this.assemblyFunctionReturns();\n          }\n        }\n        this.state = 1060;\n        this.assemblyBlock();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyFunctionReturns() {\n    let _localctx = new AssemblyFunctionReturnsContext(this._ctx, this.state);\n    this.enterRule(_localctx, 174, _SolidityParser.RULE_assemblyFunctionReturns);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        {\n          this.state = 1062;\n          this.match(_SolidityParser.T__94);\n          this.state = 1063;\n          this.assemblyIdentifierList();\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyFor() {\n    let _localctx = new AssemblyForContext(this._ctx, this.state);\n    this.enterRule(_localctx, 176, _SolidityParser.RULE_assemblyFor);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1065;\n        this.match(_SolidityParser.T__26);\n        this.state = 1068;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case _SolidityParser.T__14:\n            {\n              this.state = 1066;\n              this.assemblyBlock();\n            }\n            break;\n          case _SolidityParser.T__13:\n          case _SolidityParser.T__24:\n          case _SolidityParser.T__35:\n          case _SolidityParser.T__41:\n          case _SolidityParser.T__50:\n          case _SolidityParser.T__53:\n          case _SolidityParser.T__57:\n          case _SolidityParser.T__95:\n          case _SolidityParser.BooleanLiteral:\n          case _SolidityParser.DecimalNumber:\n          case _SolidityParser.HexNumber:\n          case _SolidityParser.HexLiteralFragment:\n          case _SolidityParser.LeaveKeyword:\n          case _SolidityParser.PayableKeyword:\n          case _SolidityParser.ConstructorKeyword:\n          case _SolidityParser.ReceiveKeyword:\n          case _SolidityParser.Identifier:\n          case _SolidityParser.StringLiteralFragment:\n            {\n              this.state = 1067;\n              this.assemblyExpression();\n            }\n            break;\n          default:\n            throw new import_NoViableAltException.NoViableAltException(this);\n        }\n        this.state = 1070;\n        this.assemblyExpression();\n        this.state = 1073;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case _SolidityParser.T__14:\n            {\n              this.state = 1071;\n              this.assemblyBlock();\n            }\n            break;\n          case _SolidityParser.T__13:\n          case _SolidityParser.T__24:\n          case _SolidityParser.T__35:\n          case _SolidityParser.T__41:\n          case _SolidityParser.T__50:\n          case _SolidityParser.T__53:\n          case _SolidityParser.T__57:\n          case _SolidityParser.T__95:\n          case _SolidityParser.BooleanLiteral:\n          case _SolidityParser.DecimalNumber:\n          case _SolidityParser.HexNumber:\n          case _SolidityParser.HexLiteralFragment:\n          case _SolidityParser.LeaveKeyword:\n          case _SolidityParser.PayableKeyword:\n          case _SolidityParser.ConstructorKeyword:\n          case _SolidityParser.ReceiveKeyword:\n          case _SolidityParser.Identifier:\n          case _SolidityParser.StringLiteralFragment:\n            {\n              this.state = 1072;\n              this.assemblyExpression();\n            }\n            break;\n          default:\n            throw new import_NoViableAltException.NoViableAltException(this);\n        }\n        this.state = 1075;\n        this.assemblyBlock();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyIf() {\n    let _localctx = new AssemblyIfContext(this._ctx, this.state);\n    this.enterRule(_localctx, 178, _SolidityParser.RULE_assemblyIf);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1077;\n        this.match(_SolidityParser.T__42);\n        this.state = 1078;\n        this.assemblyExpression();\n        this.state = 1079;\n        this.assemblyBlock();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  assemblyLiteral() {\n    let _localctx = new AssemblyLiteralContext(this._ctx, this.state);\n    this.enterRule(_localctx, 180, _SolidityParser.RULE_assemblyLiteral);\n    try {\n      this.state = 1086;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case _SolidityParser.StringLiteralFragment:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 1081;\n            this.stringLiteral();\n          }\n          break;\n        case _SolidityParser.DecimalNumber:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 1082;\n            this.match(_SolidityParser.DecimalNumber);\n          }\n          break;\n        case _SolidityParser.HexNumber:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 1083;\n            this.match(_SolidityParser.HexNumber);\n          }\n          break;\n        case _SolidityParser.HexLiteralFragment:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 1084;\n            this.hexLiteral();\n          }\n          break;\n        case _SolidityParser.BooleanLiteral:\n          this.enterOuterAlt(_localctx, 5);\n          {\n            this.state = 1085;\n            this.match(_SolidityParser.BooleanLiteral);\n          }\n          break;\n        default:\n          throw new import_NoViableAltException.NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  subAssembly() {\n    let _localctx = new SubAssemblyContext(this._ctx, this.state);\n    this.enterRule(_localctx, 182, _SolidityParser.RULE_subAssembly);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1088;\n        this.match(_SolidityParser.T__48);\n        this.state = 1089;\n        this.identifier();\n        this.state = 1090;\n        this.assemblyBlock();\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  tupleExpression() {\n    let _localctx = new TupleExpressionContext(this._ctx, this.state);\n    this.enterRule(_localctx, 184, _SolidityParser.RULE_tupleExpression);\n    let _la;\n    try {\n      this.state = 1118;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case _SolidityParser.T__22:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 1092;\n            this.match(_SolidityParser.T__22);\n            {\n              this.state = 1094;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n                {\n                  this.state = 1093;\n                  this.expression(0);\n                }\n              }\n              this.state = 1102;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n              while (_la === _SolidityParser.T__15) {\n                {\n                  {\n                    this.state = 1096;\n                    this.match(_SolidityParser.T__15);\n                    this.state = 1098;\n                    this._errHandler.sync(this);\n                    _la = this._input.LA(1);\n                    if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n                      {\n                        this.state = 1097;\n                        this.expression(0);\n                      }\n                    }\n                  }\n                }\n                this.state = 1104;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n              }\n            }\n            this.state = 1105;\n            this.match(_SolidityParser.T__23);\n          }\n          break;\n        case _SolidityParser.T__33:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 1106;\n            this.match(_SolidityParser.T__33);\n            this.state = 1115;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la - 6 & ~31) === 0 && (1 << _la - 6 & (1 << _SolidityParser.T__5 - 6 | 1 << _SolidityParser.T__13 - 6 | 1 << _SolidityParser.T__22 - 6 | 1 << _SolidityParser.T__24 - 6 | 1 << _SolidityParser.T__29 - 6 | 1 << _SolidityParser.T__33 - 6 | 1 << _SolidityParser.T__35 - 6)) !== 0 || (_la - 38 & ~31) === 0 && (1 << _la - 38 & (1 << _SolidityParser.T__37 - 38 | 1 << _SolidityParser.T__41 - 38 | 1 << _SolidityParser.T__53 - 38 | 1 << _SolidityParser.T__54 - 38 | 1 << _SolidityParser.T__55 - 38 | 1 << _SolidityParser.T__56 - 38 | 1 << _SolidityParser.T__57 - 38 | 1 << _SolidityParser.T__58 - 38 | 1 << _SolidityParser.T__59 - 38 | 1 << _SolidityParser.T__60 - 38 | 1 << _SolidityParser.T__62 - 38 | 1 << _SolidityParser.T__63 - 38 | 1 << _SolidityParser.T__64 - 38 | 1 << _SolidityParser.T__65 - 38 | 1 << _SolidityParser.T__66 - 38)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.Int - 96 | 1 << _SolidityParser.Uint - 96 | 1 << _SolidityParser.Byte - 96 | 1 << _SolidityParser.Fixed - 96 | 1 << _SolidityParser.Ufixed - 96 | 1 << _SolidityParser.BooleanLiteral - 96 | 1 << _SolidityParser.DecimalNumber - 96 | 1 << _SolidityParser.HexNumber - 96 | 1 << _SolidityParser.HexLiteralFragment - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.TypeKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || (_la - 128 & ~31) === 0 && (1 << _la - 128 & (1 << _SolidityParser.ReceiveKeyword - 128 | 1 << _SolidityParser.Identifier - 128 | 1 << _SolidityParser.StringLiteralFragment - 128)) !== 0) {\n              {\n                this.state = 1107;\n                this.expression(0);\n                this.state = 1112;\n                this._errHandler.sync(this);\n                _la = this._input.LA(1);\n                while (_la === _SolidityParser.T__15) {\n                  {\n                    {\n                      this.state = 1108;\n                      this.match(_SolidityParser.T__15);\n                      this.state = 1109;\n                      this.expression(0);\n                    }\n                  }\n                  this.state = 1114;\n                  this._errHandler.sync(this);\n                  _la = this._input.LA(1);\n                }\n              }\n            }\n            this.state = 1117;\n            this.match(_SolidityParser.T__34);\n          }\n          break;\n        default:\n          throw new import_NoViableAltException.NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  numberLiteral() {\n    let _localctx = new NumberLiteralContext(this._ctx, this.state);\n    this.enterRule(_localctx, 186, _SolidityParser.RULE_numberLiteral);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1120;\n        _la = this._input.LA(1);\n        if (!(_la === _SolidityParser.DecimalNumber || _la === _SolidityParser.HexNumber)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === import_Token.Token.EOF) {\n            this.matchedEOF = true;\n          }\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n        this.state = 1122;\n        this._errHandler.sync(this);\n        switch (this.interpreter.adaptivePredict(this._input, 122, this._ctx)) {\n          case 1:\n            {\n              this.state = 1121;\n              this.match(_SolidityParser.NumberUnit);\n            }\n            break;\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  identifier() {\n    let _localctx = new IdentifierContext(this._ctx, this.state);\n    this.enterRule(_localctx, 188, _SolidityParser.RULE_identifier);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1124;\n        _la = this._input.LA(1);\n        if (!(_la === _SolidityParser.T__13 || _la === _SolidityParser.T__24 || (_la - 36 & ~31) === 0 && (1 << _la - 36 & (1 << _SolidityParser.T__35 - 36 | 1 << _SolidityParser.T__41 - 36 | 1 << _SolidityParser.T__53 - 36)) !== 0 || (_la - 96 & ~31) === 0 && (1 << _la - 96 & (1 << _SolidityParser.T__95 - 96 | 1 << _SolidityParser.LeaveKeyword - 96 | 1 << _SolidityParser.PayableKeyword - 96 | 1 << _SolidityParser.ConstructorKeyword - 96)) !== 0 || _la === _SolidityParser.ReceiveKeyword || _la === _SolidityParser.Identifier)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === import_Token.Token.EOF) {\n            this.matchedEOF = true;\n          }\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  hexLiteral() {\n    let _localctx = new HexLiteralContext(this._ctx, this.state);\n    this.enterRule(_localctx, 190, _SolidityParser.RULE_hexLiteral);\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1127;\n        this._errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n            case 1:\n              {\n                {\n                  this.state = 1126;\n                  this.match(_SolidityParser.HexLiteralFragment);\n                }\n              }\n              break;\n            default:\n              throw new import_NoViableAltException.NoViableAltException(this);\n          }\n          this.state = 1129;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 123, this._ctx);\n        } while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  overrideSpecifier() {\n    let _localctx = new OverrideSpecifierContext(this._ctx, this.state);\n    this.enterRule(_localctx, 192, _SolidityParser.RULE_overrideSpecifier);\n    let _la;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1131;\n        this.match(_SolidityParser.T__96);\n        this.state = 1143;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === _SolidityParser.T__22) {\n          {\n            this.state = 1132;\n            this.match(_SolidityParser.T__22);\n            this.state = 1133;\n            this.userDefinedTypeName();\n            this.state = 1138;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            while (_la === _SolidityParser.T__15) {\n              {\n                {\n                  this.state = 1134;\n                  this.match(_SolidityParser.T__15);\n                  this.state = 1135;\n                  this.userDefinedTypeName();\n                }\n              }\n              this.state = 1140;\n              this._errHandler.sync(this);\n              _la = this._input.LA(1);\n            }\n            this.state = 1141;\n            this.match(_SolidityParser.T__23);\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  stringLiteral() {\n    let _localctx = new StringLiteralContext(this._ctx, this.state);\n    this.enterRule(_localctx, 194, _SolidityParser.RULE_stringLiteral);\n    try {\n      let _alt;\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 1146;\n        this._errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n            case 1:\n              {\n                {\n                  this.state = 1145;\n                  this.match(_SolidityParser.StringLiteralFragment);\n                }\n              }\n              break;\n            default:\n              throw new import_NoViableAltException.NoViableAltException(this);\n          }\n          this.state = 1148;\n          this._errHandler.sync(this);\n          _alt = this.interpreter.adaptivePredict(this._input, 126, this._ctx);\n        } while (_alt !== 2 && _alt !== import_ATN.ATN.INVALID_ALT_NUMBER);\n      }\n    } catch (re) {\n      if (re instanceof import_RecognitionException.RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  sempred(_localctx, ruleIndex, predIndex) {\n    switch (ruleIndex) {\n      case 36:\n        return this.typeName_sempred(_localctx, predIndex);\n      case 66:\n        return this.expression_sempred(_localctx, predIndex);\n    }\n    return true;\n  }\n  typeName_sempred(_localctx, predIndex) {\n    switch (predIndex) {\n      case 0:\n        return this.precpred(this._ctx, 3);\n    }\n    return true;\n  }\n  expression_sempred(_localctx, predIndex) {\n    switch (predIndex) {\n      case 1:\n        return this.precpred(this._ctx, 14);\n      case 2:\n        return this.precpred(this._ctx, 13);\n      case 3:\n        return this.precpred(this._ctx, 12);\n      case 4:\n        return this.precpred(this._ctx, 11);\n      case 5:\n        return this.precpred(this._ctx, 10);\n      case 6:\n        return this.precpred(this._ctx, 9);\n      case 7:\n        return this.precpred(this._ctx, 8);\n      case 8:\n        return this.precpred(this._ctx, 7);\n      case 9:\n        return this.precpred(this._ctx, 6);\n      case 10:\n        return this.precpred(this._ctx, 5);\n      case 11:\n        return this.precpred(this._ctx, 4);\n      case 12:\n        return this.precpred(this._ctx, 3);\n      case 13:\n        return this.precpred(this._ctx, 2);\n      case 14:\n        return this.precpred(this._ctx, 27);\n      case 15:\n        return this.precpred(this._ctx, 25);\n      case 16:\n        return this.precpred(this._ctx, 24);\n      case 17:\n        return this.precpred(this._ctx, 23);\n      case 18:\n        return this.precpred(this._ctx, 22);\n      case 19:\n        return this.precpred(this._ctx, 21);\n    }\n    return true;\n  }\n  static get _ATN() {\n    if (!_SolidityParser.__ATN) {\n      _SolidityParser.__ATN = new import_ATNDeserializer2.ATNDeserializer().deserialize(Utils2.toCharArray(_SolidityParser._serializedATN));\n    }\n    return _SolidityParser.__ATN;\n  }\n};\nvar SolidityParser = _SolidityParser;\nSolidityParser.T__0 = 1;\nSolidityParser.T__1 = 2;\nSolidityParser.T__2 = 3;\nSolidityParser.T__3 = 4;\nSolidityParser.T__4 = 5;\nSolidityParser.T__5 = 6;\nSolidityParser.T__6 = 7;\nSolidityParser.T__7 = 8;\nSolidityParser.T__8 = 9;\nSolidityParser.T__9 = 10;\nSolidityParser.T__10 = 11;\nSolidityParser.T__11 = 12;\nSolidityParser.T__12 = 13;\nSolidityParser.T__13 = 14;\nSolidityParser.T__14 = 15;\nSolidityParser.T__15 = 16;\nSolidityParser.T__16 = 17;\nSolidityParser.T__17 = 18;\nSolidityParser.T__18 = 19;\nSolidityParser.T__19 = 20;\nSolidityParser.T__20 = 21;\nSolidityParser.T__21 = 22;\nSolidityParser.T__22 = 23;\nSolidityParser.T__23 = 24;\nSolidityParser.T__24 = 25;\nSolidityParser.T__25 = 26;\nSolidityParser.T__26 = 27;\nSolidityParser.T__27 = 28;\nSolidityParser.T__28 = 29;\nSolidityParser.T__29 = 30;\nSolidityParser.T__30 = 31;\nSolidityParser.T__31 = 32;\nSolidityParser.T__32 = 33;\nSolidityParser.T__33 = 34;\nSolidityParser.T__34 = 35;\nSolidityParser.T__35 = 36;\nSolidityParser.T__36 = 37;\nSolidityParser.T__37 = 38;\nSolidityParser.T__38 = 39;\nSolidityParser.T__39 = 40;\nSolidityParser.T__40 = 41;\nSolidityParser.T__41 = 42;\nSolidityParser.T__42 = 43;\nSolidityParser.T__43 = 44;\nSolidityParser.T__44 = 45;\nSolidityParser.T__45 = 46;\nSolidityParser.T__46 = 47;\nSolidityParser.T__47 = 48;\nSolidityParser.T__48 = 49;\nSolidityParser.T__49 = 50;\nSolidityParser.T__50 = 51;\nSolidityParser.T__51 = 52;\nSolidityParser.T__52 = 53;\nSolidityParser.T__53 = 54;\nSolidityParser.T__54 = 55;\nSolidityParser.T__55 = 56;\nSolidityParser.T__56 = 57;\nSolidityParser.T__57 = 58;\nSolidityParser.T__58 = 59;\nSolidityParser.T__59 = 60;\nSolidityParser.T__60 = 61;\nSolidityParser.T__61 = 62;\nSolidityParser.T__62 = 63;\nSolidityParser.T__63 = 64;\nSolidityParser.T__64 = 65;\nSolidityParser.T__65 = 66;\nSolidityParser.T__66 = 67;\nSolidityParser.T__67 = 68;\nSolidityParser.T__68 = 69;\nSolidityParser.T__69 = 70;\nSolidityParser.T__70 = 71;\nSolidityParser.T__71 = 72;\nSolidityParser.T__72 = 73;\nSolidityParser.T__73 = 74;\nSolidityParser.T__74 = 75;\nSolidityParser.T__75 = 76;\nSolidityParser.T__76 = 77;\nSolidityParser.T__77 = 78;\nSolidityParser.T__78 = 79;\nSolidityParser.T__79 = 80;\nSolidityParser.T__80 = 81;\nSolidityParser.T__81 = 82;\nSolidityParser.T__82 = 83;\nSolidityParser.T__83 = 84;\nSolidityParser.T__84 = 85;\nSolidityParser.T__85 = 86;\nSolidityParser.T__86 = 87;\nSolidityParser.T__87 = 88;\nSolidityParser.T__88 = 89;\nSolidityParser.T__89 = 90;\nSolidityParser.T__90 = 91;\nSolidityParser.T__91 = 92;\nSolidityParser.T__92 = 93;\nSolidityParser.T__93 = 94;\nSolidityParser.T__94 = 95;\nSolidityParser.T__95 = 96;\nSolidityParser.T__96 = 97;\nSolidityParser.Int = 98;\nSolidityParser.Uint = 99;\nSolidityParser.Byte = 100;\nSolidityParser.Fixed = 101;\nSolidityParser.Ufixed = 102;\nSolidityParser.BooleanLiteral = 103;\nSolidityParser.DecimalNumber = 104;\nSolidityParser.HexNumber = 105;\nSolidityParser.NumberUnit = 106;\nSolidityParser.HexLiteralFragment = 107;\nSolidityParser.ReservedKeyword = 108;\nSolidityParser.AnonymousKeyword = 109;\nSolidityParser.BreakKeyword = 110;\nSolidityParser.ConstantKeyword = 111;\nSolidityParser.ImmutableKeyword = 112;\nSolidityParser.ContinueKeyword = 113;\nSolidityParser.LeaveKeyword = 114;\nSolidityParser.ExternalKeyword = 115;\nSolidityParser.IndexedKeyword = 116;\nSolidityParser.InternalKeyword = 117;\nSolidityParser.PayableKeyword = 118;\nSolidityParser.PrivateKeyword = 119;\nSolidityParser.PublicKeyword = 120;\nSolidityParser.VirtualKeyword = 121;\nSolidityParser.PureKeyword = 122;\nSolidityParser.TypeKeyword = 123;\nSolidityParser.ViewKeyword = 124;\nSolidityParser.GlobalKeyword = 125;\nSolidityParser.ConstructorKeyword = 126;\nSolidityParser.FallbackKeyword = 127;\nSolidityParser.ReceiveKeyword = 128;\nSolidityParser.Identifier = 129;\nSolidityParser.StringLiteralFragment = 130;\nSolidityParser.VersionLiteral = 131;\nSolidityParser.WS = 132;\nSolidityParser.COMMENT = 133;\nSolidityParser.LINE_COMMENT = 134;\nSolidityParser.RULE_sourceUnit = 0;\nSolidityParser.RULE_pragmaDirective = 1;\nSolidityParser.RULE_pragmaName = 2;\nSolidityParser.RULE_pragmaValue = 3;\nSolidityParser.RULE_version = 4;\nSolidityParser.RULE_versionOperator = 5;\nSolidityParser.RULE_versionConstraint = 6;\nSolidityParser.RULE_importDeclaration = 7;\nSolidityParser.RULE_importDirective = 8;\nSolidityParser.RULE_importPath = 9;\nSolidityParser.RULE_contractDefinition = 10;\nSolidityParser.RULE_inheritanceSpecifier = 11;\nSolidityParser.RULE_contractPart = 12;\nSolidityParser.RULE_stateVariableDeclaration = 13;\nSolidityParser.RULE_fileLevelConstant = 14;\nSolidityParser.RULE_customErrorDefinition = 15;\nSolidityParser.RULE_typeDefinition = 16;\nSolidityParser.RULE_usingForDeclaration = 17;\nSolidityParser.RULE_usingForObject = 18;\nSolidityParser.RULE_structDefinition = 19;\nSolidityParser.RULE_modifierDefinition = 20;\nSolidityParser.RULE_modifierInvocation = 21;\nSolidityParser.RULE_functionDefinition = 22;\nSolidityParser.RULE_functionDescriptor = 23;\nSolidityParser.RULE_returnParameters = 24;\nSolidityParser.RULE_modifierList = 25;\nSolidityParser.RULE_eventDefinition = 26;\nSolidityParser.RULE_enumValue = 27;\nSolidityParser.RULE_enumDefinition = 28;\nSolidityParser.RULE_parameterList = 29;\nSolidityParser.RULE_parameter = 30;\nSolidityParser.RULE_eventParameterList = 31;\nSolidityParser.RULE_eventParameter = 32;\nSolidityParser.RULE_functionTypeParameterList = 33;\nSolidityParser.RULE_functionTypeParameter = 34;\nSolidityParser.RULE_variableDeclaration = 35;\nSolidityParser.RULE_typeName = 36;\nSolidityParser.RULE_userDefinedTypeName = 37;\nSolidityParser.RULE_mappingKey = 38;\nSolidityParser.RULE_mapping = 39;\nSolidityParser.RULE_functionTypeName = 40;\nSolidityParser.RULE_storageLocation = 41;\nSolidityParser.RULE_stateMutability = 42;\nSolidityParser.RULE_block = 43;\nSolidityParser.RULE_statement = 44;\nSolidityParser.RULE_expressionStatement = 45;\nSolidityParser.RULE_ifStatement = 46;\nSolidityParser.RULE_tryStatement = 47;\nSolidityParser.RULE_catchClause = 48;\nSolidityParser.RULE_whileStatement = 49;\nSolidityParser.RULE_simpleStatement = 50;\nSolidityParser.RULE_uncheckedStatement = 51;\nSolidityParser.RULE_forStatement = 52;\nSolidityParser.RULE_inlineAssemblyStatement = 53;\nSolidityParser.RULE_inlineAssemblyStatementFlag = 54;\nSolidityParser.RULE_doWhileStatement = 55;\nSolidityParser.RULE_continueStatement = 56;\nSolidityParser.RULE_breakStatement = 57;\nSolidityParser.RULE_returnStatement = 58;\nSolidityParser.RULE_throwStatement = 59;\nSolidityParser.RULE_emitStatement = 60;\nSolidityParser.RULE_revertStatement = 61;\nSolidityParser.RULE_variableDeclarationStatement = 62;\nSolidityParser.RULE_variableDeclarationList = 63;\nSolidityParser.RULE_identifierList = 64;\nSolidityParser.RULE_elementaryTypeName = 65;\nSolidityParser.RULE_expression = 66;\nSolidityParser.RULE_primaryExpression = 67;\nSolidityParser.RULE_expressionList = 68;\nSolidityParser.RULE_nameValueList = 69;\nSolidityParser.RULE_nameValue = 70;\nSolidityParser.RULE_functionCallArguments = 71;\nSolidityParser.RULE_functionCall = 72;\nSolidityParser.RULE_assemblyBlock = 73;\nSolidityParser.RULE_assemblyItem = 74;\nSolidityParser.RULE_assemblyExpression = 75;\nSolidityParser.RULE_assemblyMember = 76;\nSolidityParser.RULE_assemblyCall = 77;\nSolidityParser.RULE_assemblyLocalDefinition = 78;\nSolidityParser.RULE_assemblyAssignment = 79;\nSolidityParser.RULE_assemblyIdentifierOrList = 80;\nSolidityParser.RULE_assemblyIdentifierList = 81;\nSolidityParser.RULE_assemblyStackAssignment = 82;\nSolidityParser.RULE_labelDefinition = 83;\nSolidityParser.RULE_assemblySwitch = 84;\nSolidityParser.RULE_assemblyCase = 85;\nSolidityParser.RULE_assemblyFunctionDefinition = 86;\nSolidityParser.RULE_assemblyFunctionReturns = 87;\nSolidityParser.RULE_assemblyFor = 88;\nSolidityParser.RULE_assemblyIf = 89;\nSolidityParser.RULE_assemblyLiteral = 90;\nSolidityParser.RULE_subAssembly = 91;\nSolidityParser.RULE_tupleExpression = 92;\nSolidityParser.RULE_numberLiteral = 93;\nSolidityParser.RULE_identifier = 94;\nSolidityParser.RULE_hexLiteral = 95;\nSolidityParser.RULE_overrideSpecifier = 96;\nSolidityParser.RULE_stringLiteral = 97;\nSolidityParser.ruleNames = [\n  \"sourceUnit\",\n  \"pragmaDirective\",\n  \"pragmaName\",\n  \"pragmaValue\",\n  \"version\",\n  \"versionOperator\",\n  \"versionConstraint\",\n  \"importDeclaration\",\n  \"importDirective\",\n  \"importPath\",\n  \"contractDefinition\",\n  \"inheritanceSpecifier\",\n  \"contractPart\",\n  \"stateVariableDeclaration\",\n  \"fileLevelConstant\",\n  \"customErrorDefinition\",\n  \"typeDefinition\",\n  \"usingForDeclaration\",\n  \"usingForObject\",\n  \"structDefinition\",\n  \"modifierDefinition\",\n  \"modifierInvocation\",\n  \"functionDefinition\",\n  \"functionDescriptor\",\n  \"returnParameters\",\n  \"modifierList\",\n  \"eventDefinition\",\n  \"enumValue\",\n  \"enumDefinition\",\n  \"parameterList\",\n  \"parameter\",\n  \"eventParameterList\",\n  \"eventParameter\",\n  \"functionTypeParameterList\",\n  \"functionTypeParameter\",\n  \"variableDeclaration\",\n  \"typeName\",\n  \"userDefinedTypeName\",\n  \"mappingKey\",\n  \"mapping\",\n  \"functionTypeName\",\n  \"storageLocation\",\n  \"stateMutability\",\n  \"block\",\n  \"statement\",\n  \"expressionStatement\",\n  \"ifStatement\",\n  \"tryStatement\",\n  \"catchClause\",\n  \"whileStatement\",\n  \"simpleStatement\",\n  \"uncheckedStatement\",\n  \"forStatement\",\n  \"inlineAssemblyStatement\",\n  \"inlineAssemblyStatementFlag\",\n  \"doWhileStatement\",\n  \"continueStatement\",\n  \"breakStatement\",\n  \"returnStatement\",\n  \"throwStatement\",\n  \"emitStatement\",\n  \"revertStatement\",\n  \"variableDeclarationStatement\",\n  \"variableDeclarationList\",\n  \"identifierList\",\n  \"elementaryTypeName\",\n  \"expression\",\n  \"primaryExpression\",\n  \"expressionList\",\n  \"nameValueList\",\n  \"nameValue\",\n  \"functionCallArguments\",\n  \"functionCall\",\n  \"assemblyBlock\",\n  \"assemblyItem\",\n  \"assemblyExpression\",\n  \"assemblyMember\",\n  \"assemblyCall\",\n  \"assemblyLocalDefinition\",\n  \"assemblyAssignment\",\n  \"assemblyIdentifierOrList\",\n  \"assemblyIdentifierList\",\n  \"assemblyStackAssignment\",\n  \"labelDefinition\",\n  \"assemblySwitch\",\n  \"assemblyCase\",\n  \"assemblyFunctionDefinition\",\n  \"assemblyFunctionReturns\",\n  \"assemblyFor\",\n  \"assemblyIf\",\n  \"assemblyLiteral\",\n  \"subAssembly\",\n  \"tupleExpression\",\n  \"numberLiteral\",\n  \"identifier\",\n  \"hexLiteral\",\n  \"overrideSpecifier\",\n  \"stringLiteral\"\n];\nSolidityParser._LITERAL_NAMES = [\n  void 0,\n  \"'pragma'\",\n  \"';'\",\n  \"'*'\",\n  \"'||'\",\n  \"'^'\",\n  \"'~'\",\n  \"'>='\",\n  \"'>'\",\n  \"'<'\",\n  \"'<='\",\n  \"'='\",\n  \"'as'\",\n  \"'import'\",\n  \"'from'\",\n  \"'{'\",\n  \"','\",\n  \"'}'\",\n  \"'abstract'\",\n  \"'contract'\",\n  \"'interface'\",\n  \"'library'\",\n  \"'is'\",\n  \"'('\",\n  \"')'\",\n  \"'error'\",\n  \"'using'\",\n  \"'for'\",\n  \"'struct'\",\n  \"'modifier'\",\n  \"'function'\",\n  \"'returns'\",\n  \"'event'\",\n  \"'enum'\",\n  \"'['\",\n  \"']'\",\n  \"'address'\",\n  \"'.'\",\n  \"'mapping'\",\n  \"'=>'\",\n  \"'memory'\",\n  \"'storage'\",\n  \"'calldata'\",\n  \"'if'\",\n  \"'else'\",\n  \"'try'\",\n  \"'catch'\",\n  \"'while'\",\n  \"'unchecked'\",\n  \"'assembly'\",\n  \"'do'\",\n  \"'return'\",\n  \"'throw'\",\n  \"'emit'\",\n  \"'revert'\",\n  \"'var'\",\n  \"'bool'\",\n  \"'string'\",\n  \"'byte'\",\n  \"'++'\",\n  \"'--'\",\n  \"'new'\",\n  \"':'\",\n  \"'+'\",\n  \"'-'\",\n  \"'after'\",\n  \"'delete'\",\n  \"'!'\",\n  \"'**'\",\n  \"'/'\",\n  \"'%'\",\n  \"'<<'\",\n  \"'>>'\",\n  \"'&'\",\n  \"'|'\",\n  \"'=='\",\n  \"'!='\",\n  \"'&&'\",\n  \"'?'\",\n  \"'|='\",\n  \"'^='\",\n  \"'&='\",\n  \"'<<='\",\n  \"'>>='\",\n  \"'+='\",\n  \"'-='\",\n  \"'*='\",\n  \"'/='\",\n  \"'%='\",\n  \"'let'\",\n  \"':='\",\n  \"'=:'\",\n  \"'switch'\",\n  \"'case'\",\n  \"'default'\",\n  \"'->'\",\n  \"'callback'\",\n  \"'override'\",\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  \"'anonymous'\",\n  \"'break'\",\n  \"'constant'\",\n  \"'immutable'\",\n  \"'continue'\",\n  \"'leave'\",\n  \"'external'\",\n  \"'indexed'\",\n  \"'internal'\",\n  \"'payable'\",\n  \"'private'\",\n  \"'public'\",\n  \"'virtual'\",\n  \"'pure'\",\n  \"'type'\",\n  \"'view'\",\n  \"'global'\",\n  \"'constructor'\",\n  \"'fallback'\",\n  \"'receive'\"\n];\nSolidityParser._SYMBOLIC_NAMES = [\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"Ufixed\",\n  \"BooleanLiteral\",\n  \"DecimalNumber\",\n  \"HexNumber\",\n  \"NumberUnit\",\n  \"HexLiteralFragment\",\n  \"ReservedKeyword\",\n  \"AnonymousKeyword\",\n  \"BreakKeyword\",\n  \"ConstantKeyword\",\n  \"ImmutableKeyword\",\n  \"ContinueKeyword\",\n  \"LeaveKeyword\",\n  \"ExternalKeyword\",\n  \"IndexedKeyword\",\n  \"InternalKeyword\",\n  \"PayableKeyword\",\n  \"PrivateKeyword\",\n  \"PublicKeyword\",\n  \"VirtualKeyword\",\n  \"PureKeyword\",\n  \"TypeKeyword\",\n  \"ViewKeyword\",\n  \"GlobalKeyword\",\n  \"ConstructorKeyword\",\n  \"FallbackKeyword\",\n  \"ReceiveKeyword\",\n  \"Identifier\",\n  \"StringLiteralFragment\",\n  \"VersionLiteral\",\n  \"WS\",\n  \"COMMENT\",\n  \"LINE_COMMENT\"\n];\nSolidityParser.VOCABULARY = new import_VocabularyImpl2.VocabularyImpl(_SolidityParser._LITERAL_NAMES, _SolidityParser._SYMBOLIC_NAMES, []);\nSolidityParser._serializedATNSegments = 3;\nSolidityParser._serializedATNSegment0 = \"\u0003\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\u0003\\x88\\u0481\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\\x07\t\\x07\u0004\\b\t\\b\u0004\t\t\t\u0004\\n\t\\n\u0004\\v\t\\v\u0004\\f\t\\f\u0004\\r\t\\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\\\"\t\\\"\u0004#\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\\\t\\\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\\x07\u0002\\xD1\\n\u0002\\f\u0002\u000e\u0002\\xD4\\v\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\\xE2\\n\u0005\u0003\u0006\u0003\u0006\u0005\u0006\\xE6\\n\u0006\u0003\u0006\\x07\u0006\\xE9\\n\u0006\\f\u0006\u000e\u0006\\xEC\\v\u0006\u0003\\x07\u0003\\x07\u0003\\b\u0005\\b\\xF1\\n\\b\u0003\\b\u0003\\b\u0005\\b\\xF5\\n\\b\u0003\\b\u0005\\b\\xF8\\n\\b\u0003\t\u0003\t\u0003\t\u0005\t\\xFD\\n\t\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0005\\n\\u0103\\n\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0005\\n\\u010A\\n\\n\u0003\\n\u0003\\n\u0005\\n\\u010E\\n\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\\x07\\n\\u0119\\n\\n\\f\\n\u000e\\n\\u011C\\v\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0003\\n\u0005\\n\\u0123\\n\\n\u0003\\v\u0003\\v\u0003\\f\u0005\\f\\u0128\\n\\f\u0003\\f\u0003\\f\u0003\\f\u0003\\f\u0003\\f\u0003\\f\\x07\\f\\u0130\\n\\f\\f\\f\u000e\\f\\u0133\\v\\f\u0005\\f\\u0135\\n\\f\u0003\\f\u0003\\f\\x07\\f\\u0139\\n\\f\\f\\f\u000e\\f\\u013C\\v\\f\u0003\\f\u0003\\f\u0003\\r\u0003\\r\u0003\\r\u0005\\r\\u0143\\n\\r\u0003\\r\u0005\\r\\u0146\\n\\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\\u0151\\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\\x07\u000f\\u015A\\n\u000f\\f\u000f\u000e\u000f\\u015D\\v\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\\u0162\\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\\u017D\\n\u0013\u0003\u0013\u0005\u0013\\u0180\\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\\x07\u0014\\u0189\\n\u0014\\f\u0014\u000e\u0014\\u018C\\v\u0014\u0003\u0014\u0003\u0014\u0005\u0014\\u0190\\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\\x07\u0015\\u019A\\n\u0015\\f\u0015\u000e\u0015\\u019D\\v\u0015\u0005\u0015\\u019F\\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\\u01A6\\n\u0016\u0003\u0016\u0003\u0016\\x07\u0016\\u01AA\\n\u0016\\f\u0016\u000e\u0016\\u01AD\\v\u0016\u0003\u0016\u0003\u0016\u0005\u0016\\u01B1\\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\\u01B6\\n\u0017\u0003\u0017\u0005\u0017\\u01B9\\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\\u01BF\\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018\\u01C3\\n\u0018\u0003\u0019\u0003\u0019\u0005\u0019\\u01C7\\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\\u01CC\\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\\x07\u001b\\u01D9\\n\u001b\\f\u001b\u000e\u001b\\u01DC\\v\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\\u01E2\\n\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\\u01EC\\n\u001e\u0003\u001e\u0003\u001e\\x07\u001e\\u01F0\\n\u001e\\f\u001e\u000e\u001e\\u01F3\\v\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\\x07\u001f\\u01FB\\n\u001f\\f\u001f\u000e\u001f\\u01FE\\v\u001f\u0005\u001f\\u0200\\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0005 \\u0206\\n \u0003 \u0005 \\u0209\\n \u0003!\u0003!\u0003!\u0003!\\x07!\\u020F\\n!\\f!\u000e!\\u0212\\v!\u0005!\\u0214\\n!\u0003!\u0003!\u0003\\\"\u0003\\\"\u0005\\\"\\u021A\\n\\\"\u0003\\\"\u0005\\\"\\u021D\\n\\\"\u0003#\u0003#\u0003#\u0003#\\x07#\\u0223\\n#\\f#\u000e#\\u0226\\v#\u0005#\\u0228\\n#\u0003#\u0003#\u0003$\u0003$\u0005$\\u022E\\n$\u0003%\u0003%\u0005%\\u0232\\n%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\\u023D\\n&\u0003&\u0003&\u0003&\u0005&\\u0242\\n&\u0003&\\x07&\\u0245\\n&\\f&\u000e&\\u0248\\v&\u0003'\u0003'\u0003'\\x07'\\u024D\\n'\\f'\u000e'\\u0250\\v'\u0003(\u0003(\u0005(\\u0254\\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\\x07*\\u0262\\n*\\f*\u000e*\\u0265\\v*\u0003*\u0003*\u0005*\\u0269\\n*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\\x07-\\u0271\\n-\\f-\u000e-\\u0274\\v-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\\u0287\\n.\u0003/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\\u0293\\n0\u00031\u00031\u00031\u00051\\u0298\\n1\u00031\u00031\u00061\\u029C\\n1\\r1\u000e1\\u029D\u00032\u00032\u00052\\u02A2\\n2\u00032\u00052\\u02A5\\n2\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u00033\u00034\u00034\u00054\\u02B1\\n4\u00035\u00035\u00035\u00036\u00036\u00036\u00036\u00056\\u02BA\\n6\u00036\u00036\u00056\\u02BE\\n6\u00036\u00056\\u02C1\\n6\u00036\u00036\u00036\u00037\u00037\u00057\\u02C8\\n7\u00037\u00037\u00037\u00037\u00057\\u02CE\\n7\u00037\u00037\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003<\u0003<\u0005<\\u02E4\\n<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\\u02FA\\n@\u0003@\u0003@\u0005@\\u02FE\\n@\u0003@\u0003@\u0003A\u0005A\\u0303\\nA\u0003A\u0003A\u0005A\\u0307\\nA\\x07A\\u0309\\nA\\fA\u000eA\\u030C\\vA\u0003B\u0003B\u0005B\\u0310\\nB\u0003B\\x07B\\u0313\\nB\\fB\u000eB\\u0316\\vB\u0003B\u0005B\\u0319\\nB\u0003B\u0003B\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\\u0331\\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0005D\\u0367\\nD\u0003D\u0003D\u0005D\\u036B\\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\\x07D\\u037B\\nD\\fD\u000eD\\u037E\\vD\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\\u0389\\nE\u0003F\u0003F\u0003F\\x07F\\u038E\\nF\\fF\u000eF\\u0391\\vF\u0003G\u0003G\u0003G\\x07G\\u0396\\nG\\fG\u000eG\\u0399\\vG\u0003G\u0005G\\u039C\\nG\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0005I\\u03A4\\nI\u0003I\u0003I\u0005I\\u03A8\\nI\u0005I\\u03AA\\nI\u0003J\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\\x07K\\u03B3\\nK\\fK\u000eK\\u03B6\\vK\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\\u03CC\\nL\u0003M\u0003M\u0003M\u0005M\\u03D1\\nM\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0005O\\u03DB\\nO\u0003O\u0003O\u0005O\\u03DF\\nO\u0003O\u0003O\\x07O\\u03E3\\nO\\fO\u000eO\\u03E6\\vO\u0003O\u0005O\\u03E9\\nO\u0003P\u0003P\u0003P\u0003P\u0005P\\u03EF\\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\\u03FC\\nR\u0003S\u0003S\u0003S\\x07S\\u0401\\nS\\fS\u000eS\\u0404\\vS\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\\x07V\\u0410\\nV\\fV\u000eV\\u0413\\vV\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\\u041B\\nW\u0003X\u0003X\u0003X\u0003X\u0005X\\u0421\\nX\u0003X\u0003X\u0005X\\u0425\\nX\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0005Z\\u042F\\nZ\u0003Z\u0003Z\u0003Z\u0005Z\\u0434\\nZ\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003[\u0003\\\\\u0003\\\\\u0003\\\\\u0003\\\\\u0003\\\\\u0005\\\\\\u0441\\n\\\\\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0005^\\u0449\\n^\u0003^\u0003^\u0005^\\u044D\\n^\\x07^\\u044F\\n^\\f^\u000e^\\u0452\\v^\u0003^\u0003^\u0003^\u0003^\u0003^\\x07^\\u0459\\n^\\f^\u000e^\\u045C\\v^\u0005^\\u045E\\n^\u0003^\u0005^\\u0461\\n^\u0003_\u0003_\u0005_\\u0465\\n_\u0003`\u0003`\u0003a\u0006a\\u046A\\na\\ra\u000ea\\u046B\u0003b\u0003b\u0003b\u0003b\u0003b\\x07b\\u0473\\nb\\fb\u000eb\\u0476\\vb\u0003b\u0003b\u0005b\\u047A\\nb\u0003c\u0006c\\u047D\\nc\\rc\u000ec\\u047E\u0003c\u0002\u0002\u0004J\\x86d\u0002\u0002\u0004\u0002\u0006\u0002\\b\u0002\\n\u0002\\f\u0002\u000e\u0002\u0010\u0002\u0012\u0002\u0014\u0002\u0016\u0002\u0018\u0002\u001a\u0002\u001c\u0002\u001e\u0002 \u0002\\\"\u0002$\u0002&\u0002(\u0002*\u0002,\u0002.\u00020\u00022\u00024\u00026\u00028\u0002:\u0002<\u0002>\u0002@\u0002B\u0002D\u0002F\u0002H\u0002J\u0002L\u0002N\u0002P\u0002R\u0002T\u0002V\u0002X\u0002Z\u0002\\\\\u0002^\u0002`\u0002b\u0002d\u0002f\u0002h\u0002j\u0002l\u0002n\u0002p\u0002r\u0002t\u0002v\u0002x\u0002z\u0002|\u0002~\u0002\\x80\u0002\\x82\u0002\\x84\u0002\\x86\u0002\\x88\u0002\\x8A\u0002\\x8C\u0002\\x8E\u0002\\x90\u0002\\x92\u0002\\x94\u0002\\x96\u0002\\x98\u0002\\x9A\u0002\\x9C\u0002\\x9E\u0002\\xA0\u0002\\xA2\u0002\\xA4\u0002\\xA6\u0002\\xA8\u0002\\xAA\u0002\\xAC\u0002\\xAE\u0002\\xB0\u0002\\xB2\u0002\\xB4\u0002\\xB6\u0002\\xB8\u0002\\xBA\u0002\\xBC\u0002\\xBE\u0002\\xC0\u0002\\xC2\u0002\\xC4\u0002\u0002\u0011\u0003\u0002\\x07\\r\u0003\u0002\u0015\u0017\u0003\u0002*,\u0006\u0002qqxx||~~\u0005\u0002&&9<dh\u0003\u0002=>\u0003\u0002AB\u0003\u0002CD\u0004\u0002\u0005\u0005GH\u0003\u0002IJ\u0003\u0002\t\\f\u0003\u0002MN\u0004\u0002\\r\\rQZ\u0003\u0002jk\\f\u0002\u0010\u0010\u001b\u001b&&,,88bbttxx\\x80\\x80\\x82\\x83\u0002\\u0502\u0002\\xD2\u0003\u0002\u0002\u0002\u0004\\xD7\u0003\u0002\u0002\u0002\u0006\\xDC\u0003\u0002\u0002\u0002\\b\\xE1\u0003\u0002\u0002\u0002\\n\\xE3\u0003\u0002\u0002\u0002\\f\\xED\u0003\u0002\u0002\u0002\u000e\\xF7\u0003\u0002\u0002\u0002\u0010\\xF9\u0003\u0002\u0002\u0002\u0012\\u0122\u0003\u0002\u0002\u0002\u0014\\u0124\u0003\u0002\u0002\u0002\u0016\\u0127\u0003\u0002\u0002\u0002\u0018\\u013F\u0003\u0002\u0002\u0002\u001a\\u0150\u0003\u0002\u0002\u0002\u001c\\u0152\u0003\u0002\u0002\u0002\u001e\\u0165\u0003\u0002\u0002\u0002 \\u016C\u0003\u0002\u0002\u0002\\\"\\u0171\u0003\u0002\u0002\u0002$\\u0177\u0003\u0002\u0002\u0002&\\u018F\u0003\u0002\u0002\u0002(\\u0191\u0003\u0002\u0002\u0002*\\u01A2\u0003\u0002\u0002\u0002,\\u01B2\u0003\u0002\u0002\u0002.\\u01BA\u0003\u0002\u0002\u00020\\u01CB\u0003\u0002\u0002\u00022\\u01CD\u0003\u0002\u0002\u00024\\u01DA\u0003\u0002\u0002\u00026\\u01DD\u0003\u0002\u0002\u00028\\u01E5\u0003\u0002\u0002\u0002:\\u01E7\u0003\u0002\u0002\u0002<\\u01F6\u0003\u0002\u0002\u0002>\\u0203\u0003\u0002\u0002\u0002@\\u020A\u0003\u0002\u0002\u0002B\\u0217\u0003\u0002\u0002\u0002D\\u021E\u0003\u0002\u0002\u0002F\\u022B\u0003\u0002\u0002\u0002H\\u022F\u0003\u0002\u0002\u0002J\\u023C\u0003\u0002\u0002\u0002L\\u0249\u0003\u0002\u0002\u0002N\\u0253\u0003\u0002\u0002\u0002P\\u0255\u0003\u0002\u0002\u0002R\\u025C\u0003\u0002\u0002\u0002T\\u026A\u0003\u0002\u0002\u0002V\\u026C\u0003\u0002\u0002\u0002X\\u026E\u0003\u0002\u0002\u0002Z\\u0286\u0003\u0002\u0002\u0002\\\\\\u0288\u0003\u0002\u0002\u0002^\\u028B\u0003\u0002\u0002\u0002`\\u0294\u0003\u0002\u0002\u0002b\\u029F\u0003\u0002\u0002\u0002d\\u02A8\u0003\u0002\u0002\u0002f\\u02B0\u0003\u0002\u0002\u0002h\\u02B2\u0003\u0002\u0002\u0002j\\u02B5\u0003\u0002\u0002\u0002l\\u02C5\u0003\u0002\u0002\u0002n\\u02D1\u0003\u0002\u0002\u0002p\\u02D3\u0003\u0002\u0002\u0002r\\u02DB\u0003\u0002\u0002\u0002t\\u02DE\u0003\u0002\u0002\u0002v\\u02E1\u0003\u0002\u0002\u0002x\\u02E7\u0003\u0002\u0002\u0002z\\u02EA\u0003\u0002\u0002\u0002|\\u02EE\u0003\u0002\u0002\u0002~\\u02F9\u0003\u0002\u0002\u0002\\x80\\u0302\u0003\u0002\u0002\u0002\\x82\\u030D\u0003\u0002\u0002\u0002\\x84\\u031C\u0003\u0002\u0002\u0002\\x86\\u0330\u0003\u0002\u0002\u0002\\x88\\u0388\u0003\u0002\u0002\u0002\\x8A\\u038A\u0003\u0002\u0002\u0002\\x8C\\u0392\u0003\u0002\u0002\u0002\\x8E\\u039D\u0003\u0002\u0002\u0002\\x90\\u03A9\u0003\u0002\u0002\u0002\\x92\\u03AB\u0003\u0002\u0002\u0002\\x94\\u03B0\u0003\u0002\u0002\u0002\\x96\\u03CB\u0003\u0002\u0002\u0002\\x98\\u03D0\u0003\u0002\u0002\u0002\\x9A\\u03D2\u0003\u0002\u0002\u0002\\x9C\\u03DA\u0003\u0002\u0002\u0002\\x9E\\u03EA\u0003\u0002\u0002\u0002\\xA0\\u03F0\u0003\u0002\u0002\u0002\\xA2\\u03FB\u0003\u0002\u0002\u0002\\xA4\\u03FD\u0003\u0002\u0002\u0002\\xA6\\u0405\u0003\u0002\u0002\u0002\\xA8\\u0409\u0003\u0002\u0002\u0002\\xAA\\u040C\u0003\u0002\u0002\u0002\\xAC\\u041A\u0003\u0002\u0002\u0002\\xAE\\u041C\u0003\u0002\u0002\u0002\\xB0\\u0428\u0003\u0002\u0002\u0002\\xB2\\u042B\u0003\u0002\u0002\u0002\\xB4\\u0437\u0003\u0002\u0002\u0002\\xB6\\u0440\u0003\u0002\u0002\u0002\\xB8\\u0442\u0003\u0002\u0002\u0002\\xBA\\u0460\u0003\u0002\u0002\u0002\\xBC\\u0462\u0003\u0002\u0002\u0002\\xBE\\u0466\u0003\u0002\u0002\u0002\\xC0\\u0469\u0003\u0002\u0002\u0002\\xC2\\u046D\u0003\u0002\u0002\u0002\\xC4\\u047C\u0003\u0002\u0002\u0002\\xC6\\xD1\u0005\u0004\u0003\u0002\\xC7\\xD1\u0005\u0012\\n\u0002\\xC8\\xD1\u0005\u0016\\f\u0002\\xC9\\xD1\u0005:\u001e\u0002\\xCA\\xD1\u0005(\u0015\u0002\\xCB\\xD1\u0005.\u0018\u0002\\xCC\\xD1\u0005\u001e\u0010\u0002\\xCD\\xD1\u0005 \u0011\u0002\\xCE\\xD1\u0005\\\"\u0012\u0002\\xCF\\xD1\u0005$\u0013\u0002\\xD0\\xC6\u0003\u0002\u0002\u0002\\xD0\\xC7\u0003\u0002\u0002\u0002\\xD0\\xC8\u0003\u0002\u0002\u0002\\xD0\\xC9\u0003\u0002\u0002\u0002\\xD0\\xCA\u0003\u0002\u0002\u0002\\xD0\\xCB\u0003\u0002\u0002\u0002\\xD0\\xCC\u0003\u0002\u0002\u0002\\xD0\\xCD\u0003\u0002\u0002\u0002\\xD0\\xCE\u0003\u0002\u0002\u0002\\xD0\\xCF\u0003\u0002\u0002\u0002\\xD1\\xD4\u0003\u0002\u0002\u0002\\xD2\\xD0\u0003\u0002\u0002\u0002\\xD2\\xD3\u0003\u0002\u0002\u0002\\xD3\\xD5\u0003\u0002\u0002\u0002\\xD4\\xD2\u0003\u0002\u0002\u0002\\xD5\\xD6\\x07\u0002\u0002\u0003\\xD6\u0003\u0003\u0002\u0002\u0002\\xD7\\xD8\\x07\u0003\u0002\u0002\\xD8\\xD9\u0005\u0006\u0004\u0002\\xD9\\xDA\u0005\\b\u0005\u0002\\xDA\\xDB\\x07\u0004\u0002\u0002\\xDB\u0005\u0003\u0002\u0002\u0002\\xDC\\xDD\u0005\\xBE`\u0002\\xDD\\x07\u0003\u0002\u0002\u0002\\xDE\\xE2\\x07\u0005\u0002\u0002\\xDF\\xE2\u0005\\n\u0006\u0002\\xE0\\xE2\u0005\\x86D\u0002\\xE1\\xDE\u0003\u0002\u0002\u0002\\xE1\\xDF\u0003\u0002\u0002\u0002\\xE1\\xE0\u0003\u0002\u0002\u0002\\xE2\t\u0003\u0002\u0002\u0002\\xE3\\xEA\u0005\u000e\\b\u0002\\xE4\\xE6\\x07\u0006\u0002\u0002\\xE5\\xE4\u0003\u0002\u0002\u0002\\xE5\\xE6\u0003\u0002\u0002\u0002\\xE6\\xE7\u0003\u0002\u0002\u0002\\xE7\\xE9\u0005\u000e\\b\u0002\\xE8\\xE5\u0003\u0002\u0002\u0002\\xE9\\xEC\u0003\u0002\u0002\u0002\\xEA\\xE8\u0003\u0002\u0002\u0002\\xEA\\xEB\u0003\u0002\u0002\u0002\\xEB\\v\u0003\u0002\u0002\u0002\\xEC\\xEA\u0003\u0002\u0002\u0002\\xED\\xEE\t\u0002\u0002\u0002\\xEE\\r\u0003\u0002\u0002\u0002\\xEF\\xF1\u0005\\f\\x07\u0002\\xF0\\xEF\u0003\u0002\u0002\u0002\\xF0\\xF1\u0003\u0002\u0002\u0002\\xF1\\xF2\u0003\u0002\u0002\u0002\\xF2\\xF8\\x07\\x85\u0002\u0002\\xF3\\xF5\u0005\\f\\x07\u0002\\xF4\\xF3\u0003\u0002\u0002\u0002\\xF4\\xF5\u0003\u0002\u0002\u0002\\xF5\\xF6\u0003\u0002\u0002\u0002\\xF6\\xF8\\x07j\u0002\u0002\\xF7\\xF0\u0003\u0002\u0002\u0002\\xF7\\xF4\u0003\u0002\u0002\u0002\\xF8\u000f\u0003\u0002\u0002\u0002\\xF9\\xFC\u0005\\xBE`\u0002\\xFA\\xFB\\x07\u000e\u0002\u0002\\xFB\\xFD\u0005\\xBE`\u0002\\xFC\\xFA\u0003\u0002\u0002\u0002\\xFC\\xFD\u0003\u0002\u0002\u0002\\xFD\u0011\u0003\u0002\u0002\u0002\\xFE\\xFF\\x07\u000f\u0002\u0002\\xFF\\u0102\u0005\u0014\\v\u0002\\u0100\\u0101\\x07\u000e\u0002\u0002\\u0101\\u0103\u0005\\xBE`\u0002\\u0102\\u0100\u0003\u0002\u0002\u0002\\u0102\\u0103\u0003\u0002\u0002\u0002\\u0103\\u0104\u0003\u0002\u0002\u0002\\u0104\\u0105\\x07\u0004\u0002\u0002\\u0105\\u0123\u0003\u0002\u0002\u0002\\u0106\\u0109\\x07\u000f\u0002\u0002\\u0107\\u010A\\x07\u0005\u0002\u0002\\u0108\\u010A\u0005\\xBE`\u0002\\u0109\\u0107\u0003\u0002\u0002\u0002\\u0109\\u0108\u0003\u0002\u0002\u0002\\u010A\\u010D\u0003\u0002\u0002\u0002\\u010B\\u010C\\x07\u000e\u0002\u0002\\u010C\\u010E\u0005\\xBE`\u0002\\u010D\\u010B\u0003\u0002\u0002\u0002\\u010D\\u010E\u0003\u0002\u0002\u0002\\u010E\\u010F\u0003\u0002\u0002\u0002\\u010F\\u0110\\x07\u0010\u0002\u0002\\u0110\\u0111\u0005\u0014\\v\u0002\\u0111\\u0112\\x07\u0004\u0002\u0002\\u0112\\u0123\u0003\u0002\u0002\u0002\\u0113\\u0114\\x07\u000f\u0002\u0002\\u0114\\u0115\\x07\u0011\u0002\u0002\\u0115\\u011A\u0005\u0010\t\u0002\\u0116\\u0117\\x07\u0012\u0002\u0002\\u0117\\u0119\u0005\u0010\t\u0002\\u0118\\u0116\u0003\u0002\u0002\u0002\\u0119\\u011C\u0003\u0002\u0002\u0002\\u011A\\u0118\u0003\u0002\u0002\u0002\\u011A\\u011B\u0003\u0002\u0002\u0002\\u011B\\u011D\u0003\u0002\u0002\u0002\\u011C\\u011A\u0003\u0002\u0002\u0002\\u011D\\u011E\\x07\u0013\u0002\u0002\\u011E\\u011F\\x07\u0010\u0002\u0002\\u011F\\u0120\u0005\u0014\\v\u0002\\u0120\\u0121\\x07\u0004\u0002\u0002\\u0121\\u0123\u0003\u0002\u0002\u0002\\u0122\\xFE\u0003\u0002\u0002\u0002\\u0122\\u0106\u0003\u0002\u0002\u0002\\u0122\\u0113\u0003\u0002\u0002\u0002\\u0123\u0013\u0003\u0002\u0002\u0002\\u0124\\u0125\\x07\\x84\u0002\u0002\\u0125\u0015\u0003\u0002\u0002\u0002\\u0126\\u0128\\x07\u0014\u0002\u0002\\u0127\\u0126\u0003\u0002\u0002\u0002\\u0127\\u0128\u0003\u0002\u0002\u0002\\u0128\\u0129\u0003\u0002\u0002\u0002\\u0129\\u012A\t\u0003\u0002\u0002\\u012A\\u0134\u0005\\xBE`\u0002\\u012B\\u012C\\x07\u0018\u0002\u0002\\u012C\\u0131\u0005\u0018\\r\u0002\\u012D\\u012E\\x07\u0012\u0002\u0002\\u012E\\u0130\u0005\u0018\\r\u0002\\u012F\\u012D\u0003\u0002\u0002\u0002\\u0130\\u0133\u0003\u0002\u0002\u0002\\u0131\\u012F\u0003\u0002\u0002\u0002\\u0131\\u0132\u0003\u0002\u0002\u0002\\u0132\\u0135\u0003\u0002\u0002\u0002\\u0133\\u0131\u0003\u0002\u0002\u0002\\u0134\\u012B\u0003\u0002\u0002\u0002\\u0134\\u0135\u0003\u0002\u0002\u0002\\u0135\\u0136\u0003\u0002\u0002\u0002\\u0136\\u013A\\x07\u0011\u0002\u0002\\u0137\\u0139\u0005\u001a\u000e\u0002\\u0138\\u0137\u0003\u0002\u0002\u0002\\u0139\\u013C\u0003\u0002\u0002\u0002\\u013A\\u0138\u0003\u0002\u0002\u0002\\u013A\\u013B\u0003\u0002\u0002\u0002\\u013B\\u013D\u0003\u0002\u0002\u0002\\u013C\\u013A\u0003\u0002\u0002\u0002\\u013D\\u013E\\x07\u0013\u0002\u0002\\u013E\u0017\u0003\u0002\u0002\u0002\\u013F\\u0145\u0005L'\u0002\\u0140\\u0142\\x07\u0019\u0002\u0002\\u0141\\u0143\u0005\\x8AF\u0002\\u0142\\u0141\u0003\u0002\u0002\u0002\\u0142\\u0143\u0003\u0002\u0002\u0002\\u0143\\u0144\u0003\u0002\u0002\u0002\\u0144\\u0146\\x07\u001a\u0002\u0002\\u0145\\u0140\u0003\u0002\u0002\u0002\\u0145\\u0146\u0003\u0002\u0002\u0002\\u0146\u0019\u0003\u0002\u0002\u0002\\u0147\\u0151\u0005\u001c\u000f\u0002\\u0148\\u0151\u0005$\u0013\u0002\\u0149\\u0151\u0005(\u0015\u0002\\u014A\\u0151\u0005*\u0016\u0002\\u014B\\u0151\u0005.\u0018\u0002\\u014C\\u0151\u00056\u001c\u0002\\u014D\\u0151\u0005:\u001e\u0002\\u014E\\u0151\u0005 \u0011\u0002\\u014F\\u0151\u0005\\\"\u0012\u0002\\u0150\\u0147\u0003\u0002\u0002\u0002\\u0150\\u0148\u0003\u0002\u0002\u0002\\u0150\\u0149\u0003\u0002\u0002\u0002\\u0150\\u014A\u0003\u0002\u0002\u0002\\u0150\\u014B\u0003\u0002\u0002\u0002\\u0150\\u014C\u0003\u0002\u0002\u0002\\u0150\\u014D\u0003\u0002\u0002\u0002\\u0150\\u014E\u0003\u0002\u0002\u0002\\u0150\\u014F\u0003\u0002\u0002\u0002\\u0151\u001b\u0003\u0002\u0002\u0002\\u0152\\u015B\u0005J&\u0002\\u0153\\u015A\\x07z\u0002\u0002\\u0154\\u015A\\x07w\u0002\u0002\\u0155\\u015A\\x07y\u0002\u0002\\u0156\\u015A\\x07q\u0002\u0002\\u0157\\u015A\\x07r\u0002\u0002\\u0158\\u015A\u0005\\xC2b\u0002\\u0159\\u0153\u0003\u0002\u0002\u0002\\u0159\\u0154\u0003\u0002\u0002\u0002\\u0159\\u0155\u0003\u0002\u0002\u0002\\u0159\\u0156\u0003\u0002\u0002\u0002\\u0159\\u0157\u0003\u0002\u0002\u0002\\u0159\\u0158\u0003\u0002\u0002\u0002\\u015A\\u015D\u0003\u0002\u0002\u0002\\u015B\\u0159\u0003\u0002\u0002\u0002\\u015B\\u015C\u0003\u0002\u0002\u0002\\u015C\\u015E\u0003\u0002\u0002\u0002\\u015D\\u015B\u0003\u0002\u0002\u0002\\u015E\\u0161\u0005\\xBE`\u0002\\u015F\\u0160\\x07\\r\u0002\u0002\\u0160\\u0162\u0005\\x86D\u0002\\u0161\\u015F\u0003\u0002\u0002\u0002\\u0161\\u0162\u0003\u0002\u0002\u0002\\u0162\\u0163\u0003\u0002\u0002\u0002\\u0163\\u0164\\x07\u0004\u0002\u0002\\u0164\u001d\u0003\u0002\u0002\u0002\\u0165\\u0166\u0005J&\u0002\\u0166\\u0167\\x07q\u0002\u0002\\u0167\\u0168\u0005\\xBE`\u0002\\u0168\\u0169\\x07\\r\u0002\u0002\\u0169\\u016A\u0005\\x86D\u0002\\u016A\\u016B\\x07\u0004\u0002\u0002\\u016B\u001f\u0003\u0002\u0002\u0002\\u016C\\u016D\\x07\u001b\u0002\u0002\\u016D\\u016E\u0005\\xBE`\u0002\\u016E\\u016F\u0005<\u001f\u0002\\u016F\\u0170\\x07\u0004\u0002\u0002\\u0170!\u0003\u0002\u0002\u0002\\u0171\\u0172\\x07}\u0002\u0002\\u0172\\u0173\u0005\\xBE`\u0002\\u0173\\u0174\\x07\u0018\u0002\u0002\\u0174\\u0175\u0005\\x84C\u0002\\u0175\\u0176\\x07\u0004\u0002\u0002\\u0176#\u0003\u0002\u0002\u0002\\u0177\\u0178\\x07\u001c\u0002\u0002\\u0178\\u0179\u0005&\u0014\u0002\\u0179\\u017C\\x07\u001d\u0002\u0002\\u017A\\u017D\\x07\u0005\u0002\u0002\\u017B\\u017D\u0005J&\u0002\\u017C\\u017A\u0003\u0002\u0002\u0002\\u017C\\u017B\u0003\u0002\u0002\u0002\\u017D\\u017F\u0003\u0002\u0002\u0002\\u017E\\u0180\\x07\\x7F\u0002\u0002\\u017F\\u017E\u0003\u0002\u0002\u0002\\u017F\\u0180\u0003\u0002\u0002\u0002\\u0180\\u0181\u0003\u0002\u0002\u0002\\u0181\\u0182\\x07\u0004\u0002\u0002\\u0182%\u0003\u0002\u0002\u0002\\u0183\\u0190\u0005L'\u0002\\u0184\\u0185\\x07\u0011\u0002\u0002\\u0185\\u018A\u0005L'\u0002\\u0186\\u0187\\x07\u0012\u0002\u0002\\u0187\\u0189\u0005L'\u0002\\u0188\\u0186\u0003\u0002\u0002\u0002\\u0189\\u018C\u0003\u0002\u0002\u0002\\u018A\\u0188\u0003\u0002\u0002\u0002\\u018A\\u018B\u0003\u0002\u0002\u0002\\u018B\\u018D\u0003\u0002\u0002\u0002\\u018C\\u018A\u0003\u0002\u0002\u0002\\u018D\\u018E\\x07\u0013\u0002\u0002\\u018E\\u0190\u0003\u0002\u0002\u0002\\u018F\\u0183\u0003\u0002\u0002\u0002\\u018F\\u0184\u0003\u0002\u0002\u0002\\u0190'\u0003\u0002\u0002\u0002\\u0191\\u0192\\x07\u001e\u0002\u0002\\u0192\\u0193\u0005\\xBE`\u0002\\u0193\\u019E\\x07\u0011\u0002\u0002\\u0194\\u0195\u0005H%\u0002\\u0195\\u019B\\x07\u0004\u0002\u0002\\u0196\\u0197\u0005H%\u0002\\u0197\\u0198\\x07\u0004\u0002\u0002\\u0198\\u019A\u0003\u0002\u0002\u0002\\u0199\\u0196\u0003\u0002\u0002\u0002\\u019A\\u019D\u0003\u0002\u0002\u0002\\u019B\\u0199\u0003\u0002\u0002\u0002\\u019B\\u019C\u0003\u0002\u0002\u0002\\u019C\\u019F\u0003\u0002\u0002\u0002\\u019D\\u019B\u0003\u0002\u0002\u0002\\u019E\\u0194\u0003\u0002\u0002\u0002\\u019E\\u019F\u0003\u0002\u0002\u0002\\u019F\\u01A0\u0003\u0002\u0002\u0002\\u01A0\\u01A1\\x07\u0013\u0002\u0002\\u01A1)\u0003\u0002\u0002\u0002\\u01A2\\u01A3\\x07\u001f\u0002\u0002\\u01A3\\u01A5\u0005\\xBE`\u0002\\u01A4\\u01A6\u0005<\u001f\u0002\\u01A5\\u01A4\";\nSolidityParser._serializedATNSegment1 = \"\u0003\u0002\u0002\u0002\\u01A5\\u01A6\u0003\u0002\u0002\u0002\\u01A6\\u01AB\u0003\u0002\u0002\u0002\\u01A7\\u01AA\\x07{\u0002\u0002\\u01A8\\u01AA\u0005\\xC2b\u0002\\u01A9\\u01A7\u0003\u0002\u0002\u0002\\u01A9\\u01A8\u0003\u0002\u0002\u0002\\u01AA\\u01AD\u0003\u0002\u0002\u0002\\u01AB\\u01A9\u0003\u0002\u0002\u0002\\u01AB\\u01AC\u0003\u0002\u0002\u0002\\u01AC\\u01B0\u0003\u0002\u0002\u0002\\u01AD\\u01AB\u0003\u0002\u0002\u0002\\u01AE\\u01B1\\x07\u0004\u0002\u0002\\u01AF\\u01B1\u0005X-\u0002\\u01B0\\u01AE\u0003\u0002\u0002\u0002\\u01B0\\u01AF\u0003\u0002\u0002\u0002\\u01B1+\u0003\u0002\u0002\u0002\\u01B2\\u01B8\u0005\\xBE`\u0002\\u01B3\\u01B5\\x07\u0019\u0002\u0002\\u01B4\\u01B6\u0005\\x8AF\u0002\\u01B5\\u01B4\u0003\u0002\u0002\u0002\\u01B5\\u01B6\u0003\u0002\u0002\u0002\\u01B6\\u01B7\u0003\u0002\u0002\u0002\\u01B7\\u01B9\\x07\u001a\u0002\u0002\\u01B8\\u01B3\u0003\u0002\u0002\u0002\\u01B8\\u01B9\u0003\u0002\u0002\u0002\\u01B9-\u0003\u0002\u0002\u0002\\u01BA\\u01BB\u00050\u0019\u0002\\u01BB\\u01BC\u0005<\u001f\u0002\\u01BC\\u01BE\u00054\u001b\u0002\\u01BD\\u01BF\u00052\u001a\u0002\\u01BE\\u01BD\u0003\u0002\u0002\u0002\\u01BE\\u01BF\u0003\u0002\u0002\u0002\\u01BF\\u01C2\u0003\u0002\u0002\u0002\\u01C0\\u01C3\\x07\u0004\u0002\u0002\\u01C1\\u01C3\u0005X-\u0002\\u01C2\\u01C0\u0003\u0002\u0002\u0002\\u01C2\\u01C1\u0003\u0002\u0002\u0002\\u01C3/\u0003\u0002\u0002\u0002\\u01C4\\u01C6\\x07 \u0002\u0002\\u01C5\\u01C7\u0005\\xBE`\u0002\\u01C6\\u01C5\u0003\u0002\u0002\u0002\\u01C6\\u01C7\u0003\u0002\u0002\u0002\\u01C7\\u01CC\u0003\u0002\u0002\u0002\\u01C8\\u01CC\\x07\\x80\u0002\u0002\\u01C9\\u01CC\\x07\\x81\u0002\u0002\\u01CA\\u01CC\\x07\\x82\u0002\u0002\\u01CB\\u01C4\u0003\u0002\u0002\u0002\\u01CB\\u01C8\u0003\u0002\u0002\u0002\\u01CB\\u01C9\u0003\u0002\u0002\u0002\\u01CB\\u01CA\u0003\u0002\u0002\u0002\\u01CC1\u0003\u0002\u0002\u0002\\u01CD\\u01CE\\x07!\u0002\u0002\\u01CE\\u01CF\u0005<\u001f\u0002\\u01CF3\u0003\u0002\u0002\u0002\\u01D0\\u01D9\\x07u\u0002\u0002\\u01D1\\u01D9\\x07z\u0002\u0002\\u01D2\\u01D9\\x07w\u0002\u0002\\u01D3\\u01D9\\x07y\u0002\u0002\\u01D4\\u01D9\\x07{\u0002\u0002\\u01D5\\u01D9\u0005V,\u0002\\u01D6\\u01D9\u0005,\u0017\u0002\\u01D7\\u01D9\u0005\\xC2b\u0002\\u01D8\\u01D0\u0003\u0002\u0002\u0002\\u01D8\\u01D1\u0003\u0002\u0002\u0002\\u01D8\\u01D2\u0003\u0002\u0002\u0002\\u01D8\\u01D3\u0003\u0002\u0002\u0002\\u01D8\\u01D4\u0003\u0002\u0002\u0002\\u01D8\\u01D5\u0003\u0002\u0002\u0002\\u01D8\\u01D6\u0003\u0002\u0002\u0002\\u01D8\\u01D7\u0003\u0002\u0002\u0002\\u01D9\\u01DC\u0003\u0002\u0002\u0002\\u01DA\\u01D8\u0003\u0002\u0002\u0002\\u01DA\\u01DB\u0003\u0002\u0002\u0002\\u01DB5\u0003\u0002\u0002\u0002\\u01DC\\u01DA\u0003\u0002\u0002\u0002\\u01DD\\u01DE\\x07\\\"\u0002\u0002\\u01DE\\u01DF\u0005\\xBE`\u0002\\u01DF\\u01E1\u0005@!\u0002\\u01E0\\u01E2\\x07o\u0002\u0002\\u01E1\\u01E0\u0003\u0002\u0002\u0002\\u01E1\\u01E2\u0003\u0002\u0002\u0002\\u01E2\\u01E3\u0003\u0002\u0002\u0002\\u01E3\\u01E4\\x07\u0004\u0002\u0002\\u01E47\u0003\u0002\u0002\u0002\\u01E5\\u01E6\u0005\\xBE`\u0002\\u01E69\u0003\u0002\u0002\u0002\\u01E7\\u01E8\\x07#\u0002\u0002\\u01E8\\u01E9\u0005\\xBE`\u0002\\u01E9\\u01EB\\x07\u0011\u0002\u0002\\u01EA\\u01EC\u00058\u001d\u0002\\u01EB\\u01EA\u0003\u0002\u0002\u0002\\u01EB\\u01EC\u0003\u0002\u0002\u0002\\u01EC\\u01F1\u0003\u0002\u0002\u0002\\u01ED\\u01EE\\x07\u0012\u0002\u0002\\u01EE\\u01F0\u00058\u001d\u0002\\u01EF\\u01ED\u0003\u0002\u0002\u0002\\u01F0\\u01F3\u0003\u0002\u0002\u0002\\u01F1\\u01EF\u0003\u0002\u0002\u0002\\u01F1\\u01F2\u0003\u0002\u0002\u0002\\u01F2\\u01F4\u0003\u0002\u0002\u0002\\u01F3\\u01F1\u0003\u0002\u0002\u0002\\u01F4\\u01F5\\x07\u0013\u0002\u0002\\u01F5;\u0003\u0002\u0002\u0002\\u01F6\\u01FF\\x07\u0019\u0002\u0002\\u01F7\\u01FC\u0005> \u0002\\u01F8\\u01F9\\x07\u0012\u0002\u0002\\u01F9\\u01FB\u0005> \u0002\\u01FA\\u01F8\u0003\u0002\u0002\u0002\\u01FB\\u01FE\u0003\u0002\u0002\u0002\\u01FC\\u01FA\u0003\u0002\u0002\u0002\\u01FC\\u01FD\u0003\u0002\u0002\u0002\\u01FD\\u0200\u0003\u0002\u0002\u0002\\u01FE\\u01FC\u0003\u0002\u0002\u0002\\u01FF\\u01F7\u0003\u0002\u0002\u0002\\u01FF\\u0200\u0003\u0002\u0002\u0002\\u0200\\u0201\u0003\u0002\u0002\u0002\\u0201\\u0202\\x07\u001a\u0002\u0002\\u0202=\u0003\u0002\u0002\u0002\\u0203\\u0205\u0005J&\u0002\\u0204\\u0206\u0005T+\u0002\\u0205\\u0204\u0003\u0002\u0002\u0002\\u0205\\u0206\u0003\u0002\u0002\u0002\\u0206\\u0208\u0003\u0002\u0002\u0002\\u0207\\u0209\u0005\\xBE`\u0002\\u0208\\u0207\u0003\u0002\u0002\u0002\\u0208\\u0209\u0003\u0002\u0002\u0002\\u0209?\u0003\u0002\u0002\u0002\\u020A\\u0213\\x07\u0019\u0002\u0002\\u020B\\u0210\u0005B\\\"\u0002\\u020C\\u020D\\x07\u0012\u0002\u0002\\u020D\\u020F\u0005B\\\"\u0002\\u020E\\u020C\u0003\u0002\u0002\u0002\\u020F\\u0212\u0003\u0002\u0002\u0002\\u0210\\u020E\u0003\u0002\u0002\u0002\\u0210\\u0211\u0003\u0002\u0002\u0002\\u0211\\u0214\u0003\u0002\u0002\u0002\\u0212\\u0210\u0003\u0002\u0002\u0002\\u0213\\u020B\u0003\u0002\u0002\u0002\\u0213\\u0214\u0003\u0002\u0002\u0002\\u0214\\u0215\u0003\u0002\u0002\u0002\\u0215\\u0216\\x07\u001a\u0002\u0002\\u0216A\u0003\u0002\u0002\u0002\\u0217\\u0219\u0005J&\u0002\\u0218\\u021A\\x07v\u0002\u0002\\u0219\\u0218\u0003\u0002\u0002\u0002\\u0219\\u021A\u0003\u0002\u0002\u0002\\u021A\\u021C\u0003\u0002\u0002\u0002\\u021B\\u021D\u0005\\xBE`\u0002\\u021C\\u021B\u0003\u0002\u0002\u0002\\u021C\\u021D\u0003\u0002\u0002\u0002\\u021DC\u0003\u0002\u0002\u0002\\u021E\\u0227\\x07\u0019\u0002\u0002\\u021F\\u0224\u0005F$\u0002\\u0220\\u0221\\x07\u0012\u0002\u0002\\u0221\\u0223\u0005F$\u0002\\u0222\\u0220\u0003\u0002\u0002\u0002\\u0223\\u0226\u0003\u0002\u0002\u0002\\u0224\\u0222\u0003\u0002\u0002\u0002\\u0224\\u0225\u0003\u0002\u0002\u0002\\u0225\\u0228\u0003\u0002\u0002\u0002\\u0226\\u0224\u0003\u0002\u0002\u0002\\u0227\\u021F\u0003\u0002\u0002\u0002\\u0227\\u0228\u0003\u0002\u0002\u0002\\u0228\\u0229\u0003\u0002\u0002\u0002\\u0229\\u022A\\x07\u001a\u0002\u0002\\u022AE\u0003\u0002\u0002\u0002\\u022B\\u022D\u0005J&\u0002\\u022C\\u022E\u0005T+\u0002\\u022D\\u022C\u0003\u0002\u0002\u0002\\u022D\\u022E\u0003\u0002\u0002\u0002\\u022EG\u0003\u0002\u0002\u0002\\u022F\\u0231\u0005J&\u0002\\u0230\\u0232\u0005T+\u0002\\u0231\\u0230\u0003\u0002\u0002\u0002\\u0231\\u0232\u0003\u0002\u0002\u0002\\u0232\\u0233\u0003\u0002\u0002\u0002\\u0233\\u0234\u0005\\xBE`\u0002\\u0234I\u0003\u0002\u0002\u0002\\u0235\\u0236\\b&\u0001\u0002\\u0236\\u023D\u0005\\x84C\u0002\\u0237\\u023D\u0005L'\u0002\\u0238\\u023D\u0005P)\u0002\\u0239\\u023D\u0005R*\u0002\\u023A\\u023B\\x07&\u0002\u0002\\u023B\\u023D\\x07x\u0002\u0002\\u023C\\u0235\u0003\u0002\u0002\u0002\\u023C\\u0237\u0003\u0002\u0002\u0002\\u023C\\u0238\u0003\u0002\u0002\u0002\\u023C\\u0239\u0003\u0002\u0002\u0002\\u023C\\u023A\u0003\u0002\u0002\u0002\\u023D\\u0246\u0003\u0002\u0002\u0002\\u023E\\u023F\\f\u0005\u0002\u0002\\u023F\\u0241\\x07$\u0002\u0002\\u0240\\u0242\u0005\\x86D\u0002\\u0241\\u0240\u0003\u0002\u0002\u0002\\u0241\\u0242\u0003\u0002\u0002\u0002\\u0242\\u0243\u0003\u0002\u0002\u0002\\u0243\\u0245\\x07%\u0002\u0002\\u0244\\u023E\u0003\u0002\u0002\u0002\\u0245\\u0248\u0003\u0002\u0002\u0002\\u0246\\u0244\u0003\u0002\u0002\u0002\\u0246\\u0247\u0003\u0002\u0002\u0002\\u0247K\u0003\u0002\u0002\u0002\\u0248\\u0246\u0003\u0002\u0002\u0002\\u0249\\u024E\u0005\\xBE`\u0002\\u024A\\u024B\\x07'\u0002\u0002\\u024B\\u024D\u0005\\xBE`\u0002\\u024C\\u024A\u0003\u0002\u0002\u0002\\u024D\\u0250\u0003\u0002\u0002\u0002\\u024E\\u024C\u0003\u0002\u0002\u0002\\u024E\\u024F\u0003\u0002\u0002\u0002\\u024FM\u0003\u0002\u0002\u0002\\u0250\\u024E\u0003\u0002\u0002\u0002\\u0251\\u0254\u0005\\x84C\u0002\\u0252\\u0254\u0005L'\u0002\\u0253\\u0251\u0003\u0002\u0002\u0002\\u0253\\u0252\u0003\u0002\u0002\u0002\\u0254O\u0003\u0002\u0002\u0002\\u0255\\u0256\\x07(\u0002\u0002\\u0256\\u0257\\x07\u0019\u0002\u0002\\u0257\\u0258\u0005N(\u0002\\u0258\\u0259\\x07)\u0002\u0002\\u0259\\u025A\u0005J&\u0002\\u025A\\u025B\\x07\u001a\u0002\u0002\\u025BQ\u0003\u0002\u0002\u0002\\u025C\\u025D\\x07 \u0002\u0002\\u025D\\u0263\u0005D#\u0002\\u025E\\u0262\\x07w\u0002\u0002\\u025F\\u0262\\x07u\u0002\u0002\\u0260\\u0262\u0005V,\u0002\\u0261\\u025E\u0003\u0002\u0002\u0002\\u0261\\u025F\u0003\u0002\u0002\u0002\\u0261\\u0260\u0003\u0002\u0002\u0002\\u0262\\u0265\u0003\u0002\u0002\u0002\\u0263\\u0261\u0003\u0002\u0002\u0002\\u0263\\u0264\u0003\u0002\u0002\u0002\\u0264\\u0268\u0003\u0002\u0002\u0002\\u0265\\u0263\u0003\u0002\u0002\u0002\\u0266\\u0267\\x07!\u0002\u0002\\u0267\\u0269\u0005D#\u0002\\u0268\\u0266\u0003\u0002\u0002\u0002\\u0268\\u0269\u0003\u0002\u0002\u0002\\u0269S\u0003\u0002\u0002\u0002\\u026A\\u026B\t\u0004\u0002\u0002\\u026BU\u0003\u0002\u0002\u0002\\u026C\\u026D\t\u0005\u0002\u0002\\u026DW\u0003\u0002\u0002\u0002\\u026E\\u0272\\x07\u0011\u0002\u0002\\u026F\\u0271\u0005Z.\u0002\\u0270\\u026F\u0003\u0002\u0002\u0002\\u0271\\u0274\u0003\u0002\u0002\u0002\\u0272\\u0270\u0003\u0002\u0002\u0002\\u0272\\u0273\u0003\u0002\u0002\u0002\\u0273\\u0275\u0003\u0002\u0002\u0002\\u0274\\u0272\u0003\u0002\u0002\u0002\\u0275\\u0276\\x07\u0013\u0002\u0002\\u0276Y\u0003\u0002\u0002\u0002\\u0277\\u0287\u0005^0\u0002\\u0278\\u0287\u0005`1\u0002\\u0279\\u0287\u0005d3\u0002\\u027A\\u0287\u0005j6\u0002\\u027B\\u0287\u0005X-\u0002\\u027C\\u0287\u0005l7\u0002\\u027D\\u0287\u0005p9\u0002\\u027E\\u0287\u0005r:\u0002\\u027F\\u0287\u0005t;\u0002\\u0280\\u0287\u0005v<\u0002\\u0281\\u0287\u0005x=\u0002\\u0282\\u0287\u0005z>\u0002\\u0283\\u0287\u0005f4\u0002\\u0284\\u0287\u0005h5\u0002\\u0285\\u0287\u0005|?\u0002\\u0286\\u0277\u0003\u0002\u0002\u0002\\u0286\\u0278\u0003\u0002\u0002\u0002\\u0286\\u0279\u0003\u0002\u0002\u0002\\u0286\\u027A\u0003\u0002\u0002\u0002\\u0286\\u027B\u0003\u0002\u0002\u0002\\u0286\\u027C\u0003\u0002\u0002\u0002\\u0286\\u027D\u0003\u0002\u0002\u0002\\u0286\\u027E\u0003\u0002\u0002\u0002\\u0286\\u027F\u0003\u0002\u0002\u0002\\u0286\\u0280\u0003\u0002\u0002\u0002\\u0286\\u0281\u0003\u0002\u0002\u0002\\u0286\\u0282\u0003\u0002\u0002\u0002\\u0286\\u0283\u0003\u0002\u0002\u0002\\u0286\\u0284\u0003\u0002\u0002\u0002\\u0286\\u0285\u0003\u0002\u0002\u0002\\u0287[\u0003\u0002\u0002\u0002\\u0288\\u0289\u0005\\x86D\u0002\\u0289\\u028A\\x07\u0004\u0002\u0002\\u028A]\u0003\u0002\u0002\u0002\\u028B\\u028C\\x07-\u0002\u0002\\u028C\\u028D\\x07\u0019\u0002\u0002\\u028D\\u028E\u0005\\x86D\u0002\\u028E\\u028F\\x07\u001a\u0002\u0002\\u028F\\u0292\u0005Z.\u0002\\u0290\\u0291\\x07.\u0002\u0002\\u0291\\u0293\u0005Z.\u0002\\u0292\\u0290\u0003\u0002\u0002\u0002\\u0292\\u0293\u0003\u0002\u0002\u0002\\u0293_\u0003\u0002\u0002\u0002\\u0294\\u0295\\x07/\u0002\u0002\\u0295\\u0297\u0005\\x86D\u0002\\u0296\\u0298\u00052\u001a\u0002\\u0297\\u0296\u0003\u0002\u0002\u0002\\u0297\\u0298\u0003\u0002\u0002\u0002\\u0298\\u0299\u0003\u0002\u0002\u0002\\u0299\\u029B\u0005X-\u0002\\u029A\\u029C\u0005b2\u0002\\u029B\\u029A\u0003\u0002\u0002\u0002\\u029C\\u029D\u0003\u0002\u0002\u0002\\u029D\\u029B\u0003\u0002\u0002\u0002\\u029D\\u029E\u0003\u0002\u0002\u0002\\u029Ea\u0003\u0002\u0002\u0002\\u029F\\u02A4\\x070\u0002\u0002\\u02A0\\u02A2\u0005\\xBE`\u0002\\u02A1\\u02A0\u0003\u0002\u0002\u0002\\u02A1\\u02A2\u0003\u0002\u0002\u0002\\u02A2\\u02A3\u0003\u0002\u0002\u0002\\u02A3\\u02A5\u0005<\u001f\u0002\\u02A4\\u02A1\u0003\u0002\u0002\u0002\\u02A4\\u02A5\u0003\u0002\u0002\u0002\\u02A5\\u02A6\u0003\u0002\u0002\u0002\\u02A6\\u02A7\u0005X-\u0002\\u02A7c\u0003\u0002\u0002\u0002\\u02A8\\u02A9\\x071\u0002\u0002\\u02A9\\u02AA\\x07\u0019\u0002\u0002\\u02AA\\u02AB\u0005\\x86D\u0002\\u02AB\\u02AC\\x07\u001a\u0002\u0002\\u02AC\\u02AD\u0005Z.\u0002\\u02ADe\u0003\u0002\u0002\u0002\\u02AE\\u02B1\u0005~@\u0002\\u02AF\\u02B1\u0005\\\\/\u0002\\u02B0\\u02AE\u0003\u0002\u0002\u0002\\u02B0\\u02AF\u0003\u0002\u0002\u0002\\u02B1g\u0003\u0002\u0002\u0002\\u02B2\\u02B3\\x072\u0002\u0002\\u02B3\\u02B4\u0005X-\u0002\\u02B4i\u0003\u0002\u0002\u0002\\u02B5\\u02B6\\x07\u001d\u0002\u0002\\u02B6\\u02B9\\x07\u0019\u0002\u0002\\u02B7\\u02BA\u0005f4\u0002\\u02B8\\u02BA\\x07\u0004\u0002\u0002\\u02B9\\u02B7\u0003\u0002\u0002\u0002\\u02B9\\u02B8\u0003\u0002\u0002\u0002\\u02BA\\u02BD\u0003\u0002\u0002\u0002\\u02BB\\u02BE\u0005\\\\/\u0002\\u02BC\\u02BE\\x07\u0004\u0002\u0002\\u02BD\\u02BB\u0003\u0002\u0002\u0002\\u02BD\\u02BC\u0003\u0002\u0002\u0002\\u02BE\\u02C0\u0003\u0002\u0002\u0002\\u02BF\\u02C1\u0005\\x86D\u0002\\u02C0\\u02BF\u0003\u0002\u0002\u0002\\u02C0\\u02C1\u0003\u0002\u0002\u0002\\u02C1\\u02C2\u0003\u0002\u0002\u0002\\u02C2\\u02C3\\x07\u001a\u0002\u0002\\u02C3\\u02C4\u0005Z.\u0002\\u02C4k\u0003\u0002\u0002\u0002\\u02C5\\u02C7\\x073\u0002\u0002\\u02C6\\u02C8\\x07\\x84\u0002\u0002\\u02C7\\u02C6\u0003\u0002\u0002\u0002\\u02C7\\u02C8\u0003\u0002\u0002\u0002\\u02C8\\u02CD\u0003\u0002\u0002\u0002\\u02C9\\u02CA\\x07\u0019\u0002\u0002\\u02CA\\u02CB\u0005n8\u0002\\u02CB\\u02CC\\x07\u001a\u0002\u0002\\u02CC\\u02CE\u0003\u0002\u0002\u0002\\u02CD\\u02C9\u0003\u0002\u0002\u0002\\u02CD\\u02CE\u0003\u0002\u0002\u0002\\u02CE\\u02CF\u0003\u0002\u0002\u0002\\u02CF\\u02D0\u0005\\x94K\u0002\\u02D0m\u0003\u0002\u0002\u0002\\u02D1\\u02D2\u0005\\xC4c\u0002\\u02D2o\u0003\u0002\u0002\u0002\\u02D3\\u02D4\\x074\u0002\u0002\\u02D4\\u02D5\u0005Z.\u0002\\u02D5\\u02D6\\x071\u0002\u0002\\u02D6\\u02D7\\x07\u0019\u0002\u0002\\u02D7\\u02D8\u0005\\x86D\u0002\\u02D8\\u02D9\\x07\u001a\u0002\u0002\\u02D9\\u02DA\\x07\u0004\u0002\u0002\\u02DAq\u0003\u0002\u0002\u0002\\u02DB\\u02DC\\x07s\u0002\u0002\\u02DC\\u02DD\\x07\u0004\u0002\u0002\\u02DDs\u0003\u0002\u0002\u0002\\u02DE\\u02DF\\x07p\u0002\u0002\\u02DF\\u02E0\\x07\u0004\u0002\u0002\\u02E0u\u0003\u0002\u0002\u0002\\u02E1\\u02E3\\x075\u0002\u0002\\u02E2\\u02E4\u0005\\x86D\u0002\\u02E3\\u02E2\u0003\u0002\u0002\u0002\\u02E3\\u02E4\u0003\u0002\u0002\u0002\\u02E4\\u02E5\u0003\u0002\u0002\u0002\\u02E5\\u02E6\\x07\u0004\u0002\u0002\\u02E6w\u0003\u0002\u0002\u0002\\u02E7\\u02E8\\x076\u0002\u0002\\u02E8\\u02E9\\x07\u0004\u0002\u0002\\u02E9y\u0003\u0002\u0002\u0002\\u02EA\\u02EB\\x077\u0002\u0002\\u02EB\\u02EC\u0005\\x92J\u0002\\u02EC\\u02ED\\x07\u0004\u0002\u0002\\u02ED{\u0003\u0002\u0002\u0002\\u02EE\\u02EF\\x078\u0002\u0002\\u02EF\\u02F0\u0005\\x92J\u0002\\u02F0\\u02F1\\x07\u0004\u0002\u0002\\u02F1}\u0003\u0002\u0002\u0002\\u02F2\\u02F3\\x079\u0002\u0002\\u02F3\\u02FA\u0005\\x82B\u0002\\u02F4\\u02FA\u0005H%\u0002\\u02F5\\u02F6\\x07\u0019\u0002\u0002\\u02F6\\u02F7\u0005\\x80A\u0002\\u02F7\\u02F8\\x07\u001a\u0002\u0002\\u02F8\\u02FA\u0003\u0002\u0002\u0002\\u02F9\\u02F2\u0003\u0002\u0002\u0002\\u02F9\\u02F4\u0003\u0002\u0002\u0002\\u02F9\\u02F5\u0003\u0002\u0002\u0002\\u02FA\\u02FD\u0003\u0002\u0002\u0002\\u02FB\\u02FC\\x07\\r\u0002\u0002\\u02FC\\u02FE\u0005\\x86D\u0002\\u02FD\\u02FB\u0003\u0002\u0002\u0002\\u02FD\\u02FE\u0003\u0002\u0002\u0002\\u02FE\\u02FF\u0003\u0002\u0002\u0002\\u02FF\\u0300\\x07\u0004\u0002\u0002\\u0300\\x7F\u0003\u0002\u0002\u0002\\u0301\\u0303\u0005H%\u0002\\u0302\\u0301\u0003\u0002\u0002\u0002\\u0302\\u0303\u0003\u0002\u0002\u0002\\u0303\\u030A\u0003\u0002\u0002\u0002\\u0304\\u0306\\x07\u0012\u0002\u0002\\u0305\\u0307\u0005H%\u0002\\u0306\\u0305\u0003\u0002\u0002\u0002\\u0306\\u0307\u0003\u0002\u0002\u0002\\u0307\\u0309\u0003\u0002\u0002\u0002\\u0308\\u0304\u0003\u0002\u0002\u0002\\u0309\\u030C\u0003\u0002\u0002\u0002\\u030A\\u0308\u0003\u0002\u0002\u0002\\u030A\\u030B\u0003\u0002\u0002\u0002\\u030B\\x81\u0003\u0002\u0002\u0002\\u030C\\u030A\u0003\u0002\u0002\u0002\\u030D\\u0314\\x07\u0019\u0002\u0002\\u030E\\u0310\u0005\\xBE`\u0002\\u030F\\u030E\u0003\u0002\u0002\u0002\\u030F\\u0310\u0003\u0002\u0002\u0002\\u0310\\u0311\u0003\u0002\u0002\u0002\\u0311\\u0313\\x07\u0012\u0002\u0002\\u0312\\u030F\u0003\u0002\u0002\u0002\\u0313\\u0316\u0003\u0002\u0002\u0002\\u0314\\u0312\u0003\u0002\u0002\u0002\\u0314\\u0315\u0003\u0002\u0002\u0002\\u0315\\u0318\u0003\u0002\u0002\u0002\\u0316\\u0314\u0003\u0002\u0002\u0002\\u0317\\u0319\u0005\\xBE`\u0002\\u0318\\u0317\u0003\u0002\u0002\u0002\\u0318\\u0319\u0003\u0002\u0002\u0002\\u0319\\u031A\u0003\u0002\u0002\u0002\\u031A\\u031B\\x07\u001a\u0002\u0002\\u031B\\x83\u0003\u0002\u0002\u0002\\u031C\\u031D\t\u0006\u0002\u0002\\u031D\\x85\u0003\u0002\u0002\u0002\\u031E\\u031F\\bD\u0001\u0002\\u031F\\u0320\\x07?\u0002\u0002\\u0320\\u0331\u0005J&\u0002\\u0321\\u0322\\x07\u0019\u0002\u0002\\u0322\\u0323\u0005\\x86D\u0002\\u0323\\u0324\\x07\u001a\u0002\u0002\\u0324\\u0331\u0003\u0002\u0002\u0002\\u0325\\u0326\t\\x07\u0002\u0002\\u0326\\u0331\u0005\\x86D\u0015\\u0327\\u0328\t\\b\u0002\u0002\\u0328\\u0331\u0005\\x86D\u0014\\u0329\\u032A\t\t\u0002\u0002\\u032A\\u0331\u0005\\x86D\u0013\\u032B\\u032C\\x07E\u0002\u0002\\u032C\\u0331\u0005\\x86D\u0012\\u032D\\u032E\\x07\\b\u0002\u0002\\u032E\\u0331\u0005\\x86D\u0011\\u032F\\u0331\u0005\\x88E\u0002\\u0330\\u031E\u0003\u0002\u0002\u0002\\u0330\\u0321\u0003\u0002\u0002\u0002\\u0330\\u0325\u0003\u0002\u0002\u0002\\u0330\\u0327\u0003\u0002\u0002\u0002\\u0330\\u0329\u0003\u0002\u0002\u0002\\u0330\\u032B\u0003\u0002\u0002\u0002\\u0330\\u032D\u0003\u0002\u0002\u0002\\u0330\\u032F\u0003\u0002\u0002\u0002\\u0331\\u037C\u0003\u0002\u0002\u0002\\u0332\\u0333\\f\u0010\u0002\u0002\\u0333\\u0334\\x07F\u0002\u0002\\u0334\\u037B\u0005\\x86D\u0011\\u0335\\u0336\\f\u000f\u0002\u0002\\u0336\\u0337\t\\n\u0002\u0002\\u0337\\u037B\u0005\\x86D\u0010\\u0338\\u0339\\f\u000e\u0002\u0002\\u0339\\u033A\t\\b\u0002\u0002\\u033A\\u037B\u0005\\x86D\u000f\\u033B\\u033C\\f\\r\u0002\u0002\\u033C\\u033D\t\\v\u0002\u0002\\u033D\\u037B\u0005\\x86D\u000e\\u033E\\u033F\\f\\f\u0002\u0002\\u033F\\u0340\\x07K\u0002\u0002\\u0340\\u037B\u0005\\x86D\\r\\u0341\\u0342\\f\\v\u0002\u0002\\u0342\\u0343\\x07\\x07\u0002\u0002\\u0343\\u037B\u0005\\x86D\\f\\u0344\\u0345\\f\\n\u0002\u0002\\u0345\\u0346\\x07L\u0002\u0002\\u0346\\u037B\u0005\\x86D\\v\\u0347\\u0348\\f\t\u0002\u0002\\u0348\\u0349\t\\f\u0002\u0002\\u0349\\u037B\u0005\\x86D\\n\\u034A\\u034B\\f\\b\u0002\u0002\\u034B\\u034C\t\\r\u0002\u0002\\u034C\\u037B\u0005\\x86D\t\\u034D\\u034E\\f\\x07\u0002\u0002\\u034E\\u034F\\x07O\u0002\u0002\\u034F\\u037B\u0005\\x86D\\b\\u0350\\u0351\\f\u0006\u0002\u0002\\u0351\\u0352\\x07\u0006\u0002\u0002\\u0352\\u037B\u0005\\x86D\\x07\\u0353\\u0354\\f\u0005\u0002\u0002\\u0354\\u0355\\x07P\u0002\u0002\\u0355\\u0356\u0005\\x86D\u0002\\u0356\\u0357\\x07@\u0002\u0002\\u0357\\u0358\u0005\\x86D\u0006\\u0358\\u037B\u0003\u0002\u0002\u0002\\u0359\\u035A\\f\u0004\u0002\u0002\\u035A\\u035B\t\u000e\u0002\u0002\\u035B\\u037B\u0005\\x86D\u0005\\u035C\\u035D\\f\u001d\u0002\u0002\\u035D\\u037B\t\\x07\u0002\u0002\\u035E\\u035F\\f\u001b\u0002\u0002\\u035F\\u0360\\x07$\u0002\u0002\\u0360\\u0361\u0005\\x86D\u0002\\u0361\\u0362\\x07%\u0002\u0002\\u0362\\u037B\u0003\u0002\u0002\u0002\\u0363\\u0364\\f\u001a\u0002\u0002\\u0364\\u0366\\x07$\u0002\u0002\\u0365\\u0367\u0005\\x86D\u0002\\u0366\\u0365\u0003\u0002\u0002\u0002\\u0366\\u0367\u0003\u0002\u0002\u0002\\u0367\\u0368\u0003\u0002\u0002\u0002\\u0368\\u036A\\x07@\u0002\u0002\\u0369\\u036B\u0005\\x86D\u0002\\u036A\\u0369\u0003\u0002\u0002\u0002\\u036A\\u036B\u0003\u0002\u0002\u0002\\u036B\\u036C\u0003\u0002\u0002\u0002\\u036C\\u037B\\x07%\u0002\u0002\\u036D\\u036E\\f\u0019\u0002\u0002\\u036E\\u036F\\x07'\u0002\u0002\\u036F\\u037B\u0005\\xBE`\u0002\\u0370\\u0371\\f\u0018\u0002\u0002\\u0371\\u0372\\x07\u0011\u0002\u0002\\u0372\\u0373\u0005\\x8CG\u0002\\u0373\\u0374\\x07\u0013\u0002\u0002\\u0374\\u037B\u0003\u0002\u0002\u0002\\u0375\\u0376\\f\u0017\u0002\u0002\\u0376\\u0377\\x07\u0019\u0002\u0002\\u0377\\u0378\u0005\\x90I\u0002\\u0378\\u0379\\x07\u001a\u0002\u0002\\u0379\\u037B\u0003\u0002\u0002\u0002\\u037A\\u0332\u0003\u0002\u0002\u0002\\u037A\\u0335\u0003\u0002\u0002\u0002\\u037A\\u0338\u0003\u0002\u0002\u0002\\u037A\\u033B\u0003\u0002\u0002\u0002\\u037A\\u033E\u0003\u0002\u0002\u0002\\u037A\\u0341\u0003\u0002\u0002\u0002\\u037A\\u0344\u0003\u0002\u0002\u0002\\u037A\\u0347\u0003\u0002\u0002\u0002\\u037A\\u034A\u0003\u0002\u0002\u0002\\u037A\\u034D\u0003\u0002\u0002\u0002\\u037A\\u0350\u0003\u0002\u0002\u0002\\u037A\\u0353\u0003\u0002\u0002\u0002\\u037A\\u0359\u0003\u0002\u0002\u0002\\u037A\\u035C\u0003\u0002\u0002\u0002\\u037A\\u035E\u0003\u0002\u0002\u0002\\u037A\\u0363\u0003\u0002\u0002\u0002\\u037A\\u036D\u0003\u0002\u0002\u0002\\u037A\\u0370\u0003\u0002\u0002\u0002\\u037A\\u0375\u0003\u0002\u0002\u0002\\u037B\\u037E\u0003\u0002\u0002\u0002\\u037C\\u037A\u0003\u0002\u0002\u0002\\u037C\\u037D\u0003\u0002\u0002\u0002\\u037D\\x87\u0003\u0002\u0002\u0002\\u037E\\u037C\u0003\u0002\u0002\u0002\\u037F\\u0389\\x07i\u0002\u0002\\u0380\\u0389\u0005\\xBC_\u0002\\u0381\\u0389\u0005\\xC0a\u0002\\u0382\\u0389\u0005\\xC4c\u0002\\u0383\\u0389\u0005\\xBE`\u0002\\u0384\\u0389\\x07}\u0002\u0002\\u0385\\u0389\\x07x\u0002\u0002\\u0386\\u0389\u0005\\xBA^\u0002\\u0387\\u0389\u0005J&\u0002\\u0388\\u037F\u0003\u0002\u0002\u0002\\u0388\\u0380\u0003\u0002\u0002\u0002\\u0388\\u0381\u0003\u0002\u0002\u0002\\u0388\\u0382\u0003\u0002\u0002\u0002\\u0388\\u0383\u0003\u0002\u0002\u0002\\u0388\\u0384\u0003\u0002\u0002\u0002\\u0388\\u0385\u0003\u0002\u0002\u0002\\u0388\\u0386\u0003\u0002\u0002\u0002\\u0388\\u0387\u0003\u0002\u0002\u0002\\u0389\\x89\u0003\u0002\u0002\u0002\\u038A\\u038F\u0005\\x86D\u0002\\u038B\\u038C\\x07\u0012\u0002\u0002\\u038C\\u038E\u0005\\x86D\u0002\\u038D\\u038B\u0003\u0002\u0002\u0002\\u038E\\u0391\u0003\u0002\u0002\u0002\\u038F\\u038D\u0003\u0002\u0002\u0002\\u038F\\u0390\u0003\u0002\u0002\u0002\\u0390\\x8B\u0003\u0002\u0002\u0002\\u0391\\u038F\u0003\u0002\u0002\u0002\\u0392\\u0397\u0005\\x8EH\u0002\\u0393\\u0394\\x07\u0012\u0002\u0002\\u0394\\u0396\u0005\\x8EH\u0002\\u0395\\u0393\u0003\u0002\u0002\u0002\\u0396\\u0399\u0003\u0002\u0002\u0002\\u0397\\u0395\u0003\u0002\u0002\u0002\\u0397\\u0398\u0003\u0002\u0002\u0002\\u0398\\u039B\u0003\u0002\u0002\u0002\\u0399\\u0397\u0003\u0002\u0002\u0002\\u039A\\u039C\\x07\u0012\u0002\u0002\\u039B\\u039A\u0003\u0002\u0002\u0002\\u039B\\u039C\u0003\u0002\u0002\u0002\\u039C\\x8D\u0003\u0002\u0002\u0002\\u039D\\u039E\u0005\\xBE`\u0002\\u039E\\u039F\\x07@\u0002\u0002\\u039F\\u03A0\u0005\\x86D\u0002\\u03A0\\x8F\u0003\u0002\u0002\u0002\\u03A1\\u03A3\\x07\u0011\u0002\u0002\\u03A2\\u03A4\u0005\\x8CG\u0002\\u03A3\\u03A2\u0003\u0002\u0002\u0002\\u03A3\\u03A4\u0003\u0002\u0002\u0002\\u03A4\\u03A5\u0003\u0002\u0002\u0002\\u03A5\\u03AA\\x07\u0013\u0002\u0002\\u03A6\\u03A8\u0005\\x8AF\u0002\\u03A7\\u03A6\u0003\u0002\u0002\u0002\\u03A7\\u03A8\u0003\u0002\u0002\u0002\\u03A8\\u03AA\u0003\u0002\u0002\u0002\\u03A9\\u03A1\u0003\u0002\u0002\u0002\\u03A9\\u03A7\u0003\u0002\u0002\u0002\\u03AA\\x91\u0003\u0002\u0002\u0002\\u03AB\\u03AC\u0005\\x86D\u0002\\u03AC\\u03AD\\x07\u0019\u0002\u0002\\u03AD\\u03AE\u0005\\x90I\u0002\\u03AE\\u03AF\\x07\u001a\u0002\u0002\\u03AF\\x93\u0003\u0002\u0002\u0002\\u03B0\\u03B4\\x07\u0011\u0002\u0002\\u03B1\\u03B3\u0005\\x96L\u0002\\u03B2\\u03B1\u0003\u0002\u0002\u0002\\u03B3\\u03B6\u0003\u0002\u0002\u0002\\u03B4\\u03B2\u0003\u0002\u0002\u0002\\u03B4\\u03B5\u0003\u0002\u0002\u0002\\u03B5\\u03B7\u0003\u0002\u0002\u0002\\u03B6\\u03B4\u0003\u0002\u0002\u0002\\u03B7\\u03B8\\x07\u0013\u0002\u0002\\u03B8\\x95\u0003\u0002\u0002\u0002\\u03B9\\u03CC\u0005\\xBE`\u0002\\u03BA\\u03CC\u0005\\x94K\u0002\\u03BB\\u03CC\u0005\\x98M\u0002\\u03BC\\u03CC\u0005\\x9EP\u0002\\u03BD\\u03CC\u0005\\xA0Q\u0002\\u03BE\\u03CC\u0005\\xA6T\u0002\\u03BF\\u03CC\u0005\\xA8U\u0002\\u03C0\\u03CC\u0005\\xAAV\u0002\\u03C1\\u03CC\u0005\\xAEX\u0002\\u03C2\\u03CC\u0005\\xB2Z\u0002\\u03C3\\u03CC\u0005\\xB4[\u0002\\u03C4\\u03CC\\x07p\u0002\u0002\\u03C5\\u03CC\\x07s\u0002\u0002\\u03C6\\u03CC\\x07t\u0002\u0002\\u03C7\\u03CC\u0005\\xB8]\u0002\\u03C8\\u03CC\u0005\\xBC_\u0002\\u03C9\\u03CC\u0005\\xC4c\u0002\\u03CA\\u03CC\u0005\\xC0a\u0002\\u03CB\\u03B9\u0003\u0002\u0002\u0002\\u03CB\\u03BA\u0003\u0002\u0002\u0002\\u03CB\\u03BB\u0003\u0002\u0002\u0002\\u03CB\\u03BC\u0003\u0002\u0002\u0002\\u03CB\\u03BD\u0003\u0002\u0002\u0002\\u03CB\\u03BE\u0003\u0002\u0002\u0002\\u03CB\\u03BF\u0003\u0002\u0002\u0002\\u03CB\\u03C0\u0003\u0002\u0002\u0002\\u03CB\\u03C1\u0003\u0002\u0002\u0002\\u03CB\\u03C2\u0003\u0002\u0002\u0002\\u03CB\\u03C3\u0003\u0002\u0002\u0002\\u03CB\\u03C4\u0003\u0002\u0002\u0002\\u03CB\\u03C5\u0003\u0002\u0002\u0002\\u03CB\\u03C6\u0003\u0002\u0002\u0002\\u03CB\\u03C7\u0003\u0002\u0002\u0002\\u03CB\\u03C8\u0003\u0002\u0002\u0002\\u03CB\\u03C9\u0003\u0002\u0002\u0002\\u03CB\\u03CA\u0003\u0002\u0002\u0002\\u03CC\\x97\u0003\u0002\u0002\u0002\\u03CD\\u03D1\u0005\\x9CO\u0002\\u03CE\\u03D1\u0005\\xB6\\\\\u0002\\u03CF\\u03D1\u0005\\x9AN\u0002\\u03D0\\u03CD\u0003\u0002\u0002\u0002\\u03D0\\u03CE\u0003\u0002\u0002\u0002\\u03D0\\u03CF\u0003\u0002\u0002\u0002\\u03D1\\x99\u0003\u0002\u0002\u0002\\u03D2\\u03D3\u0005\\xBE`\u0002\\u03D3\\u03D4\\x07'\u0002\u0002\\u03D4\\u03D5\u0005\\xBE`\u0002\\u03D5\\x9B\u0003\u0002\u0002\u0002\\u03D6\\u03DB\\x075\u0002\u0002\\u03D7\\u03DB\\x07&\u0002\u0002\\u03D8\\u03DB\\x07<\u0002\u0002\\u03D9\\u03DB\u0005\\xBE`\u0002\\u03DA\\u03D6\u0003\u0002\u0002\u0002\\u03DA\\u03D7\u0003\u0002\u0002\u0002\\u03DA\\u03D8\u0003\u0002\u0002\u0002\\u03DA\\u03D9\u0003\u0002\u0002\u0002\\u03DB\\u03E8\u0003\u0002\u0002\u0002\\u03DC\\u03DE\\x07\u0019\u0002\u0002\\u03DD\\u03DF\u0005\\x98M\u0002\\u03DE\\u03DD\u0003\u0002\u0002\u0002\\u03DE\\u03DF\u0003\u0002\u0002\u0002\\u03DF\\u03E4\u0003\u0002\u0002\u0002\\u03E0\\u03E1\\x07\u0012\u0002\u0002\\u03E1\\u03E3\u0005\\x98M\u0002\\u03E2\\u03E0\u0003\u0002\u0002\u0002\\u03E3\\u03E6\u0003\u0002\u0002\u0002\\u03E4\\u03E2\u0003\u0002\u0002\u0002\\u03E4\\u03E5\u0003\u0002\u0002\u0002\\u03E5\\u03E7\u0003\u0002\u0002\u0002\\u03E6\\u03E4\u0003\u0002\u0002\u0002\\u03E7\\u03E9\\x07\u001a\u0002\u0002\\u03E8\\u03DC\u0003\u0002\u0002\u0002\\u03E8\\u03E9\u0003\u0002\u0002\u0002\\u03E9\\x9D\u0003\u0002\u0002\u0002\\u03EA\\u03EB\\x07[\u0002\u0002\\u03EB\\u03EE\u0005\\xA2R\u0002\\u03EC\\u03ED\\x07\\\\\u0002\u0002\\u03ED\\u03EF\u0005\\x98M\u0002\\u03EE\\u03EC\u0003\u0002\u0002\u0002\\u03EE\\u03EF\u0003\u0002\u0002\u0002\\u03EF\\x9F\u0003\u0002\u0002\u0002\\u03F0\\u03F1\u0005\\xA2R\u0002\\u03F1\\u03F2\\x07\\\\\u0002\u0002\\u03F2\\u03F3\u0005\\x98M\u0002\\u03F3\\xA1\u0003\u0002\u0002\u0002\\u03F4\\u03FC\u0005\\xBE`\u0002\\u03F5\\u03FC\u0005\\x9AN\u0002\\u03F6\\u03FC\u0005\\xA4S\u0002\\u03F7\\u03F8\\x07\u0019\u0002\u0002\\u03F8\\u03F9\u0005\\xA4S\u0002\\u03F9\\u03FA\\x07\u001a\u0002\u0002\\u03FA\\u03FC\u0003\u0002\u0002\u0002\\u03FB\\u03F4\u0003\u0002\u0002\u0002\\u03FB\\u03F5\u0003\u0002\u0002\u0002\\u03FB\\u03F6\u0003\u0002\u0002\u0002\\u03FB\\u03F7\u0003\u0002\u0002\u0002\\u03FC\\xA3\u0003\u0002\u0002\u0002\\u03FD\\u0402\u0005\\xBE`\u0002\\u03FE\\u03FF\\x07\u0012\u0002\u0002\\u03FF\\u0401\u0005\\xBE`\u0002\\u0400\\u03FE\u0003\u0002\u0002\u0002\\u0401\\u0404\u0003\u0002\u0002\u0002\\u0402\\u0400\u0003\u0002\u0002\u0002\\u0402\\u0403\u0003\u0002\u0002\u0002\\u0403\\xA5\u0003\u0002\u0002\u0002\\u0404\\u0402\u0003\u0002\u0002\u0002\\u0405\\u0406\u0005\\x98M\u0002\\u0406\\u0407\\x07]\u0002\u0002\\u0407\\u0408\u0005\\xBE`\u0002\\u0408\\xA7\u0003\u0002\u0002\u0002\\u0409\\u040A\u0005\\xBE`\u0002\\u040A\\u040B\\x07@\u0002\u0002\\u040B\\xA9\u0003\u0002\u0002\u0002\\u040C\\u040D\\x07^\u0002\u0002\\u040D\\u0411\u0005\\x98M\u0002\\u040E\\u0410\u0005\\xACW\u0002\\u040F\\u040E\u0003\u0002\u0002\u0002\\u0410\\u0413\u0003\u0002\u0002\u0002\\u0411\\u040F\u0003\u0002\u0002\u0002\\u0411\\u0412\u0003\u0002\u0002\u0002\\u0412\\xAB\u0003\u0002\u0002\u0002\\u0413\\u0411\u0003\u0002\u0002\u0002\\u0414\\u0415\\x07_\u0002\u0002\\u0415\\u0416\u0005\\xB6\\\\\u0002\\u0416\\u0417\u0005\\x94K\u0002\\u0417\\u041B\u0003\u0002\u0002\u0002\\u0418\\u0419\\x07`\u0002\u0002\\u0419\\u041B\u0005\\x94K\u0002\\u041A\\u0414\u0003\u0002\u0002\u0002\\u041A\\u0418\u0003\u0002\u0002\u0002\\u041B\\xAD\u0003\u0002\u0002\u0002\\u041C\\u041D\\x07 \u0002\u0002\\u041D\\u041E\u0005\\xBE`\u0002\\u041E\\u0420\\x07\u0019\u0002\u0002\\u041F\\u0421\u0005\\xA4S\u0002\\u0420\\u041F\u0003\u0002\u0002\u0002\\u0420\\u0421\u0003\u0002\u0002\u0002\\u0421\\u0422\u0003\u0002\u0002\u0002\\u0422\\u0424\\x07\u001a\u0002\u0002\\u0423\\u0425\u0005\\xB0Y\u0002\\u0424\\u0423\u0003\u0002\u0002\u0002\\u0424\\u0425\u0003\u0002\u0002\u0002\\u0425\\u0426\u0003\u0002\u0002\u0002\\u0426\\u0427\u0005\\x94K\u0002\\u0427\\xAF\u0003\u0002\u0002\u0002\\u0428\\u0429\\x07a\u0002\u0002\\u0429\\u042A\u0005\\xA4S\u0002\\u042A\\xB1\u0003\u0002\u0002\u0002\\u042B\\u042E\\x07\u001d\u0002\u0002\\u042C\\u042F\u0005\\x94K\u0002\\u042D\\u042F\u0005\\x98M\u0002\\u042E\\u042C\u0003\u0002\u0002\u0002\\u042E\\u042D\u0003\u0002\u0002\u0002\\u042F\\u0430\u0003\u0002\u0002\u0002\\u0430\\u0433\u0005\\x98M\u0002\\u0431\\u0434\u0005\\x94K\u0002\\u0432\\u0434\u0005\\x98M\u0002\\u0433\\u0431\u0003\u0002\u0002\u0002\\u0433\\u0432\u0003\u0002\u0002\u0002\\u0434\\u0435\u0003\u0002\u0002\u0002\\u0435\\u0436\u0005\\x94K\u0002\\u0436\\xB3\u0003\u0002\u0002\u0002\\u0437\\u0438\\x07-\u0002\u0002\\u0438\\u0439\u0005\\x98M\u0002\\u0439\\u043A\u0005\\x94K\u0002\\u043A\\xB5\u0003\u0002\u0002\u0002\\u043B\\u0441\u0005\\xC4c\u0002\\u043C\\u0441\\x07j\u0002\u0002\\u043D\\u0441\\x07k\u0002\u0002\\u043E\\u0441\u0005\\xC0a\u0002\\u043F\\u0441\\x07i\u0002\u0002\\u0440\\u043B\u0003\u0002\u0002\u0002\\u0440\\u043C\u0003\u0002\u0002\u0002\\u0440\\u043D\u0003\u0002\u0002\u0002\\u0440\\u043E\u0003\u0002\u0002\u0002\\u0440\\u043F\u0003\u0002\";\nSolidityParser._serializedATNSegment2 = \"\u0002\u0002\\u0441\\xB7\u0003\u0002\u0002\u0002\\u0442\\u0443\\x073\u0002\u0002\\u0443\\u0444\u0005\\xBE`\u0002\\u0444\\u0445\u0005\\x94K\u0002\\u0445\\xB9\u0003\u0002\u0002\u0002\\u0446\\u0448\\x07\u0019\u0002\u0002\\u0447\\u0449\u0005\\x86D\u0002\\u0448\\u0447\u0003\u0002\u0002\u0002\\u0448\\u0449\u0003\u0002\u0002\u0002\\u0449\\u0450\u0003\u0002\u0002\u0002\\u044A\\u044C\\x07\u0012\u0002\u0002\\u044B\\u044D\u0005\\x86D\u0002\\u044C\\u044B\u0003\u0002\u0002\u0002\\u044C\\u044D\u0003\u0002\u0002\u0002\\u044D\\u044F\u0003\u0002\u0002\u0002\\u044E\\u044A\u0003\u0002\u0002\u0002\\u044F\\u0452\u0003\u0002\u0002\u0002\\u0450\\u044E\u0003\u0002\u0002\u0002\\u0450\\u0451\u0003\u0002\u0002\u0002\\u0451\\u0453\u0003\u0002\u0002\u0002\\u0452\\u0450\u0003\u0002\u0002\u0002\\u0453\\u0461\\x07\u001a\u0002\u0002\\u0454\\u045D\\x07$\u0002\u0002\\u0455\\u045A\u0005\\x86D\u0002\\u0456\\u0457\\x07\u0012\u0002\u0002\\u0457\\u0459\u0005\\x86D\u0002\\u0458\\u0456\u0003\u0002\u0002\u0002\\u0459\\u045C\u0003\u0002\u0002\u0002\\u045A\\u0458\u0003\u0002\u0002\u0002\\u045A\\u045B\u0003\u0002\u0002\u0002\\u045B\\u045E\u0003\u0002\u0002\u0002\\u045C\\u045A\u0003\u0002\u0002\u0002\\u045D\\u0455\u0003\u0002\u0002\u0002\\u045D\\u045E\u0003\u0002\u0002\u0002\\u045E\\u045F\u0003\u0002\u0002\u0002\\u045F\\u0461\\x07%\u0002\u0002\\u0460\\u0446\u0003\u0002\u0002\u0002\\u0460\\u0454\u0003\u0002\u0002\u0002\\u0461\\xBB\u0003\u0002\u0002\u0002\\u0462\\u0464\t\u000f\u0002\u0002\\u0463\\u0465\\x07l\u0002\u0002\\u0464\\u0463\u0003\u0002\u0002\u0002\\u0464\\u0465\u0003\u0002\u0002\u0002\\u0465\\xBD\u0003\u0002\u0002\u0002\\u0466\\u0467\t\u0010\u0002\u0002\\u0467\\xBF\u0003\u0002\u0002\u0002\\u0468\\u046A\\x07m\u0002\u0002\\u0469\\u0468\u0003\u0002\u0002\u0002\\u046A\\u046B\u0003\u0002\u0002\u0002\\u046B\\u0469\u0003\u0002\u0002\u0002\\u046B\\u046C\u0003\u0002\u0002\u0002\\u046C\\xC1\u0003\u0002\u0002\u0002\\u046D\\u0479\\x07c\u0002\u0002\\u046E\\u046F\\x07\u0019\u0002\u0002\\u046F\\u0474\u0005L'\u0002\\u0470\\u0471\\x07\u0012\u0002\u0002\\u0471\\u0473\u0005L'\u0002\\u0472\\u0470\u0003\u0002\u0002\u0002\\u0473\\u0476\u0003\u0002\u0002\u0002\\u0474\\u0472\u0003\u0002\u0002\u0002\\u0474\\u0475\u0003\u0002\u0002\u0002\\u0475\\u0477\u0003\u0002\u0002\u0002\\u0476\\u0474\u0003\u0002\u0002\u0002\\u0477\\u0478\\x07\u001a\u0002\u0002\\u0478\\u047A\u0003\u0002\u0002\u0002\\u0479\\u046E\u0003\u0002\u0002\u0002\\u0479\\u047A\u0003\u0002\u0002\u0002\\u047A\\xC3\u0003\u0002\u0002\u0002\\u047B\\u047D\\x07\\x84\u0002\u0002\\u047C\\u047B\u0003\u0002\u0002\u0002\\u047D\\u047E\u0003\u0002\u0002\u0002\\u047E\\u047C\u0003\u0002\u0002\u0002\\u047E\\u047F\u0003\u0002\u0002\u0002\\u047F\\xC5\u0003\u0002\u0002\u0002\\x81\\xD0\\xD2\\xE1\\xE5\\xEA\\xF0\\xF4\\xF7\\xFC\\u0102\\u0109\\u010D\\u011A\\u0122\\u0127\\u0131\\u0134\\u013A\\u0142\\u0145\\u0150\\u0159\\u015B\\u0161\\u017C\\u017F\\u018A\\u018F\\u019B\\u019E\\u01A5\\u01A9\\u01AB\\u01B0\\u01B5\\u01B8\\u01BE\\u01C2\\u01C6\\u01CB\\u01D8\\u01DA\\u01E1\\u01EB\\u01F1\\u01FC\\u01FF\\u0205\\u0208\\u0210\\u0213\\u0219\\u021C\\u0224\\u0227\\u022D\\u0231\\u023C\\u0241\\u0246\\u024E\\u0253\\u0261\\u0263\\u0268\\u0272\\u0286\\u0292\\u0297\\u029D\\u02A1\\u02A4\\u02B0\\u02B9\\u02BD\\u02C0\\u02C7\\u02CD\\u02E3\\u02F9\\u02FD\\u0302\\u0306\\u030A\\u030F\\u0314\\u0318\\u0330\\u0366\\u036A\\u037A\\u037C\\u0388\\u038F\\u0397\\u039B\\u03A3\\u03A7\\u03A9\\u03B4\\u03CB\\u03D0\\u03DA\\u03DE\\u03E4\\u03E8\\u03EE\\u03FB\\u0402\\u0411\\u041A\\u0420\\u0424\\u042E\\u0433\\u0440\\u0448\\u044C\\u0450\\u045A\\u045D\\u0460\\u0464\\u046B\\u0474\\u0479\\u047E\";\nSolidityParser._serializedATN = Utils2.join([\n  _SolidityParser._serializedATNSegment0,\n  _SolidityParser._serializedATNSegment1,\n  _SolidityParser._serializedATNSegment2\n], \"\");\nvar SourceUnitContext = class extends import_ParserRuleContext.ParserRuleContext {\n  EOF() {\n    return this.getToken(SolidityParser.EOF, 0);\n  }\n  pragmaDirective(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(PragmaDirectiveContext);\n    } else {\n      return this.getRuleContext(i, PragmaDirectiveContext);\n    }\n  }\n  importDirective(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ImportDirectiveContext);\n    } else {\n      return this.getRuleContext(i, ImportDirectiveContext);\n    }\n  }\n  contractDefinition(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ContractDefinitionContext);\n    } else {\n      return this.getRuleContext(i, ContractDefinitionContext);\n    }\n  }\n  enumDefinition(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(EnumDefinitionContext);\n    } else {\n      return this.getRuleContext(i, EnumDefinitionContext);\n    }\n  }\n  structDefinition(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(StructDefinitionContext);\n    } else {\n      return this.getRuleContext(i, StructDefinitionContext);\n    }\n  }\n  functionDefinition(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(FunctionDefinitionContext);\n    } else {\n      return this.getRuleContext(i, FunctionDefinitionContext);\n    }\n  }\n  fileLevelConstant(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(FileLevelConstantContext);\n    } else {\n      return this.getRuleContext(i, FileLevelConstantContext);\n    }\n  }\n  customErrorDefinition(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(CustomErrorDefinitionContext);\n    } else {\n      return this.getRuleContext(i, CustomErrorDefinitionContext);\n    }\n  }\n  typeDefinition(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(TypeDefinitionContext);\n    } else {\n      return this.getRuleContext(i, TypeDefinitionContext);\n    }\n  }\n  usingForDeclaration(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(UsingForDeclarationContext);\n    } else {\n      return this.getRuleContext(i, UsingForDeclarationContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_sourceUnit;\n  }\n  enterRule(listener) {\n    if (listener.enterSourceUnit) {\n      listener.enterSourceUnit(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitSourceUnit) {\n      listener.exitSourceUnit(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitSourceUnit) {\n      return visitor.visitSourceUnit(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PragmaDirectiveContext = class extends import_ParserRuleContext.ParserRuleContext {\n  pragmaName() {\n    return this.getRuleContext(0, PragmaNameContext);\n  }\n  pragmaValue() {\n    return this.getRuleContext(0, PragmaValueContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_pragmaDirective;\n  }\n  enterRule(listener) {\n    if (listener.enterPragmaDirective) {\n      listener.enterPragmaDirective(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPragmaDirective) {\n      listener.exitPragmaDirective(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitPragmaDirective) {\n      return visitor.visitPragmaDirective(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PragmaNameContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_pragmaName;\n  }\n  enterRule(listener) {\n    if (listener.enterPragmaName) {\n      listener.enterPragmaName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPragmaName) {\n      listener.exitPragmaName(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitPragmaName) {\n      return visitor.visitPragmaName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PragmaValueContext = class extends import_ParserRuleContext.ParserRuleContext {\n  version() {\n    return this.tryGetRuleContext(0, VersionContext);\n  }\n  expression() {\n    return this.tryGetRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_pragmaValue;\n  }\n  enterRule(listener) {\n    if (listener.enterPragmaValue) {\n      listener.enterPragmaValue(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPragmaValue) {\n      listener.exitPragmaValue(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitPragmaValue) {\n      return visitor.visitPragmaValue(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VersionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  versionConstraint(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(VersionConstraintContext);\n    } else {\n      return this.getRuleContext(i, VersionConstraintContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_version;\n  }\n  enterRule(listener) {\n    if (listener.enterVersion) {\n      listener.enterVersion(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVersion) {\n      listener.exitVersion(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitVersion) {\n      return visitor.visitVersion(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VersionOperatorContext = class extends import_ParserRuleContext.ParserRuleContext {\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_versionOperator;\n  }\n  enterRule(listener) {\n    if (listener.enterVersionOperator) {\n      listener.enterVersionOperator(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVersionOperator) {\n      listener.exitVersionOperator(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitVersionOperator) {\n      return visitor.visitVersionOperator(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VersionConstraintContext = class extends import_ParserRuleContext.ParserRuleContext {\n  VersionLiteral() {\n    return this.tryGetToken(SolidityParser.VersionLiteral, 0);\n  }\n  versionOperator() {\n    return this.tryGetRuleContext(0, VersionOperatorContext);\n  }\n  DecimalNumber() {\n    return this.tryGetToken(SolidityParser.DecimalNumber, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_versionConstraint;\n  }\n  enterRule(listener) {\n    if (listener.enterVersionConstraint) {\n      listener.enterVersionConstraint(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVersionConstraint) {\n      listener.exitVersionConstraint(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitVersionConstraint) {\n      return visitor.visitVersionConstraint(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ImportDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(IdentifierContext);\n    } else {\n      return this.getRuleContext(i, IdentifierContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_importDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterImportDeclaration) {\n      listener.enterImportDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitImportDeclaration) {\n      listener.exitImportDeclaration(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitImportDeclaration) {\n      return visitor.visitImportDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ImportDirectiveContext = class extends import_ParserRuleContext.ParserRuleContext {\n  importPath() {\n    return this.getRuleContext(0, ImportPathContext);\n  }\n  identifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(IdentifierContext);\n    } else {\n      return this.getRuleContext(i, IdentifierContext);\n    }\n  }\n  importDeclaration(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ImportDeclarationContext);\n    } else {\n      return this.getRuleContext(i, ImportDeclarationContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_importDirective;\n  }\n  enterRule(listener) {\n    if (listener.enterImportDirective) {\n      listener.enterImportDirective(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitImportDirective) {\n      listener.exitImportDirective(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitImportDirective) {\n      return visitor.visitImportDirective(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ImportPathContext = class extends import_ParserRuleContext.ParserRuleContext {\n  StringLiteralFragment() {\n    return this.getToken(SolidityParser.StringLiteralFragment, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_importPath;\n  }\n  enterRule(listener) {\n    if (listener.enterImportPath) {\n      listener.enterImportPath(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitImportPath) {\n      listener.exitImportPath(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitImportPath) {\n      return visitor.visitImportPath(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ContractDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  inheritanceSpecifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(InheritanceSpecifierContext);\n    } else {\n      return this.getRuleContext(i, InheritanceSpecifierContext);\n    }\n  }\n  contractPart(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ContractPartContext);\n    } else {\n      return this.getRuleContext(i, ContractPartContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_contractDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterContractDefinition) {\n      listener.enterContractDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitContractDefinition) {\n      listener.exitContractDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitContractDefinition) {\n      return visitor.visitContractDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar InheritanceSpecifierContext = class extends import_ParserRuleContext.ParserRuleContext {\n  userDefinedTypeName() {\n    return this.getRuleContext(0, UserDefinedTypeNameContext);\n  }\n  expressionList() {\n    return this.tryGetRuleContext(0, ExpressionListContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_inheritanceSpecifier;\n  }\n  enterRule(listener) {\n    if (listener.enterInheritanceSpecifier) {\n      listener.enterInheritanceSpecifier(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitInheritanceSpecifier) {\n      listener.exitInheritanceSpecifier(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitInheritanceSpecifier) {\n      return visitor.visitInheritanceSpecifier(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ContractPartContext = class extends import_ParserRuleContext.ParserRuleContext {\n  stateVariableDeclaration() {\n    return this.tryGetRuleContext(0, StateVariableDeclarationContext);\n  }\n  usingForDeclaration() {\n    return this.tryGetRuleContext(0, UsingForDeclarationContext);\n  }\n  structDefinition() {\n    return this.tryGetRuleContext(0, StructDefinitionContext);\n  }\n  modifierDefinition() {\n    return this.tryGetRuleContext(0, ModifierDefinitionContext);\n  }\n  functionDefinition() {\n    return this.tryGetRuleContext(0, FunctionDefinitionContext);\n  }\n  eventDefinition() {\n    return this.tryGetRuleContext(0, EventDefinitionContext);\n  }\n  enumDefinition() {\n    return this.tryGetRuleContext(0, EnumDefinitionContext);\n  }\n  customErrorDefinition() {\n    return this.tryGetRuleContext(0, CustomErrorDefinitionContext);\n  }\n  typeDefinition() {\n    return this.tryGetRuleContext(0, TypeDefinitionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_contractPart;\n  }\n  enterRule(listener) {\n    if (listener.enterContractPart) {\n      listener.enterContractPart(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitContractPart) {\n      listener.exitContractPart(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitContractPart) {\n      return visitor.visitContractPart(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StateVariableDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {\n  typeName() {\n    return this.getRuleContext(0, TypeNameContext);\n  }\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  PublicKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.PublicKeyword);\n    } else {\n      return this.getToken(SolidityParser.PublicKeyword, i);\n    }\n  }\n  InternalKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.InternalKeyword);\n    } else {\n      return this.getToken(SolidityParser.InternalKeyword, i);\n    }\n  }\n  PrivateKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.PrivateKeyword);\n    } else {\n      return this.getToken(SolidityParser.PrivateKeyword, i);\n    }\n  }\n  ConstantKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.ConstantKeyword);\n    } else {\n      return this.getToken(SolidityParser.ConstantKeyword, i);\n    }\n  }\n  ImmutableKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.ImmutableKeyword);\n    } else {\n      return this.getToken(SolidityParser.ImmutableKeyword, i);\n    }\n  }\n  overrideSpecifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(OverrideSpecifierContext);\n    } else {\n      return this.getRuleContext(i, OverrideSpecifierContext);\n    }\n  }\n  expression() {\n    return this.tryGetRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_stateVariableDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterStateVariableDeclaration) {\n      listener.enterStateVariableDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStateVariableDeclaration) {\n      listener.exitStateVariableDeclaration(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitStateVariableDeclaration) {\n      return visitor.visitStateVariableDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FileLevelConstantContext = class extends import_ParserRuleContext.ParserRuleContext {\n  typeName() {\n    return this.getRuleContext(0, TypeNameContext);\n  }\n  ConstantKeyword() {\n    return this.getToken(SolidityParser.ConstantKeyword, 0);\n  }\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_fileLevelConstant;\n  }\n  enterRule(listener) {\n    if (listener.enterFileLevelConstant) {\n      listener.enterFileLevelConstant(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFileLevelConstant) {\n      listener.exitFileLevelConstant(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFileLevelConstant) {\n      return visitor.visitFileLevelConstant(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar CustomErrorDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  parameterList() {\n    return this.getRuleContext(0, ParameterListContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_customErrorDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterCustomErrorDefinition) {\n      listener.enterCustomErrorDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitCustomErrorDefinition) {\n      listener.exitCustomErrorDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitCustomErrorDefinition) {\n      return visitor.visitCustomErrorDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TypeDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  TypeKeyword() {\n    return this.getToken(SolidityParser.TypeKeyword, 0);\n  }\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  elementaryTypeName() {\n    return this.getRuleContext(0, ElementaryTypeNameContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_typeDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterTypeDefinition) {\n      listener.enterTypeDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTypeDefinition) {\n      listener.exitTypeDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitTypeDefinition) {\n      return visitor.visitTypeDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UsingForDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {\n  usingForObject() {\n    return this.getRuleContext(0, UsingForObjectContext);\n  }\n  typeName() {\n    return this.tryGetRuleContext(0, TypeNameContext);\n  }\n  GlobalKeyword() {\n    return this.tryGetToken(SolidityParser.GlobalKeyword, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_usingForDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterUsingForDeclaration) {\n      listener.enterUsingForDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUsingForDeclaration) {\n      listener.exitUsingForDeclaration(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitUsingForDeclaration) {\n      return visitor.visitUsingForDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UsingForObjectContext = class extends import_ParserRuleContext.ParserRuleContext {\n  userDefinedTypeName(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(UserDefinedTypeNameContext);\n    } else {\n      return this.getRuleContext(i, UserDefinedTypeNameContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_usingForObject;\n  }\n  enterRule(listener) {\n    if (listener.enterUsingForObject) {\n      listener.enterUsingForObject(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUsingForObject) {\n      listener.exitUsingForObject(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitUsingForObject) {\n      return visitor.visitUsingForObject(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StructDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  variableDeclaration(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(VariableDeclarationContext);\n    } else {\n      return this.getRuleContext(i, VariableDeclarationContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_structDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterStructDefinition) {\n      listener.enterStructDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStructDefinition) {\n      listener.exitStructDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitStructDefinition) {\n      return visitor.visitStructDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ModifierDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  block() {\n    return this.tryGetRuleContext(0, BlockContext);\n  }\n  parameterList() {\n    return this.tryGetRuleContext(0, ParameterListContext);\n  }\n  VirtualKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.VirtualKeyword);\n    } else {\n      return this.getToken(SolidityParser.VirtualKeyword, i);\n    }\n  }\n  overrideSpecifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(OverrideSpecifierContext);\n    } else {\n      return this.getRuleContext(i, OverrideSpecifierContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_modifierDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterModifierDefinition) {\n      listener.enterModifierDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitModifierDefinition) {\n      listener.exitModifierDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitModifierDefinition) {\n      return visitor.visitModifierDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ModifierInvocationContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  expressionList() {\n    return this.tryGetRuleContext(0, ExpressionListContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_modifierInvocation;\n  }\n  enterRule(listener) {\n    if (listener.enterModifierInvocation) {\n      listener.enterModifierInvocation(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitModifierInvocation) {\n      listener.exitModifierInvocation(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitModifierInvocation) {\n      return visitor.visitModifierInvocation(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  functionDescriptor() {\n    return this.getRuleContext(0, FunctionDescriptorContext);\n  }\n  parameterList() {\n    return this.getRuleContext(0, ParameterListContext);\n  }\n  modifierList() {\n    return this.getRuleContext(0, ModifierListContext);\n  }\n  block() {\n    return this.tryGetRuleContext(0, BlockContext);\n  }\n  returnParameters() {\n    return this.tryGetRuleContext(0, ReturnParametersContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionDefinition) {\n      listener.enterFunctionDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionDefinition) {\n      listener.exitFunctionDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFunctionDefinition) {\n      return visitor.visitFunctionDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionDescriptorContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  ConstructorKeyword() {\n    return this.tryGetToken(SolidityParser.ConstructorKeyword, 0);\n  }\n  FallbackKeyword() {\n    return this.tryGetToken(SolidityParser.FallbackKeyword, 0);\n  }\n  ReceiveKeyword() {\n    return this.tryGetToken(SolidityParser.ReceiveKeyword, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionDescriptor;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionDescriptor) {\n      listener.enterFunctionDescriptor(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionDescriptor) {\n      listener.exitFunctionDescriptor(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFunctionDescriptor) {\n      return visitor.visitFunctionDescriptor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ReturnParametersContext = class extends import_ParserRuleContext.ParserRuleContext {\n  parameterList() {\n    return this.getRuleContext(0, ParameterListContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_returnParameters;\n  }\n  enterRule(listener) {\n    if (listener.enterReturnParameters) {\n      listener.enterReturnParameters(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitReturnParameters) {\n      listener.exitReturnParameters(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitReturnParameters) {\n      return visitor.visitReturnParameters(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ModifierListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  ExternalKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.ExternalKeyword);\n    } else {\n      return this.getToken(SolidityParser.ExternalKeyword, i);\n    }\n  }\n  PublicKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.PublicKeyword);\n    } else {\n      return this.getToken(SolidityParser.PublicKeyword, i);\n    }\n  }\n  InternalKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.InternalKeyword);\n    } else {\n      return this.getToken(SolidityParser.InternalKeyword, i);\n    }\n  }\n  PrivateKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.PrivateKeyword);\n    } else {\n      return this.getToken(SolidityParser.PrivateKeyword, i);\n    }\n  }\n  VirtualKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.VirtualKeyword);\n    } else {\n      return this.getToken(SolidityParser.VirtualKeyword, i);\n    }\n  }\n  stateMutability(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(StateMutabilityContext);\n    } else {\n      return this.getRuleContext(i, StateMutabilityContext);\n    }\n  }\n  modifierInvocation(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ModifierInvocationContext);\n    } else {\n      return this.getRuleContext(i, ModifierInvocationContext);\n    }\n  }\n  overrideSpecifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(OverrideSpecifierContext);\n    } else {\n      return this.getRuleContext(i, OverrideSpecifierContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_modifierList;\n  }\n  enterRule(listener) {\n    if (listener.enterModifierList) {\n      listener.enterModifierList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitModifierList) {\n      listener.exitModifierList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitModifierList) {\n      return visitor.visitModifierList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EventDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  eventParameterList() {\n    return this.getRuleContext(0, EventParameterListContext);\n  }\n  AnonymousKeyword() {\n    return this.tryGetToken(SolidityParser.AnonymousKeyword, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_eventDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterEventDefinition) {\n      listener.enterEventDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEventDefinition) {\n      listener.exitEventDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitEventDefinition) {\n      return visitor.visitEventDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EnumValueContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_enumValue;\n  }\n  enterRule(listener) {\n    if (listener.enterEnumValue) {\n      listener.enterEnumValue(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEnumValue) {\n      listener.exitEnumValue(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitEnumValue) {\n      return visitor.visitEnumValue(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EnumDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  enumValue(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(EnumValueContext);\n    } else {\n      return this.getRuleContext(i, EnumValueContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_enumDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterEnumDefinition) {\n      listener.enterEnumDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEnumDefinition) {\n      listener.exitEnumDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitEnumDefinition) {\n      return visitor.visitEnumDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ParameterListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  parameter(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ParameterContext);\n    } else {\n      return this.getRuleContext(i, ParameterContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_parameterList;\n  }\n  enterRule(listener) {\n    if (listener.enterParameterList) {\n      listener.enterParameterList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitParameterList) {\n      listener.exitParameterList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitParameterList) {\n      return visitor.visitParameterList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ParameterContext = class extends import_ParserRuleContext.ParserRuleContext {\n  typeName() {\n    return this.getRuleContext(0, TypeNameContext);\n  }\n  storageLocation() {\n    return this.tryGetRuleContext(0, StorageLocationContext);\n  }\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_parameter;\n  }\n  enterRule(listener) {\n    if (listener.enterParameter) {\n      listener.enterParameter(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitParameter) {\n      listener.exitParameter(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitParameter) {\n      return visitor.visitParameter(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EventParameterListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  eventParameter(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(EventParameterContext);\n    } else {\n      return this.getRuleContext(i, EventParameterContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_eventParameterList;\n  }\n  enterRule(listener) {\n    if (listener.enterEventParameterList) {\n      listener.enterEventParameterList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEventParameterList) {\n      listener.exitEventParameterList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitEventParameterList) {\n      return visitor.visitEventParameterList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EventParameterContext = class extends import_ParserRuleContext.ParserRuleContext {\n  typeName() {\n    return this.getRuleContext(0, TypeNameContext);\n  }\n  IndexedKeyword() {\n    return this.tryGetToken(SolidityParser.IndexedKeyword, 0);\n  }\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_eventParameter;\n  }\n  enterRule(listener) {\n    if (listener.enterEventParameter) {\n      listener.enterEventParameter(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEventParameter) {\n      listener.exitEventParameter(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitEventParameter) {\n      return visitor.visitEventParameter(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionTypeParameterListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  functionTypeParameter(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(FunctionTypeParameterContext);\n    } else {\n      return this.getRuleContext(i, FunctionTypeParameterContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionTypeParameterList;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionTypeParameterList) {\n      listener.enterFunctionTypeParameterList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionTypeParameterList) {\n      listener.exitFunctionTypeParameterList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFunctionTypeParameterList) {\n      return visitor.visitFunctionTypeParameterList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionTypeParameterContext = class extends import_ParserRuleContext.ParserRuleContext {\n  typeName() {\n    return this.getRuleContext(0, TypeNameContext);\n  }\n  storageLocation() {\n    return this.tryGetRuleContext(0, StorageLocationContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionTypeParameter;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionTypeParameter) {\n      listener.enterFunctionTypeParameter(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionTypeParameter) {\n      listener.exitFunctionTypeParameter(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFunctionTypeParameter) {\n      return visitor.visitFunctionTypeParameter(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VariableDeclarationContext = class extends import_ParserRuleContext.ParserRuleContext {\n  typeName() {\n    return this.getRuleContext(0, TypeNameContext);\n  }\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  storageLocation() {\n    return this.tryGetRuleContext(0, StorageLocationContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_variableDeclaration;\n  }\n  enterRule(listener) {\n    if (listener.enterVariableDeclaration) {\n      listener.enterVariableDeclaration(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVariableDeclaration) {\n      listener.exitVariableDeclaration(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitVariableDeclaration) {\n      return visitor.visitVariableDeclaration(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {\n  elementaryTypeName() {\n    return this.tryGetRuleContext(0, ElementaryTypeNameContext);\n  }\n  userDefinedTypeName() {\n    return this.tryGetRuleContext(0, UserDefinedTypeNameContext);\n  }\n  mapping() {\n    return this.tryGetRuleContext(0, MappingContext);\n  }\n  typeName() {\n    return this.tryGetRuleContext(0, TypeNameContext);\n  }\n  expression() {\n    return this.tryGetRuleContext(0, ExpressionContext);\n  }\n  functionTypeName() {\n    return this.tryGetRuleContext(0, FunctionTypeNameContext);\n  }\n  PayableKeyword() {\n    return this.tryGetToken(SolidityParser.PayableKeyword, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_typeName;\n  }\n  enterRule(listener) {\n    if (listener.enterTypeName) {\n      listener.enterTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTypeName) {\n      listener.exitTypeName(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitTypeName) {\n      return visitor.visitTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UserDefinedTypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(IdentifierContext);\n    } else {\n      return this.getRuleContext(i, IdentifierContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_userDefinedTypeName;\n  }\n  enterRule(listener) {\n    if (listener.enterUserDefinedTypeName) {\n      listener.enterUserDefinedTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUserDefinedTypeName) {\n      listener.exitUserDefinedTypeName(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitUserDefinedTypeName) {\n      return visitor.visitUserDefinedTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar MappingKeyContext = class extends import_ParserRuleContext.ParserRuleContext {\n  elementaryTypeName() {\n    return this.tryGetRuleContext(0, ElementaryTypeNameContext);\n  }\n  userDefinedTypeName() {\n    return this.tryGetRuleContext(0, UserDefinedTypeNameContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_mappingKey;\n  }\n  enterRule(listener) {\n    if (listener.enterMappingKey) {\n      listener.enterMappingKey(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitMappingKey) {\n      listener.exitMappingKey(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitMappingKey) {\n      return visitor.visitMappingKey(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar MappingContext = class extends import_ParserRuleContext.ParserRuleContext {\n  mappingKey() {\n    return this.getRuleContext(0, MappingKeyContext);\n  }\n  typeName() {\n    return this.getRuleContext(0, TypeNameContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_mapping;\n  }\n  enterRule(listener) {\n    if (listener.enterMapping) {\n      listener.enterMapping(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitMapping) {\n      listener.exitMapping(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitMapping) {\n      return visitor.visitMapping(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionTypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {\n  functionTypeParameterList(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(FunctionTypeParameterListContext);\n    } else {\n      return this.getRuleContext(i, FunctionTypeParameterListContext);\n    }\n  }\n  InternalKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.InternalKeyword);\n    } else {\n      return this.getToken(SolidityParser.InternalKeyword, i);\n    }\n  }\n  ExternalKeyword(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.ExternalKeyword);\n    } else {\n      return this.getToken(SolidityParser.ExternalKeyword, i);\n    }\n  }\n  stateMutability(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(StateMutabilityContext);\n    } else {\n      return this.getRuleContext(i, StateMutabilityContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionTypeName;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionTypeName) {\n      listener.enterFunctionTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionTypeName) {\n      listener.exitFunctionTypeName(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFunctionTypeName) {\n      return visitor.visitFunctionTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StorageLocationContext = class extends import_ParserRuleContext.ParserRuleContext {\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_storageLocation;\n  }\n  enterRule(listener) {\n    if (listener.enterStorageLocation) {\n      listener.enterStorageLocation(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStorageLocation) {\n      listener.exitStorageLocation(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitStorageLocation) {\n      return visitor.visitStorageLocation(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StateMutabilityContext = class extends import_ParserRuleContext.ParserRuleContext {\n  PureKeyword() {\n    return this.tryGetToken(SolidityParser.PureKeyword, 0);\n  }\n  ConstantKeyword() {\n    return this.tryGetToken(SolidityParser.ConstantKeyword, 0);\n  }\n  ViewKeyword() {\n    return this.tryGetToken(SolidityParser.ViewKeyword, 0);\n  }\n  PayableKeyword() {\n    return this.tryGetToken(SolidityParser.PayableKeyword, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_stateMutability;\n  }\n  enterRule(listener) {\n    if (listener.enterStateMutability) {\n      listener.enterStateMutability(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStateMutability) {\n      listener.exitStateMutability(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitStateMutability) {\n      return visitor.visitStateMutability(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar BlockContext = class extends import_ParserRuleContext.ParserRuleContext {\n  statement(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(StatementContext);\n    } else {\n      return this.getRuleContext(i, StatementContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_block;\n  }\n  enterRule(listener) {\n    if (listener.enterBlock) {\n      listener.enterBlock(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitBlock) {\n      listener.exitBlock(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitBlock) {\n      return visitor.visitBlock(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  ifStatement() {\n    return this.tryGetRuleContext(0, IfStatementContext);\n  }\n  tryStatement() {\n    return this.tryGetRuleContext(0, TryStatementContext);\n  }\n  whileStatement() {\n    return this.tryGetRuleContext(0, WhileStatementContext);\n  }\n  forStatement() {\n    return this.tryGetRuleContext(0, ForStatementContext);\n  }\n  block() {\n    return this.tryGetRuleContext(0, BlockContext);\n  }\n  inlineAssemblyStatement() {\n    return this.tryGetRuleContext(0, InlineAssemblyStatementContext);\n  }\n  doWhileStatement() {\n    return this.tryGetRuleContext(0, DoWhileStatementContext);\n  }\n  continueStatement() {\n    return this.tryGetRuleContext(0, ContinueStatementContext);\n  }\n  breakStatement() {\n    return this.tryGetRuleContext(0, BreakStatementContext);\n  }\n  returnStatement() {\n    return this.tryGetRuleContext(0, ReturnStatementContext);\n  }\n  throwStatement() {\n    return this.tryGetRuleContext(0, ThrowStatementContext);\n  }\n  emitStatement() {\n    return this.tryGetRuleContext(0, EmitStatementContext);\n  }\n  simpleStatement() {\n    return this.tryGetRuleContext(0, SimpleStatementContext);\n  }\n  uncheckedStatement() {\n    return this.tryGetRuleContext(0, UncheckedStatementContext);\n  }\n  revertStatement() {\n    return this.tryGetRuleContext(0, RevertStatementContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_statement;\n  }\n  enterRule(listener) {\n    if (listener.enterStatement) {\n      listener.enterStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStatement) {\n      listener.exitStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitStatement) {\n      return visitor.visitStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ExpressionStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_expressionStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterExpressionStatement) {\n      listener.enterExpressionStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitExpressionStatement) {\n      listener.exitExpressionStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitExpressionStatement) {\n      return visitor.visitExpressionStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar IfStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  statement(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(StatementContext);\n    } else {\n      return this.getRuleContext(i, StatementContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_ifStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterIfStatement) {\n      listener.enterIfStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitIfStatement) {\n      listener.exitIfStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitIfStatement) {\n      return visitor.visitIfStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TryStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  block() {\n    return this.getRuleContext(0, BlockContext);\n  }\n  returnParameters() {\n    return this.tryGetRuleContext(0, ReturnParametersContext);\n  }\n  catchClause(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(CatchClauseContext);\n    } else {\n      return this.getRuleContext(i, CatchClauseContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_tryStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterTryStatement) {\n      listener.enterTryStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTryStatement) {\n      listener.exitTryStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitTryStatement) {\n      return visitor.visitTryStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar CatchClauseContext = class extends import_ParserRuleContext.ParserRuleContext {\n  block() {\n    return this.getRuleContext(0, BlockContext);\n  }\n  parameterList() {\n    return this.tryGetRuleContext(0, ParameterListContext);\n  }\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_catchClause;\n  }\n  enterRule(listener) {\n    if (listener.enterCatchClause) {\n      listener.enterCatchClause(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitCatchClause) {\n      listener.exitCatchClause(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitCatchClause) {\n      return visitor.visitCatchClause(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar WhileStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  statement() {\n    return this.getRuleContext(0, StatementContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_whileStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterWhileStatement) {\n      listener.enterWhileStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitWhileStatement) {\n      listener.exitWhileStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitWhileStatement) {\n      return visitor.visitWhileStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar SimpleStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  variableDeclarationStatement() {\n    return this.tryGetRuleContext(0, VariableDeclarationStatementContext);\n  }\n  expressionStatement() {\n    return this.tryGetRuleContext(0, ExpressionStatementContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_simpleStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterSimpleStatement) {\n      listener.enterSimpleStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitSimpleStatement) {\n      listener.exitSimpleStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitSimpleStatement) {\n      return visitor.visitSimpleStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar UncheckedStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  block() {\n    return this.getRuleContext(0, BlockContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_uncheckedStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterUncheckedStatement) {\n      listener.enterUncheckedStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitUncheckedStatement) {\n      listener.exitUncheckedStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitUncheckedStatement) {\n      return visitor.visitUncheckedStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ForStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  statement() {\n    return this.getRuleContext(0, StatementContext);\n  }\n  simpleStatement() {\n    return this.tryGetRuleContext(0, SimpleStatementContext);\n  }\n  expressionStatement() {\n    return this.tryGetRuleContext(0, ExpressionStatementContext);\n  }\n  expression() {\n    return this.tryGetRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_forStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterForStatement) {\n      listener.enterForStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitForStatement) {\n      listener.exitForStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitForStatement) {\n      return visitor.visitForStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar InlineAssemblyStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyBlock() {\n    return this.getRuleContext(0, AssemblyBlockContext);\n  }\n  StringLiteralFragment() {\n    return this.tryGetToken(SolidityParser.StringLiteralFragment, 0);\n  }\n  inlineAssemblyStatementFlag() {\n    return this.tryGetRuleContext(0, InlineAssemblyStatementFlagContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_inlineAssemblyStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterInlineAssemblyStatement) {\n      listener.enterInlineAssemblyStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitInlineAssemblyStatement) {\n      listener.exitInlineAssemblyStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitInlineAssemblyStatement) {\n      return visitor.visitInlineAssemblyStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar InlineAssemblyStatementFlagContext = class extends import_ParserRuleContext.ParserRuleContext {\n  stringLiteral() {\n    return this.getRuleContext(0, StringLiteralContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_inlineAssemblyStatementFlag;\n  }\n  enterRule(listener) {\n    if (listener.enterInlineAssemblyStatementFlag) {\n      listener.enterInlineAssemblyStatementFlag(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitInlineAssemblyStatementFlag) {\n      listener.exitInlineAssemblyStatementFlag(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitInlineAssemblyStatementFlag) {\n      return visitor.visitInlineAssemblyStatementFlag(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar DoWhileStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  statement() {\n    return this.getRuleContext(0, StatementContext);\n  }\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_doWhileStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterDoWhileStatement) {\n      listener.enterDoWhileStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitDoWhileStatement) {\n      listener.exitDoWhileStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitDoWhileStatement) {\n      return visitor.visitDoWhileStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ContinueStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  ContinueKeyword() {\n    return this.getToken(SolidityParser.ContinueKeyword, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_continueStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterContinueStatement) {\n      listener.enterContinueStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitContinueStatement) {\n      listener.exitContinueStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitContinueStatement) {\n      return visitor.visitContinueStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar BreakStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  BreakKeyword() {\n    return this.getToken(SolidityParser.BreakKeyword, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_breakStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterBreakStatement) {\n      listener.enterBreakStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitBreakStatement) {\n      listener.exitBreakStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitBreakStatement) {\n      return visitor.visitBreakStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ReturnStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression() {\n    return this.tryGetRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_returnStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterReturnStatement) {\n      listener.enterReturnStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitReturnStatement) {\n      listener.exitReturnStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitReturnStatement) {\n      return visitor.visitReturnStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ThrowStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_throwStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterThrowStatement) {\n      listener.enterThrowStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitThrowStatement) {\n      listener.exitThrowStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitThrowStatement) {\n      return visitor.visitThrowStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar EmitStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  functionCall() {\n    return this.getRuleContext(0, FunctionCallContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_emitStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterEmitStatement) {\n      listener.enterEmitStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitEmitStatement) {\n      listener.exitEmitStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitEmitStatement) {\n      return visitor.visitEmitStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar RevertStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  functionCall() {\n    return this.getRuleContext(0, FunctionCallContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_revertStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterRevertStatement) {\n      listener.enterRevertStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitRevertStatement) {\n      listener.exitRevertStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitRevertStatement) {\n      return visitor.visitRevertStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VariableDeclarationStatementContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifierList() {\n    return this.tryGetRuleContext(0, IdentifierListContext);\n  }\n  variableDeclaration() {\n    return this.tryGetRuleContext(0, VariableDeclarationContext);\n  }\n  variableDeclarationList() {\n    return this.tryGetRuleContext(0, VariableDeclarationListContext);\n  }\n  expression() {\n    return this.tryGetRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_variableDeclarationStatement;\n  }\n  enterRule(listener) {\n    if (listener.enterVariableDeclarationStatement) {\n      listener.enterVariableDeclarationStatement(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVariableDeclarationStatement) {\n      listener.exitVariableDeclarationStatement(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitVariableDeclarationStatement) {\n      return visitor.visitVariableDeclarationStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar VariableDeclarationListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  variableDeclaration(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(VariableDeclarationContext);\n    } else {\n      return this.getRuleContext(i, VariableDeclarationContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_variableDeclarationList;\n  }\n  enterRule(listener) {\n    if (listener.enterVariableDeclarationList) {\n      listener.enterVariableDeclarationList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitVariableDeclarationList) {\n      listener.exitVariableDeclarationList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitVariableDeclarationList) {\n      return visitor.visitVariableDeclarationList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar IdentifierListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(IdentifierContext);\n    } else {\n      return this.getRuleContext(i, IdentifierContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_identifierList;\n  }\n  enterRule(listener) {\n    if (listener.enterIdentifierList) {\n      listener.enterIdentifierList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitIdentifierList) {\n      listener.exitIdentifierList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitIdentifierList) {\n      return visitor.visitIdentifierList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ElementaryTypeNameContext = class extends import_ParserRuleContext.ParserRuleContext {\n  Int() {\n    return this.tryGetToken(SolidityParser.Int, 0);\n  }\n  Uint() {\n    return this.tryGetToken(SolidityParser.Uint, 0);\n  }\n  Byte() {\n    return this.tryGetToken(SolidityParser.Byte, 0);\n  }\n  Fixed() {\n    return this.tryGetToken(SolidityParser.Fixed, 0);\n  }\n  Ufixed() {\n    return this.tryGetToken(SolidityParser.Ufixed, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_elementaryTypeName;\n  }\n  enterRule(listener) {\n    if (listener.enterElementaryTypeName) {\n      listener.enterElementaryTypeName(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitElementaryTypeName) {\n      listener.exitElementaryTypeName(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitElementaryTypeName) {\n      return visitor.visitElementaryTypeName(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ExpressionContext);\n    } else {\n      return this.getRuleContext(i, ExpressionContext);\n    }\n  }\n  typeName() {\n    return this.tryGetRuleContext(0, TypeNameContext);\n  }\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  nameValueList() {\n    return this.tryGetRuleContext(0, NameValueListContext);\n  }\n  functionCallArguments() {\n    return this.tryGetRuleContext(0, FunctionCallArgumentsContext);\n  }\n  primaryExpression() {\n    return this.tryGetRuleContext(0, PrimaryExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_expression;\n  }\n  enterRule(listener) {\n    if (listener.enterExpression) {\n      listener.enterExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitExpression) {\n      listener.exitExpression(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitExpression) {\n      return visitor.visitExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar PrimaryExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  BooleanLiteral() {\n    return this.tryGetToken(SolidityParser.BooleanLiteral, 0);\n  }\n  numberLiteral() {\n    return this.tryGetRuleContext(0, NumberLiteralContext);\n  }\n  hexLiteral() {\n    return this.tryGetRuleContext(0, HexLiteralContext);\n  }\n  stringLiteral() {\n    return this.tryGetRuleContext(0, StringLiteralContext);\n  }\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  TypeKeyword() {\n    return this.tryGetToken(SolidityParser.TypeKeyword, 0);\n  }\n  PayableKeyword() {\n    return this.tryGetToken(SolidityParser.PayableKeyword, 0);\n  }\n  tupleExpression() {\n    return this.tryGetRuleContext(0, TupleExpressionContext);\n  }\n  typeName() {\n    return this.tryGetRuleContext(0, TypeNameContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_primaryExpression;\n  }\n  enterRule(listener) {\n    if (listener.enterPrimaryExpression) {\n      listener.enterPrimaryExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitPrimaryExpression) {\n      listener.exitPrimaryExpression(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitPrimaryExpression) {\n      return visitor.visitPrimaryExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar ExpressionListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ExpressionContext);\n    } else {\n      return this.getRuleContext(i, ExpressionContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_expressionList;\n  }\n  enterRule(listener) {\n    if (listener.enterExpressionList) {\n      listener.enterExpressionList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitExpressionList) {\n      listener.exitExpressionList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitExpressionList) {\n      return visitor.visitExpressionList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar NameValueListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  nameValue(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(NameValueContext);\n    } else {\n      return this.getRuleContext(i, NameValueContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_nameValueList;\n  }\n  enterRule(listener) {\n    if (listener.enterNameValueList) {\n      listener.enterNameValueList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitNameValueList) {\n      listener.exitNameValueList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitNameValueList) {\n      return visitor.visitNameValueList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar NameValueContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_nameValue;\n  }\n  enterRule(listener) {\n    if (listener.enterNameValue) {\n      listener.enterNameValue(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitNameValue) {\n      listener.exitNameValue(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitNameValue) {\n      return visitor.visitNameValue(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionCallArgumentsContext = class extends import_ParserRuleContext.ParserRuleContext {\n  nameValueList() {\n    return this.tryGetRuleContext(0, NameValueListContext);\n  }\n  expressionList() {\n    return this.tryGetRuleContext(0, ExpressionListContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionCallArguments;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionCallArguments) {\n      listener.enterFunctionCallArguments(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionCallArguments) {\n      listener.exitFunctionCallArguments(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFunctionCallArguments) {\n      return visitor.visitFunctionCallArguments(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar FunctionCallContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression() {\n    return this.getRuleContext(0, ExpressionContext);\n  }\n  functionCallArguments() {\n    return this.getRuleContext(0, FunctionCallArgumentsContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_functionCall;\n  }\n  enterRule(listener) {\n    if (listener.enterFunctionCall) {\n      listener.enterFunctionCall(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitFunctionCall) {\n      listener.exitFunctionCall(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitFunctionCall) {\n      return visitor.visitFunctionCall(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyBlockContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyItem(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(AssemblyItemContext);\n    } else {\n      return this.getRuleContext(i, AssemblyItemContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyBlock;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyBlock) {\n      listener.enterAssemblyBlock(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyBlock) {\n      listener.exitAssemblyBlock(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyBlock) {\n      return visitor.visitAssemblyBlock(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyItemContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  assemblyBlock() {\n    return this.tryGetRuleContext(0, AssemblyBlockContext);\n  }\n  assemblyExpression() {\n    return this.tryGetRuleContext(0, AssemblyExpressionContext);\n  }\n  assemblyLocalDefinition() {\n    return this.tryGetRuleContext(0, AssemblyLocalDefinitionContext);\n  }\n  assemblyAssignment() {\n    return this.tryGetRuleContext(0, AssemblyAssignmentContext);\n  }\n  assemblyStackAssignment() {\n    return this.tryGetRuleContext(0, AssemblyStackAssignmentContext);\n  }\n  labelDefinition() {\n    return this.tryGetRuleContext(0, LabelDefinitionContext);\n  }\n  assemblySwitch() {\n    return this.tryGetRuleContext(0, AssemblySwitchContext);\n  }\n  assemblyFunctionDefinition() {\n    return this.tryGetRuleContext(0, AssemblyFunctionDefinitionContext);\n  }\n  assemblyFor() {\n    return this.tryGetRuleContext(0, AssemblyForContext);\n  }\n  assemblyIf() {\n    return this.tryGetRuleContext(0, AssemblyIfContext);\n  }\n  BreakKeyword() {\n    return this.tryGetToken(SolidityParser.BreakKeyword, 0);\n  }\n  ContinueKeyword() {\n    return this.tryGetToken(SolidityParser.ContinueKeyword, 0);\n  }\n  LeaveKeyword() {\n    return this.tryGetToken(SolidityParser.LeaveKeyword, 0);\n  }\n  subAssembly() {\n    return this.tryGetRuleContext(0, SubAssemblyContext);\n  }\n  numberLiteral() {\n    return this.tryGetRuleContext(0, NumberLiteralContext);\n  }\n  stringLiteral() {\n    return this.tryGetRuleContext(0, StringLiteralContext);\n  }\n  hexLiteral() {\n    return this.tryGetRuleContext(0, HexLiteralContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyItem;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyItem) {\n      listener.enterAssemblyItem(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyItem) {\n      listener.exitAssemblyItem(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyItem) {\n      return visitor.visitAssemblyItem(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyCall() {\n    return this.tryGetRuleContext(0, AssemblyCallContext);\n  }\n  assemblyLiteral() {\n    return this.tryGetRuleContext(0, AssemblyLiteralContext);\n  }\n  assemblyMember() {\n    return this.tryGetRuleContext(0, AssemblyMemberContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyExpression;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyExpression) {\n      listener.enterAssemblyExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyExpression) {\n      listener.exitAssemblyExpression(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyExpression) {\n      return visitor.visitAssemblyExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyMemberContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(IdentifierContext);\n    } else {\n      return this.getRuleContext(i, IdentifierContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyMember;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyMember) {\n      listener.enterAssemblyMember(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyMember) {\n      listener.exitAssemblyMember(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyMember) {\n      return visitor.visitAssemblyMember(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyCallContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  assemblyExpression(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(AssemblyExpressionContext);\n    } else {\n      return this.getRuleContext(i, AssemblyExpressionContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyCall;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyCall) {\n      listener.enterAssemblyCall(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyCall) {\n      listener.exitAssemblyCall(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyCall) {\n      return visitor.visitAssemblyCall(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyLocalDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyIdentifierOrList() {\n    return this.getRuleContext(0, AssemblyIdentifierOrListContext);\n  }\n  assemblyExpression() {\n    return this.tryGetRuleContext(0, AssemblyExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyLocalDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyLocalDefinition) {\n      listener.enterAssemblyLocalDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyLocalDefinition) {\n      listener.exitAssemblyLocalDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyLocalDefinition) {\n      return visitor.visitAssemblyLocalDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyAssignmentContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyIdentifierOrList() {\n    return this.getRuleContext(0, AssemblyIdentifierOrListContext);\n  }\n  assemblyExpression() {\n    return this.getRuleContext(0, AssemblyExpressionContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyAssignment;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyAssignment) {\n      listener.enterAssemblyAssignment(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyAssignment) {\n      listener.exitAssemblyAssignment(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyAssignment) {\n      return visitor.visitAssemblyAssignment(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyIdentifierOrListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.tryGetRuleContext(0, IdentifierContext);\n  }\n  assemblyMember() {\n    return this.tryGetRuleContext(0, AssemblyMemberContext);\n  }\n  assemblyIdentifierList() {\n    return this.tryGetRuleContext(0, AssemblyIdentifierListContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyIdentifierOrList;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyIdentifierOrList) {\n      listener.enterAssemblyIdentifierOrList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyIdentifierOrList) {\n      listener.exitAssemblyIdentifierOrList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyIdentifierOrList) {\n      return visitor.visitAssemblyIdentifierOrList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyIdentifierListContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(IdentifierContext);\n    } else {\n      return this.getRuleContext(i, IdentifierContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyIdentifierList;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyIdentifierList) {\n      listener.enterAssemblyIdentifierList(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyIdentifierList) {\n      listener.exitAssemblyIdentifierList(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyIdentifierList) {\n      return visitor.visitAssemblyIdentifierList(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyStackAssignmentContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyExpression() {\n    return this.getRuleContext(0, AssemblyExpressionContext);\n  }\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyStackAssignment;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyStackAssignment) {\n      listener.enterAssemblyStackAssignment(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyStackAssignment) {\n      listener.exitAssemblyStackAssignment(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyStackAssignment) {\n      return visitor.visitAssemblyStackAssignment(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar LabelDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_labelDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterLabelDefinition) {\n      listener.enterLabelDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitLabelDefinition) {\n      listener.exitLabelDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitLabelDefinition) {\n      return visitor.visitLabelDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblySwitchContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyExpression() {\n    return this.getRuleContext(0, AssemblyExpressionContext);\n  }\n  assemblyCase(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(AssemblyCaseContext);\n    } else {\n      return this.getRuleContext(i, AssemblyCaseContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblySwitch;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblySwitch) {\n      listener.enterAssemblySwitch(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblySwitch) {\n      listener.exitAssemblySwitch(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblySwitch) {\n      return visitor.visitAssemblySwitch(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyCaseContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyLiteral() {\n    return this.tryGetRuleContext(0, AssemblyLiteralContext);\n  }\n  assemblyBlock() {\n    return this.getRuleContext(0, AssemblyBlockContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyCase;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyCase) {\n      listener.enterAssemblyCase(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyCase) {\n      listener.exitAssemblyCase(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyCase) {\n      return visitor.visitAssemblyCase(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyFunctionDefinitionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  assemblyBlock() {\n    return this.getRuleContext(0, AssemblyBlockContext);\n  }\n  assemblyIdentifierList() {\n    return this.tryGetRuleContext(0, AssemblyIdentifierListContext);\n  }\n  assemblyFunctionReturns() {\n    return this.tryGetRuleContext(0, AssemblyFunctionReturnsContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyFunctionDefinition;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyFunctionDefinition) {\n      listener.enterAssemblyFunctionDefinition(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyFunctionDefinition) {\n      listener.exitAssemblyFunctionDefinition(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyFunctionDefinition) {\n      return visitor.visitAssemblyFunctionDefinition(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyFunctionReturnsContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyIdentifierList() {\n    return this.tryGetRuleContext(0, AssemblyIdentifierListContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyFunctionReturns;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyFunctionReturns) {\n      listener.enterAssemblyFunctionReturns(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyFunctionReturns) {\n      listener.exitAssemblyFunctionReturns(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyFunctionReturns) {\n      return visitor.visitAssemblyFunctionReturns(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyForContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyExpression(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(AssemblyExpressionContext);\n    } else {\n      return this.getRuleContext(i, AssemblyExpressionContext);\n    }\n  }\n  assemblyBlock(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(AssemblyBlockContext);\n    } else {\n      return this.getRuleContext(i, AssemblyBlockContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyFor;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyFor) {\n      listener.enterAssemblyFor(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyFor) {\n      listener.exitAssemblyFor(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyFor) {\n      return visitor.visitAssemblyFor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyIfContext = class extends import_ParserRuleContext.ParserRuleContext {\n  assemblyExpression() {\n    return this.getRuleContext(0, AssemblyExpressionContext);\n  }\n  assemblyBlock() {\n    return this.getRuleContext(0, AssemblyBlockContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyIf;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyIf) {\n      listener.enterAssemblyIf(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyIf) {\n      listener.exitAssemblyIf(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyIf) {\n      return visitor.visitAssemblyIf(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar AssemblyLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {\n  stringLiteral() {\n    return this.tryGetRuleContext(0, StringLiteralContext);\n  }\n  DecimalNumber() {\n    return this.tryGetToken(SolidityParser.DecimalNumber, 0);\n  }\n  HexNumber() {\n    return this.tryGetToken(SolidityParser.HexNumber, 0);\n  }\n  hexLiteral() {\n    return this.tryGetRuleContext(0, HexLiteralContext);\n  }\n  BooleanLiteral() {\n    return this.tryGetToken(SolidityParser.BooleanLiteral, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_assemblyLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterAssemblyLiteral) {\n      listener.enterAssemblyLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitAssemblyLiteral) {\n      listener.exitAssemblyLiteral(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitAssemblyLiteral) {\n      return visitor.visitAssemblyLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar SubAssemblyContext = class extends import_ParserRuleContext.ParserRuleContext {\n  identifier() {\n    return this.getRuleContext(0, IdentifierContext);\n  }\n  assemblyBlock() {\n    return this.getRuleContext(0, AssemblyBlockContext);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_subAssembly;\n  }\n  enterRule(listener) {\n    if (listener.enterSubAssembly) {\n      listener.enterSubAssembly(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitSubAssembly) {\n      listener.exitSubAssembly(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitSubAssembly) {\n      return visitor.visitSubAssembly(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar TupleExpressionContext = class extends import_ParserRuleContext.ParserRuleContext {\n  expression(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(ExpressionContext);\n    } else {\n      return this.getRuleContext(i, ExpressionContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_tupleExpression;\n  }\n  enterRule(listener) {\n    if (listener.enterTupleExpression) {\n      listener.enterTupleExpression(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitTupleExpression) {\n      listener.exitTupleExpression(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitTupleExpression) {\n      return visitor.visitTupleExpression(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar NumberLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {\n  DecimalNumber() {\n    return this.tryGetToken(SolidityParser.DecimalNumber, 0);\n  }\n  HexNumber() {\n    return this.tryGetToken(SolidityParser.HexNumber, 0);\n  }\n  NumberUnit() {\n    return this.tryGetToken(SolidityParser.NumberUnit, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_numberLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterNumberLiteral) {\n      listener.enterNumberLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitNumberLiteral) {\n      listener.exitNumberLiteral(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitNumberLiteral) {\n      return visitor.visitNumberLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar IdentifierContext = class extends import_ParserRuleContext.ParserRuleContext {\n  ReceiveKeyword() {\n    return this.tryGetToken(SolidityParser.ReceiveKeyword, 0);\n  }\n  ConstructorKeyword() {\n    return this.tryGetToken(SolidityParser.ConstructorKeyword, 0);\n  }\n  PayableKeyword() {\n    return this.tryGetToken(SolidityParser.PayableKeyword, 0);\n  }\n  LeaveKeyword() {\n    return this.tryGetToken(SolidityParser.LeaveKeyword, 0);\n  }\n  Identifier() {\n    return this.tryGetToken(SolidityParser.Identifier, 0);\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_identifier;\n  }\n  enterRule(listener) {\n    if (listener.enterIdentifier) {\n      listener.enterIdentifier(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitIdentifier) {\n      listener.exitIdentifier(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitIdentifier) {\n      return visitor.visitIdentifier(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar HexLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {\n  HexLiteralFragment(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.HexLiteralFragment);\n    } else {\n      return this.getToken(SolidityParser.HexLiteralFragment, i);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_hexLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterHexLiteral) {\n      listener.enterHexLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitHexLiteral) {\n      listener.exitHexLiteral(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitHexLiteral) {\n      return visitor.visitHexLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar OverrideSpecifierContext = class extends import_ParserRuleContext.ParserRuleContext {\n  userDefinedTypeName(i) {\n    if (i === void 0) {\n      return this.getRuleContexts(UserDefinedTypeNameContext);\n    } else {\n      return this.getRuleContext(i, UserDefinedTypeNameContext);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_overrideSpecifier;\n  }\n  enterRule(listener) {\n    if (listener.enterOverrideSpecifier) {\n      listener.enterOverrideSpecifier(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitOverrideSpecifier) {\n      listener.exitOverrideSpecifier(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitOverrideSpecifier) {\n      return visitor.visitOverrideSpecifier(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\nvar StringLiteralContext = class extends import_ParserRuleContext.ParserRuleContext {\n  StringLiteralFragment(i) {\n    if (i === void 0) {\n      return this.getTokens(SolidityParser.StringLiteralFragment);\n    } else {\n      return this.getToken(SolidityParser.StringLiteralFragment, i);\n    }\n  }\n  constructor(parent, invokingState) {\n    super(parent, invokingState);\n  }\n  get ruleIndex() {\n    return SolidityParser.RULE_stringLiteral;\n  }\n  enterRule(listener) {\n    if (listener.enterStringLiteral) {\n      listener.enterStringLiteral(this);\n    }\n  }\n  exitRule(listener) {\n    if (listener.exitStringLiteral) {\n      listener.exitStringLiteral(this);\n    }\n  }\n  accept(visitor) {\n    if (visitor.visitStringLiteral) {\n      return visitor.visitStringLiteral(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n};\n\n// src/ast-types.ts\nvar astNodeTypes = [\n  \"SourceUnit\",\n  \"PragmaDirective\",\n  \"ImportDirective\",\n  \"ContractDefinition\",\n  \"InheritanceSpecifier\",\n  \"StateVariableDeclaration\",\n  \"UsingForDeclaration\",\n  \"StructDefinition\",\n  \"ModifierDefinition\",\n  \"ModifierInvocation\",\n  \"FunctionDefinition\",\n  \"EventDefinition\",\n  \"CustomErrorDefinition\",\n  \"RevertStatement\",\n  \"EnumValue\",\n  \"EnumDefinition\",\n  \"VariableDeclaration\",\n  \"UserDefinedTypeName\",\n  \"Mapping\",\n  \"ArrayTypeName\",\n  \"FunctionTypeName\",\n  \"Block\",\n  \"ExpressionStatement\",\n  \"IfStatement\",\n  \"WhileStatement\",\n  \"ForStatement\",\n  \"InlineAssemblyStatement\",\n  \"DoWhileStatement\",\n  \"ContinueStatement\",\n  \"Break\",\n  \"Continue\",\n  \"BreakStatement\",\n  \"ReturnStatement\",\n  \"EmitStatement\",\n  \"ThrowStatement\",\n  \"VariableDeclarationStatement\",\n  \"ElementaryTypeName\",\n  \"FunctionCall\",\n  \"AssemblyBlock\",\n  \"AssemblyCall\",\n  \"AssemblyLocalDefinition\",\n  \"AssemblyAssignment\",\n  \"AssemblyStackAssignment\",\n  \"LabelDefinition\",\n  \"AssemblySwitch\",\n  \"AssemblyCase\",\n  \"AssemblyFunctionDefinition\",\n  \"AssemblyFunctionReturns\",\n  \"AssemblyFor\",\n  \"AssemblyIf\",\n  \"SubAssembly\",\n  \"TupleExpression\",\n  \"NameValueExpression\",\n  \"BooleanLiteral\",\n  \"NumberLiteral\",\n  \"Identifier\",\n  \"BinaryOperation\",\n  \"UnaryOperation\",\n  \"NewExpression\",\n  \"Conditional\",\n  \"StringLiteral\",\n  \"HexLiteral\",\n  \"HexNumber\",\n  \"DecimalNumber\",\n  \"MemberAccess\",\n  \"IndexAccess\",\n  \"IndexRangeAccess\",\n  \"NameValueList\",\n  \"UncheckedStatement\",\n  \"TryStatement\",\n  \"CatchClause\",\n  \"FileLevelConstant\",\n  \"AssemblyMemberAccess\",\n  \"TypeDefinition\"\n];\nvar binaryOpValues = [\n  \"+\",\n  \"-\",\n  \"*\",\n  \"/\",\n  \"**\",\n  \"%\",\n  \"<<\",\n  \">>\",\n  \"&&\",\n  \"||\",\n  \",,\",\n  \"&\",\n  \",\",\n  \"^\",\n  \"<\",\n  \">\",\n  \"<=\",\n  \">=\",\n  \"==\",\n  \"!=\",\n  \"=\",\n  \",=\",\n  \"^=\",\n  \"&=\",\n  \"<<=\",\n  \">>=\",\n  \"+=\",\n  \"-=\",\n  \"*=\",\n  \"/=\",\n  \"%=\",\n  \"|\",\n  \"|=\"\n];\nvar unaryOpValues = [\n  \"-\",\n  \"+\",\n  \"++\",\n  \"--\",\n  \"~\",\n  \"after\",\n  \"delete\",\n  \"!\"\n];\n\n// src/ASTBuilder.ts\nvar import_AbstractParseTreeVisitor = __toModule(require_AbstractParseTreeVisitor());\nvar import_ErrorNode = __toModule(require_ErrorNode());\nvar ASTBuilder = class extends import_AbstractParseTreeVisitor.AbstractParseTreeVisitor {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.result = null;\n  }\n  defaultResult() {\n    throw new Error(\"Unknown node\");\n  }\n  aggregateResult() {\n    return {type: \"\"};\n  }\n  visitSourceUnit(ctx) {\n    var _a;\n    const children = ((_a = ctx.children) != null ? _a : []).filter((x) => !(x instanceof import_ErrorNode.ErrorNode));\n    const node = {\n      type: \"SourceUnit\",\n      children: children.slice(0, -1).map((child) => this.visit(child))\n    };\n    const result = this._addMeta(node, ctx);\n    this.result = result;\n    return result;\n  }\n  visitContractPart(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitContractDefinition(ctx) {\n    const name = this._toText(ctx.identifier());\n    const kind = this._toText(ctx.getChild(0));\n    this._currentContract = name;\n    const node = {\n      type: \"ContractDefinition\",\n      name,\n      baseContracts: ctx.inheritanceSpecifier().map((x) => this.visitInheritanceSpecifier(x)),\n      subNodes: ctx.contractPart().map((x) => this.visit(x)),\n      kind\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitStateVariableDeclaration(ctx) {\n    const type = this.visitTypeName(ctx.typeName());\n    const iden = ctx.identifier();\n    const name = this._toText(iden);\n    let expression = null;\n    const ctxExpression = ctx.expression();\n    if (ctxExpression) {\n      expression = this.visitExpression(ctxExpression);\n    }\n    let visibility = \"default\";\n    if (ctx.InternalKeyword().length > 0) {\n      visibility = \"internal\";\n    } else if (ctx.PublicKeyword().length > 0) {\n      visibility = \"public\";\n    } else if (ctx.PrivateKeyword().length > 0) {\n      visibility = \"private\";\n    }\n    let isDeclaredConst = false;\n    if (ctx.ConstantKeyword().length > 0) {\n      isDeclaredConst = true;\n    }\n    let override;\n    const overrideSpecifier = ctx.overrideSpecifier();\n    if (overrideSpecifier.length === 0) {\n      override = null;\n    } else {\n      override = overrideSpecifier[0].userDefinedTypeName().map((x) => this.visitUserDefinedTypeName(x));\n    }\n    let isImmutable = false;\n    if (ctx.ImmutableKeyword().length > 0) {\n      isImmutable = true;\n    }\n    const decl = {\n      type: \"VariableDeclaration\",\n      typeName: type,\n      name,\n      identifier: this.visitIdentifier(iden),\n      expression,\n      visibility,\n      isStateVar: true,\n      isDeclaredConst,\n      isIndexed: false,\n      isImmutable,\n      override,\n      storageLocation: null\n    };\n    const node = {\n      type: \"StateVariableDeclaration\",\n      variables: [this._addMeta(decl, ctx)],\n      initialValue: expression\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitVariableDeclaration(ctx) {\n    let storageLocation = null;\n    const ctxStorageLocation = ctx.storageLocation();\n    if (ctxStorageLocation) {\n      storageLocation = this._toText(ctxStorageLocation);\n    }\n    const identifierCtx = ctx.identifier();\n    const node = {\n      type: \"VariableDeclaration\",\n      typeName: this.visitTypeName(ctx.typeName()),\n      name: this._toText(identifierCtx),\n      identifier: this.visitIdentifier(identifierCtx),\n      storageLocation,\n      isStateVar: false,\n      isIndexed: false,\n      expression: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitVariableDeclarationStatement(ctx) {\n    let variables = [];\n    const ctxVariableDeclaration = ctx.variableDeclaration();\n    const ctxIdentifierList = ctx.identifierList();\n    const ctxVariableDeclarationList = ctx.variableDeclarationList();\n    if (ctxVariableDeclaration !== void 0) {\n      variables = [this.visitVariableDeclaration(ctxVariableDeclaration)];\n    } else if (ctxIdentifierList !== void 0) {\n      variables = this.buildIdentifierList(ctxIdentifierList);\n    } else if (ctxVariableDeclarationList) {\n      variables = this.buildVariableDeclarationList(ctxVariableDeclarationList);\n    }\n    let initialValue = null;\n    const ctxExpression = ctx.expression();\n    if (ctxExpression) {\n      initialValue = this.visitExpression(ctxExpression);\n    }\n    const node = {\n      type: \"VariableDeclarationStatement\",\n      variables,\n      initialValue\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitStatement(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitSimpleStatement(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitEventDefinition(ctx) {\n    const parameters = ctx.eventParameterList().eventParameter().map((paramCtx) => {\n      const type = this.visitTypeName(paramCtx.typeName());\n      let name = null;\n      const paramCtxIdentifier = paramCtx.identifier();\n      if (paramCtxIdentifier) {\n        name = this._toText(paramCtxIdentifier);\n      }\n      const node2 = {\n        type: \"VariableDeclaration\",\n        typeName: type,\n        name,\n        identifier: paramCtxIdentifier !== void 0 ? this.visitIdentifier(paramCtxIdentifier) : null,\n        isStateVar: false,\n        isIndexed: paramCtx.IndexedKeyword() !== void 0,\n        storageLocation: null,\n        expression: null\n      };\n      return this._addMeta(node2, paramCtx);\n    });\n    const node = {\n      type: \"EventDefinition\",\n      name: this._toText(ctx.identifier()),\n      parameters,\n      isAnonymous: ctx.AnonymousKeyword() !== void 0\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitBlock(ctx) {\n    const node = {\n      type: \"Block\",\n      statements: ctx.statement().map((x) => this.visitStatement(x))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitParameter(ctx) {\n    let storageLocation = null;\n    const ctxStorageLocation = ctx.storageLocation();\n    if (ctxStorageLocation !== void 0) {\n      storageLocation = this._toText(ctxStorageLocation);\n    }\n    let name = null;\n    const ctxIdentifier = ctx.identifier();\n    if (ctxIdentifier !== void 0) {\n      name = this._toText(ctxIdentifier);\n    }\n    const node = {\n      type: \"VariableDeclaration\",\n      typeName: this.visitTypeName(ctx.typeName()),\n      name,\n      identifier: ctxIdentifier !== void 0 ? this.visitIdentifier(ctxIdentifier) : null,\n      storageLocation,\n      isStateVar: false,\n      isIndexed: false,\n      expression: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionDefinition(ctx) {\n    let isConstructor = false;\n    let isFallback = false;\n    let isReceiveEther = false;\n    let isVirtual = false;\n    let name = null;\n    let parameters = [];\n    let returnParameters = null;\n    let visibility = \"default\";\n    let block = null;\n    const ctxBlock = ctx.block();\n    if (ctxBlock !== void 0) {\n      block = this.visitBlock(ctxBlock);\n    }\n    const modifiers = ctx.modifierList().modifierInvocation().map((mod) => this.visitModifierInvocation(mod));\n    let stateMutability = null;\n    if (ctx.modifierList().stateMutability().length > 0) {\n      stateMutability = this._stateMutabilityToText(ctx.modifierList().stateMutability(0));\n    }\n    const ctxReturnParameters = ctx.returnParameters();\n    switch (this._toText(ctx.functionDescriptor().getChild(0))) {\n      case \"constructor\":\n        parameters = ctx.parameterList().parameter().map((x) => this.visit(x));\n        if (ctx.modifierList().InternalKeyword().length > 0) {\n          visibility = \"internal\";\n        } else if (ctx.modifierList().PublicKeyword().length > 0) {\n          visibility = \"public\";\n        } else {\n          visibility = \"default\";\n        }\n        isConstructor = true;\n        break;\n      case \"fallback\":\n        parameters = ctx.parameterList().parameter().map((x) => this.visit(x));\n        returnParameters = ctxReturnParameters !== void 0 ? this.visitReturnParameters(ctxReturnParameters) : null;\n        visibility = \"external\";\n        isFallback = true;\n        break;\n      case \"receive\":\n        visibility = \"external\";\n        isReceiveEther = true;\n        break;\n      case \"function\": {\n        const identifier = ctx.functionDescriptor().identifier();\n        name = identifier !== void 0 ? this._toText(identifier) : \"\";\n        parameters = ctx.parameterList().parameter().map((x) => this.visit(x));\n        returnParameters = ctxReturnParameters !== void 0 ? this.visitReturnParameters(ctxReturnParameters) : null;\n        if (ctx.modifierList().ExternalKeyword().length > 0) {\n          visibility = \"external\";\n        } else if (ctx.modifierList().InternalKeyword().length > 0) {\n          visibility = \"internal\";\n        } else if (ctx.modifierList().PublicKeyword().length > 0) {\n          visibility = \"public\";\n        } else if (ctx.modifierList().PrivateKeyword().length > 0) {\n          visibility = \"private\";\n        }\n        isConstructor = name === this._currentContract;\n        isFallback = name === \"\";\n        break;\n      }\n    }\n    if (ctx.modifierList().VirtualKeyword().length > 0) {\n      isVirtual = true;\n    }\n    let override;\n    const overrideSpecifier = ctx.modifierList().overrideSpecifier();\n    if (overrideSpecifier.length === 0) {\n      override = null;\n    } else {\n      override = overrideSpecifier[0].userDefinedTypeName().map((x) => this.visitUserDefinedTypeName(x));\n    }\n    const node = {\n      type: \"FunctionDefinition\",\n      name,\n      parameters,\n      returnParameters,\n      body: block,\n      visibility,\n      modifiers,\n      override,\n      isConstructor,\n      isReceiveEther,\n      isFallback,\n      isVirtual,\n      stateMutability\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitEnumDefinition(ctx) {\n    const node = {\n      type: \"EnumDefinition\",\n      name: this._toText(ctx.identifier()),\n      members: ctx.enumValue().map((x) => this.visitEnumValue(x))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitEnumValue(ctx) {\n    const node = {\n      type: \"EnumValue\",\n      name: this._toText(ctx.identifier())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitElementaryTypeName(ctx) {\n    const node = {\n      type: \"ElementaryTypeName\",\n      name: this._toText(ctx),\n      stateMutability: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitIdentifier(ctx) {\n    const node = {\n      type: \"Identifier\",\n      name: this._toText(ctx)\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitTypeName(ctx) {\n    var _a;\n    if (ctx.children !== void 0 && ctx.children.length > 2) {\n      let length = null;\n      if (ctx.children.length === 4) {\n        const expression = ctx.expression();\n        if (expression === void 0) {\n          throw new Error(\"Assertion error: a typeName with 4 children should have an expression\");\n        }\n        length = this.visitExpression(expression);\n      }\n      const ctxTypeName = ctx.typeName();\n      const node = {\n        type: \"ArrayTypeName\",\n        baseTypeName: this.visitTypeName(ctxTypeName),\n        length\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (((_a = ctx.children) == null ? void 0 : _a.length) === 2) {\n      const node = {\n        type: \"ElementaryTypeName\",\n        name: this._toText(ctx.getChild(0)),\n        stateMutability: this._toText(ctx.getChild(1))\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.elementaryTypeName() !== void 0) {\n      return this.visitElementaryTypeName(ctx.elementaryTypeName());\n    }\n    if (ctx.userDefinedTypeName() !== void 0) {\n      return this.visitUserDefinedTypeName(ctx.userDefinedTypeName());\n    }\n    if (ctx.mapping() !== void 0) {\n      return this.visitMapping(ctx.mapping());\n    }\n    if (ctx.functionTypeName() !== void 0) {\n      return this.visitFunctionTypeName(ctx.functionTypeName());\n    }\n    throw new Error(\"Assertion error: unhandled type name case\");\n  }\n  visitUserDefinedTypeName(ctx) {\n    const node = {\n      type: \"UserDefinedTypeName\",\n      namePath: this._toText(ctx)\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitUsingForDeclaration(ctx) {\n    let typeName = null;\n    const ctxTypeName = ctx.typeName();\n    if (ctxTypeName !== void 0) {\n      typeName = this.visitTypeName(ctxTypeName);\n    }\n    const isGlobal = ctx.GlobalKeyword() !== void 0;\n    let node;\n    const usingForObject = ctx.usingForObject();\n    const firstChild = this._toText(usingForObject.getChild(0));\n    if (firstChild === \"{\") {\n      node = {\n        type: \"UsingForDeclaration\",\n        isGlobal,\n        typeName,\n        libraryName: null,\n        functions: usingForObject.userDefinedTypeName().map((x) => this._toText(x))\n      };\n    } else {\n      node = {\n        type: \"UsingForDeclaration\",\n        isGlobal,\n        typeName,\n        libraryName: this._toText(usingForObject.userDefinedTypeName(0)),\n        functions: []\n      };\n    }\n    return this._addMeta(node, ctx);\n  }\n  visitPragmaDirective(ctx) {\n    const versionContext = ctx.pragmaValue().version();\n    let value = this._toText(ctx.pragmaValue());\n    if ((versionContext == null ? void 0 : versionContext.children) !== void 0) {\n      value = versionContext.children.map((x) => this._toText(x)).join(\" \");\n    }\n    const node = {\n      type: \"PragmaDirective\",\n      name: this._toText(ctx.pragmaName()),\n      value\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitInheritanceSpecifier(ctx) {\n    const exprList = ctx.expressionList();\n    const args = exprList !== void 0 ? exprList.expression().map((x) => this.visitExpression(x)) : [];\n    const node = {\n      type: \"InheritanceSpecifier\",\n      baseName: this.visitUserDefinedTypeName(ctx.userDefinedTypeName()),\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitModifierInvocation(ctx) {\n    const exprList = ctx.expressionList();\n    let args;\n    if (exprList != null) {\n      args = exprList.expression().map((x) => this.visit(x));\n    } else if (ctx.children !== void 0 && ctx.children.length > 1) {\n      args = [];\n    } else {\n      args = null;\n    }\n    const node = {\n      type: \"ModifierInvocation\",\n      name: this._toText(ctx.identifier()),\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionTypeName(ctx) {\n    const parameterTypes = ctx.functionTypeParameterList(0).functionTypeParameter().map((typeCtx) => this.visitFunctionTypeParameter(typeCtx));\n    let returnTypes = [];\n    if (ctx.functionTypeParameterList().length > 1) {\n      returnTypes = ctx.functionTypeParameterList(1).functionTypeParameter().map((typeCtx) => this.visitFunctionTypeParameter(typeCtx));\n    }\n    let visibility = \"default\";\n    if (ctx.InternalKeyword().length > 0) {\n      visibility = \"internal\";\n    } else if (ctx.ExternalKeyword().length > 0) {\n      visibility = \"external\";\n    }\n    let stateMutability = null;\n    if (ctx.stateMutability().length > 0) {\n      stateMutability = this._toText(ctx.stateMutability(0));\n    }\n    const node = {\n      type: \"FunctionTypeName\",\n      parameterTypes,\n      returnTypes,\n      visibility,\n      stateMutability\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionTypeParameter(ctx) {\n    let storageLocation = null;\n    if (ctx.storageLocation()) {\n      storageLocation = this._toText(ctx.storageLocation());\n    }\n    const node = {\n      type: \"VariableDeclaration\",\n      typeName: this.visitTypeName(ctx.typeName()),\n      name: null,\n      identifier: null,\n      storageLocation,\n      isStateVar: false,\n      isIndexed: false,\n      expression: null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitThrowStatement(ctx) {\n    const node = {\n      type: \"ThrowStatement\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitReturnStatement(ctx) {\n    let expression = null;\n    const ctxExpression = ctx.expression();\n    if (ctxExpression) {\n      expression = this.visitExpression(ctxExpression);\n    }\n    const node = {\n      type: \"ReturnStatement\",\n      expression\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitEmitStatement(ctx) {\n    const node = {\n      type: \"EmitStatement\",\n      eventCall: this.visitFunctionCall(ctx.functionCall())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitCustomErrorDefinition(ctx) {\n    const node = {\n      type: \"CustomErrorDefinition\",\n      name: this._toText(ctx.identifier()),\n      parameters: this.visitParameterList(ctx.parameterList())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitTypeDefinition(ctx) {\n    const node = {\n      type: \"TypeDefinition\",\n      name: this._toText(ctx.identifier()),\n      definition: this.visitElementaryTypeName(ctx.elementaryTypeName())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitRevertStatement(ctx) {\n    const node = {\n      type: \"RevertStatement\",\n      revertCall: this.visitFunctionCall(ctx.functionCall())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFunctionCall(ctx) {\n    let args = [];\n    const names = [];\n    const identifiers = [];\n    const ctxArgs = ctx.functionCallArguments();\n    const ctxArgsExpressionList = ctxArgs.expressionList();\n    const ctxArgsNameValueList = ctxArgs.nameValueList();\n    if (ctxArgsExpressionList) {\n      args = ctxArgsExpressionList.expression().map((exprCtx) => this.visitExpression(exprCtx));\n    } else if (ctxArgsNameValueList) {\n      for (const nameValue of ctxArgsNameValueList.nameValue()) {\n        args.push(this.visitExpression(nameValue.expression()));\n        names.push(this._toText(nameValue.identifier()));\n        identifiers.push(this.visitIdentifier(nameValue.identifier()));\n      }\n    }\n    const node = {\n      type: \"FunctionCall\",\n      expression: this.visitExpression(ctx.expression()),\n      arguments: args,\n      names,\n      identifiers\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitStructDefinition(ctx) {\n    const node = {\n      type: \"StructDefinition\",\n      name: this._toText(ctx.identifier()),\n      members: ctx.variableDeclaration().map((x) => this.visitVariableDeclaration(x))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitWhileStatement(ctx) {\n    const node = {\n      type: \"WhileStatement\",\n      condition: this.visitExpression(ctx.expression()),\n      body: this.visitStatement(ctx.statement())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitDoWhileStatement(ctx) {\n    const node = {\n      type: \"DoWhileStatement\",\n      condition: this.visitExpression(ctx.expression()),\n      body: this.visitStatement(ctx.statement())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitIfStatement(ctx) {\n    const trueBody = this.visitStatement(ctx.statement(0));\n    let falseBody = null;\n    if (ctx.statement().length > 1) {\n      falseBody = this.visitStatement(ctx.statement(1));\n    }\n    const node = {\n      type: \"IfStatement\",\n      condition: this.visitExpression(ctx.expression()),\n      trueBody,\n      falseBody\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitTryStatement(ctx) {\n    let returnParameters = null;\n    const ctxReturnParameters = ctx.returnParameters();\n    if (ctxReturnParameters !== void 0) {\n      returnParameters = this.visitReturnParameters(ctxReturnParameters);\n    }\n    const catchClauses = ctx.catchClause().map((exprCtx) => this.visitCatchClause(exprCtx));\n    const node = {\n      type: \"TryStatement\",\n      expression: this.visitExpression(ctx.expression()),\n      returnParameters,\n      body: this.visitBlock(ctx.block()),\n      catchClauses\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitCatchClause(ctx) {\n    let parameters = null;\n    if (ctx.parameterList()) {\n      parameters = this.visitParameterList(ctx.parameterList());\n    }\n    if (ctx.identifier() && this._toText(ctx.identifier()) !== \"Error\" && this._toText(ctx.identifier()) !== \"Panic\") {\n      throw new Error('Expected \"Error\" or \"Panic\" identifier in catch clause');\n    }\n    let kind = null;\n    const ctxIdentifier = ctx.identifier();\n    if (ctxIdentifier !== void 0) {\n      kind = this._toText(ctxIdentifier);\n    }\n    const node = {\n      type: \"CatchClause\",\n      isReasonStringType: kind === \"Error\",\n      kind,\n      parameters,\n      body: this.visitBlock(ctx.block())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitExpressionStatement(ctx) {\n    if (!ctx) {\n      return null;\n    }\n    const node = {\n      type: \"ExpressionStatement\",\n      expression: this.visitExpression(ctx.expression())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitNumberLiteral(ctx) {\n    var _a;\n    const number = this._toText(ctx.getChild(0));\n    let subdenomination = null;\n    if (((_a = ctx.children) == null ? void 0 : _a.length) === 2) {\n      subdenomination = this._toText(ctx.getChild(1));\n    }\n    const node = {\n      type: \"NumberLiteral\",\n      number,\n      subdenomination\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitMappingKey(ctx) {\n    if (ctx.elementaryTypeName()) {\n      return this.visitElementaryTypeName(ctx.elementaryTypeName());\n    } else if (ctx.userDefinedTypeName()) {\n      return this.visitUserDefinedTypeName(ctx.userDefinedTypeName());\n    } else {\n      throw new Error(\"Expected MappingKey to have either elementaryTypeName or userDefinedTypeName\");\n    }\n  }\n  visitMapping(ctx) {\n    const node = {\n      type: \"Mapping\",\n      keyType: this.visitMappingKey(ctx.mappingKey()),\n      valueType: this.visitTypeName(ctx.typeName())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitModifierDefinition(ctx) {\n    let parameters = null;\n    if (ctx.parameterList()) {\n      parameters = this.visitParameterList(ctx.parameterList());\n    }\n    let isVirtual = false;\n    if (ctx.VirtualKeyword().length > 0) {\n      isVirtual = true;\n    }\n    let override;\n    const overrideSpecifier = ctx.overrideSpecifier();\n    if (overrideSpecifier.length === 0) {\n      override = null;\n    } else {\n      override = overrideSpecifier[0].userDefinedTypeName().map((x) => this.visitUserDefinedTypeName(x));\n    }\n    let body = null;\n    const blockCtx = ctx.block();\n    if (blockCtx !== void 0) {\n      body = this.visitBlock(blockCtx);\n    }\n    const node = {\n      type: \"ModifierDefinition\",\n      name: this._toText(ctx.identifier()),\n      parameters,\n      body,\n      isVirtual,\n      override\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitUncheckedStatement(ctx) {\n    const node = {\n      type: \"UncheckedStatement\",\n      block: this.visitBlock(ctx.block())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitExpression(ctx) {\n    let op;\n    switch (ctx.children.length) {\n      case 1: {\n        const primaryExpressionCtx = ctx.tryGetRuleContext(0, PrimaryExpressionContext);\n        if (primaryExpressionCtx === void 0) {\n          throw new Error(\"Assertion error: primary expression should exist when children length is 1\");\n        }\n        return this.visitPrimaryExpression(primaryExpressionCtx);\n      }\n      case 2:\n        op = this._toText(ctx.getChild(0));\n        if (op === \"new\") {\n          const node = {\n            type: \"NewExpression\",\n            typeName: this.visitTypeName(ctx.typeName())\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (unaryOpValues.includes(op)) {\n          const node = {\n            type: \"UnaryOperation\",\n            operator: op,\n            subExpression: this.visitExpression(ctx.getRuleContext(0, ExpressionContext)),\n            isPrefix: true\n          };\n          return this._addMeta(node, ctx);\n        }\n        op = this._toText(ctx.getChild(1));\n        if ([\"++\", \"--\"].includes(op)) {\n          const node = {\n            type: \"UnaryOperation\",\n            operator: op,\n            subExpression: this.visitExpression(ctx.getRuleContext(0, ExpressionContext)),\n            isPrefix: false\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 3:\n        if (this._toText(ctx.getChild(0)) === \"(\" && this._toText(ctx.getChild(2)) === \")\") {\n          const node = {\n            type: \"TupleExpression\",\n            components: [\n              this.visitExpression(ctx.getRuleContext(0, ExpressionContext))\n            ],\n            isArray: false\n          };\n          return this._addMeta(node, ctx);\n        }\n        op = this._toText(ctx.getChild(1));\n        if (op === \".\") {\n          const node = {\n            type: \"MemberAccess\",\n            expression: this.visitExpression(ctx.expression(0)),\n            memberName: this._toText(ctx.identifier())\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (isBinOp(op)) {\n          const node = {\n            type: \"BinaryOperation\",\n            operator: op,\n            left: this.visitExpression(ctx.expression(0)),\n            right: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 4:\n        if (this._toText(ctx.getChild(1)) === \"(\" && this._toText(ctx.getChild(3)) === \")\") {\n          let args = [];\n          const names = [];\n          const identifiers = [];\n          const ctxArgs = ctx.functionCallArguments();\n          if (ctxArgs.expressionList()) {\n            args = ctxArgs.expressionList().expression().map((exprCtx) => this.visitExpression(exprCtx));\n          } else if (ctxArgs.nameValueList()) {\n            for (const nameValue of ctxArgs.nameValueList().nameValue()) {\n              args.push(this.visitExpression(nameValue.expression()));\n              names.push(this._toText(nameValue.identifier()));\n              identifiers.push(this.visitIdentifier(nameValue.identifier()));\n            }\n          }\n          const node = {\n            type: \"FunctionCall\",\n            expression: this.visitExpression(ctx.expression(0)),\n            arguments: args,\n            names,\n            identifiers\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(3)) === \"]\") {\n          if (ctx.getChild(2).text === \":\") {\n            const node2 = {\n              type: \"IndexRangeAccess\",\n              base: this.visitExpression(ctx.expression(0))\n            };\n            return this._addMeta(node2, ctx);\n          }\n          const node = {\n            type: \"IndexAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            index: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (this._toText(ctx.getChild(1)) === \"{\" && this._toText(ctx.getChild(3)) === \"}\") {\n          const node = {\n            type: \"NameValueExpression\",\n            expression: this.visitExpression(ctx.expression(0)),\n            arguments: this.visitNameValueList(ctx.nameValueList())\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 5:\n        if (this._toText(ctx.getChild(1)) === \"?\" && this._toText(ctx.getChild(3)) === \":\") {\n          const node = {\n            type: \"Conditional\",\n            condition: this.visitExpression(ctx.expression(0)),\n            trueExpression: this.visitExpression(ctx.expression(1)),\n            falseExpression: this.visitExpression(ctx.expression(2))\n          };\n          return this._addMeta(node, ctx);\n        }\n        if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(2)) === \":\" && this._toText(ctx.getChild(4)) === \"]\") {\n          const node = {\n            type: \"IndexRangeAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            indexEnd: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        } else if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(3)) === \":\" && this._toText(ctx.getChild(4)) === \"]\") {\n          const node = {\n            type: \"IndexRangeAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            indexStart: this.visitExpression(ctx.expression(1))\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n      case 6:\n        if (this._toText(ctx.getChild(1)) === \"[\" && this._toText(ctx.getChild(3)) === \":\" && this._toText(ctx.getChild(5)) === \"]\") {\n          const node = {\n            type: \"IndexRangeAccess\",\n            base: this.visitExpression(ctx.expression(0)),\n            indexStart: this.visitExpression(ctx.expression(1)),\n            indexEnd: this.visitExpression(ctx.expression(2))\n          };\n          return this._addMeta(node, ctx);\n        }\n        break;\n    }\n    throw new Error(\"Unrecognized expression\");\n  }\n  visitNameValueList(ctx) {\n    const names = [];\n    const identifiers = [];\n    const args = [];\n    for (const nameValue of ctx.nameValue()) {\n      names.push(this._toText(nameValue.identifier()));\n      identifiers.push(this.visitIdentifier(nameValue.identifier()));\n      args.push(this.visitExpression(nameValue.expression()));\n    }\n    const node = {\n      type: \"NameValueList\",\n      names,\n      identifiers,\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitFileLevelConstant(ctx) {\n    const type = this.visitTypeName(ctx.typeName());\n    const iden = ctx.identifier();\n    const name = this._toText(iden);\n    const expression = this.visitExpression(ctx.expression());\n    const node = {\n      type: \"FileLevelConstant\",\n      typeName: type,\n      name,\n      initialValue: expression,\n      isDeclaredConst: true,\n      isImmutable: false\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitForStatement(ctx) {\n    let conditionExpression = this.visitExpressionStatement(ctx.expressionStatement());\n    if (conditionExpression) {\n      conditionExpression = conditionExpression.expression;\n    }\n    const node = {\n      type: \"ForStatement\",\n      initExpression: ctx.simpleStatement() ? this.visitSimpleStatement(ctx.simpleStatement()) : null,\n      conditionExpression,\n      loopExpression: {\n        type: \"ExpressionStatement\",\n        expression: ctx.expression() !== void 0 ? this.visitExpression(ctx.expression()) : null\n      },\n      body: this.visitStatement(ctx.statement())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitHexLiteral(ctx) {\n    const parts = ctx.HexLiteralFragment().map((x) => this._toText(x)).map((x) => x.substring(4, x.length - 1));\n    const node = {\n      type: \"HexLiteral\",\n      value: parts.join(\"\"),\n      parts\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitPrimaryExpression(ctx) {\n    if (ctx.BooleanLiteral()) {\n      const node = {\n        type: \"BooleanLiteral\",\n        value: this._toText(ctx.BooleanLiteral()) === \"true\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.hexLiteral()) {\n      return this.visitHexLiteral(ctx.hexLiteral());\n    }\n    if (ctx.stringLiteral()) {\n      const fragments = ctx.stringLiteral().StringLiteralFragment().map((stringLiteralFragmentCtx) => {\n        let text = this._toText(stringLiteralFragmentCtx);\n        const isUnicode = text.slice(0, 7) === \"unicode\";\n        if (isUnicode) {\n          text = text.slice(7);\n        }\n        const singleQuotes = text[0] === \"'\";\n        const textWithoutQuotes = text.substring(1, text.length - 1);\n        const value = singleQuotes ? textWithoutQuotes.replace(new RegExp(\"\\\\\\\\'\", \"g\"), \"'\") : textWithoutQuotes.replace(new RegExp('\\\\\\\\\"', \"g\"), '\"');\n        return {value, isUnicode};\n      });\n      const parts = fragments.map((x) => x.value);\n      const node = {\n        type: \"StringLiteral\",\n        value: parts.join(\"\"),\n        parts,\n        isUnicode: fragments.map((x) => x.isUnicode)\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.numberLiteral()) {\n      return this.visitNumberLiteral(ctx.numberLiteral());\n    }\n    if (ctx.TypeKeyword()) {\n      const node = {\n        type: \"Identifier\",\n        name: \"type\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.typeName()) {\n      return this.visitTypeName(ctx.typeName());\n    }\n    return this.visit(ctx.getChild(0));\n  }\n  visitTupleExpression(ctx) {\n    const children = ctx.children.slice(1, -1);\n    const components = this._mapCommasToNulls(children).map((expr) => {\n      if (expr === null) {\n        return null;\n      }\n      return this.visit(expr);\n    });\n    const node = {\n      type: \"TupleExpression\",\n      components,\n      isArray: this._toText(ctx.getChild(0)) === \"[\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  buildIdentifierList(ctx) {\n    const children = ctx.children.slice(1, -1);\n    const identifiers = ctx.identifier();\n    let i = 0;\n    return this._mapCommasToNulls(children).map((idenOrNull) => {\n      if (!idenOrNull) {\n        return null;\n      }\n      const iden = identifiers[i];\n      i++;\n      const node = {\n        type: \"VariableDeclaration\",\n        name: this._toText(iden),\n        identifier: this.visitIdentifier(iden),\n        isStateVar: false,\n        isIndexed: false,\n        typeName: null,\n        storageLocation: null,\n        expression: null\n      };\n      return this._addMeta(node, iden);\n    });\n  }\n  buildVariableDeclarationList(ctx) {\n    var _a;\n    const variableDeclarations = ctx.variableDeclaration();\n    let i = 0;\n    return this._mapCommasToNulls((_a = ctx.children) != null ? _a : []).map((declOrNull) => {\n      if (!declOrNull) {\n        return null;\n      }\n      const decl = variableDeclarations[i];\n      i++;\n      let storageLocation = null;\n      if (decl.storageLocation()) {\n        storageLocation = this._toText(decl.storageLocation());\n      }\n      const identifierCtx = decl.identifier();\n      const result = {\n        type: \"VariableDeclaration\",\n        name: this._toText(identifierCtx),\n        identifier: this.visitIdentifier(identifierCtx),\n        typeName: this.visitTypeName(decl.typeName()),\n        storageLocation,\n        isStateVar: false,\n        isIndexed: false,\n        expression: null\n      };\n      return this._addMeta(result, decl);\n    });\n  }\n  visitImportDirective(ctx) {\n    const pathString = this._toText(ctx.importPath());\n    let unitAlias = null;\n    let unitAliasIdentifier = null;\n    let symbolAliases = null;\n    let symbolAliasesIdentifiers = null;\n    if (ctx.importDeclaration().length > 0) {\n      symbolAliases = ctx.importDeclaration().map((decl) => {\n        const symbol = this._toText(decl.identifier(0));\n        let alias = null;\n        if (decl.identifier().length > 1) {\n          alias = this._toText(decl.identifier(1));\n        }\n        return [symbol, alias];\n      });\n      symbolAliasesIdentifiers = ctx.importDeclaration().map((decl) => {\n        const symbolIdentifier = this.visitIdentifier(decl.identifier(0));\n        let aliasIdentifier = null;\n        if (decl.identifier().length > 1) {\n          aliasIdentifier = this.visitIdentifier(decl.identifier(1));\n        }\n        return [symbolIdentifier, aliasIdentifier];\n      });\n    } else {\n      const identifierCtxList = ctx.identifier();\n      if (identifierCtxList.length === 0) {\n      } else if (identifierCtxList.length === 1) {\n        const aliasIdentifierCtx = ctx.identifier(0);\n        unitAlias = this._toText(aliasIdentifierCtx);\n        unitAliasIdentifier = this.visitIdentifier(aliasIdentifierCtx);\n      } else if (identifierCtxList.length === 2) {\n        const aliasIdentifierCtx = ctx.identifier(1);\n        unitAlias = this._toText(aliasIdentifierCtx);\n        unitAliasIdentifier = this.visitIdentifier(aliasIdentifierCtx);\n      } else {\n        throw new Error(\"Assertion error: an import should have one or two identifiers\");\n      }\n    }\n    const path = pathString.substring(1, pathString.length - 1);\n    const pathLiteral = {\n      type: \"StringLiteral\",\n      value: path,\n      parts: [path],\n      isUnicode: [false]\n    };\n    const node = {\n      type: \"ImportDirective\",\n      path,\n      pathLiteral: this._addMeta(pathLiteral, ctx.importPath()),\n      unitAlias,\n      unitAliasIdentifier,\n      symbolAliases,\n      symbolAliasesIdentifiers\n    };\n    return this._addMeta(node, ctx);\n  }\n  buildEventParameterList(ctx) {\n    return ctx.eventParameter().map((paramCtx) => {\n      const type = this.visit(paramCtx.typeName());\n      let name = null;\n      if (paramCtx.identifier()) {\n        name = this._toText(paramCtx.identifier());\n      }\n      return {\n        type: \"VariableDeclaration\",\n        typeName: type,\n        name,\n        isStateVar: false,\n        isIndexed: !!paramCtx.IndexedKeyword(0)\n      };\n    });\n  }\n  visitReturnParameters(ctx) {\n    return this.visitParameterList(ctx.parameterList());\n  }\n  visitParameterList(ctx) {\n    return ctx.parameter().map((paramCtx) => this.visitParameter(paramCtx));\n  }\n  visitInlineAssemblyStatement(ctx) {\n    let language = null;\n    if (ctx.StringLiteralFragment()) {\n      language = this._toText(ctx.StringLiteralFragment());\n      language = language.substring(1, language.length - 1);\n    }\n    const flags = [];\n    const flag = ctx.inlineAssemblyStatementFlag();\n    if (flag !== void 0) {\n      const flagString = this._toText(flag.stringLiteral());\n      flags.push(flagString.slice(1, flagString.length - 1));\n    }\n    const node = {\n      type: \"InlineAssemblyStatement\",\n      language,\n      flags,\n      body: this.visitAssemblyBlock(ctx.assemblyBlock())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyBlock(ctx) {\n    const operations = ctx.assemblyItem().map((item) => this.visitAssemblyItem(item));\n    const node = {\n      type: \"AssemblyBlock\",\n      operations\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyItem(ctx) {\n    let text;\n    if (ctx.hexLiteral()) {\n      return this.visitHexLiteral(ctx.hexLiteral());\n    }\n    if (ctx.stringLiteral()) {\n      text = this._toText(ctx.stringLiteral());\n      const value = text.substring(1, text.length - 1);\n      const node = {\n        type: \"StringLiteral\",\n        value,\n        parts: [value],\n        isUnicode: [false]\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.BreakKeyword()) {\n      const node = {\n        type: \"Break\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.ContinueKeyword()) {\n      const node = {\n        type: \"Continue\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    return this.visit(ctx.getChild(0));\n  }\n  visitAssemblyExpression(ctx) {\n    return this.visit(ctx.getChild(0));\n  }\n  visitAssemblyCall(ctx) {\n    const functionName = this._toText(ctx.getChild(0));\n    const args = ctx.assemblyExpression().map((assemblyExpr) => this.visitAssemblyExpression(assemblyExpr));\n    const node = {\n      type: \"AssemblyCall\",\n      functionName,\n      arguments: args\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyLiteral(ctx) {\n    let text;\n    if (ctx.stringLiteral()) {\n      text = this._toText(ctx);\n      const value = text.substring(1, text.length - 1);\n      const node = {\n        type: \"StringLiteral\",\n        value,\n        parts: [value],\n        isUnicode: [false]\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.BooleanLiteral()) {\n      const node = {\n        type: \"BooleanLiteral\",\n        value: this._toText(ctx.BooleanLiteral()) === \"true\"\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.DecimalNumber()) {\n      const node = {\n        type: \"DecimalNumber\",\n        value: this._toText(ctx)\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.HexNumber()) {\n      const node = {\n        type: \"HexNumber\",\n        value: this._toText(ctx)\n      };\n      return this._addMeta(node, ctx);\n    }\n    if (ctx.hexLiteral()) {\n      return this.visitHexLiteral(ctx.hexLiteral());\n    }\n    throw new Error(\"Should never reach here\");\n  }\n  visitAssemblySwitch(ctx) {\n    const node = {\n      type: \"AssemblySwitch\",\n      expression: this.visitAssemblyExpression(ctx.assemblyExpression()),\n      cases: ctx.assemblyCase().map((c) => this.visitAssemblyCase(c))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyCase(ctx) {\n    let value = null;\n    if (this._toText(ctx.getChild(0)) === \"case\") {\n      value = this.visitAssemblyLiteral(ctx.assemblyLiteral());\n    }\n    const node = {\n      type: \"AssemblyCase\",\n      block: this.visitAssemblyBlock(ctx.assemblyBlock()),\n      value,\n      default: value === null\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyLocalDefinition(ctx) {\n    const ctxAssemblyIdentifierOrList = ctx.assemblyIdentifierOrList();\n    let names;\n    if (ctxAssemblyIdentifierOrList.identifier()) {\n      names = [this.visitIdentifier(ctxAssemblyIdentifierOrList.identifier())];\n    } else if (ctxAssemblyIdentifierOrList.assemblyMember()) {\n      names = [\n        this.visitAssemblyMember(ctxAssemblyIdentifierOrList.assemblyMember())\n      ];\n    } else {\n      names = ctxAssemblyIdentifierOrList.assemblyIdentifierList().identifier().map((x) => this.visitIdentifier(x));\n    }\n    let expression = null;\n    if (ctx.assemblyExpression() !== void 0) {\n      expression = this.visitAssemblyExpression(ctx.assemblyExpression());\n    }\n    const node = {\n      type: \"AssemblyLocalDefinition\",\n      names,\n      expression\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyFunctionDefinition(ctx) {\n    const ctxAssemblyIdentifierList = ctx.assemblyIdentifierList();\n    const args = ctxAssemblyIdentifierList !== void 0 ? ctxAssemblyIdentifierList.identifier().map((x) => this.visitIdentifier(x)) : [];\n    const ctxAssemblyFunctionReturns = ctx.assemblyFunctionReturns();\n    const returnArgs = ctxAssemblyFunctionReturns ? ctxAssemblyFunctionReturns.assemblyIdentifierList().identifier().map((x) => this.visitIdentifier(x)) : [];\n    const node = {\n      type: \"AssemblyFunctionDefinition\",\n      name: this._toText(ctx.identifier()),\n      arguments: args,\n      returnArguments: returnArgs,\n      body: this.visitAssemblyBlock(ctx.assemblyBlock())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyAssignment(ctx) {\n    const ctxAssemblyIdentifierOrList = ctx.assemblyIdentifierOrList();\n    let names;\n    if (ctxAssemblyIdentifierOrList.identifier()) {\n      names = [this.visitIdentifier(ctxAssemblyIdentifierOrList.identifier())];\n    } else if (ctxAssemblyIdentifierOrList.assemblyMember()) {\n      names = [\n        this.visitAssemblyMember(ctxAssemblyIdentifierOrList.assemblyMember())\n      ];\n    } else {\n      names = ctxAssemblyIdentifierOrList.assemblyIdentifierList().identifier().map((x) => this.visitIdentifier(x));\n    }\n    const node = {\n      type: \"AssemblyAssignment\",\n      names,\n      expression: this.visitAssemblyExpression(ctx.assemblyExpression())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyMember(ctx) {\n    const [accessed, member] = ctx.identifier();\n    const node = {\n      type: \"AssemblyMemberAccess\",\n      expression: this.visitIdentifier(accessed),\n      memberName: this.visitIdentifier(member)\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitLabelDefinition(ctx) {\n    const node = {\n      type: \"LabelDefinition\",\n      name: this._toText(ctx.identifier())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyStackAssignment(ctx) {\n    const node = {\n      type: \"AssemblyStackAssignment\",\n      name: this._toText(ctx.identifier()),\n      expression: this.visitAssemblyExpression(ctx.assemblyExpression())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyFor(ctx) {\n    const node = {\n      type: \"AssemblyFor\",\n      pre: this.visit(ctx.getChild(1)),\n      condition: this.visit(ctx.getChild(2)),\n      post: this.visit(ctx.getChild(3)),\n      body: this.visit(ctx.getChild(4))\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitAssemblyIf(ctx) {\n    const node = {\n      type: \"AssemblyIf\",\n      condition: this.visitAssemblyExpression(ctx.assemblyExpression()),\n      body: this.visitAssemblyBlock(ctx.assemblyBlock())\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitContinueStatement(ctx) {\n    const node = {\n      type: \"ContinueStatement\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  visitBreakStatement(ctx) {\n    const node = {\n      type: \"BreakStatement\"\n    };\n    return this._addMeta(node, ctx);\n  }\n  _toText(ctx) {\n    const text = ctx.text;\n    if (text === void 0) {\n      throw new Error(\"Assertion error: text should never be undefiend\");\n    }\n    return text;\n  }\n  _stateMutabilityToText(ctx) {\n    if (ctx.PureKeyword() !== void 0) {\n      return \"pure\";\n    }\n    if (ctx.ConstantKeyword() !== void 0) {\n      return \"constant\";\n    }\n    if (ctx.PayableKeyword() !== void 0) {\n      return \"payable\";\n    }\n    if (ctx.ViewKeyword() !== void 0) {\n      return \"view\";\n    }\n    throw new Error(\"Assertion error: non-exhaustive stateMutability check\");\n  }\n  _loc(ctx) {\n    const sourceLocation = {\n      start: {\n        line: ctx.start.line,\n        column: ctx.start.charPositionInLine\n      },\n      end: {\n        line: ctx.stop ? ctx.stop.line : ctx.start.line,\n        column: ctx.stop ? ctx.stop.charPositionInLine : ctx.start.charPositionInLine\n      }\n    };\n    return sourceLocation;\n  }\n  _range(ctx) {\n    var _a, _b;\n    return [ctx.start.startIndex, (_b = (_a = ctx.stop) == null ? void 0 : _a.stopIndex) != null ? _b : ctx.start.startIndex];\n  }\n  _addMeta(node, ctx) {\n    const nodeWithMeta = {\n      type: node.type\n    };\n    if (this.options.loc === true) {\n      node.loc = this._loc(ctx);\n    }\n    if (this.options.range === true) {\n      node.range = this._range(ctx);\n    }\n    return __objSpread(__objSpread({}, nodeWithMeta), node);\n  }\n  _mapCommasToNulls(children) {\n    if (children.length === 0) {\n      return [];\n    }\n    const values = [];\n    let comma = true;\n    for (const el of children) {\n      if (comma) {\n        if (this._toText(el) === \",\") {\n          values.push(null);\n        } else {\n          values.push(el);\n          comma = false;\n        }\n      } else {\n        if (this._toText(el) !== \",\") {\n          throw new Error(\"expected comma\");\n        }\n        comma = true;\n      }\n    }\n    if (comma) {\n      values.push(null);\n    }\n    return values;\n  }\n};\nfunction isBinOp(op) {\n  return binaryOpValues.includes(op);\n}\n\n// src/ErrorListener.ts\nvar import_antlr4 = __toModule(require_antlr4());\nvar ErrorListener = class extends import_antlr4.default.error.ErrorListener {\n  constructor() {\n    super();\n    this._errors = [];\n  }\n  syntaxError(recognizer, offendingSymbol, line, column, message) {\n    this._errors.push({message, line, column});\n  }\n  getErrors() {\n    return this._errors;\n  }\n  hasErrors() {\n    return this._errors.length > 0;\n  }\n};\nvar ErrorListener_default = ErrorListener;\n\n// src/tokens.ts\nvar import_tokens_string = __toModule(require_tokens_string());\nvar tokens = import_tokens_string.default;\nvar TYPE_TOKENS = [\n  \"var\",\n  \"bool\",\n  \"address\",\n  \"string\",\n  \"Int\",\n  \"Uint\",\n  \"Byte\",\n  \"Fixed\",\n  \"UFixed\"\n];\nfunction rsplit(str, value) {\n  const index = str.lastIndexOf(value);\n  return [str.substring(0, index), str.substring(index + 1, str.length)];\n}\nfunction normalizeTokenType(value) {\n  if (value.endsWith(\"'\")) {\n    value = value.substring(0, value.length - 1);\n  }\n  if (value.startsWith(\"'\")) {\n    value = value.substring(1, value.length);\n  }\n  return value;\n}\nfunction getTokenType(value) {\n  if (value === \"Identifier\" || value === \"from\") {\n    return \"Identifier\";\n  } else if (value === \"TrueLiteral\" || value === \"FalseLiteral\") {\n    return \"Boolean\";\n  } else if (value === \"VersionLiteral\") {\n    return \"Version\";\n  } else if (value === \"StringLiteral\") {\n    return \"String\";\n  } else if (TYPE_TOKENS.includes(value)) {\n    return \"Type\";\n  } else if (value === \"NumberUnit\") {\n    return \"Subdenomination\";\n  } else if (value === \"DecimalNumber\") {\n    return \"Numeric\";\n  } else if (value === \"HexLiteral\") {\n    return \"Hex\";\n  } else if (value === \"ReservedKeyword\") {\n    return \"Reserved\";\n  } else if (/^\\W+$/.test(value)) {\n    return \"Punctuator\";\n  } else {\n    return \"Keyword\";\n  }\n}\nfunction getTokenTypeMap() {\n  return tokens.split(\"\\n\").map((line) => rsplit(line, \"=\")).reduce((acum, [value, key]) => {\n    acum[parseInt(key, 10)] = normalizeTokenType(value);\n    return acum;\n  }, {});\n}\nfunction buildTokenList(tokensArg, options) {\n  const tokenTypes = getTokenTypeMap();\n  const result = tokensArg.map((token) => {\n    var _a, _b;\n    const type = getTokenType(tokenTypes[token.type]);\n    const node = {type, value: token.text};\n    if (options.range === true) {\n      node.range = [token.startIndex, token.stopIndex + 1];\n    }\n    if (options.loc === true) {\n      node.loc = {\n        start: {line: token.line, column: token.charPositionInLine},\n        end: {line: token.line, column: token.charPositionInLine + ((_b = (_a = token.text) == null ? void 0 : _a.length) != null ? _b : 0)}\n      };\n    }\n    return node;\n  });\n  return result;\n}\n\n// src/parser.ts\nvar ParserError = class extends Error {\n  constructor(args) {\n    super();\n    const {message, line, column} = args.errors[0];\n    this.message = `${message} (${line}:${column})`;\n    this.errors = args.errors;\n    if (Error.captureStackTrace !== void 0) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n};\nfunction tokenize(input, options = {}) {\n  const inputStream = new import_antlr4ts.ANTLRInputStream(input);\n  const lexer = new SolidityLexer(inputStream);\n  return buildTokenList(lexer.getAllTokens(), options);\n}\nfunction parse(input, options = {}) {\n  const inputStream = new import_antlr4ts.ANTLRInputStream(input);\n  const lexer = new SolidityLexer(inputStream);\n  const tokenStream = new import_antlr4ts.CommonTokenStream(lexer);\n  const parser = new SolidityParser(tokenStream);\n  const listener = new ErrorListener_default();\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(listener);\n  parser.removeErrorListeners();\n  parser.addErrorListener(listener);\n  parser.buildParseTree = true;\n  const sourceUnit = parser.sourceUnit();\n  const astBuilder = new ASTBuilder(options);\n  astBuilder.visit(sourceUnit);\n  const ast = astBuilder.result;\n  if (ast === null) {\n    throw new Error(\"ast should never be null\");\n  }\n  let tokenList = [];\n  if (options.tokens === true) {\n    tokenList = buildTokenList(tokenStream.getTokens(), options);\n  }\n  if (options.tolerant !== true && listener.hasErrors()) {\n    throw new ParserError({errors: listener.getErrors()});\n  }\n  if (options.tolerant === true && listener.hasErrors()) {\n    ast.errors = listener.getErrors();\n  }\n  if (options.tokens === true) {\n    ast.tokens = tokenList;\n  }\n  return ast;\n}\nfunction _isASTNode(node) {\n  if (typeof node !== \"object\" || node === null) {\n    return false;\n  }\n  const nodeAsAny = node;\n  if (Object.prototype.hasOwnProperty.call(nodeAsAny, \"type\") && typeof nodeAsAny.type === \"string\") {\n    return astNodeTypes.includes(nodeAsAny.type);\n  }\n  return false;\n}\nfunction visit(node, visitor, nodeParent) {\n  if (Array.isArray(node)) {\n    node.forEach((child) => visit(child, visitor, nodeParent));\n  }\n  if (!_isASTNode(node))\n    return;\n  let cont = true;\n  if (visitor[node.type] !== void 0) {\n    cont = visitor[node.type](node, nodeParent);\n  }\n  if (cont === false)\n    return;\n  for (const prop in node) {\n    if (Object.prototype.hasOwnProperty.call(node, prop)) {\n      visit(node[prop], visitor, node);\n    }\n  }\n  const selector = node.type + \":exit\";\n  if (visitor[selector] !== void 0) {\n    visitor[selector](node, nodeParent);\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n/*! https://mths.be/codepointat v0.2.0 by @mathias */\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\n//# sourceMappingURL=index.cjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-gas-reporter/node_modules/@solidity-parser/parser/dist/index.cjs.js\n");

/***/ })

};
;