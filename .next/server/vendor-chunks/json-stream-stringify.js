/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/json-stream-stringify";
exports.ids = ["vendor-chunks/json-stream-stringify"];
exports.modules = {

/***/ "(ssr)/./node_modules/json-stream-stringify/lib/umd/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/json-stream-stringify/lib/umd/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! stream */ \"stream\")) :\n  0;\n})(this, (function (exports, stream) { 'use strict';\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var _global, _global$JSON;\n\n  const rxEscapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g; // table of character substitutions\n\n  const meta = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    '\"': '\\\\\"',\n    '\\\\': '\\\\\\\\'\n  };\n\n  function isReadableStream(value) {\n    return typeof value.read === 'function' && typeof value.pause === 'function' && typeof value.resume === 'function' && typeof value.pipe === 'function' && typeof value.once === 'function' && typeof value.removeListener === 'function';\n  }\n\n  var Types;\n\n  (function (Types) {\n    Types[Types[\"Array\"] = 0] = \"Array\";\n    Types[Types[\"Object\"] = 1] = \"Object\";\n    Types[Types[\"ReadableString\"] = 2] = \"ReadableString\";\n    Types[Types[\"ReadableObject\"] = 3] = \"ReadableObject\";\n    Types[Types[\"Primitive\"] = 4] = \"Primitive\";\n    Types[Types[\"Promise\"] = 5] = \"Promise\";\n  })(Types || (Types = {}));\n\n  function getType(value) {\n    if (!value) return Types.Primitive;\n    if (typeof value.then === 'function') return Types.Promise;\n    if (isReadableStream(value)) return value._readableState.objectMode ? Types.ReadableObject : Types.ReadableString;\n    if (Array.isArray(value)) return Types.Array;\n    if (typeof value === 'object' || value instanceof Object) return Types.Object;\n    return Types.Primitive;\n  }\n\n  function escapeString(string) {\n    // Modified code, original code by Douglas Crockford\n    // Original: https://github.com/douglascrockford/JSON-js/blob/master/json2.js\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    return string.replace(rxEscapable, a => {\n      const c = meta[a];\n      return typeof c === 'string' ? c : `\\\\u${a.charCodeAt(0).toString(16).padStart(4, '0')}`;\n    });\n  }\n\n  let primitiveToJSON;\n\n  if (((_global = global) === null || _global === void 0 ? void 0 : (_global$JSON = _global.JSON) === null || _global$JSON === void 0 ? void 0 : _global$JSON.stringify) instanceof Function) {\n    try {\n      if (JSON.stringify(global.BigInt ? global.BigInt('123') : '') !== '123') throw new Error();\n      primitiveToJSON = JSON.stringify;\n    } catch (err) {\n      // Add support for bigint for primitiveToJSON\n      // eslint-disable-next-line no-confusing-arrow\n      primitiveToJSON = value => typeof value === 'bigint' ? String(value) : JSON.stringify(value);\n    }\n  } else {\n    primitiveToJSON = value => {\n      switch (typeof value) {\n        case 'string':\n          return `\"${escapeString(value)}\"`;\n\n        case 'number':\n          return Number.isFinite(value) ? String(value) : 'null';\n\n        case 'bigint':\n          return String(value);\n\n        case 'boolean':\n          return value ? 'true' : 'false';\n\n        case 'object':\n          if (!value) {\n            return 'null';\n          }\n\n        // eslint-disable-next-line no-fallthrough\n\n        default:\n          // This should never happen, I can't imagine a situation where this executes.\n          // If you find a way, please open a ticket or PR\n          throw Object.assign(new Error(`Not a primitive \"${typeof value}\".`), {\n            value\n          });\n      }\n    };\n  }\n  /*\r\n  function quoteString(string: string) {\r\n    return primitiveToJSON(String(string));\r\n  }\r\n  */\n\n\n  const cache = new Map();\n\n  function quoteString(string) {\n    const useCache = string.length < 10000; // eslint-disable-next-line no-lonely-if\n\n    if (useCache && cache.has(string)) {\n      return cache.get(string);\n    }\n\n    const str = primitiveToJSON(String(string));\n    if (useCache) cache.set(string, str);\n    return str;\n  }\n\n  function readAsPromised(stream, size) {\n    var _stream$_readableStat;\n\n    const value = stream.read(size);\n\n    if (value === null && !(stream.readableEnded || (_stream$_readableStat = stream._readableState) !== null && _stream$_readableStat !== void 0 && _stream$_readableStat.ended)) {\n      return new Promise((resolve, reject) => {\n        const endListener = () => resolve(null);\n\n        stream.once('end', endListener);\n        stream.once('error', reject);\n        stream.once('readable', () => {\n          stream.removeListener('end', endListener);\n          stream.removeListener('error', reject);\n          readAsPromised(stream, size).then(resolve, reject);\n        });\n      });\n    }\n\n    return Promise.resolve(value);\n  }\n\n  var ReadState;\n\n  (function (ReadState) {\n    ReadState[ReadState[\"Inactive\"] = 0] = \"Inactive\";\n    ReadState[ReadState[\"Reading\"] = 1] = \"Reading\";\n    ReadState[ReadState[\"ReadMore\"] = 2] = \"ReadMore\";\n    ReadState[ReadState[\"Consumed\"] = 3] = \"Consumed\";\n  })(ReadState || (ReadState = {}));\n\n  class JsonStreamStringify extends stream.Readable {\n    constructor(input, replacer, spaces, cycle = false, bufferSize = 512) {\n      super({\n        encoding: 'utf8'\n      });\n\n      _defineProperty(this, \"cycle\", void 0);\n\n      _defineProperty(this, \"bufferSize\", void 0);\n\n      _defineProperty(this, \"item\", void 0);\n\n      _defineProperty(this, \"indent\", void 0);\n\n      _defineProperty(this, \"root\", void 0);\n\n      _defineProperty(this, \"include\", void 0);\n\n      _defineProperty(this, \"replacer\", void 0);\n\n      _defineProperty(this, \"visited\", void 0);\n\n      _defineProperty(this, \"objectItem\", void 0);\n\n      _defineProperty(this, \"buffer\", '');\n\n      _defineProperty(this, \"bufferLength\", 0);\n\n      _defineProperty(this, \"pushCalled\", false);\n\n      _defineProperty(this, \"readSize\", 0);\n\n      _defineProperty(this, \"prePush\", void 0);\n\n      _defineProperty(this, \"readState\", ReadState.Inactive);\n\n      this.cycle = cycle;\n      this.bufferSize = bufferSize;\n      const spaceType = typeof spaces;\n\n      if (spaceType === 'number') {\n        this.indent = ' '.repeat(spaces);\n      } else if (spaceType === 'string') {\n        this.indent = spaces;\n      }\n\n      const replacerType = typeof replacer;\n\n      if (replacerType === 'object') {\n        this.include = replacer;\n      } else if (replacerType === 'function') {\n        this.replacer = replacer;\n      }\n\n      this.visited = cycle ? new WeakMap() : [];\n      this.root = {\n        value: {\n          '': input\n        },\n        depth: 0,\n        indent: '',\n        path: []\n      };\n      this.setItem(input, this.root, '');\n    }\n\n    setItem(value, parent, key = '') {\n      // call toJSON where applicable\n      if (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n      } // use replacer if applicable\n\n\n      if (this.replacer) {\n        value = this.replacer.call(parent.value, key, value);\n      } // coerece functions and symbols into undefined\n\n\n      if (value instanceof Function || typeof value === 'symbol') {\n        value = undefined;\n      }\n\n      const type = getType(value);\n      let path; // check for circular structure\n\n      if (!this.cycle && type !== Types.Primitive) {\n        if (this.visited.some(v => v === value)) {\n          this.destroy(Object.assign(new Error('Converting circular structure to JSON'), {\n            value,\n            key\n          }));\n          return;\n        }\n\n        this.visited.push(value);\n      } else if (this.cycle && type !== Types.Primitive) {\n        path = this.visited.get(value);\n\n        if (path) {\n          this._push(`{\"$ref\":\"$${path.map(v => `[${Number.isInteger(v) ? v : escapeString(quoteString(v))}]`).join('')}\"}`);\n\n          this.item = parent;\n          return;\n        }\n\n        path = parent === this.root ? [] : parent.path.concat(key);\n        this.visited.set(value, path);\n      }\n\n      if (type === Types.Object) {\n        this.setObjectItem(value, parent);\n      } else if (type === Types.Array) {\n        this.setArrayItem(value, parent);\n      } else if (type === Types.Primitive) {\n        if (parent !== this.root && typeof key === 'string') {\n          // (<any>parent).write(key, primitiveToJSON(value));\n          if (value === undefined) ; else {\n            this._push(primitiveToJSON(value));\n          } // undefined values in objects should be rejected\n\n        } else if (value === undefined && typeof key === 'number') {\n          // undefined values in array should be null\n          this._push('null');\n        } else if (value === undefined) ; else {\n          this._push(primitiveToJSON(value));\n        }\n\n        this.item = parent;\n        return;\n      } else if (type === Types.Promise) {\n        this.setPromiseItem(value, parent, key);\n      } else if (type === Types.ReadableString) {\n        this.setReadableStringItem(value, parent);\n      } else if (type === Types.ReadableObject) {\n        this.setReadableObjectItem(value, parent);\n      }\n\n      this.item.value = value;\n      this.item.depth = parent.depth + 1;\n      if (this.indent) this.item.indent = this.indent.repeat(this.item.depth);\n      this.item.path = path;\n    }\n\n    setReadableStringItem(input, parent) {\n      var _input$_readableState, _input$_readableState2;\n\n      if (input.readableEnded || (_input$_readableState = input._readableState) !== null && _input$_readableState !== void 0 && _input$_readableState.endEmitted) {\n        this.emit('error', new Error('Readable Stream has ended before it was serialized. All stream data have been lost'), input, parent.path);\n      } else if (input.readableFlowing || (_input$_readableState2 = input._readableState) !== null && _input$_readableState2 !== void 0 && _input$_readableState2.flowing) {\n        input.pause();\n        this.emit('error', new Error('Readable Stream is in flowing mode, data may have been lost. Trying to pause stream.'), input, parent.path);\n      }\n\n      const that = this;\n      this.prePush = '\"';\n      this.item = {\n        type: 'readable string',\n\n        async read(size) {\n          try {\n            const data = await readAsPromised(input, size);\n\n            if (data === null) {\n              that._push('\"');\n\n              that.item = parent;\n              that.unvisit(input);\n              return;\n            }\n\n            if (data) that._push(escapeString(data.toString()));\n          } catch (err) {\n            that.emit('error', err);\n            that.destroy();\n          }\n        }\n\n      };\n    }\n\n    setReadableObjectItem(input, parent) {\n      var _input$_readableState3, _input$_readableState4;\n\n      if (input.readableEnded || (_input$_readableState3 = input._readableState) !== null && _input$_readableState3 !== void 0 && _input$_readableState3.endEmitted) {\n        this.emit('error', new Error('Readable Stream has ended before it was serialized. All stream data have been lost'), input, parent.path);\n      } else if (input.readableFlowing || (_input$_readableState4 = input._readableState) !== null && _input$_readableState4 !== void 0 && _input$_readableState4.flowing) {\n        input.pause();\n        this.emit('error', new Error('Readable Stream is in flowing mode, data may have been lost. Trying to pause stream.'), input, parent.path);\n      }\n\n      const that = this;\n\n      this._push('[');\n\n      let first = true;\n      let i = 0;\n      const item = {\n        type: 'readable object',\n\n        async read() {\n          try {\n            let out = '';\n            const data = await readAsPromised(input);\n\n            if (data === null) {\n              if (i && that.indent) {\n                out += `\\n${parent.indent}`;\n              }\n\n              out += ']';\n\n              that._push(out);\n\n              that.item = parent;\n              that.unvisit(input);\n              return;\n            }\n\n            if (first) first = false;else out += ',';\n            if (that.indent) out += `\\n${item.indent}`;\n            that.prePush = out;\n            that.setItem(data, item, i);\n            i += 1;\n          } catch (err) {\n            that.emit('error', err);\n            that.destroy();\n          }\n        }\n\n      };\n      this.item = item;\n    }\n\n    setPromiseItem(input, parent, key) {\n      const that = this;\n      let read = false;\n      this.item = {\n        async read() {\n          if (read) return;\n\n          try {\n            read = true;\n            that.setItem(await input, parent, key);\n          } catch (err) {\n            that.emit('error', err);\n            that.destroy();\n          }\n        }\n\n      };\n    }\n\n    setArrayItem(input, parent) {\n      // const entries = input.slice().reverse();\n      let i = 0;\n      const len = input.length;\n      let first = true;\n      const that = this;\n      const item = {\n        read() {\n          let out = '';\n          let wasFirst = false;\n\n          if (first) {\n            first = false;\n            wasFirst = true;\n\n            if (!len) {\n              that._push('[]');\n\n              that.unvisit(input);\n              that.item = parent;\n              return;\n            }\n\n            out += '[';\n          }\n\n          const entry = input[i];\n\n          if (i === len) {\n            if (that.indent) out += `\\n${parent.indent}`;\n            out += ']';\n\n            that._push(out);\n\n            that.item = parent;\n            that.unvisit(input);\n            return;\n          }\n\n          if (!wasFirst) out += ',';\n          if (that.indent) out += `\\n${item.indent}`;\n\n          that._push(out);\n\n          that.setItem(entry, item, i);\n          i += 1;\n        }\n\n      };\n      this.item = item;\n    }\n\n    unvisit(item) {\n      if (this.cycle) return;\n\n      const _i = this.visited.indexOf(item);\n\n      if (_i > -1) this.visited.splice(_i, 1);\n    }\n\n    setObjectItem(input, parent = undefined) {\n      const keys = Object.keys(input);\n      let i = 0;\n      const len = keys.length;\n      let first = true;\n      const that = this;\n      const {\n        include\n      } = this;\n      let hasItems = false;\n      let key;\n      const item = {\n        read() {\n          var _include$indexOf;\n\n          if (i === 0) that._push('{');\n\n          if (i === len) {\n            that.objectItem = undefined;\n\n            if (!hasItems) {\n              that._push('}');\n            } else {\n              that._push(`${that.indent ? `\\n${parent.indent}` : ''}}`);\n            }\n\n            that.item = parent;\n            that.unvisit(input);\n            return;\n          }\n\n          key = keys[i];\n\n          if ((include === null || include === void 0 ? void 0 : (_include$indexOf = include.indexOf) === null || _include$indexOf === void 0 ? void 0 : _include$indexOf.call(include, key)) === -1) {\n            // replacer array excludes this key\n            i += 1;\n            return;\n          }\n\n          that.objectItem = item;\n          i += 1;\n          that.setItem(input[key], item, key);\n        },\n\n        write() {\n          const out = `${hasItems && !first ? ',' : ''}${item.indent ? `\\n${item.indent}` : ''}${quoteString(key)}:${that.indent ? ' ' : ''}`;\n          first = false;\n          hasItems = true;\n          that.objectItem = undefined;\n          return out;\n        }\n\n      };\n      this.item = item;\n    }\n\n    _push(data) {\n      const out = (this.objectItem ? this.objectItem.write() : '') + data;\n\n      if (this.prePush && out.length) {\n        this.buffer += this.prePush;\n        this.prePush = undefined;\n      }\n\n      this.buffer += out;\n\n      if (this.buffer.length >= this.bufferSize) {\n        this.pushCalled = !this.push(this.buffer);\n        this.buffer = '';\n        this.bufferLength = 0;\n        return false;\n      }\n\n      return true;\n    }\n\n    async _read(size) {\n      if (this.readState === ReadState.Consumed) return;\n\n      if (this.readState !== ReadState.Inactive) {\n        this.readState = ReadState.ReadMore;\n        return;\n      }\n\n      this.readState = ReadState.Reading;\n      this.pushCalled = false;\n      let p;\n\n      while (!this.pushCalled && this.item !== this.root && this.buffer !== undefined) {\n        p = this.item.read(size); // eslint-disable-next-line no-await-in-loop\n\n        if (p) await p;\n      }\n\n      if (this.buffer === undefined) return;\n\n      if (this.item === this.root) {\n        if (this.buffer.length) this.push(this.buffer);\n        this.push(null);\n        this.readState = ReadState.Consumed;\n        this.cleanup();\n        return;\n      }\n\n      if (this.readState === ReadState.ReadMore) {\n        this.readState = ReadState.Inactive;\n        await this._read(size);\n        return;\n      }\n\n      this.readState = ReadState.Inactive;\n    }\n\n    cleanup() {\n      this.readState = ReadState.Consumed;\n      this.buffer = undefined;\n      this.visited = undefined;\n      this.item = undefined;\n      this.root = undefined;\n      this.prePush = undefined;\n    }\n\n    destroy(error) {\n      var _super$destroy;\n\n      if (error) this.emit('error', error);\n      (_super$destroy = super.destroy) === null || _super$destroy === void 0 ? void 0 : _super$destroy.call(this);\n      this.cleanup();\n      return this;\n    }\n\n  }\n\n  exports.JsonStreamStringify = JsonStreamStringify;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/json-stream-stringify/lib/umd/index.js\n");

/***/ })

};
;